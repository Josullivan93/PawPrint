
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08015528  08015528  00025528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b68  08015b68  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  08015b68  08015b68  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015b68  08015b68  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b68  08015b68  00025b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b6c  08015b6c  00025b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08015b70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e158  200002d4  08015e44  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000e42c  08015e44  0003e42c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   000203c5  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054d5  00000000  00000000  0005070c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b00  00000000  00000000  00055be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001456  00000000  00000000  000576e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ea6a  00000000  00000000  00058b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d5a  00000000  00000000  000875a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb008  00000000  00000000  000ad302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000839c  00000000  00000000  001a830c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001b06a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015510 	.word	0x08015510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	08015510 	.word	0x08015510

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	213d      	movs	r1, #61	; 0x3d
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f002 fa17 	bl	800314c <HAL_I2C_Mem_Read>
 8000d1e:	4603      	mov	r3, r0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LIS2MDL_WriteReg>:
HAL_StatusTypeDef	LIS2MDL_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LIS2MDL_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	460b      	mov	r3, r1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	213d      	movs	r1, #61	; 0x3d
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f002 f8e5 	bl	8002f1c <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	21d7      	movs	r1, #215	; 0xd7
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f002 f9e3 	bl	800314c <HAL_I2C_Mem_Read>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LSM6DSO_ReadRegs>:

HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21d7      	movs	r1, #215	; 0xd7
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f002 f9c5 	bl	800314c <HAL_I2C_Mem_Read>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DSO_WriteReg>:

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21d7      	movs	r1, #215	; 0xd7
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f002 f893 	bl	8002f1c <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t inBuff[64];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
//	else if (GPIO_Pin == IMU_INT_Pin){
//
//		LSM6DSO_FIFO_RDY = 1;
//
//	}
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f001 fa24 	bl	800226a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f8df 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 fa0d 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2a:	f000 f9ed 	bl	8001208 <MX_DMA_Init>
  MX_I2C3_Init();
 8000e2e:	f000 f92b 	bl	8001088 <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000e32:	f000 f9c5 	bl	80011c0 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 8000e36:	f00f f8fd 	bl	8010034 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e3a:	f000 f965 	bl	8001108 <MX_RTC_Init>
  MX_FATFS_Init();
 8000e3e:	f009 fe9f 	bl	800ab80 <MX_FATFS_Init>

  /* USER CODE BEGIN 2 */
  int attempts = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	4952      	ldr	r1, [pc, #328]	; (8000f94 <main+0x17c>)
 8000e4a:	4853      	ldr	r0, [pc, #332]	; (8000f98 <main+0x180>)
 8000e4c:	f00d fddc 	bl	800ea08 <f_mount>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b51      	ldr	r3, [pc, #324]	; (8000f9c <main+0x184>)
 8000e56:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e58:	e008      	b.n	8000e6c <main+0x54>
	  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	494d      	ldr	r1, [pc, #308]	; (8000f94 <main+0x17c>)
 8000e5e:	484e      	ldr	r0, [pc, #312]	; (8000f98 <main+0x180>)
 8000e60:	f00d fdd2 	bl	800ea08 <f_mount>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <main+0x184>)
 8000e6a:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e6c:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <main+0x184>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <main+0x62>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	ddef      	ble.n	8000e5a <main+0x42>
  }

 HAL_Delay(500);
 8000e7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7e:	f001 fa69 	bl	8002354 <HAL_Delay>

  volMakeStatus = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 8000e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4b45      	ldr	r3, [pc, #276]	; (8000fa0 <main+0x188>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	4841      	ldr	r0, [pc, #260]	; (8000f94 <main+0x17c>)
 8000e90:	f00e f9b2 	bl	800f1f8 <f_mkfs>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <main+0x18c>)
 8000e9a:	701a      	strb	r2, [r3, #0]
  if ( volMakeStatus != FR_OK){
 8000e9c:	4b41      	ldr	r3, [pc, #260]	; (8000fa4 <main+0x18c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <main+0x90>
	  Error_Handler();
 8000ea4:	f000 fa48 	bl	8001338 <Error_Handler>
  }
  HAL_Delay(500);
 8000ea8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eac:	f001 fa52 	bl	8002354 <HAL_Delay>

  fileCreateStatus = f_open(&SDFile, "Out.csv", FA_CREATE_ALWAYS | FA_WRITE);
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	493d      	ldr	r1, [pc, #244]	; (8000fa8 <main+0x190>)
 8000eb4:	483d      	ldr	r0, [pc, #244]	; (8000fac <main+0x194>)
 8000eb6:	f00d fded 	bl	800ea94 <f_open>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <main+0x198>)
 8000ec0:	701a      	strb	r2, [r3, #0]
  if ( fileCreateStatus != FR_OK){
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	; (8000fb0 <main+0x198>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <main+0xb6>
	  Error_Handler();
 8000eca:	f000 fa35 	bl	8001338 <Error_Handler>
  }

  f_printf(&SDFile,"TimeStamp,XL_X,XL_Y,XL_Z,GYR_X,GYR_Y,GYR_Z,MAG_X,MAG_Y,MAG_Z\n");
 8000ece:	4939      	ldr	r1, [pc, #228]	; (8000fb4 <main+0x19c>)
 8000ed0:	4836      	ldr	r0, [pc, #216]	; (8000fac <main+0x194>)
 8000ed2:	f00e fe35 	bl	800fb40 <f_printf>

  f_sync( &SDFile );
 8000ed6:	4835      	ldr	r0, [pc, #212]	; (8000fac <main+0x194>)
 8000ed8:	f00e f90f 	bl	800f0fa <f_sync>

  /* Search for connection via USB */
  /* Once Received proceed to init and data collection */

  // Initialise Sensor
  pawprint_init(&hi2c3);
 8000edc:	4836      	ldr	r0, [pc, #216]	; (8000fb8 <main+0x1a0>)
 8000ede:	f000 fa30 	bl	8001342 <pawprint_init>

  LSM6DSO_FIFO_RDY = 0;
 8000ee2:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <main+0x1a4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ( OVERTEMP == 1){
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <main+0x1a8>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <main+0xdc>
		  HAL_PWREx_EnterSHUTDOWNMode(); // Future iterations should have physical control here - skip MCU and cut power from battery with Temp_INT
 8000ef0:	f003 ffb0 	bl	8004e54 <HAL_PWREx_EnterSHUTDOWNMode>
	  }

	  pawprint_readFIFO(&hi2c3, (char *) buffer, &writeIndex, &maxoutLength, &tag_counter, &FIFOout); // Combine some features input here into structs for simplicity
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <main+0x1ac>)
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <main+0x1b0>)
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <main+0x1b4>)
 8000efe:	4a34      	ldr	r2, [pc, #208]	; (8000fd0 <main+0x1b8>)
 8000f00:	4934      	ldr	r1, [pc, #208]	; (8000fd4 <main+0x1bc>)
 8000f02:	482d      	ldr	r0, [pc, #180]	; (8000fb8 <main+0x1a0>)
 8000f04:	f000 fc10 	bl	8001728 <pawprint_readFIFO>

	  // Check buffer fill
	  if (writeIndex >= 32000){
 8000f08:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <main+0x1b8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f10:	dbea      	blt.n	8000ee8 <main+0xd0>

		  f_write(&SDFile, (char *)&buffer, 32000, &byteCount);
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <main+0x1c0>)
 8000f14:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000f18:	492e      	ldr	r1, [pc, #184]	; (8000fd4 <main+0x1bc>)
 8000f1a:	4824      	ldr	r0, [pc, #144]	; (8000fac <main+0x194>)
 8000f1c:	f00d ff78 	bl	800ee10 <f_write>

		  // Copy end of buffer to beginning and clear
		  memcpy(tempBuff,(char *) &buffer[32000], 8000);
 8000f20:	4a2e      	ldr	r2, [pc, #184]	; (8000fdc <main+0x1c4>)
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <main+0x1bc>)
 8000f24:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8000f28:	4610      	mov	r0, r2
 8000f2a:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8000f2e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f32:	4619      	mov	r1, r3
 8000f34:	f010 ff12 	bl	8011d5c <memcpy>
		  memset((char *) &buffer[0], '\0', sizeof(buffer));
 8000f38:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4825      	ldr	r0, [pc, #148]	; (8000fd4 <main+0x1bc>)
 8000f40:	f010 fe8d 	bl	8011c5e <memset>
		  memcpy((char *) &buffer, tempBuff, 8000);
 8000f44:	4a23      	ldr	r2, [pc, #140]	; (8000fd4 <main+0x1bc>)
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <main+0x1c4>)
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000f50:	461a      	mov	r2, r3
 8000f52:	f010 ff03 	bl	8011d5c <memcpy>
		  memset(&tempBuff[0], '\0', sizeof(tempBuff));
 8000f56:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	481f      	ldr	r0, [pc, #124]	; (8000fdc <main+0x1c4>)
 8000f5e:	f010 fe7e 	bl	8011c5e <memset>

		  // Set writeIndex to remainder length
		  writeIndex -= byteCount;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <main+0x1b8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <main+0x1c0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <main+0x1b8>)
 8000f72:	601a      	str	r2, [r3, #0]
		  writeNum++;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <main+0x1c8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <main+0x1c8>)
 8000f7c:	6013      	str	r3, [r2, #0]

		  // fsync every 16MB to ensure SD buffer is being written
		  if( writeNum >= 250){
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <main+0x1c8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2bf9      	cmp	r3, #249	; 0xf9
 8000f84:	d9b0      	bls.n	8000ee8 <main+0xd0>
			  f_sync(&SDFile);
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <main+0x194>)
 8000f88:	f00e f8b7 	bl	800f0fa <f_sync>
			  writeNum = 0;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <main+0x1c8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
	  if ( OVERTEMP == 1){
 8000f92:	e7a9      	b.n	8000ee8 <main+0xd0>
 8000f94:	2000c234 	.word	0x2000c234
 8000f98:	2000c238 	.word	0x2000c238
 8000f9c:	2000bfe4 	.word	0x2000bfe4
 8000fa0:	2000bfe8 	.word	0x2000bfe8
 8000fa4:	2000bfe5 	.word	0x2000bfe5
 8000fa8:	08015528 	.word	0x08015528
 8000fac:	2000c468 	.word	0x2000c468
 8000fb0:	2000bfe6 	.word	0x2000bfe6
 8000fb4:	08015530 	.word	0x08015530
 8000fb8:	200002f0 	.word	0x200002f0
 8000fbc:	20000434 	.word	0x20000434
 8000fc0:	20000435 	.word	0x20000435
 8000fc4:	2000bfc4 	.word	0x2000bfc4
 8000fc8:	2000bfc0 	.word	0x2000bfc0
 8000fcc:	2000bfbc 	.word	0x2000bfbc
 8000fd0:	2000bfb8 	.word	0x2000bfb8
 8000fd4:	20000438 	.word	0x20000438
 8000fd8:	2000bfdc 	.word	0x2000bfdc
 8000fdc:	2000a078 	.word	0x2000a078
 8000fe0:	2000bfe0 	.word	0x2000bfe0

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b096      	sub	sp, #88	; 0x58
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	2244      	movs	r2, #68	; 0x44
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f010 fe33 	bl	8011c5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001006:	f44f 7000 	mov.w	r0, #512	; 0x200
 800100a:	f003 febd 	bl	8004d88 <HAL_PWREx_ControlVoltageScaling>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001014:	f000 f990 	bl	8001338 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001018:	2309      	movs	r3, #9
 800101a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001020:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001022:	2301      	movs	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001026:	2302      	movs	r3, #2
 8001028:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102a:	2303      	movs	r3, #3
 800102c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800102e:	2301      	movs	r3, #1
 8001030:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001032:	2308      	movs	r3, #8
 8001034:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001036:	2307      	movs	r3, #7
 8001038:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800103a:	2302      	movs	r3, #2
 800103c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800103e:	2302      	movs	r3, #2
 8001040:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4618      	mov	r0, r3
 8001048:	f003 ff1e 	bl	8004e88 <HAL_RCC_OscConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001052:	f000 f971 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001056:	230f      	movs	r3, #15
 8001058:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105a:	2303      	movs	r3, #3
 800105c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	2102      	movs	r1, #2
 800106e:	4618      	mov	r0, r3
 8001070:	f004 fae6 	bl	8005640 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800107a:	f000 f95d 	bl	8001338 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3758      	adds	r7, #88	; 0x58
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_I2C3_Init+0x74>)
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_I2C3_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_I2C3_Init+0x74>)
 8001094:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <MX_I2C3_Init+0x7c>)
 8001096:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_I2C3_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_I2C3_Init+0x74>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MX_I2C3_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_I2C3_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_I2C3_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_I2C3_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_I2C3_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010c2:	480e      	ldr	r0, [pc, #56]	; (80010fc <MX_I2C3_Init+0x74>)
 80010c4:	f001 fe8e 	bl	8002de4 <HAL_I2C_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010ce:	f000 f933 	bl	8001338 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <MX_I2C3_Init+0x74>)
 80010d6:	f002 fc0b 	bl	80038f0 <HAL_I2CEx_ConfigAnalogFilter>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010e0:	f000 f92a 	bl	8001338 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010e4:	2100      	movs	r1, #0
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_I2C3_Init+0x74>)
 80010e8:	f002 fc4d 	bl	8003986 <HAL_I2CEx_ConfigDigitalFilter>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f000 f921 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200002f0 	.word	0x200002f0
 8001100:	40005c00 	.word	0x40005c00
 8001104:	20303e5d 	.word	0x20303e5d

08001108 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <MX_RTC_Init+0xb0>)
 8001122:	4a26      	ldr	r2, [pc, #152]	; (80011bc <MX_RTC_Init+0xb4>)
 8001124:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <MX_RTC_Init+0xb0>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <MX_RTC_Init+0xb0>)
 800112e:	227f      	movs	r2, #127	; 0x7f
 8001130:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_RTC_Init+0xb0>)
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_RTC_Init+0xb0>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_RTC_Init+0xb0>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_RTC_Init+0xb0>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_RTC_Init+0xb0>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001150:	4819      	ldr	r0, [pc, #100]	; (80011b8 <MX_RTC_Init+0xb0>)
 8001152:	f005 ffb3 	bl	80070bc <HAL_RTC_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800115c:	f000 f8ec 	bl	8001338 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	4619      	mov	r1, r3
 800117a:	480f      	ldr	r0, [pc, #60]	; (80011b8 <MX_RTC_Init+0xb0>)
 800117c:	f006 f826 	bl	80071cc <HAL_RTC_SetTime>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001186:	f000 f8d7 	bl	8001338 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800118a:	2301      	movs	r3, #1
 800118c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800118e:	2301      	movs	r3, #1
 8001190:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_RTC_Init+0xb0>)
 80011a2:	f006 f8b0 	bl	8007306 <HAL_RTC_SetDate>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80011ac:	f000 f8c4 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000344 	.word	0x20000344
 80011bc:	40002800 	.word	0x40002800

080011c0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SDMMC1_SD_Init+0x40>)
 80011c6:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <MX_SDMMC1_SD_Init+0x44>)
 80011c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_SDMMC1_SD_Init+0x40>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_SDMMC1_SD_Init+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_SDMMC1_SD_Init+0x40>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_SDMMC1_SD_Init+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_SDMMC1_SD_Init+0x40>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 1;
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <MX_SDMMC1_SD_Init+0x40>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <MX_SDMMC1_SD_Init+0x40>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDMMC1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000368 	.word	0x20000368
 8001204:	40012800 	.word	0x40012800

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x38>)
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <MX_DMA_Init+0x38>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6493      	str	r3, [r2, #72]	; 0x48
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x38>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	203b      	movs	r0, #59	; 0x3b
 800122c:	f001 f991 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001230:	203b      	movs	r0, #59	; 0x3b
 8001232:	f001 f9aa 	bl	800258a <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <MX_GPIO_Init+0xec>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	4a34      	ldr	r2, [pc, #208]	; (8001330 <MX_GPIO_Init+0xec>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001266:	4b32      	ldr	r3, [pc, #200]	; (8001330 <MX_GPIO_Init+0xec>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <MX_GPIO_Init+0xec>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <MX_GPIO_Init+0xec>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <MX_GPIO_Init+0xec>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <MX_GPIO_Init+0xec>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	4a28      	ldr	r2, [pc, #160]	; (8001330 <MX_GPIO_Init+0xec>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <MX_GPIO_Init+0xec>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <MX_GPIO_Init+0xec>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a22      	ldr	r2, [pc, #136]	; (8001330 <MX_GPIO_Init+0xec>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MX_GPIO_Init+0xec>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80012ba:	2304      	movs	r3, #4
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4819      	ldr	r0, [pc, #100]	; (8001334 <MX_GPIO_Init+0xf0>)
 80012d0:	f001 fbae 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 80012d4:	2308      	movs	r3, #8
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4812      	ldr	r0, [pc, #72]	; (8001334 <MX_GPIO_Init+0xf0>)
 80012ea:	f001 fba1 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <MX_GPIO_Init+0xf0>)
 8001302:	f001 fb95 	bl	8002a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2008      	movs	r0, #8
 800130c:	f001 f921 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001310:	2008      	movs	r0, #8
 8001312:	f001 f93a 	bl	800258a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2009      	movs	r0, #9
 800131c:	f001 f919 	bl	8002552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001320:	2009      	movs	r0, #9
 8001322:	f001 f932 	bl	800258a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	48000800 	.word	0x48000800

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>

08001342 <pawprint_init>:

/* Private Variables */

/* Initialisation */

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]

	//Create required variables
	uint8_t LSM6DSO_WHO,MasterTemp, RegDat, LIS2MDL_WHO, STTS_PROD, STTS_MAN;

	// Boot Delay
	HAL_Delay(20);
 800134a:	2014      	movs	r0, #20
 800134c:	f001 f802 	bl	8002354 <HAL_Delay>
	/* Reset Sensor to defaults*/
	RegDat = 0x00;
 8001350:	2300      	movs	r3, #0
 8001352:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Ensure accessing correct registers
 8001354:	f107 030d 	add.w	r3, r7, #13
 8001358:	461a      	mov	r2, r3
 800135a:	2101      	movs	r1, #1
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fd35 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x05;
 8001362:	2305      	movs	r3, #5
 8001364:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat); // Software reset
 8001366:	f107 030d 	add.w	r3, r7, #13
 800136a:	461a      	mov	r2, r3
 800136c:	2112      	movs	r1, #18
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fd2c 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);
 8001374:	2064      	movs	r0, #100	; 0x64
 8001376:	f000 ffed 	bl	8002354 <HAL_Delay>

	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &LSM6DSO_WHO);
 800137a:	f107 030f 	add.w	r3, r7, #15
 800137e:	461a      	mov	r2, r3
 8001380:	210f      	movs	r1, #15
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fcea 	bl	8000d5c <LSM6DSO_ReadReg>

	/****** Enable PassThrough ******/
	RegDat = 0x40;
 8001388:	2340      	movs	r3, #64	; 0x40
 800138a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 800138c:	f107 030d 	add.w	r3, r7, #13
 8001390:	461a      	mov	r2, r3
 8001392:	2101      	movs	r1, #1
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fd19 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp);// Save Master Config to MasterTemp
 800139a:	f107 030e 	add.w	r3, r7, #14
 800139e:	461a      	mov	r2, r3
 80013a0:	2114      	movs	r1, #20
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fcda 	bl	8000d5c <LSM6DSO_ReadReg>
	MasterTemp |= 0x20;
 80013a8:	7bbb      	ldrb	r3, [r7, #14]
 80013aa:	f043 0320 	orr.w	r3, r3, #32
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 1 - sensor hub signal disable
 80013b2:	f107 030e 	add.w	r3, r7, #14
 80013b6:	461a      	mov	r2, r3
 80013b8:	2114      	movs	r1, #20
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fd06 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(5);																							// Delay
 80013c0:	2005      	movs	r0, #5
 80013c2:	f000 ffc7 	bl	8002354 <HAL_Delay>
	MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 80013c6:	7bbb      	ldrb	r3, [r7, #14]
 80013c8:	f043 0320 	orr.w	r3, r3, #32
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f023 0304 	bic.w	r3, r3, #4
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Master On bit to 0 to enable
 80013d6:	f107 030e 	add.w	r3, r7, #14
 80013da:	461a      	mov	r2, r3
 80013dc:	2114      	movs	r1, #20
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fcf4 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 0 to restore trigger
 80013ee:	f107 030e 	add.w	r3, r7, #14
 80013f2:	461a      	mov	r2, r3
 80013f4:	2114      	movs	r1, #20
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fce8 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 8001402:	b2db      	uxtb	r3, r3
 8001404:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Set Pullup to 0 to disable internal pullup
 8001406:	f107 030e 	add.w	r3, r7, #14
 800140a:	461a      	mov	r2, r3
 800140c:	2114      	movs	r1, #20
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fcdc 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = 0x10;
 8001414:	2310      	movs	r3, #16
 8001416:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 8001418:	f107 030e 	add.w	r3, r7, #14
 800141c:	461a      	mov	r2, r3
 800141e:	2114      	movs	r1, #20
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff fcd3 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 8001426:	2300      	movs	r3, #0
 8001428:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 800142a:	f107 030d 	add.w	r3, r7, #13
 800142e:	461a      	mov	r2, r3
 8001430:	2101      	movs	r1, #1
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fcca 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** LIS2MDL Configuration ***/

	LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &LIS2MDL_WHO);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	461a      	mov	r2, r3
 800143e:	214f      	movs	r1, #79	; 0x4f
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fc57 	bl	8000cf4 <LIS2MDL_ReadReg>

	while( LIS2MDL_WHO != LIS2MDL_ID)
 8001446:	e001      	b.n	800144c <pawprint_init+0x10a>

	/* Reset sensor to defaults */
	RegDat = 0x23;
 8001448:	2323      	movs	r3, #35	; 0x23
 800144a:	737b      	strb	r3, [r7, #13]
	while( LIS2MDL_WHO != LIS2MDL_ID)
 800144c:	7b3b      	ldrb	r3, [r7, #12]
 800144e:	2b40      	cmp	r3, #64	; 0x40
 8001450:	d1fa      	bne.n	8001448 <pawprint_init+0x106>
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //Reset registers by soft rst of cfg A to 1
 8001452:	f107 030d 	add.w	r3, r7, #13
 8001456:	461a      	mov	r2, r3
 8001458:	2160      	movs	r1, #96	; 0x60
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fc64 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(5);
 8001460:	2005      	movs	r0, #5
 8001462:	f000 ff77 	bl	8002354 <HAL_Delay>
	RegDat = 0x43;
 8001466:	2343      	movs	r3, #67	; 0x43
 8001468:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //ReBOOT of cfg A to 1
 800146a:	f107 030d 	add.w	r3, r7, #13
 800146e:	461a      	mov	r2, r3
 8001470:	2160      	movs	r1, #96	; 0x60
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fc58 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(20);
 8001478:	2014      	movs	r0, #20
 800147a:	f000 ff6b 	bl	8002354 <HAL_Delay>

	/* Setup */
	RegDat = 0x10;
 800147e:	2310      	movs	r3, #16
 8001480:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_C, &RegDat);// bdu set 1
 8001482:	f107 030d 	add.w	r3, r7, #13
 8001486:	461a      	mov	r2, r3
 8001488:	2162      	movs	r1, #98	; 0x62
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fc4c 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x8C;
 8001490:	238c      	movs	r3, #140	; 0x8c
 8001492:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat);// offset temp on, operating mode Default, & data rate  100Hz
 8001494:	f107 030d 	add.w	r3, r7, #13
 8001498:	461a      	mov	r2, r3
 800149a:	2160      	movs	r1, #96	; 0x60
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fc43 	bl	8000d28 <LIS2MDL_WriteReg>

	/**** Insert Calibration Code here - Requires Moving and Input trigger via USB ******/

	/*** STTS Setup ***/

	STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &STTS_PROD); // ProdID is 00 for this version of therm - therefore also use manID
 80014a2:	f107 030b 	add.w	r3, r7, #11
 80014a6:	461a      	mov	r2, r3
 80014a8:	21fd      	movs	r1, #253	; 0xfd
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fdc2 	bl	8002034 <STTS751_ReadReg>
	STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &STTS_MAN);
 80014b0:	f107 030a 	add.w	r3, r7, #10
 80014b4:	461a      	mov	r2, r3
 80014b6:	21fe      	movs	r1, #254	; 0xfe
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fdbb 	bl	8002034 <STTS751_ReadReg>

	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80014be:	e001      	b.n	80014c4 <pawprint_init+0x182>

	RegDat = 0x04;
 80014c0:	2304      	movs	r3, #4
 80014c2:	737b      	strb	r3, [r7, #13]
	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80014c4:	7afb      	ldrb	r3, [r7, #11]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <pawprint_init+0x18e>
 80014ca:	7abb      	ldrb	r3, [r7, #10]
 80014cc:	2b53      	cmp	r3, #83	; 0x53
 80014ce:	d1f7      	bne.n	80014c0 <pawprint_init+0x17e>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONV_RATE, &RegDat); // 1Hz
 80014d0:	f107 030d 	add.w	r3, r7, #13
 80014d4:	461a      	mov	r2, r3
 80014d6:	2104      	movs	r1, #4
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fc25 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x4B;
 80014de:	234b      	movs	r3, #75	; 0x4b
 80014e0:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_H, &RegDat); // Thermal Limit - default is 85 lowered to 75, low limit at freezing
 80014e2:	f107 030d 	add.w	r3, r7, #13
 80014e6:	461a      	mov	r2, r3
 80014e8:	2105      	movs	r1, #5
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fc1c 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_THERM_LIMIT, &RegDat); //Therm limit for THERM pin - not used in this design but set regardless for consistency
 80014f0:	f107 030d 	add.w	r3, r7, #13
 80014f4:	461a      	mov	r2, r3
 80014f6:	2120      	movs	r1, #32
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fc15 	bl	8000d28 <LIS2MDL_WriteReg>

	// No reset function - for safety ensure all thermal registers are set and not assumed to be correct
	RegDat = 0x00;
 80014fe:	2300      	movs	r3, #0
 8001500:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_L, &RegDat);
 8001502:	f107 030d 	add.w	r3, r7, #13
 8001506:	461a      	mov	r2, r3
 8001508:	2106      	movs	r1, #6
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fc0c 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_H, &RegDat);
 8001510:	f107 030d 	add.w	r3, r7, #13
 8001514:	461a      	mov	r2, r3
 8001516:	2107      	movs	r1, #7
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff fc05 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_L, &RegDat);
 800151e:	f107 030d 	add.w	r3, r7, #13
 8001522:	461a      	mov	r2, r3
 8001524:	2108      	movs	r1, #8
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fbfe 	bl	8000d28 <LIS2MDL_WriteReg>

	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONFIG, &RegDat);// Mask1 enabled - event pin active (b7), Run/standby mode (b6)
 800152c:	f107 030d 	add.w	r3, r7, #13
 8001530:	461a      	mov	r2, r3
 8001532:	2103      	movs	r1, #3
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fbf7 	bl	8000d28 <LIS2MDL_WriteReg>

	/*** Disable Pass Through ***/
	RegDat = 0x40;
 800153a:	2340      	movs	r3, #64	; 0x40
 800153c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 800153e:	f107 030d 	add.w	r3, r7, #13
 8001542:	461a      	mov	r2, r3
 8001544:	2101      	movs	r1, #1
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fc40 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);		// delay 100
 800154c:	2064      	movs	r0, #100	; 0x64
 800154e:	f000 ff01 	bl	8002354 <HAL_Delay>
	RegDat = 0x00;
 8001552:	2300      	movs	r3, #0
 8001554:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);	// Disable pass through
 8001556:	f107 030d 	add.w	r3, r7, #13
 800155a:	461a      	mov	r2, r3
 800155c:	2114      	movs	r1, #20
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fc34 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);	// Disable SHUB access
 8001564:	f107 030d 	add.w	r3, r7, #13
 8001568:	461a      	mov	r2, r3
 800156a:	2101      	movs	r1, #1
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fc2d 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Configure LSM6DSO ***/
	RegDat = 0xE2;
 8001572:	23e2      	movs	r3, #226	; 0xe2
 8001574:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL9_XL , &RegDat); // Disable I3C MIPI
 8001576:	f107 030d 	add.w	r3, r7, #13
 800157a:	461a      	mov	r2, r3
 800157c:	2118      	movs	r1, #24
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fc24 	bl	8000dcc <LSM6DSO_WriteReg>

	RegDat = 0x00;
 8001584:	2300      	movs	r3, #0
 8001586:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL , &RegDat); // Ensure Acc and Gyro Powered down
 8001588:	f107 030d 	add.w	r3, r7, #13
 800158c:	461a      	mov	r2, r3
 800158e:	2110      	movs	r1, #16
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fc1b 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G , &RegDat);
 8001596:	f107 030d 	add.w	r3, r7, #13
 800159a:	461a      	mov	r2, r3
 800159c:	2111      	movs	r1, #17
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fc14 	bl	8000dcc <LSM6DSO_WriteReg>

	/**** FIFO set up ****/
	RegDat = 0x32;
 80015a4:	2332      	movs	r3, #50	; 0x32
 80015a6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL1 , &RegDat);// Set Watermark level to 50
 80015a8:	f107 030d 	add.w	r3, r7, #13
 80015ac:	461a      	mov	r2, r3
 80015ae:	2107      	movs	r1, #7
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fc0b 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015b6:	2300      	movs	r3, #0
 80015b8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL2 , &RegDat);
 80015ba:	f107 030d 	add.w	r3, r7, #13
 80015be:	461a      	mov	r2, r3
 80015c0:	2108      	movs	r1, #8
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fc02 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x44;
 80015c8:	2344      	movs	r3, #68	; 0x44
 80015ca:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL3 , &RegDat); // Set BDR for XL and Gyro (104Hz both)
 80015cc:	f107 030d 	add.w	r3, r7, #13
 80015d0:	461a      	mov	r2, r3
 80015d2:	2109      	movs	r1, #9
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fbf9 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x41;
 80015da:	2341      	movs	r3, #65	; 0x41
 80015dc:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL4 , &RegDat);//41: FIFO mode, bqtch Timestamp, no temp   56: Set to continuous mode & batch Temp and Timestamp
 80015de:	f107 030d 	add.w	r3, r7, #13
 80015e2:	461a      	mov	r2, r3
 80015e4:	210a      	movs	r1, #10
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fbf0 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015ec:	2300      	movs	r3, #0
 80015ee:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_TAP_CFG0 , &RegDat); // Latch interrupt & clear on read
 80015f0:	f107 030d 	add.w	r3, r7, #13
 80015f4:	461a      	mov	r2, r3
 80015f6:	2156      	movs	r1, #86	; 0x56
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fbe7 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x38;
 80015fe:	2338      	movs	r3, #56	; 0x38
 8001600:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_INT1_CTRL , &RegDat); // FIFO int on INT1
 8001602:	f107 030d 	add.w	r3, r7, #13
 8001606:	461a      	mov	r2, r3
 8001608:	210d      	movs	r1, #13
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fbde 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Peripheral address / subaddress config ***/
	RegDat = 0x40;
 8001610:	2340      	movs	r3, #64	; 0x40
 8001612:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB access
 8001614:	f107 030d 	add.w	r3, r7, #13
 8001618:	461a      	mov	r2, r3
 800161a:	2101      	movs	r1, #1
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fbd5 	bl	8000dcc <LSM6DSO_WriteReg>

	// LIS2MDL Peripheral enable
	RegDat = LIS2MDL_I2C_ADDR;
 8001622:	233d      	movs	r3, #61	; 0x3d
 8001624:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_ADD, &RegDat);// Set address slv0
 8001626:	f107 030d 	add.w	r3, r7, #13
 800162a:	461a      	mov	r2, r3
 800162c:	2115      	movs	r1, #21
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fbcc 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = LIS2MDL_REG_OUTX_L;
 8001634:	2368      	movs	r3, #104	; 0x68
 8001636:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_SUBADD, &RegDat);// Set start register for data output
 8001638:	f107 030d 	add.w	r3, r7, #13
 800163c:	461a      	mov	r2, r3
 800163e:	2116      	movs	r1, #22
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fbc3 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0xCE;
 8001646:	23ce      	movs	r3, #206	; 0xce
 8001648:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_CONFIG, &RegDat);// Set bytes to read 0E Default 104Hz
 800164a:	f107 030d 	add.w	r3, r7, #13
 800164e:	461a      	mov	r2, r3
 8001650:	2117      	movs	r1, #23
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fbba 	bl	8000dcc <LSM6DSO_WriteReg>
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_ADD, &RegDat);// Set address slv1
//	RegDat = STTS751_REG_TEMP_H;
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_SUBADD, &RegDat);// Set start register for data output
//	RegDat = 0x0B;
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_CONFIG, &RegDat);// Set bytes to read - status between L and H registers so need to read 3
	RegDat = 0x00;
 8001658:	2300      	movs	r3, #0
 800165a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Disable SHUB access
 800165c:	f107 030d 	add.w	r3, r7, #13
 8001660:	461a      	mov	r2, r3
 8001662:	2101      	movs	r1, #1
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fbb1 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Configure Xl and Gyro */
	RegDat = 0x44;
 800166a:	2344      	movs	r3, #68	; 0x44
 800166c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat);// Enable block update and auto increment registers
 800166e:	f107 030d 	add.w	r3, r7, #13
 8001672:	461a      	mov	r2, r3
 8001674:	2112      	movs	r1, #18
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fba8 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x28;
 800167c:	2328      	movs	r3, #40	; 0x28
 800167e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL4_C, &RegDat);	// Int 1 and mask DRDY until Filter settles
 8001680:	f107 030d 	add.w	r3, r7, #13
 8001684:	461a      	mov	r2, r3
 8001686:	2113      	movs	r1, #19
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fb9f 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 800168e:	2310      	movs	r3, #16
 8001690:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL6_C, &RegDat);// XL High performance disabled
 8001692:	f107 030d 	add.w	r3, r7, #13
 8001696:	461a      	mov	r2, r3
 8001698:	2115      	movs	r1, #21
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fb96 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x80;
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL7_G, &RegDat);// Gyro High performance disabled
 80016a4:	f107 030d 	add.w	r3, r7, #13
 80016a8:	461a      	mov	r2, r3
 80016aa:	2116      	movs	r1, #22
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fb8d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x20;
 80016b2:	2320      	movs	r3, #32
 80016b4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL10_C, &RegDat);// enable timestamps
 80016b6:	f107 030d 	add.w	r3, r7, #13
 80016ba:	461a      	mov	r2, r3
 80016bc:	2119      	movs	r1, #25
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fb84 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL, &RegDat);//Set acc scale and sample rate  - ctrl 1 xl
 80016c8:	f107 030d 	add.w	r3, r7, #13
 80016cc:	461a      	mov	r2, r3
 80016ce:	2110      	movs	r1, #16
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fb7b 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80016d6:	2340      	movs	r3, #64	; 0x40
 80016d8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G, &RegDat);// Gyro scale and sample rate - ctrl 2 g
 80016da:	f107 030d 	add.w	r3, r7, #13
 80016de:	461a      	mov	r2, r3
 80016e0:	2111      	movs	r1, #17
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fb72 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Enable I2C Master to begin Data collection */
	RegDat = 0x40;
 80016e8:	2340      	movs	r3, #64	; 0x40
 80016ea:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB Reg Access
 80016ec:	f107 030d 	add.w	r3, r7, #13
 80016f0:	461a      	mov	r2, r3
 80016f2:	2101      	movs	r1, #1
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fb69 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x4C;
 80016fa:	234c      	movs	r3, #76	; 0x4c
 80016fc:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable pullups & accel trigger drdy & number external sensors
 80016fe:	f107 030d 	add.w	r3, r7, #13
 8001702:	461a      	mov	r2, r3
 8001704:	2114      	movs	r1, #20
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fb60 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800170c:	2300      	movs	r3, #0
 800170e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 8001710:	f107 030d 	add.w	r3, r7, #13
 8001714:	461a      	mov	r2, r3
 8001716:	2101      	movs	r1, #1
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fb57 	bl	8000dcc <LSM6DSO_WriteReg>

}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <pawprint_readFIFO>:
// Custom FIFO read function with single additional buffer - Trying to address missing data issue
// Will attempt to align on single line per time stamp
// SD write file incorporated to ensure  buffer is unloaded ASAP and does not overrun due to FIFO depth
// Perhaps add line to get maximum line size and check that if added to buffer would not overflow

void pawprint_readFIFO (I2C_HandleTypeDef *i2cHandle, char *buffer, int *writeIndex, int *maxoutLength, int *tag_counter, sensor_out *FIFOout) {
 8001728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800172c:	b0b1      	sub	sp, #196	; 0xc4
 800172e:	af14      	add	r7, sp, #80	; 0x50
 8001730:	6478      	str	r0, [r7, #68]	; 0x44
 8001732:	6439      	str	r1, [r7, #64]	; 0x40
 8001734:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001736:	63bb      	str	r3, [r7, #56]	; 0x38
	// Time at start of timer in UNIX to microsecond - reset by writing AAh to TIMESTAMP2 register when grabbing RTC time to sync
	// BDR value
	// Previous Timestamp
	// Previous Tag count

	HAL_StatusTypeDef statusOut = 0x00; // Success/Fail for each read/write
 8001738:	2300      	movs	r3, #0
 800173a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	uint8_t FIFOstatus[2];
	uint16_t FIFOdepth = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int outLength = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	66bb      	str	r3, [r7, #104]	; 0x68

	// Set Sensor BDR - Move to external input
	float bdr_xl = 104.0f;
 8001748:	4bbe      	ldr	r3, [pc, #760]	; (8001a44 <pawprint_readFIFO+0x31c>)
 800174a:	667b      	str	r3, [r7, #100]	; 0x64
	float bdr_gyr = 104.0f;
 800174c:	4bbd      	ldr	r3, [pc, #756]	; (8001a44 <pawprint_readFIFO+0x31c>)
 800174e:	663b      	str	r3, [r7, #96]	; 0x60
	float bdr_max = fmaxf(bdr_xl, bdr_gyr);
 8001750:	edd7 0a18 	vldr	s1, [r7, #96]	; 0x60
 8001754:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8001758:	f013 fea2 	bl	80154a0 <fmaxf>
 800175c:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

	// Period length converted to LSB - 1lsb = 25us
	float batch_period = (1000000*(1/bdr_max))/25;
 8001760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001764:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176c:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8001a48 <pawprint_readFIFO+0x320>
 8001770:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001774:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	// Read timestamp_endcount bit to check for timestamp overrun
		// Enable a bit that forces a check for timestamp < old timestamp? Or other overrun check?

	// Read watermark flag and if/else
	LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, FIFOstatus,2);
 8001780:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001784:	2302      	movs	r3, #2
 8001786:	213a      	movs	r1, #58	; 0x3a
 8001788:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800178a:	f7ff fb01 	bl	8000d90 <LSM6DSO_ReadRegs>

	if( ((FIFOstatus[1] >> 7) & 0x01) || ((FIFOstatus[1] >> 6) & 0x01) || ((FIFOstatus[1] >> 5) & 0x01) ){
 800178e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001792:	09db      	lsrs	r3, r3, #7
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d110      	bne.n	80017c0 <pawprint_readFIFO+0x98>
 800179e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80017a2:	099b      	lsrs	r3, r3, #6
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d108      	bne.n	80017c0 <pawprint_readFIFO+0x98>
 80017ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8220 	beq.w	8001c00 <pawprint_readFIFO+0x4d8>
		//if ((FIFOstatus[1] >> 6) & 0x01) {
		//	overrunStatus = 1;
		//}

		// get fifo depth
		FIFOdepth = (((uint16_t)FIFOstatus[1] & 0x03) << 8 ) + (uint16_t)FIFOstatus[0];
 80017c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		while(FIFOdepth--){
 80017da:	e209      	b.n	8001bf0 <pawprint_readFIFO+0x4c8>

			uint8_t FIFOdat[7] = {0};
 80017dc:	2300      	movs	r3, #0
 80017de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017e4:	2100      	movs	r1, #0
 80017e6:	460a      	mov	r2, r1
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	460a      	mov	r2, r1
 80017ec:	709a      	strb	r2, [r3, #2]

			statusOut = LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_DATA_OUT_TAG, &FIFOdat[0], 7);
 80017ee:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80017f2:	2307      	movs	r3, #7
 80017f4:	2178      	movs	r1, #120	; 0x78
 80017f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80017f8:	f7ff faca 	bl	8000d90 <LSM6DSO_ReadRegs>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

			// Get tag type & counter
			uint8_t tag = (FIFOdat[0] & 0xF8) >> 0x03;
 8001802:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			uint8_t new_tag_counter = (FIFOdat[0] & 0x06) >> 0x01;
 800180c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001810:	105b      	asrs	r3, r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

			// Is tag_counter same as previous?
			if ((new_tag_counter != *tag_counter)){
 800181c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	f000 813a 	beq.w	8001aa0 <pawprint_readFIFO+0x378>

					// send old data to buffer with snprintf
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 800182c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001834:	189e      	adds	r6, r3, r2
 8001836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f5c3 431c 	rsb	r3, r3, #39936	; 0x9c00
 800183e:	3340      	adds	r3, #64	; 0x40
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
																	(((float_t)FIFOout->timestamp) * 25.0f / 1000000.0f),
 8001842:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	ee07 3a90 	vmov	s15, r3
 800184c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001850:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001858:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001a48 <pawprint_readFIFO+0x320>
 800185c:	eec7 6a87 	vdiv.f32	s13, s15, s14
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 8001860:	ee16 0a90 	vmov	r0, s13
 8001864:	f7fe fe70 	bl	8000548 <__aeabi_f2d>
 8001868:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
							        								lsm6dso_from_fs2_to_mg(FIFOout->XLdat.x),
 800186c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001870:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f9c9 	bl	8001c0c <lsm6dso_from_fs2_to_mg>
 800187a:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe62 	bl	8000548 <__aeabi_f2d>
 8001884:	e9c7 0108 	strd	r0, r1, [r7, #32]
							        								lsm6dso_from_fs2_to_mg(FIFOout->XLdat.y),
 8001888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800188c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f9bb 	bl	8001c0c <lsm6dso_from_fs2_to_mg>
 8001896:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe54 	bl	8000548 <__aeabi_f2d>
 80018a0:	e9c7 0106 	strd	r0, r1, [r7, #24]
							        								lsm6dso_from_fs2_to_mg(FIFOout->XLdat.z),
 80018a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f9ad 	bl	8001c0c <lsm6dso_from_fs2_to_mg>
 80018b2:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe46 	bl	8000548 <__aeabi_f2d>
 80018bc:	e9c7 0104 	strd	r0, r1, [r7, #16]

									        						lsm6dso_from_fs125_to_mdps(FIFOout->GYRdat.x),
 80018c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018c4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f9b7 	bl	8001c3c <lsm6dso_from_fs125_to_mdps>
 80018ce:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe38 	bl	8000548 <__aeabi_f2d>
 80018d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
																	lsm6dso_from_fs125_to_mdps(FIFOout->GYRdat.y),
 80018dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018e0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 f9a9 	bl	8001c3c <lsm6dso_from_fs125_to_mdps>
 80018ea:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe2a 	bl	8000548 <__aeabi_f2d>
 80018f4:	e9c7 0100 	strd	r0, r1, [r7]
																	lsm6dso_from_fs125_to_mdps(FIFOout->GYRdat.z),
 80018f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018fc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f99b 	bl	8001c3c <lsm6dso_from_fs125_to_mdps>
 8001906:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe1c 	bl	8000548 <__aeabi_f2d>
 8001910:	4682      	mov	sl, r0
 8001912:	468b      	mov	fp, r1

																	lis2mdl_from_lsb_to_mgauss(FIFOout->MAGdat.x),
 8001914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001918:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f9a5 	bl	8001c6c <lis2mdl_from_lsb_to_mgauss>
 8001922:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe0e 	bl	8000548 <__aeabi_f2d>
 800192c:	4680      	mov	r8, r0
 800192e:	4689      	mov	r9, r1
																	lis2mdl_from_lsb_to_mgauss(FIFOout->MAGdat.y),
 8001930:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001934:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 f997 	bl	8001c6c <lis2mdl_from_lsb_to_mgauss>
 800193e:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe00 	bl	8000548 <__aeabi_f2d>
 8001948:	4604      	mov	r4, r0
 800194a:	460d      	mov	r5, r1
																	lis2mdl_from_lsb_to_mgauss(FIFOout->MAGdat.z));
 800194c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001950:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f989 	bl	8001c6c <lis2mdl_from_lsb_to_mgauss>
 800195a:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ," %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f , %.3f \n",
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fdf2 	bl	8000548 <__aeabi_f2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800196c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8001970:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8001974:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8001978:	ed97 7b00 	vldr	d7, [r7]
 800197c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001980:	ed97 7b02 	vldr	d7, [r7, #8]
 8001984:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001988:	ed97 7b04 	vldr	d7, [r7, #16]
 800198c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001990:	ed97 7b06 	vldr	d7, [r7, #24]
 8001994:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001998:	ed97 7b08 	vldr	d7, [r7, #32]
 800199c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80019a0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80019a4:	ed8d 7b00 	vstr	d7, [sp]
 80019a8:	4a28      	ldr	r2, [pc, #160]	; (8001a4c <pawprint_readFIFO+0x324>)
 80019aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019ac:	4630      	mov	r0, r6
 80019ae:	f010 f8a5 	bl	8011afc <sniprintf>
 80019b2:	66b8      	str	r0, [r7, #104]	; 0x68
					if (outLength < 0){

					}

					// clear data - Can I assign this in one? As not changing TimeStamp couldnt work it out
					FIFOout->XLdat.x = 0 ;
 80019b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019b8:	2200      	movs	r2, #0
 80019ba:	809a      	strh	r2, [r3, #4]
					FIFOout->XLdat.y = 0 ;
 80019bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019c0:	2200      	movs	r2, #0
 80019c2:	80da      	strh	r2, [r3, #6]
					FIFOout->XLdat.z = 0 ;
 80019c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019c8:	2200      	movs	r2, #0
 80019ca:	811a      	strh	r2, [r3, #8]
					FIFOout->GYRdat.x = 0 ;
 80019cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019d0:	2200      	movs	r2, #0
 80019d2:	815a      	strh	r2, [r3, #10]
					FIFOout->GYRdat.y = 0 ;
 80019d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019d8:	2200      	movs	r2, #0
 80019da:	819a      	strh	r2, [r3, #12]
					FIFOout->GYRdat.z = 0 ;
 80019dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019e0:	2200      	movs	r2, #0
 80019e2:	81da      	strh	r2, [r3, #14]
					FIFOout->MAGdat.x = 0 ;
 80019e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019e8:	2200      	movs	r2, #0
 80019ea:	821a      	strh	r2, [r3, #16]
					FIFOout->GYRdat.y = 0 ;
 80019ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f0:	2200      	movs	r2, #0
 80019f2:	819a      	strh	r2, [r3, #12]
					FIFOout->GYRdat.z = 0 ;
 80019f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f8:	2200      	movs	r2, #0
 80019fa:	81da      	strh	r2, [r3, #14]
					//*FIFOout = (sensor_out) {0};

					// update max line length - for debug and not used?
					if (outLength > *maxoutLength){
 80019fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dd02      	ble.n	8001a0c <pawprint_readFIFO+0x2e4>
						*maxoutLength = outLength;
 8001a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a0a:	601a      	str	r2, [r3, #0]
					}
					// update buffer write index
					*writeIndex += outLength;
 8001a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a12:	441a      	add	r2, r3
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	601a      	str	r2, [r3, #0]

				uint8_t diff_tag_counter = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

				if(new_tag_counter < *tag_counter)
 8001a1e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001a22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	da11      	bge.n	8001a50 <pawprint_readFIFO+0x328>
				{

					diff_tag_counter = new_tag_counter + 4u - *tag_counter;
 8001a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001a42:	e00e      	b.n	8001a62 <pawprint_readFIFO+0x33a>
 8001a44:	42d00000 	.word	0x42d00000
 8001a48:	49742400 	.word	0x49742400
 8001a4c:	08015578 	.word	0x08015578

				}
				else
				{
					diff_tag_counter = new_tag_counter - *tag_counter;
 8001a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
				}

				*tag_counter = new_tag_counter;
 8001a62:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a6a:	601a      	str	r2, [r3, #0]

				// Update Timestamp based on counter change - works reliably only where <4 batch periods have passed
				//uint32_t old_timestamp = FIFOout.timestamp;
				FIFOout->timestamp += (batch_period * diff_tag_counter);
 8001a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a7a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a86:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a96:	ee17 2a90 	vmov	r2, s15
 8001a9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a9e:	601a      	str	r2, [r3, #0]
				// Timestamp reset bit exists but do not see reason to use?

			}

			// switch to ID sensor from tag
			switch (tag)
 8001aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	2b0d      	cmp	r3, #13
 8001aa8:	f200 80a2 	bhi.w	8001bf0 <pawprint_readFIFO+0x4c8>
 8001aac:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <pawprint_readFIFO+0x38c>)
 8001aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab2:	bf00      	nop
 8001ab4:	08001aed 	.word	0x08001aed
 8001ab8:	08001b37 	.word	0x08001b37
 8001abc:	08001bf1 	.word	0x08001bf1
 8001ac0:	08001b81 	.word	0x08001b81
 8001ac4:	08001bf1 	.word	0x08001bf1
 8001ac8:	08001bf1 	.word	0x08001bf1
 8001acc:	08001bf1 	.word	0x08001bf1
 8001ad0:	08001bf1 	.word	0x08001bf1
 8001ad4:	08001bf1 	.word	0x08001bf1
 8001ad8:	08001bf1 	.word	0x08001bf1
 8001adc:	08001bf1 	.word	0x08001bf1
 8001ae0:	08001bf1 	.word	0x08001bf1
 8001ae4:	08001bf1 	.word	0x08001bf1
 8001ae8:	08001ba7 	.word	0x08001ba7
			{
				case 0x01: // Gyroscope
					FIFOout->GYRdat.x = (FIFOdat[2] << 8) | FIFOdat[1] ;
 8001aec:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b02:	815a      	strh	r2, [r3, #10]
					FIFOout->GYRdat.y = (FIFOdat[4] << 8) | FIFOdat[3];
 8001b04:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b1a:	819a      	strh	r2, [r3, #12]
					FIFOout->GYRdat.z = (FIFOdat[6] << 8) | FIFOdat[5];
 8001b1c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b21a      	sxth	r2, r3
 8001b2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b32:	81da      	strh	r2, [r3, #14]
					break;
 8001b34:	e05c      	b.n	8001bf0 <pawprint_readFIFO+0x4c8>

				case 0x02: // Accelerometer
					FIFOout->XLdat.x = (FIFOdat[2] << 8) | FIFOdat[1];
 8001b36:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b4c:	809a      	strh	r2, [r3, #4]
					FIFOout->XLdat.y = (FIFOdat[4] << 8) | FIFOdat[3];
 8001b4e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b64:	80da      	strh	r2, [r3, #6]
					FIFOout->XLdat.z = (FIFOdat[6] << 8) | FIFOdat[5];
 8001b66:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b7c:	811a      	strh	r2, [r3, #8]
					break;
 8001b7e:	e037      	b.n	8001bf0 <pawprint_readFIFO+0x4c8>

				case 0x04: // Timestamp
					FIFOout->timestamp = (FIFOdat[4] << 24) | (FIFOdat[3] << 16) | (FIFOdat[2] << 8) | FIFOdat[1];
 8001b80:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001b84:	061a      	lsls	r2, r3, #24
 8001b86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	4313      	orrs	r3, r2
 8001b96:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ba2:	601a      	str	r2, [r3, #0]
					break;
 8001ba4:	e024      	b.n	8001bf0 <pawprint_readFIFO+0x4c8>

				case 0x0E: // Magnetometer
					FIFOout->MAGdat.x = (FIFOdat[2] << 8) | FIFOdat[1];
 8001ba6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bbc:	821a      	strh	r2, [r3, #16]
					FIFOout->MAGdat.y = (FIFOdat[4] << 8) | FIFOdat[3];
 8001bbe:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bd4:	825a      	strh	r2, [r3, #18]
					FIFOout->MAGdat.z = (FIFOdat[6] << 8) | FIFOdat[5];
 8001bd6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bec:	829a      	strh	r2, [r3, #20]
					break;
 8001bee:	bf00      	nop
		while(FIFOdepth--){
 8001bf0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	f8a7 206e 	strh.w	r2, [r7, #110]	; 0x6e
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f47f adee 	bne.w	80017dc <pawprint_readFIFO+0xb4>

		}

	}

}
 8001c00:	bf00      	nop
 8001c02:	3774      	adds	r7, #116	; 0x74
 8001c04:	46bd      	mov	sp, r7
 8001c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c0a:	bf00      	nop

08001c0c <lsm6dso_from_fs2_to_mg>:


float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8001c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c1a:	ee07 3a90 	vmov	s15, r3
 8001c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c22:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c38 <lsm6dso_from_fs2_to_mg+0x2c>
 8001c26:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	3d79db23 	.word	0x3d79db23

08001c3c <lsm6dso_from_fs125_to_mdps>:

float_t lsm6dso_from_fs125_to_mdps(int16_t lsb)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 4.375f;
 8001c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c52:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c68 <lsm6dso_from_fs125_to_mdps+0x2c>
 8001c56:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	408c0000 	.word	0x408c0000

08001c6c <lis2mdl_from_lsb_to_mgauss>:

float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 8001c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c82:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001c86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_MspInit+0x44>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_MspInit+0x44>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_MspInit+0x44>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0ac      	sub	sp, #176	; 0xb0
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2288      	movs	r2, #136	; 0x88
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00f ffac 	bl	8011c5e <memset>
  if(hi2c->Instance==I2C3)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <HAL_I2C_MspInit+0xb0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d13b      	bne.n	8001d88 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d14:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 feb2 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d2a:	f7ff fb05 	bl	8001338 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3a:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001d46:	2303      	movs	r3, #3
 8001d48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480b      	ldr	r0, [pc, #44]	; (8001d98 <HAL_I2C_MspInit+0xb8>)
 8001d6c:	f000 fe60 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_I2C_MspInit+0xb4>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	37b0      	adds	r7, #176	; 0xb0
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40005c00 	.word	0x40005c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000800 	.word	0x48000800

08001d9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b0a4      	sub	sp, #144	; 0x90
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	2288      	movs	r2, #136	; 0x88
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00f ff56 	bl	8011c5e <memset>
  if(hrtc->Instance==RTC)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <HAL_RTC_MspInit+0x5c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d118      	bne.n	8001dee <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 fe5a 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dda:	f7ff faad 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HAL_RTC_MspInit+0x60>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <HAL_RTC_MspInit+0x60>)
 8001de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3790      	adds	r7, #144	; 0x90
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40002800 	.word	0x40002800
 8001dfc:	40021000 	.word	0x40021000

08001e00 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0ac      	sub	sp, #176	; 0xb0
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2288      	movs	r2, #136	; 0x88
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f00f ff1c 	bl	8011c5e <memset>
  if(hsd->Instance==SDMMC1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a51      	ldr	r2, [pc, #324]	; (8001f70 <HAL_SD_MspInit+0x170>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	f040 809a 	bne.w	8001f66 <HAL_SD_MspInit+0x166>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001e32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 8001e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 fe1f 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001e50:	f7ff fa72 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e54:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_SD_MspInit+0x174>)
 8001e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e58:	4a46      	ldr	r2, [pc, #280]	; (8001f74 <HAL_SD_MspInit+0x174>)
 8001e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e60:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <HAL_SD_MspInit+0x174>)
 8001e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6c:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_SD_MspInit+0x174>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	4a40      	ldr	r2, [pc, #256]	; (8001f74 <HAL_SD_MspInit+0x174>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e78:	4b3e      	ldr	r3, [pc, #248]	; (8001f74 <HAL_SD_MspInit+0x174>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <HAL_SD_MspInit+0x174>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <HAL_SD_MspInit+0x174>)
 8001e8a:	f043 0308 	orr.w	r3, r3, #8
 8001e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <HAL_SD_MspInit+0x174>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e9c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	482d      	ldr	r0, [pc, #180]	; (8001f78 <HAL_SD_MspInit+0x178>)
 8001ec4:	f000 fdb4 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eda:	2303      	movs	r3, #3
 8001edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eea:	4619      	mov	r1, r3
 8001eec:	4823      	ldr	r0, [pc, #140]	; (8001f7c <HAL_SD_MspInit+0x17c>)
 8001eee:	f000 fd9f 	bl	8002a30 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8001ef2:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001ef4:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_SD_MspInit+0x184>)
 8001ef6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001efa:	2207      	movs	r2, #7
 8001efc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f16:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8001f2e:	4814      	ldr	r0, [pc, #80]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f30:	f000 fb46 	bl	80025c0 <HAL_DMA_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_SD_MspInit+0x13e>
    {
      Error_Handler();
 8001f3a:	f7ff f9fd 	bl	8001338 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f50:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_SD_MspInit+0x180>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2031      	movs	r0, #49	; 0x31
 8001f5c:	f000 faf9 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001f60:	2031      	movs	r0, #49	; 0x31
 8001f62:	f000 fb12 	bl	800258a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001f66:	bf00      	nop
 8001f68:	37b0      	adds	r7, #176	; 0xb0
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40012800 	.word	0x40012800
 8001f74:	40021000 	.word	0x40021000
 8001f78:	48000800 	.word	0x48000800
 8001f7c:	48000c00 	.word	0x48000c00
 8001f80:	200003ec 	.word	0x200003ec
 8001f84:	40020444 	.word	0x40020444

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <NMI_Handler+0x4>

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 f99e 	bl	8002314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001fe0:	2004      	movs	r0, #4
 8001fe2:	f000 fee7 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_INT_Pin);
 8001fee:	2008      	movs	r0, #8
 8001ff0:	f000 fee0 	bl	8002db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <SDMMC1_IRQHandler+0x10>)
 8001ffe:	f005 fd29 	bl	8007a54 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000368 	.word	0x20000368

0800200c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <DMA2_Channel4_IRQHandler+0x10>)
 8002012:	f000 fc2e 	bl	8002872 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200003ec 	.word	0x200003ec

08002020 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <OTG_FS_IRQHandler+0x10>)
 8002026:	f001 fe4d 	bl	8003cc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000dbb4 	.word	0x2000dbb4

08002034 <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af04      	add	r7, sp, #16
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	460b      	mov	r3, r1
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	b29a      	uxth	r2, r3
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	9302      	str	r3, [sp, #8]
 800204c:	2301      	movs	r3, #1
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2301      	movs	r3, #1
 8002056:	2172      	movs	r1, #114	; 0x72
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f001 f877 	bl	800314c <HAL_I2C_Mem_Read>
 800205e:	4603      	mov	r3, r0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return 1;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_kill>:

int _kill(int pid, int sig)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002082:	f00f fe3f 	bl	8011d04 <__errno>
 8002086:	4603      	mov	r3, r0
 8002088:	2216      	movs	r2, #22
 800208a:	601a      	str	r2, [r3, #0]
  return -1;
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_exit>:

void _exit (int status)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ffe7 	bl	8002078 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020aa:	e7fe      	b.n	80020aa <_exit+0x12>

080020ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e00a      	b.n	80020d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020be:	f3af 8000 	nop.w
 80020c2:	4601      	mov	r1, r0
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	60ba      	str	r2, [r7, #8]
 80020ca:	b2ca      	uxtb	r2, r1
 80020cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	dbf0      	blt.n	80020be <_read+0x12>
  }

  return len;
 80020dc:	687b      	ldr	r3, [r7, #4]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e009      	b.n	800210c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	60ba      	str	r2, [r7, #8]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	dbf1      	blt.n	80020f8 <_write+0x12>
  }
  return len;
 8002114:	687b      	ldr	r3, [r7, #4]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_close>:

int _close(int file)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002146:	605a      	str	r2, [r3, #4]
  return 0;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_isatty>:

int _isatty(int file)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <_sbrk+0x5c>)
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <_sbrk+0x60>)
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <_sbrk+0x64>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <_sbrk+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d207      	bcs.n	80021c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b8:	f00f fda4 	bl	8011d04 <__errno>
 80021bc:	4603      	mov	r3, r0
 80021be:	220c      	movs	r2, #12
 80021c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	e009      	b.n	80021dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <_sbrk+0x64>)
 80021d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20018000 	.word	0x20018000
 80021e8:	00000800 	.word	0x00000800
 80021ec:	2000c228 	.word	0x2000c228
 80021f0:	2000e430 	.word	0x2000e430

080021f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <SystemInit+0x20>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <SystemInit+0x20>)
 8002200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800221c:	f7ff ffea 	bl	80021f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002220:	480c      	ldr	r0, [pc, #48]	; (8002254 <LoopForever+0x6>)
  ldr r1, =_edata
 8002222:	490d      	ldr	r1, [pc, #52]	; (8002258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <LoopForever+0xe>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002228:	e002      	b.n	8002230 <LoopCopyDataInit>

0800222a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800222c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222e:	3304      	adds	r3, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002234:	d3f9      	bcc.n	800222a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002238:	4c0a      	ldr	r4, [pc, #40]	; (8002264 <LoopForever+0x16>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800223c:	e001      	b.n	8002242 <LoopFillZerobss>

0800223e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002240:	3204      	adds	r2, #4

08002242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002244:	d3fb      	bcc.n	800223e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002246:	f00f fd63 	bl	8011d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800224a:	f7fe fde5 	bl	8000e18 <main>

0800224e <LoopForever>:

LoopForever:
    b LoopForever
 800224e:	e7fe      	b.n	800224e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002250:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 800225c:	08015b70 	.word	0x08015b70
  ldr r2, =_sbss
 8002260:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8002264:	2000e42c 	.word	0x2000e42c

08002268 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC1_2_IRQHandler>

0800226a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002274:	2003      	movs	r0, #3
 8002276:	f000 f961 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800227a:	200f      	movs	r0, #15
 800227c:	f000 f80e 	bl	800229c <HAL_InitTick>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	e001      	b.n	8002290 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800228c:	f7ff fd04 	bl	8001c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002290:	79fb      	ldrb	r3, [r7, #7]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_InitTick+0x6c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_InitTick+0x70>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_InitTick+0x6c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f96d 	bl	80025a6 <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10f      	bne.n	80022f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d809      	bhi.n	80022ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d8:	2200      	movs	r2, #0
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f000 f937 	bl	8002552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022e4:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_InitTick+0x74>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e007      	b.n	80022fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e004      	b.n	80022fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	e001      	b.n	80022fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000008 	.word	0x20000008
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x20>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x24>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4413      	add	r3, r2
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_IncTick+0x24>)
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000008 	.word	0x20000008
 8002338:	2000c22c 	.word	0x2000c22c

0800233c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_GetTick+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	2000c22c 	.word	0x2000c22c

08002354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800235c:	f7ff ffee 	bl	800233c <HAL_GetTick>
 8002360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d005      	beq.n	800237a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <HAL_Delay+0x44>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800237a:	bf00      	nop
 800237c:	f7ff ffde 	bl	800233c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d8f7      	bhi.n	800237c <HAL_Delay+0x28>
  {
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000008 	.word	0x20000008

0800239c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b8:	4013      	ands	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ce:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	60d3      	str	r3, [r2, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <__NVIC_GetPriorityGrouping+0x18>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 0307 	and.w	r3, r3, #7
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	db0b      	blt.n	800242a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4907      	ldr	r1, [pc, #28]	; (8002438 <__NVIC_EnableIRQ+0x38>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2001      	movs	r0, #1
 8002422:	fa00 f202 	lsl.w	r2, r0, r2
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000e100 	.word	0xe000e100

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	; (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	; (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f7ff ff8e 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff29 	bl	800239c <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff3e 	bl	80023e4 <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ff8e 	bl	8002490 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff5d 	bl	800243c <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff31 	bl	8002400 <__NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffa2 	bl	80024f8 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e098      	b.n	8002704 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <HAL_DMA_Init+0x150>)
 80025da:	429a      	cmp	r2, r3
 80025dc:	d80f      	bhi.n	80025fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_DMA_Init+0x154>)
 80025e6:	4413      	add	r3, r2
 80025e8:	4a4b      	ldr	r2, [pc, #300]	; (8002718 <HAL_DMA_Init+0x158>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a48      	ldr	r2, [pc, #288]	; (800271c <HAL_DMA_Init+0x15c>)
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
 80025fc:	e00e      	b.n	800261c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	4b46      	ldr	r3, [pc, #280]	; (8002720 <HAL_DMA_Init+0x160>)
 8002606:	4413      	add	r3, r2
 8002608:	4a43      	ldr	r2, [pc, #268]	; (8002718 <HAL_DMA_Init+0x158>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	009a      	lsls	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a42      	ldr	r2, [pc, #264]	; (8002724 <HAL_DMA_Init+0x164>)
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002676:	d039      	beq.n	80026ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <HAL_DMA_Init+0x15c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d11a      	bne.n	80026b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_DMA_Init+0x168>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f003 031c 	and.w	r3, r3, #28
 800268e:	210f      	movs	r1, #15
 8002690:	fa01 f303 	lsl.w	r3, r1, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	4924      	ldr	r1, [pc, #144]	; (8002728 <HAL_DMA_Init+0x168>)
 8002698:	4013      	ands	r3, r2
 800269a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <HAL_DMA_Init+0x168>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a8:	f003 031c 	and.w	r3, r3, #28
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	491d      	ldr	r1, [pc, #116]	; (8002728 <HAL_DMA_Init+0x168>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
 80026b6:	e019      	b.n	80026ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026b8:	4b1c      	ldr	r3, [pc, #112]	; (800272c <HAL_DMA_Init+0x16c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	f003 031c 	and.w	r3, r3, #28
 80026c4:	210f      	movs	r1, #15
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4917      	ldr	r1, [pc, #92]	; (800272c <HAL_DMA_Init+0x16c>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_DMA_Init+0x16c>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f003 031c 	and.w	r3, r3, #28
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	4911      	ldr	r1, [pc, #68]	; (800272c <HAL_DMA_Init+0x16c>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40020407 	.word	0x40020407
 8002714:	bffdfff8 	.word	0xbffdfff8
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	40020000 	.word	0x40020000
 8002720:	bffdfbf8 	.word	0xbffdfbf8
 8002724:	40020400 	.word	0x40020400
 8002728:	400200a8 	.word	0x400200a8
 800272c:	400204a8 	.word	0x400204a8

08002730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Start_IT+0x20>
 800274c:	2302      	movs	r3, #2
 800274e:	e04b      	b.n	80027e8 <HAL_DMA_Start_IT+0xb8>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d13a      	bne.n	80027da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f921 	bl	80029d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 020e 	orr.w	r2, r2, #14
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00f      	b.n	80027c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0204 	bic.w	r2, r2, #4
 80027b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 020a 	orr.w	r2, r2, #10
 80027c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e005      	b.n	80027e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d005      	beq.n	8002814 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2204      	movs	r2, #4
 800280c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
 8002812:	e029      	b.n	8002868 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 020e 	bic.w	r2, r2, #14
 8002822:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f003 021c 	and.w	r2, r3, #28
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
    }
  }
  return status;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f003 031c 	and.w	r3, r3, #28
 8002892:	2204      	movs	r2, #4
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d026      	beq.n	80028ec <HAL_DMA_IRQHandler+0x7a>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d021      	beq.n	80028ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d107      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0204 	bic.w	r2, r2, #4
 80028c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	f003 021c 	and.w	r2, r3, #28
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2104      	movs	r1, #4
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d071      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028ea:	e06c      	b.n	80029c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	f003 031c 	and.w	r3, r3, #28
 80028f4:	2202      	movs	r2, #2
 80028f6:	409a      	lsls	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02e      	beq.n	800295e <HAL_DMA_IRQHandler+0xec>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d029      	beq.n	800295e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10b      	bne.n	8002930 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020a 	bic.w	r2, r2, #10
 8002926:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f003 021c 	and.w	r2, r3, #28
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2102      	movs	r1, #2
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d038      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800295c:	e033      	b.n	80029c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f003 031c 	and.w	r3, r3, #28
 8002966:	2208      	movs	r2, #8
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d02a      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x156>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d025      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 020e 	bic.w	r2, r2, #14
 800298a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	f003 021c 	and.w	r2, r3, #28
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f202 	lsl.w	r2, r1, r2
 800299e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029c6:	bf00      	nop
 80029c8:	bf00      	nop
}
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f003 021c 	and.w	r2, r3, #28
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d108      	bne.n	8002a14 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a12:	e007      	b.n	8002a24 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3e:	e17f      	b.n	8002d40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2101      	movs	r1, #1
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8171 	beq.w	8002d3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d005      	beq.n	8002a70 <HAL_GPIO_Init+0x40>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d130      	bne.n	8002ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0201 	and.w	r2, r3, #1
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d118      	bne.n	8002b10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	08db      	lsrs	r3, r3, #3
 8002afa:	f003 0201 	and.w	r2, r3, #1
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d017      	beq.n	8002b4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d123      	bne.n	8002ba0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	08da      	lsrs	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3208      	adds	r2, #8
 8002b9a:	6939      	ldr	r1, [r7, #16]
 8002b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0203 	and.w	r2, r3, #3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80ac 	beq.w	8002d3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	4b5f      	ldr	r3, [pc, #380]	; (8002d60 <HAL_GPIO_Init+0x330>)
 8002be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be6:	4a5e      	ldr	r2, [pc, #376]	; (8002d60 <HAL_GPIO_Init+0x330>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6613      	str	r3, [r2, #96]	; 0x60
 8002bee:	4b5c      	ldr	r3, [pc, #368]	; (8002d60 <HAL_GPIO_Init+0x330>)
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bfa:	4a5a      	ldr	r2, [pc, #360]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c24:	d025      	beq.n	8002c72 <HAL_GPIO_Init+0x242>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4f      	ldr	r2, [pc, #316]	; (8002d68 <HAL_GPIO_Init+0x338>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <HAL_GPIO_Init+0x23e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4e      	ldr	r2, [pc, #312]	; (8002d6c <HAL_GPIO_Init+0x33c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d019      	beq.n	8002c6a <HAL_GPIO_Init+0x23a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4d      	ldr	r2, [pc, #308]	; (8002d70 <HAL_GPIO_Init+0x340>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x236>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4c      	ldr	r2, [pc, #304]	; (8002d74 <HAL_GPIO_Init+0x344>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x232>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4b      	ldr	r2, [pc, #300]	; (8002d78 <HAL_GPIO_Init+0x348>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x22e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4a      	ldr	r2, [pc, #296]	; (8002d7c <HAL_GPIO_Init+0x34c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x22a>
 8002c56:	2306      	movs	r3, #6
 8002c58:	e00c      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x244>
 8002c72:	2300      	movs	r3, #0
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c84:	4937      	ldr	r1, [pc, #220]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <HAL_GPIO_Init+0x350>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cb6:	4a32      	ldr	r2, [pc, #200]	; (8002d80 <HAL_GPIO_Init+0x350>)
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_GPIO_Init+0x350>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ce0:	4a27      	ldr	r2, [pc, #156]	; (8002d80 <HAL_GPIO_Init+0x350>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ce6:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <HAL_GPIO_Init+0x350>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	; (8002d80 <HAL_GPIO_Init+0x350>)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_GPIO_Init+0x350>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d34:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <HAL_GPIO_Init+0x350>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f47f ae78 	bne.w	8002a40 <HAL_GPIO_Init+0x10>
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40010000 	.word	0x40010000
 8002d68:	48000400 	.word	0x48000400
 8002d6c:	48000800 	.word	0x48000800
 8002d70:	48000c00 	.word	0x48000c00
 8002d74:	48001000 	.word	0x48001000
 8002d78:	48001400 	.word	0x48001400
 8002d7c:	48001800 	.word	0x48001800
 8002d80:	40010400 	.word	0x40010400

08002d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e001      	b.n	8002da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe f814 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e08d      	b.n	8002f12 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe ff68 	bl	8001ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d107      	bne.n	8002e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	e006      	b.n	8002e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d108      	bne.n	8002e86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	e007      	b.n	8002e96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69d9      	ldr	r1, [r3, #28]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	813b      	strh	r3, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	f040 80fd 	bne.w	800313e <HAL_I2C_Mem_Write+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_I2C_Mem_Write+0x34>
 8002f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0f1      	b.n	8003140 <HAL_I2C_Mem_Write+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Mem_Write+0x4e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0ea      	b.n	8003140 <HAL_I2C_Mem_Write+0x224>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f72:	f7ff f9e3 	bl	800233c <HAL_GetTick>
 8002f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2319      	movs	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fac7 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0d5      	b.n	8003140 <HAL_I2C_Mem_Write+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2221      	movs	r2, #33	; 0x21
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2240      	movs	r2, #64	; 0x40
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fbc:	88f8      	ldrh	r0, [r7, #6]
 8002fbe:	893a      	ldrh	r2, [r7, #8]
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	4603      	mov	r3, r0
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f9d7 	bl	8003380 <I2C_RequestMemoryWrite>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0ad      	b.n	8003140 <HAL_I2C_Mem_Write+0x224>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2bff      	cmp	r3, #255	; 0xff
 8002fec:	d90e      	bls.n	800300c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22ff      	movs	r2, #255	; 0xff
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fc41 	bl	800388c <I2C_TransferConfig>
 800300a:	e00f      	b.n	800302c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fc30 	bl	800388c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fac0 	bl	80035b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e07f      	b.n	8003140 <HAL_I2C_Mem_Write+0x224>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d034      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x1c8>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d130      	bne.n	80030e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	2200      	movs	r2, #0
 800308a:	2180      	movs	r1, #128	; 0x80
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fa43 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e051      	b.n	8003140 <HAL_I2C_Mem_Write+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2bff      	cmp	r3, #255	; 0xff
 80030a4:	d90e      	bls.n	80030c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	22ff      	movs	r2, #255	; 0xff
 80030aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	8979      	ldrh	r1, [r7, #10]
 80030b4:	2300      	movs	r3, #0
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fbe5 	bl	800388c <I2C_TransferConfig>
 80030c2:	e00f      	b.n	80030e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	8979      	ldrh	r1, [r7, #10]
 80030d6:	2300      	movs	r3, #0
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fbd4 	bl	800388c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d19e      	bne.n	800302c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 faa6 	bl	8003644 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e01e      	b.n	8003140 <HAL_I2C_Mem_Write+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2220      	movs	r2, #32
 8003108:	61da      	str	r2, [r3, #28]

    /* Clear NAK flag */

    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2210      	movs	r2, #16
 8003110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_I2C_Mem_Write+0x22c>)
 800311e:	400b      	ands	r3, r1
 8003120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <HAL_I2C_Mem_Write+0x224>
  }
  else
  {
    return HAL_BUSY;
 800313e:	2302      	movs	r3, #2
  }
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	fe00e800 	.word	0xfe00e800

0800314c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	4608      	mov	r0, r1
 8003156:	4611      	mov	r1, r2
 8003158:	461a      	mov	r2, r3
 800315a:	4603      	mov	r3, r0
 800315c:	817b      	strh	r3, [r7, #10]
 800315e:	460b      	mov	r3, r1
 8003160:	813b      	strh	r3, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b20      	cmp	r3, #32
 8003170:	f040 80fd 	bne.w	800336e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_I2C_Mem_Read+0x34>
 800317a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003186:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0f1      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_I2C_Mem_Read+0x4e>
 8003196:	2302      	movs	r3, #2
 8003198:	e0ea      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031a2:	f7ff f8cb 	bl	800233c <HAL_GetTick>
 80031a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2319      	movs	r3, #25
 80031ae:	2201      	movs	r2, #1
 80031b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f9af 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0d5      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2222      	movs	r2, #34	; 0x22
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2240      	movs	r2, #64	; 0x40
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ec:	88f8      	ldrh	r0, [r7, #6]
 80031ee:	893a      	ldrh	r2, [r7, #8]
 80031f0:	8979      	ldrh	r1, [r7, #10]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	4603      	mov	r3, r0
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f913 	bl	8003428 <I2C_RequestMemoryRead>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0ad      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2bff      	cmp	r3, #255	; 0xff
 800321c:	d90e      	bls.n	800323c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	22ff      	movs	r2, #255	; 0xff
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	b2da      	uxtb	r2, r3
 800322a:	8979      	ldrh	r1, [r7, #10]
 800322c:	4b52      	ldr	r3, [pc, #328]	; (8003378 <HAL_I2C_Mem_Read+0x22c>)
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fb29 	bl	800388c <I2C_TransferConfig>
 800323a:	e00f      	b.n	800325c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	b2da      	uxtb	r2, r3
 800324c:	8979      	ldrh	r1, [r7, #10]
 800324e:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_I2C_Mem_Read+0x22c>)
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fb18 	bl	800388c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003262:	2200      	movs	r2, #0
 8003264:	2104      	movs	r1, #4
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f956 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e07c      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d034      	beq.n	800331c <HAL_I2C_Mem_Read+0x1d0>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d130      	bne.n	800331c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f927 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e04d      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2bff      	cmp	r3, #255	; 0xff
 80032dc:	d90e      	bls.n	80032fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	22ff      	movs	r2, #255	; 0xff
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	2300      	movs	r3, #0
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fac9 	bl	800388c <I2C_TransferConfig>
 80032fa:	e00f      	b.n	800331c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	8979      	ldrh	r1, [r7, #10]
 800330e:	2300      	movs	r3, #0
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fab8 	bl	800388c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d19a      	bne.n	800325c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f98a 	bl	8003644 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e01a      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2220      	movs	r2, #32
 8003340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_I2C_Mem_Read+0x230>)
 800334e:	400b      	ands	r3, r1
 8003350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	80002400 	.word	0x80002400
 800337c:	fe00e800 	.word	0xfe00e800

08003380 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	4608      	mov	r0, r1
 800338a:	4611      	mov	r1, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4603      	mov	r3, r0
 8003390:	817b      	strh	r3, [r7, #10]
 8003392:	460b      	mov	r3, r1
 8003394:	813b      	strh	r3, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	8979      	ldrh	r1, [r7, #10]
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <I2C_RequestMemoryWrite+0xa4>)
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fa6f 	bl	800388c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	69b9      	ldr	r1, [r7, #24]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f8ff 	bl	80035b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e02c      	b.n	800341c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033c8:	893b      	ldrh	r3, [r7, #8]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
 80033d2:	e015      	b.n	8003400 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033d4:	893b      	ldrh	r3, [r7, #8]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	b29b      	uxth	r3, r3
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	69b9      	ldr	r1, [r7, #24]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f8e5 	bl	80035b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e012      	b.n	800341c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033f6:	893b      	ldrh	r3, [r7, #8]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2200      	movs	r2, #0
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f884 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	80002000 	.word	0x80002000

08003428 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4603      	mov	r3, r0
 8003438:	817b      	strh	r3, [r7, #10]
 800343a:	460b      	mov	r3, r1
 800343c:	813b      	strh	r3, [r7, #8]
 800343e:	4613      	mov	r3, r2
 8003440:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	8979      	ldrh	r1, [r7, #10]
 8003448:	4b20      	ldr	r3, [pc, #128]	; (80034cc <I2C_RequestMemoryRead+0xa4>)
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2300      	movs	r3, #0
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fa1c 	bl	800388c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	69b9      	ldr	r1, [r7, #24]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f8ac 	bl	80035b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e02c      	b.n	80034c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800346e:	893b      	ldrh	r3, [r7, #8]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	629a      	str	r2, [r3, #40]	; 0x28
 8003478:	e015      	b.n	80034a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800347a:	893b      	ldrh	r3, [r7, #8]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	b29b      	uxth	r3, r3
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	69b9      	ldr	r1, [r7, #24]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f892 	bl	80035b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e012      	b.n	80034c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800349c:	893b      	ldrh	r3, [r7, #8]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2140      	movs	r1, #64	; 0x40
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f831 	bl	8003518 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	80002000 	.word	0x80002000

080034d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d103      	bne.n	80034ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d007      	beq.n	800350c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	619a      	str	r2, [r3, #24]
  }
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003528:	e031      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d02d      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe ff03 	bl	800233c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d122      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4013      	ands	r3, r2
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	429a      	cmp	r2, r3
 8003556:	bf0c      	ite	eq
 8003558:	2301      	moveq	r3, #1
 800355a:	2300      	movne	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	429a      	cmp	r2, r3
 8003564:	d113      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	4013      	ands	r3, r2
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d0be      	beq.n	800352a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c2:	e033      	b.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f87f 	bl	80036cc <I2C_IsErrorOccurred>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e031      	b.n	800363c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d025      	beq.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e0:	f7fe feac 	bl	800233c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11a      	bne.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d013      	beq.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f043 0220 	orr.w	r2, r3, #32
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e007      	b.n	800363c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d1c4      	bne.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003650:	e02f      	b.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f838 	bl	80036cc <I2C_IsErrorOccurred>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e02d      	b.n	80036c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003666:	f7fe fe69 	bl	800233c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	429a      	cmp	r2, r3
 8003674:	d302      	bcc.n	800367c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d11a      	bne.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b20      	cmp	r3, #32
 8003688:	d013      	beq.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e007      	b.n	80036c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d1c8      	bne.n	8003652 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d068      	beq.n	80037ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2210      	movs	r2, #16
 80036fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003700:	e049      	b.n	8003796 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d045      	beq.n	8003796 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe fe17 	bl	800233c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_IsErrorOccurred+0x54>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d13a      	bne.n	8003796 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003732:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003742:	d121      	bne.n	8003788 <I2C_IsErrorOccurred+0xbc>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800374a:	d01d      	beq.n	8003788 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b20      	cmp	r3, #32
 8003750:	d01a      	beq.n	8003788 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003760:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003762:	f7fe fdeb 	bl	800233c <HAL_GetTick>
 8003766:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003768:	e00e      	b.n	8003788 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800376a:	f7fe fde7 	bl	800233c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b19      	cmp	r3, #25
 8003776:	d907      	bls.n	8003788 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f043 0320 	orr.w	r3, r3, #32
 800377e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003786:	e006      	b.n	8003796 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d1e9      	bne.n	800376a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d003      	beq.n	80037ac <I2C_IsErrorOccurred+0xe0>
 80037a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0aa      	beq.n	8003702 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2220      	movs	r2, #32
 80037ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800380e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003830:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01c      	beq.n	800387a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7ff fe45 	bl	80034d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6859      	ldr	r1, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <I2C_IsErrorOccurred+0x1bc>)
 8003852:	400b      	ands	r3, r1
 8003854:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	431a      	orrs	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800387a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800387e:	4618      	mov	r0, r3
 8003880:	3728      	adds	r7, #40	; 0x28
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	fe00e800 	.word	0xfe00e800

0800388c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	817b      	strh	r3, [r7, #10]
 800389a:	4613      	mov	r3, r2
 800389c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389e:	897b      	ldrh	r3, [r7, #10]
 80038a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038a4:	7a7b      	ldrb	r3, [r7, #9]
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	0d5b      	lsrs	r3, r3, #21
 80038c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <I2C_TransferConfig+0x60>)
 80038cc:	430b      	orrs	r3, r1
 80038ce:	43db      	mvns	r3, r3
 80038d0:	ea02 0103 	and.w	r1, r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	03ff63ff 	.word	0x03ff63ff

080038f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	d138      	bne.n	8003978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003910:	2302      	movs	r3, #2
 8003912:	e032      	b.n	800397a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6819      	ldr	r1, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	d139      	bne.n	8003a10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e033      	b.n	8003a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2224      	movs	r2, #36	; 0x24
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a20:	b08f      	sub	sp, #60	; 0x3c
 8003a22:	af0a      	add	r7, sp, #40	; 0x28
 8003a24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e116      	b.n	8003c5e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f00c fcfa 	bl	8010444 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2203      	movs	r2, #3
 8003a54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d102      	bne.n	8003a6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f005 fefd 	bl	800986e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	687e      	ldr	r6, [r7, #4]
 8003a7c:	466d      	mov	r5, sp
 8003a7e:	f106 0410 	add.w	r4, r6, #16
 8003a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a92:	1d33      	adds	r3, r6, #4
 8003a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a96:	6838      	ldr	r0, [r7, #0]
 8003a98:	f005 fe10 	bl	80096bc <USB_CoreInit>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0d7      	b.n	8003c5e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f005 feeb 	bl	8009890 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aba:	2300      	movs	r3, #0
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	e04a      	b.n	8003b56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	333d      	adds	r3, #61	; 0x3d
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	333c      	adds	r3, #60	; 0x3c
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	b298      	uxth	r0, r3
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	3356      	adds	r3, #86	; 0x56
 8003afc:	4602      	mov	r2, r0
 8003afe:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3340      	adds	r3, #64	; 0x40
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3344      	adds	r3, #68	; 0x44
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3348      	adds	r3, #72	; 0x48
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	334c      	adds	r3, #76	; 0x4c
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	3301      	adds	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d3af      	bcc.n	8003ac0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	e044      	b.n	8003bf0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b8e:	7bfa      	ldrb	r2, [r7, #15]
 8003b90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	3301      	adds	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3b5      	bcc.n	8003b66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	687e      	ldr	r6, [r7, #4]
 8003c02:	466d      	mov	r5, sp
 8003c04:	f106 0410 	add.w	r4, r6, #16
 8003c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c14:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c18:	1d33      	adds	r3, r6, #4
 8003c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c1c:	6838      	ldr	r0, [r7, #0]
 8003c1e:	f005 fe83 	bl	8009928 <USB_DevInit>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e014      	b.n	8003c5e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d102      	bne.n	8003c52 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f001 f869 	bl	8004d24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f006 fe31 	bl	800a8be <USB_DevDisconnect>

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_PCD_Start+0x1c>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e01c      	b.n	8003cbc <HAL_PCD_Start+0x56>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f005 fdd2 	bl	800984c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f006 fde5 	bl	800a87c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b08d      	sub	sp, #52	; 0x34
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f006 fea3 	bl	800aa26 <USB_GetMode>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 847e 	bne.w	80045e4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f006 fe07 	bl	800a900 <USB_ReadInterrupts>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8474 	beq.w	80045e2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f006 fdf4 	bl	800a900 <USB_ReadInterrupts>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d107      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f002 0202 	and.w	r2, r2, #2
 8003d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f006 fde2 	bl	800a900 <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d161      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0210 	bic.w	r2, r2, #16
 8003d54:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f003 020f 	and.w	r2, r3, #15
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	3304      	adds	r3, #4
 8003d74:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	0c5b      	lsrs	r3, r3, #17
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d124      	bne.n	8003dcc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d035      	beq.n	8003dfa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6a38      	ldr	r0, [r7, #32]
 8003da2:	f006 fc19 	bl	800a5d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003db2:	441a      	add	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dc4:	441a      	add	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	615a      	str	r2, [r3, #20]
 8003dca:	e016      	b.n	8003dfa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	0c5b      	lsrs	r3, r3, #17
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d110      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dde:	2208      	movs	r2, #8
 8003de0:	4619      	mov	r1, r3
 8003de2:	6a38      	ldr	r0, [r7, #32]
 8003de4:	f006 fbf8 	bl	800a5d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df4:	441a      	add	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0210 	orr.w	r2, r2, #16
 8003e08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f006 fd76 	bl	800a900 <USB_ReadInterrupts>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e1e:	f040 80a7 	bne.w	8003f70 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f006 fd7b 	bl	800a926 <USB_ReadDevAllOutEpInterrupt>
 8003e30:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e32:	e099      	b.n	8003f68 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 808e 	beq.w	8003f5c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f006 fd9f 	bl	800a98e <USB_ReadDevOutEPInterrupt>
 8003e50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fe7d 	bl	8004b70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2308      	movs	r3, #8
 8003e90:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 feb9 	bl	8004c0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2310      	movs	r3, #16
 8003eb4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d030      	beq.n	8003f22 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec8:	2b80      	cmp	r3, #128	; 0x80
 8003eca:	d109      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ede:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	78db      	ldrb	r3, [r3, #3]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d108      	bne.n	8003f10 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	4619      	mov	r1, r3
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f00c fbe0 	bl	80106d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2302      	movs	r3, #2
 8003f20:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f54:	461a      	mov	r2, r3
 8003f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f5a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	3301      	adds	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f47f af62 	bne.w	8003e34 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f006 fcc3 	bl	800a900 <USB_ReadInterrupts>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f84:	f040 80a4 	bne.w	80040d0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f006 fce4 	bl	800a95a <USB_ReadDevAllInEpInterrupt>
 8003f92:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f98:	e096      	b.n	80040c8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 808b 	beq.w	80040bc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f006 fd0a 	bl	800a9ca <USB_ReadDevInEPInterrupt>
 8003fb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d020      	beq.n	8004004 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	2201      	movs	r2, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69f9      	ldr	r1, [r7, #28]
 8003fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f00c fad1 	bl	80105a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401a:	461a      	mov	r2, r3
 800401c:	2308      	movs	r3, #8
 800401e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004036:	461a      	mov	r2, r3
 8004038:	2310      	movs	r3, #16
 800403a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d008      	beq.n	8004058 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004052:	461a      	mov	r2, r3
 8004054:	2340      	movs	r3, #64	; 0x40
 8004056:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d023      	beq.n	80040aa <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004064:	6a38      	ldr	r0, [r7, #32]
 8004066:	f005 fda1 	bl	8009bac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800406a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	3338      	adds	r3, #56	; 0x38
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	3304      	adds	r3, #4
 800407c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	78db      	ldrb	r3, [r3, #3]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d108      	bne.n	8004098 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f00c fb2e 	bl	80106f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	461a      	mov	r2, r3
 80040a6:	2302      	movs	r3, #2
 80040a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fcd2 	bl	8004a60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	3301      	adds	r3, #1
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f47f af65 	bne.w	8003f9a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f006 fc13 	bl	800a900 <USB_ReadInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040e4:	d122      	bne.n	800412c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	69fa      	ldr	r2, [r7, #28]
 80040f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004100:	2b01      	cmp	r3, #1
 8004102:	d108      	bne.n	8004116 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800410c:	2100      	movs	r1, #0
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f00c fd62 	bl	8010bd8 <HAL_PCDEx_LPM_Callback>
 8004114:	e002      	b.n	800411c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f00c fab2 	bl	8010680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800412a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f006 fbe5 	bl	800a900 <USB_ReadInterrupts>
 8004136:	4603      	mov	r3, r0
 8004138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004140:	d112      	bne.n	8004168 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b01      	cmp	r3, #1
 8004150:	d102      	bne.n	8004158 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f00c fa6e 	bl	8010634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004166:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f006 fbc7 	bl	800a900 <USB_ReadInterrupts>
 8004172:	4603      	mov	r3, r0
 8004174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800417c:	d121      	bne.n	80041c2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800418c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d111      	bne.n	80041bc <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	f003 020f 	and.w	r2, r3, #15
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80041b2:	2101      	movs	r1, #1
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f00c fd0f 	bl	8010bd8 <HAL_PCDEx_LPM_Callback>
 80041ba:	e002      	b.n	80041c2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f00c fa39 	bl	8010634 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f006 fb9a 	bl	800a900 <USB_ReadInterrupts>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	f040 80b5 	bne.w	8004344 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2110      	movs	r1, #16
 80041f4:	4618      	mov	r0, r3
 80041f6:	f005 fcd9 	bl	8009bac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041fe:	e046      	b.n	800428e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420c:	461a      	mov	r2, r3
 800420e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004212:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004232:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004240:	461a      	mov	r2, r3
 8004242:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004246:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	440a      	add	r2, r1
 800425e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004262:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004266:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004282:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004286:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	3301      	adds	r3, #1
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004294:	429a      	cmp	r2, r3
 8004296:	d3b3      	bcc.n	8004200 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80042aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d016      	beq.n	80042e2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c4:	f043 030b 	orr.w	r3, r3, #11
 80042c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	69fa      	ldr	r2, [r7, #28]
 80042d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042da:	f043 030b 	orr.w	r3, r3, #11
 80042de:	6453      	str	r3, [r2, #68]	; 0x44
 80042e0:	e015      	b.n	800430e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80042f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004308:	f043 030b 	orr.w	r3, r3, #11
 800430c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800431c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004320:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f006 fbaa 	bl	800aa88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f006 fad9 	bl	800a900 <USB_ReadInterrupts>
 800434e:	4603      	mov	r3, r0
 8004350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004358:	d124      	bne.n	80043a4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f006 fb6f 	bl	800aa42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f005 fc9c 	bl	8009ca6 <USB_GetDevSpeed>
 800436e:	4603      	mov	r3, r0
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681c      	ldr	r4, [r3, #0]
 800437a:	f001 faed 	bl	8005958 <HAL_RCC_GetHCLKFreq>
 800437e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004384:	b2db      	uxtb	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	4620      	mov	r0, r4
 800438a:	f005 f9c3 	bl	8009714 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f00c f931 	bl	80105f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80043a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f006 faa9 	bl	800a900 <USB_ReadInterrupts>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d10a      	bne.n	80043ce <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f00c f90e 	bl	80105da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f002 0208 	and.w	r2, r2, #8
 80043cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f006 fa94 	bl	800a900 <USB_ReadInterrupts>
 80043d8:	4603      	mov	r3, r0
 80043da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043de:	2b80      	cmp	r3, #128	; 0x80
 80043e0:	d122      	bne.n	8004428 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ee:	2301      	movs	r3, #1
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
 80043f2:	e014      	b.n	800441e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d105      	bne.n	8004418 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	b2db      	uxtb	r3, r3
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 faf3 	bl	80049fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	3301      	adds	r3, #1
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004424:	429a      	cmp	r2, r3
 8004426:	d3e5      	bcc.n	80043f4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f006 fa67 	bl	800a900 <USB_ReadInterrupts>
 8004432:	4603      	mov	r3, r0
 8004434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800443c:	d13b      	bne.n	80044b6 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800443e:	2301      	movs	r3, #1
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
 8004442:	e02b      	b.n	800449c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	3340      	adds	r3, #64	; 0x40
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d115      	bne.n	8004496 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800446a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800446c:	2b00      	cmp	r3, #0
 800446e:	da12      	bge.n	8004496 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	333f      	adds	r3, #63	; 0x3f
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800448c:	b2db      	uxtb	r3, r3
 800448e:	4619      	mov	r1, r3
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fab4 	bl	80049fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	3301      	adds	r3, #1
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d3ce      	bcc.n	8004444 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80044b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f006 fa20 	bl	800a900 <USB_ReadInterrupts>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ca:	d155      	bne.n	8004578 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044cc:	2301      	movs	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
 80044d0:	e045      	b.n	800455e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e6:	4613      	mov	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d12e      	bne.n	8004558 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	da2b      	bge.n	8004558 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800450c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004510:	429a      	cmp	r2, r3
 8004512:	d121      	bne.n	8004558 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004554:	6053      	str	r3, [r2, #4]
            break;
 8004556:	e007      	b.n	8004568 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	3301      	adds	r3, #1
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004564:	429a      	cmp	r2, r3
 8004566:	d3b4      	bcc.n	80044d2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695a      	ldr	r2, [r3, #20]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f006 f9bf 	bl	800a900 <USB_ReadInterrupts>
 8004582:	4603      	mov	r3, r0
 8004584:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d10a      	bne.n	80045a4 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f00c f8c2 	bl	8010718 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80045a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f006 f9a9 	bl	800a900 <USB_ReadInterrupts>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d115      	bne.n	80045e4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f00c f8b2 	bl	8010734 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6859      	ldr	r1, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
 80045e0:	e000      	b.n	80045e4 <HAL_PCD_IRQHandler+0x920>
      return;
 80045e2:	bf00      	nop
    }
  }
}
 80045e4:	3734      	adds	r7, #52	; 0x34
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd90      	pop	{r4, r7, pc}

080045ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_PCD_SetAddress+0x1a>
 8004600:	2302      	movs	r3, #2
 8004602:	e013      	b.n	800462c <HAL_PCD_SetAddress+0x42>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f006 f907 	bl	800a830 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	4608      	mov	r0, r1
 800463e:	4611      	mov	r1, r2
 8004640:	461a      	mov	r2, r3
 8004642:	4603      	mov	r3, r0
 8004644:	70fb      	strb	r3, [r7, #3]
 8004646:	460b      	mov	r3, r1
 8004648:	803b      	strh	r3, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004656:	2b00      	cmp	r3, #0
 8004658:	da0f      	bge.n	800467a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	3338      	adds	r3, #56	; 0x38
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	3304      	adds	r3, #4
 8004670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	705a      	strb	r2, [r3, #1]
 8004678:	e00f      	b.n	800469a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	f003 020f 	and.w	r2, r3, #15
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	4413      	add	r3, r2
 8004690:	3304      	adds	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	f003 030f 	and.w	r3, r3, #15
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046a6:	883a      	ldrh	r2, [r7, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	78ba      	ldrb	r2, [r7, #2]
 80046b0:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d004      	beq.n	80046c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046c4:	78bb      	ldrb	r3, [r7, #2]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d102      	bne.n	80046d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_PCD_EP_Open+0xaa>
 80046da:	2302      	movs	r3, #2
 80046dc:	e00e      	b.n	80046fc <HAL_PCD_EP_Open+0xc8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f005 faf9 	bl	8009ce4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80046fa:	7afb      	ldrb	r3, [r7, #11]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	da0f      	bge.n	8004738 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	3338      	adds	r3, #56	; 0x38
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	3304      	adds	r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	705a      	strb	r2, [r3, #1]
 8004736:	e00f      	b.n	8004758 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 020f 	and.w	r2, r3, #15
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	3304      	adds	r3, #4
 8004750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_PCD_EP_Close+0x6e>
 800476e:	2302      	movs	r3, #2
 8004770:	e00e      	b.n	8004790 <HAL_PCD_EP_Close+0x8c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	4618      	mov	r0, r3
 8004782:	f005 fb37 	bl	8009df4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	460b      	mov	r3, r1
 80047a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	f003 020f 	and.w	r2, r3, #15
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	3304      	adds	r3, #4
 80047c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2200      	movs	r2, #0
 80047d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6979      	ldr	r1, [r7, #20]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f005 fbdd 	bl	8009fac <USB_EPStartXfer>

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	f003 020f 	and.w	r2, r3, #15
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	460b      	mov	r3, r1
 800483a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800483c:	7afb      	ldrb	r3, [r7, #11]
 800483e:	f003 020f 	and.w	r2, r3, #15
 8004842:	4613      	mov	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	3338      	adds	r3, #56	; 0x38
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	3304      	adds	r3, #4
 8004852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2200      	movs	r2, #0
 8004864:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2201      	movs	r2, #1
 800486a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800486c:	7afb      	ldrb	r3, [r7, #11]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	b2da      	uxtb	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6979      	ldr	r1, [r7, #20]
 800487e:	4618      	mov	r0, r3
 8004880:	f005 fb94 	bl	8009fac <USB_EPStartXfer>

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d901      	bls.n	80048ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e04e      	b.n	800494a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da0f      	bge.n	80048d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f003 020f 	and.w	r2, r3, #15
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	3338      	adds	r3, #56	; 0x38
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	705a      	strb	r2, [r3, #1]
 80048d2:	e00d      	b.n	80048f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	4613      	mov	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	3304      	adds	r3, #4
 80048e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_PCD_EP_SetStall+0x82>
 800490c:	2302      	movs	r3, #2
 800490e:	e01c      	b.n	800494a <HAL_PCD_EP_SetStall+0xbc>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68f9      	ldr	r1, [r7, #12]
 800491e:	4618      	mov	r0, r3
 8004920:	f005 feb2 	bl	800a688 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f006 f8a4 	bl	800aa88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	460b      	mov	r3, r1
 800495c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 020f 	and.w	r2, r3, #15
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d901      	bls.n	8004970 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e042      	b.n	80049f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004974:	2b00      	cmp	r3, #0
 8004976:	da0f      	bge.n	8004998 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 020f 	and.w	r2, r3, #15
 800497e:	4613      	mov	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	3338      	adds	r3, #56	; 0x38
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4413      	add	r3, r2
 800498c:	3304      	adds	r3, #4
 800498e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	705a      	strb	r2, [r3, #1]
 8004996:	e00f      	b.n	80049b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	f003 020f 	and.w	r2, r3, #15
 800499e:	4613      	mov	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	3304      	adds	r3, #4
 80049b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_PCD_EP_ClrStall+0x86>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e00e      	b.n	80049f6 <HAL_PCD_EP_ClrStall+0xa4>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68f9      	ldr	r1, [r7, #12]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f005 febc 	bl	800a764 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	460b      	mov	r3, r1
 8004a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	da0c      	bge.n	8004a2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	f003 020f 	and.w	r2, r3, #15
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	3338      	adds	r3, #56	; 0x38
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4413      	add	r3, r2
 8004a26:	3304      	adds	r3, #4
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e00c      	b.n	8004a46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	f003 020f 	and.w	r2, r3, #15
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	3304      	adds	r3, #4
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f005 fcdf 	bl	800a410 <USB_EPStopXfer>
 8004a52:	4603      	mov	r3, r0
 8004a54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a56:	7afb      	ldrb	r3, [r7, #11]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	3338      	adds	r3, #56	; 0x38
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4413      	add	r3, r2
 8004a84:	3304      	adds	r3, #4
 8004a86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d901      	bls.n	8004a98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e067      	b.n	8004b68 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d902      	bls.n	8004ab4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	3303      	adds	r3, #3
 8004ab8:	089b      	lsrs	r3, r3, #2
 8004aba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004abc:	e026      	b.n	8004b0c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d902      	bls.n	8004ada <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3303      	adds	r3, #3
 8004ade:	089b      	lsrs	r3, r3, #2
 8004ae0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68d9      	ldr	r1, [r3, #12]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	6978      	ldr	r0, [r7, #20]
 8004af0:	f005 fd38 	bl	800a564 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	441a      	add	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	441a      	add	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d809      	bhi.n	8004b36 <PCD_WriteEmptyTxFifo+0xd6>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d203      	bcs.n	8004b36 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1c3      	bne.n	8004abe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d811      	bhi.n	8004b66 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	2201      	movs	r2, #1
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	6939      	ldr	r1, [r7, #16]
 8004b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b62:	4013      	ands	r3, r2
 8004b64:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	333c      	adds	r3, #60	; 0x3c
 8004b88:	3304      	adds	r3, #4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a19      	ldr	r2, [pc, #100]	; (8004c08 <PCD_EP_OutXfrComplete_int+0x98>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d124      	bne.n	8004bf0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	6093      	str	r3, [r2, #8]
 8004bc4:	e01a      	b.n	8004bfc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2320      	movs	r3, #32
 8004be0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f00b fcc1 	bl	8010570 <HAL_PCD_DataOutStageCallback>
 8004bee:	e005      	b.n	8004bfc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f00b fcba 	bl	8010570 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	4f54310a 	.word	0x4f54310a

08004c0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	333c      	adds	r3, #60	; 0x3c
 8004c24:	3304      	adds	r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a0c      	ldr	r2, [pc, #48]	; (8004c70 <PCD_EP_OutSetupPacket_int+0x64>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d90e      	bls.n	8004c60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f00b fc73 	bl	801054c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	4f54300a 	.word	0x4f54300a

08004c74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
 8004c80:	4613      	mov	r3, r2
 8004c82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d107      	bne.n	8004ca2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c92:	883b      	ldrh	r3, [r7, #0]
 8004c94:	0419      	lsls	r1, r3, #16
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004ca0:	e028      	b.n	8004cf4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e00d      	b.n	8004cd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	3340      	adds	r3, #64	; 0x40
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	4413      	add	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	7bfa      	ldrb	r2, [r7, #15]
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d3ec      	bcc.n	8004cb6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cdc:	883b      	ldrh	r3, [r7, #0]
 8004cde:	0418      	lsls	r0, r3, #16
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	4302      	orrs	r2, r0
 8004cec:	3340      	adds	r3, #64	; 0x40
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d56:	f043 0303 	orr.w	r3, r3, #3
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40007000 	.word	0x40007000

08004d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d96:	d130      	bne.n	8004dfa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d98:	4b23      	ldr	r3, [pc, #140]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da4:	d038      	beq.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004da6:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dae:	4a1e      	ldr	r2, [pc, #120]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004db4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004db6:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2232      	movs	r2, #50	; 0x32
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	0c9b      	lsrs	r3, r3, #18
 8004dc8:	3301      	adds	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dcc:	e002      	b.n	8004dd4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dd4:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de0:	d102      	bne.n	8004de8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f2      	bne.n	8004dce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004de8:	4b0f      	ldr	r3, [pc, #60]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004df4:	d110      	bne.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e00f      	b.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e06:	d007      	beq.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e08:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e10:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40007000 	.word	0x40007000
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	431bde83 	.word	0x431bde83

08004e34 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e42:	6053      	str	r3, [r2, #4]
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40007000 	.word	0x40007000

08004e54 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f023 0307 	bic.w	r3, r3, #7
 8004e60:	4a07      	ldr	r2, [pc, #28]	; (8004e80 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8004e62:	f043 0304 	orr.w	r3, r3, #4
 8004e66:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	4a05      	ldr	r2, [pc, #20]	; (8004e84 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8004e6e:	f043 0304 	orr.w	r3, r3, #4
 8004e72:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004e74:	bf30      	wfi
}
 8004e76:	bf00      	nop
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	40007000 	.word	0x40007000
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e3ca      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9a:	4b97      	ldr	r3, [pc, #604]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ea4:	4b94      	ldr	r3, [pc, #592]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80e4 	beq.w	8005084 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x4a>
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b0c      	cmp	r3, #12
 8004ec6:	f040 808b 	bne.w	8004fe0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	f040 8087 	bne.w	8004fe0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ed2:	4b89      	ldr	r3, [pc, #548]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_RCC_OscConfig+0x62>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e3a2      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1a      	ldr	r2, [r3, #32]
 8004eee:	4b82      	ldr	r3, [pc, #520]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <HAL_RCC_OscConfig+0x7c>
 8004efa:	4b7f      	ldr	r3, [pc, #508]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f02:	e005      	b.n	8004f10 <HAL_RCC_OscConfig+0x88>
 8004f04:	4b7c      	ldr	r3, [pc, #496]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d223      	bcs.n	8004f5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fd55 	bl	80059c8 <RCC_SetFlashLatencyFromMSIRange>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e383      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f28:	4b73      	ldr	r3, [pc, #460]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a72      	ldr	r2, [pc, #456]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f2e:	f043 0308 	orr.w	r3, r3, #8
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b70      	ldr	r3, [pc, #448]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	496d      	ldr	r1, [pc, #436]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f46:	4b6c      	ldr	r3, [pc, #432]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	4968      	ldr	r1, [pc, #416]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	604b      	str	r3, [r1, #4]
 8004f5a:	e025      	b.n	8004fa8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f5c:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a65      	ldr	r2, [pc, #404]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f62:	f043 0308 	orr.w	r3, r3, #8
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4b63      	ldr	r3, [pc, #396]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	4960      	ldr	r1, [pc, #384]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f7a:	4b5f      	ldr	r3, [pc, #380]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	495b      	ldr	r1, [pc, #364]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fd15 	bl	80059c8 <RCC_SetFlashLatencyFromMSIRange>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e343      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fa8:	f000 fc4a 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b52      	ldr	r3, [pc, #328]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	091b      	lsrs	r3, r3, #4
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	4950      	ldr	r1, [pc, #320]	; (80050fc <HAL_RCC_OscConfig+0x274>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	4a4e      	ldr	r2, [pc, #312]	; (8005100 <HAL_RCC_OscConfig+0x278>)
 8004fc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fc8:	4b4e      	ldr	r3, [pc, #312]	; (8005104 <HAL_RCC_OscConfig+0x27c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fd f965 	bl	800229c <HAL_InitTick>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d052      	beq.n	8005082 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	e327      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d032      	beq.n	800504e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fe8:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a42      	ldr	r2, [pc, #264]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ff4:	f7fd f9a2 	bl	800233c <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ffc:	f7fd f99e 	bl	800233c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e310      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800500e:	4b3a      	ldr	r3, [pc, #232]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800501a:	4b37      	ldr	r3, [pc, #220]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a36      	ldr	r2, [pc, #216]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8005020:	f043 0308 	orr.w	r3, r3, #8
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	4b34      	ldr	r3, [pc, #208]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	4931      	ldr	r1, [pc, #196]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005038:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	492c      	ldr	r1, [pc, #176]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]
 800504c:	e01a      	b.n	8005084 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800504e:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800505a:	f7fd f96f 	bl	800233c <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005062:	f7fd f96b 	bl	800233c <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e2dd      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005074:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f0      	bne.n	8005062 <HAL_RCC_OscConfig+0x1da>
 8005080:	e000      	b.n	8005084 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005082:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d074      	beq.n	800517a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b08      	cmp	r3, #8
 8005094:	d005      	beq.n	80050a2 <HAL_RCC_OscConfig+0x21a>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	d10e      	bne.n	80050ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d10b      	bne.n	80050ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d064      	beq.n	8005178 <HAL_RCC_OscConfig+0x2f0>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d160      	bne.n	8005178 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e2ba      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c2:	d106      	bne.n	80050d2 <HAL_RCC_OscConfig+0x24a>
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a0b      	ldr	r2, [pc, #44]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 80050ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	e026      	b.n	8005120 <HAL_RCC_OscConfig+0x298>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050da:	d115      	bne.n	8005108 <HAL_RCC_OscConfig+0x280>
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 80050e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a02      	ldr	r2, [pc, #8]	; (80050f8 <HAL_RCC_OscConfig+0x270>)
 80050ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	e014      	b.n	8005120 <HAL_RCC_OscConfig+0x298>
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	08015644 	.word	0x08015644
 8005100:	20000000 	.word	0x20000000
 8005104:	20000004 	.word	0x20000004
 8005108:	4ba0      	ldr	r3, [pc, #640]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a9f      	ldr	r2, [pc, #636]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800510e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	4b9d      	ldr	r3, [pc, #628]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a9c      	ldr	r2, [pc, #624]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800511a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800511e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d013      	beq.n	8005150 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fd f908 	bl	800233c <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005130:	f7fd f904 	bl	800233c <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	; 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e276      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005142:	4b92      	ldr	r3, [pc, #584]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0x2a8>
 800514e:	e014      	b.n	800517a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fd f8f4 	bl	800233c <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005158:	f7fd f8f0 	bl	800233c <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	; 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e262      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516a:	4b88      	ldr	r3, [pc, #544]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x2d0>
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d060      	beq.n	8005248 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d005      	beq.n	8005198 <HAL_RCC_OscConfig+0x310>
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b0c      	cmp	r3, #12
 8005190:	d119      	bne.n	80051c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d116      	bne.n	80051c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005198:	4b7c      	ldr	r3, [pc, #496]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_OscConfig+0x328>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e23f      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b0:	4b76      	ldr	r3, [pc, #472]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	061b      	lsls	r3, r3, #24
 80051be:	4973      	ldr	r1, [pc, #460]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051c4:	e040      	b.n	8005248 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d023      	beq.n	8005216 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ce:	4b6f      	ldr	r3, [pc, #444]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a6e      	ldr	r2, [pc, #440]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051da:	f7fd f8af 	bl	800233c <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e2:	f7fd f8ab 	bl	800233c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e21d      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f4:	4b65      	ldr	r3, [pc, #404]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005200:	4b62      	ldr	r3, [pc, #392]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	061b      	lsls	r3, r3, #24
 800520e:	495f      	ldr	r1, [pc, #380]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005210:	4313      	orrs	r3, r2
 8005212:	604b      	str	r3, [r1, #4]
 8005214:	e018      	b.n	8005248 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005216:	4b5d      	ldr	r3, [pc, #372]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a5c      	ldr	r2, [pc, #368]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800521c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005222:	f7fd f88b 	bl	800233c <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522a:	f7fd f887 	bl	800233c <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e1f9      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800523c:	4b53      	ldr	r3, [pc, #332]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f0      	bne.n	800522a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d03c      	beq.n	80052ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01c      	beq.n	8005296 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800525c:	4b4b      	ldr	r3, [pc, #300]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800525e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005262:	4a4a      	ldr	r2, [pc, #296]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fd f866 	bl	800233c <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005274:	f7fd f862 	bl	800233c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e1d4      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005286:	4b41      	ldr	r3, [pc, #260]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ef      	beq.n	8005274 <HAL_RCC_OscConfig+0x3ec>
 8005294:	e01b      	b.n	80052ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005296:	4b3d      	ldr	r3, [pc, #244]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529c:	4a3b      	ldr	r2, [pc, #236]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a6:	f7fd f849 	bl	800233c <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ae:	f7fd f845 	bl	800233c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e1b7      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c0:	4b32      	ldr	r3, [pc, #200]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80052c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1ef      	bne.n	80052ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 80a6 	beq.w	8005428 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052dc:	2300      	movs	r3, #0
 80052de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052e0:	4b2a      	ldr	r3, [pc, #168]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80052e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10d      	bne.n	8005308 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ec:	4b27      	ldr	r3, [pc, #156]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80052ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f0:	4a26      	ldr	r2, [pc, #152]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80052f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f6:	6593      	str	r3, [r2, #88]	; 0x58
 80052f8:	4b24      	ldr	r3, [pc, #144]	; (800538c <HAL_RCC_OscConfig+0x504>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005304:	2301      	movs	r3, #1
 8005306:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005308:	4b21      	ldr	r3, [pc, #132]	; (8005390 <HAL_RCC_OscConfig+0x508>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d118      	bne.n	8005346 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005314:	4b1e      	ldr	r3, [pc, #120]	; (8005390 <HAL_RCC_OscConfig+0x508>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1d      	ldr	r2, [pc, #116]	; (8005390 <HAL_RCC_OscConfig+0x508>)
 800531a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005320:	f7fd f80c 	bl	800233c <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005328:	f7fd f808 	bl	800233c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e17a      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <HAL_RCC_OscConfig+0x508>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f0      	beq.n	8005328 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d108      	bne.n	8005360 <HAL_RCC_OscConfig+0x4d8>
 800534e:	4b0f      	ldr	r3, [pc, #60]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005354:	4a0d      	ldr	r2, [pc, #52]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005356:	f043 0301 	orr.w	r3, r3, #1
 800535a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800535e:	e029      	b.n	80053b4 <HAL_RCC_OscConfig+0x52c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2b05      	cmp	r3, #5
 8005366:	d115      	bne.n	8005394 <HAL_RCC_OscConfig+0x50c>
 8005368:	4b08      	ldr	r3, [pc, #32]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	4a07      	ldr	r2, [pc, #28]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005370:	f043 0304 	orr.w	r3, r3, #4
 8005374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005378:	4b04      	ldr	r3, [pc, #16]	; (800538c <HAL_RCC_OscConfig+0x504>)
 800537a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537e:	4a03      	ldr	r2, [pc, #12]	; (800538c <HAL_RCC_OscConfig+0x504>)
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005388:	e014      	b.n	80053b4 <HAL_RCC_OscConfig+0x52c>
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000
 8005390:	40007000 	.word	0x40007000
 8005394:	4b9c      	ldr	r3, [pc, #624]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539a:	4a9b      	ldr	r2, [pc, #620]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053a4:	4b98      	ldr	r3, [pc, #608]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053aa:	4a97      	ldr	r2, [pc, #604]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80053ac:	f023 0304 	bic.w	r3, r3, #4
 80053b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d016      	beq.n	80053ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053bc:	f7fc ffbe 	bl	800233c <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c2:	e00a      	b.n	80053da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c4:	f7fc ffba 	bl	800233c <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e12a      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053da:	4b8b      	ldr	r3, [pc, #556]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0ed      	beq.n	80053c4 <HAL_RCC_OscConfig+0x53c>
 80053e8:	e015      	b.n	8005416 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ea:	f7fc ffa7 	bl	800233c <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053f0:	e00a      	b.n	8005408 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f2:	f7fc ffa3 	bl	800233c <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005400:	4293      	cmp	r3, r2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e113      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005408:	4b7f      	ldr	r3, [pc, #508]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1ed      	bne.n	80053f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005416:	7ffb      	ldrb	r3, [r7, #31]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d105      	bne.n	8005428 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800541c:	4b7a      	ldr	r3, [pc, #488]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	4a79      	ldr	r2, [pc, #484]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 8005422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005426:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80fe 	beq.w	800562e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	2b02      	cmp	r3, #2
 8005438:	f040 80d0 	bne.w	80055dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800543c:	4b72      	ldr	r3, [pc, #456]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f003 0203 	and.w	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d130      	bne.n	80054b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	3b01      	subs	r3, #1
 800545c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d127      	bne.n	80054b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d11f      	bne.n	80054b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800547c:	2a07      	cmp	r2, #7
 800547e:	bf14      	ite	ne
 8005480:	2201      	movne	r2, #1
 8005482:	2200      	moveq	r2, #0
 8005484:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005486:	4293      	cmp	r3, r2
 8005488:	d113      	bne.n	80054b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	3b01      	subs	r3, #1
 8005498:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d109      	bne.n	80054b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	3b01      	subs	r3, #1
 80054ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d06e      	beq.n	8005590 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	d069      	beq.n	800558c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054b8:	4b53      	ldr	r3, [pc, #332]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054c4:	4b50      	ldr	r3, [pc, #320]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0ad      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054d4:	4b4c      	ldr	r3, [pc, #304]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a4b      	ldr	r2, [pc, #300]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80054da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054e0:	f7fc ff2c 	bl	800233c <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e8:	f7fc ff28 	bl	800233c <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e09a      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054fa:	4b43      	ldr	r3, [pc, #268]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005506:	4b40      	ldr	r3, [pc, #256]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	4b40      	ldr	r3, [pc, #256]	; (800560c <HAL_RCC_OscConfig+0x784>)
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005516:	3a01      	subs	r2, #1
 8005518:	0112      	lsls	r2, r2, #4
 800551a:	4311      	orrs	r1, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005520:	0212      	lsls	r2, r2, #8
 8005522:	4311      	orrs	r1, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005528:	0852      	lsrs	r2, r2, #1
 800552a:	3a01      	subs	r2, #1
 800552c:	0552      	lsls	r2, r2, #21
 800552e:	4311      	orrs	r1, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005534:	0852      	lsrs	r2, r2, #1
 8005536:	3a01      	subs	r2, #1
 8005538:	0652      	lsls	r2, r2, #25
 800553a:	4311      	orrs	r1, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005540:	0912      	lsrs	r2, r2, #4
 8005542:	0452      	lsls	r2, r2, #17
 8005544:	430a      	orrs	r2, r1
 8005546:	4930      	ldr	r1, [pc, #192]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 8005548:	4313      	orrs	r3, r2
 800554a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800554c:	4b2e      	ldr	r3, [pc, #184]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2d      	ldr	r2, [pc, #180]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 8005552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005556:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005558:	4b2b      	ldr	r3, [pc, #172]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 800555e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005562:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005564:	f7fc feea 	bl	800233c <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556c:	f7fc fee6 	bl	800233c <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e058      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557e:	4b22      	ldr	r3, [pc, #136]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800558a:	e050      	b.n	800562e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e04f      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d148      	bne.n	800562e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800559c:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a19      	ldr	r2, [pc, #100]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80055a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055a8:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	4a16      	ldr	r2, [pc, #88]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80055ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055b4:	f7fc fec2 	bl	800233c <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055bc:	f7fc febe 	bl	800233c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e030      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ce:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x734>
 80055da:	e028      	b.n	800562e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	d023      	beq.n	800562a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e2:	4b09      	ldr	r3, [pc, #36]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a08      	ldr	r2, [pc, #32]	; (8005608 <HAL_RCC_OscConfig+0x780>)
 80055e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ee:	f7fc fea5 	bl	800233c <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f4:	e00c      	b.n	8005610 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f6:	f7fc fea1 	bl	800233c <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d905      	bls.n	8005610 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e013      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
 8005608:	40021000 	.word	0x40021000
 800560c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005610:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCC_OscConfig+0x7b0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1ec      	bne.n	80055f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCC_OscConfig+0x7b0>)
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	4905      	ldr	r1, [pc, #20]	; (8005638 <HAL_RCC_OscConfig+0x7b0>)
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_RCC_OscConfig+0x7b4>)
 8005624:	4013      	ands	r3, r2
 8005626:	60cb      	str	r3, [r1, #12]
 8005628:	e001      	b.n	800562e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3720      	adds	r7, #32
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40021000 	.word	0x40021000
 800563c:	feeefffc 	.word	0xfeeefffc

08005640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0e7      	b.n	8005824 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005654:	4b75      	ldr	r3, [pc, #468]	; (800582c <HAL_RCC_ClockConfig+0x1ec>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d910      	bls.n	8005684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b72      	ldr	r3, [pc, #456]	; (800582c <HAL_RCC_ClockConfig+0x1ec>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 0207 	bic.w	r2, r3, #7
 800566a:	4970      	ldr	r1, [pc, #448]	; (800582c <HAL_RCC_ClockConfig+0x1ec>)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005672:	4b6e      	ldr	r3, [pc, #440]	; (800582c <HAL_RCC_ClockConfig+0x1ec>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0cf      	b.n	8005824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d010      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	4b66      	ldr	r3, [pc, #408]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800569c:	429a      	cmp	r2, r3
 800569e:	d908      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a0:	4b63      	ldr	r3, [pc, #396]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	4960      	ldr	r1, [pc, #384]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d04c      	beq.n	8005758 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d107      	bne.n	80056d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c6:	4b5a      	ldr	r3, [pc, #360]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d121      	bne.n	8005716 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e0a6      	b.n	8005824 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d107      	bne.n	80056ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056de:	4b54      	ldr	r3, [pc, #336]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d115      	bne.n	8005716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e09a      	b.n	8005824 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056f6:	4b4e      	ldr	r3, [pc, #312]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e08e      	b.n	8005824 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005706:	4b4a      	ldr	r3, [pc, #296]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e086      	b.n	8005824 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005716:	4b46      	ldr	r3, [pc, #280]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f023 0203 	bic.w	r2, r3, #3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	4943      	ldr	r1, [pc, #268]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 8005724:	4313      	orrs	r3, r2
 8005726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005728:	f7fc fe08 	bl	800233c <HAL_GetTick>
 800572c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572e:	e00a      	b.n	8005746 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005730:	f7fc fe04 	bl	800233c <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f241 3288 	movw	r2, #5000	; 0x1388
 800573e:	4293      	cmp	r3, r2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e06e      	b.n	8005824 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005746:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 020c 	and.w	r2, r3, #12
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	429a      	cmp	r2, r3
 8005756:	d1eb      	bne.n	8005730 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d010      	beq.n	8005786 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	4b31      	ldr	r3, [pc, #196]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005770:	429a      	cmp	r2, r3
 8005772:	d208      	bcs.n	8005786 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005774:	4b2e      	ldr	r3, [pc, #184]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	492b      	ldr	r1, [pc, #172]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 8005782:	4313      	orrs	r3, r2
 8005784:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005786:	4b29      	ldr	r3, [pc, #164]	; (800582c <HAL_RCC_ClockConfig+0x1ec>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d210      	bcs.n	80057b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005794:	4b25      	ldr	r3, [pc, #148]	; (800582c <HAL_RCC_ClockConfig+0x1ec>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f023 0207 	bic.w	r2, r3, #7
 800579c:	4923      	ldr	r1, [pc, #140]	; (800582c <HAL_RCC_ClockConfig+0x1ec>)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a4:	4b21      	ldr	r3, [pc, #132]	; (800582c <HAL_RCC_ClockConfig+0x1ec>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d001      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e036      	b.n	8005824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4918      	ldr	r1, [pc, #96]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4910      	ldr	r1, [pc, #64]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057f4:	f000 f824 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80057f8:	4602      	mov	r2, r0
 80057fa:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <HAL_RCC_ClockConfig+0x1f0>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	091b      	lsrs	r3, r3, #4
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	490b      	ldr	r1, [pc, #44]	; (8005834 <HAL_RCC_ClockConfig+0x1f4>)
 8005806:	5ccb      	ldrb	r3, [r1, r3]
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
 8005810:	4a09      	ldr	r2, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1f8>)
 8005812:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_RCC_ClockConfig+0x1fc>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f7fc fd3f 	bl	800229c <HAL_InitTick>
 800581e:	4603      	mov	r3, r0
 8005820:	72fb      	strb	r3, [r7, #11]

  return status;
 8005822:	7afb      	ldrb	r3, [r7, #11]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40022000 	.word	0x40022000
 8005830:	40021000 	.word	0x40021000
 8005834:	08015644 	.word	0x08015644
 8005838:	20000000 	.word	0x20000000
 800583c:	20000004 	.word	0x20000004

08005840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	b089      	sub	sp, #36	; 0x24
 8005844:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800584e:	4b3e      	ldr	r3, [pc, #248]	; (8005948 <HAL_RCC_GetSysClockFreq+0x108>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005858:	4b3b      	ldr	r3, [pc, #236]	; (8005948 <HAL_RCC_GetSysClockFreq+0x108>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_RCC_GetSysClockFreq+0x34>
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	2b0c      	cmp	r3, #12
 800586c:	d121      	bne.n	80058b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d11e      	bne.n	80058b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005874:	4b34      	ldr	r3, [pc, #208]	; (8005948 <HAL_RCC_GetSysClockFreq+0x108>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d107      	bne.n	8005890 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005880:	4b31      	ldr	r3, [pc, #196]	; (8005948 <HAL_RCC_GetSysClockFreq+0x108>)
 8005882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e005      	b.n	800589c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005890:	4b2d      	ldr	r3, [pc, #180]	; (8005948 <HAL_RCC_GetSysClockFreq+0x108>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	f003 030f 	and.w	r3, r3, #15
 800589a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800589c:	4a2b      	ldr	r2, [pc, #172]	; (800594c <HAL_RCC_GetSysClockFreq+0x10c>)
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10d      	bne.n	80058c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058b0:	e00a      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d102      	bne.n	80058be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058b8:	4b25      	ldr	r3, [pc, #148]	; (8005950 <HAL_RCC_GetSysClockFreq+0x110>)
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e004      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d101      	bne.n	80058c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058c4:	4b23      	ldr	r3, [pc, #140]	; (8005954 <HAL_RCC_GetSysClockFreq+0x114>)
 80058c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b0c      	cmp	r3, #12
 80058cc:	d134      	bne.n	8005938 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058ce:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <HAL_RCC_GetSysClockFreq+0x108>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d003      	beq.n	80058e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d003      	beq.n	80058ec <HAL_RCC_GetSysClockFreq+0xac>
 80058e4:	e005      	b.n	80058f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058e6:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <HAL_RCC_GetSysClockFreq+0x110>)
 80058e8:	617b      	str	r3, [r7, #20]
      break;
 80058ea:	e005      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058ec:	4b19      	ldr	r3, [pc, #100]	; (8005954 <HAL_RCC_GetSysClockFreq+0x114>)
 80058ee:	617b      	str	r3, [r7, #20]
      break;
 80058f0:	e002      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	617b      	str	r3, [r7, #20]
      break;
 80058f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058f8:	4b13      	ldr	r3, [pc, #76]	; (8005948 <HAL_RCC_GetSysClockFreq+0x108>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	3301      	adds	r3, #1
 8005904:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005906:	4b10      	ldr	r3, [pc, #64]	; (8005948 <HAL_RCC_GetSysClockFreq+0x108>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	fb03 f202 	mul.w	r2, r3, r2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	fbb2 f3f3 	udiv	r3, r2, r3
 800591c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800591e:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <HAL_RCC_GetSysClockFreq+0x108>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	0e5b      	lsrs	r3, r3, #25
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	3301      	adds	r3, #1
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	fbb2 f3f3 	udiv	r3, r2, r3
 8005936:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005938:	69bb      	ldr	r3, [r7, #24]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3724      	adds	r7, #36	; 0x24
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000
 800594c:	0801565c 	.word	0x0801565c
 8005950:	00f42400 	.word	0x00f42400
 8005954:	00b71b00 	.word	0x00b71b00

08005958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <HAL_RCC_GetHCLKFreq+0x14>)
 800595e:	681b      	ldr	r3, [r3, #0]
}
 8005960:	4618      	mov	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000000 	.word	0x20000000

08005970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005974:	f7ff fff0 	bl	8005958 <HAL_RCC_GetHCLKFreq>
 8005978:	4602      	mov	r2, r0
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	4904      	ldr	r1, [pc, #16]	; (8005998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005986:	5ccb      	ldrb	r3, [r1, r3]
 8005988:	f003 031f 	and.w	r3, r3, #31
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005990:	4618      	mov	r0, r3
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40021000 	.word	0x40021000
 8005998:	08015654 	.word	0x08015654

0800599c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059a0:	f7ff ffda 	bl	8005958 <HAL_RCC_GetHCLKFreq>
 80059a4:	4602      	mov	r2, r0
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	0adb      	lsrs	r3, r3, #11
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	4904      	ldr	r1, [pc, #16]	; (80059c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059b2:	5ccb      	ldrb	r3, [r1, r3]
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000
 80059c4:	08015654 	.word	0x08015654

080059c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059d0:	2300      	movs	r3, #0
 80059d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059d4:	4b2a      	ldr	r3, [pc, #168]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059e0:	f7ff f9c4 	bl	8004d6c <HAL_PWREx_GetVoltageRange>
 80059e4:	6178      	str	r0, [r7, #20]
 80059e6:	e014      	b.n	8005a12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059e8:	4b25      	ldr	r3, [pc, #148]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ec:	4a24      	ldr	r2, [pc, #144]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f2:	6593      	str	r3, [r2, #88]	; 0x58
 80059f4:	4b22      	ldr	r3, [pc, #136]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a00:	f7ff f9b4 	bl	8004d6c <HAL_PWREx_GetVoltageRange>
 8005a04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a06:	4b1e      	ldr	r3, [pc, #120]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a18:	d10b      	bne.n	8005a32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b80      	cmp	r3, #128	; 0x80
 8005a1e:	d919      	bls.n	8005a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2ba0      	cmp	r3, #160	; 0xa0
 8005a24:	d902      	bls.n	8005a2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a26:	2302      	movs	r3, #2
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e013      	b.n	8005a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	e010      	b.n	8005a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b80      	cmp	r3, #128	; 0x80
 8005a36:	d902      	bls.n	8005a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a38:	2303      	movs	r3, #3
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	e00a      	b.n	8005a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d102      	bne.n	8005a4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a44:	2302      	movs	r3, #2
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e004      	b.n	8005a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b70      	cmp	r3, #112	; 0x70
 8005a4e:	d101      	bne.n	8005a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a50:	2301      	movs	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a54:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f023 0207 	bic.w	r2, r3, #7
 8005a5c:	4909      	ldr	r1, [pc, #36]	; (8005a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a64:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d001      	beq.n	8005a76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40021000 	.word	0x40021000
 8005a84:	40022000 	.word	0x40022000

08005a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a90:	2300      	movs	r3, #0
 8005a92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a94:	2300      	movs	r3, #0
 8005a96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d041      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005aac:	d02a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005aae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ab2:	d824      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ab8:	d008      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005abe:	d81e      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ac8:	d010      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005aca:	e018      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005acc:	4b86      	ldr	r3, [pc, #536]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	4a85      	ldr	r2, [pc, #532]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ad8:	e015      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	3304      	adds	r3, #4
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 f829 	bl	8006b38 <RCCEx_PLLSAI1_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aea:	e00c      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3320      	adds	r3, #32
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f001 f914 	bl	8006d20 <RCCEx_PLLSAI2_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005afc:	e003      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	74fb      	strb	r3, [r7, #19]
      break;
 8005b02:	e000      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b06:	7cfb      	ldrb	r3, [r7, #19]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b0c:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1a:	4973      	ldr	r1, [pc, #460]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b22:	e001      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	7cfb      	ldrb	r3, [r7, #19]
 8005b26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d041      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b3c:	d02a      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b42:	d824      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b48:	d008      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b4e:	d81e      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b58:	d010      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b5a:	e018      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b5c:	4b62      	ldr	r3, [pc, #392]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4a61      	ldr	r2, [pc, #388]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b68:	e015      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 ffe1 	bl	8006b38 <RCCEx_PLLSAI1_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b7a:	e00c      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3320      	adds	r3, #32
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 f8cc 	bl	8006d20 <RCCEx_PLLSAI2_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b8c:	e003      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	74fb      	strb	r3, [r7, #19]
      break;
 8005b92:	e000      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b96:	7cfb      	ldrb	r3, [r7, #19]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b9c:	4b52      	ldr	r3, [pc, #328]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005baa:	494f      	ldr	r1, [pc, #316]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bb2:	e001      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb4:	7cfb      	ldrb	r3, [r7, #19]
 8005bb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80a0 	beq.w	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00d      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be0:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	4a40      	ldr	r2, [pc, #256]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bea:	6593      	str	r3, [r2, #88]	; 0x58
 8005bec:	4b3e      	ldr	r3, [pc, #248]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a3a      	ldr	r2, [pc, #232]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c08:	f7fc fb98 	bl	800233c <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c0e:	e009      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c10:	f7fc fb94 	bl	800233c <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d902      	bls.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	74fb      	strb	r3, [r7, #19]
        break;
 8005c22:	e005      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c24:	4b31      	ldr	r3, [pc, #196]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ef      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d15c      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c36:	4b2c      	ldr	r3, [pc, #176]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01f      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d019      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c54:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c60:	4b21      	ldr	r3, [pc, #132]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	4a20      	ldr	r2, [pc, #128]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c70:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c80:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d016      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fc fb53 	bl	800233c <HAL_GetTick>
 8005c96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c98:	e00b      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9a:	f7fc fb4f 	bl	800233c <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d902      	bls.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	74fb      	strb	r3, [r7, #19]
            break;
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0ec      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc6:	4b08      	ldr	r3, [pc, #32]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd6:	4904      	ldr	r1, [pc, #16]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cde:	e009      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	74bb      	strb	r3, [r7, #18]
 8005ce4:	e006      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ce6:	bf00      	nop
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf0:	7cfb      	ldrb	r3, [r7, #19]
 8005cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cf4:	7c7b      	ldrb	r3, [r7, #17]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cfa:	4b9e      	ldr	r3, [pc, #632]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	4a9d      	ldr	r2, [pc, #628]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d12:	4b98      	ldr	r3, [pc, #608]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d18:	f023 0203 	bic.w	r2, r3, #3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	4994      	ldr	r1, [pc, #592]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d34:	4b8f      	ldr	r3, [pc, #572]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3a:	f023 020c 	bic.w	r2, r3, #12
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	498c      	ldr	r1, [pc, #560]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d56:	4b87      	ldr	r3, [pc, #540]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	4983      	ldr	r1, [pc, #524]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d78:	4b7e      	ldr	r3, [pc, #504]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	497b      	ldr	r1, [pc, #492]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d9a:	4b76      	ldr	r3, [pc, #472]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da8:	4972      	ldr	r1, [pc, #456]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dbc:	4b6d      	ldr	r3, [pc, #436]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dca:	496a      	ldr	r1, [pc, #424]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dde:	4b65      	ldr	r3, [pc, #404]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dec:	4961      	ldr	r1, [pc, #388]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e00:	4b5c      	ldr	r3, [pc, #368]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0e:	4959      	ldr	r1, [pc, #356]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e22:	4b54      	ldr	r3, [pc, #336]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	4950      	ldr	r1, [pc, #320]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e44:	4b4b      	ldr	r3, [pc, #300]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	4948      	ldr	r1, [pc, #288]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e66:	4b43      	ldr	r3, [pc, #268]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e74:	493f      	ldr	r1, [pc, #252]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d028      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e88:	4b3a      	ldr	r3, [pc, #232]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e96:	4937      	ldr	r1, [pc, #220]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea6:	d106      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea8:	4b32      	ldr	r3, [pc, #200]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4a31      	ldr	r2, [pc, #196]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eb2:	60d3      	str	r3, [r2, #12]
 8005eb4:	e011      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ebe:	d10c      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fe36 	bl	8006b38 <RCCEx_PLLSAI1_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005ed6:	7cfb      	ldrb	r3, [r7, #19]
 8005ed8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d028      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ee6:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	491f      	ldr	r1, [pc, #124]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f04:	d106      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f06:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f10:	60d3      	str	r3, [r2, #12]
 8005f12:	e011      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3304      	adds	r3, #4
 8005f22:	2101      	movs	r1, #1
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fe07 	bl	8006b38 <RCCEx_PLLSAI1_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f2e:	7cfb      	ldrb	r3, [r7, #19]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02b      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f52:	4908      	ldr	r1, [pc, #32]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f62:	d109      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f64:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	4a02      	ldr	r2, [pc, #8]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f6e:	60d3      	str	r3, [r2, #12]
 8005f70:	e014      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	2101      	movs	r1, #1
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fdd5 	bl	8006b38 <RCCEx_PLLSAI1_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f92:	7cfb      	ldrb	r3, [r7, #19]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d02f      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fa8:	4b2b      	ldr	r3, [pc, #172]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fb6:	4928      	ldr	r1, [pc, #160]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fc6:	d10d      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	2102      	movs	r1, #2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fdb2 	bl	8006b38 <RCCEx_PLLSAI1_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d014      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fde:	7cfb      	ldrb	r3, [r7, #19]
 8005fe0:	74bb      	strb	r3, [r7, #18]
 8005fe2:	e011      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fec:	d10c      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3320      	adds	r3, #32
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fe93 	bl	8006d20 <RCCEx_PLLSAI2_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ffe:	7cfb      	ldrb	r3, [r7, #19]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006004:	7cfb      	ldrb	r3, [r7, #19]
 8006006:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006014:	4b10      	ldr	r3, [pc, #64]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006022:	490d      	ldr	r1, [pc, #52]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006036:	4b08      	ldr	r3, [pc, #32]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006046:	4904      	ldr	r1, [pc, #16]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800604e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40021000 	.word	0x40021000

0800605c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800606e:	d13e      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006070:	4bb2      	ldr	r3, [pc, #712]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006082:	d028      	beq.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608a:	f200 8542 	bhi.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006094:	d005      	beq.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609c:	d00e      	beq.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800609e:	f000 bd38 	b.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060a2:	4ba6      	ldr	r3, [pc, #664]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	f040 8532 	bne.w	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80060b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b6:	61fb      	str	r3, [r7, #28]
      break;
 80060b8:	f000 bd2d 	b.w	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80060bc:	4b9f      	ldr	r3, [pc, #636]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	f040 8527 	bne.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80060cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80060d0:	61fb      	str	r3, [r7, #28]
      break;
 80060d2:	f000 bd22 	b.w	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060d6:	4b99      	ldr	r3, [pc, #612]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060e2:	f040 851c 	bne.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80060e6:	4b96      	ldr	r3, [pc, #600]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80060e8:	61fb      	str	r3, [r7, #28]
      break;
 80060ea:	f000 bd18 	b.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060ee:	4b93      	ldr	r3, [pc, #588]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d036      	beq.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b03      	cmp	r3, #3
 8006102:	d840      	bhi.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d003      	beq.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d020      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006110:	e039      	b.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006112:	4b8a      	ldr	r3, [pc, #552]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b02      	cmp	r3, #2
 800611c:	d116      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800611e:	4b87      	ldr	r3, [pc, #540]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800612a:	4b84      	ldr	r3, [pc, #528]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	091b      	lsrs	r3, r3, #4
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	e005      	b.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006136:	4b81      	ldr	r3, [pc, #516]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	4a80      	ldr	r2, [pc, #512]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006148:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800614a:	e01f      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	61bb      	str	r3, [r7, #24]
      break;
 8006150:	e01c      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006152:	4b7a      	ldr	r3, [pc, #488]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800615a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615e:	d102      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006160:	4b79      	ldr	r3, [pc, #484]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8006162:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006164:	e012      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
      break;
 800616a:	e00f      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800616c:	4b73      	ldr	r3, [pc, #460]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006178:	d102      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800617a:	4b74      	ldr	r3, [pc, #464]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800617c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800617e:	e005      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	61bb      	str	r3, [r7, #24]
      break;
 8006184:	e002      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
      break;
 800618a:	bf00      	nop
    }

    switch(PeriphClk)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006192:	f000 80dd 	beq.w	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800619c:	f200 84c1 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061a6:	f000 80d3 	beq.w	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061b0:	f200 84b7 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ba:	f000 835f 	beq.w	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c4:	f200 84ad 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ce:	f000 847e 	beq.w	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d8:	f200 84a3 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061e2:	f000 82cd 	beq.w	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ec:	f200 8499 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f6:	f000 80ab 	beq.w	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006200:	f200 848f 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620a:	f000 8090 	beq.w	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006214:	f200 8485 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621e:	d07f      	beq.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006226:	f200 847c 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006230:	f000 8403 	beq.w	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623a:	f200 8472 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006244:	f000 83af 	beq.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624e:	f200 8468 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006258:	f000 8379 	beq.w	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006262:	f200 845e 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b80      	cmp	r3, #128	; 0x80
 800626a:	f000 8344 	beq.w	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b80      	cmp	r3, #128	; 0x80
 8006272:	f200 8456 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b20      	cmp	r3, #32
 800627a:	d84b      	bhi.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 844f 	beq.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3b01      	subs	r3, #1
 8006288:	2b1f      	cmp	r3, #31
 800628a:	f200 844a 	bhi.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	0800647d 	.word	0x0800647d
 8006298:	080064eb 	.word	0x080064eb
 800629c:	08006b23 	.word	0x08006b23
 80062a0:	0800657f 	.word	0x0800657f
 80062a4:	08006b23 	.word	0x08006b23
 80062a8:	08006b23 	.word	0x08006b23
 80062ac:	08006b23 	.word	0x08006b23
 80062b0:	08006605 	.word	0x08006605
 80062b4:	08006b23 	.word	0x08006b23
 80062b8:	08006b23 	.word	0x08006b23
 80062bc:	08006b23 	.word	0x08006b23
 80062c0:	08006b23 	.word	0x08006b23
 80062c4:	08006b23 	.word	0x08006b23
 80062c8:	08006b23 	.word	0x08006b23
 80062cc:	08006b23 	.word	0x08006b23
 80062d0:	0800667d 	.word	0x0800667d
 80062d4:	08006b23 	.word	0x08006b23
 80062d8:	08006b23 	.word	0x08006b23
 80062dc:	08006b23 	.word	0x08006b23
 80062e0:	08006b23 	.word	0x08006b23
 80062e4:	08006b23 	.word	0x08006b23
 80062e8:	08006b23 	.word	0x08006b23
 80062ec:	08006b23 	.word	0x08006b23
 80062f0:	08006b23 	.word	0x08006b23
 80062f4:	08006b23 	.word	0x08006b23
 80062f8:	08006b23 	.word	0x08006b23
 80062fc:	08006b23 	.word	0x08006b23
 8006300:	08006b23 	.word	0x08006b23
 8006304:	08006b23 	.word	0x08006b23
 8006308:	08006b23 	.word	0x08006b23
 800630c:	08006b23 	.word	0x08006b23
 8006310:	080066ff 	.word	0x080066ff
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	f000 82c1 	beq.w	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800631c:	f000 bc01 	b.w	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006320:	69b9      	ldr	r1, [r7, #24]
 8006322:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006326:	f000 fdd9 	bl	8006edc <RCCEx_GetSAIxPeriphCLKFreq>
 800632a:	61f8      	str	r0, [r7, #28]
      break;
 800632c:	e3fa      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800632e:	69b9      	ldr	r1, [r7, #24]
 8006330:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006334:	f000 fdd2 	bl	8006edc <RCCEx_GetSAIxPeriphCLKFreq>
 8006338:	61f8      	str	r0, [r7, #28]
      break;
 800633a:	e3f3      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800633c:	40021000 	.word	0x40021000
 8006340:	0005b8d8 	.word	0x0005b8d8
 8006344:	0801565c 	.word	0x0801565c
 8006348:	00f42400 	.word	0x00f42400
 800634c:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006350:	4ba9      	ldr	r3, [pc, #676]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006356:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006362:	d00c      	beq.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800636a:	d87f      	bhi.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006372:	d04e      	beq.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800637a:	d01d      	beq.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 800637c:	e076      	b.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800637e:	4b9e      	ldr	r3, [pc, #632]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b02      	cmp	r3, #2
 8006388:	d172      	bne.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800638a:	4b9b      	ldr	r3, [pc, #620]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8006396:	4b98      	ldr	r3, [pc, #608]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	f003 030f 	and.w	r3, r3, #15
 80063a0:	e005      	b.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80063a2:	4b95      	ldr	r3, [pc, #596]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063a8:	0a1b      	lsrs	r3, r3, #8
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	4a93      	ldr	r2, [pc, #588]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80063b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b4:	61fb      	str	r3, [r7, #28]
          break;
 80063b6:	e05b      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80063b8:	4b8f      	ldr	r3, [pc, #572]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063c4:	d156      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80063c6:	4b8c      	ldr	r3, [pc, #560]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063d2:	d14f      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063d4:	4b88      	ldr	r3, [pc, #544]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	0a1b      	lsrs	r3, r3, #8
 80063da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063de:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	fb03 f202 	mul.w	r2, r3, r2
 80063e8:	4b83      	ldr	r3, [pc, #524]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	3301      	adds	r3, #1
 80063f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80063fa:	4b7f      	ldr	r3, [pc, #508]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	0d5b      	lsrs	r3, r3, #21
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	3301      	adds	r3, #1
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	fbb2 f3f3 	udiv	r3, r2, r3
 800640e:	61fb      	str	r3, [r7, #28]
          break;
 8006410:	e030      	b.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006412:	4b79      	ldr	r3, [pc, #484]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800641a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800641e:	d12b      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006420:	4b75      	ldr	r3, [pc, #468]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800642c:	d124      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800642e:	4b72      	ldr	r3, [pc, #456]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	0a1b      	lsrs	r3, r3, #8
 8006434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006438:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	fb03 f202 	mul.w	r2, r3, r2
 8006442:	4b6d      	ldr	r3, [pc, #436]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	3301      	adds	r3, #1
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006454:	4b68      	ldr	r3, [pc, #416]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	0d5b      	lsrs	r3, r3, #21
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	3301      	adds	r3, #1
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	fbb2 f3f3 	udiv	r3, r2, r3
 8006468:	61fb      	str	r3, [r7, #28]
          break;
 800646a:	e005      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800646c:	bf00      	nop
 800646e:	e359      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006470:	bf00      	nop
 8006472:	e357      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006474:	bf00      	nop
 8006476:	e355      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006478:	bf00      	nop
        break;
 800647a:	e353      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800647c:	4b5e      	ldr	r3, [pc, #376]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b03      	cmp	r3, #3
 800648c:	d827      	bhi.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064ad 	.word	0x080064ad
 800649c:	080064b5 	.word	0x080064b5
 80064a0:	080064c9 	.word	0x080064c9
          frequency = HAL_RCC_GetPCLK2Freq();
 80064a4:	f7ff fa7a 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 80064a8:	61f8      	str	r0, [r7, #28]
          break;
 80064aa:	e01d      	b.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80064ac:	f7ff f9c8 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80064b0:	61f8      	str	r0, [r7, #28]
          break;
 80064b2:	e019      	b.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064b4:	4b50      	ldr	r3, [pc, #320]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c0:	d10f      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80064c2:	4b4f      	ldr	r3, [pc, #316]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80064c4:	61fb      	str	r3, [r7, #28]
          break;
 80064c6:	e00c      	b.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064c8:	4b4b      	ldr	r3, [pc, #300]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d107      	bne.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80064d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064da:	61fb      	str	r3, [r7, #28]
          break;
 80064dc:	e003      	b.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80064de:	bf00      	nop
 80064e0:	e320      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80064e2:	bf00      	nop
 80064e4:	e31e      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80064e6:	bf00      	nop
        break;
 80064e8:	e31c      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80064ea:	4b43      	ldr	r3, [pc, #268]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f0:	f003 030c 	and.w	r3, r3, #12
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2b0c      	cmp	r3, #12
 80064fa:	d83a      	bhi.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006539 	.word	0x08006539
 8006508:	08006573 	.word	0x08006573
 800650c:	08006573 	.word	0x08006573
 8006510:	08006573 	.word	0x08006573
 8006514:	08006541 	.word	0x08006541
 8006518:	08006573 	.word	0x08006573
 800651c:	08006573 	.word	0x08006573
 8006520:	08006573 	.word	0x08006573
 8006524:	08006549 	.word	0x08006549
 8006528:	08006573 	.word	0x08006573
 800652c:	08006573 	.word	0x08006573
 8006530:	08006573 	.word	0x08006573
 8006534:	0800655d 	.word	0x0800655d
          frequency = HAL_RCC_GetPCLK1Freq();
 8006538:	f7ff fa1a 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 800653c:	61f8      	str	r0, [r7, #28]
          break;
 800653e:	e01d      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006540:	f7ff f97e 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 8006544:	61f8      	str	r0, [r7, #28]
          break;
 8006546:	e019      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006548:	4b2b      	ldr	r3, [pc, #172]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006554:	d10f      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8006556:	4b2a      	ldr	r3, [pc, #168]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006558:	61fb      	str	r3, [r7, #28]
          break;
 800655a:	e00c      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800655c:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b02      	cmp	r3, #2
 8006568:	d107      	bne.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656e:	61fb      	str	r3, [r7, #28]
          break;
 8006570:	e003      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8006572:	bf00      	nop
 8006574:	e2d6      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006576:	bf00      	nop
 8006578:	e2d4      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800657a:	bf00      	nop
        break;
 800657c:	e2d2      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800657e:	4b1e      	ldr	r3, [pc, #120]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006584:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b30      	cmp	r3, #48	; 0x30
 800658e:	d021      	beq.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	2b30      	cmp	r3, #48	; 0x30
 8006594:	d829      	bhi.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b20      	cmp	r3, #32
 800659a:	d011      	beq.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d823      	bhi.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b10      	cmp	r3, #16
 80065ac:	d004      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80065ae:	e01c      	b.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b0:	f7ff f9de 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 80065b4:	61f8      	str	r0, [r7, #28]
          break;
 80065b6:	e01d      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80065b8:	f7ff f942 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80065bc:	61f8      	str	r0, [r7, #28]
          break;
 80065be:	e019      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c0:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065cc:	d10f      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80065d0:	61fb      	str	r3, [r7, #28]
          break;
 80065d2:	e00c      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065d4:	4b08      	ldr	r3, [pc, #32]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d107      	bne.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80065e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e6:	61fb      	str	r3, [r7, #28]
          break;
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80065ea:	bf00      	nop
 80065ec:	e29a      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80065ee:	bf00      	nop
 80065f0:	e298      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80065f2:	bf00      	nop
        break;
 80065f4:	e296      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80065f6:	bf00      	nop
 80065f8:	40021000 	.word	0x40021000
 80065fc:	0801565c 	.word	0x0801565c
 8006600:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006604:	4b9b      	ldr	r3, [pc, #620]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2bc0      	cmp	r3, #192	; 0xc0
 8006614:	d021      	beq.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2bc0      	cmp	r3, #192	; 0xc0
 800661a:	d829      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b80      	cmp	r3, #128	; 0x80
 8006620:	d011      	beq.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b80      	cmp	r3, #128	; 0x80
 8006626:	d823      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	d004      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8006634:	e01c      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006636:	f7ff f99b 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 800663a:	61f8      	str	r0, [r7, #28]
          break;
 800663c:	e01d      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800663e:	f7ff f8ff 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 8006642:	61f8      	str	r0, [r7, #28]
          break;
 8006644:	e019      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006646:	4b8b      	ldr	r3, [pc, #556]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d10f      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8006654:	4b88      	ldr	r3, [pc, #544]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006656:	61fb      	str	r3, [r7, #28]
          break;
 8006658:	e00c      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800665a:	4b86      	ldr	r3, [pc, #536]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b02      	cmp	r3, #2
 8006666:	d107      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8006668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800666c:	61fb      	str	r3, [r7, #28]
          break;
 800666e:	e003      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8006670:	bf00      	nop
 8006672:	e257      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006674:	bf00      	nop
 8006676:	e255      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006678:	bf00      	nop
        break;
 800667a:	e253      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800667c:	4b7d      	ldr	r3, [pc, #500]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800668e:	d025      	beq.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006696:	d82c      	bhi.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669e:	d013      	beq.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a6:	d824      	bhi.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d004      	beq.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b4:	d004      	beq.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80066b6:	e01c      	b.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7ff f95a 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 80066bc:	61f8      	str	r0, [r7, #28]
          break;
 80066be:	e01d      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80066c0:	f7ff f8be 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80066c4:	61f8      	str	r0, [r7, #28]
          break;
 80066c6:	e019      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066c8:	4b6a      	ldr	r3, [pc, #424]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d10f      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80066d6:	4b68      	ldr	r3, [pc, #416]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80066d8:	61fb      	str	r3, [r7, #28]
          break;
 80066da:	e00c      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066dc:	4b65      	ldr	r3, [pc, #404]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d107      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80066ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ee:	61fb      	str	r3, [r7, #28]
          break;
 80066f0:	e003      	b.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80066f2:	bf00      	nop
 80066f4:	e216      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80066f6:	bf00      	nop
 80066f8:	e214      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80066fa:	bf00      	nop
        break;
 80066fc:	e212      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80066fe:	4b5d      	ldr	r3, [pc, #372]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006704:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006710:	d025      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006718:	d82c      	bhi.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006720:	d013      	beq.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006728:	d824      	bhi.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d004      	beq.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006736:	d004      	beq.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8006738:	e01c      	b.n	8006774 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800673a:	f7ff f919 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 800673e:	61f8      	str	r0, [r7, #28]
          break;
 8006740:	e01d      	b.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8006742:	f7ff f87d 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 8006746:	61f8      	str	r0, [r7, #28]
          break;
 8006748:	e019      	b.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800674a:	4b4a      	ldr	r3, [pc, #296]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006756:	d10f      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8006758:	4b47      	ldr	r3, [pc, #284]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800675a:	61fb      	str	r3, [r7, #28]
          break;
 800675c:	e00c      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800675e:	4b45      	ldr	r3, [pc, #276]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b02      	cmp	r3, #2
 800676a:	d107      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800676c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006770:	61fb      	str	r3, [r7, #28]
          break;
 8006772:	e003      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8006774:	bf00      	nop
 8006776:	e1d5      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006778:	bf00      	nop
 800677a:	e1d3      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800677c:	bf00      	nop
        break;
 800677e:	e1d1      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006780:	4b3c      	ldr	r3, [pc, #240]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006786:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006792:	d00c      	beq.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800679a:	d864      	bhi.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067a2:	d008      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067aa:	d030      	beq.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80067ac:	e05b      	b.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80067ae:	f7ff f847 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80067b2:	61f8      	str	r0, [r7, #28]
          break;
 80067b4:	e05c      	b.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80067b6:	4b2f      	ldr	r3, [pc, #188]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c2:	d152      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80067c4:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d04c      	beq.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80067d0:	4b28      	ldr	r3, [pc, #160]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	0a1b      	lsrs	r3, r3, #8
 80067d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067da:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	fb03 f202 	mul.w	r2, r3, r2
 80067e4:	4b23      	ldr	r3, [pc, #140]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	3301      	adds	r3, #1
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80067f6:	4b1f      	ldr	r3, [pc, #124]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	0e5b      	lsrs	r3, r3, #25
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	3301      	adds	r3, #1
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	fbb2 f3f3 	udiv	r3, r2, r3
 800680a:	61fb      	str	r3, [r7, #28]
          break;
 800680c:	e02d      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800681a:	d128      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800681c:	4b15      	ldr	r3, [pc, #84]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d022      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006828:	4b12      	ldr	r3, [pc, #72]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006832:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	fb03 f202 	mul.w	r2, r3, r2
 800683c:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	3301      	adds	r3, #1
 8006848:	fbb2 f3f3 	udiv	r3, r2, r3
 800684c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800684e:	4b09      	ldr	r3, [pc, #36]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	0e5b      	lsrs	r3, r3, #25
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	3301      	adds	r3, #1
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006862:	61fb      	str	r3, [r7, #28]
          break;
 8006864:	e003      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8006866:	bf00      	nop
 8006868:	e15c      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800686a:	bf00      	nop
 800686c:	e15a      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800686e:	bf00      	nop
        break;
 8006870:	e158      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006872:	bf00      	nop
 8006874:	40021000 	.word	0x40021000
 8006878:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800687c:	4b9d      	ldr	r3, [pc, #628]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006886:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800688e:	f7ff f885 	bl	800599c <HAL_RCC_GetPCLK2Freq>
 8006892:	61f8      	str	r0, [r7, #28]
        break;
 8006894:	e146      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006896:	f7fe ffd3 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 800689a:	61f8      	str	r0, [r7, #28]
        break;
 800689c:	e142      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800689e:	4b95      	ldr	r3, [pc, #596]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b0:	d013      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b8:	d819      	bhi.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c6:	d004      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80068c8:	e011      	b.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068ca:	f7ff f851 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 80068ce:	61f8      	str	r0, [r7, #28]
          break;
 80068d0:	e010      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80068d2:	f7fe ffb5 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80068d6:	61f8      	str	r0, [r7, #28]
          break;
 80068d8:	e00c      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068da:	4b86      	ldr	r3, [pc, #536]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e6:	d104      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80068e8:	4b83      	ldr	r3, [pc, #524]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80068ea:	61fb      	str	r3, [r7, #28]
          break;
 80068ec:	e001      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80068ee:	bf00      	nop
 80068f0:	e118      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80068f2:	bf00      	nop
        break;
 80068f4:	e116      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068f6:	4b7f      	ldr	r3, [pc, #508]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006908:	d013      	beq.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006910:	d819      	bhi.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800691e:	d004      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8006920:	e011      	b.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006922:	f7ff f825 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 8006926:	61f8      	str	r0, [r7, #28]
          break;
 8006928:	e010      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800692a:	f7fe ff89 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 800692e:	61f8      	str	r0, [r7, #28]
          break;
 8006930:	e00c      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006932:	4b70      	ldr	r3, [pc, #448]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693e:	d104      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8006940:	4b6d      	ldr	r3, [pc, #436]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006942:	61fb      	str	r3, [r7, #28]
          break;
 8006944:	e001      	b.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8006946:	bf00      	nop
 8006948:	e0ec      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800694a:	bf00      	nop
        break;
 800694c:	e0ea      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800694e:	4b69      	ldr	r3, [pc, #420]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006960:	d013      	beq.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006968:	d819      	bhi.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d004      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006976:	d004      	beq.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8006978:	e011      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800697a:	f7fe fff9 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 800697e:	61f8      	str	r0, [r7, #28]
          break;
 8006980:	e010      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8006982:	f7fe ff5d 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 8006986:	61f8      	str	r0, [r7, #28]
          break;
 8006988:	e00c      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800698a:	4b5a      	ldr	r3, [pc, #360]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006996:	d104      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8006998:	4b57      	ldr	r3, [pc, #348]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800699a:	61fb      	str	r3, [r7, #28]
          break;
 800699c:	e001      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800699e:	bf00      	nop
 80069a0:	e0c0      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80069a2:	bf00      	nop
        break;
 80069a4:	e0be      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80069a6:	4b53      	ldr	r3, [pc, #332]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80069b0:	613b      	str	r3, [r7, #16]
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069b8:	d02c      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069c0:	d833      	bhi.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069c8:	d01a      	beq.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069d0:	d82b      	bhi.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d004      	beq.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069de:	d004      	beq.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80069e0:	e023      	b.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069e2:	f7fe ffc5 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 80069e6:	61f8      	str	r0, [r7, #28]
          break;
 80069e8:	e026      	b.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80069ea:	4b42      	ldr	r3, [pc, #264]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d11a      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80069f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80069fc:	61fb      	str	r3, [r7, #28]
          break;
 80069fe:	e016      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a00:	4b3c      	ldr	r3, [pc, #240]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0c:	d111      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8006a0e:	4b3a      	ldr	r3, [pc, #232]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006a10:	61fb      	str	r3, [r7, #28]
          break;
 8006a12:	e00e      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a14:	4b37      	ldr	r3, [pc, #220]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d109      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8006a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a26:	61fb      	str	r3, [r7, #28]
          break;
 8006a28:	e005      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8006a2a:	bf00      	nop
 8006a2c:	e07a      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a2e:	bf00      	nop
 8006a30:	e078      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a32:	bf00      	nop
 8006a34:	e076      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a36:	bf00      	nop
        break;
 8006a38:	e074      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a3a:	4b2e      	ldr	r3, [pc, #184]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a4c:	d02c      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a54:	d833      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a5c:	d01a      	beq.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a64:	d82b      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d004      	beq.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a72:	d004      	beq.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8006a74:	e023      	b.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a76:	f7fe ff7b 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 8006a7a:	61f8      	str	r0, [r7, #28]
          break;
 8006a7c:	e026      	b.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a7e:	4b1d      	ldr	r3, [pc, #116]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d11a      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8006a8c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a90:	61fb      	str	r3, [r7, #28]
          break;
 8006a92:	e016      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a94:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa0:	d111      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006aa4:	61fb      	str	r3, [r7, #28]
          break;
 8006aa6:	e00e      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006aa8:	4b12      	ldr	r3, [pc, #72]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d109      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8006ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aba:	61fb      	str	r3, [r7, #28]
          break;
 8006abc:	e005      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8006abe:	bf00      	nop
 8006ac0:	e030      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006ac2:	bf00      	nop
 8006ac4:	e02e      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006ac6:	bf00      	nop
 8006ac8:	e02c      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006aca:	bf00      	nop
        break;
 8006acc:	e02a      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006ace:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae6:	d009      	beq.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8006ae8:	e012      	b.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006aea:	f7fe ff41 	bl	8005970 <HAL_RCC_GetPCLK1Freq>
 8006aee:	61f8      	str	r0, [r7, #28]
          break;
 8006af0:	e00e      	b.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8006af2:	bf00      	nop
 8006af4:	40021000 	.word	0x40021000
 8006af8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006afc:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b08:	d101      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006b0c:	61fb      	str	r3, [r7, #28]
          break;
 8006b0e:	bf00      	nop
        break;
 8006b10:	e008      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b12:	bf00      	nop
 8006b14:	e006      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b16:	bf00      	nop
 8006b18:	e004      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b22:	bf00      	nop
    }
  }

  return(frequency);
 8006b24:	69fb      	ldr	r3, [r7, #28]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40021000 	.word	0x40021000
 8006b34:	00f42400 	.word	0x00f42400

08006b38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b46:	4b75      	ldr	r3, [pc, #468]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d018      	beq.n	8006b84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b52:	4b72      	ldr	r3, [pc, #456]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f003 0203 	and.w	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d10d      	bne.n	8006b7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
       ||
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b6a:	4b6c      	ldr	r3, [pc, #432]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	f003 0307 	and.w	r3, r3, #7
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
       ||
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d047      	beq.n	8006c0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	73fb      	strb	r3, [r7, #15]
 8006b82:	e044      	b.n	8006c0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d018      	beq.n	8006bbe <RCCEx_PLLSAI1_Config+0x86>
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d825      	bhi.n	8006bdc <RCCEx_PLLSAI1_Config+0xa4>
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d002      	beq.n	8006b9a <RCCEx_PLLSAI1_Config+0x62>
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d009      	beq.n	8006bac <RCCEx_PLLSAI1_Config+0x74>
 8006b98:	e020      	b.n	8006bdc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b9a:	4b60      	ldr	r3, [pc, #384]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d11d      	bne.n	8006be2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006baa:	e01a      	b.n	8006be2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bac:	4b5b      	ldr	r3, [pc, #364]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d116      	bne.n	8006be6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bbc:	e013      	b.n	8006be6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006bbe:	4b57      	ldr	r3, [pc, #348]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10f      	bne.n	8006bea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bca:	4b54      	ldr	r3, [pc, #336]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bda:	e006      	b.n	8006bea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      break;
 8006be0:	e004      	b.n	8006bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006be2:	bf00      	nop
 8006be4:	e002      	b.n	8006bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006be6:	bf00      	nop
 8006be8:	e000      	b.n	8006bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10d      	bne.n	8006c0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006bf2:	4b4a      	ldr	r3, [pc, #296]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6819      	ldr	r1, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	430b      	orrs	r3, r1
 8006c08:	4944      	ldr	r1, [pc, #272]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d17d      	bne.n	8006d10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c14:	4b41      	ldr	r3, [pc, #260]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a40      	ldr	r2, [pc, #256]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c20:	f7fb fb8c 	bl	800233c <HAL_GetTick>
 8006c24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c26:	e009      	b.n	8006c3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c28:	f7fb fb88 	bl	800233c <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d902      	bls.n	8006c3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	73fb      	strb	r3, [r7, #15]
        break;
 8006c3a:	e005      	b.n	8006c48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c3c:	4b37      	ldr	r3, [pc, #220]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1ef      	bne.n	8006c28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d160      	bne.n	8006d10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d111      	bne.n	8006c78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c54:	4b31      	ldr	r3, [pc, #196]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6892      	ldr	r2, [r2, #8]
 8006c64:	0211      	lsls	r1, r2, #8
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68d2      	ldr	r2, [r2, #12]
 8006c6a:	0912      	lsrs	r2, r2, #4
 8006c6c:	0452      	lsls	r2, r2, #17
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	492a      	ldr	r1, [pc, #168]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	610b      	str	r3, [r1, #16]
 8006c76:	e027      	b.n	8006cc8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d112      	bne.n	8006ca4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c7e:	4b27      	ldr	r3, [pc, #156]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6892      	ldr	r2, [r2, #8]
 8006c8e:	0211      	lsls	r1, r2, #8
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6912      	ldr	r2, [r2, #16]
 8006c94:	0852      	lsrs	r2, r2, #1
 8006c96:	3a01      	subs	r2, #1
 8006c98:	0552      	lsls	r2, r2, #21
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	491f      	ldr	r1, [pc, #124]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	610b      	str	r3, [r1, #16]
 8006ca2:	e011      	b.n	8006cc8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006cac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6892      	ldr	r2, [r2, #8]
 8006cb4:	0211      	lsls	r1, r2, #8
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6952      	ldr	r2, [r2, #20]
 8006cba:	0852      	lsrs	r2, r2, #1
 8006cbc:	3a01      	subs	r2, #1
 8006cbe:	0652      	lsls	r2, r2, #25
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	4916      	ldr	r1, [pc, #88]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cc8:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a13      	ldr	r2, [pc, #76]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd4:	f7fb fb32 	bl	800233c <HAL_GetTick>
 8006cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cda:	e009      	b.n	8006cf0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cdc:	f7fb fb2e 	bl	800233c <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d902      	bls.n	8006cf0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	73fb      	strb	r3, [r7, #15]
          break;
 8006cee:	e005      	b.n	8006cfc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0ef      	beq.n	8006cdc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d02:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d04:	691a      	ldr	r2, [r3, #16]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	4904      	ldr	r1, [pc, #16]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40021000 	.word	0x40021000

08006d20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d2e:	4b6a      	ldr	r3, [pc, #424]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d018      	beq.n	8006d6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d3a:	4b67      	ldr	r3, [pc, #412]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f003 0203 	and.w	r2, r3, #3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d10d      	bne.n	8006d66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d52:	4b61      	ldr	r3, [pc, #388]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	091b      	lsrs	r3, r3, #4
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
       ||
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d047      	beq.n	8006df6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]
 8006d6a:	e044      	b.n	8006df6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d018      	beq.n	8006da6 <RCCEx_PLLSAI2_Config+0x86>
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d825      	bhi.n	8006dc4 <RCCEx_PLLSAI2_Config+0xa4>
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d002      	beq.n	8006d82 <RCCEx_PLLSAI2_Config+0x62>
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d009      	beq.n	8006d94 <RCCEx_PLLSAI2_Config+0x74>
 8006d80:	e020      	b.n	8006dc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d82:	4b55      	ldr	r3, [pc, #340]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d11d      	bne.n	8006dca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d92:	e01a      	b.n	8006dca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d94:	4b50      	ldr	r3, [pc, #320]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d116      	bne.n	8006dce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da4:	e013      	b.n	8006dce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006da6:	4b4c      	ldr	r3, [pc, #304]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10f      	bne.n	8006dd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006db2:	4b49      	ldr	r3, [pc, #292]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006dc2:	e006      	b.n	8006dd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	e004      	b.n	8006dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006dca:	bf00      	nop
 8006dcc:	e002      	b.n	8006dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006dce:	bf00      	nop
 8006dd0:	e000      	b.n	8006dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006dd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10d      	bne.n	8006df6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006dda:	4b3f      	ldr	r3, [pc, #252]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6819      	ldr	r1, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	430b      	orrs	r3, r1
 8006df0:	4939      	ldr	r1, [pc, #228]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d167      	bne.n	8006ecc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006dfc:	4b36      	ldr	r3, [pc, #216]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a35      	ldr	r2, [pc, #212]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e08:	f7fb fa98 	bl	800233c <HAL_GetTick>
 8006e0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e0e:	e009      	b.n	8006e24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e10:	f7fb fa94 	bl	800233c <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d902      	bls.n	8006e24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	73fb      	strb	r3, [r7, #15]
        break;
 8006e22:	e005      	b.n	8006e30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e24:	4b2c      	ldr	r3, [pc, #176]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1ef      	bne.n	8006e10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d14a      	bne.n	8006ecc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d111      	bne.n	8006e60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e3c:	4b26      	ldr	r3, [pc, #152]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6892      	ldr	r2, [r2, #8]
 8006e4c:	0211      	lsls	r1, r2, #8
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	68d2      	ldr	r2, [r2, #12]
 8006e52:	0912      	lsrs	r2, r2, #4
 8006e54:	0452      	lsls	r2, r2, #17
 8006e56:	430a      	orrs	r2, r1
 8006e58:	491f      	ldr	r1, [pc, #124]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	614b      	str	r3, [r1, #20]
 8006e5e:	e011      	b.n	8006e84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e60:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	6892      	ldr	r2, [r2, #8]
 8006e70:	0211      	lsls	r1, r2, #8
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6912      	ldr	r2, [r2, #16]
 8006e76:	0852      	lsrs	r2, r2, #1
 8006e78:	3a01      	subs	r2, #1
 8006e7a:	0652      	lsls	r2, r2, #25
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	4916      	ldr	r1, [pc, #88]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e84:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e90:	f7fb fa54 	bl	800233c <HAL_GetTick>
 8006e94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e96:	e009      	b.n	8006eac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e98:	f7fb fa50 	bl	800233c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d902      	bls.n	8006eac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	73fb      	strb	r3, [r7, #15]
          break;
 8006eaa:	e005      	b.n	8006eb8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0ef      	beq.n	8006e98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ec0:	695a      	ldr	r2, [r3, #20]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	4904      	ldr	r1, [pc, #16]	; (8006ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40021000 	.word	0x40021000

08006edc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b089      	sub	sp, #36	; 0x24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef8:	d10c      	bne.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006efa:	4b6e      	ldr	r3, [pc, #440]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f00:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006f04:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f0c:	d112      	bne.n	8006f34 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f0e:	4b6a      	ldr	r3, [pc, #424]	; (80070b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	e00f      	b.n	8006f34 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1a:	d10b      	bne.n	8006f34 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006f1c:	4b65      	ldr	r3, [pc, #404]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f22:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006f26:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f2e:	d101      	bne.n	8006f34 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006f30:	4b61      	ldr	r3, [pc, #388]	; (80070b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006f32:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f040 80b4 	bne.w	80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f46:	d003      	beq.n	8006f50 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f4e:	d135      	bne.n	8006fbc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f50:	4b58      	ldr	r3, [pc, #352]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f5c:	f040 80a1 	bne.w	80070a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006f60:	4b54      	ldr	r3, [pc, #336]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 809a 	beq.w	80070a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f6e:	4b51      	ldr	r3, [pc, #324]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	3301      	adds	r3, #1
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f80:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006f82:	4b4c      	ldr	r3, [pc, #304]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006f94:	4b47      	ldr	r3, [pc, #284]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8006fa0:	2311      	movs	r3, #17
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e001      	b.n	8006faa <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8006fa6:	2307      	movs	r3, #7
 8006fa8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	fb03 f202 	mul.w	r2, r3, r2
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006fba:	e072      	b.n	80070a2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d133      	bne.n	800702a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006fc2:	4b3c      	ldr	r3, [pc, #240]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fce:	d169      	bne.n	80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006fd0:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d063      	beq.n	80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006fdc:	4b35      	ldr	r3, [pc, #212]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	091b      	lsrs	r3, r3, #4
 8006fe2:	f003 0307 	and.w	r3, r3, #7
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fee:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006ff0:	4b30      	ldr	r3, [pc, #192]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffa:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007002:	4b2c      	ldr	r3, [pc, #176]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800700e:	2311      	movs	r3, #17
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e001      	b.n	8007018 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8007014:	2307      	movs	r3, #7
 8007016:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	fb03 f202 	mul.w	r2, r3, r2
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	fbb2 f3f3 	udiv	r3, r2, r3
 8007026:	61fb      	str	r3, [r7, #28]
 8007028:	e03c      	b.n	80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007030:	d003      	beq.n	800703a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007038:	d134      	bne.n	80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800703a:	4b1e      	ldr	r3, [pc, #120]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007046:	d12d      	bne.n	80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8007048:	4b1a      	ldr	r3, [pc, #104]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d027      	beq.n	80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007054:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	091b      	lsrs	r3, r3, #4
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	3301      	adds	r3, #1
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	fbb2 f3f3 	udiv	r3, r2, r3
 8007066:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007068:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	0a1b      	lsrs	r3, r3, #8
 800706e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007072:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800707a:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8007086:	2311      	movs	r3, #17
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	e001      	b.n	8007090 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800708c:	2307      	movs	r3, #7
 800708e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	fb03 f202 	mul.w	r2, r3, r2
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	fbb2 f3f3 	udiv	r3, r2, r3
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	e000      	b.n	80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80070a2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80070a4:	69fb      	ldr	r3, [r7, #28]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3724      	adds	r7, #36	; 0x24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40021000 	.word	0x40021000
 80070b8:	001fff68 	.word	0x001fff68

080070bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d079      	beq.n	80071c2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fa fe5a 	bl	8001d9c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d058      	beq.n	80071b0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	22ca      	movs	r2, #202	; 0xca
 8007104:	625a      	str	r2, [r3, #36]	; 0x24
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2253      	movs	r2, #83	; 0x53
 800710c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9a4 	bl	800745c <RTC_EnterInitMode>
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d127      	bne.n	800716e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	6812      	ldr	r2, [r2, #0]
 8007128:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800712c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007130:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6899      	ldr	r1, [r3, #8]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	431a      	orrs	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	68d2      	ldr	r2, [r2, #12]
 8007158:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6919      	ldr	r1, [r3, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	041a      	lsls	r2, r3, #16
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f9a8 	bl	80074c4 <RTC_ExitInitMode>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d113      	bne.n	80071a6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0203 	bic.w	r2, r2, #3
 800718c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	69da      	ldr	r2, [r3, #28]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	22ff      	movs	r2, #255	; 0xff
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24
 80071ae:	e001      	b.n	80071b4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_RTC_SetTime+0x1a>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e08b      	b.n	80072fe <HAL_RTC_SetTime+0x132>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	22ca      	movs	r2, #202	; 0xca
 80071fc:	625a      	str	r2, [r3, #36]	; 0x24
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2253      	movs	r2, #83	; 0x53
 8007204:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f928 	bl	800745c <RTC_EnterInitMode>
 800720c:	4603      	mov	r3, r0
 800720e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007210:	7cfb      	ldrb	r3, [r7, #19]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d163      	bne.n	80072de <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d126      	bne.n	800726a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d102      	bne.n	8007230 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2200      	movs	r2, #0
 800722e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f000 f983 	bl	8007540 <RTC_ByteToBcd2>
 800723a:	4603      	mov	r3, r0
 800723c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	785b      	ldrb	r3, [r3, #1]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f97c 	bl	8007540 <RTC_ByteToBcd2>
 8007248:	4603      	mov	r3, r0
 800724a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800724c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	789b      	ldrb	r3, [r3, #2]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f974 	bl	8007540 <RTC_ByteToBcd2>
 8007258:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800725a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	78db      	ldrb	r3, [r3, #3]
 8007262:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e018      	b.n	800729c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2200      	movs	r2, #0
 800727c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800728a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007290:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	78db      	ldrb	r3, [r3, #3]
 8007296:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80072a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072aa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6899      	ldr	r1, [r3, #8]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	431a      	orrs	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f8f5 	bl	80074c4 <RTC_ExitInitMode>
 80072da:	4603      	mov	r3, r0
 80072dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80072e6:	7cfb      	ldrb	r3, [r7, #19]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80072fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	bd90      	pop	{r4, r7, pc}

08007306 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007306:	b590      	push	{r4, r7, lr}
 8007308:	b087      	sub	sp, #28
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_RTC_SetDate+0x1a>
 800731c:	2302      	movs	r3, #2
 800731e:	e075      	b.n	800740c <HAL_RTC_SetDate+0x106>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10e      	bne.n	8007354 <HAL_RTC_SetDate+0x4e>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	f003 0310 	and.w	r3, r3, #16
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	f023 0310 	bic.w	r3, r3, #16
 800734a:	b2db      	uxtb	r3, r3
 800734c:	330a      	adds	r3, #10
 800734e:	b2da      	uxtb	r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d11c      	bne.n	8007394 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	78db      	ldrb	r3, [r3, #3]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 f8ee 	bl	8007540 <RTC_ByteToBcd2>
 8007364:	4603      	mov	r3, r0
 8007366:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	785b      	ldrb	r3, [r3, #1]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f8e7 	bl	8007540 <RTC_ByteToBcd2>
 8007372:	4603      	mov	r3, r0
 8007374:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007376:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	789b      	ldrb	r3, [r3, #2]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 f8df 	bl	8007540 <RTC_ByteToBcd2>
 8007382:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007384:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e00e      	b.n	80073b2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	78db      	ldrb	r3, [r3, #3]
 8007398:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	785b      	ldrb	r3, [r3, #1]
 800739e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073a0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80073a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	22ca      	movs	r2, #202	; 0xca
 80073b8:	625a      	str	r2, [r3, #36]	; 0x24
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2253      	movs	r2, #83	; 0x53
 80073c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f84a 	bl	800745c <RTC_EnterInitMode>
 80073c8:	4603      	mov	r3, r0
 80073ca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80073cc:	7cfb      	ldrb	r3, [r7, #19]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10c      	bne.n	80073ec <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f86e 	bl	80074c4 <RTC_ExitInitMode>
 80073e8:	4603      	mov	r3, r0
 80073ea:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	22ff      	movs	r2, #255	; 0xff
 80073f2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80073f4:	7cfb      	ldrb	r3, [r7, #19]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800740a:	7cfb      	ldrb	r3, [r7, #19]
}
 800740c:	4618      	mov	r0, r3
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	bd90      	pop	{r4, r7, pc}

08007414 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a0d      	ldr	r2, [pc, #52]	; (8007458 <HAL_RTC_WaitForSynchro+0x44>)
 8007422:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007424:	f7fa ff8a 	bl	800233c <HAL_GetTick>
 8007428:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800742a:	e009      	b.n	8007440 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800742c:	f7fa ff86 	bl	800233c <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800743a:	d901      	bls.n	8007440 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e007      	b.n	8007450 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0ee      	beq.n	800742c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	0003ff5f 	.word	0x0003ff5f

0800745c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	d120      	bne.n	80074b8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f04f 32ff 	mov.w	r2, #4294967295
 800747e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007480:	f7fa ff5c 	bl	800233c <HAL_GetTick>
 8007484:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007486:	e00d      	b.n	80074a4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007488:	f7fa ff58 	bl	800233c <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007496:	d905      	bls.n	80074a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2203      	movs	r2, #3
 80074a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <RTC_EnterInitMode+0x5c>
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d1e7      	bne.n	8007488 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80074d0:	4b1a      	ldr	r3, [pc, #104]	; (800753c <RTC_ExitInitMode+0x78>)
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	4a19      	ldr	r2, [pc, #100]	; (800753c <RTC_ExitInitMode+0x78>)
 80074d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074da:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80074dc:	4b17      	ldr	r3, [pc, #92]	; (800753c <RTC_ExitInitMode+0x78>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10c      	bne.n	8007502 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff ff93 	bl	8007414 <HAL_RTC_WaitForSynchro>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01e      	beq.n	8007532 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2203      	movs	r2, #3
 80074f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	73fb      	strb	r3, [r7, #15]
 8007500:	e017      	b.n	8007532 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007502:	4b0e      	ldr	r3, [pc, #56]	; (800753c <RTC_ExitInitMode+0x78>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	4a0d      	ldr	r2, [pc, #52]	; (800753c <RTC_ExitInitMode+0x78>)
 8007508:	f023 0320 	bic.w	r3, r3, #32
 800750c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff ff80 	bl	8007414 <HAL_RTC_WaitForSynchro>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2203      	movs	r2, #3
 800751e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007526:	4b05      	ldr	r3, [pc, #20]	; (800753c <RTC_ExitInitMode+0x78>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4a04      	ldr	r2, [pc, #16]	; (800753c <RTC_ExitInitMode+0x78>)
 800752c:	f043 0320 	orr.w	r3, r3, #32
 8007530:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40002800 	.word	0x40002800

08007540 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007552:	e005      	b.n	8007560 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800755a:	7afb      	ldrb	r3, [r7, #11]
 800755c:	3b0a      	subs	r3, #10
 800755e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	2b09      	cmp	r3, #9
 8007564:	d8f6      	bhi.n	8007554 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	011b      	lsls	r3, r3, #4
 800756c:	b2da      	uxtb	r2, r3
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	4313      	orrs	r3, r2
 8007572:	b2db      	uxtb	r3, r3
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e022      	b.n	80075d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d105      	bne.n	80075aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7fa fc2b 	bl	8001e00 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2203      	movs	r2, #3
 80075ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f814 	bl	80075e0 <HAL_SD_InitCard>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e00a      	b.n	80075d8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075e0:	b5b0      	push	{r4, r5, r7, lr}
 80075e2:	b08e      	sub	sp, #56	; 0x38
 80075e4:	af04      	add	r7, sp, #16
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80075fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007600:	f7fe fd2c 	bl	800605c <HAL_RCCEx_GetPeriphCLKFreq>
 8007604:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	d109      	bne.n	8007620 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800761a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e07b      	b.n	8007718 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	09db      	lsrs	r3, r3, #7
 8007624:	4a3e      	ldr	r2, [pc, #248]	; (8007720 <HAL_SD_InitCard+0x140>)
 8007626:	fba2 2303 	umull	r2, r3, r2, r3
 800762a:	091b      	lsrs	r3, r3, #4
 800762c:	3b02      	subs	r3, #2
 800762e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681d      	ldr	r5, [r3, #0]
 8007634:	466c      	mov	r4, sp
 8007636:	f107 0314 	add.w	r3, r7, #20
 800763a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800763e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007648:	4628      	mov	r0, r5
 800764a:	f001 fac1 	bl	8008bd0 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800765c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f001 faff 	bl	8008c66 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007676:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3302      	adds	r3, #2
 800767c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007684:	4a27      	ldr	r2, [pc, #156]	; (8007724 <HAL_SD_InitCard+0x144>)
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	fbb2 f3f3 	udiv	r3, r2, r3
 800768c:	3301      	adds	r3, #1
 800768e:	4618      	mov	r0, r3
 8007690:	f7fa fe60 	bl	8002354 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 ffdf 	bl	8008658 <SD_PowerON>
 800769a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e02e      	b.n	8007718 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fefe 	bl	80084bc <SD_InitCard>
 80076c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e01b      	b.n	8007718 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076e8:	4618      	mov	r0, r3
 80076ea:	f001 fb4f 	bl	8008d8c <SDMMC_CmdBlockLength>
 80076ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00f      	beq.n	8007716 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a0b      	ldr	r2, [pc, #44]	; (8007728 <HAL_SD_InitCard+0x148>)
 80076fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3728      	adds	r7, #40	; 0x28
 800771c:	46bd      	mov	sp, r7
 800771e:	bdb0      	pop	{r4, r5, r7, pc}
 8007720:	014f8b59 	.word	0x014f8b59
 8007724:	00012110 	.word	0x00012110
 8007728:	004005ff 	.word	0x004005ff

0800772c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08c      	sub	sp, #48	; 0x30
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d107      	bne.n	8007754 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e0a9      	b.n	80078a8 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b01      	cmp	r3, #1
 800775e:	f040 80a2 	bne.w	80078a6 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	441a      	add	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007772:	429a      	cmp	r2, r3
 8007774:	d907      	bls.n	8007786 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e090      	b.n	80078a8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2203      	movs	r2, #3
 800778a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	4a45      	ldr	r2, [pc, #276]	; (80078b0 <HAL_SD_ReadBlocks_DMA+0x184>)
 800779c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	4a44      	ldr	r2, [pc, #272]	; (80078b4 <HAL_SD_ReadBlocks_DMA+0x188>)
 80077a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	2200      	movs	r2, #0
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3380      	adds	r3, #128	; 0x80
 80077b8:	4619      	mov	r1, r3
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	025b      	lsls	r3, r3, #9
 80077c0:	089b      	lsrs	r3, r3, #2
 80077c2:	f7fa ffb5 	bl	8002730 <HAL_DMA_Start_IT>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00f      	beq.n	80077ec <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a39      	ldr	r2, [pc, #228]	; (80078b8 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e05d      	b.n	80078a8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0208 	orr.w	r2, r2, #8
 80077fa:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007800:	2b01      	cmp	r3, #1
 8007802:	d002      	beq.n	800780a <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	025b      	lsls	r3, r3, #9
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800780a:	f04f 33ff 	mov.w	r3, #4294967295
 800780e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	025b      	lsls	r3, r3, #9
 8007814:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007816:	2390      	movs	r3, #144	; 0x90
 8007818:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800781a:	2302      	movs	r3, #2
 800781c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800781e:	2300      	movs	r3, #0
 8007820:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007822:	2301      	movs	r3, #1
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f107 0210 	add.w	r2, r7, #16
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f001 fa7f 	bl	8008d34 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d90a      	bls.n	8007852 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2282      	movs	r2, #130	; 0x82
 8007840:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007848:	4618      	mov	r0, r3
 800784a:	f001 fae3 	bl	8008e14 <SDMMC_CmdReadMultiBlock>
 800784e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007850:	e009      	b.n	8007866 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2281      	movs	r2, #129	; 0x81
 8007856:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800785e:	4618      	mov	r0, r3
 8007860:	f001 fab6 	bl	8008dd0 <SDMMC_CmdReadSingleBlock>
 8007864:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d012      	beq.n	8007892 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a11      	ldr	r2, [pc, #68]	; (80078b8 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	431a      	orrs	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e00a      	b.n	80078a8 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80078a0:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e000      	b.n	80078a8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80078a6:	2302      	movs	r3, #2
  }
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3730      	adds	r7, #48	; 0x30
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	080082d7 	.word	0x080082d7
 80078b4:	08008349 	.word	0x08008349
 80078b8:	004005ff 	.word	0x004005ff

080078bc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08c      	sub	sp, #48	; 0x30
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d107      	bne.n	80078e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0ac      	b.n	8007a3e <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	f040 80a5 	bne.w	8007a3c <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80078f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	441a      	add	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007902:	429a      	cmp	r2, r3
 8007904:	d907      	bls.n	8007916 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e093      	b.n	8007a3e <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2203      	movs	r2, #3
 800791a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2200      	movs	r2, #0
 8007924:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792a:	4a47      	ldr	r2, [pc, #284]	; (8007a48 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800792c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007932:	4a46      	ldr	r2, [pc, #280]	; (8007a4c <HAL_SD_WriteBlocks_DMA+0x190>)
 8007934:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793a:	2200      	movs	r2, #0
 800793c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007942:	2b01      	cmp	r3, #1
 8007944:	d002      	beq.n	800794c <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	025b      	lsls	r3, r3, #9
 800794a:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d90a      	bls.n	8007968 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	22a0      	movs	r2, #160	; 0xa0
 8007956:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fa9c 	bl	8008e9c <SDMMC_CmdWriteMultiBlock>
 8007964:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007966:	e009      	b.n	800797c <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2290      	movs	r2, #144	; 0x90
 800796c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007974:	4618      	mov	r0, r3
 8007976:	f001 fa6f 	bl	8008e58 <SDMMC_CmdWriteSingleBlock>
 800797a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	2b00      	cmp	r3, #0
 8007980:	d012      	beq.n	80079a8 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a32      	ldr	r2, [pc, #200]	; (8007a50 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007988:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	431a      	orrs	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e04a      	b.n	8007a3e <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0208 	orr.w	r2, r2, #8
 80079b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3380      	adds	r3, #128	; 0x80
 80079c4:	461a      	mov	r2, r3
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	025b      	lsls	r3, r3, #9
 80079ca:	089b      	lsrs	r3, r3, #2
 80079cc:	f7fa feb0 	bl	8002730 <HAL_DMA_Start_IT>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d012      	beq.n	80079fc <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a1d      	ldr	r2, [pc, #116]	; (8007a50 <HAL_SD_WriteBlocks_DMA+0x194>)
 80079dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e020      	b.n	8007a3e <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007a00:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	025b      	lsls	r3, r3, #9
 8007a06:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a08:	2390      	movs	r3, #144	; 0x90
 8007a0a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f107 0210 	add.w	r2, r7, #16
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 f986 	bl	8008d34 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 021a 	orr.w	r2, r2, #26
 8007a36:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e000      	b.n	8007a3e <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007a3c:	2302      	movs	r3, #2
  }
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3730      	adds	r7, #48	; 0x30
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	080082ad 	.word	0x080082ad
 8007a4c:	08008349 	.word	0x08008349
 8007a50:	004005ff 	.word	0x004005ff

08007a54 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d008      	beq.n	8007a82 <HAL_SD_IRQHandler+0x2e>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 f802 	bl	8008a84 <SD_Read_IT>
 8007a80:	e155      	b.n	8007d2e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 808f 	beq.w	8007bb0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007aaa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007aae:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d039      	beq.n	8007b3e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d104      	bne.n	8007ade <HAL_SD_IRQHandler+0x8a>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d011      	beq.n	8007b02 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 f9fc 	bl	8008ee0 <SDMMC_CmdStopTransfer>
 8007ae8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d008      	beq.n	8007b02 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	431a      	orrs	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f91f 	bl	8007d40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <HAL_SD_IRQHandler+0xda>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f003 f8fc 	bl	800ad2c <HAL_SD_RxCpltCallback>
 8007b34:	e0fb      	b.n	8007d2e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f003 f8ee 	bl	800ad18 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007b3c:	e0f7      	b.n	8007d2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80f2 	beq.w	8007d2e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f003 0320 	and.w	r3, r3, #32
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d011      	beq.n	8007b78 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 f9c1 	bl	8008ee0 <SDMMC_CmdStopTransfer>
 8007b5e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d008      	beq.n	8007b78 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f8e4 	bl	8007d40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f040 80d5 	bne.w	8007d2e <HAL_SD_IRQHandler+0x2da>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 80cf 	bne.w	8007d2e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0208 	bic.w	r2, r2, #8
 8007b9e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f003 f8b5 	bl	800ad18 <HAL_SD_TxCpltCallback>
}
 8007bae:	e0be      	b.n	8007d2e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d008      	beq.n	8007bd0 <HAL_SD_IRQHandler+0x17c>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 ffac 	bl	8008b26 <SD_Write_IT>
 8007bce:	e0ae      	b.n	8007d2e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80a7 	beq.w	8007d2e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	f043 0202 	orr.w	r2, r3, #2
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	f043 0208 	orr.w	r2, r3, #8
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d005      	beq.n	8007c2e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	f043 0220 	orr.w	r2, r3, #32
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	f043 0210 	orr.w	r2, r3, #16
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c50:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007c60:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 f93a 	bl	8008ee0 <SDMMC_CmdStopTransfer>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f855 	bl	8007d40 <HAL_SD_ErrorCallback>
}
 8007c96:	e04a      	b.n	8007d2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d045      	beq.n	8007d2e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d104      	bne.n	8007cb6 <HAL_SD_IRQHandler+0x262>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d011      	beq.n	8007cda <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cba:	4a1f      	ldr	r2, [pc, #124]	; (8007d38 <HAL_SD_IRQHandler+0x2e4>)
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fa fd94 	bl	80027f0 <HAL_DMA_Abort_IT>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d02f      	beq.n	8007d2e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fb84 	bl	80083e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007cd8:	e029      	b.n	8007d2e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <HAL_SD_IRQHandler+0x29a>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d011      	beq.n	8007d12 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	4a12      	ldr	r2, [pc, #72]	; (8007d3c <HAL_SD_IRQHandler+0x2e8>)
 8007cf4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fa fd78 	bl	80027f0 <HAL_DMA_Abort_IT>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fb9f 	bl	800844e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007d10:	e00d      	b.n	8007d2e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f002 ffec 	bl	800ad04 <HAL_SD_AbortCallback>
}
 8007d2c:	e7ff      	b.n	8007d2e <HAL_SD_IRQHandler+0x2da>
 8007d2e:	bf00      	nop
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	080083e1 	.word	0x080083e1
 8007d3c:	0800844f 	.word	0x0800844f

08007d40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d62:	0f9b      	lsrs	r3, r3, #30
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6e:	0e9b      	lsrs	r3, r3, #26
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d80:	0e1b      	lsrs	r3, r3, #24
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d92:	0c1b      	lsrs	r3, r3, #16
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d9e:	0a1b      	lsrs	r3, r3, #8
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007db4:	0d1b      	lsrs	r3, r3, #20
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc0:	0c1b      	lsrs	r3, r3, #16
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 030f 	and.w	r3, r3, #15
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd2:	0bdb      	lsrs	r3, r3, #15
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de4:	0b9b      	lsrs	r3, r3, #14
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df6:	0b5b      	lsrs	r3, r3, #13
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e08:	0b1b      	lsrs	r3, r3, #12
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d163      	bne.n	8007eec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e28:	009a      	lsls	r2, r3, #2
 8007e2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e2e:	4013      	ands	r3, r2
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e34:	0f92      	lsrs	r2, r2, #30
 8007e36:	431a      	orrs	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e40:	0edb      	lsrs	r3, r3, #27
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e52:	0e1b      	lsrs	r3, r3, #24
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e64:	0d5b      	lsrs	r3, r3, #21
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e76:	0c9b      	lsrs	r3, r3, #18
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e88:	0bdb      	lsrs	r3, r3, #15
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	7e1b      	ldrb	r3, [r3, #24]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	3302      	adds	r3, #2
 8007eac:	2201      	movs	r2, #1
 8007eae:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007eb6:	fb03 f202 	mul.w	r2, r3, r2
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	7a1b      	ldrb	r3, [r3, #8]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	2201      	movs	r2, #1
 8007eca:	409a      	lsls	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007ed8:	0a52      	lsrs	r2, r2, #9
 8007eda:	fb03 f202 	mul.w	r2, r3, r2
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ee8:	661a      	str	r2, [r3, #96]	; 0x60
 8007eea:	e031      	b.n	8007f50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d11d      	bne.n	8007f30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f02:	0c1b      	lsrs	r3, r3, #16
 8007f04:	431a      	orrs	r2, r3
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	029a      	lsls	r2, r3, #10
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	661a      	str	r2, [r3, #96]	; 0x60
 8007f2e:	e00f      	b.n	8007f50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a58      	ldr	r2, [pc, #352]	; (8008098 <HAL_SD_GetCardCSD+0x344>)
 8007f36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e09d      	b.n	800808c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f54:	0b9b      	lsrs	r3, r3, #14
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f66:	09db      	lsrs	r3, r3, #7
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f88:	0fdb      	lsrs	r3, r3, #31
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f94:	0f5b      	lsrs	r3, r3, #29
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 0303 	and.w	r3, r3, #3
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa6:	0e9b      	lsrs	r3, r3, #26
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb8:	0d9b      	lsrs	r3, r3, #22
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	0d5b      	lsrs	r3, r3, #21
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	0bdb      	lsrs	r3, r3, #15
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	0b9b      	lsrs	r3, r3, #14
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	b2da      	uxtb	r2, r3
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008022:	0b5b      	lsrs	r3, r3, #13
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	b2da      	uxtb	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008036:	0b1b      	lsrs	r3, r3, #12
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	b2da      	uxtb	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804a:	0a9b      	lsrs	r3, r3, #10
 800804c:	b2db      	uxtb	r3, r3
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	b2da      	uxtb	r2, r3
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805e:	0a1b      	lsrs	r3, r3, #8
 8008060:	b2db      	uxtb	r3, r3
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	b2da      	uxtb	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008072:	085b      	lsrs	r3, r3, #1
 8008074:	b2db      	uxtb	r3, r3
 8008076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807a:	b2da      	uxtb	r2, r3
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	004005ff 	.word	0x004005ff

0800809c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80080f4:	b5b0      	push	{r4, r5, r7, lr}
 80080f6:	b090      	sub	sp, #64	; 0x40
 80080f8:	af04      	add	r7, sp, #16
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2203      	movs	r2, #3
 8008108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008110:	2b03      	cmp	r3, #3
 8008112:	d02e      	beq.n	8008172 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811a:	d106      	bne.n	800812a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38
 8008128:	e029      	b.n	800817e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008130:	d10a      	bne.n	8008148 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fb46 	bl	80087c4 <SD_WideBus_Enable>
 8008138:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	431a      	orrs	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
 8008146:	e01a      	b.n	800817e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fb83 	bl	800885a <SD_WideBus_Disable>
 8008154:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	639a      	str	r2, [r3, #56]	; 0x38
 8008162:	e00c      	b.n	800817e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
 8008170:	e005      	b.n	800817e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	2b00      	cmp	r3, #0
 8008184:	d007      	beq.n	8008196 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a35      	ldr	r2, [pc, #212]	; (8008260 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800818c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008194:	e042      	b.n	800821c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008196:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800819a:	f7fd ff5f 	bl	800605c <HAL_RCCEx_GetPeriphCLKFreq>
 800819e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d031      	beq.n	800820a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	3302      	adds	r3, #2
 80081c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ce:	4a25      	ldr	r2, [pc, #148]	; (8008264 <HAL_SD_ConfigWideBusOperation+0x170>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d907      	bls.n	80081e4 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	4a24      	ldr	r2, [pc, #144]	; (8008268 <HAL_SD_ConfigWideBusOperation+0x174>)
 80081d8:	fba2 2303 	umull	r2, r3, r2, r3
 80081dc:	0ddb      	lsrs	r3, r3, #23
 80081de:	3b02      	subs	r3, #2
 80081e0:	623b      	str	r3, [r7, #32]
 80081e2:	e002      	b.n	80081ea <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681d      	ldr	r5, [r3, #0]
 80081ee:	466c      	mov	r4, sp
 80081f0:	f107 0318 	add.w	r3, r7, #24
 80081f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081fc:	f107 030c 	add.w	r3, r7, #12
 8008200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008202:	4628      	mov	r0, r5
 8008204:	f000 fce4 	bl	8008bd0 <SDMMC_Init>
 8008208:	e008      	b.n	800821c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fdb1 	bl	8008d8c <SDMMC_CmdBlockLength>
 800822a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00c      	beq.n	800824c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a0a      	ldr	r2, [pc, #40]	; (8008260 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8008238:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008258:	4618      	mov	r0, r3
 800825a:	3730      	adds	r7, #48	; 0x30
 800825c:	46bd      	mov	sp, r7
 800825e:	bdb0      	pop	{r4, r5, r7, pc}
 8008260:	004005ff 	.word	0x004005ff
 8008264:	017d7840 	.word	0x017d7840
 8008268:	55e63b89 	.word	0x55e63b89

0800826c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008278:	f107 030c 	add.w	r3, r7, #12
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa78 	bl	8008774 <SD_SendStatus>
 8008284:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	0a5b      	lsrs	r3, r3, #9
 800829c:	f003 030f 	and.w	r3, r3, #15
 80082a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80082a2:	693b      	ldr	r3, [r7, #16]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80082ca:	bf00      	nop
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e8:	2b82      	cmp	r3, #130	; 0x82
 80082ea:	d111      	bne.n	8008310 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fdf5 	bl	8008ee0 <SDMMC_CmdStopTransfer>
 80082f6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d008      	beq.n	8008310 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	431a      	orrs	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7ff fd18 	bl	8007d40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f022 0208 	bic.w	r2, r2, #8
 800831e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f240 523a 	movw	r2, #1338	; 0x53a
 8008328:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f002 fcf7 	bl	800ad2c <HAL_SD_RxCpltCallback>
#endif
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008364:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d002      	beq.n	8008372 <SD_DMAError+0x2a>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d12d      	bne.n	80083ce <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a19      	ldr	r2, [pc, #100]	; (80083dc <SD_DMAError+0x94>)
 8008378:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008388:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8008396:	6978      	ldr	r0, [r7, #20]
 8008398:	f7ff ff68 	bl	800826c <HAL_SD_GetCardState>
 800839c:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b06      	cmp	r3, #6
 80083a2:	d002      	beq.n	80083aa <SD_DMAError+0x62>
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	d10a      	bne.n	80083c0 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fd96 	bl	8008ee0 <SDMMC_CmdStopTransfer>
 80083b4:	4602      	mov	r2, r0
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	431a      	orrs	r2, r3
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2200      	movs	r2, #0
 80083cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80083ce:	6978      	ldr	r0, [r7, #20]
 80083d0:	f7ff fcb6 	bl	8007d40 <HAL_SD_ErrorCallback>
#endif
}
 80083d4:	bf00      	nop
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	004005ff 	.word	0x004005ff

080083e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f7ff ff37 	bl	800826c <HAL_SD_GetCardState>
 80083fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b06      	cmp	r3, #6
 8008412:	d002      	beq.n	800841a <SD_DMATxAbort+0x3a>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b05      	cmp	r3, #5
 8008418:	d10a      	bne.n	8008430 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fd5e 	bl	8008ee0 <SDMMC_CmdStopTransfer>
 8008424:	4602      	mov	r2, r0
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	431a      	orrs	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	2b00      	cmp	r3, #0
 8008436:	d103      	bne.n	8008440 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f002 fc63 	bl	800ad04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800843e:	e002      	b.n	8008446 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fc7d 	bl	8007d40 <HAL_SD_ErrorCallback>
}
 8008446:	bf00      	nop
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f240 523a 	movw	r2, #1338	; 0x53a
 8008464:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff ff00 	bl	800826c <HAL_SD_GetCardState>
 800846c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2b06      	cmp	r3, #6
 8008480:	d002      	beq.n	8008488 <SD_DMARxAbort+0x3a>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b05      	cmp	r3, #5
 8008486:	d10a      	bne.n	800849e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fd27 	bl	8008ee0 <SDMMC_CmdStopTransfer>
 8008492:	4602      	mov	r2, r0
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	431a      	orrs	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d103      	bne.n	80084ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f002 fc2c 	bl	800ad04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80084ac:	e002      	b.n	80084b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f7ff fc46 	bl	8007d40 <HAL_SD_ErrorCallback>
}
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084bc:	b5b0      	push	{r4, r5, r7, lr}
 80084be:	b094      	sub	sp, #80	; 0x50
 80084c0:	af04      	add	r7, sp, #16
 80084c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80084c4:	2301      	movs	r3, #1
 80084c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fbd9 	bl	8008c84 <SDMMC_GetPowerState>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80084dc:	e0b8      	b.n	8008650 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d02f      	beq.n	8008546 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fe02 	bl	80090f4 <SDMMC_CmdSendCID>
 80084f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <SD_InitCard+0x40>
    {
      return errorstate;
 80084f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fa:	e0a9      	b.n	8008650 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2100      	movs	r1, #0
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fc03 	bl	8008d0e <SDMMC_GetResponse>
 8008508:	4602      	mov	r2, r0
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2104      	movs	r1, #4
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fbfa 	bl	8008d0e <SDMMC_GetResponse>
 800851a:	4602      	mov	r2, r0
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2108      	movs	r1, #8
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fbf1 	bl	8008d0e <SDMMC_GetResponse>
 800852c:	4602      	mov	r2, r0
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	210c      	movs	r1, #12
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fbe8 	bl	8008d0e <SDMMC_GetResponse>
 800853e:	4602      	mov	r2, r0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	2b03      	cmp	r3, #3
 800854c:	d00d      	beq.n	800856a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f107 020e 	add.w	r2, r7, #14
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fe08 	bl	800916e <SDMMC_CmdSetRelAdd>
 800855e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <SD_InitCard+0xae>
    {
      return errorstate;
 8008566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008568:	e072      	b.n	8008650 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856e:	2b03      	cmp	r3, #3
 8008570:	d036      	beq.n	80085e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008572:	89fb      	ldrh	r3, [r7, #14]
 8008574:	461a      	mov	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008582:	041b      	lsls	r3, r3, #16
 8008584:	4619      	mov	r1, r3
 8008586:	4610      	mov	r0, r2
 8008588:	f000 fdd2 	bl	8009130 <SDMMC_CmdSendCSD>
 800858c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800858e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008596:	e05b      	b.n	8008650 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2100      	movs	r1, #0
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 fbb5 	bl	8008d0e <SDMMC_GetResponse>
 80085a4:	4602      	mov	r2, r0
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2104      	movs	r1, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fbac 	bl	8008d0e <SDMMC_GetResponse>
 80085b6:	4602      	mov	r2, r0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2108      	movs	r1, #8
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fba3 	bl	8008d0e <SDMMC_GetResponse>
 80085c8:	4602      	mov	r2, r0
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	210c      	movs	r1, #12
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fb9a 	bl	8008d0e <SDMMC_GetResponse>
 80085da:	4602      	mov	r2, r0
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2104      	movs	r1, #4
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fb91 	bl	8008d0e <SDMMC_GetResponse>
 80085ec:	4603      	mov	r3, r0
 80085ee:	0d1a      	lsrs	r2, r3, #20
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085f4:	f107 0310 	add.w	r3, r7, #16
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f7ff fbaa 	bl	8007d54 <HAL_SD_GetCardCSD>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008606:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800860a:	e021      	b.n	8008650 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008614:	041b      	lsls	r3, r3, #16
 8008616:	2200      	movs	r2, #0
 8008618:	461c      	mov	r4, r3
 800861a:	4615      	mov	r5, r2
 800861c:	4622      	mov	r2, r4
 800861e:	462b      	mov	r3, r5
 8008620:	4608      	mov	r0, r1
 8008622:	f000 fc7f 	bl	8008f24 <SDMMC_CmdSelDesel>
 8008626:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <SD_InitCard+0x176>
  {
    return errorstate;
 800862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008630:	e00e      	b.n	8008650 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681d      	ldr	r5, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	466c      	mov	r4, sp
 800863a:	f103 0210 	add.w	r2, r3, #16
 800863e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008644:	3304      	adds	r3, #4
 8008646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008648:	4628      	mov	r0, r5
 800864a:	f000 fac1 	bl	8008bd0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3740      	adds	r7, #64	; 0x40
 8008654:	46bd      	mov	sp, r7
 8008656:	bdb0      	pop	{r4, r5, r7, pc}

08008658 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 fc7a 	bl	8008f6a <SDMMC_CmdGoIdleState>
 8008676:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <SD_PowerON+0x2a>
  {
    return errorstate;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	e072      	b.n	8008768 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fc8d 	bl	8008fa6 <SDMMC_CmdOperCond>
 800868c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00d      	beq.n	80086b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fc63 	bl	8008f6a <SDMMC_CmdGoIdleState>
 80086a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	e05b      	b.n	8008768 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d137      	bne.n	800872e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2100      	movs	r1, #0
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fc8d 	bl	8008fe4 <SDMMC_CmdAppCommand>
 80086ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d02d      	beq.n	800872e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086d6:	e047      	b.n	8008768 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fc80 	bl	8008fe4 <SDMMC_CmdAppCommand>
 80086e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	e03b      	b.n	8008768 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	491e      	ldr	r1, [pc, #120]	; (8008770 <SD_PowerON+0x118>)
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fc96 	bl	8009028 <SDMMC_CmdAppOperCommand>
 80086fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008704:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008708:	e02e      	b.n	8008768 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fafc 	bl	8008d0e <SDMMC_GetResponse>
 8008716:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	0fdb      	lsrs	r3, r3, #31
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <SD_PowerON+0xcc>
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <SD_PowerON+0xce>
 8008724:	2300      	movs	r3, #0
 8008726:	613b      	str	r3, [r7, #16]

    count++;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3301      	adds	r3, #1
 800872c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008734:	4293      	cmp	r3, r2
 8008736:	d802      	bhi.n	800873e <SD_PowerON+0xe6>
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0cc      	beq.n	80086d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008744:	4293      	cmp	r3, r2
 8008746:	d902      	bls.n	800874e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800874c:	e00c      	b.n	8008768 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	645a      	str	r2, [r3, #68]	; 0x44
 800875e:	e002      	b.n	8008766 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	c1100000 	.word	0xc1100000

08008774 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d102      	bne.n	800878a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008788:	e018      	b.n	80087bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008792:	041b      	lsls	r3, r3, #16
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f000 fd0a 	bl	80091b0 <SDMMC_CmdSendStatus>
 800879c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	e009      	b.n	80087bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2100      	movs	r1, #0
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 faad 	bl	8008d0e <SDMMC_GetResponse>
 80087b4:	4602      	mov	r2, r0
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80087cc:	2300      	movs	r3, #0
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	2300      	movs	r3, #0
 80087d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2100      	movs	r1, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fa97 	bl	8008d0e <SDMMC_GetResponse>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087ea:	d102      	bne.n	80087f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087f0:	e02f      	b.n	8008852 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087f2:	f107 030c 	add.w	r3, r7, #12
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f879 	bl	80088f0 <SD_FindSCR>
 80087fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	e023      	b.n	8008852 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01c      	beq.n	800884e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881c:	041b      	lsls	r3, r3, #16
 800881e:	4619      	mov	r1, r3
 8008820:	4610      	mov	r0, r2
 8008822:	f000 fbdf 	bl	8008fe4 <SDMMC_CmdAppCommand>
 8008826:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	e00f      	b.n	8008852 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2102      	movs	r1, #2
 8008838:	4618      	mov	r0, r3
 800883a:	f000 fc18 	bl	800906e <SDMMC_CmdBusWidth>
 800883e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	e003      	b.n	8008852 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800884a:	2300      	movs	r3, #0
 800884c:	e001      	b.n	8008852 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800884e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b086      	sub	sp, #24
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008862:	2300      	movs	r3, #0
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	2300      	movs	r3, #0
 8008868:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2100      	movs	r1, #0
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fa4c 	bl	8008d0e <SDMMC_GetResponse>
 8008876:	4603      	mov	r3, r0
 8008878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800887c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008880:	d102      	bne.n	8008888 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008882:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008886:	e02f      	b.n	80088e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008888:	f107 030c 	add.w	r3, r7, #12
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f82e 	bl	80088f0 <SD_FindSCR>
 8008894:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	e023      	b.n	80088e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d01c      	beq.n	80088e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b2:	041b      	lsls	r3, r3, #16
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f000 fb94 	bl	8008fe4 <SDMMC_CmdAppCommand>
 80088bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	e00f      	b.n	80088e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2100      	movs	r1, #0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fbcd 	bl	800906e <SDMMC_CmdBusWidth>
 80088d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	e003      	b.n	80088e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e001      	b.n	80088e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088f0:	b590      	push	{r4, r7, lr}
 80088f2:	b08f      	sub	sp, #60	; 0x3c
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088fa:	f7f9 fd1f 	bl	800233c <HAL_GetTick>
 80088fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008904:	2300      	movs	r3, #0
 8008906:	60bb      	str	r3, [r7, #8]
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2108      	movs	r1, #8
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fa38 	bl	8008d8c <SDMMC_CmdBlockLength>
 800891c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	e0a9      	b.n	8008a7c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008930:	041b      	lsls	r3, r3, #16
 8008932:	4619      	mov	r1, r3
 8008934:	4610      	mov	r0, r2
 8008936:	f000 fb55 	bl	8008fe4 <SDMMC_CmdAppCommand>
 800893a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	e09a      	b.n	8008a7c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008946:	f04f 33ff 	mov.w	r3, #4294967295
 800894a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800894c:	2308      	movs	r3, #8
 800894e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008950:	2330      	movs	r3, #48	; 0x30
 8008952:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008954:	2302      	movs	r3, #2
 8008956:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008958:	2300      	movs	r3, #0
 800895a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800895c:	2301      	movs	r3, #1
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f107 0210 	add.w	r2, r7, #16
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f000 f9e2 	bl	8008d34 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4618      	mov	r0, r3
 8008976:	f000 fb9c 	bl	80090b2 <SDMMC_CmdSendSCR>
 800897a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	2b00      	cmp	r3, #0
 8008980:	d022      	beq.n	80089c8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	e07a      	b.n	8008a7c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00e      	beq.n	80089b2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6819      	ldr	r1, [r3, #0]
 8008998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	f107 0208 	add.w	r2, r7, #8
 80089a0:	18d4      	adds	r4, r2, r3
 80089a2:	4608      	mov	r0, r1
 80089a4:	f000 f941 	bl	8008c2a <SDMMC_ReadFIFO>
 80089a8:	4603      	mov	r3, r0
 80089aa:	6023      	str	r3, [r4, #0]
      index++;
 80089ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ae:	3301      	adds	r3, #1
 80089b0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089b2:	f7f9 fcc3 	bl	800233c <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c0:	d102      	bne.n	80089c8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089c6:	e059      	b.n	8008a7c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ce:	f240 432a 	movw	r3, #1066	; 0x42a
 80089d2:	4013      	ands	r3, r2
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0d6      	beq.n	8008986 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d005      	beq.n	80089f2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2208      	movs	r2, #8
 80089ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089ee:	2308      	movs	r3, #8
 80089f0:	e044      	b.n	8008a7c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f8:	f003 0302 	and.w	r3, r3, #2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2202      	movs	r2, #2
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a08:	2302      	movs	r3, #2
 8008a0a:	e037      	b.n	8008a7c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a22:	2320      	movs	r3, #32
 8008a24:	e02a      	b.n	8008a7c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	061a      	lsls	r2, r3, #24
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	021b      	lsls	r3, r3, #8
 8008a38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a3c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	0a1b      	lsrs	r3, r3, #8
 8008a42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a46:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	0e1b      	lsrs	r3, r3, #24
 8008a4c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	601a      	str	r2, [r3, #0]
    scr++;
 8008a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a54:	3304      	adds	r3, #4
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	061a      	lsls	r2, r3, #24
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	021b      	lsls	r3, r3, #8
 8008a60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a64:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a6e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	0e1b      	lsrs	r3, r3, #24
 8008a74:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	373c      	adds	r7, #60	; 0x3c
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd90      	pop	{r4, r7, pc}

08008a84 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a90:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a96:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d03f      	beq.n	8008b1e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]
 8008aa2:	e033      	b.n	8008b0c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f8be 	bl	8008c2a <SDMMC_ReadFIFO>
 8008aae:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	0a1b      	lsrs	r3, r3, #8
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	0c1b      	lsrs	r3, r3, #16
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	0e1b      	lsrs	r3, r3, #24
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b07      	cmp	r3, #7
 8008b10:	d9c8      	bls.n	8008aa4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008b1e:	bf00      	nop
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d043      	beq.n	8008bc8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e037      	b.n	8008bb6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	021a      	lsls	r2, r3, #8
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	041a      	lsls	r2, r3, #16
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	061a      	lsls	r2, r3, #24
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f107 0208 	add.w	r2, r7, #8
 8008ba8:	4611      	mov	r1, r2
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 f84a 	bl	8008c44 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	617b      	str	r3, [r7, #20]
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b07      	cmp	r3, #7
 8008bba:	d9c4      	bls.n	8008b46 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008bc8:	bf00      	nop
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	b480      	push	{r7}
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	f107 001c 	add.w	r0, r7, #28
 8008bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008bee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008bf2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008bf6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008bfa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008bfe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008c0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	431a      	orrs	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	b004      	add	sp, #16
 8008c28:	4770      	bx	lr

08008c2a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2203      	movs	r2, #3
 8008c72:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008c74:	2002      	movs	r0, #2
 8008c76:	f7f9 fb6d 	bl	8002354 <HAL_Delay>

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0303 	and.w	r3, r3, #3
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cbe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008cc4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008cca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008cda:	f023 030f 	bic.w	r3, r3, #15
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	b2db      	uxtb	r3, r3
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3314      	adds	r3, #20
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	4413      	add	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d5a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d60:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0

}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d9a:	2310      	movs	r3, #16
 8008d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d9e:	2340      	movs	r3, #64	; 0x40
 8008da0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008da2:	2300      	movs	r3, #0
 8008da4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008daa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dac:	f107 0308 	add.w	r3, r7, #8
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff ff74 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dbc:	2110      	movs	r1, #16
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fa18 	bl	80091f4 <SDMMC_GetCmdResp1>
 8008dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008dde:	2311      	movs	r3, #17
 8008de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008de2:	2340      	movs	r3, #64	; 0x40
 8008de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008df0:	f107 0308 	add.w	r3, r7, #8
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff ff52 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e00:	2111      	movs	r1, #17
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f9f6 	bl	80091f4 <SDMMC_GetCmdResp1>
 8008e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e0a:	69fb      	ldr	r3, [r7, #28]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3720      	adds	r7, #32
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e22:	2312      	movs	r3, #18
 8008e24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e26:	2340      	movs	r3, #64	; 0x40
 8008e28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e34:	f107 0308 	add.w	r3, r7, #8
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7ff ff30 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e44:	2112      	movs	r1, #18
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f9d4 	bl	80091f4 <SDMMC_GetCmdResp1>
 8008e4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e66:	2318      	movs	r3, #24
 8008e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e6a:	2340      	movs	r3, #64	; 0x40
 8008e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e78:	f107 0308 	add.w	r3, r7, #8
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff ff0e 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e88:	2118      	movs	r1, #24
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9b2 	bl	80091f4 <SDMMC_GetCmdResp1>
 8008e90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e92:	69fb      	ldr	r3, [r7, #28]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3720      	adds	r7, #32
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008eaa:	2319      	movs	r3, #25
 8008eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eae:	2340      	movs	r3, #64	; 0x40
 8008eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ebc:	f107 0308 	add.w	r3, r7, #8
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff feec 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ecc:	2119      	movs	r1, #25
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f990 	bl	80091f4 <SDMMC_GetCmdResp1>
 8008ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008eec:	230c      	movs	r3, #12
 8008eee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ef0:	2340      	movs	r3, #64	; 0x40
 8008ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efc:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008efe:	f107 0308 	add.w	r3, r7, #8
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff fecb 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008f0a:	4a05      	ldr	r2, [pc, #20]	; (8008f20 <SDMMC_CmdStopTransfer+0x40>)
 8008f0c:	210c      	movs	r1, #12
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f970 	bl	80091f4 <SDMMC_GetCmdResp1>
 8008f14:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008f16:	69fb      	ldr	r3, [r7, #28]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3720      	adds	r7, #32
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	05f5e100 	.word	0x05f5e100

08008f24 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	; 0x28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f34:	2307      	movs	r3, #7
 8008f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f38:	2340      	movs	r3, #64	; 0x40
 8008f3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f44:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f46:	f107 0310 	add.w	r3, r7, #16
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f7ff fea7 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f56:	2107      	movs	r1, #7
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 f94b 	bl	80091f4 <SDMMC_GetCmdResp1>
 8008f5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3728      	adds	r7, #40	; 0x28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b088      	sub	sp, #32
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f88:	f107 0308 	add.w	r3, r7, #8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff fe86 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fb65 	bl	8009664 <SDMMC_GetCmdError>
 8008f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b088      	sub	sp, #32
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008fae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fb8:	2340      	movs	r3, #64	; 0x40
 8008fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fc6:	f107 0308 	add.w	r3, r7, #8
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff fe67 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 faf8 	bl	80095c8 <SDMMC_GetCmdResp7>
 8008fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fda:	69fb      	ldr	r3, [r7, #28]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3720      	adds	r7, #32
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008ff2:	2337      	movs	r3, #55	; 0x37
 8008ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ff6:	2340      	movs	r3, #64	; 0x40
 8008ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009004:	f107 0308 	add.w	r3, r7, #8
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff fe48 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009010:	f241 3288 	movw	r2, #5000	; 0x1388
 8009014:	2137      	movs	r1, #55	; 0x37
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f8ec 	bl	80091f4 <SDMMC_GetCmdResp1>
 800901c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800901e:	69fb      	ldr	r3, [r7, #28]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800903c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800903e:	2329      	movs	r3, #41	; 0x29
 8009040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009042:	2340      	movs	r3, #64	; 0x40
 8009044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800904a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800904e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009050:	f107 0308 	add.w	r3, r7, #8
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff fe22 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f9ff 	bl	8009460 <SDMMC_GetCmdResp3>
 8009062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009064:	69fb      	ldr	r3, [r7, #28]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3720      	adds	r7, #32
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b088      	sub	sp, #32
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800907c:	2306      	movs	r3, #6
 800907e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009080:	2340      	movs	r3, #64	; 0x40
 8009082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800908c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800908e:	f107 0308 	add.w	r3, r7, #8
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff fe03 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800909a:	f241 3288 	movw	r2, #5000	; 0x1388
 800909e:	2106      	movs	r1, #6
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f8a7 	bl	80091f4 <SDMMC_GetCmdResp1>
 80090a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090a8:	69fb      	ldr	r3, [r7, #28]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b088      	sub	sp, #32
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80090be:	2333      	movs	r3, #51	; 0x33
 80090c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090c2:	2340      	movs	r3, #64	; 0x40
 80090c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090d0:	f107 0308 	add.w	r3, r7, #8
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff fde2 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80090dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e0:	2133      	movs	r1, #51	; 0x33
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f886 	bl	80091f4 <SDMMC_GetCmdResp1>
 80090e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ea:	69fb      	ldr	r3, [r7, #28]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009100:	2302      	movs	r3, #2
 8009102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009104:	23c0      	movs	r3, #192	; 0xc0
 8009106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009108:	2300      	movs	r3, #0
 800910a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800910c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009110:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009112:	f107 0308 	add.w	r3, r7, #8
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff fdc1 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f956 	bl	80093d0 <SDMMC_GetCmdResp2>
 8009124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009126:	69fb      	ldr	r3, [r7, #28]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800913e:	2309      	movs	r3, #9
 8009140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009142:	23c0      	movs	r3, #192	; 0xc0
 8009144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800914a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800914e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009150:	f107 0308 	add.w	r3, r7, #8
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff fda2 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f937 	bl	80093d0 <SDMMC_GetCmdResp2>
 8009162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009164:	69fb      	ldr	r3, [r7, #28]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b088      	sub	sp, #32
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800917c:	2303      	movs	r3, #3
 800917e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009180:	2340      	movs	r3, #64	; 0x40
 8009182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800918c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800918e:	f107 0308 	add.w	r3, r7, #8
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff fd83 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	2103      	movs	r1, #3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f99c 	bl	80094dc <SDMMC_GetCmdResp6>
 80091a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091a6:	69fb      	ldr	r3, [r7, #28]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80091be:	230d      	movs	r3, #13
 80091c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091c2:	2340      	movs	r3, #64	; 0x40
 80091c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091c6:	2300      	movs	r3, #0
 80091c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091d0:	f107 0308 	add.w	r3, r7, #8
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7ff fd62 	bl	8008ca0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80091dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e0:	210d      	movs	r1, #13
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f806 	bl	80091f4 <SDMMC_GetCmdResp1>
 80091e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ea:	69fb      	ldr	r3, [r7, #28]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	460b      	mov	r3, r1
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009202:	4b70      	ldr	r3, [pc, #448]	; (80093c4 <SDMMC_GetCmdResp1+0x1d0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a70      	ldr	r2, [pc, #448]	; (80093c8 <SDMMC_GetCmdResp1+0x1d4>)
 8009208:	fba2 2303 	umull	r2, r3, r2, r3
 800920c:	0a5a      	lsrs	r2, r3, #9
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	fb02 f303 	mul.w	r3, r2, r3
 8009214:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	1e5a      	subs	r2, r3, #1
 800921a:	61fa      	str	r2, [r7, #28]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009224:	e0c9      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0ef      	beq.n	8009216 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1ea      	bne.n	8009216 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2204      	movs	r2, #4
 8009250:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009252:	2304      	movs	r3, #4
 8009254:	e0b1      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925a:	f003 0301 	and.w	r3, r3, #1
 800925e:	2b00      	cmp	r3, #0
 8009260:	d004      	beq.n	800926c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009268:	2301      	movs	r3, #1
 800926a:	e0a6      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	22c5      	movs	r2, #197	; 0xc5
 8009270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7ff fd3e 	bl	8008cf4 <SDMMC_GetCommandResponse>
 8009278:	4603      	mov	r3, r0
 800927a:	461a      	mov	r2, r3
 800927c:	7afb      	ldrb	r3, [r7, #11]
 800927e:	4293      	cmp	r3, r2
 8009280:	d001      	beq.n	8009286 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009282:	2301      	movs	r3, #1
 8009284:	e099      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009286:	2100      	movs	r1, #0
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f7ff fd40 	bl	8008d0e <SDMMC_GetResponse>
 800928e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	4b4e      	ldr	r3, [pc, #312]	; (80093cc <SDMMC_GetCmdResp1+0x1d8>)
 8009294:	4013      	ands	r3, r2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800929a:	2300      	movs	r3, #0
 800929c:	e08d      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	da02      	bge.n	80092aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80092a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092a8:	e087      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80092b4:	2340      	movs	r3, #64	; 0x40
 80092b6:	e080      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092c2:	2380      	movs	r3, #128	; 0x80
 80092c4:	e079      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092d4:	e071      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80092e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092e4:	e069      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80092f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092f4:	e061      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009304:	e059      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009314:	e051      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009324:	e049      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009334:	e041      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009344:	e039      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009354:	e031      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009364:	e029      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009370:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009374:	e021      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009380:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009384:	e019      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009394:	e011      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80093a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093a4:	e009      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80093b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80093b4:	e001      	b.n	80093ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3720      	adds	r7, #32
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000000 	.word	0x20000000
 80093c8:	10624dd3 	.word	0x10624dd3
 80093cc:	fdffe008 	.word	0xfdffe008

080093d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093d8:	4b1f      	ldr	r3, [pc, #124]	; (8009458 <SDMMC_GetCmdResp2+0x88>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a1f      	ldr	r2, [pc, #124]	; (800945c <SDMMC_GetCmdResp2+0x8c>)
 80093de:	fba2 2303 	umull	r2, r3, r2, r3
 80093e2:	0a5b      	lsrs	r3, r3, #9
 80093e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e8:	fb02 f303 	mul.w	r3, r2, r3
 80093ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	1e5a      	subs	r2, r3, #1
 80093f2:	60fa      	str	r2, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d102      	bne.n	80093fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093fc:	e026      	b.n	800944c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009402:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0ef      	beq.n	80093ee <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1ea      	bne.n	80093ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941c:	f003 0304 	and.w	r3, r3, #4
 8009420:	2b00      	cmp	r3, #0
 8009422:	d004      	beq.n	800942e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2204      	movs	r2, #4
 8009428:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800942a:	2304      	movs	r3, #4
 800942c:	e00e      	b.n	800944c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	d004      	beq.n	8009444 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009440:	2301      	movs	r3, #1
 8009442:	e003      	b.n	800944c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	22c5      	movs	r2, #197	; 0xc5
 8009448:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	20000000 	.word	0x20000000
 800945c:	10624dd3 	.word	0x10624dd3

08009460 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009468:	4b1a      	ldr	r3, [pc, #104]	; (80094d4 <SDMMC_GetCmdResp3+0x74>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a1a      	ldr	r2, [pc, #104]	; (80094d8 <SDMMC_GetCmdResp3+0x78>)
 800946e:	fba2 2303 	umull	r2, r3, r2, r3
 8009472:	0a5b      	lsrs	r3, r3, #9
 8009474:	f241 3288 	movw	r2, #5000	; 0x1388
 8009478:	fb02 f303 	mul.w	r3, r2, r3
 800947c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	1e5a      	subs	r2, r3, #1
 8009482:	60fa      	str	r2, [r7, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d102      	bne.n	800948e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800948c:	e01b      	b.n	80094c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009492:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0ef      	beq.n	800947e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1ea      	bne.n	800947e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d004      	beq.n	80094be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2204      	movs	r2, #4
 80094b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094ba:	2304      	movs	r3, #4
 80094bc:	e003      	b.n	80094c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	22c5      	movs	r2, #197	; 0xc5
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	20000000 	.word	0x20000000
 80094d8:	10624dd3 	.word	0x10624dd3

080094dc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	460b      	mov	r3, r1
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094ea:	4b35      	ldr	r3, [pc, #212]	; (80095c0 <SDMMC_GetCmdResp6+0xe4>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a35      	ldr	r2, [pc, #212]	; (80095c4 <SDMMC_GetCmdResp6+0xe8>)
 80094f0:	fba2 2303 	umull	r2, r3, r2, r3
 80094f4:	0a5b      	lsrs	r3, r3, #9
 80094f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094fa:	fb02 f303 	mul.w	r3, r2, r3
 80094fe:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	1e5a      	subs	r2, r3, #1
 8009504:	61fa      	str	r2, [r7, #28]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d102      	bne.n	8009510 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800950a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800950e:	e052      	b.n	80095b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009514:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0ef      	beq.n	8009500 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1ea      	bne.n	8009500 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952e:	f003 0304 	and.w	r3, r3, #4
 8009532:	2b00      	cmp	r3, #0
 8009534:	d004      	beq.n	8009540 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2204      	movs	r2, #4
 800953a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800953c:	2304      	movs	r3, #4
 800953e:	e03a      	b.n	80095b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	d004      	beq.n	8009556 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2201      	movs	r2, #1
 8009550:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009552:	2301      	movs	r3, #1
 8009554:	e02f      	b.n	80095b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f7ff fbcc 	bl	8008cf4 <SDMMC_GetCommandResponse>
 800955c:	4603      	mov	r3, r0
 800955e:	461a      	mov	r2, r3
 8009560:	7afb      	ldrb	r3, [r7, #11]
 8009562:	4293      	cmp	r3, r2
 8009564:	d001      	beq.n	800956a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009566:	2301      	movs	r3, #1
 8009568:	e025      	b.n	80095b6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	22c5      	movs	r2, #197	; 0xc5
 800956e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009570:	2100      	movs	r1, #0
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f7ff fbcb 	bl	8008d0e <SDMMC_GetResponse>
 8009578:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	0c1b      	lsrs	r3, r3, #16
 8009588:	b29a      	uxth	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800958e:	2300      	movs	r3, #0
 8009590:	e011      	b.n	80095b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800959c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095a0:	e009      	b.n	80095b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095b0:	e001      	b.n	80095b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3720      	adds	r7, #32
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000000 	.word	0x20000000
 80095c4:	10624dd3 	.word	0x10624dd3

080095c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095d0:	4b22      	ldr	r3, [pc, #136]	; (800965c <SDMMC_GetCmdResp7+0x94>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a22      	ldr	r2, [pc, #136]	; (8009660 <SDMMC_GetCmdResp7+0x98>)
 80095d6:	fba2 2303 	umull	r2, r3, r2, r3
 80095da:	0a5b      	lsrs	r3, r3, #9
 80095dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e0:	fb02 f303 	mul.w	r3, r2, r3
 80095e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	1e5a      	subs	r2, r3, #1
 80095ea:	60fa      	str	r2, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d102      	bne.n	80095f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095f4:	e02c      	b.n	8009650 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0ef      	beq.n	80095e6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1ea      	bne.n	80095e6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2204      	movs	r2, #4
 8009620:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009622:	2304      	movs	r3, #4
 8009624:	e014      	b.n	8009650 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b00      	cmp	r3, #0
 8009630:	d004      	beq.n	800963c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009638:	2301      	movs	r3, #1
 800963a:	e009      	b.n	8009650 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2240      	movs	r2, #64	; 0x40
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800964e:	2300      	movs	r3, #0

}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	20000000 	.word	0x20000000
 8009660:	10624dd3 	.word	0x10624dd3

08009664 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800966c:	4b11      	ldr	r3, [pc, #68]	; (80096b4 <SDMMC_GetCmdError+0x50>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a11      	ldr	r2, [pc, #68]	; (80096b8 <SDMMC_GetCmdError+0x54>)
 8009672:	fba2 2303 	umull	r2, r3, r2, r3
 8009676:	0a5b      	lsrs	r3, r3, #9
 8009678:	f241 3288 	movw	r2, #5000	; 0x1388
 800967c:	fb02 f303 	mul.w	r3, r2, r3
 8009680:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	1e5a      	subs	r2, r3, #1
 8009686:	60fa      	str	r2, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d102      	bne.n	8009692 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800968c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009690:	e009      	b.n	80096a6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0f1      	beq.n	8009682 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	22c5      	movs	r2, #197	; 0xc5
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20000000 	.word	0x20000000
 80096b8:	10624dd3 	.word	0x10624dd3

080096bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096bc:	b084      	sub	sp, #16
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	f107 001c 	add.w	r0, r7, #28
 80096ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f001 fa1c 	bl	800ab18 <USB_CoreReset>
 80096e0:	4603      	mov	r3, r0
 80096e2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80096e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d106      	bne.n	80096f8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	639a      	str	r2, [r3, #56]	; 0x38
 80096f6:	e005      	b.n	8009704 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009710:	b004      	add	sp, #16
 8009712:	4770      	bx	lr

08009714 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	4613      	mov	r3, r2
 8009720:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d165      	bne.n	80097f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	4a3e      	ldr	r2, [pc, #248]	; (8009824 <USB_SetTurnaroundTime+0x110>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d906      	bls.n	800973e <USB_SetTurnaroundTime+0x2a>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	4a3d      	ldr	r2, [pc, #244]	; (8009828 <USB_SetTurnaroundTime+0x114>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d202      	bcs.n	800973e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009738:	230f      	movs	r3, #15
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	e05c      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	4a39      	ldr	r2, [pc, #228]	; (8009828 <USB_SetTurnaroundTime+0x114>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d306      	bcc.n	8009754 <USB_SetTurnaroundTime+0x40>
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	4a38      	ldr	r2, [pc, #224]	; (800982c <USB_SetTurnaroundTime+0x118>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d202      	bcs.n	8009754 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800974e:	230e      	movs	r3, #14
 8009750:	617b      	str	r3, [r7, #20]
 8009752:	e051      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	4a35      	ldr	r2, [pc, #212]	; (800982c <USB_SetTurnaroundTime+0x118>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d306      	bcc.n	800976a <USB_SetTurnaroundTime+0x56>
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	4a34      	ldr	r2, [pc, #208]	; (8009830 <USB_SetTurnaroundTime+0x11c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d202      	bcs.n	800976a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009764:	230d      	movs	r3, #13
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	e046      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	4a30      	ldr	r2, [pc, #192]	; (8009830 <USB_SetTurnaroundTime+0x11c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d306      	bcc.n	8009780 <USB_SetTurnaroundTime+0x6c>
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	4a2f      	ldr	r2, [pc, #188]	; (8009834 <USB_SetTurnaroundTime+0x120>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d802      	bhi.n	8009780 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800977a:	230c      	movs	r3, #12
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	e03b      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4a2c      	ldr	r2, [pc, #176]	; (8009834 <USB_SetTurnaroundTime+0x120>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d906      	bls.n	8009796 <USB_SetTurnaroundTime+0x82>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4a2b      	ldr	r2, [pc, #172]	; (8009838 <USB_SetTurnaroundTime+0x124>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d802      	bhi.n	8009796 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009790:	230b      	movs	r3, #11
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	e030      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	4a27      	ldr	r2, [pc, #156]	; (8009838 <USB_SetTurnaroundTime+0x124>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d906      	bls.n	80097ac <USB_SetTurnaroundTime+0x98>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	4a26      	ldr	r2, [pc, #152]	; (800983c <USB_SetTurnaroundTime+0x128>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d802      	bhi.n	80097ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097a6:	230a      	movs	r3, #10
 80097a8:	617b      	str	r3, [r7, #20]
 80097aa:	e025      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4a23      	ldr	r2, [pc, #140]	; (800983c <USB_SetTurnaroundTime+0x128>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d906      	bls.n	80097c2 <USB_SetTurnaroundTime+0xae>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	4a22      	ldr	r2, [pc, #136]	; (8009840 <USB_SetTurnaroundTime+0x12c>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d202      	bcs.n	80097c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80097bc:	2309      	movs	r3, #9
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	e01a      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	4a1e      	ldr	r2, [pc, #120]	; (8009840 <USB_SetTurnaroundTime+0x12c>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d306      	bcc.n	80097d8 <USB_SetTurnaroundTime+0xc4>
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	4a1d      	ldr	r2, [pc, #116]	; (8009844 <USB_SetTurnaroundTime+0x130>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d802      	bhi.n	80097d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80097d2:	2308      	movs	r3, #8
 80097d4:	617b      	str	r3, [r7, #20]
 80097d6:	e00f      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <USB_SetTurnaroundTime+0x130>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d906      	bls.n	80097ee <USB_SetTurnaroundTime+0xda>
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	4a19      	ldr	r2, [pc, #100]	; (8009848 <USB_SetTurnaroundTime+0x134>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d202      	bcs.n	80097ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80097e8:	2307      	movs	r3, #7
 80097ea:	617b      	str	r3, [r7, #20]
 80097ec:	e004      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80097ee:	2306      	movs	r3, #6
 80097f0:	617b      	str	r3, [r7, #20]
 80097f2:	e001      	b.n	80097f8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80097f4:	2309      	movs	r3, #9
 80097f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	029b      	lsls	r3, r3, #10
 800980c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009810:	431a      	orrs	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	371c      	adds	r7, #28
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	00d8acbf 	.word	0x00d8acbf
 8009828:	00e4e1c0 	.word	0x00e4e1c0
 800982c:	00f42400 	.word	0x00f42400
 8009830:	01067380 	.word	0x01067380
 8009834:	011a499f 	.word	0x011a499f
 8009838:	01312cff 	.word	0x01312cff
 800983c:	014ca43f 	.word	0x014ca43f
 8009840:	016e3600 	.word	0x016e3600
 8009844:	01a6ab1f 	.word	0x01a6ab1f
 8009848:	01e84800 	.word	0x01e84800

0800984c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f043 0201 	orr.w	r2, r3, #1
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	f023 0201 	bic.w	r2, r3, #1
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d115      	bne.n	80098de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098be:	2001      	movs	r0, #1
 80098c0:	f7f8 fd48 	bl	8002354 <HAL_Delay>
      ms++;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f001 f8ab 	bl	800aa26 <USB_GetMode>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d01e      	beq.n	8009914 <USB_SetCurrentMode+0x84>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b31      	cmp	r3, #49	; 0x31
 80098da:	d9f0      	bls.n	80098be <USB_SetCurrentMode+0x2e>
 80098dc:	e01a      	b.n	8009914 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d115      	bne.n	8009910 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098f0:	2001      	movs	r0, #1
 80098f2:	f7f8 fd2f 	bl	8002354 <HAL_Delay>
      ms++;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3301      	adds	r3, #1
 80098fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 f892 	bl	800aa26 <USB_GetMode>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d005      	beq.n	8009914 <USB_SetCurrentMode+0x84>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b31      	cmp	r3, #49	; 0x31
 800990c:	d9f0      	bls.n	80098f0 <USB_SetCurrentMode+0x60>
 800990e:	e001      	b.n	8009914 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e005      	b.n	8009920 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b32      	cmp	r3, #50	; 0x32
 8009918:	d101      	bne.n	800991e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e000      	b.n	8009920 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009928:	b084      	sub	sp, #16
 800992a:	b580      	push	{r7, lr}
 800992c:	b086      	sub	sp, #24
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
 8009932:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
 8009946:	e009      	b.n	800995c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	3340      	adds	r3, #64	; 0x40
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	2200      	movs	r2, #0
 8009954:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	3301      	adds	r3, #1
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	2b0e      	cmp	r3, #14
 8009960:	d9f2      	bls.n	8009948 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d11c      	bne.n	80099a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009976:	f043 0302 	orr.w	r3, r3, #2
 800997a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	e005      	b.n	80099ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099b4:	461a      	mov	r2, r3
 80099b6:	2300      	movs	r3, #0
 80099b8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099ba:	2103      	movs	r1, #3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f959 	bl	8009c74 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099c2:	2110      	movs	r1, #16
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f8f1 	bl	8009bac <USB_FlushTxFifo>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f91d 	bl	8009c14 <USB_FlushRxFifo>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ea:	461a      	mov	r2, r3
 80099ec:	2300      	movs	r3, #0
 80099ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f6:	461a      	mov	r2, r3
 80099f8:	2300      	movs	r3, #0
 80099fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a02:	461a      	mov	r2, r3
 8009a04:	2300      	movs	r3, #0
 8009a06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	613b      	str	r3, [r7, #16]
 8009a0c:	e043      	b.n	8009a96 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a24:	d118      	bne.n	8009a58 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10a      	bne.n	8009a42 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a38:	461a      	mov	r2, r3
 8009a3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	e013      	b.n	8009a6a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	e008      	b.n	8009a6a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a64:	461a      	mov	r2, r3
 8009a66:	2300      	movs	r3, #0
 8009a68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a76:	461a      	mov	r2, r3
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a88:	461a      	mov	r2, r3
 8009a8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	3301      	adds	r3, #1
 8009a94:	613b      	str	r3, [r7, #16]
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d3b7      	bcc.n	8009a0e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	613b      	str	r3, [r7, #16]
 8009aa2:	e043      	b.n	8009b2c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aba:	d118      	bne.n	8009aee <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10a      	bne.n	8009ad8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	e013      	b.n	8009b00 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	e008      	b.n	8009b00 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afa:	461a      	mov	r2, r3
 8009afc:	2300      	movs	r3, #0
 8009afe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	015a      	lsls	r2, r3, #5
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1e:	461a      	mov	r2, r3
 8009b20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	613b      	str	r3, [r7, #16]
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d3b7      	bcc.n	8009aa4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	f043 0210 	orr.w	r2, r3, #16
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	699a      	ldr	r2, [r3, #24]
 8009b66:	4b10      	ldr	r3, [pc, #64]	; (8009ba8 <USB_DevInit+0x280>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	f043 0208 	orr.w	r2, r3, #8
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d107      	bne.n	8009b96 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b8e:	f043 0304 	orr.w	r3, r3, #4
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ba2:	b004      	add	sp, #16
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	803c3800 	.word	0x803c3800

08009bac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4a13      	ldr	r2, [pc, #76]	; (8009c10 <USB_FlushTxFifo+0x64>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d901      	bls.n	8009bcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e01b      	b.n	8009c04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	daf2      	bge.n	8009bba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	019b      	lsls	r3, r3, #6
 8009bdc:	f043 0220 	orr.w	r2, r3, #32
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3301      	adds	r3, #1
 8009be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	4a08      	ldr	r2, [pc, #32]	; (8009c10 <USB_FlushTxFifo+0x64>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d901      	bls.n	8009bf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e006      	b.n	8009c04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	f003 0320 	and.w	r3, r3, #32
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d0f0      	beq.n	8009be4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	00030d40 	.word	0x00030d40

08009c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	3301      	adds	r3, #1
 8009c24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4a11      	ldr	r2, [pc, #68]	; (8009c70 <USB_FlushRxFifo+0x5c>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d901      	bls.n	8009c32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e018      	b.n	8009c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	daf2      	bge.n	8009c20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2210      	movs	r2, #16
 8009c42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4a08      	ldr	r2, [pc, #32]	; (8009c70 <USB_FlushRxFifo+0x5c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d901      	bls.n	8009c56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e006      	b.n	8009c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	f003 0310 	and.w	r3, r3, #16
 8009c5e:	2b10      	cmp	r3, #16
 8009c60:	d0f0      	beq.n	8009c44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	00030d40 	.word	0x00030d40

08009c74 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	68f9      	ldr	r1, [r7, #12]
 8009c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c94:	4313      	orrs	r3, r2
 8009c96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr

08009ca6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b087      	sub	sp, #28
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f003 0306 	and.w	r3, r3, #6
 8009cbe:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d002      	beq.n	8009ccc <USB_GetDevSpeed+0x26>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b06      	cmp	r3, #6
 8009cca:	d102      	bne.n	8009cd2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009ccc:	2302      	movs	r3, #2
 8009cce:	75fb      	strb	r3, [r7, #23]
 8009cd0:	e001      	b.n	8009cd6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009cd2:	230f      	movs	r3, #15
 8009cd4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	371c      	adds	r7, #28
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d13a      	bne.n	8009d76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d06:	69da      	ldr	r2, [r3, #28]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	f003 030f 	and.w	r3, r3, #15
 8009d10:	2101      	movs	r1, #1
 8009d12:	fa01 f303 	lsl.w	r3, r1, r3
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	68f9      	ldr	r1, [r7, #12]
 8009d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d155      	bne.n	8009de4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	791b      	ldrb	r3, [r3, #4]
 8009d52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	059b      	lsls	r3, r3, #22
 8009d5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	0151      	lsls	r1, r2, #5
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	440a      	add	r2, r1
 8009d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d72:	6013      	str	r3, [r2, #0]
 8009d74:	e036      	b.n	8009de4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7c:	69da      	ldr	r2, [r3, #28]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	2101      	movs	r1, #1
 8009d88:	fa01 f303 	lsl.w	r3, r1, r3
 8009d8c:	041b      	lsls	r3, r3, #16
 8009d8e:	68f9      	ldr	r1, [r7, #12]
 8009d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d94:	4313      	orrs	r3, r2
 8009d96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d11a      	bne.n	8009de4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	791b      	ldrb	r3, [r3, #4]
 8009dc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dca:	430b      	orrs	r3, r1
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	0151      	lsls	r1, r2, #5
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	440a      	add	r2, r1
 8009dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
	...

08009df4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	785b      	ldrb	r3, [r3, #1]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d161      	bne.n	8009ed4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e26:	d11f      	bne.n	8009e68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	015a      	lsls	r2, r3, #5
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	0151      	lsls	r1, r2, #5
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	440a      	add	r2, r1
 8009e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	0151      	lsls	r1, r2, #5
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	440a      	add	r2, r1
 8009e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	f003 030f 	and.w	r3, r3, #15
 8009e78:	2101      	movs	r1, #1
 8009e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	43db      	mvns	r3, r3
 8009e82:	68f9      	ldr	r1, [r7, #12]
 8009e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e88:	4013      	ands	r3, r2
 8009e8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e92:	69da      	ldr	r2, [r3, #28]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	43db      	mvns	r3, r3
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eac:	4013      	ands	r3, r2
 8009eae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	0159      	lsls	r1, r3, #5
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	440b      	add	r3, r1
 8009ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4b35      	ldr	r3, [pc, #212]	; (8009fa4 <USB_DeactivateEndpoint+0x1b0>)
 8009ece:	4013      	ands	r3, r2
 8009ed0:	600b      	str	r3, [r1, #0]
 8009ed2:	e060      	b.n	8009f96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009eea:	d11f      	bne.n	8009f2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	0151      	lsls	r1, r2, #5
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	440a      	add	r2, r1
 8009f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	0151      	lsls	r1, r2, #5
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	440a      	add	r2, r1
 8009f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	f003 030f 	and.w	r3, r3, #15
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f42:	041b      	lsls	r3, r3, #16
 8009f44:	43db      	mvns	r3, r3
 8009f46:	68f9      	ldr	r1, [r7, #12]
 8009f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f56:	69da      	ldr	r2, [r3, #28]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 030f 	and.w	r3, r3, #15
 8009f60:	2101      	movs	r1, #1
 8009f62:	fa01 f303 	lsl.w	r3, r1, r3
 8009f66:	041b      	lsls	r3, r3, #16
 8009f68:	43db      	mvns	r3, r3
 8009f6a:	68f9      	ldr	r1, [r7, #12]
 8009f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f70:	4013      	ands	r3, r2
 8009f72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	0159      	lsls	r1, r3, #5
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	440b      	add	r3, r1
 8009f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <USB_DeactivateEndpoint+0x1b4>)
 8009f92:	4013      	ands	r3, r2
 8009f94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	ec337800 	.word	0xec337800
 8009fa8:	eff37800 	.word	0xeff37800

08009fac <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	785b      	ldrb	r3, [r3, #1]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	f040 8128 	bne.w	800a21a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d132      	bne.n	800a038 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a030:	0cdb      	lsrs	r3, r3, #19
 800a032:	04db      	lsls	r3, r3, #19
 800a034:	6113      	str	r3, [r2, #16]
 800a036:	e092      	b.n	800a15e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	0151      	lsls	r1, r2, #5
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	440a      	add	r2, r1
 800a04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a052:	0cdb      	lsrs	r3, r3, #19
 800a054:	04db      	lsls	r3, r3, #19
 800a056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	015a      	lsls	r2, r3, #5
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	0151      	lsls	r1, r2, #5
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	440a      	add	r2, r1
 800a06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a07a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d11a      	bne.n	800a0b8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	691a      	ldr	r2, [r3, #16]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d903      	bls.n	800a096 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	015a      	lsls	r2, r3, #5
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	4413      	add	r3, r2
 800a09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	693a      	ldr	r2, [r7, #16]
 800a0a6:	0151      	lsls	r1, r2, #5
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	440a      	add	r2, r1
 800a0ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0b4:	6113      	str	r3, [r2, #16]
 800a0b6:	e01b      	b.n	800a0f0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	6919      	ldr	r1, [r3, #16]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	440b      	add	r3, r1
 800a0d0:	1e59      	subs	r1, r3, #1
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0dc:	4b8d      	ldr	r3, [pc, #564]	; (800a314 <USB_EPStartXfer+0x368>)
 800a0de:	400b      	ands	r3, r1
 800a0e0:	6939      	ldr	r1, [r7, #16]
 800a0e2:	0148      	lsls	r0, r1, #5
 800a0e4:	6979      	ldr	r1, [r7, #20]
 800a0e6:	4401      	add	r1, r0
 800a0e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0fc:	691a      	ldr	r2, [r3, #16]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a106:	6939      	ldr	r1, [r7, #16]
 800a108:	0148      	lsls	r0, r1, #5
 800a10a:	6979      	ldr	r1, [r7, #20]
 800a10c:	4401      	add	r1, r0
 800a10e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a112:	4313      	orrs	r3, r2
 800a114:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	791b      	ldrb	r3, [r3, #4]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d11f      	bne.n	800a15e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	0151      	lsls	r1, r2, #5
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	440a      	add	r2, r1
 800a134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a138:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a13c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	440a      	add	r2, r1
 800a154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a15c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	0151      	lsls	r1, r2, #5
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	440a      	add	r2, r1
 800a174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a17c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	791b      	ldrb	r3, [r3, #4]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d015      	beq.n	800a1b2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	f000 8139 	beq.w	800a402 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	f003 030f 	and.w	r3, r3, #15
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a6:	6979      	ldr	r1, [r7, #20]
 800a1a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	634b      	str	r3, [r1, #52]	; 0x34
 800a1b0:	e127      	b.n	800a402 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d110      	bne.n	800a1e4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	0151      	lsls	r1, r2, #5
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	440a      	add	r2, r1
 800a1d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	e00f      	b.n	800a204 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	0151      	lsls	r1, r2, #5
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	440a      	add	r2, r1
 800a1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a202:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	68d9      	ldr	r1, [r3, #12]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	781a      	ldrb	r2, [r3, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	b29b      	uxth	r3, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f9a6 	bl	800a564 <USB_WritePacket>
 800a218:	e0f3      	b.n	800a402 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	015a      	lsls	r2, r3, #5
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	4413      	add	r3, r2
 800a222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	0151      	lsls	r1, r2, #5
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	440a      	add	r2, r1
 800a230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a234:	0cdb      	lsrs	r3, r3, #19
 800a236:	04db      	lsls	r3, r3, #19
 800a238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a254:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a258:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a25c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d12f      	bne.n	800a2c4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a288:	691a      	ldr	r2, [r3, #16]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a292:	6939      	ldr	r1, [r7, #16]
 800a294:	0148      	lsls	r0, r1, #5
 800a296:	6979      	ldr	r1, [r7, #20]
 800a298:	4401      	add	r1, r0
 800a29a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	0151      	lsls	r1, r2, #5
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	440a      	add	r2, r1
 800a2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2c0:	6113      	str	r3, [r2, #16]
 800a2c2:	e061      	b.n	800a388 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d125      	bne.n	800a318 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d8:	691a      	ldr	r2, [r3, #16]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2e2:	6939      	ldr	r1, [r7, #16]
 800a2e4:	0148      	lsls	r0, r1, #5
 800a2e6:	6979      	ldr	r1, [r7, #20]
 800a2e8:	4401      	add	r1, r0
 800a2ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	0151      	lsls	r1, r2, #5
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	440a      	add	r2, r1
 800a308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a30c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a310:	6113      	str	r3, [r2, #16]
 800a312:	e039      	b.n	800a388 <USB_EPStartXfer+0x3dc>
 800a314:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	691a      	ldr	r2, [r3, #16]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	4413      	add	r3, r2
 800a322:	1e5a      	subs	r2, r3, #1
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	fbb2 f3f3 	udiv	r3, r2, r3
 800a32c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	89fa      	ldrh	r2, [r7, #14]
 800a334:	fb03 f202 	mul.w	r2, r3, r2
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a348:	691a      	ldr	r2, [r3, #16]
 800a34a:	89fb      	ldrh	r3, [r7, #14]
 800a34c:	04d9      	lsls	r1, r3, #19
 800a34e:	4b2f      	ldr	r3, [pc, #188]	; (800a40c <USB_EPStartXfer+0x460>)
 800a350:	400b      	ands	r3, r1
 800a352:	6939      	ldr	r1, [r7, #16]
 800a354:	0148      	lsls	r0, r1, #5
 800a356:	6979      	ldr	r1, [r7, #20]
 800a358:	4401      	add	r1, r0
 800a35a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a35e:	4313      	orrs	r3, r2
 800a360:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a378:	6939      	ldr	r1, [r7, #16]
 800a37a:	0148      	lsls	r0, r1, #5
 800a37c:	6979      	ldr	r1, [r7, #20]
 800a37e:	4401      	add	r1, r0
 800a380:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a384:	4313      	orrs	r3, r2
 800a386:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	791b      	ldrb	r3, [r3, #4]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d128      	bne.n	800a3e2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d110      	bne.n	800a3c2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	015a      	lsls	r2, r3, #5
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	4413      	add	r3, r2
 800a3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	0151      	lsls	r1, r2, #5
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	440a      	add	r2, r1
 800a3b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	e00f      	b.n	800a3e2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	0151      	lsls	r1, r2, #5
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	440a      	add	r2, r1
 800a3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3e0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	0151      	lsls	r1, r2, #5
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	440a      	add	r2, r1
 800a3f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a400:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	1ff80000 	.word	0x1ff80000

0800a410 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a410:	b480      	push	{r7}
 800a412:	b087      	sub	sp, #28
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d14a      	bne.n	800a4c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a446:	f040 8086 	bne.w	800a556 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	7812      	ldrb	r2, [r2, #0]
 800a45e:	0151      	lsls	r1, r2, #5
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	440a      	add	r2, r1
 800a464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a468:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a46c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	7812      	ldrb	r2, [r2, #0]
 800a482:	0151      	lsls	r1, r2, #5
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	440a      	add	r2, r1
 800a488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a48c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a490:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3301      	adds	r3, #1
 800a496:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d902      	bls.n	800a4a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	75fb      	strb	r3, [r7, #23]
          break;
 800a4a6:	e056      	b.n	800a556 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4c0:	d0e7      	beq.n	800a492 <USB_EPStopXfer+0x82>
 800a4c2:	e048      	b.n	800a556 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4dc:	d13b      	bne.n	800a556 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	7812      	ldrb	r2, [r2, #0]
 800a4f2:	0151      	lsls	r1, r2, #5
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	440a      	add	r2, r1
 800a4f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a500:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	7812      	ldrb	r2, [r2, #0]
 800a516:	0151      	lsls	r1, r2, #5
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	440a      	add	r2, r1
 800a51c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a524:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	3301      	adds	r3, #1
 800a52a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a532:	4293      	cmp	r3, r2
 800a534:	d902      	bls.n	800a53c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	75fb      	strb	r3, [r7, #23]
          break;
 800a53a:	e00c      	b.n	800a556 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a554:	d0e7      	beq.n	800a526 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a556:	7dfb      	ldrb	r3, [r7, #23]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	371c      	adds	r7, #28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a564:	b480      	push	{r7}
 800a566:	b089      	sub	sp, #36	; 0x24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	4611      	mov	r1, r2
 800a570:	461a      	mov	r2, r3
 800a572:	460b      	mov	r3, r1
 800a574:	71fb      	strb	r3, [r7, #7]
 800a576:	4613      	mov	r3, r2
 800a578:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a582:	88bb      	ldrh	r3, [r7, #4]
 800a584:	3303      	adds	r3, #3
 800a586:	089b      	lsrs	r3, r3, #2
 800a588:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a58a:	2300      	movs	r3, #0
 800a58c:	61bb      	str	r3, [r7, #24]
 800a58e:	e018      	b.n	800a5c2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	031a      	lsls	r2, r3, #12
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	4413      	add	r3, r2
 800a598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59c:	461a      	mov	r2, r3
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d3e2      	bcc.n	800a590 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3724      	adds	r7, #36	; 0x24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b08b      	sub	sp, #44	; 0x2c
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a5ee:	88fb      	ldrh	r3, [r7, #6]
 800a5f0:	089b      	lsrs	r3, r3, #2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5f6:	88fb      	ldrh	r3, [r7, #6]
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5fe:	2300      	movs	r3, #0
 800a600:	623b      	str	r3, [r7, #32]
 800a602:	e014      	b.n	800a62e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	3301      	adds	r3, #1
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a618:	3301      	adds	r3, #1
 800a61a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	3301      	adds	r3, #1
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	3301      	adds	r3, #1
 800a626:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	3301      	adds	r3, #1
 800a62c:	623b      	str	r3, [r7, #32]
 800a62e:	6a3a      	ldr	r2, [r7, #32]
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	429a      	cmp	r2, r3
 800a634:	d3e6      	bcc.n	800a604 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a636:	8bfb      	ldrh	r3, [r7, #30]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01e      	beq.n	800a67a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a646:	461a      	mov	r2, r3
 800a648:	f107 0310 	add.w	r3, r7, #16
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	701a      	strb	r2, [r3, #0]
      i++;
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	3301      	adds	r3, #1
 800a666:	623b      	str	r3, [r7, #32]
      pDest++;
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	3301      	adds	r3, #1
 800a66c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a66e:	8bfb      	ldrh	r3, [r7, #30]
 800a670:	3b01      	subs	r3, #1
 800a672:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a674:	8bfb      	ldrh	r3, [r7, #30]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1ea      	bne.n	800a650 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	372c      	adds	r7, #44	; 0x2c
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	785b      	ldrb	r3, [r3, #1]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d12c      	bne.n	800a6fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	db12      	blt.n	800a6dc <USB_EPSetStall+0x54>
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00f      	beq.n	800a6dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	015a      	lsls	r2, r3, #5
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	0151      	lsls	r1, r2, #5
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	0151      	lsls	r1, r2, #5
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	440a      	add	r2, r1
 800a6f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	e02b      	b.n	800a756 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	015a      	lsls	r2, r3, #5
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	4413      	add	r3, r2
 800a706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	db12      	blt.n	800a736 <USB_EPSetStall+0xae>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00f      	beq.n	800a736 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a734:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	0151      	lsls	r1, r2, #5
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	440a      	add	r2, r1
 800a74c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a754:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	785b      	ldrb	r3, [r3, #1]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d128      	bne.n	800a7d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	0151      	lsls	r1, r2, #5
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	440a      	add	r2, r1
 800a796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a79a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a79e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	791b      	ldrb	r3, [r3, #4]
 800a7a4:	2b03      	cmp	r3, #3
 800a7a6:	d003      	beq.n	800a7b0 <USB_EPClearStall+0x4c>
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	791b      	ldrb	r3, [r3, #4]
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d138      	bne.n	800a822 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	e027      	b.n	800a822 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	0151      	lsls	r1, r2, #5
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	440a      	add	r2, r1
 800a7e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	791b      	ldrb	r3, [r3, #4]
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d003      	beq.n	800a802 <USB_EPClearStall+0x9e>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	791b      	ldrb	r3, [r3, #4]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d10f      	bne.n	800a822 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	015a      	lsls	r2, r3, #5
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	0151      	lsls	r1, r2, #5
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	440a      	add	r2, r1
 800a818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a81c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a820:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a830:	b480      	push	{r7}
 800a832:	b085      	sub	sp, #20
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a84e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a852:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a864:	68f9      	ldr	r1, [r7, #12]
 800a866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a86a:	4313      	orrs	r3, r2
 800a86c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a896:	f023 0303 	bic.w	r3, r3, #3
 800a89a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8aa:	f023 0302 	bic.w	r3, r3, #2
 800a8ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8d8:	f023 0303 	bic.w	r3, r3, #3
 800a8dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ec:	f043 0302 	orr.w	r3, r3, #2
 800a8f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	4013      	ands	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a918:	68fb      	ldr	r3, [r7, #12]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a926:	b480      	push	{r7}
 800a928:	b085      	sub	sp, #20
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	4013      	ands	r3, r2
 800a948:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	0c1b      	lsrs	r3, r3, #16
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a976:	69db      	ldr	r3, [r3, #28]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	4013      	ands	r3, r2
 800a97c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	b29b      	uxth	r3, r3
}
 800a982:	4618      	mov	r0, r3
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a98e:	b480      	push	{r7}
 800a990:	b085      	sub	sp, #20
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a99e:	78fb      	ldrb	r3, [r7, #3]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b087      	sub	sp, #28
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	f003 030f 	and.w	r3, r3, #15
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fa:	01db      	lsls	r3, r3, #7
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	4013      	ands	r3, r2
 800aa16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa18:	68bb      	ldr	r3, [r7, #8]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	371c      	adds	r7, #28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	695b      	ldr	r3, [r3, #20]
 800aa32:	f003 0301 	and.w	r3, r3, #1
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b085      	sub	sp, #20
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aa60:	f023 0307 	bic.w	r3, r3, #7
 800aa64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	333c      	adds	r3, #60	; 0x3c
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	4a1c      	ldr	r2, [pc, #112]	; (800ab14 <USB_EP0_OutStart+0x8c>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d90a      	bls.n	800aabe <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aab8:	d101      	bne.n	800aabe <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	e024      	b.n	800ab08 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac4:	461a      	mov	r2, r3
 800aac6:	2300      	movs	r3, #0
 800aac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aadc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaec:	f043 0318 	orr.w	r3, r3, #24
 800aaf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab04:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	4f54300a 	.word	0x4f54300a

0800ab18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3301      	adds	r3, #1
 800ab28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	4a13      	ldr	r2, [pc, #76]	; (800ab7c <USB_CoreReset+0x64>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d901      	bls.n	800ab36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e01b      	b.n	800ab6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	daf2      	bge.n	800ab24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	f043 0201 	orr.w	r2, r3, #1
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3301      	adds	r3, #1
 800ab52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4a09      	ldr	r2, [pc, #36]	; (800ab7c <USB_CoreReset+0x64>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d901      	bls.n	800ab60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e006      	b.n	800ab6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d0f0      	beq.n	800ab4e <USB_CoreReset+0x36>

  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	00030d40 	.word	0x00030d40

0800ab80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ab84:	4904      	ldr	r1, [pc, #16]	; (800ab98 <MX_FATFS_Init+0x18>)
 800ab86:	4805      	ldr	r0, [pc, #20]	; (800ab9c <MX_FATFS_Init+0x1c>)
 800ab88:	f005 fa44 	bl	8010014 <FATFS_LinkDriver>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	461a      	mov	r2, r3
 800ab90:	4b03      	ldr	r3, [pc, #12]	; (800aba0 <MX_FATFS_Init+0x20>)
 800ab92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab94:	bf00      	nop
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	2000c234 	.word	0x2000c234
 800ab9c:	0801568c 	.word	0x0801568c
 800aba0:	2000c230 	.word	0x2000c230

0800aba4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aba4:	b480      	push	{r7}
 800aba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aba8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800abaa:	4618      	mov	r0, r3
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800abbe:	f000 f8c6 	bl	800ad4e <BSP_SD_IsDetected>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d001      	beq.n	800abcc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800abc8:	2302      	movs	r3, #2
 800abca:	e012      	b.n	800abf2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800abcc:	480b      	ldr	r0, [pc, #44]	; (800abfc <BSP_SD_Init+0x48>)
 800abce:	f7fc fcd7 	bl	8007580 <HAL_SD_Init>
 800abd2:	4603      	mov	r3, r0
 800abd4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d109      	bne.n	800abf0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800abdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800abe0:	4806      	ldr	r0, [pc, #24]	; (800abfc <BSP_SD_Init+0x48>)
 800abe2:	f7fd fa87 	bl	80080f4 <HAL_SD_ConfigWideBusOperation>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800abf0:	79fb      	ldrb	r3, [r7, #7]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	20000368 	.word	0x20000368

0800ac00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmarx);
 800ac10:	4b13      	ldr	r3, [pc, #76]	; (800ac60 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	4b11      	ldr	r3, [pc, #68]	; (800ac60 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f022 0201 	bic.w	r2, r2, #1
 800ac22:	601a      	str	r2, [r3, #0]

  hsd1.hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac24:	4b0e      	ldr	r3, [pc, #56]	; (800ac60 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac28:	2200      	movs	r2, #0
 800ac2a:	609a      	str	r2, [r3, #8]

  hsd1.hdmarx->Instance->CCR &= ~DMA_CCR_DIR;
 800ac2c:	4b0c      	ldr	r3, [pc, #48]	; (800ac60 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	4b0a      	ldr	r3, [pc, #40]	; (800ac60 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f022 0210 	bic.w	r2, r2, #16
 800ac3e:	601a      	str	r2, [r3, #0]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	68f9      	ldr	r1, [r7, #12]
 800ac46:	4806      	ldr	r0, [pc, #24]	; (800ac60 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac48:	f7fc fd70 	bl	800772c <HAL_SD_ReadBlocks_DMA>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <BSP_SD_ReadBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800ac52:	2301      	movs	r3, #1
 800ac54:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20000368 	.word	0x20000368

0800ac64 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmatx);
 800ac74:	4b13      	ldr	r3, [pc, #76]	; (800acc4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	4b11      	ldr	r3, [pc, #68]	; (800acc4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f022 0201 	bic.w	r2, r2, #1
 800ac86:	601a      	str	r2, [r3, #0]

  hsd1.hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac88:	4b0e      	ldr	r3, [pc, #56]	; (800acc4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8c:	2210      	movs	r2, #16
 800ac8e:	609a      	str	r2, [r3, #8]

  hsd1.hdmatx->Instance->CCR |= (uint32_t)DMA_CCR_DIR;
 800ac90:	4b0c      	ldr	r3, [pc, #48]	; (800acc4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	4b0a      	ldr	r3, [pc, #40]	; (800acc4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f042 0210 	orr.w	r2, r2, #16
 800aca2:	601a      	str	r2, [r3, #0]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	68f9      	ldr	r1, [r7, #12]
 800acaa:	4806      	ldr	r0, [pc, #24]	; (800acc4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acac:	f7fc fe06 	bl	80078bc <HAL_SD_WriteBlocks_DMA>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <BSP_SD_WriteBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800acba:	7dfb      	ldrb	r3, [r7, #23]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20000368 	.word	0x20000368

0800acc8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800accc:	4805      	ldr	r0, [pc, #20]	; (800ace4 <BSP_SD_GetCardState+0x1c>)
 800acce:	f7fd facd 	bl	800826c <HAL_SD_GetCardState>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	bf14      	ite	ne
 800acd8:	2301      	movne	r3, #1
 800acda:	2300      	moveq	r3, #0
 800acdc:	b2db      	uxtb	r3, r3
}
 800acde:	4618      	mov	r0, r3
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20000368 	.word	0x20000368

0800ace8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800acf0:	6879      	ldr	r1, [r7, #4]
 800acf2:	4803      	ldr	r0, [pc, #12]	; (800ad00 <BSP_SD_GetCardInfo+0x18>)
 800acf4:	f7fd f9d2 	bl	800809c <HAL_SD_GetCardInfo>
}
 800acf8:	bf00      	nop
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	20000368 	.word	0x20000368

0800ad04 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ad0c:	f000 f818 	bl	800ad40 <BSP_SD_AbortCallback>
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ad20:	f000 f9a8 	bl	800b074 <BSP_SD_WriteCpltCallback>
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ad34:	f000 f9aa 	bl	800b08c <BSP_SD_ReadCpltCallback>
}
 800ad38:	bf00      	nop
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ad40:	b480      	push	{r7}
 800ad42:	af00      	add	r7, sp, #0

}
 800ad44:	bf00      	nop
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ad54:	2301      	movs	r3, #1
 800ad56:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ad58:	f000 f80c 	bl	800ad74 <BSP_PlatformIsDetected>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ad62:	2300      	movs	r3, #0
 800ad64:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	b2db      	uxtb	r3, r3
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ad7e:	2180      	movs	r1, #128	; 0x80
 800ad80:	4806      	ldr	r0, [pc, #24]	; (800ad9c <BSP_PlatformIsDetected+0x28>)
 800ad82:	f7f7 ffff 	bl	8002d84 <HAL_GPIO_ReadPin>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ad90:	79fb      	ldrb	r3, [r7, #7]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	48000800 	.word	0x48000800

0800ada0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ada8:	f7f7 fac8 	bl	800233c <HAL_GetTick>
 800adac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800adae:	e006      	b.n	800adbe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800adb0:	f7ff ff8a 	bl	800acc8 <BSP_SD_GetCardState>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	e009      	b.n	800add2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800adbe:	f7f7 fabd 	bl	800233c <HAL_GetTick>
 800adc2:	4602      	mov	r2, r0
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d8f0      	bhi.n	800adb0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800adce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
	...

0800addc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ade6:	4b0b      	ldr	r3, [pc, #44]	; (800ae14 <SD_CheckStatus+0x38>)
 800ade8:	2201      	movs	r2, #1
 800adea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800adec:	f7ff ff6c 	bl	800acc8 <BSP_SD_GetCardState>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d107      	bne.n	800ae06 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800adf6:	4b07      	ldr	r3, [pc, #28]	; (800ae14 <SD_CheckStatus+0x38>)
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f023 0301 	bic.w	r3, r3, #1
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	4b04      	ldr	r3, [pc, #16]	; (800ae14 <SD_CheckStatus+0x38>)
 800ae04:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ae06:	4b03      	ldr	r3, [pc, #12]	; (800ae14 <SD_CheckStatus+0x38>)
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	b2db      	uxtb	r3, r3
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	20000009 	.word	0x20000009

0800ae18 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ae22:	f7ff fec7 	bl	800abb4 <BSP_SD_Init>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d107      	bne.n	800ae3c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ae2c:	79fb      	ldrb	r3, [r7, #7]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff ffd4 	bl	800addc <SD_CheckStatus>
 800ae34:	4603      	mov	r3, r0
 800ae36:	461a      	mov	r2, r3
 800ae38:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <SD_initialize+0x34>)
 800ae3a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ae3c:	4b03      	ldr	r3, [pc, #12]	; (800ae4c <SD_initialize+0x34>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	b2db      	uxtb	r3, r3
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20000009 	.word	0x20000009

0800ae50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae5a:	79fb      	ldrb	r3, [r7, #7]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7ff ffbd 	bl	800addc <SD_CheckStatus>
 800ae62:	4603      	mov	r3, r0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60b9      	str	r1, [r7, #8]
 800ae74:	607a      	str	r2, [r7, #4]
 800ae76:	603b      	str	r3, [r7, #0]
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ae80:	f247 5030 	movw	r0, #30000	; 0x7530
 800ae84:	f7ff ff8c 	bl	800ada0 <SD_CheckStatusWithTimeout>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	da01      	bge.n	800ae92 <SD_read+0x26>
  {
    return res;
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	e03b      	b.n	800af0a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	6879      	ldr	r1, [r7, #4]
 800ae96:	68b8      	ldr	r0, [r7, #8]
 800ae98:	f7ff feb2 	bl	800ac00 <BSP_SD_ReadBlocks_DMA>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d132      	bne.n	800af08 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800aea2:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <SD_read+0xa8>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800aea8:	f7f7 fa48 	bl	800233c <HAL_GetTick>
 800aeac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aeae:	bf00      	nop
 800aeb0:	4b18      	ldr	r3, [pc, #96]	; (800af14 <SD_read+0xa8>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d108      	bne.n	800aeca <SD_read+0x5e>
 800aeb8:	f7f7 fa40 	bl	800233c <HAL_GetTick>
 800aebc:	4602      	mov	r2, r0
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	f247 522f 	movw	r2, #29999	; 0x752f
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d9f2      	bls.n	800aeb0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800aeca:	4b12      	ldr	r3, [pc, #72]	; (800af14 <SD_read+0xa8>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d102      	bne.n	800aed8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	75fb      	strb	r3, [r7, #23]
 800aed6:	e017      	b.n	800af08 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800aed8:	4b0e      	ldr	r3, [pc, #56]	; (800af14 <SD_read+0xa8>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aede:	f7f7 fa2d 	bl	800233c <HAL_GetTick>
 800aee2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aee4:	e007      	b.n	800aef6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aee6:	f7ff feef 	bl	800acc8 <BSP_SD_GetCardState>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d102      	bne.n	800aef6 <SD_read+0x8a>
          {
            res = RES_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aef4:	e008      	b.n	800af08 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aef6:	f7f7 fa21 	bl	800233c <HAL_GetTick>
 800aefa:	4602      	mov	r2, r0
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	f247 522f 	movw	r2, #29999	; 0x752f
 800af04:	4293      	cmp	r3, r2
 800af06:	d9ee      	bls.n	800aee6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800af08:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	2000c69c 	.word	0x2000c69c

0800af18 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	4603      	mov	r3, r0
 800af26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800af2c:	4b24      	ldr	r3, [pc, #144]	; (800afc0 <SD_write+0xa8>)
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800af32:	f247 5030 	movw	r0, #30000	; 0x7530
 800af36:	f7ff ff33 	bl	800ada0 <SD_CheckStatusWithTimeout>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	da01      	bge.n	800af44 <SD_write+0x2c>
  {
    return res;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
 800af42:	e038      	b.n	800afb6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	68b8      	ldr	r0, [r7, #8]
 800af4a:	f7ff fe8b 	bl	800ac64 <BSP_SD_WriteBlocks_DMA>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d12f      	bne.n	800afb4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800af54:	f7f7 f9f2 	bl	800233c <HAL_GetTick>
 800af58:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800af5a:	bf00      	nop
 800af5c:	4b18      	ldr	r3, [pc, #96]	; (800afc0 <SD_write+0xa8>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d108      	bne.n	800af76 <SD_write+0x5e>
 800af64:	f7f7 f9ea 	bl	800233c <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	f247 522f 	movw	r2, #29999	; 0x752f
 800af72:	4293      	cmp	r3, r2
 800af74:	d9f2      	bls.n	800af5c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800af76:	4b12      	ldr	r3, [pc, #72]	; (800afc0 <SD_write+0xa8>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d102      	bne.n	800af84 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	75fb      	strb	r3, [r7, #23]
 800af82:	e017      	b.n	800afb4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800af84:	4b0e      	ldr	r3, [pc, #56]	; (800afc0 <SD_write+0xa8>)
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800af8a:	f7f7 f9d7 	bl	800233c <HAL_GetTick>
 800af8e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af90:	e007      	b.n	800afa2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af92:	f7ff fe99 	bl	800acc8 <BSP_SD_GetCardState>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d102      	bne.n	800afa2 <SD_write+0x8a>
          {
            res = RES_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	75fb      	strb	r3, [r7, #23]
            break;
 800afa0:	e008      	b.n	800afb4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800afa2:	f7f7 f9cb 	bl	800233c <HAL_GetTick>
 800afa6:	4602      	mov	r2, r0
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	f247 522f 	movw	r2, #29999	; 0x752f
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d9ee      	bls.n	800af92 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800afb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	2000c698 	.word	0x2000c698

0800afc4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b08c      	sub	sp, #48	; 0x30
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	603a      	str	r2, [r7, #0]
 800afce:	71fb      	strb	r3, [r7, #7]
 800afd0:	460b      	mov	r3, r1
 800afd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800afd4:	2301      	movs	r3, #1
 800afd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800afda:	4b25      	ldr	r3, [pc, #148]	; (800b070 <SD_ioctl+0xac>)
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <SD_ioctl+0x28>
 800afe8:	2303      	movs	r3, #3
 800afea:	e03c      	b.n	800b066 <SD_ioctl+0xa2>

  switch (cmd)
 800afec:	79bb      	ldrb	r3, [r7, #6]
 800afee:	2b03      	cmp	r3, #3
 800aff0:	d834      	bhi.n	800b05c <SD_ioctl+0x98>
 800aff2:	a201      	add	r2, pc, #4	; (adr r2, 800aff8 <SD_ioctl+0x34>)
 800aff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff8:	0800b009 	.word	0x0800b009
 800affc:	0800b011 	.word	0x0800b011
 800b000:	0800b029 	.word	0x0800b029
 800b004:	0800b043 	.word	0x0800b043
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b00e:	e028      	b.n	800b062 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b010:	f107 030c 	add.w	r3, r7, #12
 800b014:	4618      	mov	r0, r3
 800b016:	f7ff fe67 	bl	800ace8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b026:	e01c      	b.n	800b062 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b028:	f107 030c 	add.w	r3, r7, #12
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7ff fe5b 	bl	800ace8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b034:	b29a      	uxth	r2, r3
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b040:	e00f      	b.n	800b062 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b042:	f107 030c 	add.w	r3, r7, #12
 800b046:	4618      	mov	r0, r3
 800b048:	f7ff fe4e 	bl	800ace8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	0a5a      	lsrs	r2, r3, #9
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b05a:	e002      	b.n	800b062 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b05c:	2304      	movs	r3, #4
 800b05e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b066:	4618      	mov	r0, r3
 800b068:	3730      	adds	r7, #48	; 0x30
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20000009 	.word	0x20000009

0800b074 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b078:	4b03      	ldr	r3, [pc, #12]	; (800b088 <BSP_SD_WriteCpltCallback+0x14>)
 800b07a:	2201      	movs	r2, #1
 800b07c:	601a      	str	r2, [r3, #0]
}
 800b07e:	bf00      	nop
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	2000c698 	.word	0x2000c698

0800b08c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b08c:	b480      	push	{r7}
 800b08e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b090:	4b03      	ldr	r3, [pc, #12]	; (800b0a0 <BSP_SD_ReadCpltCallback+0x14>)
 800b092:	2201      	movs	r2, #1
 800b094:	601a      	str	r2, [r3, #0]
}
 800b096:	bf00      	nop
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	2000c69c 	.word	0x2000c69c

0800b0a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b0b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b0b4:	f005 fdde 	bl	8010c74 <USBD_static_malloc>
 800b0b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d109      	bne.n	800b0d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	32b0      	adds	r2, #176	; 0xb0
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	e0d4      	b.n	800b27e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b0d4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b0d8:	2100      	movs	r1, #0
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f006 fdbf 	bl	8011c5e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	32b0      	adds	r2, #176	; 0xb0
 800b0ea:	68f9      	ldr	r1, [r7, #12]
 800b0ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	32b0      	adds	r2, #176	; 0xb0
 800b0fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	7c1b      	ldrb	r3, [r3, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d138      	bne.n	800b17e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b10c:	4b5e      	ldr	r3, [pc, #376]	; (800b288 <USBD_CDC_Init+0x1e4>)
 800b10e:	7819      	ldrb	r1, [r3, #0]
 800b110:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b114:	2202      	movs	r2, #2
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f005 fb98 	bl	801084c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b11c:	4b5a      	ldr	r3, [pc, #360]	; (800b288 <USBD_CDC_Init+0x1e4>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	f003 020f 	and.w	r2, r3, #15
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	4613      	mov	r3, r2
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	440b      	add	r3, r1
 800b130:	3324      	adds	r3, #36	; 0x24
 800b132:	2201      	movs	r2, #1
 800b134:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b136:	4b55      	ldr	r3, [pc, #340]	; (800b28c <USBD_CDC_Init+0x1e8>)
 800b138:	7819      	ldrb	r1, [r3, #0]
 800b13a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b13e:	2202      	movs	r2, #2
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f005 fb83 	bl	801084c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b146:	4b51      	ldr	r3, [pc, #324]	; (800b28c <USBD_CDC_Init+0x1e8>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	f003 020f 	and.w	r2, r3, #15
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	440b      	add	r3, r1
 800b15a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b15e:	2201      	movs	r2, #1
 800b160:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b162:	4b4b      	ldr	r3, [pc, #300]	; (800b290 <USBD_CDC_Init+0x1ec>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	f003 020f 	and.w	r2, r3, #15
 800b16a:	6879      	ldr	r1, [r7, #4]
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	440b      	add	r3, r1
 800b176:	3326      	adds	r3, #38	; 0x26
 800b178:	2210      	movs	r2, #16
 800b17a:	801a      	strh	r2, [r3, #0]
 800b17c:	e035      	b.n	800b1ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b17e:	4b42      	ldr	r3, [pc, #264]	; (800b288 <USBD_CDC_Init+0x1e4>)
 800b180:	7819      	ldrb	r1, [r3, #0]
 800b182:	2340      	movs	r3, #64	; 0x40
 800b184:	2202      	movs	r2, #2
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f005 fb60 	bl	801084c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b18c:	4b3e      	ldr	r3, [pc, #248]	; (800b288 <USBD_CDC_Init+0x1e4>)
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	f003 020f 	and.w	r2, r3, #15
 800b194:	6879      	ldr	r1, [r7, #4]
 800b196:	4613      	mov	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	440b      	add	r3, r1
 800b1a0:	3324      	adds	r3, #36	; 0x24
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b1a6:	4b39      	ldr	r3, [pc, #228]	; (800b28c <USBD_CDC_Init+0x1e8>)
 800b1a8:	7819      	ldrb	r1, [r3, #0]
 800b1aa:	2340      	movs	r3, #64	; 0x40
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f005 fb4c 	bl	801084c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b1b4:	4b35      	ldr	r3, [pc, #212]	; (800b28c <USBD_CDC_Init+0x1e8>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 020f 	and.w	r2, r3, #15
 800b1bc:	6879      	ldr	r1, [r7, #4]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	440b      	add	r3, r1
 800b1c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b1d0:	4b2f      	ldr	r3, [pc, #188]	; (800b290 <USBD_CDC_Init+0x1ec>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	f003 020f 	and.w	r2, r3, #15
 800b1d8:	6879      	ldr	r1, [r7, #4]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	440b      	add	r3, r1
 800b1e4:	3326      	adds	r3, #38	; 0x26
 800b1e6:	2210      	movs	r2, #16
 800b1e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b1ea:	4b29      	ldr	r3, [pc, #164]	; (800b290 <USBD_CDC_Init+0x1ec>)
 800b1ec:	7819      	ldrb	r1, [r3, #0]
 800b1ee:	2308      	movs	r3, #8
 800b1f0:	2203      	movs	r2, #3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f005 fb2a 	bl	801084c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b1f8:	4b25      	ldr	r3, [pc, #148]	; (800b290 <USBD_CDC_Init+0x1ec>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	f003 020f 	and.w	r2, r3, #15
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	3324      	adds	r3, #36	; 0x24
 800b20e:	2201      	movs	r2, #1
 800b210:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	33b0      	adds	r3, #176	; 0xb0
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b248:	2302      	movs	r3, #2
 800b24a:	e018      	b.n	800b27e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	7c1b      	ldrb	r3, [r3, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10a      	bne.n	800b26a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b254:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <USBD_CDC_Init+0x1e8>)
 800b256:	7819      	ldrb	r1, [r3, #0]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b25e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f005 fc6c 	bl	8010b40 <USBD_LL_PrepareReceive>
 800b268:	e008      	b.n	800b27c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b26a:	4b08      	ldr	r3, [pc, #32]	; (800b28c <USBD_CDC_Init+0x1e8>)
 800b26c:	7819      	ldrb	r1, [r3, #0]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b274:	2340      	movs	r3, #64	; 0x40
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f005 fc62 	bl	8010b40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20000093 	.word	0x20000093
 800b28c:	20000094 	.word	0x20000094
 800b290:	20000095 	.word	0x20000095

0800b294 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	460b      	mov	r3, r1
 800b29e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b2a0:	4b3a      	ldr	r3, [pc, #232]	; (800b38c <USBD_CDC_DeInit+0xf8>)
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f005 fb0e 	bl	80108c8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b2ac:	4b37      	ldr	r3, [pc, #220]	; (800b38c <USBD_CDC_DeInit+0xf8>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	f003 020f 	and.w	r2, r3, #15
 800b2b4:	6879      	ldr	r1, [r7, #4]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4413      	add	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	440b      	add	r3, r1
 800b2c0:	3324      	adds	r3, #36	; 0x24
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b2c6:	4b32      	ldr	r3, [pc, #200]	; (800b390 <USBD_CDC_DeInit+0xfc>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f005 fafb 	bl	80108c8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b2d2:	4b2f      	ldr	r3, [pc, #188]	; (800b390 <USBD_CDC_DeInit+0xfc>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	f003 020f 	and.w	r2, r3, #15
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	440b      	add	r3, r1
 800b2e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b2ee:	4b29      	ldr	r3, [pc, #164]	; (800b394 <USBD_CDC_DeInit+0x100>)
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f005 fae7 	bl	80108c8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b2fa:	4b26      	ldr	r3, [pc, #152]	; (800b394 <USBD_CDC_DeInit+0x100>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	f003 020f 	and.w	r2, r3, #15
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	440b      	add	r3, r1
 800b30e:	3324      	adds	r3, #36	; 0x24
 800b310:	2200      	movs	r2, #0
 800b312:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b314:	4b1f      	ldr	r3, [pc, #124]	; (800b394 <USBD_CDC_DeInit+0x100>)
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	f003 020f 	and.w	r2, r3, #15
 800b31c:	6879      	ldr	r1, [r7, #4]
 800b31e:	4613      	mov	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4413      	add	r3, r2
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	440b      	add	r3, r1
 800b328:	3326      	adds	r3, #38	; 0x26
 800b32a:	2200      	movs	r2, #0
 800b32c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	32b0      	adds	r2, #176	; 0xb0
 800b338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01f      	beq.n	800b380 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	33b0      	adds	r3, #176	; 0xb0
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	32b0      	adds	r2, #176	; 0xb0
 800b35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b362:	4618      	mov	r0, r3
 800b364:	f005 fc94 	bl	8010c90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	32b0      	adds	r2, #176	; 0xb0
 800b372:	2100      	movs	r1, #0
 800b374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20000093 	.word	0x20000093
 800b390:	20000094 	.word	0x20000094
 800b394:	20000095 	.word	0x20000095

0800b398 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	32b0      	adds	r2, #176	; 0xb0
 800b3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d101      	bne.n	800b3c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e0bf      	b.n	800b548 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d050      	beq.n	800b476 <USBD_CDC_Setup+0xde>
 800b3d4:	2b20      	cmp	r3, #32
 800b3d6:	f040 80af 	bne.w	800b538 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	88db      	ldrh	r3, [r3, #6]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d03a      	beq.n	800b458 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	b25b      	sxtb	r3, r3
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	da1b      	bge.n	800b424 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	33b0      	adds	r3, #176	; 0xb0
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4413      	add	r3, r2
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b402:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	88d2      	ldrh	r2, [r2, #6]
 800b408:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	88db      	ldrh	r3, [r3, #6]
 800b40e:	2b07      	cmp	r3, #7
 800b410:	bf28      	it	cs
 800b412:	2307      	movcs	r3, #7
 800b414:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	89fa      	ldrh	r2, [r7, #14]
 800b41a:	4619      	mov	r1, r3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f001 fd73 	bl	800cf08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b422:	e090      	b.n	800b546 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	785a      	ldrb	r2, [r3, #1]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	88db      	ldrh	r3, [r3, #6]
 800b432:	2b3f      	cmp	r3, #63	; 0x3f
 800b434:	d803      	bhi.n	800b43e <USBD_CDC_Setup+0xa6>
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	88db      	ldrh	r3, [r3, #6]
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	e000      	b.n	800b440 <USBD_CDC_Setup+0xa8>
 800b43e:	2240      	movs	r2, #64	; 0x40
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b446:	6939      	ldr	r1, [r7, #16]
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b44e:	461a      	mov	r2, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 fd85 	bl	800cf60 <USBD_CtlPrepareRx>
      break;
 800b456:	e076      	b.n	800b546 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	33b0      	adds	r3, #176	; 0xb0
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	7850      	ldrb	r0, [r2, #1]
 800b46e:	2200      	movs	r2, #0
 800b470:	6839      	ldr	r1, [r7, #0]
 800b472:	4798      	blx	r3
      break;
 800b474:	e067      	b.n	800b546 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	785b      	ldrb	r3, [r3, #1]
 800b47a:	2b0b      	cmp	r3, #11
 800b47c:	d851      	bhi.n	800b522 <USBD_CDC_Setup+0x18a>
 800b47e:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <USBD_CDC_Setup+0xec>)
 800b480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b484:	0800b4b5 	.word	0x0800b4b5
 800b488:	0800b531 	.word	0x0800b531
 800b48c:	0800b523 	.word	0x0800b523
 800b490:	0800b523 	.word	0x0800b523
 800b494:	0800b523 	.word	0x0800b523
 800b498:	0800b523 	.word	0x0800b523
 800b49c:	0800b523 	.word	0x0800b523
 800b4a0:	0800b523 	.word	0x0800b523
 800b4a4:	0800b523 	.word	0x0800b523
 800b4a8:	0800b523 	.word	0x0800b523
 800b4ac:	0800b4df 	.word	0x0800b4df
 800b4b0:	0800b509 	.word	0x0800b509
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d107      	bne.n	800b4d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b4c0:	f107 030a 	add.w	r3, r7, #10
 800b4c4:	2202      	movs	r2, #2
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 fd1d 	bl	800cf08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4ce:	e032      	b.n	800b536 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 fca7 	bl	800ce26 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4d8:	2303      	movs	r3, #3
 800b4da:	75fb      	strb	r3, [r7, #23]
          break;
 800b4dc:	e02b      	b.n	800b536 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d107      	bne.n	800b4fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b4ea:	f107 030d 	add.w	r3, r7, #13
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f001 fd08 	bl	800cf08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4f8:	e01d      	b.n	800b536 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b4fa:	6839      	ldr	r1, [r7, #0]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f001 fc92 	bl	800ce26 <USBD_CtlError>
            ret = USBD_FAIL;
 800b502:	2303      	movs	r3, #3
 800b504:	75fb      	strb	r3, [r7, #23]
          break;
 800b506:	e016      	b.n	800b536 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b03      	cmp	r3, #3
 800b512:	d00f      	beq.n	800b534 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f001 fc85 	bl	800ce26 <USBD_CtlError>
            ret = USBD_FAIL;
 800b51c:	2303      	movs	r3, #3
 800b51e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b520:	e008      	b.n	800b534 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b522:	6839      	ldr	r1, [r7, #0]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f001 fc7e 	bl	800ce26 <USBD_CtlError>
          ret = USBD_FAIL;
 800b52a:	2303      	movs	r3, #3
 800b52c:	75fb      	strb	r3, [r7, #23]
          break;
 800b52e:	e002      	b.n	800b536 <USBD_CDC_Setup+0x19e>
          break;
 800b530:	bf00      	nop
 800b532:	e008      	b.n	800b546 <USBD_CDC_Setup+0x1ae>
          break;
 800b534:	bf00      	nop
      }
      break;
 800b536:	e006      	b.n	800b546 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f001 fc73 	bl	800ce26 <USBD_CtlError>
      ret = USBD_FAIL;
 800b540:	2303      	movs	r3, #3
 800b542:	75fb      	strb	r3, [r7, #23]
      break;
 800b544:	bf00      	nop
  }

  return (uint8_t)ret;
 800b546:	7dfb      	ldrb	r3, [r7, #23]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b562:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	32b0      	adds	r2, #176	; 0xb0
 800b56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d101      	bne.n	800b57a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b576:	2303      	movs	r3, #3
 800b578:	e065      	b.n	800b646 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	32b0      	adds	r2, #176	; 0xb0
 800b584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b588:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b58a:	78fb      	ldrb	r3, [r7, #3]
 800b58c:	f003 020f 	and.w	r2, r3, #15
 800b590:	6879      	ldr	r1, [r7, #4]
 800b592:	4613      	mov	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	440b      	add	r3, r1
 800b59c:	3318      	adds	r3, #24
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d02f      	beq.n	800b604 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b5a4:	78fb      	ldrb	r3, [r7, #3]
 800b5a6:	f003 020f 	and.w	r2, r3, #15
 800b5aa:	6879      	ldr	r1, [r7, #4]
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	440b      	add	r3, r1
 800b5b6:	3318      	adds	r3, #24
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	78fb      	ldrb	r3, [r7, #3]
 800b5bc:	f003 010f 	and.w	r1, r3, #15
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	440b      	add	r3, r1
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4403      	add	r3, r0
 800b5cc:	3344      	adds	r3, #68	; 0x44
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b5d4:	fb01 f303 	mul.w	r3, r1, r3
 800b5d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d112      	bne.n	800b604 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b5de:	78fb      	ldrb	r3, [r7, #3]
 800b5e0:	f003 020f 	and.w	r2, r3, #15
 800b5e4:	6879      	ldr	r1, [r7, #4]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	440b      	add	r3, r1
 800b5f0:	3318      	adds	r3, #24
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b5f6:	78f9      	ldrb	r1, [r7, #3]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f005 fa67 	bl	8010ad0 <USBD_LL_Transmit>
 800b602:	e01f      	b.n	800b644 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2200      	movs	r2, #0
 800b608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	33b0      	adds	r3, #176	; 0xb0
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d010      	beq.n	800b644 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	33b0      	adds	r3, #176	; 0xb0
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4413      	add	r3, r2
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b640:	78fa      	ldrb	r2, [r7, #3]
 800b642:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	460b      	mov	r3, r1
 800b658:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	32b0      	adds	r2, #176	; 0xb0
 800b664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b668:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	32b0      	adds	r2, #176	; 0xb0
 800b674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e01a      	b.n	800b6b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f005 fa93 	bl	8010bb0 <USBD_LL_GetRxDataSize>
 800b68a:	4602      	mov	r2, r0
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	33b0      	adds	r3, #176	; 0xb0
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	32b0      	adds	r2, #176	; 0xb0
 800b6d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d101      	bne.n	800b6e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e025      	b.n	800b72c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	33b0      	adds	r3, #176	; 0xb0
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4413      	add	r3, r2
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d01a      	beq.n	800b72a <USBD_CDC_EP0_RxReady+0x6c>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b6fa:	2bff      	cmp	r3, #255	; 0xff
 800b6fc:	d015      	beq.n	800b72a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	33b0      	adds	r3, #176	; 0xb0
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b716:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b71e:	b292      	uxth	r2, r2
 800b720:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	22ff      	movs	r2, #255	; 0xff
 800b726:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b73c:	2182      	movs	r1, #130	; 0x82
 800b73e:	4818      	ldr	r0, [pc, #96]	; (800b7a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b740:	f000 fd0f 	bl	800c162 <USBD_GetEpDesc>
 800b744:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b746:	2101      	movs	r1, #1
 800b748:	4815      	ldr	r0, [pc, #84]	; (800b7a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b74a:	f000 fd0a 	bl	800c162 <USBD_GetEpDesc>
 800b74e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b750:	2181      	movs	r1, #129	; 0x81
 800b752:	4813      	ldr	r0, [pc, #76]	; (800b7a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b754:	f000 fd05 	bl	800c162 <USBD_GetEpDesc>
 800b758:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2210      	movs	r2, #16
 800b764:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d006      	beq.n	800b77a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	2200      	movs	r2, #0
 800b770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b774:	711a      	strb	r2, [r3, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d006      	beq.n	800b78e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b788:	711a      	strb	r2, [r3, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2243      	movs	r2, #67	; 0x43
 800b792:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b794:	4b02      	ldr	r3, [pc, #8]	; (800b7a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b796:	4618      	mov	r0, r3
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20000050 	.word	0x20000050

0800b7a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b7ac:	2182      	movs	r1, #130	; 0x82
 800b7ae:	4818      	ldr	r0, [pc, #96]	; (800b810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7b0:	f000 fcd7 	bl	800c162 <USBD_GetEpDesc>
 800b7b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b7b6:	2101      	movs	r1, #1
 800b7b8:	4815      	ldr	r0, [pc, #84]	; (800b810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7ba:	f000 fcd2 	bl	800c162 <USBD_GetEpDesc>
 800b7be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b7c0:	2181      	movs	r1, #129	; 0x81
 800b7c2:	4813      	ldr	r0, [pc, #76]	; (800b810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7c4:	f000 fccd 	bl	800c162 <USBD_GetEpDesc>
 800b7c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	2210      	movs	r2, #16
 800b7d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d006      	beq.n	800b7ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	711a      	strb	r2, [r3, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f042 0202 	orr.w	r2, r2, #2
 800b7e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d006      	beq.n	800b7fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	711a      	strb	r2, [r3, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f042 0202 	orr.w	r2, r2, #2
 800b7fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2243      	movs	r2, #67	; 0x43
 800b802:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b804:	4b02      	ldr	r3, [pc, #8]	; (800b810 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b806:	4618      	mov	r0, r3
 800b808:	3718      	adds	r7, #24
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	20000050 	.word	0x20000050

0800b814 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b81c:	2182      	movs	r1, #130	; 0x82
 800b81e:	4818      	ldr	r0, [pc, #96]	; (800b880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b820:	f000 fc9f 	bl	800c162 <USBD_GetEpDesc>
 800b824:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b826:	2101      	movs	r1, #1
 800b828:	4815      	ldr	r0, [pc, #84]	; (800b880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b82a:	f000 fc9a 	bl	800c162 <USBD_GetEpDesc>
 800b82e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b830:	2181      	movs	r1, #129	; 0x81
 800b832:	4813      	ldr	r0, [pc, #76]	; (800b880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b834:	f000 fc95 	bl	800c162 <USBD_GetEpDesc>
 800b838:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2210      	movs	r2, #16
 800b844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d006      	beq.n	800b85a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2200      	movs	r2, #0
 800b850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b854:	711a      	strb	r2, [r3, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d006      	beq.n	800b86e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b868:	711a      	strb	r2, [r3, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2243      	movs	r2, #67	; 0x43
 800b872:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b874:	4b02      	ldr	r3, [pc, #8]	; (800b880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b876:	4618      	mov	r0, r3
 800b878:	3718      	adds	r7, #24
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop
 800b880:	20000050 	.word	0x20000050

0800b884 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	220a      	movs	r2, #10
 800b890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b892:	4b03      	ldr	r3, [pc, #12]	; (800b8a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b894:	4618      	mov	r0, r3
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	2000000c 	.word	0x2000000c

0800b8a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e009      	b.n	800b8cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	33b0      	adds	r3, #176	; 0xb0
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	4413      	add	r3, r2
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	32b0      	adds	r2, #176	; 0xb0
 800b8ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e008      	b.n	800b910 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	371c      	adds	r7, #28
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	32b0      	adds	r2, #176	; 0xb0
 800b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b934:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e004      	b.n	800b94a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
	...

0800b958 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	32b0      	adds	r2, #176	; 0xb0
 800b96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b96e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	32b0      	adds	r2, #176	; 0xb0
 800b97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d101      	bne.n	800b986 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b982:	2303      	movs	r3, #3
 800b984:	e018      	b.n	800b9b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	7c1b      	ldrb	r3, [r3, #16]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d10a      	bne.n	800b9a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b98e:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <USBD_CDC_ReceivePacket+0x68>)
 800b990:	7819      	ldrb	r1, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f005 f8cf 	bl	8010b40 <USBD_LL_PrepareReceive>
 800b9a2:	e008      	b.n	800b9b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9a4:	4b06      	ldr	r3, [pc, #24]	; (800b9c0 <USBD_CDC_ReceivePacket+0x68>)
 800b9a6:	7819      	ldrb	r1, [r3, #0]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9ae:	2340      	movs	r3, #64	; 0x40
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f005 f8c5 	bl	8010b40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	20000094 	.word	0x20000094

0800b9c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d101      	bne.n	800b9dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	e01f      	b.n	800ba1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	79fa      	ldrb	r2, [r7, #7]
 800ba0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f004 fe9d 	bl	8010750 <USBD_LL_Init>
 800ba16:	4603      	mov	r3, r0
 800ba18:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3718      	adds	r7, #24
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d101      	bne.n	800ba3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e025      	b.n	800ba88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	32ae      	adds	r2, #174	; 0xae
 800ba4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00f      	beq.n	800ba78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	32ae      	adds	r2, #174	; 0xae
 800ba62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	f107 020e 	add.w	r2, r7, #14
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	4798      	blx	r3
 800ba70:	4602      	mov	r2, r0
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f004 fea5 	bl	80107e8 <USBD_LL_Start>
 800ba9e:	4603      	mov	r3, r0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bab0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	460b      	mov	r3, r1
 800bac8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d009      	beq.n	800baec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	78fa      	ldrb	r2, [r7, #3]
 800bae2:	4611      	mov	r1, r2
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	4798      	blx	r3
 800bae8:	4603      	mov	r3, r0
 800baea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800baec:	7bfb      	ldrb	r3, [r7, #15]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b084      	sub	sp, #16
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	460b      	mov	r3, r1
 800bb00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	78fa      	ldrb	r2, [r7, #3]
 800bb10:	4611      	mov	r1, r2
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	4798      	blx	r3
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b084      	sub	sp, #16
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f001 f938 	bl	800cdb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2201      	movs	r2, #1
 800bb46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb50:	461a      	mov	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb5e:	f003 031f 	and.w	r3, r3, #31
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d01a      	beq.n	800bb9c <USBD_LL_SetupStage+0x72>
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d822      	bhi.n	800bbb0 <USBD_LL_SetupStage+0x86>
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d002      	beq.n	800bb74 <USBD_LL_SetupStage+0x4a>
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d00a      	beq.n	800bb88 <USBD_LL_SetupStage+0x5e>
 800bb72:	e01d      	b.n	800bbb0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fb65 	bl	800c24c <USBD_StdDevReq>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]
      break;
 800bb86:	e020      	b.n	800bbca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fbcd 	bl	800c330 <USBD_StdItfReq>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73fb      	strb	r3, [r7, #15]
      break;
 800bb9a:	e016      	b.n	800bbca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 fc2f 	bl	800c408 <USBD_StdEPReq>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73fb      	strb	r3, [r7, #15]
      break;
 800bbae:	e00c      	b.n	800bbca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f004 feb8 	bl	8010934 <USBD_LL_StallEP>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbc8:	bf00      	nop
  }

  return ret;
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bbe6:	7afb      	ldrb	r3, [r7, #11]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d16e      	bne.n	800bcca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bbf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	f040 8098 	bne.w	800bd30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	689a      	ldr	r2, [r3, #8]
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d913      	bls.n	800bc34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	689a      	ldr	r2, [r3, #8]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	1ad2      	subs	r2, r2, r3
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	68da      	ldr	r2, [r3, #12]
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	4293      	cmp	r3, r2
 800bc24:	bf28      	it	cs
 800bc26:	4613      	movcs	r3, r2
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f001 f9b4 	bl	800cf9a <USBD_CtlContinueRx>
 800bc32:	e07d      	b.n	800bd30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc3a:	f003 031f 	and.w	r3, r3, #31
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d014      	beq.n	800bc6c <USBD_LL_DataOutStage+0x98>
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d81d      	bhi.n	800bc82 <USBD_LL_DataOutStage+0xae>
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d002      	beq.n	800bc50 <USBD_LL_DataOutStage+0x7c>
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d003      	beq.n	800bc56 <USBD_LL_DataOutStage+0x82>
 800bc4e:	e018      	b.n	800bc82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc50:	2300      	movs	r3, #0
 800bc52:	75bb      	strb	r3, [r7, #22]
            break;
 800bc54:	e018      	b.n	800bc88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	4619      	mov	r1, r3
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f000 fa64 	bl	800c12e <USBD_CoreFindIF>
 800bc66:	4603      	mov	r3, r0
 800bc68:	75bb      	strb	r3, [r7, #22]
            break;
 800bc6a:	e00d      	b.n	800bc88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	4619      	mov	r1, r3
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f000 fa66 	bl	800c148 <USBD_CoreFindEP>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	75bb      	strb	r3, [r7, #22]
            break;
 800bc80:	e002      	b.n	800bc88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	75bb      	strb	r3, [r7, #22]
            break;
 800bc86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc88:	7dbb      	ldrb	r3, [r7, #22]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d119      	bne.n	800bcc2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2b03      	cmp	r3, #3
 800bc98:	d113      	bne.n	800bcc2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc9a:	7dba      	ldrb	r2, [r7, #22]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	32ae      	adds	r2, #174	; 0xae
 800bca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00b      	beq.n	800bcc2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bcaa:	7dba      	ldrb	r2, [r7, #22]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bcb2:	7dba      	ldrb	r2, [r7, #22]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	32ae      	adds	r2, #174	; 0xae
 800bcb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f001 f97a 	bl	800cfbc <USBD_CtlSendStatus>
 800bcc8:	e032      	b.n	800bd30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcca:	7afb      	ldrb	r3, [r7, #11]
 800bccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	68f8      	ldr	r0, [r7, #12]
 800bcd6:	f000 fa37 	bl	800c148 <USBD_CoreFindEP>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcde:	7dbb      	ldrb	r3, [r7, #22]
 800bce0:	2bff      	cmp	r3, #255	; 0xff
 800bce2:	d025      	beq.n	800bd30 <USBD_LL_DataOutStage+0x15c>
 800bce4:	7dbb      	ldrb	r3, [r7, #22]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d122      	bne.n	800bd30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b03      	cmp	r3, #3
 800bcf4:	d117      	bne.n	800bd26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bcf6:	7dba      	ldrb	r2, [r7, #22]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	32ae      	adds	r2, #174	; 0xae
 800bcfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00f      	beq.n	800bd26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bd06:	7dba      	ldrb	r2, [r7, #22]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd0e:	7dba      	ldrb	r2, [r7, #22]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	32ae      	adds	r2, #174	; 0xae
 800bd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd18:	699b      	ldr	r3, [r3, #24]
 800bd1a:	7afa      	ldrb	r2, [r7, #11]
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	4798      	blx	r3
 800bd22:	4603      	mov	r3, r0
 800bd24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	e000      	b.n	800bd32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b086      	sub	sp, #24
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	60f8      	str	r0, [r7, #12]
 800bd42:	460b      	mov	r3, r1
 800bd44:	607a      	str	r2, [r7, #4]
 800bd46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd48:	7afb      	ldrb	r3, [r7, #11]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d16f      	bne.n	800be2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3314      	adds	r3, #20
 800bd52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d15a      	bne.n	800be14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	689a      	ldr	r2, [r3, #8]
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d914      	bls.n	800bd94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	689a      	ldr	r2, [r3, #8]
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	1ad2      	subs	r2, r2, r3
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	6879      	ldr	r1, [r7, #4]
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f001 f8dc 	bl	800cf3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd86:	2300      	movs	r3, #0
 800bd88:	2200      	movs	r2, #0
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f004 fed7 	bl	8010b40 <USBD_LL_PrepareReceive>
 800bd92:	e03f      	b.n	800be14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d11c      	bne.n	800bdda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d316      	bcc.n	800bdda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d20f      	bcs.n	800bdda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f001 f8bd 	bl	800cf3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdcc:	2300      	movs	r3, #0
 800bdce:	2200      	movs	r2, #0
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f004 feb4 	bl	8010b40 <USBD_LL_PrepareReceive>
 800bdd8:	e01c      	b.n	800be14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b03      	cmp	r3, #3
 800bde4:	d10f      	bne.n	800be06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d009      	beq.n	800be06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be06:	2180      	movs	r1, #128	; 0x80
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f004 fd93 	bl	8010934 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f001 f8e7 	bl	800cfe2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d03a      	beq.n	800be94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f7ff fe42 	bl	800baa8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be2c:	e032      	b.n	800be94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be2e:	7afb      	ldrb	r3, [r7, #11]
 800be30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be34:	b2db      	uxtb	r3, r3
 800be36:	4619      	mov	r1, r3
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 f985 	bl	800c148 <USBD_CoreFindEP>
 800be3e:	4603      	mov	r3, r0
 800be40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be42:	7dfb      	ldrb	r3, [r7, #23]
 800be44:	2bff      	cmp	r3, #255	; 0xff
 800be46:	d025      	beq.n	800be94 <USBD_LL_DataInStage+0x15a>
 800be48:	7dfb      	ldrb	r3, [r7, #23]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d122      	bne.n	800be94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b03      	cmp	r3, #3
 800be58:	d11c      	bne.n	800be94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be5a:	7dfa      	ldrb	r2, [r7, #23]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	32ae      	adds	r2, #174	; 0xae
 800be60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d014      	beq.n	800be94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800be6a:	7dfa      	ldrb	r2, [r7, #23]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be72:	7dfa      	ldrb	r2, [r7, #23]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	32ae      	adds	r2, #174	; 0xae
 800be78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	7afa      	ldrb	r2, [r7, #11]
 800be80:	4611      	mov	r1, r2
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	4798      	blx	r3
 800be86:	4603      	mov	r3, r0
 800be88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be8a:	7dbb      	ldrb	r3, [r7, #22]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800be90:	7dbb      	ldrb	r3, [r7, #22]
 800be92:	e000      	b.n	800be96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3718      	adds	r7, #24
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d014      	beq.n	800bf04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00e      	beq.n	800bf04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	6852      	ldr	r2, [r2, #4]
 800bef2:	b2d2      	uxtb	r2, r2
 800bef4:	4611      	mov	r1, r2
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	4798      	blx	r3
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bf00:	2303      	movs	r3, #3
 800bf02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf04:	2340      	movs	r3, #64	; 0x40
 800bf06:	2200      	movs	r2, #0
 800bf08:	2100      	movs	r1, #0
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f004 fc9e 	bl	801084c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2240      	movs	r2, #64	; 0x40
 800bf1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf20:	2340      	movs	r3, #64	; 0x40
 800bf22:	2200      	movs	r2, #0
 800bf24:	2180      	movs	r1, #128	; 0x80
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f004 fc90 	bl	801084c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2240      	movs	r2, #64	; 0x40
 800bf36:	621a      	str	r2, [r3, #32]

  return ret;
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	78fa      	ldrb	r2, [r7, #3]
 800bf52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf62:	b480      	push	{r7}
 800bf64:	b083      	sub	sp, #12
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b04      	cmp	r3, #4
 800bf74:	d006      	beq.n	800bf84 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2204      	movs	r2, #4
 800bf88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b083      	sub	sp, #12
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b04      	cmp	r3, #4
 800bfac:	d106      	bne.n	800bfbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr

0800bfca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b082      	sub	sp, #8
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d110      	bne.n	800c000 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00b      	beq.n	800c000 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfee:	69db      	ldr	r3, [r3, #28]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d005      	beq.n	800c000 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bffa:	69db      	ldr	r3, [r3, #28]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	460b      	mov	r3, r1
 800c014:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	32ae      	adds	r2, #174	; 0xae
 800c020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c028:	2303      	movs	r3, #3
 800c02a:	e01c      	b.n	800c066 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b03      	cmp	r3, #3
 800c036:	d115      	bne.n	800c064 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	32ae      	adds	r2, #174	; 0xae
 800c042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00b      	beq.n	800c064 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	32ae      	adds	r2, #174	; 0xae
 800c056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05a:	6a1b      	ldr	r3, [r3, #32]
 800c05c:	78fa      	ldrb	r2, [r7, #3]
 800c05e:	4611      	mov	r1, r2
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b082      	sub	sp, #8
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	460b      	mov	r3, r1
 800c078:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	32ae      	adds	r2, #174	; 0xae
 800c084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c08c:	2303      	movs	r3, #3
 800c08e:	e01c      	b.n	800c0ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d115      	bne.n	800c0c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	32ae      	adds	r2, #174	; 0xae
 800c0a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00b      	beq.n	800c0c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	32ae      	adds	r2, #174	; 0xae
 800c0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c0:	78fa      	ldrb	r2, [r7, #3]
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00e      	beq.n	800c124 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	6852      	ldr	r2, [r2, #4]
 800c112:	b2d2      	uxtb	r2, r2
 800c114:	4611      	mov	r1, r2
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	4798      	blx	r3
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c120:	2303      	movs	r3, #3
 800c122:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c124:	7bfb      	ldrb	r3, [r7, #15]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c12e:	b480      	push	{r7}
 800c130:	b083      	sub	sp, #12
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	460b      	mov	r3, r1
 800c138:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c13a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c154:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c156:	4618      	mov	r0, r3
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b086      	sub	sp, #24
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
 800c16a:	460b      	mov	r3, r1
 800c16c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c176:	2300      	movs	r3, #0
 800c178:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	885b      	ldrh	r3, [r3, #2]
 800c17e:	b29a      	uxth	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	b29b      	uxth	r3, r3
 800c186:	429a      	cmp	r2, r3
 800c188:	d920      	bls.n	800c1cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c192:	e013      	b.n	800c1bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c194:	f107 030a 	add.w	r3, r7, #10
 800c198:	4619      	mov	r1, r3
 800c19a:	6978      	ldr	r0, [r7, #20]
 800c19c:	f000 f81b 	bl	800c1d6 <USBD_GetNextDesc>
 800c1a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	785b      	ldrb	r3, [r3, #1]
 800c1a6:	2b05      	cmp	r3, #5
 800c1a8:	d108      	bne.n	800c1bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	789b      	ldrb	r3, [r3, #2]
 800c1b2:	78fa      	ldrb	r2, [r7, #3]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d008      	beq.n	800c1ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	885b      	ldrh	r3, [r3, #2]
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	897b      	ldrh	r3, [r7, #10]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d8e5      	bhi.n	800c194 <USBD_GetEpDesc+0x32>
 800c1c8:	e000      	b.n	800c1cc <USBD_GetEpDesc+0x6a>
          break;
 800c1ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1cc:	693b      	ldr	r3, [r7, #16]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1d6:	b480      	push	{r7}
 800c1d8:	b085      	sub	sp, #20
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
 800c1de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	881a      	ldrh	r2, [r3, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	4413      	add	r3, r2
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4413      	add	r3, r2
 800c200:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c202:	68fb      	ldr	r3, [r7, #12]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3714      	adds	r7, #20
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c210:	b480      	push	{r7}
 800c212:	b087      	sub	sp, #28
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	3301      	adds	r3, #1
 800c226:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c22e:	8a3b      	ldrh	r3, [r7, #16]
 800c230:	021b      	lsls	r3, r3, #8
 800c232:	b21a      	sxth	r2, r3
 800c234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c238:	4313      	orrs	r3, r2
 800c23a:	b21b      	sxth	r3, r3
 800c23c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c23e:	89fb      	ldrh	r3, [r7, #14]
}
 800c240:	4618      	mov	r0, r3
 800c242:	371c      	adds	r7, #28
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c262:	2b40      	cmp	r3, #64	; 0x40
 800c264:	d005      	beq.n	800c272 <USBD_StdDevReq+0x26>
 800c266:	2b40      	cmp	r3, #64	; 0x40
 800c268:	d857      	bhi.n	800c31a <USBD_StdDevReq+0xce>
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00f      	beq.n	800c28e <USBD_StdDevReq+0x42>
 800c26e:	2b20      	cmp	r3, #32
 800c270:	d153      	bne.n	800c31a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	32ae      	adds	r2, #174	; 0xae
 800c27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	4798      	blx	r3
 800c288:	4603      	mov	r3, r0
 800c28a:	73fb      	strb	r3, [r7, #15]
      break;
 800c28c:	e04a      	b.n	800c324 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	785b      	ldrb	r3, [r3, #1]
 800c292:	2b09      	cmp	r3, #9
 800c294:	d83b      	bhi.n	800c30e <USBD_StdDevReq+0xc2>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <USBD_StdDevReq+0x50>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2f1 	.word	0x0800c2f1
 800c2a0:	0800c305 	.word	0x0800c305
 800c2a4:	0800c30f 	.word	0x0800c30f
 800c2a8:	0800c2fb 	.word	0x0800c2fb
 800c2ac:	0800c30f 	.word	0x0800c30f
 800c2b0:	0800c2cf 	.word	0x0800c2cf
 800c2b4:	0800c2c5 	.word	0x0800c2c5
 800c2b8:	0800c30f 	.word	0x0800c30f
 800c2bc:	0800c2e7 	.word	0x0800c2e7
 800c2c0:	0800c2d9 	.word	0x0800c2d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fa3c 	bl	800c744 <USBD_GetDescriptor>
          break;
 800c2cc:	e024      	b.n	800c318 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fbcb 	bl	800ca6c <USBD_SetAddress>
          break;
 800c2d6:	e01f      	b.n	800c318 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fc0a 	bl	800caf4 <USBD_SetConfig>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73fb      	strb	r3, [r7, #15]
          break;
 800c2e4:	e018      	b.n	800c318 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2e6:	6839      	ldr	r1, [r7, #0]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fcad 	bl	800cc48 <USBD_GetConfig>
          break;
 800c2ee:	e013      	b.n	800c318 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fcde 	bl	800ccb4 <USBD_GetStatus>
          break;
 800c2f8:	e00e      	b.n	800c318 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fd0d 	bl	800cd1c <USBD_SetFeature>
          break;
 800c302:	e009      	b.n	800c318 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fd31 	bl	800cd6e <USBD_ClrFeature>
          break;
 800c30c:	e004      	b.n	800c318 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fd88 	bl	800ce26 <USBD_CtlError>
          break;
 800c316:	bf00      	nop
      }
      break;
 800c318:	e004      	b.n	800c324 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fd82 	bl	800ce26 <USBD_CtlError>
      break;
 800c322:	bf00      	nop
  }

  return ret;
 800c324:	7bfb      	ldrb	r3, [r7, #15]
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop

0800c330 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c33a:	2300      	movs	r3, #0
 800c33c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c346:	2b40      	cmp	r3, #64	; 0x40
 800c348:	d005      	beq.n	800c356 <USBD_StdItfReq+0x26>
 800c34a:	2b40      	cmp	r3, #64	; 0x40
 800c34c:	d852      	bhi.n	800c3f4 <USBD_StdItfReq+0xc4>
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <USBD_StdItfReq+0x26>
 800c352:	2b20      	cmp	r3, #32
 800c354:	d14e      	bne.n	800c3f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	3b01      	subs	r3, #1
 800c360:	2b02      	cmp	r3, #2
 800c362:	d840      	bhi.n	800c3e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	889b      	ldrh	r3, [r3, #4]
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d836      	bhi.n	800c3dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	889b      	ldrh	r3, [r3, #4]
 800c372:	b2db      	uxtb	r3, r3
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff fed9 	bl	800c12e <USBD_CoreFindIF>
 800c37c:	4603      	mov	r3, r0
 800c37e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	2bff      	cmp	r3, #255	; 0xff
 800c384:	d01d      	beq.n	800c3c2 <USBD_StdItfReq+0x92>
 800c386:	7bbb      	ldrb	r3, [r7, #14]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d11a      	bne.n	800c3c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c38c:	7bba      	ldrb	r2, [r7, #14]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	32ae      	adds	r2, #174	; 0xae
 800c392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00f      	beq.n	800c3bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c39c:	7bba      	ldrb	r2, [r7, #14]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3a4:	7bba      	ldrb	r2, [r7, #14]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	32ae      	adds	r2, #174	; 0xae
 800c3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	4798      	blx	r3
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3ba:	e004      	b.n	800c3c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3c0:	e001      	b.n	800c3c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	88db      	ldrh	r3, [r3, #6]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d110      	bne.n	800c3f0 <USBD_StdItfReq+0xc0>
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10d      	bne.n	800c3f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 fdf1 	bl	800cfbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3da:	e009      	b.n	800c3f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fd21 	bl	800ce26 <USBD_CtlError>
          break;
 800c3e4:	e004      	b.n	800c3f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fd1c 	bl	800ce26 <USBD_CtlError>
          break;
 800c3ee:	e000      	b.n	800c3f2 <USBD_StdItfReq+0xc2>
          break;
 800c3f0:	bf00      	nop
      }
      break;
 800c3f2:	e004      	b.n	800c3fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 fd15 	bl	800ce26 <USBD_CtlError>
      break;
 800c3fc:	bf00      	nop
  }

  return ret;
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	889b      	ldrh	r3, [r3, #4]
 800c41a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c424:	2b40      	cmp	r3, #64	; 0x40
 800c426:	d007      	beq.n	800c438 <USBD_StdEPReq+0x30>
 800c428:	2b40      	cmp	r3, #64	; 0x40
 800c42a:	f200 817f 	bhi.w	800c72c <USBD_StdEPReq+0x324>
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d02a      	beq.n	800c488 <USBD_StdEPReq+0x80>
 800c432:	2b20      	cmp	r3, #32
 800c434:	f040 817a 	bne.w	800c72c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f7ff fe83 	bl	800c148 <USBD_CoreFindEP>
 800c442:	4603      	mov	r3, r0
 800c444:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c446:	7b7b      	ldrb	r3, [r7, #13]
 800c448:	2bff      	cmp	r3, #255	; 0xff
 800c44a:	f000 8174 	beq.w	800c736 <USBD_StdEPReq+0x32e>
 800c44e:	7b7b      	ldrb	r3, [r7, #13]
 800c450:	2b00      	cmp	r3, #0
 800c452:	f040 8170 	bne.w	800c736 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c456:	7b7a      	ldrb	r2, [r7, #13]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c45e:	7b7a      	ldrb	r2, [r7, #13]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	32ae      	adds	r2, #174	; 0xae
 800c464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 8163 	beq.w	800c736 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c470:	7b7a      	ldrb	r2, [r7, #13]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	32ae      	adds	r2, #174	; 0xae
 800c476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	4798      	blx	r3
 800c482:	4603      	mov	r3, r0
 800c484:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c486:	e156      	b.n	800c736 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	785b      	ldrb	r3, [r3, #1]
 800c48c:	2b03      	cmp	r3, #3
 800c48e:	d008      	beq.n	800c4a2 <USBD_StdEPReq+0x9a>
 800c490:	2b03      	cmp	r3, #3
 800c492:	f300 8145 	bgt.w	800c720 <USBD_StdEPReq+0x318>
 800c496:	2b00      	cmp	r3, #0
 800c498:	f000 809b 	beq.w	800c5d2 <USBD_StdEPReq+0x1ca>
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d03c      	beq.n	800c51a <USBD_StdEPReq+0x112>
 800c4a0:	e13e      	b.n	800c720 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d002      	beq.n	800c4b4 <USBD_StdEPReq+0xac>
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d016      	beq.n	800c4e0 <USBD_StdEPReq+0xd8>
 800c4b2:	e02c      	b.n	800c50e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4b4:	7bbb      	ldrb	r3, [r7, #14]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00d      	beq.n	800c4d6 <USBD_StdEPReq+0xce>
 800c4ba:	7bbb      	ldrb	r3, [r7, #14]
 800c4bc:	2b80      	cmp	r3, #128	; 0x80
 800c4be:	d00a      	beq.n	800c4d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f004 fa35 	bl	8010934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ca:	2180      	movs	r1, #128	; 0x80
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f004 fa31 	bl	8010934 <USBD_LL_StallEP>
 800c4d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4d4:	e020      	b.n	800c518 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fca4 	bl	800ce26 <USBD_CtlError>
              break;
 800c4de:	e01b      	b.n	800c518 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	885b      	ldrh	r3, [r3, #2]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10e      	bne.n	800c506 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4e8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00b      	beq.n	800c506 <USBD_StdEPReq+0xfe>
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	2b80      	cmp	r3, #128	; 0x80
 800c4f2:	d008      	beq.n	800c506 <USBD_StdEPReq+0xfe>
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	88db      	ldrh	r3, [r3, #6]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d104      	bne.n	800c506 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4fc:	7bbb      	ldrb	r3, [r7, #14]
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f004 fa17 	bl	8010934 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fd58 	bl	800cfbc <USBD_CtlSendStatus>

              break;
 800c50c:	e004      	b.n	800c518 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fc88 	bl	800ce26 <USBD_CtlError>
              break;
 800c516:	bf00      	nop
          }
          break;
 800c518:	e107      	b.n	800c72a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c520:	b2db      	uxtb	r3, r3
 800c522:	2b02      	cmp	r3, #2
 800c524:	d002      	beq.n	800c52c <USBD_StdEPReq+0x124>
 800c526:	2b03      	cmp	r3, #3
 800c528:	d016      	beq.n	800c558 <USBD_StdEPReq+0x150>
 800c52a:	e04b      	b.n	800c5c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00d      	beq.n	800c54e <USBD_StdEPReq+0x146>
 800c532:	7bbb      	ldrb	r3, [r7, #14]
 800c534:	2b80      	cmp	r3, #128	; 0x80
 800c536:	d00a      	beq.n	800c54e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f004 f9f9 	bl	8010934 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c542:	2180      	movs	r1, #128	; 0x80
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f004 f9f5 	bl	8010934 <USBD_LL_StallEP>
 800c54a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c54c:	e040      	b.n	800c5d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fc68 	bl	800ce26 <USBD_CtlError>
              break;
 800c556:	e03b      	b.n	800c5d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	885b      	ldrh	r3, [r3, #2]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d136      	bne.n	800c5ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c560:	7bbb      	ldrb	r3, [r7, #14]
 800c562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c566:	2b00      	cmp	r3, #0
 800c568:	d004      	beq.n	800c574 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
 800c56c:	4619      	mov	r1, r3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f004 fa16 	bl	80109a0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fd21 	bl	800cfbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7ff fde2 	bl	800c148 <USBD_CoreFindEP>
 800c584:	4603      	mov	r3, r0
 800c586:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c588:	7b7b      	ldrb	r3, [r7, #13]
 800c58a:	2bff      	cmp	r3, #255	; 0xff
 800c58c:	d01f      	beq.n	800c5ce <USBD_StdEPReq+0x1c6>
 800c58e:	7b7b      	ldrb	r3, [r7, #13]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d11c      	bne.n	800c5ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c594:	7b7a      	ldrb	r2, [r7, #13]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c59c:	7b7a      	ldrb	r2, [r7, #13]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	32ae      	adds	r2, #174	; 0xae
 800c5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d010      	beq.n	800c5ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5ac:	7b7a      	ldrb	r2, [r7, #13]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	32ae      	adds	r2, #174	; 0xae
 800c5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	4798      	blx	r3
 800c5be:	4603      	mov	r3, r0
 800c5c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5c2:	e004      	b.n	800c5ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5c4:	6839      	ldr	r1, [r7, #0]
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 fc2d 	bl	800ce26 <USBD_CtlError>
              break;
 800c5cc:	e000      	b.n	800c5d0 <USBD_StdEPReq+0x1c8>
              break;
 800c5ce:	bf00      	nop
          }
          break;
 800c5d0:	e0ab      	b.n	800c72a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d002      	beq.n	800c5e4 <USBD_StdEPReq+0x1dc>
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d032      	beq.n	800c648 <USBD_StdEPReq+0x240>
 800c5e2:	e097      	b.n	800c714 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d007      	beq.n	800c5fa <USBD_StdEPReq+0x1f2>
 800c5ea:	7bbb      	ldrb	r3, [r7, #14]
 800c5ec:	2b80      	cmp	r3, #128	; 0x80
 800c5ee:	d004      	beq.n	800c5fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fc17 	bl	800ce26 <USBD_CtlError>
                break;
 800c5f8:	e091      	b.n	800c71e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	da0b      	bge.n	800c61a <USBD_StdEPReq+0x212>
 800c602:	7bbb      	ldrb	r3, [r7, #14]
 800c604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	3310      	adds	r3, #16
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	4413      	add	r3, r2
 800c616:	3304      	adds	r3, #4
 800c618:	e00b      	b.n	800c632 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c61a:	7bbb      	ldrb	r3, [r7, #14]
 800c61c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c620:	4613      	mov	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4413      	add	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	4413      	add	r3, r2
 800c630:	3304      	adds	r3, #4
 800c632:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2200      	movs	r2, #0
 800c638:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2202      	movs	r2, #2
 800c63e:	4619      	mov	r1, r3
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fc61 	bl	800cf08 <USBD_CtlSendData>
              break;
 800c646:	e06a      	b.n	800c71e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	da11      	bge.n	800c674 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	f003 020f 	and.w	r2, r3, #15
 800c656:	6879      	ldr	r1, [r7, #4]
 800c658:	4613      	mov	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	4413      	add	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	440b      	add	r3, r1
 800c662:	3324      	adds	r3, #36	; 0x24
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d117      	bne.n	800c69a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c66a:	6839      	ldr	r1, [r7, #0]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fbda 	bl	800ce26 <USBD_CtlError>
                  break;
 800c672:	e054      	b.n	800c71e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c674:	7bbb      	ldrb	r3, [r7, #14]
 800c676:	f003 020f 	and.w	r2, r3, #15
 800c67a:	6879      	ldr	r1, [r7, #4]
 800c67c:	4613      	mov	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	4413      	add	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	440b      	add	r3, r1
 800c686:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d104      	bne.n	800c69a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 fbc7 	bl	800ce26 <USBD_CtlError>
                  break;
 800c698:	e041      	b.n	800c71e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c69a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	da0b      	bge.n	800c6ba <USBD_StdEPReq+0x2b2>
 800c6a2:	7bbb      	ldrb	r3, [r7, #14]
 800c6a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	3310      	adds	r3, #16
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	e00b      	b.n	800c6d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6ba:	7bbb      	ldrb	r3, [r7, #14]
 800c6bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6d4:	7bbb      	ldrb	r3, [r7, #14]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d002      	beq.n	800c6e0 <USBD_StdEPReq+0x2d8>
 800c6da:	7bbb      	ldrb	r3, [r7, #14]
 800c6dc:	2b80      	cmp	r3, #128	; 0x80
 800c6de:	d103      	bne.n	800c6e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]
 800c6e6:	e00e      	b.n	800c706 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6e8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f004 f98d 	bl	8010a0c <USBD_LL_IsStallEP>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d003      	beq.n	800c700 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	e002      	b.n	800c706 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2202      	movs	r2, #2
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fbfb 	bl	800cf08 <USBD_CtlSendData>
              break;
 800c712:	e004      	b.n	800c71e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fb85 	bl	800ce26 <USBD_CtlError>
              break;
 800c71c:	bf00      	nop
          }
          break;
 800c71e:	e004      	b.n	800c72a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fb7f 	bl	800ce26 <USBD_CtlError>
          break;
 800c728:	bf00      	nop
      }
      break;
 800c72a:	e005      	b.n	800c738 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fb79 	bl	800ce26 <USBD_CtlError>
      break;
 800c734:	e000      	b.n	800c738 <USBD_StdEPReq+0x330>
      break;
 800c736:	bf00      	nop
  }

  return ret;
 800c738:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
	...

0800c744 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c74e:	2300      	movs	r3, #0
 800c750:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c752:	2300      	movs	r3, #0
 800c754:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c756:	2300      	movs	r3, #0
 800c758:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	885b      	ldrh	r3, [r3, #2]
 800c75e:	0a1b      	lsrs	r3, r3, #8
 800c760:	b29b      	uxth	r3, r3
 800c762:	3b01      	subs	r3, #1
 800c764:	2b0e      	cmp	r3, #14
 800c766:	f200 8152 	bhi.w	800ca0e <USBD_GetDescriptor+0x2ca>
 800c76a:	a201      	add	r2, pc, #4	; (adr r2, 800c770 <USBD_GetDescriptor+0x2c>)
 800c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c770:	0800c7e1 	.word	0x0800c7e1
 800c774:	0800c7f9 	.word	0x0800c7f9
 800c778:	0800c839 	.word	0x0800c839
 800c77c:	0800ca0f 	.word	0x0800ca0f
 800c780:	0800ca0f 	.word	0x0800ca0f
 800c784:	0800c9af 	.word	0x0800c9af
 800c788:	0800c9db 	.word	0x0800c9db
 800c78c:	0800ca0f 	.word	0x0800ca0f
 800c790:	0800ca0f 	.word	0x0800ca0f
 800c794:	0800ca0f 	.word	0x0800ca0f
 800c798:	0800ca0f 	.word	0x0800ca0f
 800c79c:	0800ca0f 	.word	0x0800ca0f
 800c7a0:	0800ca0f 	.word	0x0800ca0f
 800c7a4:	0800ca0f 	.word	0x0800ca0f
 800c7a8:	0800c7ad 	.word	0x0800c7ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7b2:	69db      	ldr	r3, [r3, #28]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00b      	beq.n	800c7d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7be:	69db      	ldr	r3, [r3, #28]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	7c12      	ldrb	r2, [r2, #16]
 800c7c4:	f107 0108 	add.w	r1, r7, #8
 800c7c8:	4610      	mov	r0, r2
 800c7ca:	4798      	blx	r3
 800c7cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7ce:	e126      	b.n	800ca1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fb27 	bl	800ce26 <USBD_CtlError>
        err++;
 800c7d8:	7afb      	ldrb	r3, [r7, #11]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	72fb      	strb	r3, [r7, #11]
      break;
 800c7de:	e11e      	b.n	800ca1e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	7c12      	ldrb	r2, [r2, #16]
 800c7ec:	f107 0108 	add.w	r1, r7, #8
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	4798      	blx	r3
 800c7f4:	60f8      	str	r0, [r7, #12]
      break;
 800c7f6:	e112      	b.n	800ca1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	7c1b      	ldrb	r3, [r3, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10d      	bne.n	800c81c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c808:	f107 0208 	add.w	r2, r7, #8
 800c80c:	4610      	mov	r0, r2
 800c80e:	4798      	blx	r3
 800c810:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	3301      	adds	r3, #1
 800c816:	2202      	movs	r2, #2
 800c818:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c81a:	e100      	b.n	800ca1e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c824:	f107 0208 	add.w	r2, r7, #8
 800c828:	4610      	mov	r0, r2
 800c82a:	4798      	blx	r3
 800c82c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3301      	adds	r3, #1
 800c832:	2202      	movs	r2, #2
 800c834:	701a      	strb	r2, [r3, #0]
      break;
 800c836:	e0f2      	b.n	800ca1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	885b      	ldrh	r3, [r3, #2]
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	2b05      	cmp	r3, #5
 800c840:	f200 80ac 	bhi.w	800c99c <USBD_GetDescriptor+0x258>
 800c844:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <USBD_GetDescriptor+0x108>)
 800c846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84a:	bf00      	nop
 800c84c:	0800c865 	.word	0x0800c865
 800c850:	0800c899 	.word	0x0800c899
 800c854:	0800c8cd 	.word	0x0800c8cd
 800c858:	0800c901 	.word	0x0800c901
 800c85c:	0800c935 	.word	0x0800c935
 800c860:	0800c969 	.word	0x0800c969
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	7c12      	ldrb	r2, [r2, #16]
 800c87c:	f107 0108 	add.w	r1, r7, #8
 800c880:	4610      	mov	r0, r2
 800c882:	4798      	blx	r3
 800c884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c886:	e091      	b.n	800c9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c888:	6839      	ldr	r1, [r7, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 facb 	bl	800ce26 <USBD_CtlError>
            err++;
 800c890:	7afb      	ldrb	r3, [r7, #11]
 800c892:	3301      	adds	r3, #1
 800c894:	72fb      	strb	r3, [r7, #11]
          break;
 800c896:	e089      	b.n	800c9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00b      	beq.n	800c8bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	7c12      	ldrb	r2, [r2, #16]
 800c8b0:	f107 0108 	add.w	r1, r7, #8
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	4798      	blx	r3
 800c8b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ba:	e077      	b.n	800c9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fab1 	bl	800ce26 <USBD_CtlError>
            err++;
 800c8c4:	7afb      	ldrb	r3, [r7, #11]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8ca:	e06f      	b.n	800c9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00b      	beq.n	800c8f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	7c12      	ldrb	r2, [r2, #16]
 800c8e4:	f107 0108 	add.w	r1, r7, #8
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	4798      	blx	r3
 800c8ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ee:	e05d      	b.n	800c9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8f0:	6839      	ldr	r1, [r7, #0]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f000 fa97 	bl	800ce26 <USBD_CtlError>
            err++;
 800c8f8:	7afb      	ldrb	r3, [r7, #11]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c8fe:	e055      	b.n	800c9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00b      	beq.n	800c924 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	7c12      	ldrb	r2, [r2, #16]
 800c918:	f107 0108 	add.w	r1, r7, #8
 800c91c:	4610      	mov	r0, r2
 800c91e:	4798      	blx	r3
 800c920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c922:	e043      	b.n	800c9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fa7d 	bl	800ce26 <USBD_CtlError>
            err++;
 800c92c:	7afb      	ldrb	r3, [r7, #11]
 800c92e:	3301      	adds	r3, #1
 800c930:	72fb      	strb	r3, [r7, #11]
          break;
 800c932:	e03b      	b.n	800c9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00b      	beq.n	800c958 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	7c12      	ldrb	r2, [r2, #16]
 800c94c:	f107 0108 	add.w	r1, r7, #8
 800c950:	4610      	mov	r0, r2
 800c952:	4798      	blx	r3
 800c954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c956:	e029      	b.n	800c9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fa63 	bl	800ce26 <USBD_CtlError>
            err++;
 800c960:	7afb      	ldrb	r3, [r7, #11]
 800c962:	3301      	adds	r3, #1
 800c964:	72fb      	strb	r3, [r7, #11]
          break;
 800c966:	e021      	b.n	800c9ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00b      	beq.n	800c98c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	7c12      	ldrb	r2, [r2, #16]
 800c980:	f107 0108 	add.w	r1, r7, #8
 800c984:	4610      	mov	r0, r2
 800c986:	4798      	blx	r3
 800c988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c98a:	e00f      	b.n	800c9ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c98c:	6839      	ldr	r1, [r7, #0]
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fa49 	bl	800ce26 <USBD_CtlError>
            err++;
 800c994:	7afb      	ldrb	r3, [r7, #11]
 800c996:	3301      	adds	r3, #1
 800c998:	72fb      	strb	r3, [r7, #11]
          break;
 800c99a:	e007      	b.n	800c9ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fa41 	bl	800ce26 <USBD_CtlError>
          err++;
 800c9a4:	7afb      	ldrb	r3, [r7, #11]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c9aa:	bf00      	nop
      }
      break;
 800c9ac:	e037      	b.n	800ca1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	7c1b      	ldrb	r3, [r3, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d109      	bne.n	800c9ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9be:	f107 0208 	add.w	r2, r7, #8
 800c9c2:	4610      	mov	r0, r2
 800c9c4:	4798      	blx	r3
 800c9c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9c8:	e029      	b.n	800ca1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9ca:	6839      	ldr	r1, [r7, #0]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fa2a 	bl	800ce26 <USBD_CtlError>
        err++;
 800c9d2:	7afb      	ldrb	r3, [r7, #11]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c9d8:	e021      	b.n	800ca1e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	7c1b      	ldrb	r3, [r3, #16]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10d      	bne.n	800c9fe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ea:	f107 0208 	add.w	r2, r7, #8
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	4798      	blx	r3
 800c9f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	2207      	movs	r2, #7
 800c9fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9fc:	e00f      	b.n	800ca1e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9fe:	6839      	ldr	r1, [r7, #0]
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f000 fa10 	bl	800ce26 <USBD_CtlError>
        err++;
 800ca06:	7afb      	ldrb	r3, [r7, #11]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ca0c:	e007      	b.n	800ca1e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ca0e:	6839      	ldr	r1, [r7, #0]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fa08 	bl	800ce26 <USBD_CtlError>
      err++;
 800ca16:	7afb      	ldrb	r3, [r7, #11]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ca1c:	bf00      	nop
  }

  if (err != 0U)
 800ca1e:	7afb      	ldrb	r3, [r7, #11]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d11e      	bne.n	800ca62 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	88db      	ldrh	r3, [r3, #6]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d016      	beq.n	800ca5a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ca2c:	893b      	ldrh	r3, [r7, #8]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00e      	beq.n	800ca50 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	88da      	ldrh	r2, [r3, #6]
 800ca36:	893b      	ldrh	r3, [r7, #8]
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	bf28      	it	cs
 800ca3c:	4613      	movcs	r3, r2
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca42:	893b      	ldrh	r3, [r7, #8]
 800ca44:	461a      	mov	r2, r3
 800ca46:	68f9      	ldr	r1, [r7, #12]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fa5d 	bl	800cf08 <USBD_CtlSendData>
 800ca4e:	e009      	b.n	800ca64 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f9e7 	bl	800ce26 <USBD_CtlError>
 800ca58:	e004      	b.n	800ca64 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 faae 	bl	800cfbc <USBD_CtlSendStatus>
 800ca60:	e000      	b.n	800ca64 <USBD_GetDescriptor+0x320>
    return;
 800ca62:	bf00      	nop
  }
}
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop

0800ca6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	889b      	ldrh	r3, [r3, #4]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d131      	bne.n	800cae2 <USBD_SetAddress+0x76>
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	88db      	ldrh	r3, [r3, #6]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d12d      	bne.n	800cae2 <USBD_SetAddress+0x76>
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	885b      	ldrh	r3, [r3, #2]
 800ca8a:	2b7f      	cmp	r3, #127	; 0x7f
 800ca8c:	d829      	bhi.n	800cae2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	885b      	ldrh	r3, [r3, #2]
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b03      	cmp	r3, #3
 800caa4:	d104      	bne.n	800cab0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f9bc 	bl	800ce26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caae:	e01d      	b.n	800caec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	7bfa      	ldrb	r2, [r7, #15]
 800cab4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cab8:	7bfb      	ldrb	r3, [r7, #15]
 800caba:	4619      	mov	r1, r3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f003 ffd1 	bl	8010a64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fa7a 	bl	800cfbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d004      	beq.n	800cad8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2202      	movs	r2, #2
 800cad2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cad6:	e009      	b.n	800caec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cae0:	e004      	b.n	800caec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 f99e 	bl	800ce26 <USBD_CtlError>
  }
}
 800caea:	bf00      	nop
 800caec:	bf00      	nop
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cafe:	2300      	movs	r3, #0
 800cb00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	885b      	ldrh	r3, [r3, #2]
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	4b4e      	ldr	r3, [pc, #312]	; (800cc44 <USBD_SetConfig+0x150>)
 800cb0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb0c:	4b4d      	ldr	r3, [pc, #308]	; (800cc44 <USBD_SetConfig+0x150>)
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d905      	bls.n	800cb20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f985 	bl	800ce26 <USBD_CtlError>
    return USBD_FAIL;
 800cb1c:	2303      	movs	r3, #3
 800cb1e:	e08c      	b.n	800cc3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	2b02      	cmp	r3, #2
 800cb2a:	d002      	beq.n	800cb32 <USBD_SetConfig+0x3e>
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d029      	beq.n	800cb84 <USBD_SetConfig+0x90>
 800cb30:	e075      	b.n	800cc1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cb32:	4b44      	ldr	r3, [pc, #272]	; (800cc44 <USBD_SetConfig+0x150>)
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d020      	beq.n	800cb7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cb3a:	4b42      	ldr	r3, [pc, #264]	; (800cc44 <USBD_SetConfig+0x150>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb44:	4b3f      	ldr	r3, [pc, #252]	; (800cc44 <USBD_SetConfig+0x150>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	4619      	mov	r1, r3
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7fe ffb7 	bl	800babe <USBD_SetClassConfig>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d008      	beq.n	800cb6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 f962 	bl	800ce26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2202      	movs	r2, #2
 800cb66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb6a:	e065      	b.n	800cc38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fa25 	bl	800cfbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2203      	movs	r2, #3
 800cb76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb7a:	e05d      	b.n	800cc38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fa1d 	bl	800cfbc <USBD_CtlSendStatus>
      break;
 800cb82:	e059      	b.n	800cc38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb84:	4b2f      	ldr	r3, [pc, #188]	; (800cc44 <USBD_SetConfig+0x150>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d112      	bne.n	800cbb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2202      	movs	r2, #2
 800cb90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cb94:	4b2b      	ldr	r3, [pc, #172]	; (800cc44 <USBD_SetConfig+0x150>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb9e:	4b29      	ldr	r3, [pc, #164]	; (800cc44 <USBD_SetConfig+0x150>)
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7fe ffa6 	bl	800baf6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 fa06 	bl	800cfbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cbb0:	e042      	b.n	800cc38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cbb2:	4b24      	ldr	r3, [pc, #144]	; (800cc44 <USBD_SetConfig+0x150>)
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d02a      	beq.n	800cc16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7fe ff94 	bl	800baf6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cbce:	4b1d      	ldr	r3, [pc, #116]	; (800cc44 <USBD_SetConfig+0x150>)
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbd8:	4b1a      	ldr	r3, [pc, #104]	; (800cc44 <USBD_SetConfig+0x150>)
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7fe ff6d 	bl	800babe <USBD_SetClassConfig>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00f      	beq.n	800cc0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cbee:	6839      	ldr	r1, [r7, #0]
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 f918 	bl	800ce26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f7fe ff79 	bl	800baf6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2202      	movs	r2, #2
 800cc08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cc0c:	e014      	b.n	800cc38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f9d4 	bl	800cfbc <USBD_CtlSendStatus>
      break;
 800cc14:	e010      	b.n	800cc38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f9d0 	bl	800cfbc <USBD_CtlSendStatus>
      break;
 800cc1c:	e00c      	b.n	800cc38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f900 	bl	800ce26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc26:	4b07      	ldr	r3, [pc, #28]	; (800cc44 <USBD_SetConfig+0x150>)
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7fe ff62 	bl	800baf6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cc32:	2303      	movs	r3, #3
 800cc34:	73fb      	strb	r3, [r7, #15]
      break;
 800cc36:	bf00      	nop
  }

  return ret;
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	2000c6a0 	.word	0x2000c6a0

0800cc48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	88db      	ldrh	r3, [r3, #6]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d004      	beq.n	800cc64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 f8e2 	bl	800ce26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc62:	e023      	b.n	800ccac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	dc02      	bgt.n	800cc76 <USBD_GetConfig+0x2e>
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	dc03      	bgt.n	800cc7c <USBD_GetConfig+0x34>
 800cc74:	e015      	b.n	800cca2 <USBD_GetConfig+0x5a>
 800cc76:	2b03      	cmp	r3, #3
 800cc78:	d00b      	beq.n	800cc92 <USBD_GetConfig+0x4a>
 800cc7a:	e012      	b.n	800cca2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	3308      	adds	r3, #8
 800cc86:	2201      	movs	r2, #1
 800cc88:	4619      	mov	r1, r3
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f93c 	bl	800cf08 <USBD_CtlSendData>
        break;
 800cc90:	e00c      	b.n	800ccac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	3304      	adds	r3, #4
 800cc96:	2201      	movs	r2, #1
 800cc98:	4619      	mov	r1, r3
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f934 	bl	800cf08 <USBD_CtlSendData>
        break;
 800cca0:	e004      	b.n	800ccac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 f8be 	bl	800ce26 <USBD_CtlError>
        break;
 800ccaa:	bf00      	nop
}
 800ccac:	bf00      	nop
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d81e      	bhi.n	800cd0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	88db      	ldrh	r3, [r3, #6]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d004      	beq.n	800ccde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f8a5 	bl	800ce26 <USBD_CtlError>
        break;
 800ccdc:	e01a      	b.n	800cd14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2201      	movs	r2, #1
 800cce2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d005      	beq.n	800ccfa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	f043 0202 	orr.w	r2, r3, #2
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	330c      	adds	r3, #12
 800ccfe:	2202      	movs	r2, #2
 800cd00:	4619      	mov	r1, r3
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f900 	bl	800cf08 <USBD_CtlSendData>
      break;
 800cd08:	e004      	b.n	800cd14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cd0a:	6839      	ldr	r1, [r7, #0]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f88a 	bl	800ce26 <USBD_CtlError>
      break;
 800cd12:	bf00      	nop
  }
}
 800cd14:	bf00      	nop
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	885b      	ldrh	r3, [r3, #2]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d107      	bne.n	800cd3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 f940 	bl	800cfbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cd3c:	e013      	b.n	800cd66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	885b      	ldrh	r3, [r3, #2]
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d10b      	bne.n	800cd5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	889b      	ldrh	r3, [r3, #4]
 800cd4a:	0a1b      	lsrs	r3, r3, #8
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	b2da      	uxtb	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 f930 	bl	800cfbc <USBD_CtlSendStatus>
}
 800cd5c:	e003      	b.n	800cd66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd5e:	6839      	ldr	r1, [r7, #0]
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 f860 	bl	800ce26 <USBD_CtlError>
}
 800cd66:	bf00      	nop
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	3b01      	subs	r3, #1
 800cd82:	2b02      	cmp	r3, #2
 800cd84:	d80b      	bhi.n	800cd9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	885b      	ldrh	r3, [r3, #2]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d10c      	bne.n	800cda8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f910 	bl	800cfbc <USBD_CtlSendStatus>
      }
      break;
 800cd9c:	e004      	b.n	800cda8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 f840 	bl	800ce26 <USBD_CtlError>
      break;
 800cda6:	e000      	b.n	800cdaa <USBD_ClrFeature+0x3c>
      break;
 800cda8:	bf00      	nop
  }
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	781a      	ldrb	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	781a      	ldrb	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f7ff fa17 	bl	800c210 <SWAPBYTE>
 800cde2:	4603      	mov	r3, r0
 800cde4:	461a      	mov	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	3301      	adds	r3, #1
 800cdee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f7ff fa0a 	bl	800c210 <SWAPBYTE>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	461a      	mov	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	3301      	adds	r3, #1
 800ce08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f7ff f9fd 	bl	800c210 <SWAPBYTE>
 800ce16:	4603      	mov	r3, r0
 800ce18:	461a      	mov	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	80da      	strh	r2, [r3, #6]
}
 800ce1e:	bf00      	nop
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b082      	sub	sp, #8
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce30:	2180      	movs	r1, #128	; 0x80
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f003 fd7e 	bl	8010934 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce38:	2100      	movs	r1, #0
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f003 fd7a 	bl	8010934 <USBD_LL_StallEP>
}
 800ce40:	bf00      	nop
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce54:	2300      	movs	r3, #0
 800ce56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d036      	beq.n	800cecc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ce62:	6938      	ldr	r0, [r7, #16]
 800ce64:	f000 f836 	bl	800ced4 <USBD_GetLen>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce76:	7dfb      	ldrb	r3, [r7, #23]
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	7812      	ldrb	r2, [r2, #0]
 800ce80:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
 800ce84:	3301      	adds	r3, #1
 800ce86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	2203      	movs	r2, #3
 800ce90:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce92:	7dfb      	ldrb	r3, [r7, #23]
 800ce94:	3301      	adds	r3, #1
 800ce96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce98:	e013      	b.n	800cec2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	4413      	add	r3, r2
 800cea0:	693a      	ldr	r2, [r7, #16]
 800cea2:	7812      	ldrb	r2, [r2, #0]
 800cea4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	613b      	str	r3, [r7, #16]
    idx++;
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ceb2:	7dfb      	ldrb	r3, [r7, #23]
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	2200      	movs	r2, #0
 800ceba:	701a      	strb	r2, [r3, #0]
    idx++;
 800cebc:	7dfb      	ldrb	r3, [r7, #23]
 800cebe:	3301      	adds	r3, #1
 800cec0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1e7      	bne.n	800ce9a <USBD_GetString+0x52>
 800ceca:	e000      	b.n	800cece <USBD_GetString+0x86>
    return;
 800cecc:	bf00      	nop
  }
}
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cedc:	2300      	movs	r3, #0
 800cede:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cee4:	e005      	b.n	800cef2 <USBD_GetLen+0x1e>
  {
    len++;
 800cee6:	7bfb      	ldrb	r3, [r7, #15]
 800cee8:	3301      	adds	r3, #1
 800ceea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	3301      	adds	r3, #1
 800cef0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1f5      	bne.n	800cee6 <USBD_GetLen+0x12>
  }

  return len;
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3714      	adds	r7, #20
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2202      	movs	r2, #2
 800cf18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	2100      	movs	r1, #0
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f003 fdce 	bl	8010ad0 <USBD_LL_Transmit>

  return USBD_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b084      	sub	sp, #16
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	60f8      	str	r0, [r7, #12]
 800cf46:	60b9      	str	r1, [r7, #8]
 800cf48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	2100      	movs	r1, #0
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f003 fdbd 	bl	8010ad0 <USBD_LL_Transmit>

  return USBD_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2203      	movs	r2, #3
 800cf70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	2100      	movs	r1, #0
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f003 fdd8 	bl	8010b40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	60f8      	str	r0, [r7, #12]
 800cfa2:	60b9      	str	r1, [r7, #8]
 800cfa4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	2100      	movs	r1, #0
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f003 fdc7 	bl	8010b40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2204      	movs	r2, #4
 800cfc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfcc:	2300      	movs	r3, #0
 800cfce:	2200      	movs	r2, #0
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f003 fd7c 	bl	8010ad0 <USBD_LL_Transmit>

  return USBD_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3708      	adds	r7, #8
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b082      	sub	sp, #8
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2205      	movs	r2, #5
 800cfee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cff2:	2300      	movs	r3, #0
 800cff4:	2200      	movs	r2, #0
 800cff6:	2100      	movs	r1, #0
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f003 fda1 	bl	8010b40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	4a08      	ldr	r2, [pc, #32]	; (800d038 <disk_status+0x30>)
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4413      	add	r3, r2
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	79fa      	ldrb	r2, [r7, #7]
 800d020:	4905      	ldr	r1, [pc, #20]	; (800d038 <disk_status+0x30>)
 800d022:	440a      	add	r2, r1
 800d024:	7a12      	ldrb	r2, [r2, #8]
 800d026:	4610      	mov	r0, r2
 800d028:	4798      	blx	r3
 800d02a:	4603      	mov	r3, r0
 800d02c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	2000c6cc 	.word	0x2000c6cc

0800d03c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d046:	2300      	movs	r3, #0
 800d048:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d04a:	79fb      	ldrb	r3, [r7, #7]
 800d04c:	4a0d      	ldr	r2, [pc, #52]	; (800d084 <disk_initialize+0x48>)
 800d04e:	5cd3      	ldrb	r3, [r2, r3]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d111      	bne.n	800d078 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d054:	79fb      	ldrb	r3, [r7, #7]
 800d056:	4a0b      	ldr	r2, [pc, #44]	; (800d084 <disk_initialize+0x48>)
 800d058:	2101      	movs	r1, #1
 800d05a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d05c:	79fb      	ldrb	r3, [r7, #7]
 800d05e:	4a09      	ldr	r2, [pc, #36]	; (800d084 <disk_initialize+0x48>)
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	79fa      	ldrb	r2, [r7, #7]
 800d06a:	4906      	ldr	r1, [pc, #24]	; (800d084 <disk_initialize+0x48>)
 800d06c:	440a      	add	r2, r1
 800d06e:	7a12      	ldrb	r2, [r2, #8]
 800d070:	4610      	mov	r0, r2
 800d072:	4798      	blx	r3
 800d074:	4603      	mov	r3, r0
 800d076:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d078:	7bfb      	ldrb	r3, [r7, #15]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	2000c6cc 	.word	0x2000c6cc

0800d088 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d088:	b590      	push	{r4, r7, lr}
 800d08a:	b087      	sub	sp, #28
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60b9      	str	r1, [r7, #8]
 800d090:	607a      	str	r2, [r7, #4]
 800d092:	603b      	str	r3, [r7, #0]
 800d094:	4603      	mov	r3, r0
 800d096:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	4a0a      	ldr	r2, [pc, #40]	; (800d0c4 <disk_read+0x3c>)
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	4413      	add	r3, r2
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	689c      	ldr	r4, [r3, #8]
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
 800d0a6:	4a07      	ldr	r2, [pc, #28]	; (800d0c4 <disk_read+0x3c>)
 800d0a8:	4413      	add	r3, r2
 800d0aa:	7a18      	ldrb	r0, [r3, #8]
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	68b9      	ldr	r1, [r7, #8]
 800d0b2:	47a0      	blx	r4
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	371c      	adds	r7, #28
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd90      	pop	{r4, r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	2000c6cc 	.word	0x2000c6cc

0800d0c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d0c8:	b590      	push	{r4, r7, lr}
 800d0ca:	b087      	sub	sp, #28
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60b9      	str	r1, [r7, #8]
 800d0d0:	607a      	str	r2, [r7, #4]
 800d0d2:	603b      	str	r3, [r7, #0]
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d0d8:	7bfb      	ldrb	r3, [r7, #15]
 800d0da:	4a0a      	ldr	r2, [pc, #40]	; (800d104 <disk_write+0x3c>)
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	4413      	add	r3, r2
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	68dc      	ldr	r4, [r3, #12]
 800d0e4:	7bfb      	ldrb	r3, [r7, #15]
 800d0e6:	4a07      	ldr	r2, [pc, #28]	; (800d104 <disk_write+0x3c>)
 800d0e8:	4413      	add	r3, r2
 800d0ea:	7a18      	ldrb	r0, [r3, #8]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	68b9      	ldr	r1, [r7, #8]
 800d0f2:	47a0      	blx	r4
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	371c      	adds	r7, #28
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd90      	pop	{r4, r7, pc}
 800d102:	bf00      	nop
 800d104:	2000c6cc 	.word	0x2000c6cc

0800d108 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b084      	sub	sp, #16
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	4603      	mov	r3, r0
 800d110:	603a      	str	r2, [r7, #0]
 800d112:	71fb      	strb	r3, [r7, #7]
 800d114:	460b      	mov	r3, r1
 800d116:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d118:	79fb      	ldrb	r3, [r7, #7]
 800d11a:	4a09      	ldr	r2, [pc, #36]	; (800d140 <disk_ioctl+0x38>)
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	4413      	add	r3, r2
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	79fa      	ldrb	r2, [r7, #7]
 800d126:	4906      	ldr	r1, [pc, #24]	; (800d140 <disk_ioctl+0x38>)
 800d128:	440a      	add	r2, r1
 800d12a:	7a10      	ldrb	r0, [r2, #8]
 800d12c:	79b9      	ldrb	r1, [r7, #6]
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	4798      	blx	r3
 800d132:	4603      	mov	r3, r0
 800d134:	73fb      	strb	r3, [r7, #15]
  return res;
 800d136:	7bfb      	ldrb	r3, [r7, #15]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	2000c6cc 	.word	0x2000c6cc

0800d144 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	3301      	adds	r3, #1
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d154:	89fb      	ldrh	r3, [r7, #14]
 800d156:	021b      	lsls	r3, r3, #8
 800d158:	b21a      	sxth	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	b21b      	sxth	r3, r3
 800d160:	4313      	orrs	r3, r2
 800d162:	b21b      	sxth	r3, r3
 800d164:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d166:	89fb      	ldrh	r3, [r7, #14]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	3303      	adds	r3, #3
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	021b      	lsls	r3, r3, #8
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	3202      	adds	r2, #2
 800d18c:	7812      	ldrb	r2, [r2, #0]
 800d18e:	4313      	orrs	r3, r2
 800d190:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	021b      	lsls	r3, r3, #8
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	3201      	adds	r2, #1
 800d19a:	7812      	ldrb	r2, [r2, #0]
 800d19c:	4313      	orrs	r3, r2
 800d19e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	021b      	lsls	r3, r3, #8
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	7812      	ldrb	r2, [r2, #0]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	60fb      	str	r3, [r7, #12]
	return rv;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3714      	adds	r7, #20
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b083      	sub	sp, #12
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	1c5a      	adds	r2, r3, #1
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	887a      	ldrh	r2, [r7, #2]
 800d1ce:	b2d2      	uxtb	r2, r2
 800d1d0:	701a      	strb	r2, [r3, #0]
 800d1d2:	887b      	ldrh	r3, [r7, #2]
 800d1d4:	0a1b      	lsrs	r3, r3, #8
 800d1d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	1c5a      	adds	r2, r3, #1
 800d1dc:	607a      	str	r2, [r7, #4]
 800d1de:	887a      	ldrh	r2, [r7, #2]
 800d1e0:	b2d2      	uxtb	r2, r2
 800d1e2:	701a      	strb	r2, [r3, #0]
}
 800d1e4:	bf00      	nop
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	1c5a      	adds	r2, r3, #1
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	b2d2      	uxtb	r2, r2
 800d204:	701a      	strb	r2, [r3, #0]
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	0a1b      	lsrs	r3, r3, #8
 800d20a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	607a      	str	r2, [r7, #4]
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	b2d2      	uxtb	r2, r2
 800d216:	701a      	strb	r2, [r3, #0]
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	0a1b      	lsrs	r3, r3, #8
 800d21c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	1c5a      	adds	r2, r3, #1
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	b2d2      	uxtb	r2, r2
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	0a1b      	lsrs	r3, r3, #8
 800d22e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	1c5a      	adds	r2, r3, #1
 800d234:	607a      	str	r2, [r7, #4]
 800d236:	683a      	ldr	r2, [r7, #0]
 800d238:	b2d2      	uxtb	r2, r2
 800d23a:	701a      	strb	r2, [r3, #0]
}
 800d23c:	bf00      	nop
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d248:	b480      	push	{r7}
 800d24a:	b087      	sub	sp, #28
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00d      	beq.n	800d27e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	1c53      	adds	r3, r2, #1
 800d266:	613b      	str	r3, [r7, #16]
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	1c59      	adds	r1, r3, #1
 800d26c:	6179      	str	r1, [r7, #20]
 800d26e:	7812      	ldrb	r2, [r2, #0]
 800d270:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	3b01      	subs	r3, #1
 800d276:	607b      	str	r3, [r7, #4]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1f1      	bne.n	800d262 <mem_cpy+0x1a>
	}
}
 800d27e:	bf00      	nop
 800d280:	371c      	adds	r7, #28
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d28a:	b480      	push	{r7}
 800d28c:	b087      	sub	sp, #28
 800d28e:	af00      	add	r7, sp, #0
 800d290:	60f8      	str	r0, [r7, #12]
 800d292:	60b9      	str	r1, [r7, #8]
 800d294:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	1c5a      	adds	r2, r3, #1
 800d29e:	617a      	str	r2, [r7, #20]
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	b2d2      	uxtb	r2, r2
 800d2a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	607b      	str	r3, [r7, #4]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1f3      	bne.n	800d29a <mem_set+0x10>
}
 800d2b2:	bf00      	nop
 800d2b4:	bf00      	nop
 800d2b6:	371c      	adds	r7, #28
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr

0800d2c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d2c0:	b480      	push	{r7}
 800d2c2:	b089      	sub	sp, #36	; 0x24
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	61fb      	str	r3, [r7, #28]
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	1c5a      	adds	r2, r3, #1
 800d2dc:	61fa      	str	r2, [r7, #28]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	1c5a      	adds	r2, r3, #1
 800d2e6:	61ba      	str	r2, [r7, #24]
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	1acb      	subs	r3, r1, r3
 800d2ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	607b      	str	r3, [r7, #4]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d002      	beq.n	800d300 <mem_cmp+0x40>
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d0eb      	beq.n	800d2d8 <mem_cmp+0x18>

	return r;
 800d300:	697b      	ldr	r3, [r7, #20]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3724      	adds	r7, #36	; 0x24
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr

0800d30e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d30e:	b480      	push	{r7}
 800d310:	b083      	sub	sp, #12
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d318:	e002      	b.n	800d320 <chk_chr+0x12>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	3301      	adds	r3, #1
 800d31e:	607b      	str	r3, [r7, #4]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d005      	beq.n	800d334 <chk_chr+0x26>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	461a      	mov	r2, r3
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	4293      	cmp	r3, r2
 800d332:	d1f2      	bne.n	800d31a <chk_chr+0xc>
	return *str;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	781b      	ldrb	r3, [r3, #0]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d34e:	2300      	movs	r3, #0
 800d350:	60bb      	str	r3, [r7, #8]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	60fb      	str	r3, [r7, #12]
 800d356:	e029      	b.n	800d3ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d358:	4a27      	ldr	r2, [pc, #156]	; (800d3f8 <chk_lock+0xb4>)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	011b      	lsls	r3, r3, #4
 800d35e:	4413      	add	r3, r2
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d01d      	beq.n	800d3a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d366:	4a24      	ldr	r2, [pc, #144]	; (800d3f8 <chk_lock+0xb4>)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	011b      	lsls	r3, r3, #4
 800d36c:	4413      	add	r3, r2
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d116      	bne.n	800d3a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d378:	4a1f      	ldr	r2, [pc, #124]	; (800d3f8 <chk_lock+0xb4>)
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	011b      	lsls	r3, r3, #4
 800d37e:	4413      	add	r3, r2
 800d380:	3304      	adds	r3, #4
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d388:	429a      	cmp	r2, r3
 800d38a:	d10c      	bne.n	800d3a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d38c:	4a1a      	ldr	r2, [pc, #104]	; (800d3f8 <chk_lock+0xb4>)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	011b      	lsls	r3, r3, #4
 800d392:	4413      	add	r3, r2
 800d394:	3308      	adds	r3, #8
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d102      	bne.n	800d3a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d3a0:	e007      	b.n	800d3b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	60fb      	str	r3, [r7, #12]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d9d2      	bls.n	800d358 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d109      	bne.n	800d3cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d102      	bne.n	800d3c4 <chk_lock+0x80>
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d101      	bne.n	800d3c8 <chk_lock+0x84>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	e010      	b.n	800d3ea <chk_lock+0xa6>
 800d3c8:	2312      	movs	r3, #18
 800d3ca:	e00e      	b.n	800d3ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d108      	bne.n	800d3e4 <chk_lock+0xa0>
 800d3d2:	4a09      	ldr	r2, [pc, #36]	; (800d3f8 <chk_lock+0xb4>)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	4413      	add	r3, r2
 800d3da:	330c      	adds	r3, #12
 800d3dc:	881b      	ldrh	r3, [r3, #0]
 800d3de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3e2:	d101      	bne.n	800d3e8 <chk_lock+0xa4>
 800d3e4:	2310      	movs	r3, #16
 800d3e6:	e000      	b.n	800d3ea <chk_lock+0xa6>
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	2000c6ac 	.word	0x2000c6ac

0800d3fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d402:	2300      	movs	r3, #0
 800d404:	607b      	str	r3, [r7, #4]
 800d406:	e002      	b.n	800d40e <enq_lock+0x12>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	3301      	adds	r3, #1
 800d40c:	607b      	str	r3, [r7, #4]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d806      	bhi.n	800d422 <enq_lock+0x26>
 800d414:	4a09      	ldr	r2, [pc, #36]	; (800d43c <enq_lock+0x40>)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	011b      	lsls	r3, r3, #4
 800d41a:	4413      	add	r3, r2
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1f2      	bne.n	800d408 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b02      	cmp	r3, #2
 800d426:	bf14      	ite	ne
 800d428:	2301      	movne	r3, #1
 800d42a:	2300      	moveq	r3, #0
 800d42c:	b2db      	uxtb	r3, r3
}
 800d42e:	4618      	mov	r0, r3
 800d430:	370c      	adds	r7, #12
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	2000c6ac 	.word	0x2000c6ac

0800d440 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d440:	b480      	push	{r7}
 800d442:	b085      	sub	sp, #20
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d44a:	2300      	movs	r3, #0
 800d44c:	60fb      	str	r3, [r7, #12]
 800d44e:	e01f      	b.n	800d490 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d450:	4a41      	ldr	r2, [pc, #260]	; (800d558 <inc_lock+0x118>)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	011b      	lsls	r3, r3, #4
 800d456:	4413      	add	r3, r2
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d113      	bne.n	800d48a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d462:	4a3d      	ldr	r2, [pc, #244]	; (800d558 <inc_lock+0x118>)
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	011b      	lsls	r3, r3, #4
 800d468:	4413      	add	r3, r2
 800d46a:	3304      	adds	r3, #4
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d472:	429a      	cmp	r2, r3
 800d474:	d109      	bne.n	800d48a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d476:	4a38      	ldr	r2, [pc, #224]	; (800d558 <inc_lock+0x118>)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	4413      	add	r3, r2
 800d47e:	3308      	adds	r3, #8
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d486:	429a      	cmp	r2, r3
 800d488:	d006      	beq.n	800d498 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3301      	adds	r3, #1
 800d48e:	60fb      	str	r3, [r7, #12]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2b01      	cmp	r3, #1
 800d494:	d9dc      	bls.n	800d450 <inc_lock+0x10>
 800d496:	e000      	b.n	800d49a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d498:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d132      	bne.n	800d506 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	e002      	b.n	800d4ac <inc_lock+0x6c>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	60fb      	str	r3, [r7, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d806      	bhi.n	800d4c0 <inc_lock+0x80>
 800d4b2:	4a29      	ldr	r2, [pc, #164]	; (800d558 <inc_lock+0x118>)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	4413      	add	r3, r2
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1f2      	bne.n	800d4a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d101      	bne.n	800d4ca <inc_lock+0x8a>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	e040      	b.n	800d54c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	4922      	ldr	r1, [pc, #136]	; (800d558 <inc_lock+0x118>)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	011b      	lsls	r3, r3, #4
 800d4d4:	440b      	add	r3, r1
 800d4d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	689a      	ldr	r2, [r3, #8]
 800d4dc:	491e      	ldr	r1, [pc, #120]	; (800d558 <inc_lock+0x118>)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	011b      	lsls	r3, r3, #4
 800d4e2:	440b      	add	r3, r1
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	695a      	ldr	r2, [r3, #20]
 800d4ec:	491a      	ldr	r1, [pc, #104]	; (800d558 <inc_lock+0x118>)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	011b      	lsls	r3, r3, #4
 800d4f2:	440b      	add	r3, r1
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d4f8:	4a17      	ldr	r2, [pc, #92]	; (800d558 <inc_lock+0x118>)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	4413      	add	r3, r2
 800d500:	330c      	adds	r3, #12
 800d502:	2200      	movs	r2, #0
 800d504:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d009      	beq.n	800d520 <inc_lock+0xe0>
 800d50c:	4a12      	ldr	r2, [pc, #72]	; (800d558 <inc_lock+0x118>)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	011b      	lsls	r3, r3, #4
 800d512:	4413      	add	r3, r2
 800d514:	330c      	adds	r3, #12
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <inc_lock+0xe0>
 800d51c:	2300      	movs	r3, #0
 800d51e:	e015      	b.n	800d54c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d108      	bne.n	800d538 <inc_lock+0xf8>
 800d526:	4a0c      	ldr	r2, [pc, #48]	; (800d558 <inc_lock+0x118>)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	011b      	lsls	r3, r3, #4
 800d52c:	4413      	add	r3, r2
 800d52e:	330c      	adds	r3, #12
 800d530:	881b      	ldrh	r3, [r3, #0]
 800d532:	3301      	adds	r3, #1
 800d534:	b29a      	uxth	r2, r3
 800d536:	e001      	b.n	800d53c <inc_lock+0xfc>
 800d538:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d53c:	4906      	ldr	r1, [pc, #24]	; (800d558 <inc_lock+0x118>)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	011b      	lsls	r3, r3, #4
 800d542:	440b      	add	r3, r1
 800d544:	330c      	adds	r3, #12
 800d546:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	3301      	adds	r3, #1
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr
 800d558:	2000c6ac 	.word	0x2000c6ac

0800d55c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d564:	2300      	movs	r3, #0
 800d566:	60fb      	str	r3, [r7, #12]
 800d568:	e010      	b.n	800d58c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d56a:	4a0d      	ldr	r2, [pc, #52]	; (800d5a0 <clear_lock+0x44>)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	011b      	lsls	r3, r3, #4
 800d570:	4413      	add	r3, r2
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	429a      	cmp	r2, r3
 800d578:	d105      	bne.n	800d586 <clear_lock+0x2a>
 800d57a:	4a09      	ldr	r2, [pc, #36]	; (800d5a0 <clear_lock+0x44>)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	011b      	lsls	r3, r3, #4
 800d580:	4413      	add	r3, r2
 800d582:	2200      	movs	r2, #0
 800d584:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	3301      	adds	r3, #1
 800d58a:	60fb      	str	r3, [r7, #12]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d9eb      	bls.n	800d56a <clear_lock+0xe>
	}
}
 800d592:	bf00      	nop
 800d594:	bf00      	nop
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr
 800d5a0:	2000c6ac 	.word	0x2000c6ac

0800d5a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b086      	sub	sp, #24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	78db      	ldrb	r3, [r3, #3]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d034      	beq.n	800d622 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	7858      	ldrb	r0, [r3, #1]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	697a      	ldr	r2, [r7, #20]
 800d5cc:	f7ff fd7c 	bl	800d0c8 <disk_write>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d002      	beq.n	800d5dc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	73fb      	strb	r3, [r7, #15]
 800d5da:	e022      	b.n	800d622 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a1b      	ldr	r3, [r3, #32]
 800d5e6:	697a      	ldr	r2, [r7, #20]
 800d5e8:	1ad2      	subs	r2, r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	699b      	ldr	r3, [r3, #24]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d217      	bcs.n	800d622 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	789b      	ldrb	r3, [r3, #2]
 800d5f6:	613b      	str	r3, [r7, #16]
 800d5f8:	e010      	b.n	800d61c <sync_window+0x78>
					wsect += fs->fsize;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	697a      	ldr	r2, [r7, #20]
 800d600:	4413      	add	r3, r2
 800d602:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	7858      	ldrb	r0, [r3, #1]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d60e:	2301      	movs	r3, #1
 800d610:	697a      	ldr	r2, [r7, #20]
 800d612:	f7ff fd59 	bl	800d0c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	3b01      	subs	r3, #1
 800d61a:	613b      	str	r3, [r7, #16]
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d8eb      	bhi.n	800d5fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d622:	7bfb      	ldrb	r3, [r7, #15]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3718      	adds	r7, #24
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	429a      	cmp	r2, r3
 800d642:	d01b      	beq.n	800d67c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7ff ffad 	bl	800d5a4 <sync_window>
 800d64a:	4603      	mov	r3, r0
 800d64c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d113      	bne.n	800d67c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	7858      	ldrb	r0, [r3, #1]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d65e:	2301      	movs	r3, #1
 800d660:	683a      	ldr	r2, [r7, #0]
 800d662:	f7ff fd11 	bl	800d088 <disk_read>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d004      	beq.n	800d676 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d66c:	f04f 33ff 	mov.w	r3, #4294967295
 800d670:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d672:	2301      	movs	r3, #1
 800d674:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	683a      	ldr	r2, [r7, #0]
 800d67a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
	...

0800d688 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7ff ff87 	bl	800d5a4 <sync_window>
 800d696:	4603      	mov	r3, r0
 800d698:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d69a:	7bfb      	ldrb	r3, [r7, #15]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d158      	bne.n	800d752 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d148      	bne.n	800d73a <sync_fs+0xb2>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	791b      	ldrb	r3, [r3, #4]
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d144      	bne.n	800d73a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	3330      	adds	r3, #48	; 0x30
 800d6b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff fde5 	bl	800d28a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	3330      	adds	r3, #48	; 0x30
 800d6c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6c8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff fd74 	bl	800d1ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	3330      	adds	r3, #48	; 0x30
 800d6d6:	4921      	ldr	r1, [pc, #132]	; (800d75c <sync_fs+0xd4>)
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7ff fd89 	bl	800d1f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	3330      	adds	r3, #48	; 0x30
 800d6e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d6e6:	491e      	ldr	r1, [pc, #120]	; (800d760 <sync_fs+0xd8>)
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7ff fd81 	bl	800d1f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	3330      	adds	r3, #48	; 0x30
 800d6f2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	f7ff fd77 	bl	800d1f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	3330      	adds	r3, #48	; 0x30
 800d706:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	4619      	mov	r1, r3
 800d710:	4610      	mov	r0, r2
 800d712:	f7ff fd6d 	bl	800d1f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	69db      	ldr	r3, [r3, #28]
 800d71a:	1c5a      	adds	r2, r3, #1
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	7858      	ldrb	r0, [r3, #1]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d72e:	2301      	movs	r3, #1
 800d730:	f7ff fcca 	bl	800d0c8 <disk_write>
			fs->fsi_flag = 0;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	785b      	ldrb	r3, [r3, #1]
 800d73e:	2200      	movs	r2, #0
 800d740:	2100      	movs	r1, #0
 800d742:	4618      	mov	r0, r3
 800d744:	f7ff fce0 	bl	800d108 <disk_ioctl>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <sync_fs+0xca>
 800d74e:	2301      	movs	r3, #1
 800d750:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d752:	7bfb      	ldrb	r3, [r7, #15]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	41615252 	.word	0x41615252
 800d760:	61417272 	.word	0x61417272

0800d764 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d764:	b480      	push	{r7}
 800d766:	b083      	sub	sp, #12
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	3b02      	subs	r3, #2
 800d772:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	3b02      	subs	r3, #2
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d301      	bcc.n	800d784 <clust2sect+0x20>
 800d780:	2300      	movs	r3, #0
 800d782:	e008      	b.n	800d796 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	895b      	ldrh	r3, [r3, #10]
 800d788:	461a      	mov	r2, r3
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	fb03 f202 	mul.w	r2, r3, r2
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d794:	4413      	add	r3, r2
}
 800d796:	4618      	mov	r0, r3
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b086      	sub	sp, #24
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d904      	bls.n	800d7c2 <get_fat+0x20>
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	695b      	ldr	r3, [r3, #20]
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d302      	bcc.n	800d7c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	617b      	str	r3, [r7, #20]
 800d7c6:	e08f      	b.n	800d8e8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	d062      	beq.n	800d89c <get_fat+0xfa>
 800d7d6:	2b03      	cmp	r3, #3
 800d7d8:	dc7c      	bgt.n	800d8d4 <get_fat+0x132>
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d002      	beq.n	800d7e4 <get_fat+0x42>
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d042      	beq.n	800d868 <get_fat+0xc6>
 800d7e2:	e077      	b.n	800d8d4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	085b      	lsrs	r3, r3, #1
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	6a1a      	ldr	r2, [r3, #32]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	0a5b      	lsrs	r3, r3, #9
 800d7fa:	4413      	add	r3, r2
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6938      	ldr	r0, [r7, #16]
 800d800:	f7ff ff14 	bl	800d62c <move_window>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d167      	bne.n	800d8da <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	60fa      	str	r2, [r7, #12]
 800d810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d814:	693a      	ldr	r2, [r7, #16]
 800d816:	4413      	add	r3, r2
 800d818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d81c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	6a1a      	ldr	r2, [r3, #32]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	0a5b      	lsrs	r3, r3, #9
 800d826:	4413      	add	r3, r2
 800d828:	4619      	mov	r1, r3
 800d82a:	6938      	ldr	r0, [r7, #16]
 800d82c:	f7ff fefe 	bl	800d62c <move_window>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d153      	bne.n	800d8de <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d83c:	693a      	ldr	r2, [r7, #16]
 800d83e:	4413      	add	r3, r2
 800d840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d844:	021b      	lsls	r3, r3, #8
 800d846:	461a      	mov	r2, r3
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	4313      	orrs	r3, r2
 800d84c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <get_fat+0xbc>
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	091b      	lsrs	r3, r3, #4
 800d85c:	e002      	b.n	800d864 <get_fat+0xc2>
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d864:	617b      	str	r3, [r7, #20]
			break;
 800d866:	e03f      	b.n	800d8e8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	6a1a      	ldr	r2, [r3, #32]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	0a1b      	lsrs	r3, r3, #8
 800d870:	4413      	add	r3, r2
 800d872:	4619      	mov	r1, r3
 800d874:	6938      	ldr	r0, [r7, #16]
 800d876:	f7ff fed9 	bl	800d62c <move_window>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d130      	bne.n	800d8e2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d88e:	4413      	add	r3, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff fc57 	bl	800d144 <ld_word>
 800d896:	4603      	mov	r3, r0
 800d898:	617b      	str	r3, [r7, #20]
			break;
 800d89a:	e025      	b.n	800d8e8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	6a1a      	ldr	r2, [r3, #32]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	09db      	lsrs	r3, r3, #7
 800d8a4:	4413      	add	r3, r2
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6938      	ldr	r0, [r7, #16]
 800d8aa:	f7ff febf 	bl	800d62c <move_window>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d118      	bne.n	800d8e6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d8c2:	4413      	add	r3, r2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7ff fc55 	bl	800d174 <ld_dword>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d8d0:	617b      	str	r3, [r7, #20]
			break;
 800d8d2:	e009      	b.n	800d8e8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	617b      	str	r3, [r7, #20]
 800d8d8:	e006      	b.n	800d8e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8da:	bf00      	nop
 800d8dc:	e004      	b.n	800d8e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8de:	bf00      	nop
 800d8e0:	e002      	b.n	800d8e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d8e2:	bf00      	nop
 800d8e4:	e000      	b.n	800d8e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d8e6:	bf00      	nop
		}
	}

	return val;
 800d8e8:	697b      	ldr	r3, [r7, #20]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3718      	adds	r7, #24
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d8f2:	b590      	push	{r4, r7, lr}
 800d8f4:	b089      	sub	sp, #36	; 0x24
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	60f8      	str	r0, [r7, #12]
 800d8fa:	60b9      	str	r1, [r7, #8]
 800d8fc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d8fe:	2302      	movs	r3, #2
 800d900:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	2b01      	cmp	r3, #1
 800d906:	f240 80d9 	bls.w	800dabc <put_fat+0x1ca>
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	695b      	ldr	r3, [r3, #20]
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	429a      	cmp	r2, r3
 800d912:	f080 80d3 	bcs.w	800dabc <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	f000 8096 	beq.w	800da4c <put_fat+0x15a>
 800d920:	2b03      	cmp	r3, #3
 800d922:	f300 80cb 	bgt.w	800dabc <put_fat+0x1ca>
 800d926:	2b01      	cmp	r3, #1
 800d928:	d002      	beq.n	800d930 <put_fat+0x3e>
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d06e      	beq.n	800da0c <put_fat+0x11a>
 800d92e:	e0c5      	b.n	800dabc <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	61bb      	str	r3, [r7, #24]
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	085b      	lsrs	r3, r3, #1
 800d938:	69ba      	ldr	r2, [r7, #24]
 800d93a:	4413      	add	r3, r2
 800d93c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6a1a      	ldr	r2, [r3, #32]
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	0a5b      	lsrs	r3, r3, #9
 800d946:	4413      	add	r3, r2
 800d948:	4619      	mov	r1, r3
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f7ff fe6e 	bl	800d62c <move_window>
 800d950:	4603      	mov	r3, r0
 800d952:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d954:	7ffb      	ldrb	r3, [r7, #31]
 800d956:	2b00      	cmp	r3, #0
 800d958:	f040 80a9 	bne.w	800daae <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	1c59      	adds	r1, r3, #1
 800d966:	61b9      	str	r1, [r7, #24]
 800d968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d96c:	4413      	add	r3, r2
 800d96e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	f003 0301 	and.w	r3, r3, #1
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00d      	beq.n	800d996 <put_fat+0xa4>
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	b25b      	sxtb	r3, r3
 800d980:	f003 030f 	and.w	r3, r3, #15
 800d984:	b25a      	sxtb	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	011b      	lsls	r3, r3, #4
 800d98c:	b25b      	sxtb	r3, r3
 800d98e:	4313      	orrs	r3, r2
 800d990:	b25b      	sxtb	r3, r3
 800d992:	b2db      	uxtb	r3, r3
 800d994:	e001      	b.n	800d99a <put_fat+0xa8>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6a1a      	ldr	r2, [r3, #32]
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	0a5b      	lsrs	r3, r3, #9
 800d9ac:	4413      	add	r3, r2
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f7ff fe3b 	bl	800d62c <move_window>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9ba:	7ffb      	ldrb	r3, [r7, #31]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d178      	bne.n	800dab2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9cc:	4413      	add	r3, r2
 800d9ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d003      	beq.n	800d9e2 <put_fat+0xf0>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	091b      	lsrs	r3, r3, #4
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	e00e      	b.n	800da00 <put_fat+0x10e>
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	b25b      	sxtb	r3, r3
 800d9e8:	f023 030f 	bic.w	r3, r3, #15
 800d9ec:	b25a      	sxtb	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	0a1b      	lsrs	r3, r3, #8
 800d9f2:	b25b      	sxtb	r3, r3
 800d9f4:	f003 030f 	and.w	r3, r3, #15
 800d9f8:	b25b      	sxtb	r3, r3
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	b25b      	sxtb	r3, r3
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2201      	movs	r2, #1
 800da08:	70da      	strb	r2, [r3, #3]
			break;
 800da0a:	e057      	b.n	800dabc <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6a1a      	ldr	r2, [r3, #32]
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	0a1b      	lsrs	r3, r3, #8
 800da14:	4413      	add	r3, r2
 800da16:	4619      	mov	r1, r3
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7ff fe07 	bl	800d62c <move_window>
 800da1e:	4603      	mov	r3, r0
 800da20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da22:	7ffb      	ldrb	r3, [r7, #31]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d146      	bne.n	800dab6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	005b      	lsls	r3, r3, #1
 800da32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800da36:	4413      	add	r3, r2
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	b292      	uxth	r2, r2
 800da3c:	4611      	mov	r1, r2
 800da3e:	4618      	mov	r0, r3
 800da40:	f7ff fbbb 	bl	800d1ba <st_word>
			fs->wflag = 1;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2201      	movs	r2, #1
 800da48:	70da      	strb	r2, [r3, #3]
			break;
 800da4a:	e037      	b.n	800dabc <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	6a1a      	ldr	r2, [r3, #32]
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	09db      	lsrs	r3, r3, #7
 800da54:	4413      	add	r3, r2
 800da56:	4619      	mov	r1, r3
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7ff fde7 	bl	800d62c <move_window>
 800da5e:	4603      	mov	r3, r0
 800da60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da62:	7ffb      	ldrb	r3, [r7, #31]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d128      	bne.n	800daba <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800da7c:	4413      	add	r3, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff fb78 	bl	800d174 <ld_dword>
 800da84:	4603      	mov	r3, r0
 800da86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800da8a:	4323      	orrs	r3, r4
 800da8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800da9c:	4413      	add	r3, r2
 800da9e:	6879      	ldr	r1, [r7, #4]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff fba5 	bl	800d1f0 <st_dword>
			fs->wflag = 1;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2201      	movs	r2, #1
 800daaa:	70da      	strb	r2, [r3, #3]
			break;
 800daac:	e006      	b.n	800dabc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800daae:	bf00      	nop
 800dab0:	e004      	b.n	800dabc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800dab2:	bf00      	nop
 800dab4:	e002      	b.n	800dabc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800dab6:	bf00      	nop
 800dab8:	e000      	b.n	800dabc <put_fat+0x1ca>
			if (res != FR_OK) break;
 800daba:	bf00      	nop
		}
	}
	return res;
 800dabc:	7ffb      	ldrb	r3, [r7, #31]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3724      	adds	r7, #36	; 0x24
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd90      	pop	{r4, r7, pc}

0800dac6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b088      	sub	sp, #32
 800daca:	af00      	add	r7, sp, #0
 800dacc:	60f8      	str	r0, [r7, #12]
 800dace:	60b9      	str	r1, [r7, #8]
 800dad0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d904      	bls.n	800daec <remove_chain+0x26>
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	695b      	ldr	r3, [r3, #20]
 800dae6:	68ba      	ldr	r2, [r7, #8]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d301      	bcc.n	800daf0 <remove_chain+0x2a>
 800daec:	2302      	movs	r3, #2
 800daee:	e04b      	b.n	800db88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00c      	beq.n	800db10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800daf6:	f04f 32ff 	mov.w	r2, #4294967295
 800dafa:	6879      	ldr	r1, [r7, #4]
 800dafc:	69b8      	ldr	r0, [r7, #24]
 800dafe:	f7ff fef8 	bl	800d8f2 <put_fat>
 800db02:	4603      	mov	r3, r0
 800db04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800db06:	7ffb      	ldrb	r3, [r7, #31]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d001      	beq.n	800db10 <remove_chain+0x4a>
 800db0c:	7ffb      	ldrb	r3, [r7, #31]
 800db0e:	e03b      	b.n	800db88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800db10:	68b9      	ldr	r1, [r7, #8]
 800db12:	68f8      	ldr	r0, [r7, #12]
 800db14:	f7ff fe45 	bl	800d7a2 <get_fat>
 800db18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d031      	beq.n	800db84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d101      	bne.n	800db2a <remove_chain+0x64>
 800db26:	2302      	movs	r3, #2
 800db28:	e02e      	b.n	800db88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db30:	d101      	bne.n	800db36 <remove_chain+0x70>
 800db32:	2301      	movs	r3, #1
 800db34:	e028      	b.n	800db88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800db36:	2200      	movs	r2, #0
 800db38:	68b9      	ldr	r1, [r7, #8]
 800db3a:	69b8      	ldr	r0, [r7, #24]
 800db3c:	f7ff fed9 	bl	800d8f2 <put_fat>
 800db40:	4603      	mov	r3, r0
 800db42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db44:	7ffb      	ldrb	r3, [r7, #31]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <remove_chain+0x88>
 800db4a:	7ffb      	ldrb	r3, [r7, #31]
 800db4c:	e01c      	b.n	800db88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	691a      	ldr	r2, [r3, #16]
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	695b      	ldr	r3, [r3, #20]
 800db56:	3b02      	subs	r3, #2
 800db58:	429a      	cmp	r2, r3
 800db5a:	d20b      	bcs.n	800db74 <remove_chain+0xae>
			fs->free_clst++;
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	691b      	ldr	r3, [r3, #16]
 800db60:	1c5a      	adds	r2, r3, #1
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	791b      	ldrb	r3, [r3, #4]
 800db6a:	f043 0301 	orr.w	r3, r3, #1
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	695b      	ldr	r3, [r3, #20]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d3c6      	bcc.n	800db10 <remove_chain+0x4a>
 800db82:	e000      	b.n	800db86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3720      	adds	r7, #32
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b088      	sub	sp, #32
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10d      	bne.n	800dbc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d004      	beq.n	800dbbc <create_chain+0x2c>
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	695b      	ldr	r3, [r3, #20]
 800dbb6:	69ba      	ldr	r2, [r7, #24]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d31b      	bcc.n	800dbf4 <create_chain+0x64>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	61bb      	str	r3, [r7, #24]
 800dbc0:	e018      	b.n	800dbf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dbc2:	6839      	ldr	r1, [r7, #0]
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f7ff fdec 	bl	800d7a2 <get_fat>
 800dbca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d801      	bhi.n	800dbd6 <create_chain+0x46>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e070      	b.n	800dcb8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbdc:	d101      	bne.n	800dbe2 <create_chain+0x52>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	e06a      	b.n	800dcb8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	695b      	ldr	r3, [r3, #20]
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d201      	bcs.n	800dbf0 <create_chain+0x60>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	e063      	b.n	800dcb8 <create_chain+0x128>
		scl = clst;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	695b      	ldr	r3, [r3, #20]
 800dc02:	69fa      	ldr	r2, [r7, #28]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d307      	bcc.n	800dc18 <create_chain+0x88>
				ncl = 2;
 800dc08:	2302      	movs	r3, #2
 800dc0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dc0c:	69fa      	ldr	r2, [r7, #28]
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d901      	bls.n	800dc18 <create_chain+0x88>
 800dc14:	2300      	movs	r3, #0
 800dc16:	e04f      	b.n	800dcb8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dc18:	69f9      	ldr	r1, [r7, #28]
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7ff fdc1 	bl	800d7a2 <get_fat>
 800dc20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00e      	beq.n	800dc46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d003      	beq.n	800dc36 <create_chain+0xa6>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc34:	d101      	bne.n	800dc3a <create_chain+0xaa>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	e03e      	b.n	800dcb8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc3a:	69fa      	ldr	r2, [r7, #28]
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d1da      	bne.n	800dbf8 <create_chain+0x68>
 800dc42:	2300      	movs	r3, #0
 800dc44:	e038      	b.n	800dcb8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc48:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4c:	69f9      	ldr	r1, [r7, #28]
 800dc4e:	6938      	ldr	r0, [r7, #16]
 800dc50:	f7ff fe4f 	bl	800d8f2 <put_fat>
 800dc54:	4603      	mov	r3, r0
 800dc56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc58:	7dfb      	ldrb	r3, [r7, #23]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d109      	bne.n	800dc72 <create_chain+0xe2>
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d006      	beq.n	800dc72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc64:	69fa      	ldr	r2, [r7, #28]
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6938      	ldr	r0, [r7, #16]
 800dc6a:	f7ff fe42 	bl	800d8f2 <put_fat>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc72:	7dfb      	ldrb	r3, [r7, #23]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d116      	bne.n	800dca6 <create_chain+0x116>
		fs->last_clst = ncl;
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	69fa      	ldr	r2, [r7, #28]
 800dc7c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	691a      	ldr	r2, [r3, #16]
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	695b      	ldr	r3, [r3, #20]
 800dc86:	3b02      	subs	r3, #2
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d804      	bhi.n	800dc96 <create_chain+0x106>
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	1e5a      	subs	r2, r3, #1
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	791b      	ldrb	r3, [r3, #4]
 800dc9a:	f043 0301 	orr.w	r3, r3, #1
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	711a      	strb	r2, [r3, #4]
 800dca4:	e007      	b.n	800dcb6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dca6:	7dfb      	ldrb	r3, [r7, #23]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d102      	bne.n	800dcb2 <create_chain+0x122>
 800dcac:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb0:	e000      	b.n	800dcb4 <create_chain+0x124>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dcb6:	69fb      	ldr	r3, [r7, #28]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3720      	adds	r7, #32
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	0a5b      	lsrs	r3, r3, #9
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	8952      	ldrh	r2, [r2, #10]
 800dce0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dce4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	1d1a      	adds	r2, r3, #4
 800dcea:	613a      	str	r2, [r7, #16]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d101      	bne.n	800dcfa <clmt_clust+0x3a>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e010      	b.n	800dd1c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dcfa:	697a      	ldr	r2, [r7, #20]
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d307      	bcc.n	800dd12 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	617b      	str	r3, [r7, #20]
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dd10:	e7e9      	b.n	800dce6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dd12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	4413      	add	r3, r2
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	371c      	adds	r7, #28
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd3e:	d204      	bcs.n	800dd4a <dir_sdi+0x22>
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	f003 031f 	and.w	r3, r3, #31
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d001      	beq.n	800dd4e <dir_sdi+0x26>
		return FR_INT_ERR;
 800dd4a:	2302      	movs	r3, #2
 800dd4c:	e063      	b.n	800de16 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	683a      	ldr	r2, [r7, #0]
 800dd52:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <dir_sdi+0x46>
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d902      	bls.n	800dd6e <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10c      	bne.n	800dd8e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	095b      	lsrs	r3, r3, #5
 800dd78:	693a      	ldr	r2, [r7, #16]
 800dd7a:	8912      	ldrh	r2, [r2, #8]
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d301      	bcc.n	800dd84 <dir_sdi+0x5c>
 800dd80:	2302      	movs	r3, #2
 800dd82:	e048      	b.n	800de16 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	61da      	str	r2, [r3, #28]
 800dd8c:	e029      	b.n	800dde2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	895b      	ldrh	r3, [r3, #10]
 800dd92:	025b      	lsls	r3, r3, #9
 800dd94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd96:	e019      	b.n	800ddcc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6979      	ldr	r1, [r7, #20]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7ff fd00 	bl	800d7a2 <get_fat>
 800dda2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddaa:	d101      	bne.n	800ddb0 <dir_sdi+0x88>
 800ddac:	2301      	movs	r3, #1
 800ddae:	e032      	b.n	800de16 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d904      	bls.n	800ddc0 <dir_sdi+0x98>
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	697a      	ldr	r2, [r7, #20]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d301      	bcc.n	800ddc4 <dir_sdi+0x9c>
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e028      	b.n	800de16 <dir_sdi+0xee>
			ofs -= csz;
 800ddc4:	683a      	ldr	r2, [r7, #0]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddcc:	683a      	ldr	r2, [r7, #0]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d2e1      	bcs.n	800dd98 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ddd4:	6979      	ldr	r1, [r7, #20]
 800ddd6:	6938      	ldr	r0, [r7, #16]
 800ddd8:	f7ff fcc4 	bl	800d764 <clust2sect>
 800dddc:	4602      	mov	r2, r0
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	697a      	ldr	r2, [r7, #20]
 800dde6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	69db      	ldr	r3, [r3, #28]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <dir_sdi+0xcc>
 800ddf0:	2302      	movs	r3, #2
 800ddf2:	e010      	b.n	800de16 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	69da      	ldr	r2, [r3, #28]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	0a5b      	lsrs	r3, r3, #9
 800ddfc:	441a      	add	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de0e:	441a      	add	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3718      	adds	r7, #24
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b086      	sub	sp, #24
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	3320      	adds	r3, #32
 800de34:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	69db      	ldr	r3, [r3, #28]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d003      	beq.n	800de46 <dir_next+0x28>
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de44:	d301      	bcc.n	800de4a <dir_next+0x2c>
 800de46:	2304      	movs	r3, #4
 800de48:	e0aa      	b.n	800dfa0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de50:	2b00      	cmp	r3, #0
 800de52:	f040 8098 	bne.w	800df86 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	69db      	ldr	r3, [r3, #28]
 800de5a:	1c5a      	adds	r2, r3, #1
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	699b      	ldr	r3, [r3, #24]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10b      	bne.n	800de80 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	095b      	lsrs	r3, r3, #5
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	8912      	ldrh	r2, [r2, #8]
 800de70:	4293      	cmp	r3, r2
 800de72:	f0c0 8088 	bcc.w	800df86 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	61da      	str	r2, [r3, #28]
 800de7c:	2304      	movs	r3, #4
 800de7e:	e08f      	b.n	800dfa0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	0a5b      	lsrs	r3, r3, #9
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	8952      	ldrh	r2, [r2, #10]
 800de88:	3a01      	subs	r2, #1
 800de8a:	4013      	ands	r3, r2
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d17a      	bne.n	800df86 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	4619      	mov	r1, r3
 800de98:	4610      	mov	r0, r2
 800de9a:	f7ff fc82 	bl	800d7a2 <get_fat>
 800de9e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d801      	bhi.n	800deaa <dir_next+0x8c>
 800dea6:	2302      	movs	r3, #2
 800dea8:	e07a      	b.n	800dfa0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deb0:	d101      	bne.n	800deb6 <dir_next+0x98>
 800deb2:	2301      	movs	r3, #1
 800deb4:	e074      	b.n	800dfa0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	695b      	ldr	r3, [r3, #20]
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	429a      	cmp	r2, r3
 800debe:	d358      	bcc.n	800df72 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d104      	bne.n	800ded0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	61da      	str	r2, [r3, #28]
 800decc:	2304      	movs	r3, #4
 800dece:	e067      	b.n	800dfa0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	4619      	mov	r1, r3
 800ded8:	4610      	mov	r0, r2
 800deda:	f7ff fe59 	bl	800db90 <create_chain>
 800dede:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <dir_next+0xcc>
 800dee6:	2307      	movs	r3, #7
 800dee8:	e05a      	b.n	800dfa0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d101      	bne.n	800def4 <dir_next+0xd6>
 800def0:	2302      	movs	r3, #2
 800def2:	e055      	b.n	800dfa0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defa:	d101      	bne.n	800df00 <dir_next+0xe2>
 800defc:	2301      	movs	r3, #1
 800defe:	e04f      	b.n	800dfa0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f7ff fb4f 	bl	800d5a4 <sync_window>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d001      	beq.n	800df10 <dir_next+0xf2>
 800df0c:	2301      	movs	r3, #1
 800df0e:	e047      	b.n	800dfa0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	3330      	adds	r3, #48	; 0x30
 800df14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df18:	2100      	movs	r1, #0
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7ff f9b5 	bl	800d28a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df20:	2300      	movs	r3, #0
 800df22:	613b      	str	r3, [r7, #16]
 800df24:	6979      	ldr	r1, [r7, #20]
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f7ff fc1c 	bl	800d764 <clust2sect>
 800df2c:	4602      	mov	r2, r0
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	62da      	str	r2, [r3, #44]	; 0x2c
 800df32:	e012      	b.n	800df5a <dir_next+0x13c>
						fs->wflag = 1;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2201      	movs	r2, #1
 800df38:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fb32 	bl	800d5a4 <sync_window>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d001      	beq.n	800df4a <dir_next+0x12c>
 800df46:	2301      	movs	r3, #1
 800df48:	e02a      	b.n	800dfa0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	3301      	adds	r3, #1
 800df4e:	613b      	str	r3, [r7, #16]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df54:	1c5a      	adds	r2, r3, #1
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	62da      	str	r2, [r3, #44]	; 0x2c
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	895b      	ldrh	r3, [r3, #10]
 800df5e:	461a      	mov	r2, r3
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	4293      	cmp	r3, r2
 800df64:	d3e6      	bcc.n	800df34 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	1ad2      	subs	r2, r2, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	697a      	ldr	r2, [r7, #20]
 800df76:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800df78:	6979      	ldr	r1, [r7, #20]
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f7ff fbf2 	bl	800d764 <clust2sect>
 800df80:	4602      	mov	r2, r0
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	68ba      	ldr	r2, [r7, #8]
 800df8a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df98:	441a      	add	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3718      	adds	r7, #24
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dfb8:	2100      	movs	r1, #0
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f7ff feb4 	bl	800dd28 <dir_sdi>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dfc4:	7dfb      	ldrb	r3, [r7, #23]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d12b      	bne.n	800e022 <dir_alloc+0x7a>
		n = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	69db      	ldr	r3, [r3, #28]
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f7ff fb29 	bl	800d62c <move_window>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dfde:	7dfb      	ldrb	r3, [r7, #23]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d11d      	bne.n	800e020 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a1b      	ldr	r3, [r3, #32]
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	2be5      	cmp	r3, #229	; 0xe5
 800dfec:	d004      	beq.n	800dff8 <dir_alloc+0x50>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d107      	bne.n	800e008 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	3301      	adds	r3, #1
 800dffc:	613b      	str	r3, [r7, #16]
 800dffe:	693a      	ldr	r2, [r7, #16]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	429a      	cmp	r2, r3
 800e004:	d102      	bne.n	800e00c <dir_alloc+0x64>
 800e006:	e00c      	b.n	800e022 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e008:	2300      	movs	r3, #0
 800e00a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e00c:	2101      	movs	r1, #1
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f7ff ff05 	bl	800de1e <dir_next>
 800e014:	4603      	mov	r3, r0
 800e016:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e018:	7dfb      	ldrb	r3, [r7, #23]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d0d7      	beq.n	800dfce <dir_alloc+0x26>
 800e01e:	e000      	b.n	800e022 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e020:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e022:	7dfb      	ldrb	r3, [r7, #23]
 800e024:	2b04      	cmp	r3, #4
 800e026:	d101      	bne.n	800e02c <dir_alloc+0x84>
 800e028:	2307      	movs	r3, #7
 800e02a:	75fb      	strb	r3, [r7, #23]
	return res;
 800e02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3718      	adds	r7, #24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b084      	sub	sp, #16
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
 800e03e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	331a      	adds	r3, #26
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff f87d 	bl	800d144 <ld_word>
 800e04a:	4603      	mov	r3, r0
 800e04c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	2b03      	cmp	r3, #3
 800e054:	d109      	bne.n	800e06a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	3314      	adds	r3, #20
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff f872 	bl	800d144 <ld_word>
 800e060:	4603      	mov	r3, r0
 800e062:	041b      	lsls	r3, r3, #16
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	4313      	orrs	r3, r2
 800e068:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e06a:	68fb      	ldr	r3, [r7, #12]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	331a      	adds	r3, #26
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	b292      	uxth	r2, r2
 800e088:	4611      	mov	r1, r2
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7ff f895 	bl	800d1ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	2b03      	cmp	r3, #3
 800e096:	d109      	bne.n	800e0ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	f103 0214 	add.w	r2, r3, #20
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	0c1b      	lsrs	r3, r3, #16
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4610      	mov	r0, r2
 800e0a8:	f7ff f887 	bl	800d1ba <st_word>
	}
}
 800e0ac:	bf00      	nop
 800e0ae:	3710      	adds	r7, #16
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff fe2f 	bl	800dd28 <dir_sdi>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e0ce:	7dfb      	ldrb	r3, [r7, #23]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d001      	beq.n	800e0d8 <dir_find+0x24>
 800e0d4:	7dfb      	ldrb	r3, [r7, #23]
 800e0d6:	e03e      	b.n	800e156 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	69db      	ldr	r3, [r3, #28]
 800e0dc:	4619      	mov	r1, r3
 800e0de:	6938      	ldr	r0, [r7, #16]
 800e0e0:	f7ff faa4 	bl	800d62c <move_window>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0e8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d12f      	bne.n	800e14e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a1b      	ldr	r3, [r3, #32]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d102      	bne.n	800e102 <dir_find+0x4e>
 800e0fc:	2304      	movs	r3, #4
 800e0fe:	75fb      	strb	r3, [r7, #23]
 800e100:	e028      	b.n	800e154 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a1b      	ldr	r3, [r3, #32]
 800e106:	330b      	adds	r3, #11
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a1b      	ldr	r3, [r3, #32]
 800e118:	330b      	adds	r3, #11
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	f003 0308 	and.w	r3, r3, #8
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <dir_find+0x86>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6a18      	ldr	r0, [r3, #32]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	3324      	adds	r3, #36	; 0x24
 800e12c:	220b      	movs	r2, #11
 800e12e:	4619      	mov	r1, r3
 800e130:	f7ff f8c6 	bl	800d2c0 <mem_cmp>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00b      	beq.n	800e152 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e13a:	2100      	movs	r1, #0
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7ff fe6e 	bl	800de1e <dir_next>
 800e142:	4603      	mov	r3, r0
 800e144:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e146:	7dfb      	ldrb	r3, [r7, #23]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d0c5      	beq.n	800e0d8 <dir_find+0x24>
 800e14c:	e002      	b.n	800e154 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e14e:	bf00      	nop
 800e150:	e000      	b.n	800e154 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e152:	bf00      	nop

	return res;
 800e154:	7dfb      	ldrb	r3, [r7, #23]
}
 800e156:	4618      	mov	r0, r3
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b084      	sub	sp, #16
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e16c:	2101      	movs	r1, #1
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff ff1a 	bl	800dfa8 <dir_alloc>
 800e174:	4603      	mov	r3, r0
 800e176:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e178:	7bfb      	ldrb	r3, [r7, #15]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d11c      	bne.n	800e1b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	69db      	ldr	r3, [r3, #28]
 800e182:	4619      	mov	r1, r3
 800e184:	68b8      	ldr	r0, [r7, #8]
 800e186:	f7ff fa51 	bl	800d62c <move_window>
 800e18a:	4603      	mov	r3, r0
 800e18c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d111      	bne.n	800e1b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a1b      	ldr	r3, [r3, #32]
 800e198:	2220      	movs	r2, #32
 800e19a:	2100      	movs	r1, #0
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7ff f874 	bl	800d28a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a18      	ldr	r0, [r3, #32]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	3324      	adds	r3, #36	; 0x24
 800e1aa:	220b      	movs	r2, #11
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	f7ff f84b 	bl	800d248 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
	...

0800e1c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b088      	sub	sp, #32
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	3324      	adds	r3, #36	; 0x24
 800e1d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e1da:	220b      	movs	r2, #11
 800e1dc:	2120      	movs	r1, #32
 800e1de:	68b8      	ldr	r0, [r7, #8]
 800e1e0:	f7ff f853 	bl	800d28a <mem_set>
	si = i = 0; ni = 8;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	613b      	str	r3, [r7, #16]
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	61fb      	str	r3, [r7, #28]
 800e1ec:	2308      	movs	r3, #8
 800e1ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	1c5a      	adds	r2, r3, #1
 800e1f4:	61fa      	str	r2, [r7, #28]
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e1fe:	7efb      	ldrb	r3, [r7, #27]
 800e200:	2b20      	cmp	r3, #32
 800e202:	d94e      	bls.n	800e2a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e204:	7efb      	ldrb	r3, [r7, #27]
 800e206:	2b2f      	cmp	r3, #47	; 0x2f
 800e208:	d006      	beq.n	800e218 <create_name+0x54>
 800e20a:	7efb      	ldrb	r3, [r7, #27]
 800e20c:	2b5c      	cmp	r3, #92	; 0x5c
 800e20e:	d110      	bne.n	800e232 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e210:	e002      	b.n	800e218 <create_name+0x54>
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	3301      	adds	r3, #1
 800e216:	61fb      	str	r3, [r7, #28]
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	4413      	add	r3, r2
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	2b2f      	cmp	r3, #47	; 0x2f
 800e222:	d0f6      	beq.n	800e212 <create_name+0x4e>
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	4413      	add	r3, r2
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b5c      	cmp	r3, #92	; 0x5c
 800e22e:	d0f0      	beq.n	800e212 <create_name+0x4e>
			break;
 800e230:	e038      	b.n	800e2a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e232:	7efb      	ldrb	r3, [r7, #27]
 800e234:	2b2e      	cmp	r3, #46	; 0x2e
 800e236:	d003      	beq.n	800e240 <create_name+0x7c>
 800e238:	693a      	ldr	r2, [r7, #16]
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d30c      	bcc.n	800e25a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	2b0b      	cmp	r3, #11
 800e244:	d002      	beq.n	800e24c <create_name+0x88>
 800e246:	7efb      	ldrb	r3, [r7, #27]
 800e248:	2b2e      	cmp	r3, #46	; 0x2e
 800e24a:	d001      	beq.n	800e250 <create_name+0x8c>
 800e24c:	2306      	movs	r3, #6
 800e24e:	e044      	b.n	800e2da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e250:	2308      	movs	r3, #8
 800e252:	613b      	str	r3, [r7, #16]
 800e254:	230b      	movs	r3, #11
 800e256:	617b      	str	r3, [r7, #20]
			continue;
 800e258:	e022      	b.n	800e2a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e25a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	da04      	bge.n	800e26c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e262:	7efb      	ldrb	r3, [r7, #27]
 800e264:	3b80      	subs	r3, #128	; 0x80
 800e266:	4a1f      	ldr	r2, [pc, #124]	; (800e2e4 <create_name+0x120>)
 800e268:	5cd3      	ldrb	r3, [r2, r3]
 800e26a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e26c:	7efb      	ldrb	r3, [r7, #27]
 800e26e:	4619      	mov	r1, r3
 800e270:	481d      	ldr	r0, [pc, #116]	; (800e2e8 <create_name+0x124>)
 800e272:	f7ff f84c 	bl	800d30e <chk_chr>
 800e276:	4603      	mov	r3, r0
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d001      	beq.n	800e280 <create_name+0xbc>
 800e27c:	2306      	movs	r3, #6
 800e27e:	e02c      	b.n	800e2da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e280:	7efb      	ldrb	r3, [r7, #27]
 800e282:	2b60      	cmp	r3, #96	; 0x60
 800e284:	d905      	bls.n	800e292 <create_name+0xce>
 800e286:	7efb      	ldrb	r3, [r7, #27]
 800e288:	2b7a      	cmp	r3, #122	; 0x7a
 800e28a:	d802      	bhi.n	800e292 <create_name+0xce>
 800e28c:	7efb      	ldrb	r3, [r7, #27]
 800e28e:	3b20      	subs	r3, #32
 800e290:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	1c5a      	adds	r2, r3, #1
 800e296:	613a      	str	r2, [r7, #16]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	4413      	add	r3, r2
 800e29c:	7efa      	ldrb	r2, [r7, #27]
 800e29e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e2a0:	e7a6      	b.n	800e1f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e2a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	441a      	add	r2, r3
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d101      	bne.n	800e2b8 <create_name+0xf4>
 800e2b4:	2306      	movs	r3, #6
 800e2b6:	e010      	b.n	800e2da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2be5      	cmp	r3, #229	; 0xe5
 800e2be:	d102      	bne.n	800e2c6 <create_name+0x102>
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2205      	movs	r2, #5
 800e2c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e2c6:	7efb      	ldrb	r3, [r7, #27]
 800e2c8:	2b20      	cmp	r3, #32
 800e2ca:	d801      	bhi.n	800e2d0 <create_name+0x10c>
 800e2cc:	2204      	movs	r2, #4
 800e2ce:	e000      	b.n	800e2d2 <create_name+0x10e>
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	330b      	adds	r3, #11
 800e2d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e2d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3720      	adds	r7, #32
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	080156a0 	.word	0x080156a0
 800e2e8:	080155c0 	.word	0x080155c0

0800e2ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b086      	sub	sp, #24
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e300:	e002      	b.n	800e308 <follow_path+0x1c>
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	3301      	adds	r3, #1
 800e306:	603b      	str	r3, [r7, #0]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	2b2f      	cmp	r3, #47	; 0x2f
 800e30e:	d0f8      	beq.n	800e302 <follow_path+0x16>
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	2b5c      	cmp	r3, #92	; 0x5c
 800e316:	d0f4      	beq.n	800e302 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	2200      	movs	r2, #0
 800e31c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	2b1f      	cmp	r3, #31
 800e324:	d80a      	bhi.n	800e33c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2280      	movs	r2, #128	; 0x80
 800e32a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e32e:	2100      	movs	r1, #0
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff fcf9 	bl	800dd28 <dir_sdi>
 800e336:	4603      	mov	r3, r0
 800e338:	75fb      	strb	r3, [r7, #23]
 800e33a:	e043      	b.n	800e3c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e33c:	463b      	mov	r3, r7
 800e33e:	4619      	mov	r1, r3
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f7ff ff3f 	bl	800e1c4 <create_name>
 800e346:	4603      	mov	r3, r0
 800e348:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d134      	bne.n	800e3ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7ff feaf 	bl	800e0b4 <dir_find>
 800e356:	4603      	mov	r3, r0
 800e358:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e360:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e362:	7dfb      	ldrb	r3, [r7, #23]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d00a      	beq.n	800e37e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e368:	7dfb      	ldrb	r3, [r7, #23]
 800e36a:	2b04      	cmp	r3, #4
 800e36c:	d127      	bne.n	800e3be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e36e:	7afb      	ldrb	r3, [r7, #11]
 800e370:	f003 0304 	and.w	r3, r3, #4
 800e374:	2b00      	cmp	r3, #0
 800e376:	d122      	bne.n	800e3be <follow_path+0xd2>
 800e378:	2305      	movs	r3, #5
 800e37a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e37c:	e01f      	b.n	800e3be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e37e:	7afb      	ldrb	r3, [r7, #11]
 800e380:	f003 0304 	and.w	r3, r3, #4
 800e384:	2b00      	cmp	r3, #0
 800e386:	d11c      	bne.n	800e3c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	799b      	ldrb	r3, [r3, #6]
 800e38c:	f003 0310 	and.w	r3, r3, #16
 800e390:	2b00      	cmp	r3, #0
 800e392:	d102      	bne.n	800e39a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e394:	2305      	movs	r3, #5
 800e396:	75fb      	strb	r3, [r7, #23]
 800e398:	e014      	b.n	800e3c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	695b      	ldr	r3, [r3, #20]
 800e3a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3a8:	4413      	add	r3, r2
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f7ff fe42 	bl	800e036 <ld_clust>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e3b8:	e7c0      	b.n	800e33c <follow_path+0x50>
			if (res != FR_OK) break;
 800e3ba:	bf00      	nop
 800e3bc:	e002      	b.n	800e3c4 <follow_path+0xd8>
				break;
 800e3be:	bf00      	nop
 800e3c0:	e000      	b.n	800e3c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e3c2:	bf00      	nop
			}
		}
	}

	return res;
 800e3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3718      	adds	r7, #24
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b087      	sub	sp, #28
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d031      	beq.n	800e448 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	617b      	str	r3, [r7, #20]
 800e3ea:	e002      	b.n	800e3f2 <get_ldnumber+0x24>
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	617b      	str	r3, [r7, #20]
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	2b20      	cmp	r3, #32
 800e3f8:	d903      	bls.n	800e402 <get_ldnumber+0x34>
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	2b3a      	cmp	r3, #58	; 0x3a
 800e400:	d1f4      	bne.n	800e3ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	2b3a      	cmp	r3, #58	; 0x3a
 800e408:	d11c      	bne.n	800e444 <get_ldnumber+0x76>
			tp = *path;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	1c5a      	adds	r2, r3, #1
 800e414:	60fa      	str	r2, [r7, #12]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	3b30      	subs	r3, #48	; 0x30
 800e41a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	2b09      	cmp	r3, #9
 800e420:	d80e      	bhi.n	800e440 <get_ldnumber+0x72>
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	429a      	cmp	r2, r3
 800e428:	d10a      	bne.n	800e440 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d107      	bne.n	800e440 <get_ldnumber+0x72>
					vol = (int)i;
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	3301      	adds	r3, #1
 800e438:	617b      	str	r3, [r7, #20]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	697a      	ldr	r2, [r7, #20]
 800e43e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	e002      	b.n	800e44a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e444:	2300      	movs	r3, #0
 800e446:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e448:	693b      	ldr	r3, [r7, #16]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	371c      	adds	r7, #28
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr
	...

0800e458 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	70da      	strb	r2, [r3, #3]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f04f 32ff 	mov.w	r2, #4294967295
 800e46e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e470:	6839      	ldr	r1, [r7, #0]
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff f8da 	bl	800d62c <move_window>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d001      	beq.n	800e482 <check_fs+0x2a>
 800e47e:	2304      	movs	r3, #4
 800e480:	e038      	b.n	800e4f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	3330      	adds	r3, #48	; 0x30
 800e486:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fe fe5a 	bl	800d144 <ld_word>
 800e490:	4603      	mov	r3, r0
 800e492:	461a      	mov	r2, r3
 800e494:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e498:	429a      	cmp	r2, r3
 800e49a:	d001      	beq.n	800e4a0 <check_fs+0x48>
 800e49c:	2303      	movs	r3, #3
 800e49e:	e029      	b.n	800e4f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4a6:	2be9      	cmp	r3, #233	; 0xe9
 800e4a8:	d009      	beq.n	800e4be <check_fs+0x66>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4b0:	2beb      	cmp	r3, #235	; 0xeb
 800e4b2:	d11e      	bne.n	800e4f2 <check_fs+0x9a>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e4ba:	2b90      	cmp	r3, #144	; 0x90
 800e4bc:	d119      	bne.n	800e4f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	3330      	adds	r3, #48	; 0x30
 800e4c2:	3336      	adds	r3, #54	; 0x36
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fe fe55 	bl	800d174 <ld_dword>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e4d0:	4a0a      	ldr	r2, [pc, #40]	; (800e4fc <check_fs+0xa4>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d101      	bne.n	800e4da <check_fs+0x82>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	e00c      	b.n	800e4f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	3330      	adds	r3, #48	; 0x30
 800e4de:	3352      	adds	r3, #82	; 0x52
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fe fe47 	bl	800d174 <ld_dword>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	4a05      	ldr	r2, [pc, #20]	; (800e500 <check_fs+0xa8>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d101      	bne.n	800e4f2 <check_fs+0x9a>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	e000      	b.n	800e4f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e4f2:	2302      	movs	r3, #2
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	00544146 	.word	0x00544146
 800e500:	33544146 	.word	0x33544146

0800e504 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b096      	sub	sp, #88	; 0x58
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	4613      	mov	r3, r2
 800e510:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	2200      	movs	r2, #0
 800e516:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e518:	68f8      	ldr	r0, [r7, #12]
 800e51a:	f7ff ff58 	bl	800e3ce <get_ldnumber>
 800e51e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e522:	2b00      	cmp	r3, #0
 800e524:	da01      	bge.n	800e52a <find_volume+0x26>
 800e526:	230b      	movs	r3, #11
 800e528:	e22d      	b.n	800e986 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e52a:	4aa1      	ldr	r2, [pc, #644]	; (800e7b0 <find_volume+0x2ac>)
 800e52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e532:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	2b00      	cmp	r3, #0
 800e538:	d101      	bne.n	800e53e <find_volume+0x3a>
 800e53a:	230c      	movs	r3, #12
 800e53c:	e223      	b.n	800e986 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e542:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e544:	79fb      	ldrb	r3, [r7, #7]
 800e546:	f023 0301 	bic.w	r3, r3, #1
 800e54a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d01a      	beq.n	800e58a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e556:	785b      	ldrb	r3, [r3, #1]
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fe fd55 	bl	800d008 <disk_status>
 800e55e:	4603      	mov	r3, r0
 800e560:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e568:	f003 0301 	and.w	r3, r3, #1
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d10c      	bne.n	800e58a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e570:	79fb      	ldrb	r3, [r7, #7]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d007      	beq.n	800e586 <find_volume+0x82>
 800e576:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e57a:	f003 0304 	and.w	r3, r3, #4
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e582:	230a      	movs	r3, #10
 800e584:	e1ff      	b.n	800e986 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e586:	2300      	movs	r3, #0
 800e588:	e1fd      	b.n	800e986 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e592:	b2da      	uxtb	r2, r3
 800e594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e596:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59a:	785b      	ldrb	r3, [r3, #1]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fe fd4d 	bl	800d03c <disk_initialize>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e5a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e5b4:	2303      	movs	r3, #3
 800e5b6:	e1e6      	b.n	800e986 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e5b8:	79fb      	ldrb	r3, [r7, #7]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d007      	beq.n	800e5ce <find_volume+0xca>
 800e5be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5c2:	f003 0304 	and.w	r3, r3, #4
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e5ca:	230a      	movs	r3, #10
 800e5cc:	e1db      	b.n	800e986 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e5d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5d6:	f7ff ff3f 	bl	800e458 <check_fs>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e5e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d149      	bne.n	800e67c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	643b      	str	r3, [r7, #64]	; 0x40
 800e5ec:	e01e      	b.n	800e62c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5f6:	011b      	lsls	r3, r3, #4
 800e5f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e5fc:	4413      	add	r3, r2
 800e5fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e602:	3304      	adds	r3, #4
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d006      	beq.n	800e618 <find_volume+0x114>
 800e60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60c:	3308      	adds	r3, #8
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fe fdb0 	bl	800d174 <ld_dword>
 800e614:	4602      	mov	r2, r0
 800e616:	e000      	b.n	800e61a <find_volume+0x116>
 800e618:	2200      	movs	r2, #0
 800e61a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	3358      	adds	r3, #88	; 0x58
 800e620:	443b      	add	r3, r7
 800e622:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e628:	3301      	adds	r3, #1
 800e62a:	643b      	str	r3, [r7, #64]	; 0x40
 800e62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e62e:	2b03      	cmp	r3, #3
 800e630:	d9dd      	bls.n	800e5ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e632:	2300      	movs	r3, #0
 800e634:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <find_volume+0x13e>
 800e63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e63e:	3b01      	subs	r3, #1
 800e640:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	3358      	adds	r3, #88	; 0x58
 800e648:	443b      	add	r3, r7
 800e64a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e64e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e652:	2b00      	cmp	r3, #0
 800e654:	d005      	beq.n	800e662 <find_volume+0x15e>
 800e656:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e65a:	f7ff fefd 	bl	800e458 <check_fs>
 800e65e:	4603      	mov	r3, r0
 800e660:	e000      	b.n	800e664 <find_volume+0x160>
 800e662:	2303      	movs	r3, #3
 800e664:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e668:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d905      	bls.n	800e67c <find_volume+0x178>
 800e670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e672:	3301      	adds	r3, #1
 800e674:	643b      	str	r3, [r7, #64]	; 0x40
 800e676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e678:	2b03      	cmp	r3, #3
 800e67a:	d9e2      	bls.n	800e642 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e67c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e680:	2b04      	cmp	r3, #4
 800e682:	d101      	bne.n	800e688 <find_volume+0x184>
 800e684:	2301      	movs	r3, #1
 800e686:	e17e      	b.n	800e986 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e688:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d901      	bls.n	800e694 <find_volume+0x190>
 800e690:	230d      	movs	r3, #13
 800e692:	e178      	b.n	800e986 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e696:	3330      	adds	r3, #48	; 0x30
 800e698:	330b      	adds	r3, #11
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe fd52 	bl	800d144 <ld_word>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6a6:	d001      	beq.n	800e6ac <find_volume+0x1a8>
 800e6a8:	230d      	movs	r3, #13
 800e6aa:	e16c      	b.n	800e986 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ae:	3330      	adds	r3, #48	; 0x30
 800e6b0:	3316      	adds	r3, #22
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fe fd46 	bl	800d144 <ld_word>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d106      	bne.n	800e6d0 <find_volume+0x1cc>
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c4:	3330      	adds	r3, #48	; 0x30
 800e6c6:	3324      	adds	r3, #36	; 0x24
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fe fd53 	bl	800d174 <ld_dword>
 800e6ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e6d4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e2:	789b      	ldrb	r3, [r3, #2]
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d005      	beq.n	800e6f4 <find_volume+0x1f0>
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	789b      	ldrb	r3, [r3, #2]
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d001      	beq.n	800e6f4 <find_volume+0x1f0>
 800e6f0:	230d      	movs	r3, #13
 800e6f2:	e148      	b.n	800e986 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	789b      	ldrb	r3, [r3, #2]
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6fc:	fb02 f303 	mul.w	r3, r2, r3
 800e700:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e708:	b29a      	uxth	r2, r3
 800e70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e710:	895b      	ldrh	r3, [r3, #10]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d008      	beq.n	800e728 <find_volume+0x224>
 800e716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e718:	895b      	ldrh	r3, [r3, #10]
 800e71a:	461a      	mov	r2, r3
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	895b      	ldrh	r3, [r3, #10]
 800e720:	3b01      	subs	r3, #1
 800e722:	4013      	ands	r3, r2
 800e724:	2b00      	cmp	r3, #0
 800e726:	d001      	beq.n	800e72c <find_volume+0x228>
 800e728:	230d      	movs	r3, #13
 800e72a:	e12c      	b.n	800e986 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72e:	3330      	adds	r3, #48	; 0x30
 800e730:	3311      	adds	r3, #17
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe fd06 	bl	800d144 <ld_word>
 800e738:	4603      	mov	r3, r0
 800e73a:	461a      	mov	r2, r3
 800e73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e742:	891b      	ldrh	r3, [r3, #8]
 800e744:	f003 030f 	and.w	r3, r3, #15
 800e748:	b29b      	uxth	r3, r3
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <find_volume+0x24e>
 800e74e:	230d      	movs	r3, #13
 800e750:	e119      	b.n	800e986 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e754:	3330      	adds	r3, #48	; 0x30
 800e756:	3313      	adds	r3, #19
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fe fcf3 	bl	800d144 <ld_word>
 800e75e:	4603      	mov	r3, r0
 800e760:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e764:	2b00      	cmp	r3, #0
 800e766:	d106      	bne.n	800e776 <find_volume+0x272>
 800e768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76a:	3330      	adds	r3, #48	; 0x30
 800e76c:	3320      	adds	r3, #32
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fd00 	bl	800d174 <ld_dword>
 800e774:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e778:	3330      	adds	r3, #48	; 0x30
 800e77a:	330e      	adds	r3, #14
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7fe fce1 	bl	800d144 <ld_word>
 800e782:	4603      	mov	r3, r0
 800e784:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e786:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d101      	bne.n	800e790 <find_volume+0x28c>
 800e78c:	230d      	movs	r3, #13
 800e78e:	e0fa      	b.n	800e986 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e790:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e794:	4413      	add	r3, r2
 800e796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e798:	8912      	ldrh	r2, [r2, #8]
 800e79a:	0912      	lsrs	r2, r2, #4
 800e79c:	b292      	uxth	r2, r2
 800e79e:	4413      	add	r3, r2
 800e7a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e7a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d204      	bcs.n	800e7b4 <find_volume+0x2b0>
 800e7aa:	230d      	movs	r3, #13
 800e7ac:	e0eb      	b.n	800e986 <find_volume+0x482>
 800e7ae:	bf00      	nop
 800e7b0:	2000c6a4 	.word	0x2000c6a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e7b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b8:	1ad3      	subs	r3, r2, r3
 800e7ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7bc:	8952      	ldrh	r2, [r2, #10]
 800e7be:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <find_volume+0x2ca>
 800e7ca:	230d      	movs	r3, #13
 800e7cc:	e0db      	b.n	800e986 <find_volume+0x482>
		fmt = FS_FAT32;
 800e7ce:	2303      	movs	r3, #3
 800e7d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d802      	bhi.n	800e7e4 <find_volume+0x2e0>
 800e7de:	2302      	movs	r3, #2
 800e7e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d802      	bhi.n	800e7f4 <find_volume+0x2f0>
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f6:	1c9a      	adds	r2, r3, #2
 800e7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e800:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e802:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e806:	441a      	add	r2, r3
 800e808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e80c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	441a      	add	r2, r3
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e816:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	d11e      	bne.n	800e85c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e820:	3330      	adds	r3, #48	; 0x30
 800e822:	332a      	adds	r3, #42	; 0x2a
 800e824:	4618      	mov	r0, r3
 800e826:	f7fe fc8d 	bl	800d144 <ld_word>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d001      	beq.n	800e834 <find_volume+0x330>
 800e830:	230d      	movs	r3, #13
 800e832:	e0a8      	b.n	800e986 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e836:	891b      	ldrh	r3, [r3, #8]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d001      	beq.n	800e840 <find_volume+0x33c>
 800e83c:	230d      	movs	r3, #13
 800e83e:	e0a2      	b.n	800e986 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e842:	3330      	adds	r3, #48	; 0x30
 800e844:	332c      	adds	r3, #44	; 0x2c
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe fc94 	bl	800d174 <ld_dword>
 800e84c:	4602      	mov	r2, r0
 800e84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e850:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e854:	695b      	ldr	r3, [r3, #20]
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	647b      	str	r3, [r7, #68]	; 0x44
 800e85a:	e01f      	b.n	800e89c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	891b      	ldrh	r3, [r3, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d101      	bne.n	800e868 <find_volume+0x364>
 800e864:	230d      	movs	r3, #13
 800e866:	e08e      	b.n	800e986 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86a:	6a1a      	ldr	r2, [r3, #32]
 800e86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e86e:	441a      	add	r2, r3
 800e870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e872:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d103      	bne.n	800e884 <find_volume+0x380>
 800e87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87e:	695b      	ldr	r3, [r3, #20]
 800e880:	005b      	lsls	r3, r3, #1
 800e882:	e00a      	b.n	800e89a <find_volume+0x396>
 800e884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e886:	695a      	ldr	r2, [r3, #20]
 800e888:	4613      	mov	r3, r2
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	4413      	add	r3, r2
 800e88e:	085a      	lsrs	r2, r3, #1
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	695b      	ldr	r3, [r3, #20]
 800e894:	f003 0301 	and.w	r3, r3, #1
 800e898:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e89a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89e:	699a      	ldr	r2, [r3, #24]
 800e8a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e8a6:	0a5b      	lsrs	r3, r3, #9
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d201      	bcs.n	800e8b0 <find_volume+0x3ac>
 800e8ac:	230d      	movs	r3, #13
 800e8ae:	e06a      	b.n	800e986 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b6:	611a      	str	r2, [r3, #16]
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ba:	691a      	ldr	r2, [r3, #16]
 800e8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8be:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c2:	2280      	movs	r2, #128	; 0x80
 800e8c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e8c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8ca:	2b03      	cmp	r3, #3
 800e8cc:	d149      	bne.n	800e962 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d0:	3330      	adds	r3, #48	; 0x30
 800e8d2:	3330      	adds	r3, #48	; 0x30
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fe fc35 	bl	800d144 <ld_word>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b01      	cmp	r3, #1
 800e8de:	d140      	bne.n	800e962 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e8e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8e8:	f7fe fea0 	bl	800d62c <move_window>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d137      	bne.n	800e962 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fa:	3330      	adds	r3, #48	; 0x30
 800e8fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e900:	4618      	mov	r0, r3
 800e902:	f7fe fc1f 	bl	800d144 <ld_word>
 800e906:	4603      	mov	r3, r0
 800e908:	461a      	mov	r2, r3
 800e90a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e90e:	429a      	cmp	r2, r3
 800e910:	d127      	bne.n	800e962 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e914:	3330      	adds	r3, #48	; 0x30
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe fc2c 	bl	800d174 <ld_dword>
 800e91c:	4603      	mov	r3, r0
 800e91e:	4a1c      	ldr	r2, [pc, #112]	; (800e990 <find_volume+0x48c>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d11e      	bne.n	800e962 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	3330      	adds	r3, #48	; 0x30
 800e928:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fe fc21 	bl	800d174 <ld_dword>
 800e932:	4603      	mov	r3, r0
 800e934:	4a17      	ldr	r2, [pc, #92]	; (800e994 <find_volume+0x490>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d113      	bne.n	800e962 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93c:	3330      	adds	r3, #48	; 0x30
 800e93e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e942:	4618      	mov	r0, r3
 800e944:	f7fe fc16 	bl	800d174 <ld_dword>
 800e948:	4602      	mov	r2, r0
 800e94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e950:	3330      	adds	r3, #48	; 0x30
 800e952:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe fc0c 	bl	800d174 <ld_dword>
 800e95c:	4602      	mov	r2, r0
 800e95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e960:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e964:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e968:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e96a:	4b0b      	ldr	r3, [pc, #44]	; (800e998 <find_volume+0x494>)
 800e96c:	881b      	ldrh	r3, [r3, #0]
 800e96e:	3301      	adds	r3, #1
 800e970:	b29a      	uxth	r2, r3
 800e972:	4b09      	ldr	r3, [pc, #36]	; (800e998 <find_volume+0x494>)
 800e974:	801a      	strh	r2, [r3, #0]
 800e976:	4b08      	ldr	r3, [pc, #32]	; (800e998 <find_volume+0x494>)
 800e978:	881a      	ldrh	r2, [r3, #0]
 800e97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e97e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e980:	f7fe fdec 	bl	800d55c <clear_lock>
#endif
	return FR_OK;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3758      	adds	r7, #88	; 0x58
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	41615252 	.word	0x41615252
 800e994:	61417272 	.word	0x61417272
 800e998:	2000c6a8 	.word	0x2000c6a8

0800e99c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e9a6:	2309      	movs	r3, #9
 800e9a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d01c      	beq.n	800e9ea <validate+0x4e>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d018      	beq.n	800e9ea <validate+0x4e>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d013      	beq.n	800e9ea <validate+0x4e>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	889a      	ldrh	r2, [r3, #4]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	88db      	ldrh	r3, [r3, #6]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d10c      	bne.n	800e9ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	785b      	ldrb	r3, [r3, #1]
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fe fb16 	bl	800d008 <disk_status>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	f003 0301 	and.w	r3, r3, #1
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d101      	bne.n	800e9ea <validate+0x4e>
			res = FR_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e9ea:	7bfb      	ldrb	r3, [r7, #15]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d102      	bne.n	800e9f6 <validate+0x5a>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	e000      	b.n	800e9f8 <validate+0x5c>
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	683a      	ldr	r2, [r7, #0]
 800e9fa:	6013      	str	r3, [r2, #0]
	return res;
 800e9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
	...

0800ea08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b088      	sub	sp, #32
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	4613      	mov	r3, r2
 800ea14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ea1a:	f107 0310 	add.w	r3, r7, #16
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff fcd5 	bl	800e3ce <get_ldnumber>
 800ea24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	da01      	bge.n	800ea30 <f_mount+0x28>
 800ea2c:	230b      	movs	r3, #11
 800ea2e:	e02b      	b.n	800ea88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ea30:	4a17      	ldr	r2, [pc, #92]	; (800ea90 <f_mount+0x88>)
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d005      	beq.n	800ea4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ea40:	69b8      	ldr	r0, [r7, #24]
 800ea42:	f7fe fd8b 	bl	800d55c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d002      	beq.n	800ea58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	490d      	ldr	r1, [pc, #52]	; (800ea90 <f_mount+0x88>)
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d002      	beq.n	800ea6e <f_mount+0x66>
 800ea68:	79fb      	ldrb	r3, [r7, #7]
 800ea6a:	2b01      	cmp	r3, #1
 800ea6c:	d001      	beq.n	800ea72 <f_mount+0x6a>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	e00a      	b.n	800ea88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ea72:	f107 010c 	add.w	r1, r7, #12
 800ea76:	f107 0308 	add.w	r3, r7, #8
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7ff fd41 	bl	800e504 <find_volume>
 800ea82:	4603      	mov	r3, r0
 800ea84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ea86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3720      	adds	r7, #32
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	2000c6a4 	.word	0x2000c6a4

0800ea94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b098      	sub	sp, #96	; 0x60
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d101      	bne.n	800eaac <f_open+0x18>
 800eaa8:	2309      	movs	r3, #9
 800eaaa:	e1ad      	b.n	800ee08 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eaac:	79fb      	ldrb	r3, [r7, #7]
 800eaae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eab2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eab4:	79fa      	ldrb	r2, [r7, #7]
 800eab6:	f107 0110 	add.w	r1, r7, #16
 800eaba:	f107 0308 	add.w	r3, r7, #8
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7ff fd20 	bl	800e504 <find_volume>
 800eac4:	4603      	mov	r3, r0
 800eac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800eaca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eace:	2b00      	cmp	r3, #0
 800ead0:	f040 8191 	bne.w	800edf6 <f_open+0x362>
		dj.obj.fs = fs;
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	f107 0314 	add.w	r3, r7, #20
 800eade:	4611      	mov	r1, r2
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7ff fc03 	bl	800e2ec <follow_path>
 800eae6:	4603      	mov	r3, r0
 800eae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eaec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d11a      	bne.n	800eb2a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800eaf4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eaf8:	b25b      	sxtb	r3, r3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	da03      	bge.n	800eb06 <f_open+0x72>
				res = FR_INVALID_NAME;
 800eafe:	2306      	movs	r3, #6
 800eb00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eb04:	e011      	b.n	800eb2a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eb06:	79fb      	ldrb	r3, [r7, #7]
 800eb08:	f023 0301 	bic.w	r3, r3, #1
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	bf14      	ite	ne
 800eb10:	2301      	movne	r3, #1
 800eb12:	2300      	moveq	r3, #0
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	461a      	mov	r2, r3
 800eb18:	f107 0314 	add.w	r3, r7, #20
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe fc10 	bl	800d344 <chk_lock>
 800eb24:	4603      	mov	r3, r0
 800eb26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eb2a:	79fb      	ldrb	r3, [r7, #7]
 800eb2c:	f003 031c 	and.w	r3, r3, #28
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d07f      	beq.n	800ec34 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eb34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d017      	beq.n	800eb6c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eb3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	d10e      	bne.n	800eb62 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eb44:	f7fe fc5a 	bl	800d3fc <enq_lock>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d006      	beq.n	800eb5c <f_open+0xc8>
 800eb4e:	f107 0314 	add.w	r3, r7, #20
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7ff fb03 	bl	800e15e <dir_register>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	e000      	b.n	800eb5e <f_open+0xca>
 800eb5c:	2312      	movs	r3, #18
 800eb5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	f043 0308 	orr.w	r3, r3, #8
 800eb68:	71fb      	strb	r3, [r7, #7]
 800eb6a:	e010      	b.n	800eb8e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eb6c:	7ebb      	ldrb	r3, [r7, #26]
 800eb6e:	f003 0311 	and.w	r3, r3, #17
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d003      	beq.n	800eb7e <f_open+0xea>
					res = FR_DENIED;
 800eb76:	2307      	movs	r3, #7
 800eb78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eb7c:	e007      	b.n	800eb8e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eb7e:	79fb      	ldrb	r3, [r7, #7]
 800eb80:	f003 0304 	and.w	r3, r3, #4
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d002      	beq.n	800eb8e <f_open+0xfa>
 800eb88:	2308      	movs	r3, #8
 800eb8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eb8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d168      	bne.n	800ec68 <f_open+0x1d4>
 800eb96:	79fb      	ldrb	r3, [r7, #7]
 800eb98:	f003 0308 	and.w	r3, r3, #8
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d063      	beq.n	800ec68 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eba0:	f7fc f800 	bl	800aba4 <get_fattime>
 800eba4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eba8:	330e      	adds	r3, #14
 800ebaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fe fb1f 	bl	800d1f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ebb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb4:	3316      	adds	r3, #22
 800ebb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fe fb19 	bl	800d1f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ebbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc0:	330b      	adds	r3, #11
 800ebc2:	2220      	movs	r2, #32
 800ebc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebca:	4611      	mov	r1, r2
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7ff fa32 	bl	800e036 <ld_clust>
 800ebd2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ebd8:	2200      	movs	r2, #0
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7ff fa4a 	bl	800e074 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ebe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe2:	331c      	adds	r3, #28
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fe fb02 	bl	800d1f0 <st_dword>
					fs->wflag = 1;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ebf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d037      	beq.n	800ec68 <f_open+0x1d4>
						dw = fs->winsect;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ebfe:	f107 0314 	add.w	r3, r7, #20
 800ec02:	2200      	movs	r2, #0
 800ec04:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fe ff5d 	bl	800dac6 <remove_chain>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ec12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d126      	bne.n	800ec68 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f7fe fd04 	bl	800d62c <move_window>
 800ec24:	4603      	mov	r3, r0
 800ec26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec2e:	3a01      	subs	r2, #1
 800ec30:	60da      	str	r2, [r3, #12]
 800ec32:	e019      	b.n	800ec68 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ec34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d115      	bne.n	800ec68 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ec3c:	7ebb      	ldrb	r3, [r7, #26]
 800ec3e:	f003 0310 	and.w	r3, r3, #16
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d003      	beq.n	800ec4e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ec46:	2304      	movs	r3, #4
 800ec48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ec4c:	e00c      	b.n	800ec68 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ec4e:	79fb      	ldrb	r3, [r7, #7]
 800ec50:	f003 0302 	and.w	r3, r3, #2
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d007      	beq.n	800ec68 <f_open+0x1d4>
 800ec58:	7ebb      	ldrb	r3, [r7, #26]
 800ec5a:	f003 0301 	and.w	r3, r3, #1
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d002      	beq.n	800ec68 <f_open+0x1d4>
						res = FR_DENIED;
 800ec62:	2307      	movs	r3, #7
 800ec64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d128      	bne.n	800ecc2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ec70:	79fb      	ldrb	r3, [r7, #7]
 800ec72:	f003 0308 	and.w	r3, r3, #8
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d003      	beq.n	800ec82 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ec7a:	79fb      	ldrb	r3, [r7, #7]
 800ec7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec80:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ec8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ec90:	79fb      	ldrb	r3, [r7, #7]
 800ec92:	f023 0301 	bic.w	r3, r3, #1
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	bf14      	ite	ne
 800ec9a:	2301      	movne	r3, #1
 800ec9c:	2300      	moveq	r3, #0
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	461a      	mov	r2, r3
 800eca2:	f107 0314 	add.w	r3, r7, #20
 800eca6:	4611      	mov	r1, r2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fe fbc9 	bl	800d440 <inc_lock>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	691b      	ldr	r3, [r3, #16]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <f_open+0x22e>
 800ecbc:	2302      	movs	r3, #2
 800ecbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ecc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	f040 8095 	bne.w	800edf6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7ff f9af 	bl	800e036 <ld_clust>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ecde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece0:	331c      	adds	r3, #28
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fe fa46 	bl	800d174 <ld_dword>
 800ece8:	4602      	mov	r2, r0
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ecf4:	693a      	ldr	r2, [r7, #16]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	88da      	ldrh	r2, [r3, #6]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	79fa      	ldrb	r2, [r7, #7]
 800ed06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2200      	movs	r2, #0
 800ed18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	3330      	adds	r3, #48	; 0x30
 800ed1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed22:	2100      	movs	r1, #0
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fe fab0 	bl	800d28a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ed2a:	79fb      	ldrb	r3, [r7, #7]
 800ed2c:	f003 0320 	and.w	r3, r3, #32
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d060      	beq.n	800edf6 <f_open+0x362>
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d05c      	beq.n	800edf6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	68da      	ldr	r2, [r3, #12]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	895b      	ldrh	r3, [r3, #10]
 800ed48:	025b      	lsls	r3, r3, #9
 800ed4a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	657b      	str	r3, [r7, #84]	; 0x54
 800ed58:	e016      	b.n	800ed88 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fe fd1f 	bl	800d7a2 <get_fat>
 800ed64:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ed66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d802      	bhi.n	800ed72 <f_open+0x2de>
 800ed6c:	2302      	movs	r3, #2
 800ed6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ed72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed78:	d102      	bne.n	800ed80 <f_open+0x2ec>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed84:	1ad3      	subs	r3, r2, r3
 800ed86:	657b      	str	r3, [r7, #84]	; 0x54
 800ed88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d103      	bne.n	800ed98 <f_open+0x304>
 800ed90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d8e0      	bhi.n	800ed5a <f_open+0x2c6>
				}
				fp->clust = clst;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ed9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d127      	bne.n	800edf6 <f_open+0x362>
 800eda6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eda8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edac:	2b00      	cmp	r3, #0
 800edae:	d022      	beq.n	800edf6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7fe fcd5 	bl	800d764 <clust2sect>
 800edba:	6478      	str	r0, [r7, #68]	; 0x44
 800edbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d103      	bne.n	800edca <f_open+0x336>
						res = FR_INT_ERR;
 800edc2:	2302      	movs	r3, #2
 800edc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800edc8:	e015      	b.n	800edf6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800edca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edcc:	0a5a      	lsrs	r2, r3, #9
 800edce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edd0:	441a      	add	r2, r3
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	7858      	ldrb	r0, [r3, #1]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	6a1a      	ldr	r2, [r3, #32]
 800ede4:	2301      	movs	r3, #1
 800ede6:	f7fe f94f 	bl	800d088 <disk_read>
 800edea:	4603      	mov	r3, r0
 800edec:	2b00      	cmp	r3, #0
 800edee:	d002      	beq.n	800edf6 <f_open+0x362>
 800edf0:	2301      	movs	r3, #1
 800edf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800edf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d002      	beq.n	800ee04 <f_open+0x370>
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2200      	movs	r2, #0
 800ee02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ee04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3760      	adds	r7, #96	; 0x60
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b08c      	sub	sp, #48	; 0x30
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
 800ee1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	2200      	movs	r2, #0
 800ee26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f107 0210 	add.w	r2, r7, #16
 800ee2e:	4611      	mov	r1, r2
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7ff fdb3 	bl	800e99c <validate>
 800ee36:	4603      	mov	r3, r0
 800ee38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ee3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d107      	bne.n	800ee54 <f_write+0x44>
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	7d5b      	ldrb	r3, [r3, #21]
 800ee48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ee4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d002      	beq.n	800ee5a <f_write+0x4a>
 800ee54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee58:	e14b      	b.n	800f0f2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	7d1b      	ldrb	r3, [r3, #20]
 800ee5e:	f003 0302 	and.w	r3, r3, #2
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d101      	bne.n	800ee6a <f_write+0x5a>
 800ee66:	2307      	movs	r3, #7
 800ee68:	e143      	b.n	800f0f2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	699a      	ldr	r2, [r3, #24]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	441a      	add	r2, r3
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	699b      	ldr	r3, [r3, #24]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	f080 812d 	bcs.w	800f0d6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	699b      	ldr	r3, [r3, #24]
 800ee80:	43db      	mvns	r3, r3
 800ee82:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ee84:	e127      	b.n	800f0d6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	699b      	ldr	r3, [r3, #24]
 800ee8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	f040 80e3 	bne.w	800f05a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	0a5b      	lsrs	r3, r3, #9
 800ee9a:	693a      	ldr	r2, [r7, #16]
 800ee9c:	8952      	ldrh	r2, [r2, #10]
 800ee9e:	3a01      	subs	r2, #1
 800eea0:	4013      	ands	r3, r2
 800eea2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d143      	bne.n	800ef32 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	699b      	ldr	r3, [r3, #24]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10c      	bne.n	800eecc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d11a      	bne.n	800eef4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2100      	movs	r1, #0
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fe fe64 	bl	800db90 <create_chain>
 800eec8:	62b8      	str	r0, [r7, #40]	; 0x28
 800eeca:	e013      	b.n	800eef4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d007      	beq.n	800eee4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	699b      	ldr	r3, [r3, #24]
 800eed8:	4619      	mov	r1, r3
 800eeda:	68f8      	ldr	r0, [r7, #12]
 800eedc:	f7fe fef0 	bl	800dcc0 <clmt_clust>
 800eee0:	62b8      	str	r0, [r7, #40]	; 0x28
 800eee2:	e007      	b.n	800eef4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800eee4:	68fa      	ldr	r2, [r7, #12]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	4619      	mov	r1, r3
 800eeec:	4610      	mov	r0, r2
 800eeee:	f7fe fe4f 	bl	800db90 <create_chain>
 800eef2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	f000 80f2 	beq.w	800f0e0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d104      	bne.n	800ef0c <f_write+0xfc>
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2202      	movs	r2, #2
 800ef06:	755a      	strb	r2, [r3, #21]
 800ef08:	2302      	movs	r3, #2
 800ef0a:	e0f2      	b.n	800f0f2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef12:	d104      	bne.n	800ef1e <f_write+0x10e>
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2201      	movs	r2, #1
 800ef18:	755a      	strb	r2, [r3, #21]
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e0e9      	b.n	800f0f2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef22:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d102      	bne.n	800ef32 <f_write+0x122>
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef30:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	7d1b      	ldrb	r3, [r3, #20]
 800ef36:	b25b      	sxtb	r3, r3
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	da18      	bge.n	800ef6e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	7858      	ldrb	r0, [r3, #1]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6a1a      	ldr	r2, [r3, #32]
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	f7fe f8bc 	bl	800d0c8 <disk_write>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d004      	beq.n	800ef60 <f_write+0x150>
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	755a      	strb	r2, [r3, #21]
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e0c8      	b.n	800f0f2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	7d1b      	ldrb	r3, [r3, #20]
 800ef64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef68:	b2da      	uxtb	r2, r3
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef6e:	693a      	ldr	r2, [r7, #16]
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	69db      	ldr	r3, [r3, #28]
 800ef74:	4619      	mov	r1, r3
 800ef76:	4610      	mov	r0, r2
 800ef78:	f7fe fbf4 	bl	800d764 <clust2sect>
 800ef7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d104      	bne.n	800ef8e <f_write+0x17e>
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2202      	movs	r2, #2
 800ef88:	755a      	strb	r2, [r3, #21]
 800ef8a:	2302      	movs	r3, #2
 800ef8c:	e0b1      	b.n	800f0f2 <f_write+0x2e2>
			sect += csect;
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	4413      	add	r3, r2
 800ef94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	0a5b      	lsrs	r3, r3, #9
 800ef9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ef9c:	6a3b      	ldr	r3, [r7, #32]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d03c      	beq.n	800f01c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800efa2:	69ba      	ldr	r2, [r7, #24]
 800efa4:	6a3b      	ldr	r3, [r7, #32]
 800efa6:	4413      	add	r3, r2
 800efa8:	693a      	ldr	r2, [r7, #16]
 800efaa:	8952      	ldrh	r2, [r2, #10]
 800efac:	4293      	cmp	r3, r2
 800efae:	d905      	bls.n	800efbc <f_write+0x1ac>
					cc = fs->csize - csect;
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	895b      	ldrh	r3, [r3, #10]
 800efb4:	461a      	mov	r2, r3
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	7858      	ldrb	r0, [r3, #1]
 800efc0:	6a3b      	ldr	r3, [r7, #32]
 800efc2:	697a      	ldr	r2, [r7, #20]
 800efc4:	69f9      	ldr	r1, [r7, #28]
 800efc6:	f7fe f87f 	bl	800d0c8 <disk_write>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d004      	beq.n	800efda <f_write+0x1ca>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2201      	movs	r2, #1
 800efd4:	755a      	strb	r2, [r3, #21]
 800efd6:	2301      	movs	r3, #1
 800efd8:	e08b      	b.n	800f0f2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	6a1a      	ldr	r2, [r3, #32]
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	6a3a      	ldr	r2, [r7, #32]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d915      	bls.n	800f014 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6a1a      	ldr	r2, [r3, #32]
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	025b      	lsls	r3, r3, #9
 800eff8:	69fa      	ldr	r2, [r7, #28]
 800effa:	4413      	add	r3, r2
 800effc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f000:	4619      	mov	r1, r3
 800f002:	f7fe f921 	bl	800d248 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	7d1b      	ldrb	r3, [r3, #20]
 800f00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f00e:	b2da      	uxtb	r2, r3
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f014:	6a3b      	ldr	r3, [r7, #32]
 800f016:	025b      	lsls	r3, r3, #9
 800f018:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f01a:	e03f      	b.n	800f09c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	697a      	ldr	r2, [r7, #20]
 800f022:	429a      	cmp	r2, r3
 800f024:	d016      	beq.n	800f054 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	699a      	ldr	r2, [r3, #24]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f02e:	429a      	cmp	r2, r3
 800f030:	d210      	bcs.n	800f054 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	7858      	ldrb	r0, [r3, #1]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f03c:	2301      	movs	r3, #1
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	f7fe f822 	bl	800d088 <disk_read>
 800f044:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f046:	2b00      	cmp	r3, #0
 800f048:	d004      	beq.n	800f054 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2201      	movs	r2, #1
 800f04e:	755a      	strb	r2, [r3, #21]
 800f050:	2301      	movs	r3, #1
 800f052:	e04e      	b.n	800f0f2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f062:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f066:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d901      	bls.n	800f074 <f_write+0x264>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f082:	4413      	add	r3, r2
 800f084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f086:	69f9      	ldr	r1, [r7, #28]
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fe f8dd 	bl	800d248 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	7d1b      	ldrb	r3, [r3, #20]
 800f092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f096:	b2da      	uxtb	r2, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f09c:	69fa      	ldr	r2, [r7, #28]
 800f09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a0:	4413      	add	r3, r2
 800f0a2:	61fb      	str	r3, [r7, #28]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	699a      	ldr	r2, [r3, #24]
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0aa:	441a      	add	r2, r3
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	619a      	str	r2, [r3, #24]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	68da      	ldr	r2, [r3, #12]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	bf38      	it	cc
 800f0bc:	461a      	movcc	r2, r3
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	60da      	str	r2, [r3, #12]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c8:	441a      	add	r2, r3
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f47f aed4 	bne.w	800ee86 <f_write+0x76>
 800f0de:	e000      	b.n	800f0e2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f0e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	7d1b      	ldrb	r3, [r3, #20]
 800f0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3730      	adds	r7, #48	; 0x30
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b086      	sub	sp, #24
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f107 0208 	add.w	r2, r7, #8
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7ff fc46 	bl	800e99c <validate>
 800f110:	4603      	mov	r3, r0
 800f112:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f114:	7dfb      	ldrb	r3, [r7, #23]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d168      	bne.n	800f1ec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	7d1b      	ldrb	r3, [r3, #20]
 800f11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f122:	2b00      	cmp	r3, #0
 800f124:	d062      	beq.n	800f1ec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	7d1b      	ldrb	r3, [r3, #20]
 800f12a:	b25b      	sxtb	r3, r3
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	da15      	bge.n	800f15c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	7858      	ldrb	r0, [r3, #1]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a1a      	ldr	r2, [r3, #32]
 800f13e:	2301      	movs	r3, #1
 800f140:	f7fd ffc2 	bl	800d0c8 <disk_write>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d001      	beq.n	800f14e <f_sync+0x54>
 800f14a:	2301      	movs	r3, #1
 800f14c:	e04f      	b.n	800f1ee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	7d1b      	ldrb	r3, [r3, #20]
 800f152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f156:	b2da      	uxtb	r2, r3
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f15c:	f7fb fd22 	bl	800aba4 <get_fattime>
 800f160:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f162:	68ba      	ldr	r2, [r7, #8]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f168:	4619      	mov	r1, r3
 800f16a:	4610      	mov	r0, r2
 800f16c:	f7fe fa5e 	bl	800d62c <move_window>
 800f170:	4603      	mov	r3, r0
 800f172:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f174:	7dfb      	ldrb	r3, [r7, #23]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d138      	bne.n	800f1ec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f17e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	330b      	adds	r3, #11
 800f184:	781a      	ldrb	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	330b      	adds	r3, #11
 800f18a:	f042 0220 	orr.w	r2, r2, #32
 800f18e:	b2d2      	uxtb	r2, r2
 800f190:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6818      	ldr	r0, [r3, #0]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	461a      	mov	r2, r3
 800f19c:	68f9      	ldr	r1, [r7, #12]
 800f19e:	f7fe ff69 	bl	800e074 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f103 021c 	add.w	r2, r3, #28
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	4610      	mov	r0, r2
 800f1b0:	f7fe f81e 	bl	800d1f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	3316      	adds	r3, #22
 800f1b8:	6939      	ldr	r1, [r7, #16]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fe f818 	bl	800d1f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	3312      	adds	r3, #18
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fd fff7 	bl	800d1ba <st_word>
					fs->wflag = 1;
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7fe fa57 	bl	800d688 <sync_fs>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	7d1b      	ldrb	r3, [r3, #20]
 800f1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3718      	adds	r7, #24
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
	...

0800f1f8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f1f8:	b590      	push	{r4, r7, lr}
 800f1fa:	b09d      	sub	sp, #116	; 0x74
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	607a      	str	r2, [r7, #4]
 800f202:	603b      	str	r3, [r7, #0]
 800f204:	460b      	mov	r3, r1
 800f206:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f208:	2301      	movs	r3, #1
 800f20a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f20c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f210:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f212:	f107 030c 	add.w	r3, r7, #12
 800f216:	4618      	mov	r0, r3
 800f218:	f7ff f8d9 	bl	800e3ce <get_ldnumber>
 800f21c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f220:	2b00      	cmp	r3, #0
 800f222:	da02      	bge.n	800f22a <f_mkfs+0x32>
 800f224:	230b      	movs	r3, #11
 800f226:	f000 bc0d 	b.w	800fa44 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f22a:	4a94      	ldr	r2, [pc, #592]	; (800f47c <f_mkfs+0x284>)
 800f22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d005      	beq.n	800f242 <f_mkfs+0x4a>
 800f236:	4a91      	ldr	r2, [pc, #580]	; (800f47c <f_mkfs+0x284>)
 800f238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f23e:	2200      	movs	r2, #0
 800f240:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f244:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f248:	2300      	movs	r3, #0
 800f24a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f24e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f252:	4618      	mov	r0, r3
 800f254:	f7fd fef2 	bl	800d03c <disk_initialize>
 800f258:	4603      	mov	r3, r0
 800f25a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f25e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f262:	f003 0301 	and.w	r3, r3, #1
 800f266:	2b00      	cmp	r3, #0
 800f268:	d001      	beq.n	800f26e <f_mkfs+0x76>
 800f26a:	2303      	movs	r3, #3
 800f26c:	e3ea      	b.n	800fa44 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f26e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f272:	f003 0304 	and.w	r3, r3, #4
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <f_mkfs+0x86>
 800f27a:	230a      	movs	r3, #10
 800f27c:	e3e2      	b.n	800fa44 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f27e:	f107 0214 	add.w	r2, r7, #20
 800f282:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f286:	2103      	movs	r1, #3
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fd ff3d 	bl	800d108 <disk_ioctl>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d10c      	bne.n	800f2ae <f_mkfs+0xb6>
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d009      	beq.n	800f2ae <f_mkfs+0xb6>
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2a0:	d805      	bhi.n	800f2ae <f_mkfs+0xb6>
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	1e5a      	subs	r2, r3, #1
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	4013      	ands	r3, r2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d001      	beq.n	800f2b2 <f_mkfs+0xba>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f2b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f2b6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d003      	beq.n	800f2c6 <f_mkfs+0xce>
 800f2be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d309      	bcc.n	800f2da <f_mkfs+0xe2>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f2cc:	d805      	bhi.n	800f2da <f_mkfs+0xe2>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	1e5a      	subs	r2, r3, #1
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	4013      	ands	r3, r2
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <f_mkfs+0xe6>
 800f2da:	2313      	movs	r3, #19
 800f2dc:	e3b2      	b.n	800fa44 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f2de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2e6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f2ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f2f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fc:	fb02 f303 	mul.w	r3, r2, r3
 800f300:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f304:	2b00      	cmp	r3, #0
 800f306:	d101      	bne.n	800f30c <f_mkfs+0x114>
 800f308:	230e      	movs	r3, #14
 800f30a:	e39b      	b.n	800fa44 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f30c:	f107 0210 	add.w	r2, r7, #16
 800f310:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f314:	2101      	movs	r1, #1
 800f316:	4618      	mov	r0, r3
 800f318:	f7fd fef6 	bl	800d108 <disk_ioctl>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <f_mkfs+0x12e>
 800f322:	2301      	movs	r3, #1
 800f324:	e38e      	b.n	800fa44 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f326:	7afb      	ldrb	r3, [r7, #11]
 800f328:	f003 0308 	and.w	r3, r3, #8
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <f_mkfs+0x13c>
 800f330:	2300      	movs	r3, #0
 800f332:	e000      	b.n	800f336 <f_mkfs+0x13e>
 800f334:	233f      	movs	r3, #63	; 0x3f
 800f336:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d901      	bls.n	800f344 <f_mkfs+0x14c>
 800f340:	230e      	movs	r3, #14
 800f342:	e37f      	b.n	800fa44 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f344:	693a      	ldr	r2, [r7, #16]
 800f346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f348:	1ad3      	subs	r3, r2, r3
 800f34a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	2b7f      	cmp	r3, #127	; 0x7f
 800f350:	d801      	bhi.n	800f356 <f_mkfs+0x15e>
 800f352:	230e      	movs	r3, #14
 800f354:	e376      	b.n	800fa44 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b80      	cmp	r3, #128	; 0x80
 800f35a:	d901      	bls.n	800f360 <f_mkfs+0x168>
 800f35c:	2313      	movs	r3, #19
 800f35e:	e371      	b.n	800fa44 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f360:	7afb      	ldrb	r3, [r7, #11]
 800f362:	f003 0302 	and.w	r3, r3, #2
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00d      	beq.n	800f386 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f36a:	7afb      	ldrb	r3, [r7, #11]
 800f36c:	f003 0307 	and.w	r3, r3, #7
 800f370:	2b02      	cmp	r3, #2
 800f372:	d004      	beq.n	800f37e <f_mkfs+0x186>
 800f374:	7afb      	ldrb	r3, [r7, #11]
 800f376:	f003 0301 	and.w	r3, r3, #1
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d103      	bne.n	800f386 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f37e:	2303      	movs	r3, #3
 800f380:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f384:	e009      	b.n	800f39a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f386:	7afb      	ldrb	r3, [r7, #11]
 800f388:	f003 0301 	and.w	r3, r3, #1
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d101      	bne.n	800f394 <f_mkfs+0x19c>
 800f390:	2313      	movs	r3, #19
 800f392:	e357      	b.n	800fa44 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f394:	2302      	movs	r3, #2
 800f396:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f39e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	d13c      	bne.n	800f420 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d11b      	bne.n	800f3e4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	0c5b      	lsrs	r3, r3, #17
 800f3b0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	653b      	str	r3, [r7, #80]	; 0x50
 800f3ba:	e005      	b.n	800f3c8 <f_mkfs+0x1d0>
 800f3bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3be:	3301      	adds	r3, #1
 800f3c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3c4:	005b      	lsls	r3, r3, #1
 800f3c6:	653b      	str	r3, [r7, #80]	; 0x50
 800f3c8:	4a2d      	ldr	r2, [pc, #180]	; (800f480 <f_mkfs+0x288>)
 800f3ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d007      	beq.n	800f3e4 <f_mkfs+0x1ec>
 800f3d4:	4a2a      	ldr	r2, [pc, #168]	; (800f480 <f_mkfs+0x288>)
 800f3d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3dc:	461a      	mov	r2, r3
 800f3de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d2eb      	bcs.n	800f3bc <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f3e4:	693a      	ldr	r2, [r7, #16]
 800f3e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3ec:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f3ee:	6a3b      	ldr	r3, [r7, #32]
 800f3f0:	3302      	adds	r3, #2
 800f3f2:	009a      	lsls	r2, r3, #2
 800f3f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3f6:	4413      	add	r3, r2
 800f3f8:	1e5a      	subs	r2, r3, #1
 800f3fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f400:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800f402:	2320      	movs	r3, #32
 800f404:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800f406:	2300      	movs	r3, #0
 800f408:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f40a:	6a3b      	ldr	r3, [r7, #32]
 800f40c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f410:	4293      	cmp	r3, r2
 800f412:	d903      	bls.n	800f41c <f_mkfs+0x224>
 800f414:	6a3b      	ldr	r3, [r7, #32]
 800f416:	4a1b      	ldr	r2, [pc, #108]	; (800f484 <f_mkfs+0x28c>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	d952      	bls.n	800f4c2 <f_mkfs+0x2ca>
 800f41c:	230e      	movs	r3, #14
 800f41e:	e311      	b.n	800fa44 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f422:	2b00      	cmp	r3, #0
 800f424:	d11b      	bne.n	800f45e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	0b1b      	lsrs	r3, r3, #12
 800f42a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f42c:	2300      	movs	r3, #0
 800f42e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f430:	2301      	movs	r3, #1
 800f432:	653b      	str	r3, [r7, #80]	; 0x50
 800f434:	e005      	b.n	800f442 <f_mkfs+0x24a>
 800f436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f438:	3301      	adds	r3, #1
 800f43a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f43e:	005b      	lsls	r3, r3, #1
 800f440:	653b      	str	r3, [r7, #80]	; 0x50
 800f442:	4a11      	ldr	r2, [pc, #68]	; (800f488 <f_mkfs+0x290>)
 800f444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d007      	beq.n	800f45e <f_mkfs+0x266>
 800f44e:	4a0e      	ldr	r2, [pc, #56]	; (800f488 <f_mkfs+0x290>)
 800f450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f456:	461a      	mov	r2, r3
 800f458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d2eb      	bcs.n	800f436 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f45e:	693a      	ldr	r2, [r7, #16]
 800f460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f462:	fbb2 f3f3 	udiv	r3, r2, r3
 800f466:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f468:	6a3b      	ldr	r3, [r7, #32]
 800f46a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f46e:	4293      	cmp	r3, r2
 800f470:	d90c      	bls.n	800f48c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f472:	6a3b      	ldr	r3, [r7, #32]
 800f474:	3302      	adds	r3, #2
 800f476:	005b      	lsls	r3, r3, #1
 800f478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f47a:	e012      	b.n	800f4a2 <f_mkfs+0x2aa>
 800f47c:	2000c6a4 	.word	0x2000c6a4
 800f480:	08015720 	.word	0x08015720
 800f484:	0ffffff5 	.word	0x0ffffff5
 800f488:	08015730 	.word	0x08015730
				} else {
					fmt = FS_FAT12;
 800f48c:	2301      	movs	r3, #1
 800f48e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f492:	6a3a      	ldr	r2, [r7, #32]
 800f494:	4613      	mov	r3, r2
 800f496:	005b      	lsls	r3, r3, #1
 800f498:	4413      	add	r3, r2
 800f49a:	3301      	adds	r3, #1
 800f49c:	085b      	lsrs	r3, r3, #1
 800f49e:	3303      	adds	r3, #3
 800f4a0:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f4a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4a6:	4413      	add	r3, r2
 800f4a8:	1e5a      	subs	r2, r3, #1
 800f4aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4b0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4b8:	015a      	lsls	r2, r3, #5
 800f4ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4c0:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4c6:	4413      	add	r3, r2
 800f4c8:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f4ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4ce:	fb03 f202 	mul.w	r2, r3, r2
 800f4d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4d4:	4413      	add	r3, r2
 800f4d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f4d8:	4413      	add	r3, r2
 800f4da:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f4dc:	697a      	ldr	r2, [r7, #20]
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	1e5a      	subs	r2, r3, #1
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	425b      	negs	r3, r3
 800f4e8:	401a      	ands	r2, r3
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	1ad3      	subs	r3, r2, r3
 800f4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f4f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f4f4:	2b03      	cmp	r3, #3
 800f4f6:	d108      	bne.n	800f50a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f4f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4fc:	4413      	add	r3, r2
 800f4fe:	657b      	str	r3, [r7, #84]	; 0x54
 800f500:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f504:	4413      	add	r3, r2
 800f506:	65bb      	str	r3, [r7, #88]	; 0x58
 800f508:	e006      	b.n	800f518 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f50a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f50e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f512:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f514:	4413      	add	r3, r2
 800f516:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f51a:	011a      	lsls	r2, r3, #4
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	441a      	add	r2, r3
 800f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f522:	1ad2      	subs	r2, r2, r3
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	429a      	cmp	r2, r3
 800f528:	d901      	bls.n	800f52e <f_mkfs+0x336>
 800f52a:	230e      	movs	r3, #14
 800f52c:	e28a      	b.n	800fa44 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f52e:	693a      	ldr	r2, [r7, #16]
 800f530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f532:	1ad2      	subs	r2, r2, r3
 800f534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f536:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f538:	fb01 f303 	mul.w	r3, r1, r3
 800f53c:	1ad2      	subs	r2, r2, r3
 800f53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f540:	1ad2      	subs	r2, r2, r3
 800f542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f544:	fbb2 f3f3 	udiv	r3, r2, r3
 800f548:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f54a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f54e:	2b03      	cmp	r3, #3
 800f550:	d10f      	bne.n	800f572 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f552:	6a3b      	ldr	r3, [r7, #32]
 800f554:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f558:	4293      	cmp	r3, r2
 800f55a:	d80a      	bhi.n	800f572 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d105      	bne.n	800f56e <f_mkfs+0x376>
 800f562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f564:	085b      	lsrs	r3, r3, #1
 800f566:	607b      	str	r3, [r7, #4]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d144      	bne.n	800f5f8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f56e:	230e      	movs	r3, #14
 800f570:	e268      	b.n	800fa44 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f572:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f576:	2b02      	cmp	r3, #2
 800f578:	d133      	bne.n	800f5e2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f57a:	6a3b      	ldr	r3, [r7, #32]
 800f57c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f580:	4293      	cmp	r3, r2
 800f582:	d91e      	bls.n	800f5c2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d107      	bne.n	800f59a <f_mkfs+0x3a2>
 800f58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f58c:	005b      	lsls	r3, r3, #1
 800f58e:	2b40      	cmp	r3, #64	; 0x40
 800f590:	d803      	bhi.n	800f59a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f594:	005b      	lsls	r3, r3, #1
 800f596:	607b      	str	r3, [r7, #4]
 800f598:	e033      	b.n	800f602 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f59a:	7afb      	ldrb	r3, [r7, #11]
 800f59c:	f003 0302 	and.w	r3, r3, #2
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d003      	beq.n	800f5ac <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f5a4:	2303      	movs	r3, #3
 800f5a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f5aa:	e02a      	b.n	800f602 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d105      	bne.n	800f5be <f_mkfs+0x3c6>
 800f5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5b4:	005b      	lsls	r3, r3, #1
 800f5b6:	607b      	str	r3, [r7, #4]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b80      	cmp	r3, #128	; 0x80
 800f5bc:	d91e      	bls.n	800f5fc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f5be:	230e      	movs	r3, #14
 800f5c0:	e240      	b.n	800fa44 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f5c2:	6a3b      	ldr	r3, [r7, #32]
 800f5c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d80a      	bhi.n	800f5e2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d105      	bne.n	800f5de <f_mkfs+0x3e6>
 800f5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	607b      	str	r3, [r7, #4]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b80      	cmp	r3, #128	; 0x80
 800f5dc:	d910      	bls.n	800f600 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f5de:	230e      	movs	r3, #14
 800f5e0:	e230      	b.n	800fa44 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f5e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d10c      	bne.n	800f604 <f_mkfs+0x40c>
 800f5ea:	6a3b      	ldr	r3, [r7, #32]
 800f5ec:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d907      	bls.n	800f604 <f_mkfs+0x40c>
 800f5f4:	230e      	movs	r3, #14
 800f5f6:	e225      	b.n	800fa44 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f5f8:	bf00      	nop
 800f5fa:	e6ce      	b.n	800f39a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f5fc:	bf00      	nop
 800f5fe:	e6cc      	b.n	800f39a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f600:	bf00      	nop
			pau = au;
 800f602:	e6ca      	b.n	800f39a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f604:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f606:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f608:	461a      	mov	r2, r3
 800f60a:	2100      	movs	r1, #0
 800f60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f60e:	f7fd fe3c 	bl	800d28a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f612:	220b      	movs	r2, #11
 800f614:	49b2      	ldr	r1, [pc, #712]	; (800f8e0 <f_mkfs+0x6e8>)
 800f616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f618:	f7fd fe16 	bl	800d248 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61e:	330b      	adds	r3, #11
 800f620:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f622:	4611      	mov	r1, r2
 800f624:	4618      	mov	r0, r3
 800f626:	f7fd fdc8 	bl	800d1ba <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62c:	330d      	adds	r3, #13
 800f62e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f630:	b2d2      	uxtb	r2, r2
 800f632:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f636:	330e      	adds	r3, #14
 800f638:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f63a:	b292      	uxth	r2, r2
 800f63c:	4611      	mov	r1, r2
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fd fdbb 	bl	800d1ba <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f646:	3310      	adds	r3, #16
 800f648:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f64a:	b2d2      	uxtb	r2, r2
 800f64c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f650:	f103 0211 	add.w	r2, r3, #17
 800f654:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f658:	2b03      	cmp	r3, #3
 800f65a:	d002      	beq.n	800f662 <f_mkfs+0x46a>
 800f65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f65e:	b29b      	uxth	r3, r3
 800f660:	e000      	b.n	800f664 <f_mkfs+0x46c>
 800f662:	2300      	movs	r3, #0
 800f664:	4619      	mov	r1, r3
 800f666:	4610      	mov	r0, r2
 800f668:	f7fd fda7 	bl	800d1ba <st_word>
		if (sz_vol < 0x10000) {
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f672:	d208      	bcs.n	800f686 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f676:	3313      	adds	r3, #19
 800f678:	693a      	ldr	r2, [r7, #16]
 800f67a:	b292      	uxth	r2, r2
 800f67c:	4611      	mov	r1, r2
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fd fd9b 	bl	800d1ba <st_word>
 800f684:	e006      	b.n	800f694 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	3320      	adds	r3, #32
 800f68a:	693a      	ldr	r2, [r7, #16]
 800f68c:	4611      	mov	r1, r2
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fd fdae 	bl	800d1f0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	3315      	adds	r3, #21
 800f698:	22f8      	movs	r2, #248	; 0xf8
 800f69a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69e:	3318      	adds	r3, #24
 800f6a0:	213f      	movs	r1, #63	; 0x3f
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fd fd89 	bl	800d1ba <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	331a      	adds	r3, #26
 800f6ac:	21ff      	movs	r1, #255	; 0xff
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fd fd83 	bl	800d1ba <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b6:	331c      	adds	r3, #28
 800f6b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fd fd98 	bl	800d1f0 <st_dword>
		if (fmt == FS_FAT32) {
 800f6c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6c4:	2b03      	cmp	r3, #3
 800f6c6:	d131      	bne.n	800f72c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ca:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f6ce:	f7fb fa69 	bl	800aba4 <get_fattime>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f7fd fd8a 	bl	800d1f0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6de:	3324      	adds	r3, #36	; 0x24
 800f6e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fd fd84 	bl	800d1f0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ea:	332c      	adds	r3, #44	; 0x2c
 800f6ec:	2102      	movs	r1, #2
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fd fd7e 	bl	800d1f0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f6:	3330      	adds	r3, #48	; 0x30
 800f6f8:	2101      	movs	r1, #1
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fd fd5d 	bl	800d1ba <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f702:	3332      	adds	r3, #50	; 0x32
 800f704:	2106      	movs	r1, #6
 800f706:	4618      	mov	r0, r3
 800f708:	f7fd fd57 	bl	800d1ba <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70e:	3340      	adds	r3, #64	; 0x40
 800f710:	2280      	movs	r2, #128	; 0x80
 800f712:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f716:	3342      	adds	r3, #66	; 0x42
 800f718:	2229      	movs	r2, #41	; 0x29
 800f71a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71e:	3347      	adds	r3, #71	; 0x47
 800f720:	2213      	movs	r2, #19
 800f722:	4970      	ldr	r1, [pc, #448]	; (800f8e4 <f_mkfs+0x6ec>)
 800f724:	4618      	mov	r0, r3
 800f726:	f7fd fd8f 	bl	800d248 <mem_cpy>
 800f72a:	e020      	b.n	800f76e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f732:	f7fb fa37 	bl	800aba4 <get_fattime>
 800f736:	4603      	mov	r3, r0
 800f738:	4619      	mov	r1, r3
 800f73a:	4620      	mov	r0, r4
 800f73c:	f7fd fd58 	bl	800d1f0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f742:	3316      	adds	r3, #22
 800f744:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f746:	b292      	uxth	r2, r2
 800f748:	4611      	mov	r1, r2
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fd fd35 	bl	800d1ba <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f752:	3324      	adds	r3, #36	; 0x24
 800f754:	2280      	movs	r2, #128	; 0x80
 800f756:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75a:	3326      	adds	r3, #38	; 0x26
 800f75c:	2229      	movs	r2, #41	; 0x29
 800f75e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f762:	332b      	adds	r3, #43	; 0x2b
 800f764:	2213      	movs	r2, #19
 800f766:	4960      	ldr	r1, [pc, #384]	; (800f8e8 <f_mkfs+0x6f0>)
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fd fd6d 	bl	800d248 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f770:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f774:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fd fd1e 	bl	800d1ba <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f77e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f782:	2301      	movs	r3, #1
 800f784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f788:	f7fd fc9e 	bl	800d0c8 <disk_write>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d001      	beq.n	800f796 <f_mkfs+0x59e>
 800f792:	2301      	movs	r3, #1
 800f794:	e156      	b.n	800fa44 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f796:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f79a:	2b03      	cmp	r3, #3
 800f79c:	d140      	bne.n	800f820 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	1d9a      	adds	r2, r3, #6
 800f7a2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7aa:	f7fd fc8d 	bl	800d0c8 <disk_write>
			mem_set(buf, 0, ss);
 800f7ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7b6:	f7fd fd68 	bl	800d28a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f7ba:	494c      	ldr	r1, [pc, #304]	; (800f8ec <f_mkfs+0x6f4>)
 800f7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7be:	f7fd fd17 	bl	800d1f0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f7c8:	4949      	ldr	r1, [pc, #292]	; (800f8f0 <f_mkfs+0x6f8>)
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fd fd10 	bl	800d1f0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f7d6:	6a3b      	ldr	r3, [r7, #32]
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	4619      	mov	r1, r3
 800f7dc:	4610      	mov	r0, r2
 800f7de:	f7fd fd07 	bl	800d1f0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f7e8:	2102      	movs	r1, #2
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fd fd00 	bl	800d1f0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f7f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fd fcdd 	bl	800d1ba <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f802:	1dda      	adds	r2, r3, #7
 800f804:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f808:	2301      	movs	r3, #1
 800f80a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f80c:	f7fd fc5c 	bl	800d0c8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	1c5a      	adds	r2, r3, #1
 800f814:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f818:	2301      	movs	r3, #1
 800f81a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f81c:	f7fd fc54 	bl	800d0c8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f822:	2100      	movs	r1, #0
 800f824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f826:	f7fd fd30 	bl	800d28a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f82a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f82c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f82e:	2300      	movs	r3, #0
 800f830:	64bb      	str	r3, [r7, #72]	; 0x48
 800f832:	e04b      	b.n	800f8cc <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f834:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f838:	2b03      	cmp	r3, #3
 800f83a:	d113      	bne.n	800f864 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f83c:	f06f 0107 	mvn.w	r1, #7
 800f840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f842:	f7fd fcd5 	bl	800d1f0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f848:	3304      	adds	r3, #4
 800f84a:	f04f 31ff 	mov.w	r1, #4294967295
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fd fcce 	bl	800d1f0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f856:	3308      	adds	r3, #8
 800f858:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fd fcc7 	bl	800d1f0 <st_dword>
 800f862:	e00b      	b.n	800f87c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f864:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d101      	bne.n	800f870 <f_mkfs+0x678>
 800f86c:	4b21      	ldr	r3, [pc, #132]	; (800f8f4 <f_mkfs+0x6fc>)
 800f86e:	e001      	b.n	800f874 <f_mkfs+0x67c>
 800f870:	f06f 0307 	mvn.w	r3, #7
 800f874:	4619      	mov	r1, r3
 800f876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f878:	f7fd fcba 	bl	800d1f0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f87c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f87e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f884:	4293      	cmp	r3, r2
 800f886:	bf28      	it	cs
 800f888:	4613      	movcs	r3, r2
 800f88a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f88c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f892:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f896:	f7fd fc17 	bl	800d0c8 <disk_write>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d001      	beq.n	800f8a4 <f_mkfs+0x6ac>
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e0cf      	b.n	800fa44 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f8a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8ac:	f7fd fced 	bl	800d28a <mem_set>
				sect += n; nsect -= n;
 800f8b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8b4:	4413      	add	r3, r2
 800f8b6:	667b      	str	r3, [r7, #100]	; 0x64
 800f8b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8bc:	1ad3      	subs	r3, r2, r3
 800f8be:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800f8c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d1dc      	bne.n	800f880 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d3af      	bcc.n	800f834 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f8d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f8d8:	2b03      	cmp	r3, #3
 800f8da:	d10d      	bne.n	800f8f8 <f_mkfs+0x700>
 800f8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8de:	e00c      	b.n	800f8fa <f_mkfs+0x702>
 800f8e0:	080155d0 	.word	0x080155d0
 800f8e4:	080155dc 	.word	0x080155dc
 800f8e8:	080155f0 	.word	0x080155f0
 800f8ec:	41615252 	.word	0x41615252
 800f8f0:	61417272 	.word	0x61417272
 800f8f4:	00fffff8 	.word	0x00fffff8
 800f8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8fa:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f8fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f900:	4293      	cmp	r3, r2
 800f902:	bf28      	it	cs
 800f904:	4613      	movcs	r3, r2
 800f906:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f908:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f90c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f90e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f912:	f7fd fbd9 	bl	800d0c8 <disk_write>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <f_mkfs+0x728>
 800f91c:	2301      	movs	r3, #1
 800f91e:	e091      	b.n	800fa44 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800f920:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f924:	4413      	add	r3, r2
 800f926:	667b      	str	r3, [r7, #100]	; 0x64
 800f928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f92a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f92c:	1ad3      	subs	r3, r2, r3
 800f92e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800f930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f932:	2b00      	cmp	r3, #0
 800f934:	d1e2      	bne.n	800f8fc <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f936:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f93a:	2b03      	cmp	r3, #3
 800f93c:	d103      	bne.n	800f946 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f93e:	230c      	movs	r3, #12
 800f940:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f944:	e010      	b.n	800f968 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f94c:	d303      	bcc.n	800f956 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f94e:	2306      	movs	r3, #6
 800f950:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f954:	e008      	b.n	800f968 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f956:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f95a:	2b02      	cmp	r3, #2
 800f95c:	d101      	bne.n	800f962 <f_mkfs+0x76a>
 800f95e:	2304      	movs	r3, #4
 800f960:	e000      	b.n	800f964 <f_mkfs+0x76c>
 800f962:	2301      	movs	r3, #1
 800f964:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f968:	7afb      	ldrb	r3, [r7, #11]
 800f96a:	f003 0308 	and.w	r3, r3, #8
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d15b      	bne.n	800fa2a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f972:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f974:	461a      	mov	r2, r3
 800f976:	2100      	movs	r1, #0
 800f978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f97a:	f7fd fc86 	bl	800d28a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f980:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f984:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f988:	4618      	mov	r0, r3
 800f98a:	f7fd fc16 	bl	800d1ba <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f990:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f994:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	2200      	movs	r2, #0
 800f99a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f99c:	69bb      	ldr	r3, [r7, #24]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	3302      	adds	r3, #2
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	3303      	adds	r3, #3
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f9b4:	69bb      	ldr	r3, [r7, #24]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800f9bc:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c2:	441a      	add	r2, r3
 800f9c4:	4b21      	ldr	r3, [pc, #132]	; (800fa4c <f_mkfs+0x854>)
 800f9c6:	fba3 1302 	umull	r1, r3, r3, r2
 800f9ca:	1ad2      	subs	r2, r2, r3
 800f9cc:	0852      	lsrs	r2, r2, #1
 800f9ce:	4413      	add	r3, r2
 800f9d0:	0b5b      	lsrs	r3, r3, #13
 800f9d2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	3305      	adds	r3, #5
 800f9d8:	22fe      	movs	r2, #254	; 0xfe
 800f9da:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f9dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9de:	089b      	lsrs	r3, r3, #2
 800f9e0:	b2da      	uxtb	r2, r3
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	3306      	adds	r3, #6
 800f9e6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f9ea:	b2d2      	uxtb	r2, r2
 800f9ec:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f9ee:	69bb      	ldr	r3, [r7, #24]
 800f9f0:	3307      	adds	r3, #7
 800f9f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f9f4:	b2d2      	uxtb	r2, r2
 800f9f6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fd fbf6 	bl	800d1f0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800fa04:	69bb      	ldr	r3, [r7, #24]
 800fa06:	330c      	adds	r3, #12
 800fa08:	693a      	ldr	r2, [r7, #16]
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fd fbef 	bl	800d1f0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800fa12:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa16:	2301      	movs	r3, #1
 800fa18:	2200      	movs	r2, #0
 800fa1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa1c:	f7fd fb54 	bl	800d0c8 <disk_write>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d001      	beq.n	800fa2a <f_mkfs+0x832>
 800fa26:	2301      	movs	r3, #1
 800fa28:	e00c      	b.n	800fa44 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800fa2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fa2e:	2200      	movs	r2, #0
 800fa30:	2100      	movs	r1, #0
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fd fb68 	bl	800d108 <disk_ioctl>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d001      	beq.n	800fa42 <f_mkfs+0x84a>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e000      	b.n	800fa44 <f_mkfs+0x84c>

	return FR_OK;
 800fa42:	2300      	movs	r3, #0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3774      	adds	r7, #116	; 0x74
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd90      	pop	{r4, r7, pc}
 800fa4c:	0515565b 	.word	0x0515565b

0800fa50 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800fa5c:	78fb      	ldrb	r3, [r7, #3]
 800fa5e:	2b0a      	cmp	r3, #10
 800fa60:	d103      	bne.n	800fa6a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800fa62:	210d      	movs	r1, #13
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f7ff fff3 	bl	800fa50 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	db25      	blt.n	800fac2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	1c5a      	adds	r2, r3, #1
 800fa7a:	60fa      	str	r2, [r7, #12]
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	4413      	add	r3, r2
 800fa80:	78fa      	ldrb	r2, [r7, #3]
 800fa82:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2b3c      	cmp	r3, #60	; 0x3c
 800fa88:	dd12      	ble.n	800fab0 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6818      	ldr	r0, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f103 010c 	add.w	r1, r3, #12
 800fa94:	68fa      	ldr	r2, [r7, #12]
 800fa96:	f107 0308 	add.w	r3, r7, #8
 800fa9a:	f7ff f9b9 	bl	800ee10 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d101      	bne.n	800faaa <putc_bfd+0x5a>
 800faa6:	2300      	movs	r3, #0
 800faa8:	e001      	b.n	800faae <putc_bfd+0x5e>
 800faaa:	f04f 33ff 	mov.w	r3, #4294967295
 800faae:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	689b      	ldr	r3, [r3, #8]
 800faba:	1c5a      	adds	r2, r3, #1
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	609a      	str	r2, [r3, #8]
 800fac0:	e000      	b.n	800fac4 <putc_bfd+0x74>
	if (i < 0) return;
 800fac2:	bf00      	nop
}
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b084      	sub	sp, #16
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	db16      	blt.n	800fb08 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6818      	ldr	r0, [r3, #0]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f103 010c 	add.w	r1, r3, #12
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	461a      	mov	r2, r3
 800faea:	f107 030c 	add.w	r3, r7, #12
 800faee:	f7ff f98f 	bl	800ee10 <f_write>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d107      	bne.n	800fb08 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d102      	bne.n	800fb08 <putc_flush+0x3e>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	e001      	b.n	800fb0c <putc_flush+0x42>
	return EOF;
 800fb08:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3710      	adds	r7, #16
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	683a      	ldr	r2, [r7, #0]
 800fb22:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	605a      	str	r2, [r3, #4]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	609a      	str	r2, [r3, #8]
}
 800fb32:	bf00      	nop
 800fb34:	370c      	adds	r7, #12
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
	...

0800fb40 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800fb40:	b40e      	push	{r1, r2, r3}
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b0a7      	sub	sp, #156	; 0x9c
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800fb4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb4e:	6879      	ldr	r1, [r7, #4]
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7ff ffdf 	bl	800fb14 <putc_init>

	va_start(arp, fmt);
 800fb56:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fb5a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800fb5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb60:	1c5a      	adds	r2, r3, #1
 800fb62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800fb6c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	f000 81f2 	beq.w	800ff5a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800fb76:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fb7a:	2b25      	cmp	r3, #37	; 0x25
 800fb7c:	d008      	beq.n	800fb90 <f_printf+0x50>
			putc_bfd(&pb, c);
 800fb7e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800fb82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb86:	4611      	mov	r1, r2
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7ff ff61 	bl	800fa50 <putc_bfd>
			continue;
 800fb8e:	e1e3      	b.n	800ff58 <f_printf+0x418>
		}
		w = f = 0;
 800fb90:	2300      	movs	r3, #0
 800fb92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fb96:	2300      	movs	r3, #0
 800fb98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800fb9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fba0:	1c5a      	adds	r2, r3, #1
 800fba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800fbac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fbb0:	2b30      	cmp	r3, #48	; 0x30
 800fbb2:	d10b      	bne.n	800fbcc <f_printf+0x8c>
			f = 1; c = *fmt++;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fbba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800fbca:	e024      	b.n	800fc16 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800fbcc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fbd0:	2b2d      	cmp	r3, #45	; 0x2d
 800fbd2:	d120      	bne.n	800fc16 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800fbd4:	2302      	movs	r3, #2
 800fbd6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fbda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fbde:	1c5a      	adds	r2, r3, #1
 800fbe0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800fbea:	e014      	b.n	800fc16 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800fbec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	4413      	add	r3, r2
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fbfe:	4413      	add	r3, r2
 800fc00:	3b30      	subs	r3, #48	; 0x30
 800fc02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800fc06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc0a:	1c5a      	adds	r2, r3, #1
 800fc0c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800fc16:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc1a:	2b2f      	cmp	r3, #47	; 0x2f
 800fc1c:	d903      	bls.n	800fc26 <f_printf+0xe6>
 800fc1e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc22:	2b39      	cmp	r3, #57	; 0x39
 800fc24:	d9e2      	bls.n	800fbec <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800fc26:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc2a:	2b6c      	cmp	r3, #108	; 0x6c
 800fc2c:	d003      	beq.n	800fc36 <f_printf+0xf6>
 800fc2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc32:	2b4c      	cmp	r3, #76	; 0x4c
 800fc34:	d10d      	bne.n	800fc52 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800fc36:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fc3a:	f043 0304 	orr.w	r3, r3, #4
 800fc3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fc42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc46:	1c5a      	adds	r2, r3, #1
 800fc48:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800fc52:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	f000 8181 	beq.w	800ff5e <f_printf+0x41e>
		d = c;
 800fc5c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc60:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800fc64:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fc68:	2b60      	cmp	r3, #96	; 0x60
 800fc6a:	d908      	bls.n	800fc7e <f_printf+0x13e>
 800fc6c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fc70:	2b7a      	cmp	r3, #122	; 0x7a
 800fc72:	d804      	bhi.n	800fc7e <f_printf+0x13e>
 800fc74:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fc78:	3b20      	subs	r3, #32
 800fc7a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800fc7e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fc82:	3b42      	subs	r3, #66	; 0x42
 800fc84:	2b16      	cmp	r3, #22
 800fc86:	f200 8098 	bhi.w	800fdba <f_printf+0x27a>
 800fc8a:	a201      	add	r2, pc, #4	; (adr r2, 800fc90 <f_printf+0x150>)
 800fc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc90:	0800fd9b 	.word	0x0800fd9b
 800fc94:	0800fd83 	.word	0x0800fd83
 800fc98:	0800fdab 	.word	0x0800fdab
 800fc9c:	0800fdbb 	.word	0x0800fdbb
 800fca0:	0800fdbb 	.word	0x0800fdbb
 800fca4:	0800fdbb 	.word	0x0800fdbb
 800fca8:	0800fdbb 	.word	0x0800fdbb
 800fcac:	0800fdbb 	.word	0x0800fdbb
 800fcb0:	0800fdbb 	.word	0x0800fdbb
 800fcb4:	0800fdbb 	.word	0x0800fdbb
 800fcb8:	0800fdbb 	.word	0x0800fdbb
 800fcbc:	0800fdbb 	.word	0x0800fdbb
 800fcc0:	0800fdbb 	.word	0x0800fdbb
 800fcc4:	0800fda3 	.word	0x0800fda3
 800fcc8:	0800fdbb 	.word	0x0800fdbb
 800fccc:	0800fdbb 	.word	0x0800fdbb
 800fcd0:	0800fdbb 	.word	0x0800fdbb
 800fcd4:	0800fced 	.word	0x0800fced
 800fcd8:	0800fdbb 	.word	0x0800fdbb
 800fcdc:	0800fdab 	.word	0x0800fdab
 800fce0:	0800fdbb 	.word	0x0800fdbb
 800fce4:	0800fdbb 	.word	0x0800fdbb
 800fce8:	0800fdb3 	.word	0x0800fdb3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800fcec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcee:	1d1a      	adds	r2, r3, #4
 800fcf0:	67ba      	str	r2, [r7, #120]	; 0x78
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fcfc:	e004      	b.n	800fd08 <f_printf+0x1c8>
 800fcfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd02:	3301      	adds	r3, #1
 800fd04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fd08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fd0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd0e:	4413      	add	r3, r2
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d1f3      	bne.n	800fcfe <f_printf+0x1be>
			if (!(f & 2)) {
 800fd16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fd1a:	f003 0302 	and.w	r3, r3, #2
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d11a      	bne.n	800fd58 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800fd22:	e005      	b.n	800fd30 <f_printf+0x1f0>
 800fd24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd28:	2120      	movs	r1, #32
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7ff fe90 	bl	800fa50 <putc_bfd>
 800fd30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd34:	1c5a      	adds	r2, r3, #1
 800fd36:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fd3a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d8f0      	bhi.n	800fd24 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800fd42:	e009      	b.n	800fd58 <f_printf+0x218>
 800fd44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd46:	1c5a      	adds	r2, r3, #1
 800fd48:	67fa      	str	r2, [r7, #124]	; 0x7c
 800fd4a:	781a      	ldrb	r2, [r3, #0]
 800fd4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd50:	4611      	mov	r1, r2
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff fe7c 	bl	800fa50 <putc_bfd>
 800fd58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1f1      	bne.n	800fd44 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800fd60:	e005      	b.n	800fd6e <f_printf+0x22e>
 800fd62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd66:	2120      	movs	r1, #32
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7ff fe71 	bl	800fa50 <putc_bfd>
 800fd6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd72:	1c5a      	adds	r2, r3, #1
 800fd74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fd78:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d8f0      	bhi.n	800fd62 <f_printf+0x222>
			continue;
 800fd80:	e0ea      	b.n	800ff58 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800fd82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd84:	1d1a      	adds	r2, r3, #4
 800fd86:	67ba      	str	r2, [r7, #120]	; 0x78
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	b2da      	uxtb	r2, r3
 800fd8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd90:	4611      	mov	r1, r2
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7ff fe5c 	bl	800fa50 <putc_bfd>
 800fd98:	e0de      	b.n	800ff58 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800fd9a:	2302      	movs	r3, #2
 800fd9c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fda0:	e014      	b.n	800fdcc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800fda2:	2308      	movs	r3, #8
 800fda4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fda8:	e010      	b.n	800fdcc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800fdaa:	230a      	movs	r3, #10
 800fdac:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fdb0:	e00c      	b.n	800fdcc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800fdb2:	2310      	movs	r3, #16
 800fdb4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fdb8:	e008      	b.n	800fdcc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800fdba:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800fdbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fdc2:	4611      	mov	r1, r2
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7ff fe43 	bl	800fa50 <putc_bfd>
 800fdca:	e0c5      	b.n	800ff58 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800fdcc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fdd0:	f003 0304 	and.w	r3, r3, #4
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d004      	beq.n	800fde2 <f_printf+0x2a2>
 800fdd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdda:	1d1a      	adds	r2, r3, #4
 800fddc:	67ba      	str	r2, [r7, #120]	; 0x78
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	e00c      	b.n	800fdfc <f_printf+0x2bc>
 800fde2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fde6:	2b44      	cmp	r3, #68	; 0x44
 800fde8:	d104      	bne.n	800fdf4 <f_printf+0x2b4>
 800fdea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdec:	1d1a      	adds	r2, r3, #4
 800fdee:	67ba      	str	r2, [r7, #120]	; 0x78
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	e003      	b.n	800fdfc <f_printf+0x2bc>
 800fdf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdf6:	1d1a      	adds	r2, r3, #4
 800fdf8:	67ba      	str	r2, [r7, #120]	; 0x78
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800fe00:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fe04:	2b44      	cmp	r3, #68	; 0x44
 800fe06:	d10e      	bne.n	800fe26 <f_printf+0x2e6>
 800fe08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	da0a      	bge.n	800fe26 <f_printf+0x2e6>
			v = 0 - v;
 800fe10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe14:	425b      	negs	r3, r3
 800fe16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800fe1a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fe1e:	f043 0308 	orr.w	r3, r3, #8
 800fe22:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800fe26:	2300      	movs	r3, #0
 800fe28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800fe2c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800fe30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe34:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe38:	fb01 f202 	mul.w	r2, r1, r2
 800fe3c:	1a9b      	subs	r3, r3, r2
 800fe3e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800fe42:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800fe46:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fe4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800fe52:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fe56:	2b09      	cmp	r3, #9
 800fe58:	d90b      	bls.n	800fe72 <f_printf+0x332>
 800fe5a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fe5e:	2b78      	cmp	r3, #120	; 0x78
 800fe60:	d101      	bne.n	800fe66 <f_printf+0x326>
 800fe62:	2227      	movs	r2, #39	; 0x27
 800fe64:	e000      	b.n	800fe68 <f_printf+0x328>
 800fe66:	2207      	movs	r2, #7
 800fe68:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fe6c:	4413      	add	r3, r2
 800fe6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800fe72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe76:	1c5a      	adds	r2, r3, #1
 800fe78:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fe7c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800fe80:	3230      	adds	r2, #48	; 0x30
 800fe82:	b2d2      	uxtb	r2, r2
 800fe84:	3398      	adds	r3, #152	; 0x98
 800fe86:	443b      	add	r3, r7
 800fe88:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800fe8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d003      	beq.n	800fe9c <f_printf+0x35c>
 800fe94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe98:	2b1f      	cmp	r3, #31
 800fe9a:	d9c7      	bls.n	800fe2c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800fe9c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fea0:	f003 0308 	and.w	r3, r3, #8
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d009      	beq.n	800febc <f_printf+0x37c>
 800fea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800feac:	1c5a      	adds	r2, r3, #1
 800feae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800feb2:	3398      	adds	r3, #152	; 0x98
 800feb4:	443b      	add	r3, r7
 800feb6:	222d      	movs	r2, #45	; 0x2d
 800feb8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800febc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fec4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fec8:	f003 0301 	and.w	r3, r3, #1
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <f_printf+0x394>
 800fed0:	2330      	movs	r3, #48	; 0x30
 800fed2:	e000      	b.n	800fed6 <f_printf+0x396>
 800fed4:	2320      	movs	r3, #32
 800fed6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800feda:	e007      	b.n	800feec <f_printf+0x3ac>
 800fedc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800fee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fee4:	4611      	mov	r1, r2
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7ff fdb2 	bl	800fa50 <putc_bfd>
 800feec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fef0:	f003 0302 	and.w	r3, r3, #2
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d108      	bne.n	800ff0a <f_printf+0x3ca>
 800fef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fefc:	1c5a      	adds	r2, r3, #1
 800fefe:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ff02:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d8e8      	bhi.n	800fedc <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800ff0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ff14:	f107 020c 	add.w	r2, r7, #12
 800ff18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff1c:	4413      	add	r3, r2
 800ff1e:	781a      	ldrb	r2, [r3, #0]
 800ff20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff24:	4611      	mov	r1, r2
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7ff fd92 	bl	800fa50 <putc_bfd>
		} while (i);
 800ff2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d1ea      	bne.n	800ff0a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800ff34:	e007      	b.n	800ff46 <f_printf+0x406>
 800ff36:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ff3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff3e:	4611      	mov	r1, r2
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7ff fd85 	bl	800fa50 <putc_bfd>
 800ff46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ff50:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d8ee      	bhi.n	800ff36 <f_printf+0x3f6>
		c = *fmt++;
 800ff58:	e600      	b.n	800fb5c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ff5a:	bf00      	nop
 800ff5c:	e000      	b.n	800ff60 <f_printf+0x420>
		if (!c) break;
 800ff5e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ff60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7ff fdb0 	bl	800faca <putc_flush>
 800ff6a:	4603      	mov	r3, r0
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	379c      	adds	r7, #156	; 0x9c
 800ff70:	46bd      	mov	sp, r7
 800ff72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff76:	b003      	add	sp, #12
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop

0800ff7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b087      	sub	sp, #28
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	4613      	mov	r3, r2
 800ff88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ff92:	4b1f      	ldr	r3, [pc, #124]	; (8010010 <FATFS_LinkDriverEx+0x94>)
 800ff94:	7a5b      	ldrb	r3, [r3, #9]
 800ff96:	b2db      	uxtb	r3, r3
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d131      	bne.n	8010000 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ff9c:	4b1c      	ldr	r3, [pc, #112]	; (8010010 <FATFS_LinkDriverEx+0x94>)
 800ff9e:	7a5b      	ldrb	r3, [r3, #9]
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	4b1a      	ldr	r3, [pc, #104]	; (8010010 <FATFS_LinkDriverEx+0x94>)
 800ffa6:	2100      	movs	r1, #0
 800ffa8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ffaa:	4b19      	ldr	r3, [pc, #100]	; (8010010 <FATFS_LinkDriverEx+0x94>)
 800ffac:	7a5b      	ldrb	r3, [r3, #9]
 800ffae:	b2db      	uxtb	r3, r3
 800ffb0:	4a17      	ldr	r2, [pc, #92]	; (8010010 <FATFS_LinkDriverEx+0x94>)
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	4413      	add	r3, r2
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ffba:	4b15      	ldr	r3, [pc, #84]	; (8010010 <FATFS_LinkDriverEx+0x94>)
 800ffbc:	7a5b      	ldrb	r3, [r3, #9]
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	4b13      	ldr	r3, [pc, #76]	; (8010010 <FATFS_LinkDriverEx+0x94>)
 800ffc4:	4413      	add	r3, r2
 800ffc6:	79fa      	ldrb	r2, [r7, #7]
 800ffc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ffca:	4b11      	ldr	r3, [pc, #68]	; (8010010 <FATFS_LinkDriverEx+0x94>)
 800ffcc:	7a5b      	ldrb	r3, [r3, #9]
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	1c5a      	adds	r2, r3, #1
 800ffd2:	b2d1      	uxtb	r1, r2
 800ffd4:	4a0e      	ldr	r2, [pc, #56]	; (8010010 <FATFS_LinkDriverEx+0x94>)
 800ffd6:	7251      	strb	r1, [r2, #9]
 800ffd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ffda:	7dbb      	ldrb	r3, [r7, #22]
 800ffdc:	3330      	adds	r3, #48	; 0x30
 800ffde:	b2da      	uxtb	r2, r3
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	223a      	movs	r2, #58	; 0x3a
 800ffea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	3302      	adds	r3, #2
 800fff0:	222f      	movs	r2, #47	; 0x2f
 800fff2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	3303      	adds	r3, #3
 800fff8:	2200      	movs	r2, #0
 800fffa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fffc:	2300      	movs	r3, #0
 800fffe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010000:	7dfb      	ldrb	r3, [r7, #23]
}
 8010002:	4618      	mov	r0, r3
 8010004:	371c      	adds	r7, #28
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	2000c6cc 	.word	0x2000c6cc

08010014 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801001e:	2200      	movs	r2, #0
 8010020:	6839      	ldr	r1, [r7, #0]
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7ff ffaa 	bl	800ff7c <FATFS_LinkDriverEx>
 8010028:	4603      	mov	r3, r0
}
 801002a:	4618      	mov	r0, r3
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
	...

08010034 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010038:	2200      	movs	r2, #0
 801003a:	4912      	ldr	r1, [pc, #72]	; (8010084 <MX_USB_DEVICE_Init+0x50>)
 801003c:	4812      	ldr	r0, [pc, #72]	; (8010088 <MX_USB_DEVICE_Init+0x54>)
 801003e:	f7fb fcc1 	bl	800b9c4 <USBD_Init>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d001      	beq.n	801004c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010048:	f7f1 f976 	bl	8001338 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801004c:	490f      	ldr	r1, [pc, #60]	; (801008c <MX_USB_DEVICE_Init+0x58>)
 801004e:	480e      	ldr	r0, [pc, #56]	; (8010088 <MX_USB_DEVICE_Init+0x54>)
 8010050:	f7fb fce8 	bl	800ba24 <USBD_RegisterClass>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d001      	beq.n	801005e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801005a:	f7f1 f96d 	bl	8001338 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801005e:	490c      	ldr	r1, [pc, #48]	; (8010090 <MX_USB_DEVICE_Init+0x5c>)
 8010060:	4809      	ldr	r0, [pc, #36]	; (8010088 <MX_USB_DEVICE_Init+0x54>)
 8010062:	f7fb fc1f 	bl	800b8a4 <USBD_CDC_RegisterInterface>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801006c:	f7f1 f964 	bl	8001338 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010070:	4805      	ldr	r0, [pc, #20]	; (8010088 <MX_USB_DEVICE_Init+0x54>)
 8010072:	f7fb fd0d 	bl	800ba90 <USBD_Start>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d001      	beq.n	8010080 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801007c:	f7f1 f95c 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010080:	bf00      	nop
 8010082:	bd80      	pop	{r7, pc}
 8010084:	200000ac 	.word	0x200000ac
 8010088:	2000c6d8 	.word	0x2000c6d8
 801008c:	20000018 	.word	0x20000018
 8010090:	20000098 	.word	0x20000098

08010094 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010098:	2200      	movs	r2, #0
 801009a:	4905      	ldr	r1, [pc, #20]	; (80100b0 <CDC_Init_FS+0x1c>)
 801009c:	4805      	ldr	r0, [pc, #20]	; (80100b4 <CDC_Init_FS+0x20>)
 801009e:	f7fb fc1b 	bl	800b8d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80100a2:	4905      	ldr	r1, [pc, #20]	; (80100b8 <CDC_Init_FS+0x24>)
 80100a4:	4803      	ldr	r0, [pc, #12]	; (80100b4 <CDC_Init_FS+0x20>)
 80100a6:	f7fb fc39 	bl	800b91c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80100aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	2000d1b4 	.word	0x2000d1b4
 80100b4:	2000c6d8 	.word	0x2000c6d8
 80100b8:	2000c9b4 	.word	0x2000c9b4

080100bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80100bc:	b480      	push	{r7}
 80100be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80100c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	4603      	mov	r3, r0
 80100d4:	6039      	str	r1, [r7, #0]
 80100d6:	71fb      	strb	r3, [r7, #7]
 80100d8:	4613      	mov	r3, r2
 80100da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80100dc:	79fb      	ldrb	r3, [r7, #7]
 80100de:	2b23      	cmp	r3, #35	; 0x23
 80100e0:	d84a      	bhi.n	8010178 <CDC_Control_FS+0xac>
 80100e2:	a201      	add	r2, pc, #4	; (adr r2, 80100e8 <CDC_Control_FS+0x1c>)
 80100e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e8:	08010179 	.word	0x08010179
 80100ec:	08010179 	.word	0x08010179
 80100f0:	08010179 	.word	0x08010179
 80100f4:	08010179 	.word	0x08010179
 80100f8:	08010179 	.word	0x08010179
 80100fc:	08010179 	.word	0x08010179
 8010100:	08010179 	.word	0x08010179
 8010104:	08010179 	.word	0x08010179
 8010108:	08010179 	.word	0x08010179
 801010c:	08010179 	.word	0x08010179
 8010110:	08010179 	.word	0x08010179
 8010114:	08010179 	.word	0x08010179
 8010118:	08010179 	.word	0x08010179
 801011c:	08010179 	.word	0x08010179
 8010120:	08010179 	.word	0x08010179
 8010124:	08010179 	.word	0x08010179
 8010128:	08010179 	.word	0x08010179
 801012c:	08010179 	.word	0x08010179
 8010130:	08010179 	.word	0x08010179
 8010134:	08010179 	.word	0x08010179
 8010138:	08010179 	.word	0x08010179
 801013c:	08010179 	.word	0x08010179
 8010140:	08010179 	.word	0x08010179
 8010144:	08010179 	.word	0x08010179
 8010148:	08010179 	.word	0x08010179
 801014c:	08010179 	.word	0x08010179
 8010150:	08010179 	.word	0x08010179
 8010154:	08010179 	.word	0x08010179
 8010158:	08010179 	.word	0x08010179
 801015c:	08010179 	.word	0x08010179
 8010160:	08010179 	.word	0x08010179
 8010164:	08010179 	.word	0x08010179
 8010168:	08010179 	.word	0x08010179
 801016c:	08010179 	.word	0x08010179
 8010170:	08010179 	.word	0x08010179
 8010174:	08010179 	.word	0x08010179
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010178:	bf00      	nop
  }

  return (USBD_OK);
 801017a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801017c:	4618      	mov	r0, r3
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
 8010190:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010192:	6879      	ldr	r1, [r7, #4]
 8010194:	480f      	ldr	r0, [pc, #60]	; (80101d4 <CDC_Receive_FS+0x4c>)
 8010196:	f7fb fbc1 	bl	800b91c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801019a:	480e      	ldr	r0, [pc, #56]	; (80101d4 <CDC_Receive_FS+0x4c>)
 801019c:	f7fb fbdc 	bl	800b958 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	73fb      	strb	r3, [r7, #15]
  memset(inBuff, '\0', 64);
 80101a6:	2240      	movs	r2, #64	; 0x40
 80101a8:	2100      	movs	r1, #0
 80101aa:	480b      	ldr	r0, [pc, #44]	; (80101d8 <CDC_Receive_FS+0x50>)
 80101ac:	f001 fd57 	bl	8011c5e <memset>
  memcpy(inBuff, Buf, len);
 80101b0:	7bfb      	ldrb	r3, [r7, #15]
 80101b2:	461a      	mov	r2, r3
 80101b4:	6879      	ldr	r1, [r7, #4]
 80101b6:	4808      	ldr	r0, [pc, #32]	; (80101d8 <CDC_Receive_FS+0x50>)
 80101b8:	f001 fdd0 	bl	8011d5c <memcpy>
  memset(Buf, '\0', len);
 80101bc:	7bfb      	ldrb	r3, [r7, #15]
 80101be:	461a      	mov	r2, r3
 80101c0:	2100      	movs	r1, #0
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f001 fd4b 	bl	8011c5e <memset>
  return (USBD_OK);
 80101c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	2000c6d8 	.word	0x2000c6d8
 80101d8:	2000c1e8 	.word	0x2000c1e8

080101dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80101dc:	b480      	push	{r7}
 80101de:	b087      	sub	sp, #28
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	4613      	mov	r3, r2
 80101e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80101ea:	2300      	movs	r3, #0
 80101ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80101ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	371c      	adds	r7, #28
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr
	...

08010200 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	4603      	mov	r3, r0
 8010208:	6039      	str	r1, [r7, #0]
 801020a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	2212      	movs	r2, #18
 8010210:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010212:	4b03      	ldr	r3, [pc, #12]	; (8010220 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010214:	4618      	mov	r0, r3
 8010216:	370c      	adds	r7, #12
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr
 8010220:	200000cc 	.word	0x200000cc

08010224 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
 801022a:	4603      	mov	r3, r0
 801022c:	6039      	str	r1, [r7, #0]
 801022e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	2204      	movs	r2, #4
 8010234:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010236:	4b03      	ldr	r3, [pc, #12]	; (8010244 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010238:	4618      	mov	r0, r3
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr
 8010244:	200000ec 	.word	0x200000ec

08010248 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	4603      	mov	r3, r0
 8010250:	6039      	str	r1, [r7, #0]
 8010252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010254:	79fb      	ldrb	r3, [r7, #7]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d105      	bne.n	8010266 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801025a:	683a      	ldr	r2, [r7, #0]
 801025c:	4907      	ldr	r1, [pc, #28]	; (801027c <USBD_FS_ProductStrDescriptor+0x34>)
 801025e:	4808      	ldr	r0, [pc, #32]	; (8010280 <USBD_FS_ProductStrDescriptor+0x38>)
 8010260:	f7fc fdf2 	bl	800ce48 <USBD_GetString>
 8010264:	e004      	b.n	8010270 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010266:	683a      	ldr	r2, [r7, #0]
 8010268:	4904      	ldr	r1, [pc, #16]	; (801027c <USBD_FS_ProductStrDescriptor+0x34>)
 801026a:	4805      	ldr	r0, [pc, #20]	; (8010280 <USBD_FS_ProductStrDescriptor+0x38>)
 801026c:	f7fc fdec 	bl	800ce48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010270:	4b02      	ldr	r3, [pc, #8]	; (801027c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010272:	4618      	mov	r0, r3
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	2000d9b4 	.word	0x2000d9b4
 8010280:	08015604 	.word	0x08015604

08010284 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	4603      	mov	r3, r0
 801028c:	6039      	str	r1, [r7, #0]
 801028e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010290:	683a      	ldr	r2, [r7, #0]
 8010292:	4904      	ldr	r1, [pc, #16]	; (80102a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010294:	4804      	ldr	r0, [pc, #16]	; (80102a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010296:	f7fc fdd7 	bl	800ce48 <USBD_GetString>
  return USBD_StrDesc;
 801029a:	4b02      	ldr	r3, [pc, #8]	; (80102a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801029c:	4618      	mov	r0, r3
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}
 80102a4:	2000d9b4 	.word	0x2000d9b4
 80102a8:	08015614 	.word	0x08015614

080102ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	4603      	mov	r3, r0
 80102b4:	6039      	str	r1, [r7, #0]
 80102b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	221a      	movs	r2, #26
 80102bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80102be:	f000 f855 	bl	801036c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80102c2:	4b02      	ldr	r3, [pc, #8]	; (80102cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	200000f0 	.word	0x200000f0

080102d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	4603      	mov	r3, r0
 80102d8:	6039      	str	r1, [r7, #0]
 80102da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80102dc:	79fb      	ldrb	r3, [r7, #7]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d105      	bne.n	80102ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	4907      	ldr	r1, [pc, #28]	; (8010304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80102e6:	4808      	ldr	r0, [pc, #32]	; (8010308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80102e8:	f7fc fdae 	bl	800ce48 <USBD_GetString>
 80102ec:	e004      	b.n	80102f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80102ee:	683a      	ldr	r2, [r7, #0]
 80102f0:	4904      	ldr	r1, [pc, #16]	; (8010304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80102f2:	4805      	ldr	r0, [pc, #20]	; (8010308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80102f4:	f7fc fda8 	bl	800ce48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80102f8:	4b02      	ldr	r3, [pc, #8]	; (8010304 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3708      	adds	r7, #8
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	2000d9b4 	.word	0x2000d9b4
 8010308:	08015628 	.word	0x08015628

0801030c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	4603      	mov	r3, r0
 8010314:	6039      	str	r1, [r7, #0]
 8010316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010318:	79fb      	ldrb	r3, [r7, #7]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d105      	bne.n	801032a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801031e:	683a      	ldr	r2, [r7, #0]
 8010320:	4907      	ldr	r1, [pc, #28]	; (8010340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010322:	4808      	ldr	r0, [pc, #32]	; (8010344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010324:	f7fc fd90 	bl	800ce48 <USBD_GetString>
 8010328:	e004      	b.n	8010334 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801032a:	683a      	ldr	r2, [r7, #0]
 801032c:	4904      	ldr	r1, [pc, #16]	; (8010340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801032e:	4805      	ldr	r0, [pc, #20]	; (8010344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010330:	f7fc fd8a 	bl	800ce48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010334:	4b02      	ldr	r3, [pc, #8]	; (8010340 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010336:	4618      	mov	r0, r3
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	2000d9b4 	.word	0x2000d9b4
 8010344:	08015634 	.word	0x08015634

08010348 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	4603      	mov	r3, r0
 8010350:	6039      	str	r1, [r7, #0]
 8010352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	220c      	movs	r2, #12
 8010358:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801035a:	4b03      	ldr	r3, [pc, #12]	; (8010368 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801035c:	4618      	mov	r0, r3
 801035e:	370c      	adds	r7, #12
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr
 8010368:	200000e0 	.word	0x200000e0

0801036c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010372:	4b0f      	ldr	r3, [pc, #60]	; (80103b0 <Get_SerialNum+0x44>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010378:	4b0e      	ldr	r3, [pc, #56]	; (80103b4 <Get_SerialNum+0x48>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801037e:	4b0e      	ldr	r3, [pc, #56]	; (80103b8 <Get_SerialNum+0x4c>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	4413      	add	r3, r2
 801038a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d009      	beq.n	80103a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010392:	2208      	movs	r2, #8
 8010394:	4909      	ldr	r1, [pc, #36]	; (80103bc <Get_SerialNum+0x50>)
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f000 f814 	bl	80103c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801039c:	2204      	movs	r2, #4
 801039e:	4908      	ldr	r1, [pc, #32]	; (80103c0 <Get_SerialNum+0x54>)
 80103a0:	68b8      	ldr	r0, [r7, #8]
 80103a2:	f000 f80f 	bl	80103c4 <IntToUnicode>
  }
}
 80103a6:	bf00      	nop
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	1fff7590 	.word	0x1fff7590
 80103b4:	1fff7594 	.word	0x1fff7594
 80103b8:	1fff7598 	.word	0x1fff7598
 80103bc:	200000f2 	.word	0x200000f2
 80103c0:	20000102 	.word	0x20000102

080103c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b087      	sub	sp, #28
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	4613      	mov	r3, r2
 80103d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80103d2:	2300      	movs	r3, #0
 80103d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80103d6:	2300      	movs	r3, #0
 80103d8:	75fb      	strb	r3, [r7, #23]
 80103da:	e027      	b.n	801042c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	0f1b      	lsrs	r3, r3, #28
 80103e0:	2b09      	cmp	r3, #9
 80103e2:	d80b      	bhi.n	80103fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	0f1b      	lsrs	r3, r3, #28
 80103e8:	b2da      	uxtb	r2, r3
 80103ea:	7dfb      	ldrb	r3, [r7, #23]
 80103ec:	005b      	lsls	r3, r3, #1
 80103ee:	4619      	mov	r1, r3
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	440b      	add	r3, r1
 80103f4:	3230      	adds	r2, #48	; 0x30
 80103f6:	b2d2      	uxtb	r2, r2
 80103f8:	701a      	strb	r2, [r3, #0]
 80103fa:	e00a      	b.n	8010412 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	0f1b      	lsrs	r3, r3, #28
 8010400:	b2da      	uxtb	r2, r3
 8010402:	7dfb      	ldrb	r3, [r7, #23]
 8010404:	005b      	lsls	r3, r3, #1
 8010406:	4619      	mov	r1, r3
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	440b      	add	r3, r1
 801040c:	3237      	adds	r2, #55	; 0x37
 801040e:	b2d2      	uxtb	r2, r2
 8010410:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	011b      	lsls	r3, r3, #4
 8010416:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010418:	7dfb      	ldrb	r3, [r7, #23]
 801041a:	005b      	lsls	r3, r3, #1
 801041c:	3301      	adds	r3, #1
 801041e:	68ba      	ldr	r2, [r7, #8]
 8010420:	4413      	add	r3, r2
 8010422:	2200      	movs	r2, #0
 8010424:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010426:	7dfb      	ldrb	r3, [r7, #23]
 8010428:	3301      	adds	r3, #1
 801042a:	75fb      	strb	r3, [r7, #23]
 801042c:	7dfa      	ldrb	r2, [r7, #23]
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	429a      	cmp	r2, r3
 8010432:	d3d3      	bcc.n	80103dc <IntToUnicode+0x18>
  }
}
 8010434:	bf00      	nop
 8010436:	bf00      	nop
 8010438:	371c      	adds	r7, #28
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr
	...

08010444 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b0ac      	sub	sp, #176	; 0xb0
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801044c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010450:	2200      	movs	r2, #0
 8010452:	601a      	str	r2, [r3, #0]
 8010454:	605a      	str	r2, [r3, #4]
 8010456:	609a      	str	r2, [r3, #8]
 8010458:	60da      	str	r2, [r3, #12]
 801045a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801045c:	f107 0314 	add.w	r3, r7, #20
 8010460:	2288      	movs	r2, #136	; 0x88
 8010462:	2100      	movs	r1, #0
 8010464:	4618      	mov	r0, r3
 8010466:	f001 fbfa 	bl	8011c5e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010472:	d164      	bne.n	801053e <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010478:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801047a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801047e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010482:	f107 0314 	add.w	r3, r7, #20
 8010486:	4618      	mov	r0, r3
 8010488:	f7f5 fafe 	bl	8005a88 <HAL_RCCEx_PeriphCLKConfig>
 801048c:	4603      	mov	r3, r0
 801048e:	2b00      	cmp	r3, #0
 8010490:	d001      	beq.n	8010496 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8010492:	f7f0 ff51 	bl	8001338 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010496:	4b2c      	ldr	r3, [pc, #176]	; (8010548 <HAL_PCD_MspInit+0x104>)
 8010498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801049a:	4a2b      	ldr	r2, [pc, #172]	; (8010548 <HAL_PCD_MspInit+0x104>)
 801049c:	f043 0301 	orr.w	r3, r3, #1
 80104a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80104a2:	4b29      	ldr	r3, [pc, #164]	; (8010548 <HAL_PCD_MspInit+0x104>)
 80104a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104a6:	f003 0301 	and.w	r3, r3, #1
 80104aa:	613b      	str	r3, [r7, #16]
 80104ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80104ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80104b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104b6:	2302      	movs	r3, #2
 80104b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104bc:	2300      	movs	r3, #0
 80104be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104c2:	2303      	movs	r3, #3
 80104c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80104c8:	230a      	movs	r3, #10
 80104ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80104d2:	4619      	mov	r1, r3
 80104d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80104d8:	f7f2 faaa 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80104dc:	4b1a      	ldr	r3, [pc, #104]	; (8010548 <HAL_PCD_MspInit+0x104>)
 80104de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104e0:	4a19      	ldr	r2, [pc, #100]	; (8010548 <HAL_PCD_MspInit+0x104>)
 80104e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80104e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80104e8:	4b17      	ldr	r3, [pc, #92]	; (8010548 <HAL_PCD_MspInit+0x104>)
 80104ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80104f0:	60fb      	str	r3, [r7, #12]
 80104f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80104f4:	4b14      	ldr	r3, [pc, #80]	; (8010548 <HAL_PCD_MspInit+0x104>)
 80104f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d114      	bne.n	801052a <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010500:	4b11      	ldr	r3, [pc, #68]	; (8010548 <HAL_PCD_MspInit+0x104>)
 8010502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010504:	4a10      	ldr	r2, [pc, #64]	; (8010548 <HAL_PCD_MspInit+0x104>)
 8010506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801050a:	6593      	str	r3, [r2, #88]	; 0x58
 801050c:	4b0e      	ldr	r3, [pc, #56]	; (8010548 <HAL_PCD_MspInit+0x104>)
 801050e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010514:	60bb      	str	r3, [r7, #8]
 8010516:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8010518:	f7f4 fc8c 	bl	8004e34 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801051c:	4b0a      	ldr	r3, [pc, #40]	; (8010548 <HAL_PCD_MspInit+0x104>)
 801051e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010520:	4a09      	ldr	r2, [pc, #36]	; (8010548 <HAL_PCD_MspInit+0x104>)
 8010522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010526:	6593      	str	r3, [r2, #88]	; 0x58
 8010528:	e001      	b.n	801052e <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801052a:	f7f4 fc83 	bl	8004e34 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801052e:	2200      	movs	r2, #0
 8010530:	2100      	movs	r1, #0
 8010532:	2043      	movs	r0, #67	; 0x43
 8010534:	f7f2 f80d 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010538:	2043      	movs	r0, #67	; 0x43
 801053a:	f7f2 f826 	bl	800258a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801053e:	bf00      	nop
 8010540:	37b0      	adds	r7, #176	; 0xb0
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop
 8010548:	40021000 	.word	0x40021000

0801054c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010560:	4619      	mov	r1, r3
 8010562:	4610      	mov	r0, r2
 8010564:	f7fb fae1 	bl	800bb2a <USBD_LL_SetupStage>
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	460b      	mov	r3, r1
 801057a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010582:	78fa      	ldrb	r2, [r7, #3]
 8010584:	6879      	ldr	r1, [r7, #4]
 8010586:	4613      	mov	r3, r2
 8010588:	00db      	lsls	r3, r3, #3
 801058a:	4413      	add	r3, r2
 801058c:	009b      	lsls	r3, r3, #2
 801058e:	440b      	add	r3, r1
 8010590:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	78fb      	ldrb	r3, [r7, #3]
 8010598:	4619      	mov	r1, r3
 801059a:	f7fb fb1b 	bl	800bbd4 <USBD_LL_DataOutStage>
}
 801059e:	bf00      	nop
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}

080105a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105a6:	b580      	push	{r7, lr}
 80105a8:	b082      	sub	sp, #8
 80105aa:	af00      	add	r7, sp, #0
 80105ac:	6078      	str	r0, [r7, #4]
 80105ae:	460b      	mov	r3, r1
 80105b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80105b8:	78fa      	ldrb	r2, [r7, #3]
 80105ba:	6879      	ldr	r1, [r7, #4]
 80105bc:	4613      	mov	r3, r2
 80105be:	00db      	lsls	r3, r3, #3
 80105c0:	4413      	add	r3, r2
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	440b      	add	r3, r1
 80105c6:	3348      	adds	r3, #72	; 0x48
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	78fb      	ldrb	r3, [r7, #3]
 80105cc:	4619      	mov	r1, r3
 80105ce:	f7fb fbb4 	bl	800bd3a <USBD_LL_DataInStage>
}
 80105d2:	bf00      	nop
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105da:	b580      	push	{r7, lr}
 80105dc:	b082      	sub	sp, #8
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fb fcee 	bl	800bfca <USBD_LL_SOF>
}
 80105ee:	bf00      	nop
 80105f0:	3708      	adds	r7, #8
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}

080105f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b084      	sub	sp, #16
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80105fe:	2301      	movs	r3, #1
 8010600:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	691b      	ldr	r3, [r3, #16]
 8010606:	2b02      	cmp	r3, #2
 8010608:	d001      	beq.n	801060e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801060a:	f7f0 fe95 	bl	8001338 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010614:	7bfa      	ldrb	r2, [r7, #15]
 8010616:	4611      	mov	r1, r2
 8010618:	4618      	mov	r0, r3
 801061a:	f7fb fc92 	bl	800bf42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010624:	4618      	mov	r0, r3
 8010626:	f7fb fc3a 	bl	800be9e <USBD_LL_Reset>
}
 801062a:	bf00      	nop
 801062c:	3710      	adds	r7, #16
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
	...

08010634 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	687a      	ldr	r2, [r7, #4]
 8010648:	6812      	ldr	r2, [r2, #0]
 801064a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801064e:	f043 0301 	orr.w	r3, r3, #1
 8010652:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801065a:	4618      	mov	r0, r3
 801065c:	f7fb fc81 	bl	800bf62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6a1b      	ldr	r3, [r3, #32]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d005      	beq.n	8010674 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010668:	4b04      	ldr	r3, [pc, #16]	; (801067c <HAL_PCD_SuspendCallback+0x48>)
 801066a:	691b      	ldr	r3, [r3, #16]
 801066c:	4a03      	ldr	r2, [pc, #12]	; (801067c <HAL_PCD_SuspendCallback+0x48>)
 801066e:	f043 0306 	orr.w	r3, r3, #6
 8010672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010674:	bf00      	nop
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	e000ed00 	.word	0xe000ed00

08010680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	687a      	ldr	r2, [r7, #4]
 8010694:	6812      	ldr	r2, [r2, #0]
 8010696:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801069a:	f023 0301 	bic.w	r3, r3, #1
 801069e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6a1b      	ldr	r3, [r3, #32]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d007      	beq.n	80106b8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80106a8:	4b08      	ldr	r3, [pc, #32]	; (80106cc <HAL_PCD_ResumeCallback+0x4c>)
 80106aa:	691b      	ldr	r3, [r3, #16]
 80106ac:	4a07      	ldr	r2, [pc, #28]	; (80106cc <HAL_PCD_ResumeCallback+0x4c>)
 80106ae:	f023 0306 	bic.w	r3, r3, #6
 80106b2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80106b4:	f000 faf6 	bl	8010ca4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fb fc6b 	bl	800bf9a <USBD_LL_Resume>
}
 80106c4:	bf00      	nop
 80106c6:	3708      	adds	r7, #8
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	e000ed00 	.word	0xe000ed00

080106d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	460b      	mov	r3, r1
 80106da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106e2:	78fa      	ldrb	r2, [r7, #3]
 80106e4:	4611      	mov	r1, r2
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7fb fcc1 	bl	800c06e <USBD_LL_IsoOUTIncomplete>
}
 80106ec:	bf00      	nop
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b082      	sub	sp, #8
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	460b      	mov	r3, r1
 80106fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010706:	78fa      	ldrb	r2, [r7, #3]
 8010708:	4611      	mov	r1, r2
 801070a:	4618      	mov	r0, r3
 801070c:	f7fb fc7d 	bl	800c00a <USBD_LL_IsoINIncomplete>
}
 8010710:	bf00      	nop
 8010712:	3708      	adds	r7, #8
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010726:	4618      	mov	r0, r3
 8010728:	f7fb fcd3 	bl	800c0d2 <USBD_LL_DevConnected>
}
 801072c:	bf00      	nop
 801072e:	3708      	adds	r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010742:	4618      	mov	r0, r3
 8010744:	f7fb fcd0 	bl	800c0e8 <USBD_LL_DevDisconnected>
}
 8010748:	bf00      	nop
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d13c      	bne.n	80107da <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010760:	4a20      	ldr	r2, [pc, #128]	; (80107e4 <USBD_LL_Init+0x94>)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	4a1e      	ldr	r2, [pc, #120]	; (80107e4 <USBD_LL_Init+0x94>)
 801076c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010770:	4b1c      	ldr	r3, [pc, #112]	; (80107e4 <USBD_LL_Init+0x94>)
 8010772:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010776:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010778:	4b1a      	ldr	r3, [pc, #104]	; (80107e4 <USBD_LL_Init+0x94>)
 801077a:	2206      	movs	r2, #6
 801077c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801077e:	4b19      	ldr	r3, [pc, #100]	; (80107e4 <USBD_LL_Init+0x94>)
 8010780:	2202      	movs	r2, #2
 8010782:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010784:	4b17      	ldr	r3, [pc, #92]	; (80107e4 <USBD_LL_Init+0x94>)
 8010786:	2202      	movs	r2, #2
 8010788:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801078a:	4b16      	ldr	r3, [pc, #88]	; (80107e4 <USBD_LL_Init+0x94>)
 801078c:	2200      	movs	r2, #0
 801078e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010790:	4b14      	ldr	r3, [pc, #80]	; (80107e4 <USBD_LL_Init+0x94>)
 8010792:	2200      	movs	r2, #0
 8010794:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010796:	4b13      	ldr	r3, [pc, #76]	; (80107e4 <USBD_LL_Init+0x94>)
 8010798:	2200      	movs	r2, #0
 801079a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801079c:	4b11      	ldr	r3, [pc, #68]	; (80107e4 <USBD_LL_Init+0x94>)
 801079e:	2200      	movs	r2, #0
 80107a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80107a2:	4b10      	ldr	r3, [pc, #64]	; (80107e4 <USBD_LL_Init+0x94>)
 80107a4:	2200      	movs	r2, #0
 80107a6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80107a8:	4b0e      	ldr	r3, [pc, #56]	; (80107e4 <USBD_LL_Init+0x94>)
 80107aa:	2200      	movs	r2, #0
 80107ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80107ae:	480d      	ldr	r0, [pc, #52]	; (80107e4 <USBD_LL_Init+0x94>)
 80107b0:	f7f3 f935 	bl	8003a1e <HAL_PCD_Init>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d001      	beq.n	80107be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80107ba:	f7f0 fdbd 	bl	8001338 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80107be:	2180      	movs	r1, #128	; 0x80
 80107c0:	4808      	ldr	r0, [pc, #32]	; (80107e4 <USBD_LL_Init+0x94>)
 80107c2:	f7f4 fa9e 	bl	8004d02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80107c6:	2240      	movs	r2, #64	; 0x40
 80107c8:	2100      	movs	r1, #0
 80107ca:	4806      	ldr	r0, [pc, #24]	; (80107e4 <USBD_LL_Init+0x94>)
 80107cc:	f7f4 fa52 	bl	8004c74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80107d0:	2280      	movs	r2, #128	; 0x80
 80107d2:	2101      	movs	r1, #1
 80107d4:	4803      	ldr	r0, [pc, #12]	; (80107e4 <USBD_LL_Init+0x94>)
 80107d6:	f7f4 fa4d 	bl	8004c74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80107da:	2300      	movs	r3, #0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	2000dbb4 	.word	0x2000dbb4

080107e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107f4:	2300      	movs	r3, #0
 80107f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107fe:	4618      	mov	r0, r3
 8010800:	f7f3 fa31 	bl	8003c66 <HAL_PCD_Start>
 8010804:	4603      	mov	r3, r0
 8010806:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010808:	7bbb      	ldrb	r3, [r7, #14]
 801080a:	2b03      	cmp	r3, #3
 801080c:	d816      	bhi.n	801083c <USBD_LL_Start+0x54>
 801080e:	a201      	add	r2, pc, #4	; (adr r2, 8010814 <USBD_LL_Start+0x2c>)
 8010810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010814:	08010825 	.word	0x08010825
 8010818:	0801082b 	.word	0x0801082b
 801081c:	08010831 	.word	0x08010831
 8010820:	08010837 	.word	0x08010837
    case HAL_OK :
      usb_status = USBD_OK;
 8010824:	2300      	movs	r3, #0
 8010826:	73fb      	strb	r3, [r7, #15]
    break;
 8010828:	e00b      	b.n	8010842 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801082a:	2303      	movs	r3, #3
 801082c:	73fb      	strb	r3, [r7, #15]
    break;
 801082e:	e008      	b.n	8010842 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010830:	2301      	movs	r3, #1
 8010832:	73fb      	strb	r3, [r7, #15]
    break;
 8010834:	e005      	b.n	8010842 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010836:	2303      	movs	r3, #3
 8010838:	73fb      	strb	r3, [r7, #15]
    break;
 801083a:	e002      	b.n	8010842 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801083c:	2303      	movs	r3, #3
 801083e:	73fb      	strb	r3, [r7, #15]
    break;
 8010840:	bf00      	nop
  }
  return usb_status;
 8010842:	7bfb      	ldrb	r3, [r7, #15]
}
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b084      	sub	sp, #16
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	4608      	mov	r0, r1
 8010856:	4611      	mov	r1, r2
 8010858:	461a      	mov	r2, r3
 801085a:	4603      	mov	r3, r0
 801085c:	70fb      	strb	r3, [r7, #3]
 801085e:	460b      	mov	r3, r1
 8010860:	70bb      	strb	r3, [r7, #2]
 8010862:	4613      	mov	r3, r2
 8010864:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010866:	2300      	movs	r3, #0
 8010868:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801086a:	2300      	movs	r3, #0
 801086c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010874:	78bb      	ldrb	r3, [r7, #2]
 8010876:	883a      	ldrh	r2, [r7, #0]
 8010878:	78f9      	ldrb	r1, [r7, #3]
 801087a:	f7f3 fedb 	bl	8004634 <HAL_PCD_EP_Open>
 801087e:	4603      	mov	r3, r0
 8010880:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010882:	7bbb      	ldrb	r3, [r7, #14]
 8010884:	2b03      	cmp	r3, #3
 8010886:	d817      	bhi.n	80108b8 <USBD_LL_OpenEP+0x6c>
 8010888:	a201      	add	r2, pc, #4	; (adr r2, 8010890 <USBD_LL_OpenEP+0x44>)
 801088a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801088e:	bf00      	nop
 8010890:	080108a1 	.word	0x080108a1
 8010894:	080108a7 	.word	0x080108a7
 8010898:	080108ad 	.word	0x080108ad
 801089c:	080108b3 	.word	0x080108b3
    case HAL_OK :
      usb_status = USBD_OK;
 80108a0:	2300      	movs	r3, #0
 80108a2:	73fb      	strb	r3, [r7, #15]
    break;
 80108a4:	e00b      	b.n	80108be <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108a6:	2303      	movs	r3, #3
 80108a8:	73fb      	strb	r3, [r7, #15]
    break;
 80108aa:	e008      	b.n	80108be <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108ac:	2301      	movs	r3, #1
 80108ae:	73fb      	strb	r3, [r7, #15]
    break;
 80108b0:	e005      	b.n	80108be <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108b2:	2303      	movs	r3, #3
 80108b4:	73fb      	strb	r3, [r7, #15]
    break;
 80108b6:	e002      	b.n	80108be <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80108b8:	2303      	movs	r3, #3
 80108ba:	73fb      	strb	r3, [r7, #15]
    break;
 80108bc:	bf00      	nop
  }
  return usb_status;
 80108be:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3710      	adds	r7, #16
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	460b      	mov	r3, r1
 80108d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108d4:	2300      	movs	r3, #0
 80108d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108d8:	2300      	movs	r3, #0
 80108da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108e2:	78fa      	ldrb	r2, [r7, #3]
 80108e4:	4611      	mov	r1, r2
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7f3 ff0c 	bl	8004704 <HAL_PCD_EP_Close>
 80108ec:	4603      	mov	r3, r0
 80108ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80108f0:	7bbb      	ldrb	r3, [r7, #14]
 80108f2:	2b03      	cmp	r3, #3
 80108f4:	d816      	bhi.n	8010924 <USBD_LL_CloseEP+0x5c>
 80108f6:	a201      	add	r2, pc, #4	; (adr r2, 80108fc <USBD_LL_CloseEP+0x34>)
 80108f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108fc:	0801090d 	.word	0x0801090d
 8010900:	08010913 	.word	0x08010913
 8010904:	08010919 	.word	0x08010919
 8010908:	0801091f 	.word	0x0801091f
    case HAL_OK :
      usb_status = USBD_OK;
 801090c:	2300      	movs	r3, #0
 801090e:	73fb      	strb	r3, [r7, #15]
    break;
 8010910:	e00b      	b.n	801092a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010912:	2303      	movs	r3, #3
 8010914:	73fb      	strb	r3, [r7, #15]
    break;
 8010916:	e008      	b.n	801092a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010918:	2301      	movs	r3, #1
 801091a:	73fb      	strb	r3, [r7, #15]
    break;
 801091c:	e005      	b.n	801092a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801091e:	2303      	movs	r3, #3
 8010920:	73fb      	strb	r3, [r7, #15]
    break;
 8010922:	e002      	b.n	801092a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010924:	2303      	movs	r3, #3
 8010926:	73fb      	strb	r3, [r7, #15]
    break;
 8010928:	bf00      	nop
  }
  return usb_status;
 801092a:	7bfb      	ldrb	r3, [r7, #15]
}
 801092c:	4618      	mov	r0, r3
 801092e:	3710      	adds	r7, #16
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
 801093c:	460b      	mov	r3, r1
 801093e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010940:	2300      	movs	r3, #0
 8010942:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010944:	2300      	movs	r3, #0
 8010946:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801094e:	78fa      	ldrb	r2, [r7, #3]
 8010950:	4611      	mov	r1, r2
 8010952:	4618      	mov	r0, r3
 8010954:	f7f3 ff9b 	bl	800488e <HAL_PCD_EP_SetStall>
 8010958:	4603      	mov	r3, r0
 801095a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801095c:	7bbb      	ldrb	r3, [r7, #14]
 801095e:	2b03      	cmp	r3, #3
 8010960:	d816      	bhi.n	8010990 <USBD_LL_StallEP+0x5c>
 8010962:	a201      	add	r2, pc, #4	; (adr r2, 8010968 <USBD_LL_StallEP+0x34>)
 8010964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010968:	08010979 	.word	0x08010979
 801096c:	0801097f 	.word	0x0801097f
 8010970:	08010985 	.word	0x08010985
 8010974:	0801098b 	.word	0x0801098b
    case HAL_OK :
      usb_status = USBD_OK;
 8010978:	2300      	movs	r3, #0
 801097a:	73fb      	strb	r3, [r7, #15]
    break;
 801097c:	e00b      	b.n	8010996 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801097e:	2303      	movs	r3, #3
 8010980:	73fb      	strb	r3, [r7, #15]
    break;
 8010982:	e008      	b.n	8010996 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010984:	2301      	movs	r3, #1
 8010986:	73fb      	strb	r3, [r7, #15]
    break;
 8010988:	e005      	b.n	8010996 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801098a:	2303      	movs	r3, #3
 801098c:	73fb      	strb	r3, [r7, #15]
    break;
 801098e:	e002      	b.n	8010996 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010990:	2303      	movs	r3, #3
 8010992:	73fb      	strb	r3, [r7, #15]
    break;
 8010994:	bf00      	nop
  }
  return usb_status;
 8010996:	7bfb      	ldrb	r3, [r7, #15]
}
 8010998:	4618      	mov	r0, r3
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	460b      	mov	r3, r1
 80109aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109ac:	2300      	movs	r3, #0
 80109ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109b0:	2300      	movs	r3, #0
 80109b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80109ba:	78fa      	ldrb	r2, [r7, #3]
 80109bc:	4611      	mov	r1, r2
 80109be:	4618      	mov	r0, r3
 80109c0:	f7f3 ffc7 	bl	8004952 <HAL_PCD_EP_ClrStall>
 80109c4:	4603      	mov	r3, r0
 80109c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80109c8:	7bbb      	ldrb	r3, [r7, #14]
 80109ca:	2b03      	cmp	r3, #3
 80109cc:	d816      	bhi.n	80109fc <USBD_LL_ClearStallEP+0x5c>
 80109ce:	a201      	add	r2, pc, #4	; (adr r2, 80109d4 <USBD_LL_ClearStallEP+0x34>)
 80109d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d4:	080109e5 	.word	0x080109e5
 80109d8:	080109eb 	.word	0x080109eb
 80109dc:	080109f1 	.word	0x080109f1
 80109e0:	080109f7 	.word	0x080109f7
    case HAL_OK :
      usb_status = USBD_OK;
 80109e4:	2300      	movs	r3, #0
 80109e6:	73fb      	strb	r3, [r7, #15]
    break;
 80109e8:	e00b      	b.n	8010a02 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109ea:	2303      	movs	r3, #3
 80109ec:	73fb      	strb	r3, [r7, #15]
    break;
 80109ee:	e008      	b.n	8010a02 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109f0:	2301      	movs	r3, #1
 80109f2:	73fb      	strb	r3, [r7, #15]
    break;
 80109f4:	e005      	b.n	8010a02 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109f6:	2303      	movs	r3, #3
 80109f8:	73fb      	strb	r3, [r7, #15]
    break;
 80109fa:	e002      	b.n	8010a02 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80109fc:	2303      	movs	r3, #3
 80109fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010a00:	bf00      	nop
  }
  return usb_status;
 8010a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3710      	adds	r7, #16
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b085      	sub	sp, #20
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	460b      	mov	r3, r1
 8010a16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	da0b      	bge.n	8010a40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a28:	78fb      	ldrb	r3, [r7, #3]
 8010a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a2e:	68f9      	ldr	r1, [r7, #12]
 8010a30:	4613      	mov	r3, r2
 8010a32:	00db      	lsls	r3, r3, #3
 8010a34:	4413      	add	r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	440b      	add	r3, r1
 8010a3a:	333e      	adds	r3, #62	; 0x3e
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	e00b      	b.n	8010a58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a40:	78fb      	ldrb	r3, [r7, #3]
 8010a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a46:	68f9      	ldr	r1, [r7, #12]
 8010a48:	4613      	mov	r3, r2
 8010a4a:	00db      	lsls	r3, r3, #3
 8010a4c:	4413      	add	r3, r2
 8010a4e:	009b      	lsls	r3, r3, #2
 8010a50:	440b      	add	r3, r1
 8010a52:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010a56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3714      	adds	r7, #20
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b084      	sub	sp, #16
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a70:	2300      	movs	r3, #0
 8010a72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a74:	2300      	movs	r3, #0
 8010a76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a7e:	78fa      	ldrb	r2, [r7, #3]
 8010a80:	4611      	mov	r1, r2
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7f3 fdb1 	bl	80045ea <HAL_PCD_SetAddress>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010a8c:	7bbb      	ldrb	r3, [r7, #14]
 8010a8e:	2b03      	cmp	r3, #3
 8010a90:	d816      	bhi.n	8010ac0 <USBD_LL_SetUSBAddress+0x5c>
 8010a92:	a201      	add	r2, pc, #4	; (adr r2, 8010a98 <USBD_LL_SetUSBAddress+0x34>)
 8010a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a98:	08010aa9 	.word	0x08010aa9
 8010a9c:	08010aaf 	.word	0x08010aaf
 8010aa0:	08010ab5 	.word	0x08010ab5
 8010aa4:	08010abb 	.word	0x08010abb
    case HAL_OK :
      usb_status = USBD_OK;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8010aac:	e00b      	b.n	8010ac6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010aae:	2303      	movs	r3, #3
 8010ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ab2:	e008      	b.n	8010ac6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ab8:	e005      	b.n	8010ac6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010aba:	2303      	movs	r3, #3
 8010abc:	73fb      	strb	r3, [r7, #15]
    break;
 8010abe:	e002      	b.n	8010ac6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010ac0:	2303      	movs	r3, #3
 8010ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ac4:	bf00      	nop
  }
  return usb_status;
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3710      	adds	r7, #16
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b086      	sub	sp, #24
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	607a      	str	r2, [r7, #4]
 8010ada:	603b      	str	r3, [r7, #0]
 8010adc:	460b      	mov	r3, r1
 8010ade:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010aee:	7af9      	ldrb	r1, [r7, #11]
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	f7f3 fe9a 	bl	800482c <HAL_PCD_EP_Transmit>
 8010af8:	4603      	mov	r3, r0
 8010afa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010afc:	7dbb      	ldrb	r3, [r7, #22]
 8010afe:	2b03      	cmp	r3, #3
 8010b00:	d816      	bhi.n	8010b30 <USBD_LL_Transmit+0x60>
 8010b02:	a201      	add	r2, pc, #4	; (adr r2, 8010b08 <USBD_LL_Transmit+0x38>)
 8010b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b08:	08010b19 	.word	0x08010b19
 8010b0c:	08010b1f 	.word	0x08010b1f
 8010b10:	08010b25 	.word	0x08010b25
 8010b14:	08010b2b 	.word	0x08010b2b
    case HAL_OK :
      usb_status = USBD_OK;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	75fb      	strb	r3, [r7, #23]
    break;
 8010b1c:	e00b      	b.n	8010b36 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b1e:	2303      	movs	r3, #3
 8010b20:	75fb      	strb	r3, [r7, #23]
    break;
 8010b22:	e008      	b.n	8010b36 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b24:	2301      	movs	r3, #1
 8010b26:	75fb      	strb	r3, [r7, #23]
    break;
 8010b28:	e005      	b.n	8010b36 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b2a:	2303      	movs	r3, #3
 8010b2c:	75fb      	strb	r3, [r7, #23]
    break;
 8010b2e:	e002      	b.n	8010b36 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010b30:	2303      	movs	r3, #3
 8010b32:	75fb      	strb	r3, [r7, #23]
    break;
 8010b34:	bf00      	nop
  }
  return usb_status;
 8010b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3718      	adds	r7, #24
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b086      	sub	sp, #24
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	607a      	str	r2, [r7, #4]
 8010b4a:	603b      	str	r3, [r7, #0]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b54:	2300      	movs	r3, #0
 8010b56:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010b5e:	7af9      	ldrb	r1, [r7, #11]
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	f7f3 fe18 	bl	8004798 <HAL_PCD_EP_Receive>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010b6c:	7dbb      	ldrb	r3, [r7, #22]
 8010b6e:	2b03      	cmp	r3, #3
 8010b70:	d816      	bhi.n	8010ba0 <USBD_LL_PrepareReceive+0x60>
 8010b72:	a201      	add	r2, pc, #4	; (adr r2, 8010b78 <USBD_LL_PrepareReceive+0x38>)
 8010b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b78:	08010b89 	.word	0x08010b89
 8010b7c:	08010b8f 	.word	0x08010b8f
 8010b80:	08010b95 	.word	0x08010b95
 8010b84:	08010b9b 	.word	0x08010b9b
    case HAL_OK :
      usb_status = USBD_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	75fb      	strb	r3, [r7, #23]
    break;
 8010b8c:	e00b      	b.n	8010ba6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b8e:	2303      	movs	r3, #3
 8010b90:	75fb      	strb	r3, [r7, #23]
    break;
 8010b92:	e008      	b.n	8010ba6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b94:	2301      	movs	r3, #1
 8010b96:	75fb      	strb	r3, [r7, #23]
    break;
 8010b98:	e005      	b.n	8010ba6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b9a:	2303      	movs	r3, #3
 8010b9c:	75fb      	strb	r3, [r7, #23]
    break;
 8010b9e:	e002      	b.n	8010ba6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010ba0:	2303      	movs	r3, #3
 8010ba2:	75fb      	strb	r3, [r7, #23]
    break;
 8010ba4:	bf00      	nop
  }
  return usb_status;
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3718      	adds	r7, #24
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	460b      	mov	r3, r1
 8010bba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010bc2:	78fa      	ldrb	r2, [r7, #3]
 8010bc4:	4611      	mov	r1, r2
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7f3 fe18 	bl	80047fc <HAL_PCD_EP_GetRxCount>
 8010bcc:	4603      	mov	r3, r0
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
	...

08010bd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	460b      	mov	r3, r1
 8010be2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010be4:	78fb      	ldrb	r3, [r7, #3]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d002      	beq.n	8010bf0 <HAL_PCDEx_LPM_Callback+0x18>
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d01f      	beq.n	8010c2e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010bee:	e03b      	b.n	8010c68 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6a1b      	ldr	r3, [r3, #32]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d007      	beq.n	8010c08 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010bf8:	f000 f854 	bl	8010ca4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010bfc:	4b1c      	ldr	r3, [pc, #112]	; (8010c70 <HAL_PCDEx_LPM_Callback+0x98>)
 8010bfe:	691b      	ldr	r3, [r3, #16]
 8010c00:	4a1b      	ldr	r2, [pc, #108]	; (8010c70 <HAL_PCDEx_LPM_Callback+0x98>)
 8010c02:	f023 0306 	bic.w	r3, r3, #6
 8010c06:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	6812      	ldr	r2, [r2, #0]
 8010c16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c1a:	f023 0301 	bic.w	r3, r3, #1
 8010c1e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fb f9b7 	bl	800bf9a <USBD_LL_Resume>
    break;
 8010c2c:	e01c      	b.n	8010c68 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	6812      	ldr	r2, [r2, #0]
 8010c3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c40:	f043 0301 	orr.w	r3, r3, #1
 8010c44:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fb f988 	bl	800bf62 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6a1b      	ldr	r3, [r3, #32]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d005      	beq.n	8010c66 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c5a:	4b05      	ldr	r3, [pc, #20]	; (8010c70 <HAL_PCDEx_LPM_Callback+0x98>)
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	4a04      	ldr	r2, [pc, #16]	; (8010c70 <HAL_PCDEx_LPM_Callback+0x98>)
 8010c60:	f043 0306 	orr.w	r3, r3, #6
 8010c64:	6113      	str	r3, [r2, #16]
    break;
 8010c66:	bf00      	nop
}
 8010c68:	bf00      	nop
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	e000ed00 	.word	0xe000ed00

08010c74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b083      	sub	sp, #12
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010c7c:	4b03      	ldr	r3, [pc, #12]	; (8010c8c <USBD_static_malloc+0x18>)
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	370c      	adds	r7, #12
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	2000e0c0 	.word	0x2000e0c0

08010c90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]

}
 8010c98:	bf00      	nop
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010ca8:	f7f0 f99c 	bl	8000fe4 <SystemClock_Config>
}
 8010cac:	bf00      	nop
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <__cvt>:
 8010cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb4:	ec55 4b10 	vmov	r4, r5, d0
 8010cb8:	2d00      	cmp	r5, #0
 8010cba:	460e      	mov	r6, r1
 8010cbc:	4619      	mov	r1, r3
 8010cbe:	462b      	mov	r3, r5
 8010cc0:	bfbb      	ittet	lt
 8010cc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010cc6:	461d      	movlt	r5, r3
 8010cc8:	2300      	movge	r3, #0
 8010cca:	232d      	movlt	r3, #45	; 0x2d
 8010ccc:	700b      	strb	r3, [r1, #0]
 8010cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010cd4:	4691      	mov	r9, r2
 8010cd6:	f023 0820 	bic.w	r8, r3, #32
 8010cda:	bfbc      	itt	lt
 8010cdc:	4622      	movlt	r2, r4
 8010cde:	4614      	movlt	r4, r2
 8010ce0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010ce4:	d005      	beq.n	8010cf2 <__cvt+0x42>
 8010ce6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010cea:	d100      	bne.n	8010cee <__cvt+0x3e>
 8010cec:	3601      	adds	r6, #1
 8010cee:	2102      	movs	r1, #2
 8010cf0:	e000      	b.n	8010cf4 <__cvt+0x44>
 8010cf2:	2103      	movs	r1, #3
 8010cf4:	ab03      	add	r3, sp, #12
 8010cf6:	9301      	str	r3, [sp, #4]
 8010cf8:	ab02      	add	r3, sp, #8
 8010cfa:	9300      	str	r3, [sp, #0]
 8010cfc:	ec45 4b10 	vmov	d0, r4, r5
 8010d00:	4653      	mov	r3, sl
 8010d02:	4632      	mov	r2, r6
 8010d04:	f001 f8c8 	bl	8011e98 <_dtoa_r>
 8010d08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010d0c:	4607      	mov	r7, r0
 8010d0e:	d102      	bne.n	8010d16 <__cvt+0x66>
 8010d10:	f019 0f01 	tst.w	r9, #1
 8010d14:	d022      	beq.n	8010d5c <__cvt+0xac>
 8010d16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010d1a:	eb07 0906 	add.w	r9, r7, r6
 8010d1e:	d110      	bne.n	8010d42 <__cvt+0x92>
 8010d20:	783b      	ldrb	r3, [r7, #0]
 8010d22:	2b30      	cmp	r3, #48	; 0x30
 8010d24:	d10a      	bne.n	8010d3c <__cvt+0x8c>
 8010d26:	2200      	movs	r2, #0
 8010d28:	2300      	movs	r3, #0
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	4629      	mov	r1, r5
 8010d2e:	f7ef fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d32:	b918      	cbnz	r0, 8010d3c <__cvt+0x8c>
 8010d34:	f1c6 0601 	rsb	r6, r6, #1
 8010d38:	f8ca 6000 	str.w	r6, [sl]
 8010d3c:	f8da 3000 	ldr.w	r3, [sl]
 8010d40:	4499      	add	r9, r3
 8010d42:	2200      	movs	r2, #0
 8010d44:	2300      	movs	r3, #0
 8010d46:	4620      	mov	r0, r4
 8010d48:	4629      	mov	r1, r5
 8010d4a:	f7ef febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d4e:	b108      	cbz	r0, 8010d54 <__cvt+0xa4>
 8010d50:	f8cd 900c 	str.w	r9, [sp, #12]
 8010d54:	2230      	movs	r2, #48	; 0x30
 8010d56:	9b03      	ldr	r3, [sp, #12]
 8010d58:	454b      	cmp	r3, r9
 8010d5a:	d307      	bcc.n	8010d6c <__cvt+0xbc>
 8010d5c:	9b03      	ldr	r3, [sp, #12]
 8010d5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d60:	1bdb      	subs	r3, r3, r7
 8010d62:	4638      	mov	r0, r7
 8010d64:	6013      	str	r3, [r2, #0]
 8010d66:	b004      	add	sp, #16
 8010d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d6c:	1c59      	adds	r1, r3, #1
 8010d6e:	9103      	str	r1, [sp, #12]
 8010d70:	701a      	strb	r2, [r3, #0]
 8010d72:	e7f0      	b.n	8010d56 <__cvt+0xa6>

08010d74 <__exponent>:
 8010d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d76:	4603      	mov	r3, r0
 8010d78:	2900      	cmp	r1, #0
 8010d7a:	bfb8      	it	lt
 8010d7c:	4249      	neglt	r1, r1
 8010d7e:	f803 2b02 	strb.w	r2, [r3], #2
 8010d82:	bfb4      	ite	lt
 8010d84:	222d      	movlt	r2, #45	; 0x2d
 8010d86:	222b      	movge	r2, #43	; 0x2b
 8010d88:	2909      	cmp	r1, #9
 8010d8a:	7042      	strb	r2, [r0, #1]
 8010d8c:	dd2a      	ble.n	8010de4 <__exponent+0x70>
 8010d8e:	f10d 0207 	add.w	r2, sp, #7
 8010d92:	4617      	mov	r7, r2
 8010d94:	260a      	movs	r6, #10
 8010d96:	4694      	mov	ip, r2
 8010d98:	fb91 f5f6 	sdiv	r5, r1, r6
 8010d9c:	fb06 1415 	mls	r4, r6, r5, r1
 8010da0:	3430      	adds	r4, #48	; 0x30
 8010da2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010da6:	460c      	mov	r4, r1
 8010da8:	2c63      	cmp	r4, #99	; 0x63
 8010daa:	f102 32ff 	add.w	r2, r2, #4294967295
 8010dae:	4629      	mov	r1, r5
 8010db0:	dcf1      	bgt.n	8010d96 <__exponent+0x22>
 8010db2:	3130      	adds	r1, #48	; 0x30
 8010db4:	f1ac 0402 	sub.w	r4, ip, #2
 8010db8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010dbc:	1c41      	adds	r1, r0, #1
 8010dbe:	4622      	mov	r2, r4
 8010dc0:	42ba      	cmp	r2, r7
 8010dc2:	d30a      	bcc.n	8010dda <__exponent+0x66>
 8010dc4:	f10d 0209 	add.w	r2, sp, #9
 8010dc8:	eba2 020c 	sub.w	r2, r2, ip
 8010dcc:	42bc      	cmp	r4, r7
 8010dce:	bf88      	it	hi
 8010dd0:	2200      	movhi	r2, #0
 8010dd2:	4413      	add	r3, r2
 8010dd4:	1a18      	subs	r0, r3, r0
 8010dd6:	b003      	add	sp, #12
 8010dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dda:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010dde:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010de2:	e7ed      	b.n	8010dc0 <__exponent+0x4c>
 8010de4:	2330      	movs	r3, #48	; 0x30
 8010de6:	3130      	adds	r1, #48	; 0x30
 8010de8:	7083      	strb	r3, [r0, #2]
 8010dea:	70c1      	strb	r1, [r0, #3]
 8010dec:	1d03      	adds	r3, r0, #4
 8010dee:	e7f1      	b.n	8010dd4 <__exponent+0x60>

08010df0 <_printf_float>:
 8010df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df4:	ed2d 8b02 	vpush	{d8}
 8010df8:	b08d      	sub	sp, #52	; 0x34
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010e00:	4616      	mov	r6, r2
 8010e02:	461f      	mov	r7, r3
 8010e04:	4605      	mov	r5, r0
 8010e06:	f000 ff33 	bl	8011c70 <_localeconv_r>
 8010e0a:	f8d0 a000 	ldr.w	sl, [r0]
 8010e0e:	4650      	mov	r0, sl
 8010e10:	f7ef fa2e 	bl	8000270 <strlen>
 8010e14:	2300      	movs	r3, #0
 8010e16:	930a      	str	r3, [sp, #40]	; 0x28
 8010e18:	6823      	ldr	r3, [r4, #0]
 8010e1a:	9305      	str	r3, [sp, #20]
 8010e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8010e20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010e24:	3307      	adds	r3, #7
 8010e26:	f023 0307 	bic.w	r3, r3, #7
 8010e2a:	f103 0208 	add.w	r2, r3, #8
 8010e2e:	f8c8 2000 	str.w	r2, [r8]
 8010e32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e3a:	9307      	str	r3, [sp, #28]
 8010e3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010e40:	ee08 0a10 	vmov	s16, r0
 8010e44:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e4c:	4b9e      	ldr	r3, [pc, #632]	; (80110c8 <_printf_float+0x2d8>)
 8010e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e52:	f7ef fe6b 	bl	8000b2c <__aeabi_dcmpun>
 8010e56:	bb88      	cbnz	r0, 8010ebc <_printf_float+0xcc>
 8010e58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e5c:	4b9a      	ldr	r3, [pc, #616]	; (80110c8 <_printf_float+0x2d8>)
 8010e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e62:	f7ef fe45 	bl	8000af0 <__aeabi_dcmple>
 8010e66:	bb48      	cbnz	r0, 8010ebc <_printf_float+0xcc>
 8010e68:	2200      	movs	r2, #0
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	4640      	mov	r0, r8
 8010e6e:	4649      	mov	r1, r9
 8010e70:	f7ef fe34 	bl	8000adc <__aeabi_dcmplt>
 8010e74:	b110      	cbz	r0, 8010e7c <_printf_float+0x8c>
 8010e76:	232d      	movs	r3, #45	; 0x2d
 8010e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e7c:	4a93      	ldr	r2, [pc, #588]	; (80110cc <_printf_float+0x2dc>)
 8010e7e:	4b94      	ldr	r3, [pc, #592]	; (80110d0 <_printf_float+0x2e0>)
 8010e80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010e84:	bf94      	ite	ls
 8010e86:	4690      	movls	r8, r2
 8010e88:	4698      	movhi	r8, r3
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	6123      	str	r3, [r4, #16]
 8010e8e:	9b05      	ldr	r3, [sp, #20]
 8010e90:	f023 0304 	bic.w	r3, r3, #4
 8010e94:	6023      	str	r3, [r4, #0]
 8010e96:	f04f 0900 	mov.w	r9, #0
 8010e9a:	9700      	str	r7, [sp, #0]
 8010e9c:	4633      	mov	r3, r6
 8010e9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	f000 f9da 	bl	801125c <_printf_common>
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	f040 8090 	bne.w	8010fce <_printf_float+0x1de>
 8010eae:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb2:	b00d      	add	sp, #52	; 0x34
 8010eb4:	ecbd 8b02 	vpop	{d8}
 8010eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ebc:	4642      	mov	r2, r8
 8010ebe:	464b      	mov	r3, r9
 8010ec0:	4640      	mov	r0, r8
 8010ec2:	4649      	mov	r1, r9
 8010ec4:	f7ef fe32 	bl	8000b2c <__aeabi_dcmpun>
 8010ec8:	b140      	cbz	r0, 8010edc <_printf_float+0xec>
 8010eca:	464b      	mov	r3, r9
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	bfbc      	itt	lt
 8010ed0:	232d      	movlt	r3, #45	; 0x2d
 8010ed2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010ed6:	4a7f      	ldr	r2, [pc, #508]	; (80110d4 <_printf_float+0x2e4>)
 8010ed8:	4b7f      	ldr	r3, [pc, #508]	; (80110d8 <_printf_float+0x2e8>)
 8010eda:	e7d1      	b.n	8010e80 <_printf_float+0x90>
 8010edc:	6863      	ldr	r3, [r4, #4]
 8010ede:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010ee2:	9206      	str	r2, [sp, #24]
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	d13f      	bne.n	8010f68 <_printf_float+0x178>
 8010ee8:	2306      	movs	r3, #6
 8010eea:	6063      	str	r3, [r4, #4]
 8010eec:	9b05      	ldr	r3, [sp, #20]
 8010eee:	6861      	ldr	r1, [r4, #4]
 8010ef0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	9303      	str	r3, [sp, #12]
 8010ef8:	ab0a      	add	r3, sp, #40	; 0x28
 8010efa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010efe:	ab09      	add	r3, sp, #36	; 0x24
 8010f00:	ec49 8b10 	vmov	d0, r8, r9
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	6022      	str	r2, [r4, #0]
 8010f08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	f7ff fecf 	bl	8010cb0 <__cvt>
 8010f12:	9b06      	ldr	r3, [sp, #24]
 8010f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f16:	2b47      	cmp	r3, #71	; 0x47
 8010f18:	4680      	mov	r8, r0
 8010f1a:	d108      	bne.n	8010f2e <_printf_float+0x13e>
 8010f1c:	1cc8      	adds	r0, r1, #3
 8010f1e:	db02      	blt.n	8010f26 <_printf_float+0x136>
 8010f20:	6863      	ldr	r3, [r4, #4]
 8010f22:	4299      	cmp	r1, r3
 8010f24:	dd41      	ble.n	8010faa <_printf_float+0x1ba>
 8010f26:	f1ab 0302 	sub.w	r3, fp, #2
 8010f2a:	fa5f fb83 	uxtb.w	fp, r3
 8010f2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f32:	d820      	bhi.n	8010f76 <_printf_float+0x186>
 8010f34:	3901      	subs	r1, #1
 8010f36:	465a      	mov	r2, fp
 8010f38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f3c:	9109      	str	r1, [sp, #36]	; 0x24
 8010f3e:	f7ff ff19 	bl	8010d74 <__exponent>
 8010f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f44:	1813      	adds	r3, r2, r0
 8010f46:	2a01      	cmp	r2, #1
 8010f48:	4681      	mov	r9, r0
 8010f4a:	6123      	str	r3, [r4, #16]
 8010f4c:	dc02      	bgt.n	8010f54 <_printf_float+0x164>
 8010f4e:	6822      	ldr	r2, [r4, #0]
 8010f50:	07d2      	lsls	r2, r2, #31
 8010f52:	d501      	bpl.n	8010f58 <_printf_float+0x168>
 8010f54:	3301      	adds	r3, #1
 8010f56:	6123      	str	r3, [r4, #16]
 8010f58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d09c      	beq.n	8010e9a <_printf_float+0xaa>
 8010f60:	232d      	movs	r3, #45	; 0x2d
 8010f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f66:	e798      	b.n	8010e9a <_printf_float+0xaa>
 8010f68:	9a06      	ldr	r2, [sp, #24]
 8010f6a:	2a47      	cmp	r2, #71	; 0x47
 8010f6c:	d1be      	bne.n	8010eec <_printf_float+0xfc>
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d1bc      	bne.n	8010eec <_printf_float+0xfc>
 8010f72:	2301      	movs	r3, #1
 8010f74:	e7b9      	b.n	8010eea <_printf_float+0xfa>
 8010f76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010f7a:	d118      	bne.n	8010fae <_printf_float+0x1be>
 8010f7c:	2900      	cmp	r1, #0
 8010f7e:	6863      	ldr	r3, [r4, #4]
 8010f80:	dd0b      	ble.n	8010f9a <_printf_float+0x1aa>
 8010f82:	6121      	str	r1, [r4, #16]
 8010f84:	b913      	cbnz	r3, 8010f8c <_printf_float+0x19c>
 8010f86:	6822      	ldr	r2, [r4, #0]
 8010f88:	07d0      	lsls	r0, r2, #31
 8010f8a:	d502      	bpl.n	8010f92 <_printf_float+0x1a2>
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	440b      	add	r3, r1
 8010f90:	6123      	str	r3, [r4, #16]
 8010f92:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f94:	f04f 0900 	mov.w	r9, #0
 8010f98:	e7de      	b.n	8010f58 <_printf_float+0x168>
 8010f9a:	b913      	cbnz	r3, 8010fa2 <_printf_float+0x1b2>
 8010f9c:	6822      	ldr	r2, [r4, #0]
 8010f9e:	07d2      	lsls	r2, r2, #31
 8010fa0:	d501      	bpl.n	8010fa6 <_printf_float+0x1b6>
 8010fa2:	3302      	adds	r3, #2
 8010fa4:	e7f4      	b.n	8010f90 <_printf_float+0x1a0>
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	e7f2      	b.n	8010f90 <_printf_float+0x1a0>
 8010faa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fb0:	4299      	cmp	r1, r3
 8010fb2:	db05      	blt.n	8010fc0 <_printf_float+0x1d0>
 8010fb4:	6823      	ldr	r3, [r4, #0]
 8010fb6:	6121      	str	r1, [r4, #16]
 8010fb8:	07d8      	lsls	r0, r3, #31
 8010fba:	d5ea      	bpl.n	8010f92 <_printf_float+0x1a2>
 8010fbc:	1c4b      	adds	r3, r1, #1
 8010fbe:	e7e7      	b.n	8010f90 <_printf_float+0x1a0>
 8010fc0:	2900      	cmp	r1, #0
 8010fc2:	bfd4      	ite	le
 8010fc4:	f1c1 0202 	rsble	r2, r1, #2
 8010fc8:	2201      	movgt	r2, #1
 8010fca:	4413      	add	r3, r2
 8010fcc:	e7e0      	b.n	8010f90 <_printf_float+0x1a0>
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	055a      	lsls	r2, r3, #21
 8010fd2:	d407      	bmi.n	8010fe4 <_printf_float+0x1f4>
 8010fd4:	6923      	ldr	r3, [r4, #16]
 8010fd6:	4642      	mov	r2, r8
 8010fd8:	4631      	mov	r1, r6
 8010fda:	4628      	mov	r0, r5
 8010fdc:	47b8      	blx	r7
 8010fde:	3001      	adds	r0, #1
 8010fe0:	d12c      	bne.n	801103c <_printf_float+0x24c>
 8010fe2:	e764      	b.n	8010eae <_printf_float+0xbe>
 8010fe4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010fe8:	f240 80e0 	bls.w	80111ac <_printf_float+0x3bc>
 8010fec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	f7ef fd68 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	d034      	beq.n	8011066 <_printf_float+0x276>
 8010ffc:	4a37      	ldr	r2, [pc, #220]	; (80110dc <_printf_float+0x2ec>)
 8010ffe:	2301      	movs	r3, #1
 8011000:	4631      	mov	r1, r6
 8011002:	4628      	mov	r0, r5
 8011004:	47b8      	blx	r7
 8011006:	3001      	adds	r0, #1
 8011008:	f43f af51 	beq.w	8010eae <_printf_float+0xbe>
 801100c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011010:	429a      	cmp	r2, r3
 8011012:	db02      	blt.n	801101a <_printf_float+0x22a>
 8011014:	6823      	ldr	r3, [r4, #0]
 8011016:	07d8      	lsls	r0, r3, #31
 8011018:	d510      	bpl.n	801103c <_printf_float+0x24c>
 801101a:	ee18 3a10 	vmov	r3, s16
 801101e:	4652      	mov	r2, sl
 8011020:	4631      	mov	r1, r6
 8011022:	4628      	mov	r0, r5
 8011024:	47b8      	blx	r7
 8011026:	3001      	adds	r0, #1
 8011028:	f43f af41 	beq.w	8010eae <_printf_float+0xbe>
 801102c:	f04f 0800 	mov.w	r8, #0
 8011030:	f104 091a 	add.w	r9, r4, #26
 8011034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011036:	3b01      	subs	r3, #1
 8011038:	4543      	cmp	r3, r8
 801103a:	dc09      	bgt.n	8011050 <_printf_float+0x260>
 801103c:	6823      	ldr	r3, [r4, #0]
 801103e:	079b      	lsls	r3, r3, #30
 8011040:	f100 8107 	bmi.w	8011252 <_printf_float+0x462>
 8011044:	68e0      	ldr	r0, [r4, #12]
 8011046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011048:	4298      	cmp	r0, r3
 801104a:	bfb8      	it	lt
 801104c:	4618      	movlt	r0, r3
 801104e:	e730      	b.n	8010eb2 <_printf_float+0xc2>
 8011050:	2301      	movs	r3, #1
 8011052:	464a      	mov	r2, r9
 8011054:	4631      	mov	r1, r6
 8011056:	4628      	mov	r0, r5
 8011058:	47b8      	blx	r7
 801105a:	3001      	adds	r0, #1
 801105c:	f43f af27 	beq.w	8010eae <_printf_float+0xbe>
 8011060:	f108 0801 	add.w	r8, r8, #1
 8011064:	e7e6      	b.n	8011034 <_printf_float+0x244>
 8011066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011068:	2b00      	cmp	r3, #0
 801106a:	dc39      	bgt.n	80110e0 <_printf_float+0x2f0>
 801106c:	4a1b      	ldr	r2, [pc, #108]	; (80110dc <_printf_float+0x2ec>)
 801106e:	2301      	movs	r3, #1
 8011070:	4631      	mov	r1, r6
 8011072:	4628      	mov	r0, r5
 8011074:	47b8      	blx	r7
 8011076:	3001      	adds	r0, #1
 8011078:	f43f af19 	beq.w	8010eae <_printf_float+0xbe>
 801107c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011080:	4313      	orrs	r3, r2
 8011082:	d102      	bne.n	801108a <_printf_float+0x29a>
 8011084:	6823      	ldr	r3, [r4, #0]
 8011086:	07d9      	lsls	r1, r3, #31
 8011088:	d5d8      	bpl.n	801103c <_printf_float+0x24c>
 801108a:	ee18 3a10 	vmov	r3, s16
 801108e:	4652      	mov	r2, sl
 8011090:	4631      	mov	r1, r6
 8011092:	4628      	mov	r0, r5
 8011094:	47b8      	blx	r7
 8011096:	3001      	adds	r0, #1
 8011098:	f43f af09 	beq.w	8010eae <_printf_float+0xbe>
 801109c:	f04f 0900 	mov.w	r9, #0
 80110a0:	f104 0a1a 	add.w	sl, r4, #26
 80110a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a6:	425b      	negs	r3, r3
 80110a8:	454b      	cmp	r3, r9
 80110aa:	dc01      	bgt.n	80110b0 <_printf_float+0x2c0>
 80110ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110ae:	e792      	b.n	8010fd6 <_printf_float+0x1e6>
 80110b0:	2301      	movs	r3, #1
 80110b2:	4652      	mov	r2, sl
 80110b4:	4631      	mov	r1, r6
 80110b6:	4628      	mov	r0, r5
 80110b8:	47b8      	blx	r7
 80110ba:	3001      	adds	r0, #1
 80110bc:	f43f aef7 	beq.w	8010eae <_printf_float+0xbe>
 80110c0:	f109 0901 	add.w	r9, r9, #1
 80110c4:	e7ee      	b.n	80110a4 <_printf_float+0x2b4>
 80110c6:	bf00      	nop
 80110c8:	7fefffff 	.word	0x7fefffff
 80110cc:	0801573e 	.word	0x0801573e
 80110d0:	08015742 	.word	0x08015742
 80110d4:	08015746 	.word	0x08015746
 80110d8:	0801574a 	.word	0x0801574a
 80110dc:	0801574e 	.word	0x0801574e
 80110e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110e4:	429a      	cmp	r2, r3
 80110e6:	bfa8      	it	ge
 80110e8:	461a      	movge	r2, r3
 80110ea:	2a00      	cmp	r2, #0
 80110ec:	4691      	mov	r9, r2
 80110ee:	dc37      	bgt.n	8011160 <_printf_float+0x370>
 80110f0:	f04f 0b00 	mov.w	fp, #0
 80110f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110f8:	f104 021a 	add.w	r2, r4, #26
 80110fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110fe:	9305      	str	r3, [sp, #20]
 8011100:	eba3 0309 	sub.w	r3, r3, r9
 8011104:	455b      	cmp	r3, fp
 8011106:	dc33      	bgt.n	8011170 <_printf_float+0x380>
 8011108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801110c:	429a      	cmp	r2, r3
 801110e:	db3b      	blt.n	8011188 <_printf_float+0x398>
 8011110:	6823      	ldr	r3, [r4, #0]
 8011112:	07da      	lsls	r2, r3, #31
 8011114:	d438      	bmi.n	8011188 <_printf_float+0x398>
 8011116:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801111a:	eba2 0903 	sub.w	r9, r2, r3
 801111e:	9b05      	ldr	r3, [sp, #20]
 8011120:	1ad2      	subs	r2, r2, r3
 8011122:	4591      	cmp	r9, r2
 8011124:	bfa8      	it	ge
 8011126:	4691      	movge	r9, r2
 8011128:	f1b9 0f00 	cmp.w	r9, #0
 801112c:	dc35      	bgt.n	801119a <_printf_float+0x3aa>
 801112e:	f04f 0800 	mov.w	r8, #0
 8011132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011136:	f104 0a1a 	add.w	sl, r4, #26
 801113a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801113e:	1a9b      	subs	r3, r3, r2
 8011140:	eba3 0309 	sub.w	r3, r3, r9
 8011144:	4543      	cmp	r3, r8
 8011146:	f77f af79 	ble.w	801103c <_printf_float+0x24c>
 801114a:	2301      	movs	r3, #1
 801114c:	4652      	mov	r2, sl
 801114e:	4631      	mov	r1, r6
 8011150:	4628      	mov	r0, r5
 8011152:	47b8      	blx	r7
 8011154:	3001      	adds	r0, #1
 8011156:	f43f aeaa 	beq.w	8010eae <_printf_float+0xbe>
 801115a:	f108 0801 	add.w	r8, r8, #1
 801115e:	e7ec      	b.n	801113a <_printf_float+0x34a>
 8011160:	4613      	mov	r3, r2
 8011162:	4631      	mov	r1, r6
 8011164:	4642      	mov	r2, r8
 8011166:	4628      	mov	r0, r5
 8011168:	47b8      	blx	r7
 801116a:	3001      	adds	r0, #1
 801116c:	d1c0      	bne.n	80110f0 <_printf_float+0x300>
 801116e:	e69e      	b.n	8010eae <_printf_float+0xbe>
 8011170:	2301      	movs	r3, #1
 8011172:	4631      	mov	r1, r6
 8011174:	4628      	mov	r0, r5
 8011176:	9205      	str	r2, [sp, #20]
 8011178:	47b8      	blx	r7
 801117a:	3001      	adds	r0, #1
 801117c:	f43f ae97 	beq.w	8010eae <_printf_float+0xbe>
 8011180:	9a05      	ldr	r2, [sp, #20]
 8011182:	f10b 0b01 	add.w	fp, fp, #1
 8011186:	e7b9      	b.n	80110fc <_printf_float+0x30c>
 8011188:	ee18 3a10 	vmov	r3, s16
 801118c:	4652      	mov	r2, sl
 801118e:	4631      	mov	r1, r6
 8011190:	4628      	mov	r0, r5
 8011192:	47b8      	blx	r7
 8011194:	3001      	adds	r0, #1
 8011196:	d1be      	bne.n	8011116 <_printf_float+0x326>
 8011198:	e689      	b.n	8010eae <_printf_float+0xbe>
 801119a:	9a05      	ldr	r2, [sp, #20]
 801119c:	464b      	mov	r3, r9
 801119e:	4442      	add	r2, r8
 80111a0:	4631      	mov	r1, r6
 80111a2:	4628      	mov	r0, r5
 80111a4:	47b8      	blx	r7
 80111a6:	3001      	adds	r0, #1
 80111a8:	d1c1      	bne.n	801112e <_printf_float+0x33e>
 80111aa:	e680      	b.n	8010eae <_printf_float+0xbe>
 80111ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111ae:	2a01      	cmp	r2, #1
 80111b0:	dc01      	bgt.n	80111b6 <_printf_float+0x3c6>
 80111b2:	07db      	lsls	r3, r3, #31
 80111b4:	d53a      	bpl.n	801122c <_printf_float+0x43c>
 80111b6:	2301      	movs	r3, #1
 80111b8:	4642      	mov	r2, r8
 80111ba:	4631      	mov	r1, r6
 80111bc:	4628      	mov	r0, r5
 80111be:	47b8      	blx	r7
 80111c0:	3001      	adds	r0, #1
 80111c2:	f43f ae74 	beq.w	8010eae <_printf_float+0xbe>
 80111c6:	ee18 3a10 	vmov	r3, s16
 80111ca:	4652      	mov	r2, sl
 80111cc:	4631      	mov	r1, r6
 80111ce:	4628      	mov	r0, r5
 80111d0:	47b8      	blx	r7
 80111d2:	3001      	adds	r0, #1
 80111d4:	f43f ae6b 	beq.w	8010eae <_printf_float+0xbe>
 80111d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80111dc:	2200      	movs	r2, #0
 80111de:	2300      	movs	r3, #0
 80111e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80111e4:	f7ef fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80111e8:	b9d8      	cbnz	r0, 8011222 <_printf_float+0x432>
 80111ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80111ee:	f108 0201 	add.w	r2, r8, #1
 80111f2:	4631      	mov	r1, r6
 80111f4:	4628      	mov	r0, r5
 80111f6:	47b8      	blx	r7
 80111f8:	3001      	adds	r0, #1
 80111fa:	d10e      	bne.n	801121a <_printf_float+0x42a>
 80111fc:	e657      	b.n	8010eae <_printf_float+0xbe>
 80111fe:	2301      	movs	r3, #1
 8011200:	4652      	mov	r2, sl
 8011202:	4631      	mov	r1, r6
 8011204:	4628      	mov	r0, r5
 8011206:	47b8      	blx	r7
 8011208:	3001      	adds	r0, #1
 801120a:	f43f ae50 	beq.w	8010eae <_printf_float+0xbe>
 801120e:	f108 0801 	add.w	r8, r8, #1
 8011212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011214:	3b01      	subs	r3, #1
 8011216:	4543      	cmp	r3, r8
 8011218:	dcf1      	bgt.n	80111fe <_printf_float+0x40e>
 801121a:	464b      	mov	r3, r9
 801121c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011220:	e6da      	b.n	8010fd8 <_printf_float+0x1e8>
 8011222:	f04f 0800 	mov.w	r8, #0
 8011226:	f104 0a1a 	add.w	sl, r4, #26
 801122a:	e7f2      	b.n	8011212 <_printf_float+0x422>
 801122c:	2301      	movs	r3, #1
 801122e:	4642      	mov	r2, r8
 8011230:	e7df      	b.n	80111f2 <_printf_float+0x402>
 8011232:	2301      	movs	r3, #1
 8011234:	464a      	mov	r2, r9
 8011236:	4631      	mov	r1, r6
 8011238:	4628      	mov	r0, r5
 801123a:	47b8      	blx	r7
 801123c:	3001      	adds	r0, #1
 801123e:	f43f ae36 	beq.w	8010eae <_printf_float+0xbe>
 8011242:	f108 0801 	add.w	r8, r8, #1
 8011246:	68e3      	ldr	r3, [r4, #12]
 8011248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801124a:	1a5b      	subs	r3, r3, r1
 801124c:	4543      	cmp	r3, r8
 801124e:	dcf0      	bgt.n	8011232 <_printf_float+0x442>
 8011250:	e6f8      	b.n	8011044 <_printf_float+0x254>
 8011252:	f04f 0800 	mov.w	r8, #0
 8011256:	f104 0919 	add.w	r9, r4, #25
 801125a:	e7f4      	b.n	8011246 <_printf_float+0x456>

0801125c <_printf_common>:
 801125c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011260:	4616      	mov	r6, r2
 8011262:	4699      	mov	r9, r3
 8011264:	688a      	ldr	r2, [r1, #8]
 8011266:	690b      	ldr	r3, [r1, #16]
 8011268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801126c:	4293      	cmp	r3, r2
 801126e:	bfb8      	it	lt
 8011270:	4613      	movlt	r3, r2
 8011272:	6033      	str	r3, [r6, #0]
 8011274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011278:	4607      	mov	r7, r0
 801127a:	460c      	mov	r4, r1
 801127c:	b10a      	cbz	r2, 8011282 <_printf_common+0x26>
 801127e:	3301      	adds	r3, #1
 8011280:	6033      	str	r3, [r6, #0]
 8011282:	6823      	ldr	r3, [r4, #0]
 8011284:	0699      	lsls	r1, r3, #26
 8011286:	bf42      	ittt	mi
 8011288:	6833      	ldrmi	r3, [r6, #0]
 801128a:	3302      	addmi	r3, #2
 801128c:	6033      	strmi	r3, [r6, #0]
 801128e:	6825      	ldr	r5, [r4, #0]
 8011290:	f015 0506 	ands.w	r5, r5, #6
 8011294:	d106      	bne.n	80112a4 <_printf_common+0x48>
 8011296:	f104 0a19 	add.w	sl, r4, #25
 801129a:	68e3      	ldr	r3, [r4, #12]
 801129c:	6832      	ldr	r2, [r6, #0]
 801129e:	1a9b      	subs	r3, r3, r2
 80112a0:	42ab      	cmp	r3, r5
 80112a2:	dc26      	bgt.n	80112f2 <_printf_common+0x96>
 80112a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80112a8:	1e13      	subs	r3, r2, #0
 80112aa:	6822      	ldr	r2, [r4, #0]
 80112ac:	bf18      	it	ne
 80112ae:	2301      	movne	r3, #1
 80112b0:	0692      	lsls	r2, r2, #26
 80112b2:	d42b      	bmi.n	801130c <_printf_common+0xb0>
 80112b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80112b8:	4649      	mov	r1, r9
 80112ba:	4638      	mov	r0, r7
 80112bc:	47c0      	blx	r8
 80112be:	3001      	adds	r0, #1
 80112c0:	d01e      	beq.n	8011300 <_printf_common+0xa4>
 80112c2:	6823      	ldr	r3, [r4, #0]
 80112c4:	6922      	ldr	r2, [r4, #16]
 80112c6:	f003 0306 	and.w	r3, r3, #6
 80112ca:	2b04      	cmp	r3, #4
 80112cc:	bf02      	ittt	eq
 80112ce:	68e5      	ldreq	r5, [r4, #12]
 80112d0:	6833      	ldreq	r3, [r6, #0]
 80112d2:	1aed      	subeq	r5, r5, r3
 80112d4:	68a3      	ldr	r3, [r4, #8]
 80112d6:	bf0c      	ite	eq
 80112d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112dc:	2500      	movne	r5, #0
 80112de:	4293      	cmp	r3, r2
 80112e0:	bfc4      	itt	gt
 80112e2:	1a9b      	subgt	r3, r3, r2
 80112e4:	18ed      	addgt	r5, r5, r3
 80112e6:	2600      	movs	r6, #0
 80112e8:	341a      	adds	r4, #26
 80112ea:	42b5      	cmp	r5, r6
 80112ec:	d11a      	bne.n	8011324 <_printf_common+0xc8>
 80112ee:	2000      	movs	r0, #0
 80112f0:	e008      	b.n	8011304 <_printf_common+0xa8>
 80112f2:	2301      	movs	r3, #1
 80112f4:	4652      	mov	r2, sl
 80112f6:	4649      	mov	r1, r9
 80112f8:	4638      	mov	r0, r7
 80112fa:	47c0      	blx	r8
 80112fc:	3001      	adds	r0, #1
 80112fe:	d103      	bne.n	8011308 <_printf_common+0xac>
 8011300:	f04f 30ff 	mov.w	r0, #4294967295
 8011304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011308:	3501      	adds	r5, #1
 801130a:	e7c6      	b.n	801129a <_printf_common+0x3e>
 801130c:	18e1      	adds	r1, r4, r3
 801130e:	1c5a      	adds	r2, r3, #1
 8011310:	2030      	movs	r0, #48	; 0x30
 8011312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011316:	4422      	add	r2, r4
 8011318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801131c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011320:	3302      	adds	r3, #2
 8011322:	e7c7      	b.n	80112b4 <_printf_common+0x58>
 8011324:	2301      	movs	r3, #1
 8011326:	4622      	mov	r2, r4
 8011328:	4649      	mov	r1, r9
 801132a:	4638      	mov	r0, r7
 801132c:	47c0      	blx	r8
 801132e:	3001      	adds	r0, #1
 8011330:	d0e6      	beq.n	8011300 <_printf_common+0xa4>
 8011332:	3601      	adds	r6, #1
 8011334:	e7d9      	b.n	80112ea <_printf_common+0x8e>
	...

08011338 <_printf_i>:
 8011338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801133c:	7e0f      	ldrb	r7, [r1, #24]
 801133e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011340:	2f78      	cmp	r7, #120	; 0x78
 8011342:	4691      	mov	r9, r2
 8011344:	4680      	mov	r8, r0
 8011346:	460c      	mov	r4, r1
 8011348:	469a      	mov	sl, r3
 801134a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801134e:	d807      	bhi.n	8011360 <_printf_i+0x28>
 8011350:	2f62      	cmp	r7, #98	; 0x62
 8011352:	d80a      	bhi.n	801136a <_printf_i+0x32>
 8011354:	2f00      	cmp	r7, #0
 8011356:	f000 80d4 	beq.w	8011502 <_printf_i+0x1ca>
 801135a:	2f58      	cmp	r7, #88	; 0x58
 801135c:	f000 80c0 	beq.w	80114e0 <_printf_i+0x1a8>
 8011360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011368:	e03a      	b.n	80113e0 <_printf_i+0xa8>
 801136a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801136e:	2b15      	cmp	r3, #21
 8011370:	d8f6      	bhi.n	8011360 <_printf_i+0x28>
 8011372:	a101      	add	r1, pc, #4	; (adr r1, 8011378 <_printf_i+0x40>)
 8011374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011378:	080113d1 	.word	0x080113d1
 801137c:	080113e5 	.word	0x080113e5
 8011380:	08011361 	.word	0x08011361
 8011384:	08011361 	.word	0x08011361
 8011388:	08011361 	.word	0x08011361
 801138c:	08011361 	.word	0x08011361
 8011390:	080113e5 	.word	0x080113e5
 8011394:	08011361 	.word	0x08011361
 8011398:	08011361 	.word	0x08011361
 801139c:	08011361 	.word	0x08011361
 80113a0:	08011361 	.word	0x08011361
 80113a4:	080114e9 	.word	0x080114e9
 80113a8:	08011411 	.word	0x08011411
 80113ac:	080114a3 	.word	0x080114a3
 80113b0:	08011361 	.word	0x08011361
 80113b4:	08011361 	.word	0x08011361
 80113b8:	0801150b 	.word	0x0801150b
 80113bc:	08011361 	.word	0x08011361
 80113c0:	08011411 	.word	0x08011411
 80113c4:	08011361 	.word	0x08011361
 80113c8:	08011361 	.word	0x08011361
 80113cc:	080114ab 	.word	0x080114ab
 80113d0:	682b      	ldr	r3, [r5, #0]
 80113d2:	1d1a      	adds	r2, r3, #4
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	602a      	str	r2, [r5, #0]
 80113d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113e0:	2301      	movs	r3, #1
 80113e2:	e09f      	b.n	8011524 <_printf_i+0x1ec>
 80113e4:	6820      	ldr	r0, [r4, #0]
 80113e6:	682b      	ldr	r3, [r5, #0]
 80113e8:	0607      	lsls	r7, r0, #24
 80113ea:	f103 0104 	add.w	r1, r3, #4
 80113ee:	6029      	str	r1, [r5, #0]
 80113f0:	d501      	bpl.n	80113f6 <_printf_i+0xbe>
 80113f2:	681e      	ldr	r6, [r3, #0]
 80113f4:	e003      	b.n	80113fe <_printf_i+0xc6>
 80113f6:	0646      	lsls	r6, r0, #25
 80113f8:	d5fb      	bpl.n	80113f2 <_printf_i+0xba>
 80113fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80113fe:	2e00      	cmp	r6, #0
 8011400:	da03      	bge.n	801140a <_printf_i+0xd2>
 8011402:	232d      	movs	r3, #45	; 0x2d
 8011404:	4276      	negs	r6, r6
 8011406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801140a:	485a      	ldr	r0, [pc, #360]	; (8011574 <_printf_i+0x23c>)
 801140c:	230a      	movs	r3, #10
 801140e:	e012      	b.n	8011436 <_printf_i+0xfe>
 8011410:	682b      	ldr	r3, [r5, #0]
 8011412:	6820      	ldr	r0, [r4, #0]
 8011414:	1d19      	adds	r1, r3, #4
 8011416:	6029      	str	r1, [r5, #0]
 8011418:	0605      	lsls	r5, r0, #24
 801141a:	d501      	bpl.n	8011420 <_printf_i+0xe8>
 801141c:	681e      	ldr	r6, [r3, #0]
 801141e:	e002      	b.n	8011426 <_printf_i+0xee>
 8011420:	0641      	lsls	r1, r0, #25
 8011422:	d5fb      	bpl.n	801141c <_printf_i+0xe4>
 8011424:	881e      	ldrh	r6, [r3, #0]
 8011426:	4853      	ldr	r0, [pc, #332]	; (8011574 <_printf_i+0x23c>)
 8011428:	2f6f      	cmp	r7, #111	; 0x6f
 801142a:	bf0c      	ite	eq
 801142c:	2308      	moveq	r3, #8
 801142e:	230a      	movne	r3, #10
 8011430:	2100      	movs	r1, #0
 8011432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011436:	6865      	ldr	r5, [r4, #4]
 8011438:	60a5      	str	r5, [r4, #8]
 801143a:	2d00      	cmp	r5, #0
 801143c:	bfa2      	ittt	ge
 801143e:	6821      	ldrge	r1, [r4, #0]
 8011440:	f021 0104 	bicge.w	r1, r1, #4
 8011444:	6021      	strge	r1, [r4, #0]
 8011446:	b90e      	cbnz	r6, 801144c <_printf_i+0x114>
 8011448:	2d00      	cmp	r5, #0
 801144a:	d04b      	beq.n	80114e4 <_printf_i+0x1ac>
 801144c:	4615      	mov	r5, r2
 801144e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011452:	fb03 6711 	mls	r7, r3, r1, r6
 8011456:	5dc7      	ldrb	r7, [r0, r7]
 8011458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801145c:	4637      	mov	r7, r6
 801145e:	42bb      	cmp	r3, r7
 8011460:	460e      	mov	r6, r1
 8011462:	d9f4      	bls.n	801144e <_printf_i+0x116>
 8011464:	2b08      	cmp	r3, #8
 8011466:	d10b      	bne.n	8011480 <_printf_i+0x148>
 8011468:	6823      	ldr	r3, [r4, #0]
 801146a:	07de      	lsls	r6, r3, #31
 801146c:	d508      	bpl.n	8011480 <_printf_i+0x148>
 801146e:	6923      	ldr	r3, [r4, #16]
 8011470:	6861      	ldr	r1, [r4, #4]
 8011472:	4299      	cmp	r1, r3
 8011474:	bfde      	ittt	le
 8011476:	2330      	movle	r3, #48	; 0x30
 8011478:	f805 3c01 	strble.w	r3, [r5, #-1]
 801147c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011480:	1b52      	subs	r2, r2, r5
 8011482:	6122      	str	r2, [r4, #16]
 8011484:	f8cd a000 	str.w	sl, [sp]
 8011488:	464b      	mov	r3, r9
 801148a:	aa03      	add	r2, sp, #12
 801148c:	4621      	mov	r1, r4
 801148e:	4640      	mov	r0, r8
 8011490:	f7ff fee4 	bl	801125c <_printf_common>
 8011494:	3001      	adds	r0, #1
 8011496:	d14a      	bne.n	801152e <_printf_i+0x1f6>
 8011498:	f04f 30ff 	mov.w	r0, #4294967295
 801149c:	b004      	add	sp, #16
 801149e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114a2:	6823      	ldr	r3, [r4, #0]
 80114a4:	f043 0320 	orr.w	r3, r3, #32
 80114a8:	6023      	str	r3, [r4, #0]
 80114aa:	4833      	ldr	r0, [pc, #204]	; (8011578 <_printf_i+0x240>)
 80114ac:	2778      	movs	r7, #120	; 0x78
 80114ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	6829      	ldr	r1, [r5, #0]
 80114b6:	061f      	lsls	r7, r3, #24
 80114b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80114bc:	d402      	bmi.n	80114c4 <_printf_i+0x18c>
 80114be:	065f      	lsls	r7, r3, #25
 80114c0:	bf48      	it	mi
 80114c2:	b2b6      	uxthmi	r6, r6
 80114c4:	07df      	lsls	r7, r3, #31
 80114c6:	bf48      	it	mi
 80114c8:	f043 0320 	orrmi.w	r3, r3, #32
 80114cc:	6029      	str	r1, [r5, #0]
 80114ce:	bf48      	it	mi
 80114d0:	6023      	strmi	r3, [r4, #0]
 80114d2:	b91e      	cbnz	r6, 80114dc <_printf_i+0x1a4>
 80114d4:	6823      	ldr	r3, [r4, #0]
 80114d6:	f023 0320 	bic.w	r3, r3, #32
 80114da:	6023      	str	r3, [r4, #0]
 80114dc:	2310      	movs	r3, #16
 80114de:	e7a7      	b.n	8011430 <_printf_i+0xf8>
 80114e0:	4824      	ldr	r0, [pc, #144]	; (8011574 <_printf_i+0x23c>)
 80114e2:	e7e4      	b.n	80114ae <_printf_i+0x176>
 80114e4:	4615      	mov	r5, r2
 80114e6:	e7bd      	b.n	8011464 <_printf_i+0x12c>
 80114e8:	682b      	ldr	r3, [r5, #0]
 80114ea:	6826      	ldr	r6, [r4, #0]
 80114ec:	6961      	ldr	r1, [r4, #20]
 80114ee:	1d18      	adds	r0, r3, #4
 80114f0:	6028      	str	r0, [r5, #0]
 80114f2:	0635      	lsls	r5, r6, #24
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	d501      	bpl.n	80114fc <_printf_i+0x1c4>
 80114f8:	6019      	str	r1, [r3, #0]
 80114fa:	e002      	b.n	8011502 <_printf_i+0x1ca>
 80114fc:	0670      	lsls	r0, r6, #25
 80114fe:	d5fb      	bpl.n	80114f8 <_printf_i+0x1c0>
 8011500:	8019      	strh	r1, [r3, #0]
 8011502:	2300      	movs	r3, #0
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	4615      	mov	r5, r2
 8011508:	e7bc      	b.n	8011484 <_printf_i+0x14c>
 801150a:	682b      	ldr	r3, [r5, #0]
 801150c:	1d1a      	adds	r2, r3, #4
 801150e:	602a      	str	r2, [r5, #0]
 8011510:	681d      	ldr	r5, [r3, #0]
 8011512:	6862      	ldr	r2, [r4, #4]
 8011514:	2100      	movs	r1, #0
 8011516:	4628      	mov	r0, r5
 8011518:	f7ee fe5a 	bl	80001d0 <memchr>
 801151c:	b108      	cbz	r0, 8011522 <_printf_i+0x1ea>
 801151e:	1b40      	subs	r0, r0, r5
 8011520:	6060      	str	r0, [r4, #4]
 8011522:	6863      	ldr	r3, [r4, #4]
 8011524:	6123      	str	r3, [r4, #16]
 8011526:	2300      	movs	r3, #0
 8011528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801152c:	e7aa      	b.n	8011484 <_printf_i+0x14c>
 801152e:	6923      	ldr	r3, [r4, #16]
 8011530:	462a      	mov	r2, r5
 8011532:	4649      	mov	r1, r9
 8011534:	4640      	mov	r0, r8
 8011536:	47d0      	blx	sl
 8011538:	3001      	adds	r0, #1
 801153a:	d0ad      	beq.n	8011498 <_printf_i+0x160>
 801153c:	6823      	ldr	r3, [r4, #0]
 801153e:	079b      	lsls	r3, r3, #30
 8011540:	d413      	bmi.n	801156a <_printf_i+0x232>
 8011542:	68e0      	ldr	r0, [r4, #12]
 8011544:	9b03      	ldr	r3, [sp, #12]
 8011546:	4298      	cmp	r0, r3
 8011548:	bfb8      	it	lt
 801154a:	4618      	movlt	r0, r3
 801154c:	e7a6      	b.n	801149c <_printf_i+0x164>
 801154e:	2301      	movs	r3, #1
 8011550:	4632      	mov	r2, r6
 8011552:	4649      	mov	r1, r9
 8011554:	4640      	mov	r0, r8
 8011556:	47d0      	blx	sl
 8011558:	3001      	adds	r0, #1
 801155a:	d09d      	beq.n	8011498 <_printf_i+0x160>
 801155c:	3501      	adds	r5, #1
 801155e:	68e3      	ldr	r3, [r4, #12]
 8011560:	9903      	ldr	r1, [sp, #12]
 8011562:	1a5b      	subs	r3, r3, r1
 8011564:	42ab      	cmp	r3, r5
 8011566:	dcf2      	bgt.n	801154e <_printf_i+0x216>
 8011568:	e7eb      	b.n	8011542 <_printf_i+0x20a>
 801156a:	2500      	movs	r5, #0
 801156c:	f104 0619 	add.w	r6, r4, #25
 8011570:	e7f5      	b.n	801155e <_printf_i+0x226>
 8011572:	bf00      	nop
 8011574:	08015750 	.word	0x08015750
 8011578:	08015761 	.word	0x08015761

0801157c <_scanf_float>:
 801157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011580:	b087      	sub	sp, #28
 8011582:	4617      	mov	r7, r2
 8011584:	9303      	str	r3, [sp, #12]
 8011586:	688b      	ldr	r3, [r1, #8]
 8011588:	1e5a      	subs	r2, r3, #1
 801158a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801158e:	bf83      	ittte	hi
 8011590:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011594:	195b      	addhi	r3, r3, r5
 8011596:	9302      	strhi	r3, [sp, #8]
 8011598:	2300      	movls	r3, #0
 801159a:	bf86      	itte	hi
 801159c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80115a0:	608b      	strhi	r3, [r1, #8]
 80115a2:	9302      	strls	r3, [sp, #8]
 80115a4:	680b      	ldr	r3, [r1, #0]
 80115a6:	468b      	mov	fp, r1
 80115a8:	2500      	movs	r5, #0
 80115aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80115ae:	f84b 3b1c 	str.w	r3, [fp], #28
 80115b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80115b6:	4680      	mov	r8, r0
 80115b8:	460c      	mov	r4, r1
 80115ba:	465e      	mov	r6, fp
 80115bc:	46aa      	mov	sl, r5
 80115be:	46a9      	mov	r9, r5
 80115c0:	9501      	str	r5, [sp, #4]
 80115c2:	68a2      	ldr	r2, [r4, #8]
 80115c4:	b152      	cbz	r2, 80115dc <_scanf_float+0x60>
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	2b4e      	cmp	r3, #78	; 0x4e
 80115cc:	d864      	bhi.n	8011698 <_scanf_float+0x11c>
 80115ce:	2b40      	cmp	r3, #64	; 0x40
 80115d0:	d83c      	bhi.n	801164c <_scanf_float+0xd0>
 80115d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80115d6:	b2c8      	uxtb	r0, r1
 80115d8:	280e      	cmp	r0, #14
 80115da:	d93a      	bls.n	8011652 <_scanf_float+0xd6>
 80115dc:	f1b9 0f00 	cmp.w	r9, #0
 80115e0:	d003      	beq.n	80115ea <_scanf_float+0x6e>
 80115e2:	6823      	ldr	r3, [r4, #0]
 80115e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80115e8:	6023      	str	r3, [r4, #0]
 80115ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80115ee:	f1ba 0f01 	cmp.w	sl, #1
 80115f2:	f200 8113 	bhi.w	801181c <_scanf_float+0x2a0>
 80115f6:	455e      	cmp	r6, fp
 80115f8:	f200 8105 	bhi.w	8011806 <_scanf_float+0x28a>
 80115fc:	2501      	movs	r5, #1
 80115fe:	4628      	mov	r0, r5
 8011600:	b007      	add	sp, #28
 8011602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011606:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801160a:	2a0d      	cmp	r2, #13
 801160c:	d8e6      	bhi.n	80115dc <_scanf_float+0x60>
 801160e:	a101      	add	r1, pc, #4	; (adr r1, 8011614 <_scanf_float+0x98>)
 8011610:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011614:	08011753 	.word	0x08011753
 8011618:	080115dd 	.word	0x080115dd
 801161c:	080115dd 	.word	0x080115dd
 8011620:	080115dd 	.word	0x080115dd
 8011624:	080117b3 	.word	0x080117b3
 8011628:	0801178b 	.word	0x0801178b
 801162c:	080115dd 	.word	0x080115dd
 8011630:	080115dd 	.word	0x080115dd
 8011634:	08011761 	.word	0x08011761
 8011638:	080115dd 	.word	0x080115dd
 801163c:	080115dd 	.word	0x080115dd
 8011640:	080115dd 	.word	0x080115dd
 8011644:	080115dd 	.word	0x080115dd
 8011648:	08011719 	.word	0x08011719
 801164c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011650:	e7db      	b.n	801160a <_scanf_float+0x8e>
 8011652:	290e      	cmp	r1, #14
 8011654:	d8c2      	bhi.n	80115dc <_scanf_float+0x60>
 8011656:	a001      	add	r0, pc, #4	; (adr r0, 801165c <_scanf_float+0xe0>)
 8011658:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801165c:	0801170b 	.word	0x0801170b
 8011660:	080115dd 	.word	0x080115dd
 8011664:	0801170b 	.word	0x0801170b
 8011668:	0801179f 	.word	0x0801179f
 801166c:	080115dd 	.word	0x080115dd
 8011670:	080116b9 	.word	0x080116b9
 8011674:	080116f5 	.word	0x080116f5
 8011678:	080116f5 	.word	0x080116f5
 801167c:	080116f5 	.word	0x080116f5
 8011680:	080116f5 	.word	0x080116f5
 8011684:	080116f5 	.word	0x080116f5
 8011688:	080116f5 	.word	0x080116f5
 801168c:	080116f5 	.word	0x080116f5
 8011690:	080116f5 	.word	0x080116f5
 8011694:	080116f5 	.word	0x080116f5
 8011698:	2b6e      	cmp	r3, #110	; 0x6e
 801169a:	d809      	bhi.n	80116b0 <_scanf_float+0x134>
 801169c:	2b60      	cmp	r3, #96	; 0x60
 801169e:	d8b2      	bhi.n	8011606 <_scanf_float+0x8a>
 80116a0:	2b54      	cmp	r3, #84	; 0x54
 80116a2:	d077      	beq.n	8011794 <_scanf_float+0x218>
 80116a4:	2b59      	cmp	r3, #89	; 0x59
 80116a6:	d199      	bne.n	80115dc <_scanf_float+0x60>
 80116a8:	2d07      	cmp	r5, #7
 80116aa:	d197      	bne.n	80115dc <_scanf_float+0x60>
 80116ac:	2508      	movs	r5, #8
 80116ae:	e029      	b.n	8011704 <_scanf_float+0x188>
 80116b0:	2b74      	cmp	r3, #116	; 0x74
 80116b2:	d06f      	beq.n	8011794 <_scanf_float+0x218>
 80116b4:	2b79      	cmp	r3, #121	; 0x79
 80116b6:	e7f6      	b.n	80116a6 <_scanf_float+0x12a>
 80116b8:	6821      	ldr	r1, [r4, #0]
 80116ba:	05c8      	lsls	r0, r1, #23
 80116bc:	d51a      	bpl.n	80116f4 <_scanf_float+0x178>
 80116be:	9b02      	ldr	r3, [sp, #8]
 80116c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80116c4:	6021      	str	r1, [r4, #0]
 80116c6:	f109 0901 	add.w	r9, r9, #1
 80116ca:	b11b      	cbz	r3, 80116d4 <_scanf_float+0x158>
 80116cc:	3b01      	subs	r3, #1
 80116ce:	3201      	adds	r2, #1
 80116d0:	9302      	str	r3, [sp, #8]
 80116d2:	60a2      	str	r2, [r4, #8]
 80116d4:	68a3      	ldr	r3, [r4, #8]
 80116d6:	3b01      	subs	r3, #1
 80116d8:	60a3      	str	r3, [r4, #8]
 80116da:	6923      	ldr	r3, [r4, #16]
 80116dc:	3301      	adds	r3, #1
 80116de:	6123      	str	r3, [r4, #16]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	3b01      	subs	r3, #1
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	607b      	str	r3, [r7, #4]
 80116e8:	f340 8084 	ble.w	80117f4 <_scanf_float+0x278>
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	3301      	adds	r3, #1
 80116f0:	603b      	str	r3, [r7, #0]
 80116f2:	e766      	b.n	80115c2 <_scanf_float+0x46>
 80116f4:	eb1a 0f05 	cmn.w	sl, r5
 80116f8:	f47f af70 	bne.w	80115dc <_scanf_float+0x60>
 80116fc:	6822      	ldr	r2, [r4, #0]
 80116fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011702:	6022      	str	r2, [r4, #0]
 8011704:	f806 3b01 	strb.w	r3, [r6], #1
 8011708:	e7e4      	b.n	80116d4 <_scanf_float+0x158>
 801170a:	6822      	ldr	r2, [r4, #0]
 801170c:	0610      	lsls	r0, r2, #24
 801170e:	f57f af65 	bpl.w	80115dc <_scanf_float+0x60>
 8011712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011716:	e7f4      	b.n	8011702 <_scanf_float+0x186>
 8011718:	f1ba 0f00 	cmp.w	sl, #0
 801171c:	d10e      	bne.n	801173c <_scanf_float+0x1c0>
 801171e:	f1b9 0f00 	cmp.w	r9, #0
 8011722:	d10e      	bne.n	8011742 <_scanf_float+0x1c6>
 8011724:	6822      	ldr	r2, [r4, #0]
 8011726:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801172a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801172e:	d108      	bne.n	8011742 <_scanf_float+0x1c6>
 8011730:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011734:	6022      	str	r2, [r4, #0]
 8011736:	f04f 0a01 	mov.w	sl, #1
 801173a:	e7e3      	b.n	8011704 <_scanf_float+0x188>
 801173c:	f1ba 0f02 	cmp.w	sl, #2
 8011740:	d055      	beq.n	80117ee <_scanf_float+0x272>
 8011742:	2d01      	cmp	r5, #1
 8011744:	d002      	beq.n	801174c <_scanf_float+0x1d0>
 8011746:	2d04      	cmp	r5, #4
 8011748:	f47f af48 	bne.w	80115dc <_scanf_float+0x60>
 801174c:	3501      	adds	r5, #1
 801174e:	b2ed      	uxtb	r5, r5
 8011750:	e7d8      	b.n	8011704 <_scanf_float+0x188>
 8011752:	f1ba 0f01 	cmp.w	sl, #1
 8011756:	f47f af41 	bne.w	80115dc <_scanf_float+0x60>
 801175a:	f04f 0a02 	mov.w	sl, #2
 801175e:	e7d1      	b.n	8011704 <_scanf_float+0x188>
 8011760:	b97d      	cbnz	r5, 8011782 <_scanf_float+0x206>
 8011762:	f1b9 0f00 	cmp.w	r9, #0
 8011766:	f47f af3c 	bne.w	80115e2 <_scanf_float+0x66>
 801176a:	6822      	ldr	r2, [r4, #0]
 801176c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011770:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011774:	f47f af39 	bne.w	80115ea <_scanf_float+0x6e>
 8011778:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801177c:	6022      	str	r2, [r4, #0]
 801177e:	2501      	movs	r5, #1
 8011780:	e7c0      	b.n	8011704 <_scanf_float+0x188>
 8011782:	2d03      	cmp	r5, #3
 8011784:	d0e2      	beq.n	801174c <_scanf_float+0x1d0>
 8011786:	2d05      	cmp	r5, #5
 8011788:	e7de      	b.n	8011748 <_scanf_float+0x1cc>
 801178a:	2d02      	cmp	r5, #2
 801178c:	f47f af26 	bne.w	80115dc <_scanf_float+0x60>
 8011790:	2503      	movs	r5, #3
 8011792:	e7b7      	b.n	8011704 <_scanf_float+0x188>
 8011794:	2d06      	cmp	r5, #6
 8011796:	f47f af21 	bne.w	80115dc <_scanf_float+0x60>
 801179a:	2507      	movs	r5, #7
 801179c:	e7b2      	b.n	8011704 <_scanf_float+0x188>
 801179e:	6822      	ldr	r2, [r4, #0]
 80117a0:	0591      	lsls	r1, r2, #22
 80117a2:	f57f af1b 	bpl.w	80115dc <_scanf_float+0x60>
 80117a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80117aa:	6022      	str	r2, [r4, #0]
 80117ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80117b0:	e7a8      	b.n	8011704 <_scanf_float+0x188>
 80117b2:	6822      	ldr	r2, [r4, #0]
 80117b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80117b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80117bc:	d006      	beq.n	80117cc <_scanf_float+0x250>
 80117be:	0550      	lsls	r0, r2, #21
 80117c0:	f57f af0c 	bpl.w	80115dc <_scanf_float+0x60>
 80117c4:	f1b9 0f00 	cmp.w	r9, #0
 80117c8:	f43f af0f 	beq.w	80115ea <_scanf_float+0x6e>
 80117cc:	0591      	lsls	r1, r2, #22
 80117ce:	bf58      	it	pl
 80117d0:	9901      	ldrpl	r1, [sp, #4]
 80117d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80117d6:	bf58      	it	pl
 80117d8:	eba9 0101 	subpl.w	r1, r9, r1
 80117dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80117e0:	bf58      	it	pl
 80117e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80117e6:	6022      	str	r2, [r4, #0]
 80117e8:	f04f 0900 	mov.w	r9, #0
 80117ec:	e78a      	b.n	8011704 <_scanf_float+0x188>
 80117ee:	f04f 0a03 	mov.w	sl, #3
 80117f2:	e787      	b.n	8011704 <_scanf_float+0x188>
 80117f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80117f8:	4639      	mov	r1, r7
 80117fa:	4640      	mov	r0, r8
 80117fc:	4798      	blx	r3
 80117fe:	2800      	cmp	r0, #0
 8011800:	f43f aedf 	beq.w	80115c2 <_scanf_float+0x46>
 8011804:	e6ea      	b.n	80115dc <_scanf_float+0x60>
 8011806:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801180a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801180e:	463a      	mov	r2, r7
 8011810:	4640      	mov	r0, r8
 8011812:	4798      	blx	r3
 8011814:	6923      	ldr	r3, [r4, #16]
 8011816:	3b01      	subs	r3, #1
 8011818:	6123      	str	r3, [r4, #16]
 801181a:	e6ec      	b.n	80115f6 <_scanf_float+0x7a>
 801181c:	1e6b      	subs	r3, r5, #1
 801181e:	2b06      	cmp	r3, #6
 8011820:	d825      	bhi.n	801186e <_scanf_float+0x2f2>
 8011822:	2d02      	cmp	r5, #2
 8011824:	d836      	bhi.n	8011894 <_scanf_float+0x318>
 8011826:	455e      	cmp	r6, fp
 8011828:	f67f aee8 	bls.w	80115fc <_scanf_float+0x80>
 801182c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011830:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011834:	463a      	mov	r2, r7
 8011836:	4640      	mov	r0, r8
 8011838:	4798      	blx	r3
 801183a:	6923      	ldr	r3, [r4, #16]
 801183c:	3b01      	subs	r3, #1
 801183e:	6123      	str	r3, [r4, #16]
 8011840:	e7f1      	b.n	8011826 <_scanf_float+0x2aa>
 8011842:	9802      	ldr	r0, [sp, #8]
 8011844:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011848:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801184c:	9002      	str	r0, [sp, #8]
 801184e:	463a      	mov	r2, r7
 8011850:	4640      	mov	r0, r8
 8011852:	4798      	blx	r3
 8011854:	6923      	ldr	r3, [r4, #16]
 8011856:	3b01      	subs	r3, #1
 8011858:	6123      	str	r3, [r4, #16]
 801185a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801185e:	fa5f fa8a 	uxtb.w	sl, sl
 8011862:	f1ba 0f02 	cmp.w	sl, #2
 8011866:	d1ec      	bne.n	8011842 <_scanf_float+0x2c6>
 8011868:	3d03      	subs	r5, #3
 801186a:	b2ed      	uxtb	r5, r5
 801186c:	1b76      	subs	r6, r6, r5
 801186e:	6823      	ldr	r3, [r4, #0]
 8011870:	05da      	lsls	r2, r3, #23
 8011872:	d52f      	bpl.n	80118d4 <_scanf_float+0x358>
 8011874:	055b      	lsls	r3, r3, #21
 8011876:	d510      	bpl.n	801189a <_scanf_float+0x31e>
 8011878:	455e      	cmp	r6, fp
 801187a:	f67f aebf 	bls.w	80115fc <_scanf_float+0x80>
 801187e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011886:	463a      	mov	r2, r7
 8011888:	4640      	mov	r0, r8
 801188a:	4798      	blx	r3
 801188c:	6923      	ldr	r3, [r4, #16]
 801188e:	3b01      	subs	r3, #1
 8011890:	6123      	str	r3, [r4, #16]
 8011892:	e7f1      	b.n	8011878 <_scanf_float+0x2fc>
 8011894:	46aa      	mov	sl, r5
 8011896:	9602      	str	r6, [sp, #8]
 8011898:	e7df      	b.n	801185a <_scanf_float+0x2de>
 801189a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801189e:	6923      	ldr	r3, [r4, #16]
 80118a0:	2965      	cmp	r1, #101	; 0x65
 80118a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80118a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80118aa:	6123      	str	r3, [r4, #16]
 80118ac:	d00c      	beq.n	80118c8 <_scanf_float+0x34c>
 80118ae:	2945      	cmp	r1, #69	; 0x45
 80118b0:	d00a      	beq.n	80118c8 <_scanf_float+0x34c>
 80118b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118b6:	463a      	mov	r2, r7
 80118b8:	4640      	mov	r0, r8
 80118ba:	4798      	blx	r3
 80118bc:	6923      	ldr	r3, [r4, #16]
 80118be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80118c2:	3b01      	subs	r3, #1
 80118c4:	1eb5      	subs	r5, r6, #2
 80118c6:	6123      	str	r3, [r4, #16]
 80118c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118cc:	463a      	mov	r2, r7
 80118ce:	4640      	mov	r0, r8
 80118d0:	4798      	blx	r3
 80118d2:	462e      	mov	r6, r5
 80118d4:	6825      	ldr	r5, [r4, #0]
 80118d6:	f015 0510 	ands.w	r5, r5, #16
 80118da:	d158      	bne.n	801198e <_scanf_float+0x412>
 80118dc:	7035      	strb	r5, [r6, #0]
 80118de:	6823      	ldr	r3, [r4, #0]
 80118e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80118e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80118e8:	d11c      	bne.n	8011924 <_scanf_float+0x3a8>
 80118ea:	9b01      	ldr	r3, [sp, #4]
 80118ec:	454b      	cmp	r3, r9
 80118ee:	eba3 0209 	sub.w	r2, r3, r9
 80118f2:	d124      	bne.n	801193e <_scanf_float+0x3c2>
 80118f4:	2200      	movs	r2, #0
 80118f6:	4659      	mov	r1, fp
 80118f8:	4640      	mov	r0, r8
 80118fa:	f002 fc79 	bl	80141f0 <_strtod_r>
 80118fe:	9b03      	ldr	r3, [sp, #12]
 8011900:	6821      	ldr	r1, [r4, #0]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	f011 0f02 	tst.w	r1, #2
 8011908:	ec57 6b10 	vmov	r6, r7, d0
 801190c:	f103 0204 	add.w	r2, r3, #4
 8011910:	d020      	beq.n	8011954 <_scanf_float+0x3d8>
 8011912:	9903      	ldr	r1, [sp, #12]
 8011914:	600a      	str	r2, [r1, #0]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	e9c3 6700 	strd	r6, r7, [r3]
 801191c:	68e3      	ldr	r3, [r4, #12]
 801191e:	3301      	adds	r3, #1
 8011920:	60e3      	str	r3, [r4, #12]
 8011922:	e66c      	b.n	80115fe <_scanf_float+0x82>
 8011924:	9b04      	ldr	r3, [sp, #16]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d0e4      	beq.n	80118f4 <_scanf_float+0x378>
 801192a:	9905      	ldr	r1, [sp, #20]
 801192c:	230a      	movs	r3, #10
 801192e:	462a      	mov	r2, r5
 8011930:	3101      	adds	r1, #1
 8011932:	4640      	mov	r0, r8
 8011934:	f002 fce4 	bl	8014300 <_strtol_r>
 8011938:	9b04      	ldr	r3, [sp, #16]
 801193a:	9e05      	ldr	r6, [sp, #20]
 801193c:	1ac2      	subs	r2, r0, r3
 801193e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011942:	429e      	cmp	r6, r3
 8011944:	bf28      	it	cs
 8011946:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801194a:	4912      	ldr	r1, [pc, #72]	; (8011994 <_scanf_float+0x418>)
 801194c:	4630      	mov	r0, r6
 801194e:	f000 f909 	bl	8011b64 <siprintf>
 8011952:	e7cf      	b.n	80118f4 <_scanf_float+0x378>
 8011954:	f011 0f04 	tst.w	r1, #4
 8011958:	9903      	ldr	r1, [sp, #12]
 801195a:	600a      	str	r2, [r1, #0]
 801195c:	d1db      	bne.n	8011916 <_scanf_float+0x39a>
 801195e:	f8d3 8000 	ldr.w	r8, [r3]
 8011962:	ee10 2a10 	vmov	r2, s0
 8011966:	ee10 0a10 	vmov	r0, s0
 801196a:	463b      	mov	r3, r7
 801196c:	4639      	mov	r1, r7
 801196e:	f7ef f8dd 	bl	8000b2c <__aeabi_dcmpun>
 8011972:	b128      	cbz	r0, 8011980 <_scanf_float+0x404>
 8011974:	4808      	ldr	r0, [pc, #32]	; (8011998 <_scanf_float+0x41c>)
 8011976:	f000 f9ff 	bl	8011d78 <nanf>
 801197a:	ed88 0a00 	vstr	s0, [r8]
 801197e:	e7cd      	b.n	801191c <_scanf_float+0x3a0>
 8011980:	4630      	mov	r0, r6
 8011982:	4639      	mov	r1, r7
 8011984:	f7ef f930 	bl	8000be8 <__aeabi_d2f>
 8011988:	f8c8 0000 	str.w	r0, [r8]
 801198c:	e7c6      	b.n	801191c <_scanf_float+0x3a0>
 801198e:	2500      	movs	r5, #0
 8011990:	e635      	b.n	80115fe <_scanf_float+0x82>
 8011992:	bf00      	nop
 8011994:	08015772 	.word	0x08015772
 8011998:	08015b05 	.word	0x08015b05

0801199c <std>:
 801199c:	2300      	movs	r3, #0
 801199e:	b510      	push	{r4, lr}
 80119a0:	4604      	mov	r4, r0
 80119a2:	e9c0 3300 	strd	r3, r3, [r0]
 80119a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119aa:	6083      	str	r3, [r0, #8]
 80119ac:	8181      	strh	r1, [r0, #12]
 80119ae:	6643      	str	r3, [r0, #100]	; 0x64
 80119b0:	81c2      	strh	r2, [r0, #14]
 80119b2:	6183      	str	r3, [r0, #24]
 80119b4:	4619      	mov	r1, r3
 80119b6:	2208      	movs	r2, #8
 80119b8:	305c      	adds	r0, #92	; 0x5c
 80119ba:	f000 f950 	bl	8011c5e <memset>
 80119be:	4b05      	ldr	r3, [pc, #20]	; (80119d4 <std+0x38>)
 80119c0:	6263      	str	r3, [r4, #36]	; 0x24
 80119c2:	4b05      	ldr	r3, [pc, #20]	; (80119d8 <std+0x3c>)
 80119c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80119c6:	4b05      	ldr	r3, [pc, #20]	; (80119dc <std+0x40>)
 80119c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119ca:	4b05      	ldr	r3, [pc, #20]	; (80119e0 <std+0x44>)
 80119cc:	6224      	str	r4, [r4, #32]
 80119ce:	6323      	str	r3, [r4, #48]	; 0x30
 80119d0:	bd10      	pop	{r4, pc}
 80119d2:	bf00      	nop
 80119d4:	08011ba5 	.word	0x08011ba5
 80119d8:	08011bc7 	.word	0x08011bc7
 80119dc:	08011bff 	.word	0x08011bff
 80119e0:	08011c23 	.word	0x08011c23

080119e4 <stdio_exit_handler>:
 80119e4:	4a02      	ldr	r2, [pc, #8]	; (80119f0 <stdio_exit_handler+0xc>)
 80119e6:	4903      	ldr	r1, [pc, #12]	; (80119f4 <stdio_exit_handler+0x10>)
 80119e8:	4803      	ldr	r0, [pc, #12]	; (80119f8 <stdio_exit_handler+0x14>)
 80119ea:	f000 b869 	b.w	8011ac0 <_fwalk_sglue>
 80119ee:	bf00      	nop
 80119f0:	2000010c 	.word	0x2000010c
 80119f4:	080146c1 	.word	0x080146c1
 80119f8:	20000118 	.word	0x20000118

080119fc <cleanup_stdio>:
 80119fc:	6841      	ldr	r1, [r0, #4]
 80119fe:	4b0c      	ldr	r3, [pc, #48]	; (8011a30 <cleanup_stdio+0x34>)
 8011a00:	4299      	cmp	r1, r3
 8011a02:	b510      	push	{r4, lr}
 8011a04:	4604      	mov	r4, r0
 8011a06:	d001      	beq.n	8011a0c <cleanup_stdio+0x10>
 8011a08:	f002 fe5a 	bl	80146c0 <_fflush_r>
 8011a0c:	68a1      	ldr	r1, [r4, #8]
 8011a0e:	4b09      	ldr	r3, [pc, #36]	; (8011a34 <cleanup_stdio+0x38>)
 8011a10:	4299      	cmp	r1, r3
 8011a12:	d002      	beq.n	8011a1a <cleanup_stdio+0x1e>
 8011a14:	4620      	mov	r0, r4
 8011a16:	f002 fe53 	bl	80146c0 <_fflush_r>
 8011a1a:	68e1      	ldr	r1, [r4, #12]
 8011a1c:	4b06      	ldr	r3, [pc, #24]	; (8011a38 <cleanup_stdio+0x3c>)
 8011a1e:	4299      	cmp	r1, r3
 8011a20:	d004      	beq.n	8011a2c <cleanup_stdio+0x30>
 8011a22:	4620      	mov	r0, r4
 8011a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a28:	f002 be4a 	b.w	80146c0 <_fflush_r>
 8011a2c:	bd10      	pop	{r4, pc}
 8011a2e:	bf00      	nop
 8011a30:	2000e2e0 	.word	0x2000e2e0
 8011a34:	2000e348 	.word	0x2000e348
 8011a38:	2000e3b0 	.word	0x2000e3b0

08011a3c <global_stdio_init.part.0>:
 8011a3c:	b510      	push	{r4, lr}
 8011a3e:	4b0b      	ldr	r3, [pc, #44]	; (8011a6c <global_stdio_init.part.0+0x30>)
 8011a40:	4c0b      	ldr	r4, [pc, #44]	; (8011a70 <global_stdio_init.part.0+0x34>)
 8011a42:	4a0c      	ldr	r2, [pc, #48]	; (8011a74 <global_stdio_init.part.0+0x38>)
 8011a44:	601a      	str	r2, [r3, #0]
 8011a46:	4620      	mov	r0, r4
 8011a48:	2200      	movs	r2, #0
 8011a4a:	2104      	movs	r1, #4
 8011a4c:	f7ff ffa6 	bl	801199c <std>
 8011a50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011a54:	2201      	movs	r2, #1
 8011a56:	2109      	movs	r1, #9
 8011a58:	f7ff ffa0 	bl	801199c <std>
 8011a5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011a60:	2202      	movs	r2, #2
 8011a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a66:	2112      	movs	r1, #18
 8011a68:	f7ff bf98 	b.w	801199c <std>
 8011a6c:	2000e418 	.word	0x2000e418
 8011a70:	2000e2e0 	.word	0x2000e2e0
 8011a74:	080119e5 	.word	0x080119e5

08011a78 <__sfp_lock_acquire>:
 8011a78:	4801      	ldr	r0, [pc, #4]	; (8011a80 <__sfp_lock_acquire+0x8>)
 8011a7a:	f000 b96d 	b.w	8011d58 <__retarget_lock_acquire_recursive>
 8011a7e:	bf00      	nop
 8011a80:	2000e421 	.word	0x2000e421

08011a84 <__sfp_lock_release>:
 8011a84:	4801      	ldr	r0, [pc, #4]	; (8011a8c <__sfp_lock_release+0x8>)
 8011a86:	f000 b968 	b.w	8011d5a <__retarget_lock_release_recursive>
 8011a8a:	bf00      	nop
 8011a8c:	2000e421 	.word	0x2000e421

08011a90 <__sinit>:
 8011a90:	b510      	push	{r4, lr}
 8011a92:	4604      	mov	r4, r0
 8011a94:	f7ff fff0 	bl	8011a78 <__sfp_lock_acquire>
 8011a98:	6a23      	ldr	r3, [r4, #32]
 8011a9a:	b11b      	cbz	r3, 8011aa4 <__sinit+0x14>
 8011a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aa0:	f7ff bff0 	b.w	8011a84 <__sfp_lock_release>
 8011aa4:	4b04      	ldr	r3, [pc, #16]	; (8011ab8 <__sinit+0x28>)
 8011aa6:	6223      	str	r3, [r4, #32]
 8011aa8:	4b04      	ldr	r3, [pc, #16]	; (8011abc <__sinit+0x2c>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d1f5      	bne.n	8011a9c <__sinit+0xc>
 8011ab0:	f7ff ffc4 	bl	8011a3c <global_stdio_init.part.0>
 8011ab4:	e7f2      	b.n	8011a9c <__sinit+0xc>
 8011ab6:	bf00      	nop
 8011ab8:	080119fd 	.word	0x080119fd
 8011abc:	2000e418 	.word	0x2000e418

08011ac0 <_fwalk_sglue>:
 8011ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ac4:	4607      	mov	r7, r0
 8011ac6:	4688      	mov	r8, r1
 8011ac8:	4614      	mov	r4, r2
 8011aca:	2600      	movs	r6, #0
 8011acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8011ad4:	d505      	bpl.n	8011ae2 <_fwalk_sglue+0x22>
 8011ad6:	6824      	ldr	r4, [r4, #0]
 8011ad8:	2c00      	cmp	r4, #0
 8011ada:	d1f7      	bne.n	8011acc <_fwalk_sglue+0xc>
 8011adc:	4630      	mov	r0, r6
 8011ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ae2:	89ab      	ldrh	r3, [r5, #12]
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d907      	bls.n	8011af8 <_fwalk_sglue+0x38>
 8011ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011aec:	3301      	adds	r3, #1
 8011aee:	d003      	beq.n	8011af8 <_fwalk_sglue+0x38>
 8011af0:	4629      	mov	r1, r5
 8011af2:	4638      	mov	r0, r7
 8011af4:	47c0      	blx	r8
 8011af6:	4306      	orrs	r6, r0
 8011af8:	3568      	adds	r5, #104	; 0x68
 8011afa:	e7e9      	b.n	8011ad0 <_fwalk_sglue+0x10>

08011afc <sniprintf>:
 8011afc:	b40c      	push	{r2, r3}
 8011afe:	b530      	push	{r4, r5, lr}
 8011b00:	4b17      	ldr	r3, [pc, #92]	; (8011b60 <sniprintf+0x64>)
 8011b02:	1e0c      	subs	r4, r1, #0
 8011b04:	681d      	ldr	r5, [r3, #0]
 8011b06:	b09d      	sub	sp, #116	; 0x74
 8011b08:	da08      	bge.n	8011b1c <sniprintf+0x20>
 8011b0a:	238b      	movs	r3, #139	; 0x8b
 8011b0c:	602b      	str	r3, [r5, #0]
 8011b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8011b12:	b01d      	add	sp, #116	; 0x74
 8011b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b18:	b002      	add	sp, #8
 8011b1a:	4770      	bx	lr
 8011b1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011b20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011b24:	bf14      	ite	ne
 8011b26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011b2a:	4623      	moveq	r3, r4
 8011b2c:	9304      	str	r3, [sp, #16]
 8011b2e:	9307      	str	r3, [sp, #28]
 8011b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b34:	9002      	str	r0, [sp, #8]
 8011b36:	9006      	str	r0, [sp, #24]
 8011b38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011b3e:	ab21      	add	r3, sp, #132	; 0x84
 8011b40:	a902      	add	r1, sp, #8
 8011b42:	4628      	mov	r0, r5
 8011b44:	9301      	str	r3, [sp, #4]
 8011b46:	f002 fc37 	bl	80143b8 <_svfiprintf_r>
 8011b4a:	1c43      	adds	r3, r0, #1
 8011b4c:	bfbc      	itt	lt
 8011b4e:	238b      	movlt	r3, #139	; 0x8b
 8011b50:	602b      	strlt	r3, [r5, #0]
 8011b52:	2c00      	cmp	r4, #0
 8011b54:	d0dd      	beq.n	8011b12 <sniprintf+0x16>
 8011b56:	9b02      	ldr	r3, [sp, #8]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	701a      	strb	r2, [r3, #0]
 8011b5c:	e7d9      	b.n	8011b12 <sniprintf+0x16>
 8011b5e:	bf00      	nop
 8011b60:	20000164 	.word	0x20000164

08011b64 <siprintf>:
 8011b64:	b40e      	push	{r1, r2, r3}
 8011b66:	b500      	push	{lr}
 8011b68:	b09c      	sub	sp, #112	; 0x70
 8011b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8011b6c:	9002      	str	r0, [sp, #8]
 8011b6e:	9006      	str	r0, [sp, #24]
 8011b70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b74:	4809      	ldr	r0, [pc, #36]	; (8011b9c <siprintf+0x38>)
 8011b76:	9107      	str	r1, [sp, #28]
 8011b78:	9104      	str	r1, [sp, #16]
 8011b7a:	4909      	ldr	r1, [pc, #36]	; (8011ba0 <siprintf+0x3c>)
 8011b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b80:	9105      	str	r1, [sp, #20]
 8011b82:	6800      	ldr	r0, [r0, #0]
 8011b84:	9301      	str	r3, [sp, #4]
 8011b86:	a902      	add	r1, sp, #8
 8011b88:	f002 fc16 	bl	80143b8 <_svfiprintf_r>
 8011b8c:	9b02      	ldr	r3, [sp, #8]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	701a      	strb	r2, [r3, #0]
 8011b92:	b01c      	add	sp, #112	; 0x70
 8011b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b98:	b003      	add	sp, #12
 8011b9a:	4770      	bx	lr
 8011b9c:	20000164 	.word	0x20000164
 8011ba0:	ffff0208 	.word	0xffff0208

08011ba4 <__sread>:
 8011ba4:	b510      	push	{r4, lr}
 8011ba6:	460c      	mov	r4, r1
 8011ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bac:	f000 f886 	bl	8011cbc <_read_r>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	bfab      	itete	ge
 8011bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8011bb8:	181b      	addge	r3, r3, r0
 8011bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011bbe:	bfac      	ite	ge
 8011bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011bc2:	81a3      	strhlt	r3, [r4, #12]
 8011bc4:	bd10      	pop	{r4, pc}

08011bc6 <__swrite>:
 8011bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bca:	461f      	mov	r7, r3
 8011bcc:	898b      	ldrh	r3, [r1, #12]
 8011bce:	05db      	lsls	r3, r3, #23
 8011bd0:	4605      	mov	r5, r0
 8011bd2:	460c      	mov	r4, r1
 8011bd4:	4616      	mov	r6, r2
 8011bd6:	d505      	bpl.n	8011be4 <__swrite+0x1e>
 8011bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bdc:	2302      	movs	r3, #2
 8011bde:	2200      	movs	r2, #0
 8011be0:	f000 f85a 	bl	8011c98 <_lseek_r>
 8011be4:	89a3      	ldrh	r3, [r4, #12]
 8011be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bee:	81a3      	strh	r3, [r4, #12]
 8011bf0:	4632      	mov	r2, r6
 8011bf2:	463b      	mov	r3, r7
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bfa:	f000 b871 	b.w	8011ce0 <_write_r>

08011bfe <__sseek>:
 8011bfe:	b510      	push	{r4, lr}
 8011c00:	460c      	mov	r4, r1
 8011c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c06:	f000 f847 	bl	8011c98 <_lseek_r>
 8011c0a:	1c43      	adds	r3, r0, #1
 8011c0c:	89a3      	ldrh	r3, [r4, #12]
 8011c0e:	bf15      	itete	ne
 8011c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c1a:	81a3      	strheq	r3, [r4, #12]
 8011c1c:	bf18      	it	ne
 8011c1e:	81a3      	strhne	r3, [r4, #12]
 8011c20:	bd10      	pop	{r4, pc}

08011c22 <__sclose>:
 8011c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c26:	f000 b827 	b.w	8011c78 <_close_r>

08011c2a <memmove>:
 8011c2a:	4288      	cmp	r0, r1
 8011c2c:	b510      	push	{r4, lr}
 8011c2e:	eb01 0402 	add.w	r4, r1, r2
 8011c32:	d902      	bls.n	8011c3a <memmove+0x10>
 8011c34:	4284      	cmp	r4, r0
 8011c36:	4623      	mov	r3, r4
 8011c38:	d807      	bhi.n	8011c4a <memmove+0x20>
 8011c3a:	1e43      	subs	r3, r0, #1
 8011c3c:	42a1      	cmp	r1, r4
 8011c3e:	d008      	beq.n	8011c52 <memmove+0x28>
 8011c40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c48:	e7f8      	b.n	8011c3c <memmove+0x12>
 8011c4a:	4402      	add	r2, r0
 8011c4c:	4601      	mov	r1, r0
 8011c4e:	428a      	cmp	r2, r1
 8011c50:	d100      	bne.n	8011c54 <memmove+0x2a>
 8011c52:	bd10      	pop	{r4, pc}
 8011c54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c5c:	e7f7      	b.n	8011c4e <memmove+0x24>

08011c5e <memset>:
 8011c5e:	4402      	add	r2, r0
 8011c60:	4603      	mov	r3, r0
 8011c62:	4293      	cmp	r3, r2
 8011c64:	d100      	bne.n	8011c68 <memset+0xa>
 8011c66:	4770      	bx	lr
 8011c68:	f803 1b01 	strb.w	r1, [r3], #1
 8011c6c:	e7f9      	b.n	8011c62 <memset+0x4>
	...

08011c70 <_localeconv_r>:
 8011c70:	4800      	ldr	r0, [pc, #0]	; (8011c74 <_localeconv_r+0x4>)
 8011c72:	4770      	bx	lr
 8011c74:	20000258 	.word	0x20000258

08011c78 <_close_r>:
 8011c78:	b538      	push	{r3, r4, r5, lr}
 8011c7a:	4d06      	ldr	r5, [pc, #24]	; (8011c94 <_close_r+0x1c>)
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	4604      	mov	r4, r0
 8011c80:	4608      	mov	r0, r1
 8011c82:	602b      	str	r3, [r5, #0]
 8011c84:	f7f0 fa4b 	bl	800211e <_close>
 8011c88:	1c43      	adds	r3, r0, #1
 8011c8a:	d102      	bne.n	8011c92 <_close_r+0x1a>
 8011c8c:	682b      	ldr	r3, [r5, #0]
 8011c8e:	b103      	cbz	r3, 8011c92 <_close_r+0x1a>
 8011c90:	6023      	str	r3, [r4, #0]
 8011c92:	bd38      	pop	{r3, r4, r5, pc}
 8011c94:	2000e41c 	.word	0x2000e41c

08011c98 <_lseek_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	4d07      	ldr	r5, [pc, #28]	; (8011cb8 <_lseek_r+0x20>)
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	4608      	mov	r0, r1
 8011ca0:	4611      	mov	r1, r2
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	602a      	str	r2, [r5, #0]
 8011ca6:	461a      	mov	r2, r3
 8011ca8:	f7f0 fa60 	bl	800216c <_lseek>
 8011cac:	1c43      	adds	r3, r0, #1
 8011cae:	d102      	bne.n	8011cb6 <_lseek_r+0x1e>
 8011cb0:	682b      	ldr	r3, [r5, #0]
 8011cb2:	b103      	cbz	r3, 8011cb6 <_lseek_r+0x1e>
 8011cb4:	6023      	str	r3, [r4, #0]
 8011cb6:	bd38      	pop	{r3, r4, r5, pc}
 8011cb8:	2000e41c 	.word	0x2000e41c

08011cbc <_read_r>:
 8011cbc:	b538      	push	{r3, r4, r5, lr}
 8011cbe:	4d07      	ldr	r5, [pc, #28]	; (8011cdc <_read_r+0x20>)
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	4608      	mov	r0, r1
 8011cc4:	4611      	mov	r1, r2
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	602a      	str	r2, [r5, #0]
 8011cca:	461a      	mov	r2, r3
 8011ccc:	f7f0 f9ee 	bl	80020ac <_read>
 8011cd0:	1c43      	adds	r3, r0, #1
 8011cd2:	d102      	bne.n	8011cda <_read_r+0x1e>
 8011cd4:	682b      	ldr	r3, [r5, #0]
 8011cd6:	b103      	cbz	r3, 8011cda <_read_r+0x1e>
 8011cd8:	6023      	str	r3, [r4, #0]
 8011cda:	bd38      	pop	{r3, r4, r5, pc}
 8011cdc:	2000e41c 	.word	0x2000e41c

08011ce0 <_write_r>:
 8011ce0:	b538      	push	{r3, r4, r5, lr}
 8011ce2:	4d07      	ldr	r5, [pc, #28]	; (8011d00 <_write_r+0x20>)
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	4608      	mov	r0, r1
 8011ce8:	4611      	mov	r1, r2
 8011cea:	2200      	movs	r2, #0
 8011cec:	602a      	str	r2, [r5, #0]
 8011cee:	461a      	mov	r2, r3
 8011cf0:	f7f0 f9f9 	bl	80020e6 <_write>
 8011cf4:	1c43      	adds	r3, r0, #1
 8011cf6:	d102      	bne.n	8011cfe <_write_r+0x1e>
 8011cf8:	682b      	ldr	r3, [r5, #0]
 8011cfa:	b103      	cbz	r3, 8011cfe <_write_r+0x1e>
 8011cfc:	6023      	str	r3, [r4, #0]
 8011cfe:	bd38      	pop	{r3, r4, r5, pc}
 8011d00:	2000e41c 	.word	0x2000e41c

08011d04 <__errno>:
 8011d04:	4b01      	ldr	r3, [pc, #4]	; (8011d0c <__errno+0x8>)
 8011d06:	6818      	ldr	r0, [r3, #0]
 8011d08:	4770      	bx	lr
 8011d0a:	bf00      	nop
 8011d0c:	20000164 	.word	0x20000164

08011d10 <__libc_init_array>:
 8011d10:	b570      	push	{r4, r5, r6, lr}
 8011d12:	4d0d      	ldr	r5, [pc, #52]	; (8011d48 <__libc_init_array+0x38>)
 8011d14:	4c0d      	ldr	r4, [pc, #52]	; (8011d4c <__libc_init_array+0x3c>)
 8011d16:	1b64      	subs	r4, r4, r5
 8011d18:	10a4      	asrs	r4, r4, #2
 8011d1a:	2600      	movs	r6, #0
 8011d1c:	42a6      	cmp	r6, r4
 8011d1e:	d109      	bne.n	8011d34 <__libc_init_array+0x24>
 8011d20:	4d0b      	ldr	r5, [pc, #44]	; (8011d50 <__libc_init_array+0x40>)
 8011d22:	4c0c      	ldr	r4, [pc, #48]	; (8011d54 <__libc_init_array+0x44>)
 8011d24:	f003 fbf4 	bl	8015510 <_init>
 8011d28:	1b64      	subs	r4, r4, r5
 8011d2a:	10a4      	asrs	r4, r4, #2
 8011d2c:	2600      	movs	r6, #0
 8011d2e:	42a6      	cmp	r6, r4
 8011d30:	d105      	bne.n	8011d3e <__libc_init_array+0x2e>
 8011d32:	bd70      	pop	{r4, r5, r6, pc}
 8011d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d38:	4798      	blx	r3
 8011d3a:	3601      	adds	r6, #1
 8011d3c:	e7ee      	b.n	8011d1c <__libc_init_array+0xc>
 8011d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d42:	4798      	blx	r3
 8011d44:	3601      	adds	r6, #1
 8011d46:	e7f2      	b.n	8011d2e <__libc_init_array+0x1e>
 8011d48:	08015b68 	.word	0x08015b68
 8011d4c:	08015b68 	.word	0x08015b68
 8011d50:	08015b68 	.word	0x08015b68
 8011d54:	08015b6c 	.word	0x08015b6c

08011d58 <__retarget_lock_acquire_recursive>:
 8011d58:	4770      	bx	lr

08011d5a <__retarget_lock_release_recursive>:
 8011d5a:	4770      	bx	lr

08011d5c <memcpy>:
 8011d5c:	440a      	add	r2, r1
 8011d5e:	4291      	cmp	r1, r2
 8011d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d64:	d100      	bne.n	8011d68 <memcpy+0xc>
 8011d66:	4770      	bx	lr
 8011d68:	b510      	push	{r4, lr}
 8011d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d72:	4291      	cmp	r1, r2
 8011d74:	d1f9      	bne.n	8011d6a <memcpy+0xe>
 8011d76:	bd10      	pop	{r4, pc}

08011d78 <nanf>:
 8011d78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011d80 <nanf+0x8>
 8011d7c:	4770      	bx	lr
 8011d7e:	bf00      	nop
 8011d80:	7fc00000 	.word	0x7fc00000

08011d84 <quorem>:
 8011d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d88:	6903      	ldr	r3, [r0, #16]
 8011d8a:	690c      	ldr	r4, [r1, #16]
 8011d8c:	42a3      	cmp	r3, r4
 8011d8e:	4607      	mov	r7, r0
 8011d90:	db7e      	blt.n	8011e90 <quorem+0x10c>
 8011d92:	3c01      	subs	r4, #1
 8011d94:	f101 0814 	add.w	r8, r1, #20
 8011d98:	f100 0514 	add.w	r5, r0, #20
 8011d9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011da0:	9301      	str	r3, [sp, #4]
 8011da2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011da6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011daa:	3301      	adds	r3, #1
 8011dac:	429a      	cmp	r2, r3
 8011dae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011db2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011db6:	fbb2 f6f3 	udiv	r6, r2, r3
 8011dba:	d331      	bcc.n	8011e20 <quorem+0x9c>
 8011dbc:	f04f 0e00 	mov.w	lr, #0
 8011dc0:	4640      	mov	r0, r8
 8011dc2:	46ac      	mov	ip, r5
 8011dc4:	46f2      	mov	sl, lr
 8011dc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8011dca:	b293      	uxth	r3, r2
 8011dcc:	fb06 e303 	mla	r3, r6, r3, lr
 8011dd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011dd4:	0c1a      	lsrs	r2, r3, #16
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	ebaa 0303 	sub.w	r3, sl, r3
 8011ddc:	f8dc a000 	ldr.w	sl, [ip]
 8011de0:	fa13 f38a 	uxtah	r3, r3, sl
 8011de4:	fb06 220e 	mla	r2, r6, lr, r2
 8011de8:	9300      	str	r3, [sp, #0]
 8011dea:	9b00      	ldr	r3, [sp, #0]
 8011dec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011df0:	b292      	uxth	r2, r2
 8011df2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011df6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011dfa:	f8bd 3000 	ldrh.w	r3, [sp]
 8011dfe:	4581      	cmp	r9, r0
 8011e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e04:	f84c 3b04 	str.w	r3, [ip], #4
 8011e08:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011e0c:	d2db      	bcs.n	8011dc6 <quorem+0x42>
 8011e0e:	f855 300b 	ldr.w	r3, [r5, fp]
 8011e12:	b92b      	cbnz	r3, 8011e20 <quorem+0x9c>
 8011e14:	9b01      	ldr	r3, [sp, #4]
 8011e16:	3b04      	subs	r3, #4
 8011e18:	429d      	cmp	r5, r3
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	d32c      	bcc.n	8011e78 <quorem+0xf4>
 8011e1e:	613c      	str	r4, [r7, #16]
 8011e20:	4638      	mov	r0, r7
 8011e22:	f001 f9f1 	bl	8013208 <__mcmp>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	db22      	blt.n	8011e70 <quorem+0xec>
 8011e2a:	3601      	adds	r6, #1
 8011e2c:	4629      	mov	r1, r5
 8011e2e:	2000      	movs	r0, #0
 8011e30:	f858 2b04 	ldr.w	r2, [r8], #4
 8011e34:	f8d1 c000 	ldr.w	ip, [r1]
 8011e38:	b293      	uxth	r3, r2
 8011e3a:	1ac3      	subs	r3, r0, r3
 8011e3c:	0c12      	lsrs	r2, r2, #16
 8011e3e:	fa13 f38c 	uxtah	r3, r3, ip
 8011e42:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011e46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e4a:	b29b      	uxth	r3, r3
 8011e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e50:	45c1      	cmp	r9, r8
 8011e52:	f841 3b04 	str.w	r3, [r1], #4
 8011e56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011e5a:	d2e9      	bcs.n	8011e30 <quorem+0xac>
 8011e5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e64:	b922      	cbnz	r2, 8011e70 <quorem+0xec>
 8011e66:	3b04      	subs	r3, #4
 8011e68:	429d      	cmp	r5, r3
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	d30a      	bcc.n	8011e84 <quorem+0x100>
 8011e6e:	613c      	str	r4, [r7, #16]
 8011e70:	4630      	mov	r0, r6
 8011e72:	b003      	add	sp, #12
 8011e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e78:	6812      	ldr	r2, [r2, #0]
 8011e7a:	3b04      	subs	r3, #4
 8011e7c:	2a00      	cmp	r2, #0
 8011e7e:	d1ce      	bne.n	8011e1e <quorem+0x9a>
 8011e80:	3c01      	subs	r4, #1
 8011e82:	e7c9      	b.n	8011e18 <quorem+0x94>
 8011e84:	6812      	ldr	r2, [r2, #0]
 8011e86:	3b04      	subs	r3, #4
 8011e88:	2a00      	cmp	r2, #0
 8011e8a:	d1f0      	bne.n	8011e6e <quorem+0xea>
 8011e8c:	3c01      	subs	r4, #1
 8011e8e:	e7eb      	b.n	8011e68 <quorem+0xe4>
 8011e90:	2000      	movs	r0, #0
 8011e92:	e7ee      	b.n	8011e72 <quorem+0xee>
 8011e94:	0000      	movs	r0, r0
	...

08011e98 <_dtoa_r>:
 8011e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e9c:	ed2d 8b04 	vpush	{d8-d9}
 8011ea0:	69c5      	ldr	r5, [r0, #28]
 8011ea2:	b093      	sub	sp, #76	; 0x4c
 8011ea4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011ea8:	ec57 6b10 	vmov	r6, r7, d0
 8011eac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011eb0:	9107      	str	r1, [sp, #28]
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	920a      	str	r2, [sp, #40]	; 0x28
 8011eb6:	930d      	str	r3, [sp, #52]	; 0x34
 8011eb8:	b975      	cbnz	r5, 8011ed8 <_dtoa_r+0x40>
 8011eba:	2010      	movs	r0, #16
 8011ebc:	f000 fe2a 	bl	8012b14 <malloc>
 8011ec0:	4602      	mov	r2, r0
 8011ec2:	61e0      	str	r0, [r4, #28]
 8011ec4:	b920      	cbnz	r0, 8011ed0 <_dtoa_r+0x38>
 8011ec6:	4bae      	ldr	r3, [pc, #696]	; (8012180 <_dtoa_r+0x2e8>)
 8011ec8:	21ef      	movs	r1, #239	; 0xef
 8011eca:	48ae      	ldr	r0, [pc, #696]	; (8012184 <_dtoa_r+0x2ec>)
 8011ecc:	f002 fc4c 	bl	8014768 <__assert_func>
 8011ed0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011ed4:	6005      	str	r5, [r0, #0]
 8011ed6:	60c5      	str	r5, [r0, #12]
 8011ed8:	69e3      	ldr	r3, [r4, #28]
 8011eda:	6819      	ldr	r1, [r3, #0]
 8011edc:	b151      	cbz	r1, 8011ef4 <_dtoa_r+0x5c>
 8011ede:	685a      	ldr	r2, [r3, #4]
 8011ee0:	604a      	str	r2, [r1, #4]
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	4093      	lsls	r3, r2
 8011ee6:	608b      	str	r3, [r1, #8]
 8011ee8:	4620      	mov	r0, r4
 8011eea:	f000 ff07 	bl	8012cfc <_Bfree>
 8011eee:	69e3      	ldr	r3, [r4, #28]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	601a      	str	r2, [r3, #0]
 8011ef4:	1e3b      	subs	r3, r7, #0
 8011ef6:	bfbb      	ittet	lt
 8011ef8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011efc:	9303      	strlt	r3, [sp, #12]
 8011efe:	2300      	movge	r3, #0
 8011f00:	2201      	movlt	r2, #1
 8011f02:	bfac      	ite	ge
 8011f04:	f8c8 3000 	strge.w	r3, [r8]
 8011f08:	f8c8 2000 	strlt.w	r2, [r8]
 8011f0c:	4b9e      	ldr	r3, [pc, #632]	; (8012188 <_dtoa_r+0x2f0>)
 8011f0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011f12:	ea33 0308 	bics.w	r3, r3, r8
 8011f16:	d11b      	bne.n	8011f50 <_dtoa_r+0xb8>
 8011f18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f1e:	6013      	str	r3, [r2, #0]
 8011f20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011f24:	4333      	orrs	r3, r6
 8011f26:	f000 8593 	beq.w	8012a50 <_dtoa_r+0xbb8>
 8011f2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f2c:	b963      	cbnz	r3, 8011f48 <_dtoa_r+0xb0>
 8011f2e:	4b97      	ldr	r3, [pc, #604]	; (801218c <_dtoa_r+0x2f4>)
 8011f30:	e027      	b.n	8011f82 <_dtoa_r+0xea>
 8011f32:	4b97      	ldr	r3, [pc, #604]	; (8012190 <_dtoa_r+0x2f8>)
 8011f34:	9300      	str	r3, [sp, #0]
 8011f36:	3308      	adds	r3, #8
 8011f38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011f3a:	6013      	str	r3, [r2, #0]
 8011f3c:	9800      	ldr	r0, [sp, #0]
 8011f3e:	b013      	add	sp, #76	; 0x4c
 8011f40:	ecbd 8b04 	vpop	{d8-d9}
 8011f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f48:	4b90      	ldr	r3, [pc, #576]	; (801218c <_dtoa_r+0x2f4>)
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	3303      	adds	r3, #3
 8011f4e:	e7f3      	b.n	8011f38 <_dtoa_r+0xa0>
 8011f50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f54:	2200      	movs	r2, #0
 8011f56:	ec51 0b17 	vmov	r0, r1, d7
 8011f5a:	eeb0 8a47 	vmov.f32	s16, s14
 8011f5e:	eef0 8a67 	vmov.f32	s17, s15
 8011f62:	2300      	movs	r3, #0
 8011f64:	f7ee fdb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f68:	4681      	mov	r9, r0
 8011f6a:	b160      	cbz	r0, 8011f86 <_dtoa_r+0xee>
 8011f6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f6e:	2301      	movs	r3, #1
 8011f70:	6013      	str	r3, [r2, #0]
 8011f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	f000 8568 	beq.w	8012a4a <_dtoa_r+0xbb2>
 8011f7a:	4b86      	ldr	r3, [pc, #536]	; (8012194 <_dtoa_r+0x2fc>)
 8011f7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011f7e:	6013      	str	r3, [r2, #0]
 8011f80:	3b01      	subs	r3, #1
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	e7da      	b.n	8011f3c <_dtoa_r+0xa4>
 8011f86:	aa10      	add	r2, sp, #64	; 0x40
 8011f88:	a911      	add	r1, sp, #68	; 0x44
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	eeb0 0a48 	vmov.f32	s0, s16
 8011f90:	eef0 0a68 	vmov.f32	s1, s17
 8011f94:	f001 fa4e 	bl	8013434 <__d2b>
 8011f98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011f9c:	4682      	mov	sl, r0
 8011f9e:	2d00      	cmp	r5, #0
 8011fa0:	d07f      	beq.n	80120a2 <_dtoa_r+0x20a>
 8011fa2:	ee18 3a90 	vmov	r3, s17
 8011fa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011faa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011fae:	ec51 0b18 	vmov	r0, r1, d8
 8011fb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011fb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011fba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	4b75      	ldr	r3, [pc, #468]	; (8012198 <_dtoa_r+0x300>)
 8011fc4:	f7ee f960 	bl	8000288 <__aeabi_dsub>
 8011fc8:	a367      	add	r3, pc, #412	; (adr r3, 8012168 <_dtoa_r+0x2d0>)
 8011fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fce:	f7ee fb13 	bl	80005f8 <__aeabi_dmul>
 8011fd2:	a367      	add	r3, pc, #412	; (adr r3, 8012170 <_dtoa_r+0x2d8>)
 8011fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd8:	f7ee f958 	bl	800028c <__adddf3>
 8011fdc:	4606      	mov	r6, r0
 8011fde:	4628      	mov	r0, r5
 8011fe0:	460f      	mov	r7, r1
 8011fe2:	f7ee fa9f 	bl	8000524 <__aeabi_i2d>
 8011fe6:	a364      	add	r3, pc, #400	; (adr r3, 8012178 <_dtoa_r+0x2e0>)
 8011fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fec:	f7ee fb04 	bl	80005f8 <__aeabi_dmul>
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	460b      	mov	r3, r1
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	4639      	mov	r1, r7
 8011ff8:	f7ee f948 	bl	800028c <__adddf3>
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	460f      	mov	r7, r1
 8012000:	f7ee fdaa 	bl	8000b58 <__aeabi_d2iz>
 8012004:	2200      	movs	r2, #0
 8012006:	4683      	mov	fp, r0
 8012008:	2300      	movs	r3, #0
 801200a:	4630      	mov	r0, r6
 801200c:	4639      	mov	r1, r7
 801200e:	f7ee fd65 	bl	8000adc <__aeabi_dcmplt>
 8012012:	b148      	cbz	r0, 8012028 <_dtoa_r+0x190>
 8012014:	4658      	mov	r0, fp
 8012016:	f7ee fa85 	bl	8000524 <__aeabi_i2d>
 801201a:	4632      	mov	r2, r6
 801201c:	463b      	mov	r3, r7
 801201e:	f7ee fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 8012022:	b908      	cbnz	r0, 8012028 <_dtoa_r+0x190>
 8012024:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012028:	f1bb 0f16 	cmp.w	fp, #22
 801202c:	d857      	bhi.n	80120de <_dtoa_r+0x246>
 801202e:	4b5b      	ldr	r3, [pc, #364]	; (801219c <_dtoa_r+0x304>)
 8012030:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012038:	ec51 0b18 	vmov	r0, r1, d8
 801203c:	f7ee fd4e 	bl	8000adc <__aeabi_dcmplt>
 8012040:	2800      	cmp	r0, #0
 8012042:	d04e      	beq.n	80120e2 <_dtoa_r+0x24a>
 8012044:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012048:	2300      	movs	r3, #0
 801204a:	930c      	str	r3, [sp, #48]	; 0x30
 801204c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801204e:	1b5b      	subs	r3, r3, r5
 8012050:	1e5a      	subs	r2, r3, #1
 8012052:	bf45      	ittet	mi
 8012054:	f1c3 0301 	rsbmi	r3, r3, #1
 8012058:	9305      	strmi	r3, [sp, #20]
 801205a:	2300      	movpl	r3, #0
 801205c:	2300      	movmi	r3, #0
 801205e:	9206      	str	r2, [sp, #24]
 8012060:	bf54      	ite	pl
 8012062:	9305      	strpl	r3, [sp, #20]
 8012064:	9306      	strmi	r3, [sp, #24]
 8012066:	f1bb 0f00 	cmp.w	fp, #0
 801206a:	db3c      	blt.n	80120e6 <_dtoa_r+0x24e>
 801206c:	9b06      	ldr	r3, [sp, #24]
 801206e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012072:	445b      	add	r3, fp
 8012074:	9306      	str	r3, [sp, #24]
 8012076:	2300      	movs	r3, #0
 8012078:	9308      	str	r3, [sp, #32]
 801207a:	9b07      	ldr	r3, [sp, #28]
 801207c:	2b09      	cmp	r3, #9
 801207e:	d868      	bhi.n	8012152 <_dtoa_r+0x2ba>
 8012080:	2b05      	cmp	r3, #5
 8012082:	bfc4      	itt	gt
 8012084:	3b04      	subgt	r3, #4
 8012086:	9307      	strgt	r3, [sp, #28]
 8012088:	9b07      	ldr	r3, [sp, #28]
 801208a:	f1a3 0302 	sub.w	r3, r3, #2
 801208e:	bfcc      	ite	gt
 8012090:	2500      	movgt	r5, #0
 8012092:	2501      	movle	r5, #1
 8012094:	2b03      	cmp	r3, #3
 8012096:	f200 8085 	bhi.w	80121a4 <_dtoa_r+0x30c>
 801209a:	e8df f003 	tbb	[pc, r3]
 801209e:	3b2e      	.short	0x3b2e
 80120a0:	5839      	.short	0x5839
 80120a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80120a6:	441d      	add	r5, r3
 80120a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80120ac:	2b20      	cmp	r3, #32
 80120ae:	bfc1      	itttt	gt
 80120b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80120b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80120b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80120bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80120c0:	bfd6      	itet	le
 80120c2:	f1c3 0320 	rsble	r3, r3, #32
 80120c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80120ca:	fa06 f003 	lslle.w	r0, r6, r3
 80120ce:	f7ee fa19 	bl	8000504 <__aeabi_ui2d>
 80120d2:	2201      	movs	r2, #1
 80120d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80120d8:	3d01      	subs	r5, #1
 80120da:	920e      	str	r2, [sp, #56]	; 0x38
 80120dc:	e76f      	b.n	8011fbe <_dtoa_r+0x126>
 80120de:	2301      	movs	r3, #1
 80120e0:	e7b3      	b.n	801204a <_dtoa_r+0x1b2>
 80120e2:	900c      	str	r0, [sp, #48]	; 0x30
 80120e4:	e7b2      	b.n	801204c <_dtoa_r+0x1b4>
 80120e6:	9b05      	ldr	r3, [sp, #20]
 80120e8:	eba3 030b 	sub.w	r3, r3, fp
 80120ec:	9305      	str	r3, [sp, #20]
 80120ee:	f1cb 0300 	rsb	r3, fp, #0
 80120f2:	9308      	str	r3, [sp, #32]
 80120f4:	2300      	movs	r3, #0
 80120f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80120f8:	e7bf      	b.n	801207a <_dtoa_r+0x1e2>
 80120fa:	2300      	movs	r3, #0
 80120fc:	9309      	str	r3, [sp, #36]	; 0x24
 80120fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012100:	2b00      	cmp	r3, #0
 8012102:	dc52      	bgt.n	80121aa <_dtoa_r+0x312>
 8012104:	2301      	movs	r3, #1
 8012106:	9301      	str	r3, [sp, #4]
 8012108:	9304      	str	r3, [sp, #16]
 801210a:	461a      	mov	r2, r3
 801210c:	920a      	str	r2, [sp, #40]	; 0x28
 801210e:	e00b      	b.n	8012128 <_dtoa_r+0x290>
 8012110:	2301      	movs	r3, #1
 8012112:	e7f3      	b.n	80120fc <_dtoa_r+0x264>
 8012114:	2300      	movs	r3, #0
 8012116:	9309      	str	r3, [sp, #36]	; 0x24
 8012118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801211a:	445b      	add	r3, fp
 801211c:	9301      	str	r3, [sp, #4]
 801211e:	3301      	adds	r3, #1
 8012120:	2b01      	cmp	r3, #1
 8012122:	9304      	str	r3, [sp, #16]
 8012124:	bfb8      	it	lt
 8012126:	2301      	movlt	r3, #1
 8012128:	69e0      	ldr	r0, [r4, #28]
 801212a:	2100      	movs	r1, #0
 801212c:	2204      	movs	r2, #4
 801212e:	f102 0614 	add.w	r6, r2, #20
 8012132:	429e      	cmp	r6, r3
 8012134:	d93d      	bls.n	80121b2 <_dtoa_r+0x31a>
 8012136:	6041      	str	r1, [r0, #4]
 8012138:	4620      	mov	r0, r4
 801213a:	f000 fd9f 	bl	8012c7c <_Balloc>
 801213e:	9000      	str	r0, [sp, #0]
 8012140:	2800      	cmp	r0, #0
 8012142:	d139      	bne.n	80121b8 <_dtoa_r+0x320>
 8012144:	4b16      	ldr	r3, [pc, #88]	; (80121a0 <_dtoa_r+0x308>)
 8012146:	4602      	mov	r2, r0
 8012148:	f240 11af 	movw	r1, #431	; 0x1af
 801214c:	e6bd      	b.n	8011eca <_dtoa_r+0x32>
 801214e:	2301      	movs	r3, #1
 8012150:	e7e1      	b.n	8012116 <_dtoa_r+0x27e>
 8012152:	2501      	movs	r5, #1
 8012154:	2300      	movs	r3, #0
 8012156:	9307      	str	r3, [sp, #28]
 8012158:	9509      	str	r5, [sp, #36]	; 0x24
 801215a:	f04f 33ff 	mov.w	r3, #4294967295
 801215e:	9301      	str	r3, [sp, #4]
 8012160:	9304      	str	r3, [sp, #16]
 8012162:	2200      	movs	r2, #0
 8012164:	2312      	movs	r3, #18
 8012166:	e7d1      	b.n	801210c <_dtoa_r+0x274>
 8012168:	636f4361 	.word	0x636f4361
 801216c:	3fd287a7 	.word	0x3fd287a7
 8012170:	8b60c8b3 	.word	0x8b60c8b3
 8012174:	3fc68a28 	.word	0x3fc68a28
 8012178:	509f79fb 	.word	0x509f79fb
 801217c:	3fd34413 	.word	0x3fd34413
 8012180:	08015784 	.word	0x08015784
 8012184:	0801579b 	.word	0x0801579b
 8012188:	7ff00000 	.word	0x7ff00000
 801218c:	08015780 	.word	0x08015780
 8012190:	08015777 	.word	0x08015777
 8012194:	0801574f 	.word	0x0801574f
 8012198:	3ff80000 	.word	0x3ff80000
 801219c:	08015888 	.word	0x08015888
 80121a0:	080157f3 	.word	0x080157f3
 80121a4:	2301      	movs	r3, #1
 80121a6:	9309      	str	r3, [sp, #36]	; 0x24
 80121a8:	e7d7      	b.n	801215a <_dtoa_r+0x2c2>
 80121aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121ac:	9301      	str	r3, [sp, #4]
 80121ae:	9304      	str	r3, [sp, #16]
 80121b0:	e7ba      	b.n	8012128 <_dtoa_r+0x290>
 80121b2:	3101      	adds	r1, #1
 80121b4:	0052      	lsls	r2, r2, #1
 80121b6:	e7ba      	b.n	801212e <_dtoa_r+0x296>
 80121b8:	69e3      	ldr	r3, [r4, #28]
 80121ba:	9a00      	ldr	r2, [sp, #0]
 80121bc:	601a      	str	r2, [r3, #0]
 80121be:	9b04      	ldr	r3, [sp, #16]
 80121c0:	2b0e      	cmp	r3, #14
 80121c2:	f200 80a8 	bhi.w	8012316 <_dtoa_r+0x47e>
 80121c6:	2d00      	cmp	r5, #0
 80121c8:	f000 80a5 	beq.w	8012316 <_dtoa_r+0x47e>
 80121cc:	f1bb 0f00 	cmp.w	fp, #0
 80121d0:	dd38      	ble.n	8012244 <_dtoa_r+0x3ac>
 80121d2:	4bc0      	ldr	r3, [pc, #768]	; (80124d4 <_dtoa_r+0x63c>)
 80121d4:	f00b 020f 	and.w	r2, fp, #15
 80121d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80121e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80121e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80121e8:	d019      	beq.n	801221e <_dtoa_r+0x386>
 80121ea:	4bbb      	ldr	r3, [pc, #748]	; (80124d8 <_dtoa_r+0x640>)
 80121ec:	ec51 0b18 	vmov	r0, r1, d8
 80121f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80121f4:	f7ee fb2a 	bl	800084c <__aeabi_ddiv>
 80121f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121fc:	f008 080f 	and.w	r8, r8, #15
 8012200:	2503      	movs	r5, #3
 8012202:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80124d8 <_dtoa_r+0x640>
 8012206:	f1b8 0f00 	cmp.w	r8, #0
 801220a:	d10a      	bne.n	8012222 <_dtoa_r+0x38a>
 801220c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012210:	4632      	mov	r2, r6
 8012212:	463b      	mov	r3, r7
 8012214:	f7ee fb1a 	bl	800084c <__aeabi_ddiv>
 8012218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801221c:	e02b      	b.n	8012276 <_dtoa_r+0x3de>
 801221e:	2502      	movs	r5, #2
 8012220:	e7ef      	b.n	8012202 <_dtoa_r+0x36a>
 8012222:	f018 0f01 	tst.w	r8, #1
 8012226:	d008      	beq.n	801223a <_dtoa_r+0x3a2>
 8012228:	4630      	mov	r0, r6
 801222a:	4639      	mov	r1, r7
 801222c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012230:	f7ee f9e2 	bl	80005f8 <__aeabi_dmul>
 8012234:	3501      	adds	r5, #1
 8012236:	4606      	mov	r6, r0
 8012238:	460f      	mov	r7, r1
 801223a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801223e:	f109 0908 	add.w	r9, r9, #8
 8012242:	e7e0      	b.n	8012206 <_dtoa_r+0x36e>
 8012244:	f000 809f 	beq.w	8012386 <_dtoa_r+0x4ee>
 8012248:	f1cb 0600 	rsb	r6, fp, #0
 801224c:	4ba1      	ldr	r3, [pc, #644]	; (80124d4 <_dtoa_r+0x63c>)
 801224e:	4fa2      	ldr	r7, [pc, #648]	; (80124d8 <_dtoa_r+0x640>)
 8012250:	f006 020f 	and.w	r2, r6, #15
 8012254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225c:	ec51 0b18 	vmov	r0, r1, d8
 8012260:	f7ee f9ca 	bl	80005f8 <__aeabi_dmul>
 8012264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012268:	1136      	asrs	r6, r6, #4
 801226a:	2300      	movs	r3, #0
 801226c:	2502      	movs	r5, #2
 801226e:	2e00      	cmp	r6, #0
 8012270:	d17e      	bne.n	8012370 <_dtoa_r+0x4d8>
 8012272:	2b00      	cmp	r3, #0
 8012274:	d1d0      	bne.n	8012218 <_dtoa_r+0x380>
 8012276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012278:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801227c:	2b00      	cmp	r3, #0
 801227e:	f000 8084 	beq.w	801238a <_dtoa_r+0x4f2>
 8012282:	4b96      	ldr	r3, [pc, #600]	; (80124dc <_dtoa_r+0x644>)
 8012284:	2200      	movs	r2, #0
 8012286:	4640      	mov	r0, r8
 8012288:	4649      	mov	r1, r9
 801228a:	f7ee fc27 	bl	8000adc <__aeabi_dcmplt>
 801228e:	2800      	cmp	r0, #0
 8012290:	d07b      	beq.n	801238a <_dtoa_r+0x4f2>
 8012292:	9b04      	ldr	r3, [sp, #16]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d078      	beq.n	801238a <_dtoa_r+0x4f2>
 8012298:	9b01      	ldr	r3, [sp, #4]
 801229a:	2b00      	cmp	r3, #0
 801229c:	dd39      	ble.n	8012312 <_dtoa_r+0x47a>
 801229e:	4b90      	ldr	r3, [pc, #576]	; (80124e0 <_dtoa_r+0x648>)
 80122a0:	2200      	movs	r2, #0
 80122a2:	4640      	mov	r0, r8
 80122a4:	4649      	mov	r1, r9
 80122a6:	f7ee f9a7 	bl	80005f8 <__aeabi_dmul>
 80122aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122ae:	9e01      	ldr	r6, [sp, #4]
 80122b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80122b4:	3501      	adds	r5, #1
 80122b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80122ba:	4628      	mov	r0, r5
 80122bc:	f7ee f932 	bl	8000524 <__aeabi_i2d>
 80122c0:	4642      	mov	r2, r8
 80122c2:	464b      	mov	r3, r9
 80122c4:	f7ee f998 	bl	80005f8 <__aeabi_dmul>
 80122c8:	4b86      	ldr	r3, [pc, #536]	; (80124e4 <_dtoa_r+0x64c>)
 80122ca:	2200      	movs	r2, #0
 80122cc:	f7ed ffde 	bl	800028c <__adddf3>
 80122d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80122d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122d8:	9303      	str	r3, [sp, #12]
 80122da:	2e00      	cmp	r6, #0
 80122dc:	d158      	bne.n	8012390 <_dtoa_r+0x4f8>
 80122de:	4b82      	ldr	r3, [pc, #520]	; (80124e8 <_dtoa_r+0x650>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	4640      	mov	r0, r8
 80122e4:	4649      	mov	r1, r9
 80122e6:	f7ed ffcf 	bl	8000288 <__aeabi_dsub>
 80122ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122ee:	4680      	mov	r8, r0
 80122f0:	4689      	mov	r9, r1
 80122f2:	f7ee fc11 	bl	8000b18 <__aeabi_dcmpgt>
 80122f6:	2800      	cmp	r0, #0
 80122f8:	f040 8296 	bne.w	8012828 <_dtoa_r+0x990>
 80122fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012300:	4640      	mov	r0, r8
 8012302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012306:	4649      	mov	r1, r9
 8012308:	f7ee fbe8 	bl	8000adc <__aeabi_dcmplt>
 801230c:	2800      	cmp	r0, #0
 801230e:	f040 8289 	bne.w	8012824 <_dtoa_r+0x98c>
 8012312:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012318:	2b00      	cmp	r3, #0
 801231a:	f2c0 814e 	blt.w	80125ba <_dtoa_r+0x722>
 801231e:	f1bb 0f0e 	cmp.w	fp, #14
 8012322:	f300 814a 	bgt.w	80125ba <_dtoa_r+0x722>
 8012326:	4b6b      	ldr	r3, [pc, #428]	; (80124d4 <_dtoa_r+0x63c>)
 8012328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801232c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012332:	2b00      	cmp	r3, #0
 8012334:	f280 80dc 	bge.w	80124f0 <_dtoa_r+0x658>
 8012338:	9b04      	ldr	r3, [sp, #16]
 801233a:	2b00      	cmp	r3, #0
 801233c:	f300 80d8 	bgt.w	80124f0 <_dtoa_r+0x658>
 8012340:	f040 826f 	bne.w	8012822 <_dtoa_r+0x98a>
 8012344:	4b68      	ldr	r3, [pc, #416]	; (80124e8 <_dtoa_r+0x650>)
 8012346:	2200      	movs	r2, #0
 8012348:	4640      	mov	r0, r8
 801234a:	4649      	mov	r1, r9
 801234c:	f7ee f954 	bl	80005f8 <__aeabi_dmul>
 8012350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012354:	f7ee fbd6 	bl	8000b04 <__aeabi_dcmpge>
 8012358:	9e04      	ldr	r6, [sp, #16]
 801235a:	4637      	mov	r7, r6
 801235c:	2800      	cmp	r0, #0
 801235e:	f040 8245 	bne.w	80127ec <_dtoa_r+0x954>
 8012362:	9d00      	ldr	r5, [sp, #0]
 8012364:	2331      	movs	r3, #49	; 0x31
 8012366:	f805 3b01 	strb.w	r3, [r5], #1
 801236a:	f10b 0b01 	add.w	fp, fp, #1
 801236e:	e241      	b.n	80127f4 <_dtoa_r+0x95c>
 8012370:	07f2      	lsls	r2, r6, #31
 8012372:	d505      	bpl.n	8012380 <_dtoa_r+0x4e8>
 8012374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012378:	f7ee f93e 	bl	80005f8 <__aeabi_dmul>
 801237c:	3501      	adds	r5, #1
 801237e:	2301      	movs	r3, #1
 8012380:	1076      	asrs	r6, r6, #1
 8012382:	3708      	adds	r7, #8
 8012384:	e773      	b.n	801226e <_dtoa_r+0x3d6>
 8012386:	2502      	movs	r5, #2
 8012388:	e775      	b.n	8012276 <_dtoa_r+0x3de>
 801238a:	9e04      	ldr	r6, [sp, #16]
 801238c:	465f      	mov	r7, fp
 801238e:	e792      	b.n	80122b6 <_dtoa_r+0x41e>
 8012390:	9900      	ldr	r1, [sp, #0]
 8012392:	4b50      	ldr	r3, [pc, #320]	; (80124d4 <_dtoa_r+0x63c>)
 8012394:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012398:	4431      	add	r1, r6
 801239a:	9102      	str	r1, [sp, #8]
 801239c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801239e:	eeb0 9a47 	vmov.f32	s18, s14
 80123a2:	eef0 9a67 	vmov.f32	s19, s15
 80123a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80123aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80123ae:	2900      	cmp	r1, #0
 80123b0:	d044      	beq.n	801243c <_dtoa_r+0x5a4>
 80123b2:	494e      	ldr	r1, [pc, #312]	; (80124ec <_dtoa_r+0x654>)
 80123b4:	2000      	movs	r0, #0
 80123b6:	f7ee fa49 	bl	800084c <__aeabi_ddiv>
 80123ba:	ec53 2b19 	vmov	r2, r3, d9
 80123be:	f7ed ff63 	bl	8000288 <__aeabi_dsub>
 80123c2:	9d00      	ldr	r5, [sp, #0]
 80123c4:	ec41 0b19 	vmov	d9, r0, r1
 80123c8:	4649      	mov	r1, r9
 80123ca:	4640      	mov	r0, r8
 80123cc:	f7ee fbc4 	bl	8000b58 <__aeabi_d2iz>
 80123d0:	4606      	mov	r6, r0
 80123d2:	f7ee f8a7 	bl	8000524 <__aeabi_i2d>
 80123d6:	4602      	mov	r2, r0
 80123d8:	460b      	mov	r3, r1
 80123da:	4640      	mov	r0, r8
 80123dc:	4649      	mov	r1, r9
 80123de:	f7ed ff53 	bl	8000288 <__aeabi_dsub>
 80123e2:	3630      	adds	r6, #48	; 0x30
 80123e4:	f805 6b01 	strb.w	r6, [r5], #1
 80123e8:	ec53 2b19 	vmov	r2, r3, d9
 80123ec:	4680      	mov	r8, r0
 80123ee:	4689      	mov	r9, r1
 80123f0:	f7ee fb74 	bl	8000adc <__aeabi_dcmplt>
 80123f4:	2800      	cmp	r0, #0
 80123f6:	d164      	bne.n	80124c2 <_dtoa_r+0x62a>
 80123f8:	4642      	mov	r2, r8
 80123fa:	464b      	mov	r3, r9
 80123fc:	4937      	ldr	r1, [pc, #220]	; (80124dc <_dtoa_r+0x644>)
 80123fe:	2000      	movs	r0, #0
 8012400:	f7ed ff42 	bl	8000288 <__aeabi_dsub>
 8012404:	ec53 2b19 	vmov	r2, r3, d9
 8012408:	f7ee fb68 	bl	8000adc <__aeabi_dcmplt>
 801240c:	2800      	cmp	r0, #0
 801240e:	f040 80b6 	bne.w	801257e <_dtoa_r+0x6e6>
 8012412:	9b02      	ldr	r3, [sp, #8]
 8012414:	429d      	cmp	r5, r3
 8012416:	f43f af7c 	beq.w	8012312 <_dtoa_r+0x47a>
 801241a:	4b31      	ldr	r3, [pc, #196]	; (80124e0 <_dtoa_r+0x648>)
 801241c:	ec51 0b19 	vmov	r0, r1, d9
 8012420:	2200      	movs	r2, #0
 8012422:	f7ee f8e9 	bl	80005f8 <__aeabi_dmul>
 8012426:	4b2e      	ldr	r3, [pc, #184]	; (80124e0 <_dtoa_r+0x648>)
 8012428:	ec41 0b19 	vmov	d9, r0, r1
 801242c:	2200      	movs	r2, #0
 801242e:	4640      	mov	r0, r8
 8012430:	4649      	mov	r1, r9
 8012432:	f7ee f8e1 	bl	80005f8 <__aeabi_dmul>
 8012436:	4680      	mov	r8, r0
 8012438:	4689      	mov	r9, r1
 801243a:	e7c5      	b.n	80123c8 <_dtoa_r+0x530>
 801243c:	ec51 0b17 	vmov	r0, r1, d7
 8012440:	f7ee f8da 	bl	80005f8 <__aeabi_dmul>
 8012444:	9b02      	ldr	r3, [sp, #8]
 8012446:	9d00      	ldr	r5, [sp, #0]
 8012448:	930f      	str	r3, [sp, #60]	; 0x3c
 801244a:	ec41 0b19 	vmov	d9, r0, r1
 801244e:	4649      	mov	r1, r9
 8012450:	4640      	mov	r0, r8
 8012452:	f7ee fb81 	bl	8000b58 <__aeabi_d2iz>
 8012456:	4606      	mov	r6, r0
 8012458:	f7ee f864 	bl	8000524 <__aeabi_i2d>
 801245c:	3630      	adds	r6, #48	; 0x30
 801245e:	4602      	mov	r2, r0
 8012460:	460b      	mov	r3, r1
 8012462:	4640      	mov	r0, r8
 8012464:	4649      	mov	r1, r9
 8012466:	f7ed ff0f 	bl	8000288 <__aeabi_dsub>
 801246a:	f805 6b01 	strb.w	r6, [r5], #1
 801246e:	9b02      	ldr	r3, [sp, #8]
 8012470:	429d      	cmp	r5, r3
 8012472:	4680      	mov	r8, r0
 8012474:	4689      	mov	r9, r1
 8012476:	f04f 0200 	mov.w	r2, #0
 801247a:	d124      	bne.n	80124c6 <_dtoa_r+0x62e>
 801247c:	4b1b      	ldr	r3, [pc, #108]	; (80124ec <_dtoa_r+0x654>)
 801247e:	ec51 0b19 	vmov	r0, r1, d9
 8012482:	f7ed ff03 	bl	800028c <__adddf3>
 8012486:	4602      	mov	r2, r0
 8012488:	460b      	mov	r3, r1
 801248a:	4640      	mov	r0, r8
 801248c:	4649      	mov	r1, r9
 801248e:	f7ee fb43 	bl	8000b18 <__aeabi_dcmpgt>
 8012492:	2800      	cmp	r0, #0
 8012494:	d173      	bne.n	801257e <_dtoa_r+0x6e6>
 8012496:	ec53 2b19 	vmov	r2, r3, d9
 801249a:	4914      	ldr	r1, [pc, #80]	; (80124ec <_dtoa_r+0x654>)
 801249c:	2000      	movs	r0, #0
 801249e:	f7ed fef3 	bl	8000288 <__aeabi_dsub>
 80124a2:	4602      	mov	r2, r0
 80124a4:	460b      	mov	r3, r1
 80124a6:	4640      	mov	r0, r8
 80124a8:	4649      	mov	r1, r9
 80124aa:	f7ee fb17 	bl	8000adc <__aeabi_dcmplt>
 80124ae:	2800      	cmp	r0, #0
 80124b0:	f43f af2f 	beq.w	8012312 <_dtoa_r+0x47a>
 80124b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80124b6:	1e6b      	subs	r3, r5, #1
 80124b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80124ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80124be:	2b30      	cmp	r3, #48	; 0x30
 80124c0:	d0f8      	beq.n	80124b4 <_dtoa_r+0x61c>
 80124c2:	46bb      	mov	fp, r7
 80124c4:	e04a      	b.n	801255c <_dtoa_r+0x6c4>
 80124c6:	4b06      	ldr	r3, [pc, #24]	; (80124e0 <_dtoa_r+0x648>)
 80124c8:	f7ee f896 	bl	80005f8 <__aeabi_dmul>
 80124cc:	4680      	mov	r8, r0
 80124ce:	4689      	mov	r9, r1
 80124d0:	e7bd      	b.n	801244e <_dtoa_r+0x5b6>
 80124d2:	bf00      	nop
 80124d4:	08015888 	.word	0x08015888
 80124d8:	08015860 	.word	0x08015860
 80124dc:	3ff00000 	.word	0x3ff00000
 80124e0:	40240000 	.word	0x40240000
 80124e4:	401c0000 	.word	0x401c0000
 80124e8:	40140000 	.word	0x40140000
 80124ec:	3fe00000 	.word	0x3fe00000
 80124f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80124f4:	9d00      	ldr	r5, [sp, #0]
 80124f6:	4642      	mov	r2, r8
 80124f8:	464b      	mov	r3, r9
 80124fa:	4630      	mov	r0, r6
 80124fc:	4639      	mov	r1, r7
 80124fe:	f7ee f9a5 	bl	800084c <__aeabi_ddiv>
 8012502:	f7ee fb29 	bl	8000b58 <__aeabi_d2iz>
 8012506:	9001      	str	r0, [sp, #4]
 8012508:	f7ee f80c 	bl	8000524 <__aeabi_i2d>
 801250c:	4642      	mov	r2, r8
 801250e:	464b      	mov	r3, r9
 8012510:	f7ee f872 	bl	80005f8 <__aeabi_dmul>
 8012514:	4602      	mov	r2, r0
 8012516:	460b      	mov	r3, r1
 8012518:	4630      	mov	r0, r6
 801251a:	4639      	mov	r1, r7
 801251c:	f7ed feb4 	bl	8000288 <__aeabi_dsub>
 8012520:	9e01      	ldr	r6, [sp, #4]
 8012522:	9f04      	ldr	r7, [sp, #16]
 8012524:	3630      	adds	r6, #48	; 0x30
 8012526:	f805 6b01 	strb.w	r6, [r5], #1
 801252a:	9e00      	ldr	r6, [sp, #0]
 801252c:	1bae      	subs	r6, r5, r6
 801252e:	42b7      	cmp	r7, r6
 8012530:	4602      	mov	r2, r0
 8012532:	460b      	mov	r3, r1
 8012534:	d134      	bne.n	80125a0 <_dtoa_r+0x708>
 8012536:	f7ed fea9 	bl	800028c <__adddf3>
 801253a:	4642      	mov	r2, r8
 801253c:	464b      	mov	r3, r9
 801253e:	4606      	mov	r6, r0
 8012540:	460f      	mov	r7, r1
 8012542:	f7ee fae9 	bl	8000b18 <__aeabi_dcmpgt>
 8012546:	b9c8      	cbnz	r0, 801257c <_dtoa_r+0x6e4>
 8012548:	4642      	mov	r2, r8
 801254a:	464b      	mov	r3, r9
 801254c:	4630      	mov	r0, r6
 801254e:	4639      	mov	r1, r7
 8012550:	f7ee faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8012554:	b110      	cbz	r0, 801255c <_dtoa_r+0x6c4>
 8012556:	9b01      	ldr	r3, [sp, #4]
 8012558:	07db      	lsls	r3, r3, #31
 801255a:	d40f      	bmi.n	801257c <_dtoa_r+0x6e4>
 801255c:	4651      	mov	r1, sl
 801255e:	4620      	mov	r0, r4
 8012560:	f000 fbcc 	bl	8012cfc <_Bfree>
 8012564:	2300      	movs	r3, #0
 8012566:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012568:	702b      	strb	r3, [r5, #0]
 801256a:	f10b 0301 	add.w	r3, fp, #1
 801256e:	6013      	str	r3, [r2, #0]
 8012570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012572:	2b00      	cmp	r3, #0
 8012574:	f43f ace2 	beq.w	8011f3c <_dtoa_r+0xa4>
 8012578:	601d      	str	r5, [r3, #0]
 801257a:	e4df      	b.n	8011f3c <_dtoa_r+0xa4>
 801257c:	465f      	mov	r7, fp
 801257e:	462b      	mov	r3, r5
 8012580:	461d      	mov	r5, r3
 8012582:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012586:	2a39      	cmp	r2, #57	; 0x39
 8012588:	d106      	bne.n	8012598 <_dtoa_r+0x700>
 801258a:	9a00      	ldr	r2, [sp, #0]
 801258c:	429a      	cmp	r2, r3
 801258e:	d1f7      	bne.n	8012580 <_dtoa_r+0x6e8>
 8012590:	9900      	ldr	r1, [sp, #0]
 8012592:	2230      	movs	r2, #48	; 0x30
 8012594:	3701      	adds	r7, #1
 8012596:	700a      	strb	r2, [r1, #0]
 8012598:	781a      	ldrb	r2, [r3, #0]
 801259a:	3201      	adds	r2, #1
 801259c:	701a      	strb	r2, [r3, #0]
 801259e:	e790      	b.n	80124c2 <_dtoa_r+0x62a>
 80125a0:	4ba3      	ldr	r3, [pc, #652]	; (8012830 <_dtoa_r+0x998>)
 80125a2:	2200      	movs	r2, #0
 80125a4:	f7ee f828 	bl	80005f8 <__aeabi_dmul>
 80125a8:	2200      	movs	r2, #0
 80125aa:	2300      	movs	r3, #0
 80125ac:	4606      	mov	r6, r0
 80125ae:	460f      	mov	r7, r1
 80125b0:	f7ee fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80125b4:	2800      	cmp	r0, #0
 80125b6:	d09e      	beq.n	80124f6 <_dtoa_r+0x65e>
 80125b8:	e7d0      	b.n	801255c <_dtoa_r+0x6c4>
 80125ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125bc:	2a00      	cmp	r2, #0
 80125be:	f000 80ca 	beq.w	8012756 <_dtoa_r+0x8be>
 80125c2:	9a07      	ldr	r2, [sp, #28]
 80125c4:	2a01      	cmp	r2, #1
 80125c6:	f300 80ad 	bgt.w	8012724 <_dtoa_r+0x88c>
 80125ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125cc:	2a00      	cmp	r2, #0
 80125ce:	f000 80a5 	beq.w	801271c <_dtoa_r+0x884>
 80125d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80125d6:	9e08      	ldr	r6, [sp, #32]
 80125d8:	9d05      	ldr	r5, [sp, #20]
 80125da:	9a05      	ldr	r2, [sp, #20]
 80125dc:	441a      	add	r2, r3
 80125de:	9205      	str	r2, [sp, #20]
 80125e0:	9a06      	ldr	r2, [sp, #24]
 80125e2:	2101      	movs	r1, #1
 80125e4:	441a      	add	r2, r3
 80125e6:	4620      	mov	r0, r4
 80125e8:	9206      	str	r2, [sp, #24]
 80125ea:	f000 fc87 	bl	8012efc <__i2b>
 80125ee:	4607      	mov	r7, r0
 80125f0:	b165      	cbz	r5, 801260c <_dtoa_r+0x774>
 80125f2:	9b06      	ldr	r3, [sp, #24]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	dd09      	ble.n	801260c <_dtoa_r+0x774>
 80125f8:	42ab      	cmp	r3, r5
 80125fa:	9a05      	ldr	r2, [sp, #20]
 80125fc:	bfa8      	it	ge
 80125fe:	462b      	movge	r3, r5
 8012600:	1ad2      	subs	r2, r2, r3
 8012602:	9205      	str	r2, [sp, #20]
 8012604:	9a06      	ldr	r2, [sp, #24]
 8012606:	1aed      	subs	r5, r5, r3
 8012608:	1ad3      	subs	r3, r2, r3
 801260a:	9306      	str	r3, [sp, #24]
 801260c:	9b08      	ldr	r3, [sp, #32]
 801260e:	b1f3      	cbz	r3, 801264e <_dtoa_r+0x7b6>
 8012610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012612:	2b00      	cmp	r3, #0
 8012614:	f000 80a3 	beq.w	801275e <_dtoa_r+0x8c6>
 8012618:	2e00      	cmp	r6, #0
 801261a:	dd10      	ble.n	801263e <_dtoa_r+0x7a6>
 801261c:	4639      	mov	r1, r7
 801261e:	4632      	mov	r2, r6
 8012620:	4620      	mov	r0, r4
 8012622:	f000 fd2b 	bl	801307c <__pow5mult>
 8012626:	4652      	mov	r2, sl
 8012628:	4601      	mov	r1, r0
 801262a:	4607      	mov	r7, r0
 801262c:	4620      	mov	r0, r4
 801262e:	f000 fc7b 	bl	8012f28 <__multiply>
 8012632:	4651      	mov	r1, sl
 8012634:	4680      	mov	r8, r0
 8012636:	4620      	mov	r0, r4
 8012638:	f000 fb60 	bl	8012cfc <_Bfree>
 801263c:	46c2      	mov	sl, r8
 801263e:	9b08      	ldr	r3, [sp, #32]
 8012640:	1b9a      	subs	r2, r3, r6
 8012642:	d004      	beq.n	801264e <_dtoa_r+0x7b6>
 8012644:	4651      	mov	r1, sl
 8012646:	4620      	mov	r0, r4
 8012648:	f000 fd18 	bl	801307c <__pow5mult>
 801264c:	4682      	mov	sl, r0
 801264e:	2101      	movs	r1, #1
 8012650:	4620      	mov	r0, r4
 8012652:	f000 fc53 	bl	8012efc <__i2b>
 8012656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012658:	2b00      	cmp	r3, #0
 801265a:	4606      	mov	r6, r0
 801265c:	f340 8081 	ble.w	8012762 <_dtoa_r+0x8ca>
 8012660:	461a      	mov	r2, r3
 8012662:	4601      	mov	r1, r0
 8012664:	4620      	mov	r0, r4
 8012666:	f000 fd09 	bl	801307c <__pow5mult>
 801266a:	9b07      	ldr	r3, [sp, #28]
 801266c:	2b01      	cmp	r3, #1
 801266e:	4606      	mov	r6, r0
 8012670:	dd7a      	ble.n	8012768 <_dtoa_r+0x8d0>
 8012672:	f04f 0800 	mov.w	r8, #0
 8012676:	6933      	ldr	r3, [r6, #16]
 8012678:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801267c:	6918      	ldr	r0, [r3, #16]
 801267e:	f000 fbef 	bl	8012e60 <__hi0bits>
 8012682:	f1c0 0020 	rsb	r0, r0, #32
 8012686:	9b06      	ldr	r3, [sp, #24]
 8012688:	4418      	add	r0, r3
 801268a:	f010 001f 	ands.w	r0, r0, #31
 801268e:	f000 8094 	beq.w	80127ba <_dtoa_r+0x922>
 8012692:	f1c0 0320 	rsb	r3, r0, #32
 8012696:	2b04      	cmp	r3, #4
 8012698:	f340 8085 	ble.w	80127a6 <_dtoa_r+0x90e>
 801269c:	9b05      	ldr	r3, [sp, #20]
 801269e:	f1c0 001c 	rsb	r0, r0, #28
 80126a2:	4403      	add	r3, r0
 80126a4:	9305      	str	r3, [sp, #20]
 80126a6:	9b06      	ldr	r3, [sp, #24]
 80126a8:	4403      	add	r3, r0
 80126aa:	4405      	add	r5, r0
 80126ac:	9306      	str	r3, [sp, #24]
 80126ae:	9b05      	ldr	r3, [sp, #20]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	dd05      	ble.n	80126c0 <_dtoa_r+0x828>
 80126b4:	4651      	mov	r1, sl
 80126b6:	461a      	mov	r2, r3
 80126b8:	4620      	mov	r0, r4
 80126ba:	f000 fd39 	bl	8013130 <__lshift>
 80126be:	4682      	mov	sl, r0
 80126c0:	9b06      	ldr	r3, [sp, #24]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	dd05      	ble.n	80126d2 <_dtoa_r+0x83a>
 80126c6:	4631      	mov	r1, r6
 80126c8:	461a      	mov	r2, r3
 80126ca:	4620      	mov	r0, r4
 80126cc:	f000 fd30 	bl	8013130 <__lshift>
 80126d0:	4606      	mov	r6, r0
 80126d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d072      	beq.n	80127be <_dtoa_r+0x926>
 80126d8:	4631      	mov	r1, r6
 80126da:	4650      	mov	r0, sl
 80126dc:	f000 fd94 	bl	8013208 <__mcmp>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	da6c      	bge.n	80127be <_dtoa_r+0x926>
 80126e4:	2300      	movs	r3, #0
 80126e6:	4651      	mov	r1, sl
 80126e8:	220a      	movs	r2, #10
 80126ea:	4620      	mov	r0, r4
 80126ec:	f000 fb28 	bl	8012d40 <__multadd>
 80126f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126f6:	4682      	mov	sl, r0
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	f000 81b0 	beq.w	8012a5e <_dtoa_r+0xbc6>
 80126fe:	2300      	movs	r3, #0
 8012700:	4639      	mov	r1, r7
 8012702:	220a      	movs	r2, #10
 8012704:	4620      	mov	r0, r4
 8012706:	f000 fb1b 	bl	8012d40 <__multadd>
 801270a:	9b01      	ldr	r3, [sp, #4]
 801270c:	2b00      	cmp	r3, #0
 801270e:	4607      	mov	r7, r0
 8012710:	f300 8096 	bgt.w	8012840 <_dtoa_r+0x9a8>
 8012714:	9b07      	ldr	r3, [sp, #28]
 8012716:	2b02      	cmp	r3, #2
 8012718:	dc59      	bgt.n	80127ce <_dtoa_r+0x936>
 801271a:	e091      	b.n	8012840 <_dtoa_r+0x9a8>
 801271c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801271e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012722:	e758      	b.n	80125d6 <_dtoa_r+0x73e>
 8012724:	9b04      	ldr	r3, [sp, #16]
 8012726:	1e5e      	subs	r6, r3, #1
 8012728:	9b08      	ldr	r3, [sp, #32]
 801272a:	42b3      	cmp	r3, r6
 801272c:	bfbf      	itttt	lt
 801272e:	9b08      	ldrlt	r3, [sp, #32]
 8012730:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012732:	9608      	strlt	r6, [sp, #32]
 8012734:	1af3      	sublt	r3, r6, r3
 8012736:	bfb4      	ite	lt
 8012738:	18d2      	addlt	r2, r2, r3
 801273a:	1b9e      	subge	r6, r3, r6
 801273c:	9b04      	ldr	r3, [sp, #16]
 801273e:	bfbc      	itt	lt
 8012740:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012742:	2600      	movlt	r6, #0
 8012744:	2b00      	cmp	r3, #0
 8012746:	bfb7      	itett	lt
 8012748:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801274c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012750:	1a9d      	sublt	r5, r3, r2
 8012752:	2300      	movlt	r3, #0
 8012754:	e741      	b.n	80125da <_dtoa_r+0x742>
 8012756:	9e08      	ldr	r6, [sp, #32]
 8012758:	9d05      	ldr	r5, [sp, #20]
 801275a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801275c:	e748      	b.n	80125f0 <_dtoa_r+0x758>
 801275e:	9a08      	ldr	r2, [sp, #32]
 8012760:	e770      	b.n	8012644 <_dtoa_r+0x7ac>
 8012762:	9b07      	ldr	r3, [sp, #28]
 8012764:	2b01      	cmp	r3, #1
 8012766:	dc19      	bgt.n	801279c <_dtoa_r+0x904>
 8012768:	9b02      	ldr	r3, [sp, #8]
 801276a:	b9bb      	cbnz	r3, 801279c <_dtoa_r+0x904>
 801276c:	9b03      	ldr	r3, [sp, #12]
 801276e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012772:	b99b      	cbnz	r3, 801279c <_dtoa_r+0x904>
 8012774:	9b03      	ldr	r3, [sp, #12]
 8012776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801277a:	0d1b      	lsrs	r3, r3, #20
 801277c:	051b      	lsls	r3, r3, #20
 801277e:	b183      	cbz	r3, 80127a2 <_dtoa_r+0x90a>
 8012780:	9b05      	ldr	r3, [sp, #20]
 8012782:	3301      	adds	r3, #1
 8012784:	9305      	str	r3, [sp, #20]
 8012786:	9b06      	ldr	r3, [sp, #24]
 8012788:	3301      	adds	r3, #1
 801278a:	9306      	str	r3, [sp, #24]
 801278c:	f04f 0801 	mov.w	r8, #1
 8012790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012792:	2b00      	cmp	r3, #0
 8012794:	f47f af6f 	bne.w	8012676 <_dtoa_r+0x7de>
 8012798:	2001      	movs	r0, #1
 801279a:	e774      	b.n	8012686 <_dtoa_r+0x7ee>
 801279c:	f04f 0800 	mov.w	r8, #0
 80127a0:	e7f6      	b.n	8012790 <_dtoa_r+0x8f8>
 80127a2:	4698      	mov	r8, r3
 80127a4:	e7f4      	b.n	8012790 <_dtoa_r+0x8f8>
 80127a6:	d082      	beq.n	80126ae <_dtoa_r+0x816>
 80127a8:	9a05      	ldr	r2, [sp, #20]
 80127aa:	331c      	adds	r3, #28
 80127ac:	441a      	add	r2, r3
 80127ae:	9205      	str	r2, [sp, #20]
 80127b0:	9a06      	ldr	r2, [sp, #24]
 80127b2:	441a      	add	r2, r3
 80127b4:	441d      	add	r5, r3
 80127b6:	9206      	str	r2, [sp, #24]
 80127b8:	e779      	b.n	80126ae <_dtoa_r+0x816>
 80127ba:	4603      	mov	r3, r0
 80127bc:	e7f4      	b.n	80127a8 <_dtoa_r+0x910>
 80127be:	9b04      	ldr	r3, [sp, #16]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	dc37      	bgt.n	8012834 <_dtoa_r+0x99c>
 80127c4:	9b07      	ldr	r3, [sp, #28]
 80127c6:	2b02      	cmp	r3, #2
 80127c8:	dd34      	ble.n	8012834 <_dtoa_r+0x99c>
 80127ca:	9b04      	ldr	r3, [sp, #16]
 80127cc:	9301      	str	r3, [sp, #4]
 80127ce:	9b01      	ldr	r3, [sp, #4]
 80127d0:	b963      	cbnz	r3, 80127ec <_dtoa_r+0x954>
 80127d2:	4631      	mov	r1, r6
 80127d4:	2205      	movs	r2, #5
 80127d6:	4620      	mov	r0, r4
 80127d8:	f000 fab2 	bl	8012d40 <__multadd>
 80127dc:	4601      	mov	r1, r0
 80127de:	4606      	mov	r6, r0
 80127e0:	4650      	mov	r0, sl
 80127e2:	f000 fd11 	bl	8013208 <__mcmp>
 80127e6:	2800      	cmp	r0, #0
 80127e8:	f73f adbb 	bgt.w	8012362 <_dtoa_r+0x4ca>
 80127ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127ee:	9d00      	ldr	r5, [sp, #0]
 80127f0:	ea6f 0b03 	mvn.w	fp, r3
 80127f4:	f04f 0800 	mov.w	r8, #0
 80127f8:	4631      	mov	r1, r6
 80127fa:	4620      	mov	r0, r4
 80127fc:	f000 fa7e 	bl	8012cfc <_Bfree>
 8012800:	2f00      	cmp	r7, #0
 8012802:	f43f aeab 	beq.w	801255c <_dtoa_r+0x6c4>
 8012806:	f1b8 0f00 	cmp.w	r8, #0
 801280a:	d005      	beq.n	8012818 <_dtoa_r+0x980>
 801280c:	45b8      	cmp	r8, r7
 801280e:	d003      	beq.n	8012818 <_dtoa_r+0x980>
 8012810:	4641      	mov	r1, r8
 8012812:	4620      	mov	r0, r4
 8012814:	f000 fa72 	bl	8012cfc <_Bfree>
 8012818:	4639      	mov	r1, r7
 801281a:	4620      	mov	r0, r4
 801281c:	f000 fa6e 	bl	8012cfc <_Bfree>
 8012820:	e69c      	b.n	801255c <_dtoa_r+0x6c4>
 8012822:	2600      	movs	r6, #0
 8012824:	4637      	mov	r7, r6
 8012826:	e7e1      	b.n	80127ec <_dtoa_r+0x954>
 8012828:	46bb      	mov	fp, r7
 801282a:	4637      	mov	r7, r6
 801282c:	e599      	b.n	8012362 <_dtoa_r+0x4ca>
 801282e:	bf00      	nop
 8012830:	40240000 	.word	0x40240000
 8012834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012836:	2b00      	cmp	r3, #0
 8012838:	f000 80c8 	beq.w	80129cc <_dtoa_r+0xb34>
 801283c:	9b04      	ldr	r3, [sp, #16]
 801283e:	9301      	str	r3, [sp, #4]
 8012840:	2d00      	cmp	r5, #0
 8012842:	dd05      	ble.n	8012850 <_dtoa_r+0x9b8>
 8012844:	4639      	mov	r1, r7
 8012846:	462a      	mov	r2, r5
 8012848:	4620      	mov	r0, r4
 801284a:	f000 fc71 	bl	8013130 <__lshift>
 801284e:	4607      	mov	r7, r0
 8012850:	f1b8 0f00 	cmp.w	r8, #0
 8012854:	d05b      	beq.n	801290e <_dtoa_r+0xa76>
 8012856:	6879      	ldr	r1, [r7, #4]
 8012858:	4620      	mov	r0, r4
 801285a:	f000 fa0f 	bl	8012c7c <_Balloc>
 801285e:	4605      	mov	r5, r0
 8012860:	b928      	cbnz	r0, 801286e <_dtoa_r+0x9d6>
 8012862:	4b83      	ldr	r3, [pc, #524]	; (8012a70 <_dtoa_r+0xbd8>)
 8012864:	4602      	mov	r2, r0
 8012866:	f240 21ef 	movw	r1, #751	; 0x2ef
 801286a:	f7ff bb2e 	b.w	8011eca <_dtoa_r+0x32>
 801286e:	693a      	ldr	r2, [r7, #16]
 8012870:	3202      	adds	r2, #2
 8012872:	0092      	lsls	r2, r2, #2
 8012874:	f107 010c 	add.w	r1, r7, #12
 8012878:	300c      	adds	r0, #12
 801287a:	f7ff fa6f 	bl	8011d5c <memcpy>
 801287e:	2201      	movs	r2, #1
 8012880:	4629      	mov	r1, r5
 8012882:	4620      	mov	r0, r4
 8012884:	f000 fc54 	bl	8013130 <__lshift>
 8012888:	9b00      	ldr	r3, [sp, #0]
 801288a:	3301      	adds	r3, #1
 801288c:	9304      	str	r3, [sp, #16]
 801288e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012892:	4413      	add	r3, r2
 8012894:	9308      	str	r3, [sp, #32]
 8012896:	9b02      	ldr	r3, [sp, #8]
 8012898:	f003 0301 	and.w	r3, r3, #1
 801289c:	46b8      	mov	r8, r7
 801289e:	9306      	str	r3, [sp, #24]
 80128a0:	4607      	mov	r7, r0
 80128a2:	9b04      	ldr	r3, [sp, #16]
 80128a4:	4631      	mov	r1, r6
 80128a6:	3b01      	subs	r3, #1
 80128a8:	4650      	mov	r0, sl
 80128aa:	9301      	str	r3, [sp, #4]
 80128ac:	f7ff fa6a 	bl	8011d84 <quorem>
 80128b0:	4641      	mov	r1, r8
 80128b2:	9002      	str	r0, [sp, #8]
 80128b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80128b8:	4650      	mov	r0, sl
 80128ba:	f000 fca5 	bl	8013208 <__mcmp>
 80128be:	463a      	mov	r2, r7
 80128c0:	9005      	str	r0, [sp, #20]
 80128c2:	4631      	mov	r1, r6
 80128c4:	4620      	mov	r0, r4
 80128c6:	f000 fcbb 	bl	8013240 <__mdiff>
 80128ca:	68c2      	ldr	r2, [r0, #12]
 80128cc:	4605      	mov	r5, r0
 80128ce:	bb02      	cbnz	r2, 8012912 <_dtoa_r+0xa7a>
 80128d0:	4601      	mov	r1, r0
 80128d2:	4650      	mov	r0, sl
 80128d4:	f000 fc98 	bl	8013208 <__mcmp>
 80128d8:	4602      	mov	r2, r0
 80128da:	4629      	mov	r1, r5
 80128dc:	4620      	mov	r0, r4
 80128de:	9209      	str	r2, [sp, #36]	; 0x24
 80128e0:	f000 fa0c 	bl	8012cfc <_Bfree>
 80128e4:	9b07      	ldr	r3, [sp, #28]
 80128e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128e8:	9d04      	ldr	r5, [sp, #16]
 80128ea:	ea43 0102 	orr.w	r1, r3, r2
 80128ee:	9b06      	ldr	r3, [sp, #24]
 80128f0:	4319      	orrs	r1, r3
 80128f2:	d110      	bne.n	8012916 <_dtoa_r+0xa7e>
 80128f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80128f8:	d029      	beq.n	801294e <_dtoa_r+0xab6>
 80128fa:	9b05      	ldr	r3, [sp, #20]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	dd02      	ble.n	8012906 <_dtoa_r+0xa6e>
 8012900:	9b02      	ldr	r3, [sp, #8]
 8012902:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012906:	9b01      	ldr	r3, [sp, #4]
 8012908:	f883 9000 	strb.w	r9, [r3]
 801290c:	e774      	b.n	80127f8 <_dtoa_r+0x960>
 801290e:	4638      	mov	r0, r7
 8012910:	e7ba      	b.n	8012888 <_dtoa_r+0x9f0>
 8012912:	2201      	movs	r2, #1
 8012914:	e7e1      	b.n	80128da <_dtoa_r+0xa42>
 8012916:	9b05      	ldr	r3, [sp, #20]
 8012918:	2b00      	cmp	r3, #0
 801291a:	db04      	blt.n	8012926 <_dtoa_r+0xa8e>
 801291c:	9907      	ldr	r1, [sp, #28]
 801291e:	430b      	orrs	r3, r1
 8012920:	9906      	ldr	r1, [sp, #24]
 8012922:	430b      	orrs	r3, r1
 8012924:	d120      	bne.n	8012968 <_dtoa_r+0xad0>
 8012926:	2a00      	cmp	r2, #0
 8012928:	dded      	ble.n	8012906 <_dtoa_r+0xa6e>
 801292a:	4651      	mov	r1, sl
 801292c:	2201      	movs	r2, #1
 801292e:	4620      	mov	r0, r4
 8012930:	f000 fbfe 	bl	8013130 <__lshift>
 8012934:	4631      	mov	r1, r6
 8012936:	4682      	mov	sl, r0
 8012938:	f000 fc66 	bl	8013208 <__mcmp>
 801293c:	2800      	cmp	r0, #0
 801293e:	dc03      	bgt.n	8012948 <_dtoa_r+0xab0>
 8012940:	d1e1      	bne.n	8012906 <_dtoa_r+0xa6e>
 8012942:	f019 0f01 	tst.w	r9, #1
 8012946:	d0de      	beq.n	8012906 <_dtoa_r+0xa6e>
 8012948:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801294c:	d1d8      	bne.n	8012900 <_dtoa_r+0xa68>
 801294e:	9a01      	ldr	r2, [sp, #4]
 8012950:	2339      	movs	r3, #57	; 0x39
 8012952:	7013      	strb	r3, [r2, #0]
 8012954:	462b      	mov	r3, r5
 8012956:	461d      	mov	r5, r3
 8012958:	3b01      	subs	r3, #1
 801295a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801295e:	2a39      	cmp	r2, #57	; 0x39
 8012960:	d06c      	beq.n	8012a3c <_dtoa_r+0xba4>
 8012962:	3201      	adds	r2, #1
 8012964:	701a      	strb	r2, [r3, #0]
 8012966:	e747      	b.n	80127f8 <_dtoa_r+0x960>
 8012968:	2a00      	cmp	r2, #0
 801296a:	dd07      	ble.n	801297c <_dtoa_r+0xae4>
 801296c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012970:	d0ed      	beq.n	801294e <_dtoa_r+0xab6>
 8012972:	9a01      	ldr	r2, [sp, #4]
 8012974:	f109 0301 	add.w	r3, r9, #1
 8012978:	7013      	strb	r3, [r2, #0]
 801297a:	e73d      	b.n	80127f8 <_dtoa_r+0x960>
 801297c:	9b04      	ldr	r3, [sp, #16]
 801297e:	9a08      	ldr	r2, [sp, #32]
 8012980:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012984:	4293      	cmp	r3, r2
 8012986:	d043      	beq.n	8012a10 <_dtoa_r+0xb78>
 8012988:	4651      	mov	r1, sl
 801298a:	2300      	movs	r3, #0
 801298c:	220a      	movs	r2, #10
 801298e:	4620      	mov	r0, r4
 8012990:	f000 f9d6 	bl	8012d40 <__multadd>
 8012994:	45b8      	cmp	r8, r7
 8012996:	4682      	mov	sl, r0
 8012998:	f04f 0300 	mov.w	r3, #0
 801299c:	f04f 020a 	mov.w	r2, #10
 80129a0:	4641      	mov	r1, r8
 80129a2:	4620      	mov	r0, r4
 80129a4:	d107      	bne.n	80129b6 <_dtoa_r+0xb1e>
 80129a6:	f000 f9cb 	bl	8012d40 <__multadd>
 80129aa:	4680      	mov	r8, r0
 80129ac:	4607      	mov	r7, r0
 80129ae:	9b04      	ldr	r3, [sp, #16]
 80129b0:	3301      	adds	r3, #1
 80129b2:	9304      	str	r3, [sp, #16]
 80129b4:	e775      	b.n	80128a2 <_dtoa_r+0xa0a>
 80129b6:	f000 f9c3 	bl	8012d40 <__multadd>
 80129ba:	4639      	mov	r1, r7
 80129bc:	4680      	mov	r8, r0
 80129be:	2300      	movs	r3, #0
 80129c0:	220a      	movs	r2, #10
 80129c2:	4620      	mov	r0, r4
 80129c4:	f000 f9bc 	bl	8012d40 <__multadd>
 80129c8:	4607      	mov	r7, r0
 80129ca:	e7f0      	b.n	80129ae <_dtoa_r+0xb16>
 80129cc:	9b04      	ldr	r3, [sp, #16]
 80129ce:	9301      	str	r3, [sp, #4]
 80129d0:	9d00      	ldr	r5, [sp, #0]
 80129d2:	4631      	mov	r1, r6
 80129d4:	4650      	mov	r0, sl
 80129d6:	f7ff f9d5 	bl	8011d84 <quorem>
 80129da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80129de:	9b00      	ldr	r3, [sp, #0]
 80129e0:	f805 9b01 	strb.w	r9, [r5], #1
 80129e4:	1aea      	subs	r2, r5, r3
 80129e6:	9b01      	ldr	r3, [sp, #4]
 80129e8:	4293      	cmp	r3, r2
 80129ea:	dd07      	ble.n	80129fc <_dtoa_r+0xb64>
 80129ec:	4651      	mov	r1, sl
 80129ee:	2300      	movs	r3, #0
 80129f0:	220a      	movs	r2, #10
 80129f2:	4620      	mov	r0, r4
 80129f4:	f000 f9a4 	bl	8012d40 <__multadd>
 80129f8:	4682      	mov	sl, r0
 80129fa:	e7ea      	b.n	80129d2 <_dtoa_r+0xb3a>
 80129fc:	9b01      	ldr	r3, [sp, #4]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	bfc8      	it	gt
 8012a02:	461d      	movgt	r5, r3
 8012a04:	9b00      	ldr	r3, [sp, #0]
 8012a06:	bfd8      	it	le
 8012a08:	2501      	movle	r5, #1
 8012a0a:	441d      	add	r5, r3
 8012a0c:	f04f 0800 	mov.w	r8, #0
 8012a10:	4651      	mov	r1, sl
 8012a12:	2201      	movs	r2, #1
 8012a14:	4620      	mov	r0, r4
 8012a16:	f000 fb8b 	bl	8013130 <__lshift>
 8012a1a:	4631      	mov	r1, r6
 8012a1c:	4682      	mov	sl, r0
 8012a1e:	f000 fbf3 	bl	8013208 <__mcmp>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	dc96      	bgt.n	8012954 <_dtoa_r+0xabc>
 8012a26:	d102      	bne.n	8012a2e <_dtoa_r+0xb96>
 8012a28:	f019 0f01 	tst.w	r9, #1
 8012a2c:	d192      	bne.n	8012954 <_dtoa_r+0xabc>
 8012a2e:	462b      	mov	r3, r5
 8012a30:	461d      	mov	r5, r3
 8012a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a36:	2a30      	cmp	r2, #48	; 0x30
 8012a38:	d0fa      	beq.n	8012a30 <_dtoa_r+0xb98>
 8012a3a:	e6dd      	b.n	80127f8 <_dtoa_r+0x960>
 8012a3c:	9a00      	ldr	r2, [sp, #0]
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	d189      	bne.n	8012956 <_dtoa_r+0xabe>
 8012a42:	f10b 0b01 	add.w	fp, fp, #1
 8012a46:	2331      	movs	r3, #49	; 0x31
 8012a48:	e796      	b.n	8012978 <_dtoa_r+0xae0>
 8012a4a:	4b0a      	ldr	r3, [pc, #40]	; (8012a74 <_dtoa_r+0xbdc>)
 8012a4c:	f7ff ba99 	b.w	8011f82 <_dtoa_r+0xea>
 8012a50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f47f aa6d 	bne.w	8011f32 <_dtoa_r+0x9a>
 8012a58:	4b07      	ldr	r3, [pc, #28]	; (8012a78 <_dtoa_r+0xbe0>)
 8012a5a:	f7ff ba92 	b.w	8011f82 <_dtoa_r+0xea>
 8012a5e:	9b01      	ldr	r3, [sp, #4]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	dcb5      	bgt.n	80129d0 <_dtoa_r+0xb38>
 8012a64:	9b07      	ldr	r3, [sp, #28]
 8012a66:	2b02      	cmp	r3, #2
 8012a68:	f73f aeb1 	bgt.w	80127ce <_dtoa_r+0x936>
 8012a6c:	e7b0      	b.n	80129d0 <_dtoa_r+0xb38>
 8012a6e:	bf00      	nop
 8012a70:	080157f3 	.word	0x080157f3
 8012a74:	0801574e 	.word	0x0801574e
 8012a78:	08015777 	.word	0x08015777

08012a7c <_free_r>:
 8012a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a7e:	2900      	cmp	r1, #0
 8012a80:	d044      	beq.n	8012b0c <_free_r+0x90>
 8012a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a86:	9001      	str	r0, [sp, #4]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8012a8e:	bfb8      	it	lt
 8012a90:	18e4      	addlt	r4, r4, r3
 8012a92:	f000 f8e7 	bl	8012c64 <__malloc_lock>
 8012a96:	4a1e      	ldr	r2, [pc, #120]	; (8012b10 <_free_r+0x94>)
 8012a98:	9801      	ldr	r0, [sp, #4]
 8012a9a:	6813      	ldr	r3, [r2, #0]
 8012a9c:	b933      	cbnz	r3, 8012aac <_free_r+0x30>
 8012a9e:	6063      	str	r3, [r4, #4]
 8012aa0:	6014      	str	r4, [r2, #0]
 8012aa2:	b003      	add	sp, #12
 8012aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012aa8:	f000 b8e2 	b.w	8012c70 <__malloc_unlock>
 8012aac:	42a3      	cmp	r3, r4
 8012aae:	d908      	bls.n	8012ac2 <_free_r+0x46>
 8012ab0:	6825      	ldr	r5, [r4, #0]
 8012ab2:	1961      	adds	r1, r4, r5
 8012ab4:	428b      	cmp	r3, r1
 8012ab6:	bf01      	itttt	eq
 8012ab8:	6819      	ldreq	r1, [r3, #0]
 8012aba:	685b      	ldreq	r3, [r3, #4]
 8012abc:	1949      	addeq	r1, r1, r5
 8012abe:	6021      	streq	r1, [r4, #0]
 8012ac0:	e7ed      	b.n	8012a9e <_free_r+0x22>
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	b10b      	cbz	r3, 8012acc <_free_r+0x50>
 8012ac8:	42a3      	cmp	r3, r4
 8012aca:	d9fa      	bls.n	8012ac2 <_free_r+0x46>
 8012acc:	6811      	ldr	r1, [r2, #0]
 8012ace:	1855      	adds	r5, r2, r1
 8012ad0:	42a5      	cmp	r5, r4
 8012ad2:	d10b      	bne.n	8012aec <_free_r+0x70>
 8012ad4:	6824      	ldr	r4, [r4, #0]
 8012ad6:	4421      	add	r1, r4
 8012ad8:	1854      	adds	r4, r2, r1
 8012ada:	42a3      	cmp	r3, r4
 8012adc:	6011      	str	r1, [r2, #0]
 8012ade:	d1e0      	bne.n	8012aa2 <_free_r+0x26>
 8012ae0:	681c      	ldr	r4, [r3, #0]
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	6053      	str	r3, [r2, #4]
 8012ae6:	440c      	add	r4, r1
 8012ae8:	6014      	str	r4, [r2, #0]
 8012aea:	e7da      	b.n	8012aa2 <_free_r+0x26>
 8012aec:	d902      	bls.n	8012af4 <_free_r+0x78>
 8012aee:	230c      	movs	r3, #12
 8012af0:	6003      	str	r3, [r0, #0]
 8012af2:	e7d6      	b.n	8012aa2 <_free_r+0x26>
 8012af4:	6825      	ldr	r5, [r4, #0]
 8012af6:	1961      	adds	r1, r4, r5
 8012af8:	428b      	cmp	r3, r1
 8012afa:	bf04      	itt	eq
 8012afc:	6819      	ldreq	r1, [r3, #0]
 8012afe:	685b      	ldreq	r3, [r3, #4]
 8012b00:	6063      	str	r3, [r4, #4]
 8012b02:	bf04      	itt	eq
 8012b04:	1949      	addeq	r1, r1, r5
 8012b06:	6021      	streq	r1, [r4, #0]
 8012b08:	6054      	str	r4, [r2, #4]
 8012b0a:	e7ca      	b.n	8012aa2 <_free_r+0x26>
 8012b0c:	b003      	add	sp, #12
 8012b0e:	bd30      	pop	{r4, r5, pc}
 8012b10:	2000e424 	.word	0x2000e424

08012b14 <malloc>:
 8012b14:	4b02      	ldr	r3, [pc, #8]	; (8012b20 <malloc+0xc>)
 8012b16:	4601      	mov	r1, r0
 8012b18:	6818      	ldr	r0, [r3, #0]
 8012b1a:	f000 b823 	b.w	8012b64 <_malloc_r>
 8012b1e:	bf00      	nop
 8012b20:	20000164 	.word	0x20000164

08012b24 <sbrk_aligned>:
 8012b24:	b570      	push	{r4, r5, r6, lr}
 8012b26:	4e0e      	ldr	r6, [pc, #56]	; (8012b60 <sbrk_aligned+0x3c>)
 8012b28:	460c      	mov	r4, r1
 8012b2a:	6831      	ldr	r1, [r6, #0]
 8012b2c:	4605      	mov	r5, r0
 8012b2e:	b911      	cbnz	r1, 8012b36 <sbrk_aligned+0x12>
 8012b30:	f001 fe00 	bl	8014734 <_sbrk_r>
 8012b34:	6030      	str	r0, [r6, #0]
 8012b36:	4621      	mov	r1, r4
 8012b38:	4628      	mov	r0, r5
 8012b3a:	f001 fdfb 	bl	8014734 <_sbrk_r>
 8012b3e:	1c43      	adds	r3, r0, #1
 8012b40:	d00a      	beq.n	8012b58 <sbrk_aligned+0x34>
 8012b42:	1cc4      	adds	r4, r0, #3
 8012b44:	f024 0403 	bic.w	r4, r4, #3
 8012b48:	42a0      	cmp	r0, r4
 8012b4a:	d007      	beq.n	8012b5c <sbrk_aligned+0x38>
 8012b4c:	1a21      	subs	r1, r4, r0
 8012b4e:	4628      	mov	r0, r5
 8012b50:	f001 fdf0 	bl	8014734 <_sbrk_r>
 8012b54:	3001      	adds	r0, #1
 8012b56:	d101      	bne.n	8012b5c <sbrk_aligned+0x38>
 8012b58:	f04f 34ff 	mov.w	r4, #4294967295
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	bd70      	pop	{r4, r5, r6, pc}
 8012b60:	2000e428 	.word	0x2000e428

08012b64 <_malloc_r>:
 8012b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b68:	1ccd      	adds	r5, r1, #3
 8012b6a:	f025 0503 	bic.w	r5, r5, #3
 8012b6e:	3508      	adds	r5, #8
 8012b70:	2d0c      	cmp	r5, #12
 8012b72:	bf38      	it	cc
 8012b74:	250c      	movcc	r5, #12
 8012b76:	2d00      	cmp	r5, #0
 8012b78:	4607      	mov	r7, r0
 8012b7a:	db01      	blt.n	8012b80 <_malloc_r+0x1c>
 8012b7c:	42a9      	cmp	r1, r5
 8012b7e:	d905      	bls.n	8012b8c <_malloc_r+0x28>
 8012b80:	230c      	movs	r3, #12
 8012b82:	603b      	str	r3, [r7, #0]
 8012b84:	2600      	movs	r6, #0
 8012b86:	4630      	mov	r0, r6
 8012b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012c60 <_malloc_r+0xfc>
 8012b90:	f000 f868 	bl	8012c64 <__malloc_lock>
 8012b94:	f8d8 3000 	ldr.w	r3, [r8]
 8012b98:	461c      	mov	r4, r3
 8012b9a:	bb5c      	cbnz	r4, 8012bf4 <_malloc_r+0x90>
 8012b9c:	4629      	mov	r1, r5
 8012b9e:	4638      	mov	r0, r7
 8012ba0:	f7ff ffc0 	bl	8012b24 <sbrk_aligned>
 8012ba4:	1c43      	adds	r3, r0, #1
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	d155      	bne.n	8012c56 <_malloc_r+0xf2>
 8012baa:	f8d8 4000 	ldr.w	r4, [r8]
 8012bae:	4626      	mov	r6, r4
 8012bb0:	2e00      	cmp	r6, #0
 8012bb2:	d145      	bne.n	8012c40 <_malloc_r+0xdc>
 8012bb4:	2c00      	cmp	r4, #0
 8012bb6:	d048      	beq.n	8012c4a <_malloc_r+0xe6>
 8012bb8:	6823      	ldr	r3, [r4, #0]
 8012bba:	4631      	mov	r1, r6
 8012bbc:	4638      	mov	r0, r7
 8012bbe:	eb04 0903 	add.w	r9, r4, r3
 8012bc2:	f001 fdb7 	bl	8014734 <_sbrk_r>
 8012bc6:	4581      	cmp	r9, r0
 8012bc8:	d13f      	bne.n	8012c4a <_malloc_r+0xe6>
 8012bca:	6821      	ldr	r1, [r4, #0]
 8012bcc:	1a6d      	subs	r5, r5, r1
 8012bce:	4629      	mov	r1, r5
 8012bd0:	4638      	mov	r0, r7
 8012bd2:	f7ff ffa7 	bl	8012b24 <sbrk_aligned>
 8012bd6:	3001      	adds	r0, #1
 8012bd8:	d037      	beq.n	8012c4a <_malloc_r+0xe6>
 8012bda:	6823      	ldr	r3, [r4, #0]
 8012bdc:	442b      	add	r3, r5
 8012bde:	6023      	str	r3, [r4, #0]
 8012be0:	f8d8 3000 	ldr.w	r3, [r8]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d038      	beq.n	8012c5a <_malloc_r+0xf6>
 8012be8:	685a      	ldr	r2, [r3, #4]
 8012bea:	42a2      	cmp	r2, r4
 8012bec:	d12b      	bne.n	8012c46 <_malloc_r+0xe2>
 8012bee:	2200      	movs	r2, #0
 8012bf0:	605a      	str	r2, [r3, #4]
 8012bf2:	e00f      	b.n	8012c14 <_malloc_r+0xb0>
 8012bf4:	6822      	ldr	r2, [r4, #0]
 8012bf6:	1b52      	subs	r2, r2, r5
 8012bf8:	d41f      	bmi.n	8012c3a <_malloc_r+0xd6>
 8012bfa:	2a0b      	cmp	r2, #11
 8012bfc:	d917      	bls.n	8012c2e <_malloc_r+0xca>
 8012bfe:	1961      	adds	r1, r4, r5
 8012c00:	42a3      	cmp	r3, r4
 8012c02:	6025      	str	r5, [r4, #0]
 8012c04:	bf18      	it	ne
 8012c06:	6059      	strne	r1, [r3, #4]
 8012c08:	6863      	ldr	r3, [r4, #4]
 8012c0a:	bf08      	it	eq
 8012c0c:	f8c8 1000 	streq.w	r1, [r8]
 8012c10:	5162      	str	r2, [r4, r5]
 8012c12:	604b      	str	r3, [r1, #4]
 8012c14:	4638      	mov	r0, r7
 8012c16:	f104 060b 	add.w	r6, r4, #11
 8012c1a:	f000 f829 	bl	8012c70 <__malloc_unlock>
 8012c1e:	f026 0607 	bic.w	r6, r6, #7
 8012c22:	1d23      	adds	r3, r4, #4
 8012c24:	1af2      	subs	r2, r6, r3
 8012c26:	d0ae      	beq.n	8012b86 <_malloc_r+0x22>
 8012c28:	1b9b      	subs	r3, r3, r6
 8012c2a:	50a3      	str	r3, [r4, r2]
 8012c2c:	e7ab      	b.n	8012b86 <_malloc_r+0x22>
 8012c2e:	42a3      	cmp	r3, r4
 8012c30:	6862      	ldr	r2, [r4, #4]
 8012c32:	d1dd      	bne.n	8012bf0 <_malloc_r+0x8c>
 8012c34:	f8c8 2000 	str.w	r2, [r8]
 8012c38:	e7ec      	b.n	8012c14 <_malloc_r+0xb0>
 8012c3a:	4623      	mov	r3, r4
 8012c3c:	6864      	ldr	r4, [r4, #4]
 8012c3e:	e7ac      	b.n	8012b9a <_malloc_r+0x36>
 8012c40:	4634      	mov	r4, r6
 8012c42:	6876      	ldr	r6, [r6, #4]
 8012c44:	e7b4      	b.n	8012bb0 <_malloc_r+0x4c>
 8012c46:	4613      	mov	r3, r2
 8012c48:	e7cc      	b.n	8012be4 <_malloc_r+0x80>
 8012c4a:	230c      	movs	r3, #12
 8012c4c:	603b      	str	r3, [r7, #0]
 8012c4e:	4638      	mov	r0, r7
 8012c50:	f000 f80e 	bl	8012c70 <__malloc_unlock>
 8012c54:	e797      	b.n	8012b86 <_malloc_r+0x22>
 8012c56:	6025      	str	r5, [r4, #0]
 8012c58:	e7dc      	b.n	8012c14 <_malloc_r+0xb0>
 8012c5a:	605b      	str	r3, [r3, #4]
 8012c5c:	deff      	udf	#255	; 0xff
 8012c5e:	bf00      	nop
 8012c60:	2000e424 	.word	0x2000e424

08012c64 <__malloc_lock>:
 8012c64:	4801      	ldr	r0, [pc, #4]	; (8012c6c <__malloc_lock+0x8>)
 8012c66:	f7ff b877 	b.w	8011d58 <__retarget_lock_acquire_recursive>
 8012c6a:	bf00      	nop
 8012c6c:	2000e420 	.word	0x2000e420

08012c70 <__malloc_unlock>:
 8012c70:	4801      	ldr	r0, [pc, #4]	; (8012c78 <__malloc_unlock+0x8>)
 8012c72:	f7ff b872 	b.w	8011d5a <__retarget_lock_release_recursive>
 8012c76:	bf00      	nop
 8012c78:	2000e420 	.word	0x2000e420

08012c7c <_Balloc>:
 8012c7c:	b570      	push	{r4, r5, r6, lr}
 8012c7e:	69c6      	ldr	r6, [r0, #28]
 8012c80:	4604      	mov	r4, r0
 8012c82:	460d      	mov	r5, r1
 8012c84:	b976      	cbnz	r6, 8012ca4 <_Balloc+0x28>
 8012c86:	2010      	movs	r0, #16
 8012c88:	f7ff ff44 	bl	8012b14 <malloc>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	61e0      	str	r0, [r4, #28]
 8012c90:	b920      	cbnz	r0, 8012c9c <_Balloc+0x20>
 8012c92:	4b18      	ldr	r3, [pc, #96]	; (8012cf4 <_Balloc+0x78>)
 8012c94:	4818      	ldr	r0, [pc, #96]	; (8012cf8 <_Balloc+0x7c>)
 8012c96:	216b      	movs	r1, #107	; 0x6b
 8012c98:	f001 fd66 	bl	8014768 <__assert_func>
 8012c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ca0:	6006      	str	r6, [r0, #0]
 8012ca2:	60c6      	str	r6, [r0, #12]
 8012ca4:	69e6      	ldr	r6, [r4, #28]
 8012ca6:	68f3      	ldr	r3, [r6, #12]
 8012ca8:	b183      	cbz	r3, 8012ccc <_Balloc+0x50>
 8012caa:	69e3      	ldr	r3, [r4, #28]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cb2:	b9b8      	cbnz	r0, 8012ce4 <_Balloc+0x68>
 8012cb4:	2101      	movs	r1, #1
 8012cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8012cba:	1d72      	adds	r2, r6, #5
 8012cbc:	0092      	lsls	r2, r2, #2
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f001 fd70 	bl	80147a4 <_calloc_r>
 8012cc4:	b160      	cbz	r0, 8012ce0 <_Balloc+0x64>
 8012cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012cca:	e00e      	b.n	8012cea <_Balloc+0x6e>
 8012ccc:	2221      	movs	r2, #33	; 0x21
 8012cce:	2104      	movs	r1, #4
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f001 fd67 	bl	80147a4 <_calloc_r>
 8012cd6:	69e3      	ldr	r3, [r4, #28]
 8012cd8:	60f0      	str	r0, [r6, #12]
 8012cda:	68db      	ldr	r3, [r3, #12]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d1e4      	bne.n	8012caa <_Balloc+0x2e>
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	bd70      	pop	{r4, r5, r6, pc}
 8012ce4:	6802      	ldr	r2, [r0, #0]
 8012ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cea:	2300      	movs	r3, #0
 8012cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012cf0:	e7f7      	b.n	8012ce2 <_Balloc+0x66>
 8012cf2:	bf00      	nop
 8012cf4:	08015784 	.word	0x08015784
 8012cf8:	08015804 	.word	0x08015804

08012cfc <_Bfree>:
 8012cfc:	b570      	push	{r4, r5, r6, lr}
 8012cfe:	69c6      	ldr	r6, [r0, #28]
 8012d00:	4605      	mov	r5, r0
 8012d02:	460c      	mov	r4, r1
 8012d04:	b976      	cbnz	r6, 8012d24 <_Bfree+0x28>
 8012d06:	2010      	movs	r0, #16
 8012d08:	f7ff ff04 	bl	8012b14 <malloc>
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	61e8      	str	r0, [r5, #28]
 8012d10:	b920      	cbnz	r0, 8012d1c <_Bfree+0x20>
 8012d12:	4b09      	ldr	r3, [pc, #36]	; (8012d38 <_Bfree+0x3c>)
 8012d14:	4809      	ldr	r0, [pc, #36]	; (8012d3c <_Bfree+0x40>)
 8012d16:	218f      	movs	r1, #143	; 0x8f
 8012d18:	f001 fd26 	bl	8014768 <__assert_func>
 8012d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d20:	6006      	str	r6, [r0, #0]
 8012d22:	60c6      	str	r6, [r0, #12]
 8012d24:	b13c      	cbz	r4, 8012d36 <_Bfree+0x3a>
 8012d26:	69eb      	ldr	r3, [r5, #28]
 8012d28:	6862      	ldr	r2, [r4, #4]
 8012d2a:	68db      	ldr	r3, [r3, #12]
 8012d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d30:	6021      	str	r1, [r4, #0]
 8012d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d36:	bd70      	pop	{r4, r5, r6, pc}
 8012d38:	08015784 	.word	0x08015784
 8012d3c:	08015804 	.word	0x08015804

08012d40 <__multadd>:
 8012d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d44:	690d      	ldr	r5, [r1, #16]
 8012d46:	4607      	mov	r7, r0
 8012d48:	460c      	mov	r4, r1
 8012d4a:	461e      	mov	r6, r3
 8012d4c:	f101 0c14 	add.w	ip, r1, #20
 8012d50:	2000      	movs	r0, #0
 8012d52:	f8dc 3000 	ldr.w	r3, [ip]
 8012d56:	b299      	uxth	r1, r3
 8012d58:	fb02 6101 	mla	r1, r2, r1, r6
 8012d5c:	0c1e      	lsrs	r6, r3, #16
 8012d5e:	0c0b      	lsrs	r3, r1, #16
 8012d60:	fb02 3306 	mla	r3, r2, r6, r3
 8012d64:	b289      	uxth	r1, r1
 8012d66:	3001      	adds	r0, #1
 8012d68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d6c:	4285      	cmp	r5, r0
 8012d6e:	f84c 1b04 	str.w	r1, [ip], #4
 8012d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d76:	dcec      	bgt.n	8012d52 <__multadd+0x12>
 8012d78:	b30e      	cbz	r6, 8012dbe <__multadd+0x7e>
 8012d7a:	68a3      	ldr	r3, [r4, #8]
 8012d7c:	42ab      	cmp	r3, r5
 8012d7e:	dc19      	bgt.n	8012db4 <__multadd+0x74>
 8012d80:	6861      	ldr	r1, [r4, #4]
 8012d82:	4638      	mov	r0, r7
 8012d84:	3101      	adds	r1, #1
 8012d86:	f7ff ff79 	bl	8012c7c <_Balloc>
 8012d8a:	4680      	mov	r8, r0
 8012d8c:	b928      	cbnz	r0, 8012d9a <__multadd+0x5a>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	4b0c      	ldr	r3, [pc, #48]	; (8012dc4 <__multadd+0x84>)
 8012d92:	480d      	ldr	r0, [pc, #52]	; (8012dc8 <__multadd+0x88>)
 8012d94:	21ba      	movs	r1, #186	; 0xba
 8012d96:	f001 fce7 	bl	8014768 <__assert_func>
 8012d9a:	6922      	ldr	r2, [r4, #16]
 8012d9c:	3202      	adds	r2, #2
 8012d9e:	f104 010c 	add.w	r1, r4, #12
 8012da2:	0092      	lsls	r2, r2, #2
 8012da4:	300c      	adds	r0, #12
 8012da6:	f7fe ffd9 	bl	8011d5c <memcpy>
 8012daa:	4621      	mov	r1, r4
 8012dac:	4638      	mov	r0, r7
 8012dae:	f7ff ffa5 	bl	8012cfc <_Bfree>
 8012db2:	4644      	mov	r4, r8
 8012db4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012db8:	3501      	adds	r5, #1
 8012dba:	615e      	str	r6, [r3, #20]
 8012dbc:	6125      	str	r5, [r4, #16]
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc4:	080157f3 	.word	0x080157f3
 8012dc8:	08015804 	.word	0x08015804

08012dcc <__s2b>:
 8012dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dd0:	460c      	mov	r4, r1
 8012dd2:	4615      	mov	r5, r2
 8012dd4:	461f      	mov	r7, r3
 8012dd6:	2209      	movs	r2, #9
 8012dd8:	3308      	adds	r3, #8
 8012dda:	4606      	mov	r6, r0
 8012ddc:	fb93 f3f2 	sdiv	r3, r3, r2
 8012de0:	2100      	movs	r1, #0
 8012de2:	2201      	movs	r2, #1
 8012de4:	429a      	cmp	r2, r3
 8012de6:	db09      	blt.n	8012dfc <__s2b+0x30>
 8012de8:	4630      	mov	r0, r6
 8012dea:	f7ff ff47 	bl	8012c7c <_Balloc>
 8012dee:	b940      	cbnz	r0, 8012e02 <__s2b+0x36>
 8012df0:	4602      	mov	r2, r0
 8012df2:	4b19      	ldr	r3, [pc, #100]	; (8012e58 <__s2b+0x8c>)
 8012df4:	4819      	ldr	r0, [pc, #100]	; (8012e5c <__s2b+0x90>)
 8012df6:	21d3      	movs	r1, #211	; 0xd3
 8012df8:	f001 fcb6 	bl	8014768 <__assert_func>
 8012dfc:	0052      	lsls	r2, r2, #1
 8012dfe:	3101      	adds	r1, #1
 8012e00:	e7f0      	b.n	8012de4 <__s2b+0x18>
 8012e02:	9b08      	ldr	r3, [sp, #32]
 8012e04:	6143      	str	r3, [r0, #20]
 8012e06:	2d09      	cmp	r5, #9
 8012e08:	f04f 0301 	mov.w	r3, #1
 8012e0c:	6103      	str	r3, [r0, #16]
 8012e0e:	dd16      	ble.n	8012e3e <__s2b+0x72>
 8012e10:	f104 0909 	add.w	r9, r4, #9
 8012e14:	46c8      	mov	r8, r9
 8012e16:	442c      	add	r4, r5
 8012e18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e1c:	4601      	mov	r1, r0
 8012e1e:	3b30      	subs	r3, #48	; 0x30
 8012e20:	220a      	movs	r2, #10
 8012e22:	4630      	mov	r0, r6
 8012e24:	f7ff ff8c 	bl	8012d40 <__multadd>
 8012e28:	45a0      	cmp	r8, r4
 8012e2a:	d1f5      	bne.n	8012e18 <__s2b+0x4c>
 8012e2c:	f1a5 0408 	sub.w	r4, r5, #8
 8012e30:	444c      	add	r4, r9
 8012e32:	1b2d      	subs	r5, r5, r4
 8012e34:	1963      	adds	r3, r4, r5
 8012e36:	42bb      	cmp	r3, r7
 8012e38:	db04      	blt.n	8012e44 <__s2b+0x78>
 8012e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e3e:	340a      	adds	r4, #10
 8012e40:	2509      	movs	r5, #9
 8012e42:	e7f6      	b.n	8012e32 <__s2b+0x66>
 8012e44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e48:	4601      	mov	r1, r0
 8012e4a:	3b30      	subs	r3, #48	; 0x30
 8012e4c:	220a      	movs	r2, #10
 8012e4e:	4630      	mov	r0, r6
 8012e50:	f7ff ff76 	bl	8012d40 <__multadd>
 8012e54:	e7ee      	b.n	8012e34 <__s2b+0x68>
 8012e56:	bf00      	nop
 8012e58:	080157f3 	.word	0x080157f3
 8012e5c:	08015804 	.word	0x08015804

08012e60 <__hi0bits>:
 8012e60:	0c03      	lsrs	r3, r0, #16
 8012e62:	041b      	lsls	r3, r3, #16
 8012e64:	b9d3      	cbnz	r3, 8012e9c <__hi0bits+0x3c>
 8012e66:	0400      	lsls	r0, r0, #16
 8012e68:	2310      	movs	r3, #16
 8012e6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e6e:	bf04      	itt	eq
 8012e70:	0200      	lsleq	r0, r0, #8
 8012e72:	3308      	addeq	r3, #8
 8012e74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e78:	bf04      	itt	eq
 8012e7a:	0100      	lsleq	r0, r0, #4
 8012e7c:	3304      	addeq	r3, #4
 8012e7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e82:	bf04      	itt	eq
 8012e84:	0080      	lsleq	r0, r0, #2
 8012e86:	3302      	addeq	r3, #2
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	db05      	blt.n	8012e98 <__hi0bits+0x38>
 8012e8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012e90:	f103 0301 	add.w	r3, r3, #1
 8012e94:	bf08      	it	eq
 8012e96:	2320      	moveq	r3, #32
 8012e98:	4618      	mov	r0, r3
 8012e9a:	4770      	bx	lr
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	e7e4      	b.n	8012e6a <__hi0bits+0xa>

08012ea0 <__lo0bits>:
 8012ea0:	6803      	ldr	r3, [r0, #0]
 8012ea2:	f013 0207 	ands.w	r2, r3, #7
 8012ea6:	d00c      	beq.n	8012ec2 <__lo0bits+0x22>
 8012ea8:	07d9      	lsls	r1, r3, #31
 8012eaa:	d422      	bmi.n	8012ef2 <__lo0bits+0x52>
 8012eac:	079a      	lsls	r2, r3, #30
 8012eae:	bf49      	itett	mi
 8012eb0:	085b      	lsrmi	r3, r3, #1
 8012eb2:	089b      	lsrpl	r3, r3, #2
 8012eb4:	6003      	strmi	r3, [r0, #0]
 8012eb6:	2201      	movmi	r2, #1
 8012eb8:	bf5c      	itt	pl
 8012eba:	6003      	strpl	r3, [r0, #0]
 8012ebc:	2202      	movpl	r2, #2
 8012ebe:	4610      	mov	r0, r2
 8012ec0:	4770      	bx	lr
 8012ec2:	b299      	uxth	r1, r3
 8012ec4:	b909      	cbnz	r1, 8012eca <__lo0bits+0x2a>
 8012ec6:	0c1b      	lsrs	r3, r3, #16
 8012ec8:	2210      	movs	r2, #16
 8012eca:	b2d9      	uxtb	r1, r3
 8012ecc:	b909      	cbnz	r1, 8012ed2 <__lo0bits+0x32>
 8012ece:	3208      	adds	r2, #8
 8012ed0:	0a1b      	lsrs	r3, r3, #8
 8012ed2:	0719      	lsls	r1, r3, #28
 8012ed4:	bf04      	itt	eq
 8012ed6:	091b      	lsreq	r3, r3, #4
 8012ed8:	3204      	addeq	r2, #4
 8012eda:	0799      	lsls	r1, r3, #30
 8012edc:	bf04      	itt	eq
 8012ede:	089b      	lsreq	r3, r3, #2
 8012ee0:	3202      	addeq	r2, #2
 8012ee2:	07d9      	lsls	r1, r3, #31
 8012ee4:	d403      	bmi.n	8012eee <__lo0bits+0x4e>
 8012ee6:	085b      	lsrs	r3, r3, #1
 8012ee8:	f102 0201 	add.w	r2, r2, #1
 8012eec:	d003      	beq.n	8012ef6 <__lo0bits+0x56>
 8012eee:	6003      	str	r3, [r0, #0]
 8012ef0:	e7e5      	b.n	8012ebe <__lo0bits+0x1e>
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	e7e3      	b.n	8012ebe <__lo0bits+0x1e>
 8012ef6:	2220      	movs	r2, #32
 8012ef8:	e7e1      	b.n	8012ebe <__lo0bits+0x1e>
	...

08012efc <__i2b>:
 8012efc:	b510      	push	{r4, lr}
 8012efe:	460c      	mov	r4, r1
 8012f00:	2101      	movs	r1, #1
 8012f02:	f7ff febb 	bl	8012c7c <_Balloc>
 8012f06:	4602      	mov	r2, r0
 8012f08:	b928      	cbnz	r0, 8012f16 <__i2b+0x1a>
 8012f0a:	4b05      	ldr	r3, [pc, #20]	; (8012f20 <__i2b+0x24>)
 8012f0c:	4805      	ldr	r0, [pc, #20]	; (8012f24 <__i2b+0x28>)
 8012f0e:	f240 1145 	movw	r1, #325	; 0x145
 8012f12:	f001 fc29 	bl	8014768 <__assert_func>
 8012f16:	2301      	movs	r3, #1
 8012f18:	6144      	str	r4, [r0, #20]
 8012f1a:	6103      	str	r3, [r0, #16]
 8012f1c:	bd10      	pop	{r4, pc}
 8012f1e:	bf00      	nop
 8012f20:	080157f3 	.word	0x080157f3
 8012f24:	08015804 	.word	0x08015804

08012f28 <__multiply>:
 8012f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f2c:	4691      	mov	r9, r2
 8012f2e:	690a      	ldr	r2, [r1, #16]
 8012f30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	bfb8      	it	lt
 8012f38:	460b      	movlt	r3, r1
 8012f3a:	460c      	mov	r4, r1
 8012f3c:	bfbc      	itt	lt
 8012f3e:	464c      	movlt	r4, r9
 8012f40:	4699      	movlt	r9, r3
 8012f42:	6927      	ldr	r7, [r4, #16]
 8012f44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f48:	68a3      	ldr	r3, [r4, #8]
 8012f4a:	6861      	ldr	r1, [r4, #4]
 8012f4c:	eb07 060a 	add.w	r6, r7, sl
 8012f50:	42b3      	cmp	r3, r6
 8012f52:	b085      	sub	sp, #20
 8012f54:	bfb8      	it	lt
 8012f56:	3101      	addlt	r1, #1
 8012f58:	f7ff fe90 	bl	8012c7c <_Balloc>
 8012f5c:	b930      	cbnz	r0, 8012f6c <__multiply+0x44>
 8012f5e:	4602      	mov	r2, r0
 8012f60:	4b44      	ldr	r3, [pc, #272]	; (8013074 <__multiply+0x14c>)
 8012f62:	4845      	ldr	r0, [pc, #276]	; (8013078 <__multiply+0x150>)
 8012f64:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012f68:	f001 fbfe 	bl	8014768 <__assert_func>
 8012f6c:	f100 0514 	add.w	r5, r0, #20
 8012f70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f74:	462b      	mov	r3, r5
 8012f76:	2200      	movs	r2, #0
 8012f78:	4543      	cmp	r3, r8
 8012f7a:	d321      	bcc.n	8012fc0 <__multiply+0x98>
 8012f7c:	f104 0314 	add.w	r3, r4, #20
 8012f80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012f84:	f109 0314 	add.w	r3, r9, #20
 8012f88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012f8c:	9202      	str	r2, [sp, #8]
 8012f8e:	1b3a      	subs	r2, r7, r4
 8012f90:	3a15      	subs	r2, #21
 8012f92:	f022 0203 	bic.w	r2, r2, #3
 8012f96:	3204      	adds	r2, #4
 8012f98:	f104 0115 	add.w	r1, r4, #21
 8012f9c:	428f      	cmp	r7, r1
 8012f9e:	bf38      	it	cc
 8012fa0:	2204      	movcc	r2, #4
 8012fa2:	9201      	str	r2, [sp, #4]
 8012fa4:	9a02      	ldr	r2, [sp, #8]
 8012fa6:	9303      	str	r3, [sp, #12]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d80c      	bhi.n	8012fc6 <__multiply+0x9e>
 8012fac:	2e00      	cmp	r6, #0
 8012fae:	dd03      	ble.n	8012fb8 <__multiply+0x90>
 8012fb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d05b      	beq.n	8013070 <__multiply+0x148>
 8012fb8:	6106      	str	r6, [r0, #16]
 8012fba:	b005      	add	sp, #20
 8012fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc0:	f843 2b04 	str.w	r2, [r3], #4
 8012fc4:	e7d8      	b.n	8012f78 <__multiply+0x50>
 8012fc6:	f8b3 a000 	ldrh.w	sl, [r3]
 8012fca:	f1ba 0f00 	cmp.w	sl, #0
 8012fce:	d024      	beq.n	801301a <__multiply+0xf2>
 8012fd0:	f104 0e14 	add.w	lr, r4, #20
 8012fd4:	46a9      	mov	r9, r5
 8012fd6:	f04f 0c00 	mov.w	ip, #0
 8012fda:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012fde:	f8d9 1000 	ldr.w	r1, [r9]
 8012fe2:	fa1f fb82 	uxth.w	fp, r2
 8012fe6:	b289      	uxth	r1, r1
 8012fe8:	fb0a 110b 	mla	r1, sl, fp, r1
 8012fec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8012ff4:	4461      	add	r1, ip
 8012ff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012ffa:	fb0a c20b 	mla	r2, sl, fp, ip
 8012ffe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013002:	b289      	uxth	r1, r1
 8013004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013008:	4577      	cmp	r7, lr
 801300a:	f849 1b04 	str.w	r1, [r9], #4
 801300e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013012:	d8e2      	bhi.n	8012fda <__multiply+0xb2>
 8013014:	9a01      	ldr	r2, [sp, #4]
 8013016:	f845 c002 	str.w	ip, [r5, r2]
 801301a:	9a03      	ldr	r2, [sp, #12]
 801301c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013020:	3304      	adds	r3, #4
 8013022:	f1b9 0f00 	cmp.w	r9, #0
 8013026:	d021      	beq.n	801306c <__multiply+0x144>
 8013028:	6829      	ldr	r1, [r5, #0]
 801302a:	f104 0c14 	add.w	ip, r4, #20
 801302e:	46ae      	mov	lr, r5
 8013030:	f04f 0a00 	mov.w	sl, #0
 8013034:	f8bc b000 	ldrh.w	fp, [ip]
 8013038:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801303c:	fb09 220b 	mla	r2, r9, fp, r2
 8013040:	4452      	add	r2, sl
 8013042:	b289      	uxth	r1, r1
 8013044:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013048:	f84e 1b04 	str.w	r1, [lr], #4
 801304c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013050:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013054:	f8be 1000 	ldrh.w	r1, [lr]
 8013058:	fb09 110a 	mla	r1, r9, sl, r1
 801305c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013060:	4567      	cmp	r7, ip
 8013062:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013066:	d8e5      	bhi.n	8013034 <__multiply+0x10c>
 8013068:	9a01      	ldr	r2, [sp, #4]
 801306a:	50a9      	str	r1, [r5, r2]
 801306c:	3504      	adds	r5, #4
 801306e:	e799      	b.n	8012fa4 <__multiply+0x7c>
 8013070:	3e01      	subs	r6, #1
 8013072:	e79b      	b.n	8012fac <__multiply+0x84>
 8013074:	080157f3 	.word	0x080157f3
 8013078:	08015804 	.word	0x08015804

0801307c <__pow5mult>:
 801307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013080:	4615      	mov	r5, r2
 8013082:	f012 0203 	ands.w	r2, r2, #3
 8013086:	4606      	mov	r6, r0
 8013088:	460f      	mov	r7, r1
 801308a:	d007      	beq.n	801309c <__pow5mult+0x20>
 801308c:	4c25      	ldr	r4, [pc, #148]	; (8013124 <__pow5mult+0xa8>)
 801308e:	3a01      	subs	r2, #1
 8013090:	2300      	movs	r3, #0
 8013092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013096:	f7ff fe53 	bl	8012d40 <__multadd>
 801309a:	4607      	mov	r7, r0
 801309c:	10ad      	asrs	r5, r5, #2
 801309e:	d03d      	beq.n	801311c <__pow5mult+0xa0>
 80130a0:	69f4      	ldr	r4, [r6, #28]
 80130a2:	b97c      	cbnz	r4, 80130c4 <__pow5mult+0x48>
 80130a4:	2010      	movs	r0, #16
 80130a6:	f7ff fd35 	bl	8012b14 <malloc>
 80130aa:	4602      	mov	r2, r0
 80130ac:	61f0      	str	r0, [r6, #28]
 80130ae:	b928      	cbnz	r0, 80130bc <__pow5mult+0x40>
 80130b0:	4b1d      	ldr	r3, [pc, #116]	; (8013128 <__pow5mult+0xac>)
 80130b2:	481e      	ldr	r0, [pc, #120]	; (801312c <__pow5mult+0xb0>)
 80130b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80130b8:	f001 fb56 	bl	8014768 <__assert_func>
 80130bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130c0:	6004      	str	r4, [r0, #0]
 80130c2:	60c4      	str	r4, [r0, #12]
 80130c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80130c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80130cc:	b94c      	cbnz	r4, 80130e2 <__pow5mult+0x66>
 80130ce:	f240 2171 	movw	r1, #625	; 0x271
 80130d2:	4630      	mov	r0, r6
 80130d4:	f7ff ff12 	bl	8012efc <__i2b>
 80130d8:	2300      	movs	r3, #0
 80130da:	f8c8 0008 	str.w	r0, [r8, #8]
 80130de:	4604      	mov	r4, r0
 80130e0:	6003      	str	r3, [r0, #0]
 80130e2:	f04f 0900 	mov.w	r9, #0
 80130e6:	07eb      	lsls	r3, r5, #31
 80130e8:	d50a      	bpl.n	8013100 <__pow5mult+0x84>
 80130ea:	4639      	mov	r1, r7
 80130ec:	4622      	mov	r2, r4
 80130ee:	4630      	mov	r0, r6
 80130f0:	f7ff ff1a 	bl	8012f28 <__multiply>
 80130f4:	4639      	mov	r1, r7
 80130f6:	4680      	mov	r8, r0
 80130f8:	4630      	mov	r0, r6
 80130fa:	f7ff fdff 	bl	8012cfc <_Bfree>
 80130fe:	4647      	mov	r7, r8
 8013100:	106d      	asrs	r5, r5, #1
 8013102:	d00b      	beq.n	801311c <__pow5mult+0xa0>
 8013104:	6820      	ldr	r0, [r4, #0]
 8013106:	b938      	cbnz	r0, 8013118 <__pow5mult+0x9c>
 8013108:	4622      	mov	r2, r4
 801310a:	4621      	mov	r1, r4
 801310c:	4630      	mov	r0, r6
 801310e:	f7ff ff0b 	bl	8012f28 <__multiply>
 8013112:	6020      	str	r0, [r4, #0]
 8013114:	f8c0 9000 	str.w	r9, [r0]
 8013118:	4604      	mov	r4, r0
 801311a:	e7e4      	b.n	80130e6 <__pow5mult+0x6a>
 801311c:	4638      	mov	r0, r7
 801311e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013122:	bf00      	nop
 8013124:	08015950 	.word	0x08015950
 8013128:	08015784 	.word	0x08015784
 801312c:	08015804 	.word	0x08015804

08013130 <__lshift>:
 8013130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013134:	460c      	mov	r4, r1
 8013136:	6849      	ldr	r1, [r1, #4]
 8013138:	6923      	ldr	r3, [r4, #16]
 801313a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801313e:	68a3      	ldr	r3, [r4, #8]
 8013140:	4607      	mov	r7, r0
 8013142:	4691      	mov	r9, r2
 8013144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013148:	f108 0601 	add.w	r6, r8, #1
 801314c:	42b3      	cmp	r3, r6
 801314e:	db0b      	blt.n	8013168 <__lshift+0x38>
 8013150:	4638      	mov	r0, r7
 8013152:	f7ff fd93 	bl	8012c7c <_Balloc>
 8013156:	4605      	mov	r5, r0
 8013158:	b948      	cbnz	r0, 801316e <__lshift+0x3e>
 801315a:	4602      	mov	r2, r0
 801315c:	4b28      	ldr	r3, [pc, #160]	; (8013200 <__lshift+0xd0>)
 801315e:	4829      	ldr	r0, [pc, #164]	; (8013204 <__lshift+0xd4>)
 8013160:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013164:	f001 fb00 	bl	8014768 <__assert_func>
 8013168:	3101      	adds	r1, #1
 801316a:	005b      	lsls	r3, r3, #1
 801316c:	e7ee      	b.n	801314c <__lshift+0x1c>
 801316e:	2300      	movs	r3, #0
 8013170:	f100 0114 	add.w	r1, r0, #20
 8013174:	f100 0210 	add.w	r2, r0, #16
 8013178:	4618      	mov	r0, r3
 801317a:	4553      	cmp	r3, sl
 801317c:	db33      	blt.n	80131e6 <__lshift+0xb6>
 801317e:	6920      	ldr	r0, [r4, #16]
 8013180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013184:	f104 0314 	add.w	r3, r4, #20
 8013188:	f019 091f 	ands.w	r9, r9, #31
 801318c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013190:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013194:	d02b      	beq.n	80131ee <__lshift+0xbe>
 8013196:	f1c9 0e20 	rsb	lr, r9, #32
 801319a:	468a      	mov	sl, r1
 801319c:	2200      	movs	r2, #0
 801319e:	6818      	ldr	r0, [r3, #0]
 80131a0:	fa00 f009 	lsl.w	r0, r0, r9
 80131a4:	4310      	orrs	r0, r2
 80131a6:	f84a 0b04 	str.w	r0, [sl], #4
 80131aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80131ae:	459c      	cmp	ip, r3
 80131b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80131b4:	d8f3      	bhi.n	801319e <__lshift+0x6e>
 80131b6:	ebac 0304 	sub.w	r3, ip, r4
 80131ba:	3b15      	subs	r3, #21
 80131bc:	f023 0303 	bic.w	r3, r3, #3
 80131c0:	3304      	adds	r3, #4
 80131c2:	f104 0015 	add.w	r0, r4, #21
 80131c6:	4584      	cmp	ip, r0
 80131c8:	bf38      	it	cc
 80131ca:	2304      	movcc	r3, #4
 80131cc:	50ca      	str	r2, [r1, r3]
 80131ce:	b10a      	cbz	r2, 80131d4 <__lshift+0xa4>
 80131d0:	f108 0602 	add.w	r6, r8, #2
 80131d4:	3e01      	subs	r6, #1
 80131d6:	4638      	mov	r0, r7
 80131d8:	612e      	str	r6, [r5, #16]
 80131da:	4621      	mov	r1, r4
 80131dc:	f7ff fd8e 	bl	8012cfc <_Bfree>
 80131e0:	4628      	mov	r0, r5
 80131e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80131ea:	3301      	adds	r3, #1
 80131ec:	e7c5      	b.n	801317a <__lshift+0x4a>
 80131ee:	3904      	subs	r1, #4
 80131f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80131f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80131f8:	459c      	cmp	ip, r3
 80131fa:	d8f9      	bhi.n	80131f0 <__lshift+0xc0>
 80131fc:	e7ea      	b.n	80131d4 <__lshift+0xa4>
 80131fe:	bf00      	nop
 8013200:	080157f3 	.word	0x080157f3
 8013204:	08015804 	.word	0x08015804

08013208 <__mcmp>:
 8013208:	b530      	push	{r4, r5, lr}
 801320a:	6902      	ldr	r2, [r0, #16]
 801320c:	690c      	ldr	r4, [r1, #16]
 801320e:	1b12      	subs	r2, r2, r4
 8013210:	d10e      	bne.n	8013230 <__mcmp+0x28>
 8013212:	f100 0314 	add.w	r3, r0, #20
 8013216:	3114      	adds	r1, #20
 8013218:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801321c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013220:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013224:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013228:	42a5      	cmp	r5, r4
 801322a:	d003      	beq.n	8013234 <__mcmp+0x2c>
 801322c:	d305      	bcc.n	801323a <__mcmp+0x32>
 801322e:	2201      	movs	r2, #1
 8013230:	4610      	mov	r0, r2
 8013232:	bd30      	pop	{r4, r5, pc}
 8013234:	4283      	cmp	r3, r0
 8013236:	d3f3      	bcc.n	8013220 <__mcmp+0x18>
 8013238:	e7fa      	b.n	8013230 <__mcmp+0x28>
 801323a:	f04f 32ff 	mov.w	r2, #4294967295
 801323e:	e7f7      	b.n	8013230 <__mcmp+0x28>

08013240 <__mdiff>:
 8013240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013244:	460c      	mov	r4, r1
 8013246:	4606      	mov	r6, r0
 8013248:	4611      	mov	r1, r2
 801324a:	4620      	mov	r0, r4
 801324c:	4690      	mov	r8, r2
 801324e:	f7ff ffdb 	bl	8013208 <__mcmp>
 8013252:	1e05      	subs	r5, r0, #0
 8013254:	d110      	bne.n	8013278 <__mdiff+0x38>
 8013256:	4629      	mov	r1, r5
 8013258:	4630      	mov	r0, r6
 801325a:	f7ff fd0f 	bl	8012c7c <_Balloc>
 801325e:	b930      	cbnz	r0, 801326e <__mdiff+0x2e>
 8013260:	4b3a      	ldr	r3, [pc, #232]	; (801334c <__mdiff+0x10c>)
 8013262:	4602      	mov	r2, r0
 8013264:	f240 2137 	movw	r1, #567	; 0x237
 8013268:	4839      	ldr	r0, [pc, #228]	; (8013350 <__mdiff+0x110>)
 801326a:	f001 fa7d 	bl	8014768 <__assert_func>
 801326e:	2301      	movs	r3, #1
 8013270:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013274:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013278:	bfa4      	itt	ge
 801327a:	4643      	movge	r3, r8
 801327c:	46a0      	movge	r8, r4
 801327e:	4630      	mov	r0, r6
 8013280:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013284:	bfa6      	itte	ge
 8013286:	461c      	movge	r4, r3
 8013288:	2500      	movge	r5, #0
 801328a:	2501      	movlt	r5, #1
 801328c:	f7ff fcf6 	bl	8012c7c <_Balloc>
 8013290:	b920      	cbnz	r0, 801329c <__mdiff+0x5c>
 8013292:	4b2e      	ldr	r3, [pc, #184]	; (801334c <__mdiff+0x10c>)
 8013294:	4602      	mov	r2, r0
 8013296:	f240 2145 	movw	r1, #581	; 0x245
 801329a:	e7e5      	b.n	8013268 <__mdiff+0x28>
 801329c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80132a0:	6926      	ldr	r6, [r4, #16]
 80132a2:	60c5      	str	r5, [r0, #12]
 80132a4:	f104 0914 	add.w	r9, r4, #20
 80132a8:	f108 0514 	add.w	r5, r8, #20
 80132ac:	f100 0e14 	add.w	lr, r0, #20
 80132b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80132b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80132b8:	f108 0210 	add.w	r2, r8, #16
 80132bc:	46f2      	mov	sl, lr
 80132be:	2100      	movs	r1, #0
 80132c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80132c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80132c8:	fa11 f88b 	uxtah	r8, r1, fp
 80132cc:	b299      	uxth	r1, r3
 80132ce:	0c1b      	lsrs	r3, r3, #16
 80132d0:	eba8 0801 	sub.w	r8, r8, r1
 80132d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80132d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80132dc:	fa1f f888 	uxth.w	r8, r8
 80132e0:	1419      	asrs	r1, r3, #16
 80132e2:	454e      	cmp	r6, r9
 80132e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80132e8:	f84a 3b04 	str.w	r3, [sl], #4
 80132ec:	d8e8      	bhi.n	80132c0 <__mdiff+0x80>
 80132ee:	1b33      	subs	r3, r6, r4
 80132f0:	3b15      	subs	r3, #21
 80132f2:	f023 0303 	bic.w	r3, r3, #3
 80132f6:	3304      	adds	r3, #4
 80132f8:	3415      	adds	r4, #21
 80132fa:	42a6      	cmp	r6, r4
 80132fc:	bf38      	it	cc
 80132fe:	2304      	movcc	r3, #4
 8013300:	441d      	add	r5, r3
 8013302:	4473      	add	r3, lr
 8013304:	469e      	mov	lr, r3
 8013306:	462e      	mov	r6, r5
 8013308:	4566      	cmp	r6, ip
 801330a:	d30e      	bcc.n	801332a <__mdiff+0xea>
 801330c:	f10c 0203 	add.w	r2, ip, #3
 8013310:	1b52      	subs	r2, r2, r5
 8013312:	f022 0203 	bic.w	r2, r2, #3
 8013316:	3d03      	subs	r5, #3
 8013318:	45ac      	cmp	ip, r5
 801331a:	bf38      	it	cc
 801331c:	2200      	movcc	r2, #0
 801331e:	4413      	add	r3, r2
 8013320:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013324:	b17a      	cbz	r2, 8013346 <__mdiff+0x106>
 8013326:	6107      	str	r7, [r0, #16]
 8013328:	e7a4      	b.n	8013274 <__mdiff+0x34>
 801332a:	f856 8b04 	ldr.w	r8, [r6], #4
 801332e:	fa11 f288 	uxtah	r2, r1, r8
 8013332:	1414      	asrs	r4, r2, #16
 8013334:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013338:	b292      	uxth	r2, r2
 801333a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801333e:	f84e 2b04 	str.w	r2, [lr], #4
 8013342:	1421      	asrs	r1, r4, #16
 8013344:	e7e0      	b.n	8013308 <__mdiff+0xc8>
 8013346:	3f01      	subs	r7, #1
 8013348:	e7ea      	b.n	8013320 <__mdiff+0xe0>
 801334a:	bf00      	nop
 801334c:	080157f3 	.word	0x080157f3
 8013350:	08015804 	.word	0x08015804

08013354 <__ulp>:
 8013354:	b082      	sub	sp, #8
 8013356:	ed8d 0b00 	vstr	d0, [sp]
 801335a:	9a01      	ldr	r2, [sp, #4]
 801335c:	4b0f      	ldr	r3, [pc, #60]	; (801339c <__ulp+0x48>)
 801335e:	4013      	ands	r3, r2
 8013360:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013364:	2b00      	cmp	r3, #0
 8013366:	dc08      	bgt.n	801337a <__ulp+0x26>
 8013368:	425b      	negs	r3, r3
 801336a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801336e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013372:	da04      	bge.n	801337e <__ulp+0x2a>
 8013374:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013378:	4113      	asrs	r3, r2
 801337a:	2200      	movs	r2, #0
 801337c:	e008      	b.n	8013390 <__ulp+0x3c>
 801337e:	f1a2 0314 	sub.w	r3, r2, #20
 8013382:	2b1e      	cmp	r3, #30
 8013384:	bfda      	itte	le
 8013386:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801338a:	40da      	lsrle	r2, r3
 801338c:	2201      	movgt	r2, #1
 801338e:	2300      	movs	r3, #0
 8013390:	4619      	mov	r1, r3
 8013392:	4610      	mov	r0, r2
 8013394:	ec41 0b10 	vmov	d0, r0, r1
 8013398:	b002      	add	sp, #8
 801339a:	4770      	bx	lr
 801339c:	7ff00000 	.word	0x7ff00000

080133a0 <__b2d>:
 80133a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a4:	6906      	ldr	r6, [r0, #16]
 80133a6:	f100 0814 	add.w	r8, r0, #20
 80133aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80133ae:	1f37      	subs	r7, r6, #4
 80133b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80133b4:	4610      	mov	r0, r2
 80133b6:	f7ff fd53 	bl	8012e60 <__hi0bits>
 80133ba:	f1c0 0320 	rsb	r3, r0, #32
 80133be:	280a      	cmp	r0, #10
 80133c0:	600b      	str	r3, [r1, #0]
 80133c2:	491b      	ldr	r1, [pc, #108]	; (8013430 <__b2d+0x90>)
 80133c4:	dc15      	bgt.n	80133f2 <__b2d+0x52>
 80133c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80133ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80133ce:	45b8      	cmp	r8, r7
 80133d0:	ea43 0501 	orr.w	r5, r3, r1
 80133d4:	bf34      	ite	cc
 80133d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80133da:	2300      	movcs	r3, #0
 80133dc:	3015      	adds	r0, #21
 80133de:	fa02 f000 	lsl.w	r0, r2, r0
 80133e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80133e6:	4303      	orrs	r3, r0
 80133e8:	461c      	mov	r4, r3
 80133ea:	ec45 4b10 	vmov	d0, r4, r5
 80133ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f2:	45b8      	cmp	r8, r7
 80133f4:	bf3a      	itte	cc
 80133f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80133fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80133fe:	2300      	movcs	r3, #0
 8013400:	380b      	subs	r0, #11
 8013402:	d012      	beq.n	801342a <__b2d+0x8a>
 8013404:	f1c0 0120 	rsb	r1, r0, #32
 8013408:	fa23 f401 	lsr.w	r4, r3, r1
 801340c:	4082      	lsls	r2, r0
 801340e:	4322      	orrs	r2, r4
 8013410:	4547      	cmp	r7, r8
 8013412:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013416:	bf8c      	ite	hi
 8013418:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801341c:	2200      	movls	r2, #0
 801341e:	4083      	lsls	r3, r0
 8013420:	40ca      	lsrs	r2, r1
 8013422:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013426:	4313      	orrs	r3, r2
 8013428:	e7de      	b.n	80133e8 <__b2d+0x48>
 801342a:	ea42 0501 	orr.w	r5, r2, r1
 801342e:	e7db      	b.n	80133e8 <__b2d+0x48>
 8013430:	3ff00000 	.word	0x3ff00000

08013434 <__d2b>:
 8013434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013438:	460f      	mov	r7, r1
 801343a:	2101      	movs	r1, #1
 801343c:	ec59 8b10 	vmov	r8, r9, d0
 8013440:	4616      	mov	r6, r2
 8013442:	f7ff fc1b 	bl	8012c7c <_Balloc>
 8013446:	4604      	mov	r4, r0
 8013448:	b930      	cbnz	r0, 8013458 <__d2b+0x24>
 801344a:	4602      	mov	r2, r0
 801344c:	4b24      	ldr	r3, [pc, #144]	; (80134e0 <__d2b+0xac>)
 801344e:	4825      	ldr	r0, [pc, #148]	; (80134e4 <__d2b+0xb0>)
 8013450:	f240 310f 	movw	r1, #783	; 0x30f
 8013454:	f001 f988 	bl	8014768 <__assert_func>
 8013458:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801345c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013460:	bb2d      	cbnz	r5, 80134ae <__d2b+0x7a>
 8013462:	9301      	str	r3, [sp, #4]
 8013464:	f1b8 0300 	subs.w	r3, r8, #0
 8013468:	d026      	beq.n	80134b8 <__d2b+0x84>
 801346a:	4668      	mov	r0, sp
 801346c:	9300      	str	r3, [sp, #0]
 801346e:	f7ff fd17 	bl	8012ea0 <__lo0bits>
 8013472:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013476:	b1e8      	cbz	r0, 80134b4 <__d2b+0x80>
 8013478:	f1c0 0320 	rsb	r3, r0, #32
 801347c:	fa02 f303 	lsl.w	r3, r2, r3
 8013480:	430b      	orrs	r3, r1
 8013482:	40c2      	lsrs	r2, r0
 8013484:	6163      	str	r3, [r4, #20]
 8013486:	9201      	str	r2, [sp, #4]
 8013488:	9b01      	ldr	r3, [sp, #4]
 801348a:	61a3      	str	r3, [r4, #24]
 801348c:	2b00      	cmp	r3, #0
 801348e:	bf14      	ite	ne
 8013490:	2202      	movne	r2, #2
 8013492:	2201      	moveq	r2, #1
 8013494:	6122      	str	r2, [r4, #16]
 8013496:	b1bd      	cbz	r5, 80134c8 <__d2b+0x94>
 8013498:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801349c:	4405      	add	r5, r0
 801349e:	603d      	str	r5, [r7, #0]
 80134a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80134a4:	6030      	str	r0, [r6, #0]
 80134a6:	4620      	mov	r0, r4
 80134a8:	b003      	add	sp, #12
 80134aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80134b2:	e7d6      	b.n	8013462 <__d2b+0x2e>
 80134b4:	6161      	str	r1, [r4, #20]
 80134b6:	e7e7      	b.n	8013488 <__d2b+0x54>
 80134b8:	a801      	add	r0, sp, #4
 80134ba:	f7ff fcf1 	bl	8012ea0 <__lo0bits>
 80134be:	9b01      	ldr	r3, [sp, #4]
 80134c0:	6163      	str	r3, [r4, #20]
 80134c2:	3020      	adds	r0, #32
 80134c4:	2201      	movs	r2, #1
 80134c6:	e7e5      	b.n	8013494 <__d2b+0x60>
 80134c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80134cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80134d0:	6038      	str	r0, [r7, #0]
 80134d2:	6918      	ldr	r0, [r3, #16]
 80134d4:	f7ff fcc4 	bl	8012e60 <__hi0bits>
 80134d8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80134dc:	e7e2      	b.n	80134a4 <__d2b+0x70>
 80134de:	bf00      	nop
 80134e0:	080157f3 	.word	0x080157f3
 80134e4:	08015804 	.word	0x08015804

080134e8 <__ratio>:
 80134e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ec:	4688      	mov	r8, r1
 80134ee:	4669      	mov	r1, sp
 80134f0:	4681      	mov	r9, r0
 80134f2:	f7ff ff55 	bl	80133a0 <__b2d>
 80134f6:	a901      	add	r1, sp, #4
 80134f8:	4640      	mov	r0, r8
 80134fa:	ec55 4b10 	vmov	r4, r5, d0
 80134fe:	f7ff ff4f 	bl	80133a0 <__b2d>
 8013502:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013506:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801350a:	eba3 0c02 	sub.w	ip, r3, r2
 801350e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013512:	1a9b      	subs	r3, r3, r2
 8013514:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013518:	ec51 0b10 	vmov	r0, r1, d0
 801351c:	2b00      	cmp	r3, #0
 801351e:	bfd6      	itet	le
 8013520:	460a      	movle	r2, r1
 8013522:	462a      	movgt	r2, r5
 8013524:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013528:	468b      	mov	fp, r1
 801352a:	462f      	mov	r7, r5
 801352c:	bfd4      	ite	le
 801352e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013532:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013536:	4620      	mov	r0, r4
 8013538:	ee10 2a10 	vmov	r2, s0
 801353c:	465b      	mov	r3, fp
 801353e:	4639      	mov	r1, r7
 8013540:	f7ed f984 	bl	800084c <__aeabi_ddiv>
 8013544:	ec41 0b10 	vmov	d0, r0, r1
 8013548:	b003      	add	sp, #12
 801354a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801354e <__copybits>:
 801354e:	3901      	subs	r1, #1
 8013550:	b570      	push	{r4, r5, r6, lr}
 8013552:	1149      	asrs	r1, r1, #5
 8013554:	6914      	ldr	r4, [r2, #16]
 8013556:	3101      	adds	r1, #1
 8013558:	f102 0314 	add.w	r3, r2, #20
 801355c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013560:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013564:	1f05      	subs	r5, r0, #4
 8013566:	42a3      	cmp	r3, r4
 8013568:	d30c      	bcc.n	8013584 <__copybits+0x36>
 801356a:	1aa3      	subs	r3, r4, r2
 801356c:	3b11      	subs	r3, #17
 801356e:	f023 0303 	bic.w	r3, r3, #3
 8013572:	3211      	adds	r2, #17
 8013574:	42a2      	cmp	r2, r4
 8013576:	bf88      	it	hi
 8013578:	2300      	movhi	r3, #0
 801357a:	4418      	add	r0, r3
 801357c:	2300      	movs	r3, #0
 801357e:	4288      	cmp	r0, r1
 8013580:	d305      	bcc.n	801358e <__copybits+0x40>
 8013582:	bd70      	pop	{r4, r5, r6, pc}
 8013584:	f853 6b04 	ldr.w	r6, [r3], #4
 8013588:	f845 6f04 	str.w	r6, [r5, #4]!
 801358c:	e7eb      	b.n	8013566 <__copybits+0x18>
 801358e:	f840 3b04 	str.w	r3, [r0], #4
 8013592:	e7f4      	b.n	801357e <__copybits+0x30>

08013594 <__any_on>:
 8013594:	f100 0214 	add.w	r2, r0, #20
 8013598:	6900      	ldr	r0, [r0, #16]
 801359a:	114b      	asrs	r3, r1, #5
 801359c:	4298      	cmp	r0, r3
 801359e:	b510      	push	{r4, lr}
 80135a0:	db11      	blt.n	80135c6 <__any_on+0x32>
 80135a2:	dd0a      	ble.n	80135ba <__any_on+0x26>
 80135a4:	f011 011f 	ands.w	r1, r1, #31
 80135a8:	d007      	beq.n	80135ba <__any_on+0x26>
 80135aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80135ae:	fa24 f001 	lsr.w	r0, r4, r1
 80135b2:	fa00 f101 	lsl.w	r1, r0, r1
 80135b6:	428c      	cmp	r4, r1
 80135b8:	d10b      	bne.n	80135d2 <__any_on+0x3e>
 80135ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80135be:	4293      	cmp	r3, r2
 80135c0:	d803      	bhi.n	80135ca <__any_on+0x36>
 80135c2:	2000      	movs	r0, #0
 80135c4:	bd10      	pop	{r4, pc}
 80135c6:	4603      	mov	r3, r0
 80135c8:	e7f7      	b.n	80135ba <__any_on+0x26>
 80135ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135ce:	2900      	cmp	r1, #0
 80135d0:	d0f5      	beq.n	80135be <__any_on+0x2a>
 80135d2:	2001      	movs	r0, #1
 80135d4:	e7f6      	b.n	80135c4 <__any_on+0x30>

080135d6 <sulp>:
 80135d6:	b570      	push	{r4, r5, r6, lr}
 80135d8:	4604      	mov	r4, r0
 80135da:	460d      	mov	r5, r1
 80135dc:	ec45 4b10 	vmov	d0, r4, r5
 80135e0:	4616      	mov	r6, r2
 80135e2:	f7ff feb7 	bl	8013354 <__ulp>
 80135e6:	ec51 0b10 	vmov	r0, r1, d0
 80135ea:	b17e      	cbz	r6, 801360c <sulp+0x36>
 80135ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80135f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	dd09      	ble.n	801360c <sulp+0x36>
 80135f8:	051b      	lsls	r3, r3, #20
 80135fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80135fe:	2400      	movs	r4, #0
 8013600:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013604:	4622      	mov	r2, r4
 8013606:	462b      	mov	r3, r5
 8013608:	f7ec fff6 	bl	80005f8 <__aeabi_dmul>
 801360c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013610 <_strtod_l>:
 8013610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	ed2d 8b02 	vpush	{d8}
 8013618:	b09b      	sub	sp, #108	; 0x6c
 801361a:	4604      	mov	r4, r0
 801361c:	9213      	str	r2, [sp, #76]	; 0x4c
 801361e:	2200      	movs	r2, #0
 8013620:	9216      	str	r2, [sp, #88]	; 0x58
 8013622:	460d      	mov	r5, r1
 8013624:	f04f 0800 	mov.w	r8, #0
 8013628:	f04f 0900 	mov.w	r9, #0
 801362c:	460a      	mov	r2, r1
 801362e:	9215      	str	r2, [sp, #84]	; 0x54
 8013630:	7811      	ldrb	r1, [r2, #0]
 8013632:	292b      	cmp	r1, #43	; 0x2b
 8013634:	d04c      	beq.n	80136d0 <_strtod_l+0xc0>
 8013636:	d83a      	bhi.n	80136ae <_strtod_l+0x9e>
 8013638:	290d      	cmp	r1, #13
 801363a:	d834      	bhi.n	80136a6 <_strtod_l+0x96>
 801363c:	2908      	cmp	r1, #8
 801363e:	d834      	bhi.n	80136aa <_strtod_l+0x9a>
 8013640:	2900      	cmp	r1, #0
 8013642:	d03d      	beq.n	80136c0 <_strtod_l+0xb0>
 8013644:	2200      	movs	r2, #0
 8013646:	920a      	str	r2, [sp, #40]	; 0x28
 8013648:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801364a:	7832      	ldrb	r2, [r6, #0]
 801364c:	2a30      	cmp	r2, #48	; 0x30
 801364e:	f040 80b4 	bne.w	80137ba <_strtod_l+0x1aa>
 8013652:	7872      	ldrb	r2, [r6, #1]
 8013654:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013658:	2a58      	cmp	r2, #88	; 0x58
 801365a:	d170      	bne.n	801373e <_strtod_l+0x12e>
 801365c:	9302      	str	r3, [sp, #8]
 801365e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013660:	9301      	str	r3, [sp, #4]
 8013662:	ab16      	add	r3, sp, #88	; 0x58
 8013664:	9300      	str	r3, [sp, #0]
 8013666:	4a8e      	ldr	r2, [pc, #568]	; (80138a0 <_strtod_l+0x290>)
 8013668:	ab17      	add	r3, sp, #92	; 0x5c
 801366a:	a915      	add	r1, sp, #84	; 0x54
 801366c:	4620      	mov	r0, r4
 801366e:	f001 f917 	bl	80148a0 <__gethex>
 8013672:	f010 070f 	ands.w	r7, r0, #15
 8013676:	4605      	mov	r5, r0
 8013678:	d005      	beq.n	8013686 <_strtod_l+0x76>
 801367a:	2f06      	cmp	r7, #6
 801367c:	d12a      	bne.n	80136d4 <_strtod_l+0xc4>
 801367e:	3601      	adds	r6, #1
 8013680:	2300      	movs	r3, #0
 8013682:	9615      	str	r6, [sp, #84]	; 0x54
 8013684:	930a      	str	r3, [sp, #40]	; 0x28
 8013686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013688:	2b00      	cmp	r3, #0
 801368a:	f040 857f 	bne.w	801418c <_strtod_l+0xb7c>
 801368e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013690:	b1db      	cbz	r3, 80136ca <_strtod_l+0xba>
 8013692:	4642      	mov	r2, r8
 8013694:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013698:	ec43 2b10 	vmov	d0, r2, r3
 801369c:	b01b      	add	sp, #108	; 0x6c
 801369e:	ecbd 8b02 	vpop	{d8}
 80136a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a6:	2920      	cmp	r1, #32
 80136a8:	d1cc      	bne.n	8013644 <_strtod_l+0x34>
 80136aa:	3201      	adds	r2, #1
 80136ac:	e7bf      	b.n	801362e <_strtod_l+0x1e>
 80136ae:	292d      	cmp	r1, #45	; 0x2d
 80136b0:	d1c8      	bne.n	8013644 <_strtod_l+0x34>
 80136b2:	2101      	movs	r1, #1
 80136b4:	910a      	str	r1, [sp, #40]	; 0x28
 80136b6:	1c51      	adds	r1, r2, #1
 80136b8:	9115      	str	r1, [sp, #84]	; 0x54
 80136ba:	7852      	ldrb	r2, [r2, #1]
 80136bc:	2a00      	cmp	r2, #0
 80136be:	d1c3      	bne.n	8013648 <_strtod_l+0x38>
 80136c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80136c2:	9515      	str	r5, [sp, #84]	; 0x54
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	f040 855f 	bne.w	8014188 <_strtod_l+0xb78>
 80136ca:	4642      	mov	r2, r8
 80136cc:	464b      	mov	r3, r9
 80136ce:	e7e3      	b.n	8013698 <_strtod_l+0x88>
 80136d0:	2100      	movs	r1, #0
 80136d2:	e7ef      	b.n	80136b4 <_strtod_l+0xa4>
 80136d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80136d6:	b13a      	cbz	r2, 80136e8 <_strtod_l+0xd8>
 80136d8:	2135      	movs	r1, #53	; 0x35
 80136da:	a818      	add	r0, sp, #96	; 0x60
 80136dc:	f7ff ff37 	bl	801354e <__copybits>
 80136e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80136e2:	4620      	mov	r0, r4
 80136e4:	f7ff fb0a 	bl	8012cfc <_Bfree>
 80136e8:	3f01      	subs	r7, #1
 80136ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80136ec:	2f04      	cmp	r7, #4
 80136ee:	d806      	bhi.n	80136fe <_strtod_l+0xee>
 80136f0:	e8df f007 	tbb	[pc, r7]
 80136f4:	201d0314 	.word	0x201d0314
 80136f8:	14          	.byte	0x14
 80136f9:	00          	.byte	0x00
 80136fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80136fe:	05e9      	lsls	r1, r5, #23
 8013700:	bf48      	it	mi
 8013702:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013706:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801370a:	0d1b      	lsrs	r3, r3, #20
 801370c:	051b      	lsls	r3, r3, #20
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1b9      	bne.n	8013686 <_strtod_l+0x76>
 8013712:	f7fe faf7 	bl	8011d04 <__errno>
 8013716:	2322      	movs	r3, #34	; 0x22
 8013718:	6003      	str	r3, [r0, #0]
 801371a:	e7b4      	b.n	8013686 <_strtod_l+0x76>
 801371c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8013720:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013724:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013728:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801372c:	e7e7      	b.n	80136fe <_strtod_l+0xee>
 801372e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80138a8 <_strtod_l+0x298>
 8013732:	e7e4      	b.n	80136fe <_strtod_l+0xee>
 8013734:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013738:	f04f 38ff 	mov.w	r8, #4294967295
 801373c:	e7df      	b.n	80136fe <_strtod_l+0xee>
 801373e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013740:	1c5a      	adds	r2, r3, #1
 8013742:	9215      	str	r2, [sp, #84]	; 0x54
 8013744:	785b      	ldrb	r3, [r3, #1]
 8013746:	2b30      	cmp	r3, #48	; 0x30
 8013748:	d0f9      	beq.n	801373e <_strtod_l+0x12e>
 801374a:	2b00      	cmp	r3, #0
 801374c:	d09b      	beq.n	8013686 <_strtod_l+0x76>
 801374e:	2301      	movs	r3, #1
 8013750:	f04f 0a00 	mov.w	sl, #0
 8013754:	9304      	str	r3, [sp, #16]
 8013756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013758:	930b      	str	r3, [sp, #44]	; 0x2c
 801375a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801375e:	46d3      	mov	fp, sl
 8013760:	220a      	movs	r2, #10
 8013762:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013764:	7806      	ldrb	r6, [r0, #0]
 8013766:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801376a:	b2d9      	uxtb	r1, r3
 801376c:	2909      	cmp	r1, #9
 801376e:	d926      	bls.n	80137be <_strtod_l+0x1ae>
 8013770:	494c      	ldr	r1, [pc, #304]	; (80138a4 <_strtod_l+0x294>)
 8013772:	2201      	movs	r2, #1
 8013774:	f000 ffcc 	bl	8014710 <strncmp>
 8013778:	2800      	cmp	r0, #0
 801377a:	d030      	beq.n	80137de <_strtod_l+0x1ce>
 801377c:	2000      	movs	r0, #0
 801377e:	4632      	mov	r2, r6
 8013780:	9005      	str	r0, [sp, #20]
 8013782:	465e      	mov	r6, fp
 8013784:	4603      	mov	r3, r0
 8013786:	2a65      	cmp	r2, #101	; 0x65
 8013788:	d001      	beq.n	801378e <_strtod_l+0x17e>
 801378a:	2a45      	cmp	r2, #69	; 0x45
 801378c:	d113      	bne.n	80137b6 <_strtod_l+0x1a6>
 801378e:	b91e      	cbnz	r6, 8013798 <_strtod_l+0x188>
 8013790:	9a04      	ldr	r2, [sp, #16]
 8013792:	4302      	orrs	r2, r0
 8013794:	d094      	beq.n	80136c0 <_strtod_l+0xb0>
 8013796:	2600      	movs	r6, #0
 8013798:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801379a:	1c6a      	adds	r2, r5, #1
 801379c:	9215      	str	r2, [sp, #84]	; 0x54
 801379e:	786a      	ldrb	r2, [r5, #1]
 80137a0:	2a2b      	cmp	r2, #43	; 0x2b
 80137a2:	d074      	beq.n	801388e <_strtod_l+0x27e>
 80137a4:	2a2d      	cmp	r2, #45	; 0x2d
 80137a6:	d078      	beq.n	801389a <_strtod_l+0x28a>
 80137a8:	f04f 0c00 	mov.w	ip, #0
 80137ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80137b0:	2909      	cmp	r1, #9
 80137b2:	d97f      	bls.n	80138b4 <_strtod_l+0x2a4>
 80137b4:	9515      	str	r5, [sp, #84]	; 0x54
 80137b6:	2700      	movs	r7, #0
 80137b8:	e09e      	b.n	80138f8 <_strtod_l+0x2e8>
 80137ba:	2300      	movs	r3, #0
 80137bc:	e7c8      	b.n	8013750 <_strtod_l+0x140>
 80137be:	f1bb 0f08 	cmp.w	fp, #8
 80137c2:	bfd8      	it	le
 80137c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80137c6:	f100 0001 	add.w	r0, r0, #1
 80137ca:	bfda      	itte	le
 80137cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80137d0:	9309      	strle	r3, [sp, #36]	; 0x24
 80137d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80137d6:	f10b 0b01 	add.w	fp, fp, #1
 80137da:	9015      	str	r0, [sp, #84]	; 0x54
 80137dc:	e7c1      	b.n	8013762 <_strtod_l+0x152>
 80137de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137e0:	1c5a      	adds	r2, r3, #1
 80137e2:	9215      	str	r2, [sp, #84]	; 0x54
 80137e4:	785a      	ldrb	r2, [r3, #1]
 80137e6:	f1bb 0f00 	cmp.w	fp, #0
 80137ea:	d037      	beq.n	801385c <_strtod_l+0x24c>
 80137ec:	9005      	str	r0, [sp, #20]
 80137ee:	465e      	mov	r6, fp
 80137f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80137f4:	2b09      	cmp	r3, #9
 80137f6:	d912      	bls.n	801381e <_strtod_l+0x20e>
 80137f8:	2301      	movs	r3, #1
 80137fa:	e7c4      	b.n	8013786 <_strtod_l+0x176>
 80137fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137fe:	1c5a      	adds	r2, r3, #1
 8013800:	9215      	str	r2, [sp, #84]	; 0x54
 8013802:	785a      	ldrb	r2, [r3, #1]
 8013804:	3001      	adds	r0, #1
 8013806:	2a30      	cmp	r2, #48	; 0x30
 8013808:	d0f8      	beq.n	80137fc <_strtod_l+0x1ec>
 801380a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801380e:	2b08      	cmp	r3, #8
 8013810:	f200 84c1 	bhi.w	8014196 <_strtod_l+0xb86>
 8013814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013816:	9005      	str	r0, [sp, #20]
 8013818:	2000      	movs	r0, #0
 801381a:	930b      	str	r3, [sp, #44]	; 0x2c
 801381c:	4606      	mov	r6, r0
 801381e:	3a30      	subs	r2, #48	; 0x30
 8013820:	f100 0301 	add.w	r3, r0, #1
 8013824:	d014      	beq.n	8013850 <_strtod_l+0x240>
 8013826:	9905      	ldr	r1, [sp, #20]
 8013828:	4419      	add	r1, r3
 801382a:	9105      	str	r1, [sp, #20]
 801382c:	4633      	mov	r3, r6
 801382e:	eb00 0c06 	add.w	ip, r0, r6
 8013832:	210a      	movs	r1, #10
 8013834:	4563      	cmp	r3, ip
 8013836:	d113      	bne.n	8013860 <_strtod_l+0x250>
 8013838:	1833      	adds	r3, r6, r0
 801383a:	2b08      	cmp	r3, #8
 801383c:	f106 0601 	add.w	r6, r6, #1
 8013840:	4406      	add	r6, r0
 8013842:	dc1a      	bgt.n	801387a <_strtod_l+0x26a>
 8013844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013846:	230a      	movs	r3, #10
 8013848:	fb03 2301 	mla	r3, r3, r1, r2
 801384c:	9309      	str	r3, [sp, #36]	; 0x24
 801384e:	2300      	movs	r3, #0
 8013850:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013852:	1c51      	adds	r1, r2, #1
 8013854:	9115      	str	r1, [sp, #84]	; 0x54
 8013856:	7852      	ldrb	r2, [r2, #1]
 8013858:	4618      	mov	r0, r3
 801385a:	e7c9      	b.n	80137f0 <_strtod_l+0x1e0>
 801385c:	4658      	mov	r0, fp
 801385e:	e7d2      	b.n	8013806 <_strtod_l+0x1f6>
 8013860:	2b08      	cmp	r3, #8
 8013862:	f103 0301 	add.w	r3, r3, #1
 8013866:	dc03      	bgt.n	8013870 <_strtod_l+0x260>
 8013868:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801386a:	434f      	muls	r7, r1
 801386c:	9709      	str	r7, [sp, #36]	; 0x24
 801386e:	e7e1      	b.n	8013834 <_strtod_l+0x224>
 8013870:	2b10      	cmp	r3, #16
 8013872:	bfd8      	it	le
 8013874:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013878:	e7dc      	b.n	8013834 <_strtod_l+0x224>
 801387a:	2e10      	cmp	r6, #16
 801387c:	bfdc      	itt	le
 801387e:	230a      	movle	r3, #10
 8013880:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013884:	e7e3      	b.n	801384e <_strtod_l+0x23e>
 8013886:	2300      	movs	r3, #0
 8013888:	9305      	str	r3, [sp, #20]
 801388a:	2301      	movs	r3, #1
 801388c:	e780      	b.n	8013790 <_strtod_l+0x180>
 801388e:	f04f 0c00 	mov.w	ip, #0
 8013892:	1caa      	adds	r2, r5, #2
 8013894:	9215      	str	r2, [sp, #84]	; 0x54
 8013896:	78aa      	ldrb	r2, [r5, #2]
 8013898:	e788      	b.n	80137ac <_strtod_l+0x19c>
 801389a:	f04f 0c01 	mov.w	ip, #1
 801389e:	e7f8      	b.n	8013892 <_strtod_l+0x282>
 80138a0:	08015960 	.word	0x08015960
 80138a4:	0801595c 	.word	0x0801595c
 80138a8:	7ff00000 	.word	0x7ff00000
 80138ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138ae:	1c51      	adds	r1, r2, #1
 80138b0:	9115      	str	r1, [sp, #84]	; 0x54
 80138b2:	7852      	ldrb	r2, [r2, #1]
 80138b4:	2a30      	cmp	r2, #48	; 0x30
 80138b6:	d0f9      	beq.n	80138ac <_strtod_l+0x29c>
 80138b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80138bc:	2908      	cmp	r1, #8
 80138be:	f63f af7a 	bhi.w	80137b6 <_strtod_l+0x1a6>
 80138c2:	3a30      	subs	r2, #48	; 0x30
 80138c4:	9208      	str	r2, [sp, #32]
 80138c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138c8:	920c      	str	r2, [sp, #48]	; 0x30
 80138ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138cc:	1c57      	adds	r7, r2, #1
 80138ce:	9715      	str	r7, [sp, #84]	; 0x54
 80138d0:	7852      	ldrb	r2, [r2, #1]
 80138d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80138d6:	f1be 0f09 	cmp.w	lr, #9
 80138da:	d938      	bls.n	801394e <_strtod_l+0x33e>
 80138dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80138de:	1a7f      	subs	r7, r7, r1
 80138e0:	2f08      	cmp	r7, #8
 80138e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80138e6:	dc03      	bgt.n	80138f0 <_strtod_l+0x2e0>
 80138e8:	9908      	ldr	r1, [sp, #32]
 80138ea:	428f      	cmp	r7, r1
 80138ec:	bfa8      	it	ge
 80138ee:	460f      	movge	r7, r1
 80138f0:	f1bc 0f00 	cmp.w	ip, #0
 80138f4:	d000      	beq.n	80138f8 <_strtod_l+0x2e8>
 80138f6:	427f      	negs	r7, r7
 80138f8:	2e00      	cmp	r6, #0
 80138fa:	d14f      	bne.n	801399c <_strtod_l+0x38c>
 80138fc:	9904      	ldr	r1, [sp, #16]
 80138fe:	4301      	orrs	r1, r0
 8013900:	f47f aec1 	bne.w	8013686 <_strtod_l+0x76>
 8013904:	2b00      	cmp	r3, #0
 8013906:	f47f aedb 	bne.w	80136c0 <_strtod_l+0xb0>
 801390a:	2a69      	cmp	r2, #105	; 0x69
 801390c:	d029      	beq.n	8013962 <_strtod_l+0x352>
 801390e:	dc26      	bgt.n	801395e <_strtod_l+0x34e>
 8013910:	2a49      	cmp	r2, #73	; 0x49
 8013912:	d026      	beq.n	8013962 <_strtod_l+0x352>
 8013914:	2a4e      	cmp	r2, #78	; 0x4e
 8013916:	f47f aed3 	bne.w	80136c0 <_strtod_l+0xb0>
 801391a:	499b      	ldr	r1, [pc, #620]	; (8013b88 <_strtod_l+0x578>)
 801391c:	a815      	add	r0, sp, #84	; 0x54
 801391e:	f001 f9ff 	bl	8014d20 <__match>
 8013922:	2800      	cmp	r0, #0
 8013924:	f43f aecc 	beq.w	80136c0 <_strtod_l+0xb0>
 8013928:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801392a:	781b      	ldrb	r3, [r3, #0]
 801392c:	2b28      	cmp	r3, #40	; 0x28
 801392e:	d12f      	bne.n	8013990 <_strtod_l+0x380>
 8013930:	4996      	ldr	r1, [pc, #600]	; (8013b8c <_strtod_l+0x57c>)
 8013932:	aa18      	add	r2, sp, #96	; 0x60
 8013934:	a815      	add	r0, sp, #84	; 0x54
 8013936:	f001 fa07 	bl	8014d48 <__hexnan>
 801393a:	2805      	cmp	r0, #5
 801393c:	d128      	bne.n	8013990 <_strtod_l+0x380>
 801393e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013940:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013944:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013948:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801394c:	e69b      	b.n	8013686 <_strtod_l+0x76>
 801394e:	9f08      	ldr	r7, [sp, #32]
 8013950:	210a      	movs	r1, #10
 8013952:	fb01 2107 	mla	r1, r1, r7, r2
 8013956:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801395a:	9208      	str	r2, [sp, #32]
 801395c:	e7b5      	b.n	80138ca <_strtod_l+0x2ba>
 801395e:	2a6e      	cmp	r2, #110	; 0x6e
 8013960:	e7d9      	b.n	8013916 <_strtod_l+0x306>
 8013962:	498b      	ldr	r1, [pc, #556]	; (8013b90 <_strtod_l+0x580>)
 8013964:	a815      	add	r0, sp, #84	; 0x54
 8013966:	f001 f9db 	bl	8014d20 <__match>
 801396a:	2800      	cmp	r0, #0
 801396c:	f43f aea8 	beq.w	80136c0 <_strtod_l+0xb0>
 8013970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013972:	4988      	ldr	r1, [pc, #544]	; (8013b94 <_strtod_l+0x584>)
 8013974:	3b01      	subs	r3, #1
 8013976:	a815      	add	r0, sp, #84	; 0x54
 8013978:	9315      	str	r3, [sp, #84]	; 0x54
 801397a:	f001 f9d1 	bl	8014d20 <__match>
 801397e:	b910      	cbnz	r0, 8013986 <_strtod_l+0x376>
 8013980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013982:	3301      	adds	r3, #1
 8013984:	9315      	str	r3, [sp, #84]	; 0x54
 8013986:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013ba4 <_strtod_l+0x594>
 801398a:	f04f 0800 	mov.w	r8, #0
 801398e:	e67a      	b.n	8013686 <_strtod_l+0x76>
 8013990:	4881      	ldr	r0, [pc, #516]	; (8013b98 <_strtod_l+0x588>)
 8013992:	f000 fee1 	bl	8014758 <nan>
 8013996:	ec59 8b10 	vmov	r8, r9, d0
 801399a:	e674      	b.n	8013686 <_strtod_l+0x76>
 801399c:	9b05      	ldr	r3, [sp, #20]
 801399e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139a0:	1afb      	subs	r3, r7, r3
 80139a2:	f1bb 0f00 	cmp.w	fp, #0
 80139a6:	bf08      	it	eq
 80139a8:	46b3      	moveq	fp, r6
 80139aa:	2e10      	cmp	r6, #16
 80139ac:	9308      	str	r3, [sp, #32]
 80139ae:	4635      	mov	r5, r6
 80139b0:	bfa8      	it	ge
 80139b2:	2510      	movge	r5, #16
 80139b4:	f7ec fda6 	bl	8000504 <__aeabi_ui2d>
 80139b8:	2e09      	cmp	r6, #9
 80139ba:	4680      	mov	r8, r0
 80139bc:	4689      	mov	r9, r1
 80139be:	dd13      	ble.n	80139e8 <_strtod_l+0x3d8>
 80139c0:	4b76      	ldr	r3, [pc, #472]	; (8013b9c <_strtod_l+0x58c>)
 80139c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80139c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80139ca:	f7ec fe15 	bl	80005f8 <__aeabi_dmul>
 80139ce:	4680      	mov	r8, r0
 80139d0:	4650      	mov	r0, sl
 80139d2:	4689      	mov	r9, r1
 80139d4:	f7ec fd96 	bl	8000504 <__aeabi_ui2d>
 80139d8:	4602      	mov	r2, r0
 80139da:	460b      	mov	r3, r1
 80139dc:	4640      	mov	r0, r8
 80139de:	4649      	mov	r1, r9
 80139e0:	f7ec fc54 	bl	800028c <__adddf3>
 80139e4:	4680      	mov	r8, r0
 80139e6:	4689      	mov	r9, r1
 80139e8:	2e0f      	cmp	r6, #15
 80139ea:	dc38      	bgt.n	8013a5e <_strtod_l+0x44e>
 80139ec:	9b08      	ldr	r3, [sp, #32]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f43f ae49 	beq.w	8013686 <_strtod_l+0x76>
 80139f4:	dd24      	ble.n	8013a40 <_strtod_l+0x430>
 80139f6:	2b16      	cmp	r3, #22
 80139f8:	dc0b      	bgt.n	8013a12 <_strtod_l+0x402>
 80139fa:	4968      	ldr	r1, [pc, #416]	; (8013b9c <_strtod_l+0x58c>)
 80139fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a04:	4642      	mov	r2, r8
 8013a06:	464b      	mov	r3, r9
 8013a08:	f7ec fdf6 	bl	80005f8 <__aeabi_dmul>
 8013a0c:	4680      	mov	r8, r0
 8013a0e:	4689      	mov	r9, r1
 8013a10:	e639      	b.n	8013686 <_strtod_l+0x76>
 8013a12:	9a08      	ldr	r2, [sp, #32]
 8013a14:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013a18:	4293      	cmp	r3, r2
 8013a1a:	db20      	blt.n	8013a5e <_strtod_l+0x44e>
 8013a1c:	4c5f      	ldr	r4, [pc, #380]	; (8013b9c <_strtod_l+0x58c>)
 8013a1e:	f1c6 060f 	rsb	r6, r6, #15
 8013a22:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8013a26:	4642      	mov	r2, r8
 8013a28:	464b      	mov	r3, r9
 8013a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a2e:	f7ec fde3 	bl	80005f8 <__aeabi_dmul>
 8013a32:	9b08      	ldr	r3, [sp, #32]
 8013a34:	1b9e      	subs	r6, r3, r6
 8013a36:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013a3a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013a3e:	e7e3      	b.n	8013a08 <_strtod_l+0x3f8>
 8013a40:	9b08      	ldr	r3, [sp, #32]
 8013a42:	3316      	adds	r3, #22
 8013a44:	db0b      	blt.n	8013a5e <_strtod_l+0x44e>
 8013a46:	9b05      	ldr	r3, [sp, #20]
 8013a48:	1bdf      	subs	r7, r3, r7
 8013a4a:	4b54      	ldr	r3, [pc, #336]	; (8013b9c <_strtod_l+0x58c>)
 8013a4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a54:	4640      	mov	r0, r8
 8013a56:	4649      	mov	r1, r9
 8013a58:	f7ec fef8 	bl	800084c <__aeabi_ddiv>
 8013a5c:	e7d6      	b.n	8013a0c <_strtod_l+0x3fc>
 8013a5e:	9b08      	ldr	r3, [sp, #32]
 8013a60:	1b75      	subs	r5, r6, r5
 8013a62:	441d      	add	r5, r3
 8013a64:	2d00      	cmp	r5, #0
 8013a66:	dd70      	ble.n	8013b4a <_strtod_l+0x53a>
 8013a68:	f015 030f 	ands.w	r3, r5, #15
 8013a6c:	d00a      	beq.n	8013a84 <_strtod_l+0x474>
 8013a6e:	494b      	ldr	r1, [pc, #300]	; (8013b9c <_strtod_l+0x58c>)
 8013a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a74:	4642      	mov	r2, r8
 8013a76:	464b      	mov	r3, r9
 8013a78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a7c:	f7ec fdbc 	bl	80005f8 <__aeabi_dmul>
 8013a80:	4680      	mov	r8, r0
 8013a82:	4689      	mov	r9, r1
 8013a84:	f035 050f 	bics.w	r5, r5, #15
 8013a88:	d04d      	beq.n	8013b26 <_strtod_l+0x516>
 8013a8a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013a8e:	dd22      	ble.n	8013ad6 <_strtod_l+0x4c6>
 8013a90:	2500      	movs	r5, #0
 8013a92:	46ab      	mov	fp, r5
 8013a94:	9509      	str	r5, [sp, #36]	; 0x24
 8013a96:	9505      	str	r5, [sp, #20]
 8013a98:	2322      	movs	r3, #34	; 0x22
 8013a9a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013ba4 <_strtod_l+0x594>
 8013a9e:	6023      	str	r3, [r4, #0]
 8013aa0:	f04f 0800 	mov.w	r8, #0
 8013aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f43f aded 	beq.w	8013686 <_strtod_l+0x76>
 8013aac:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013aae:	4620      	mov	r0, r4
 8013ab0:	f7ff f924 	bl	8012cfc <_Bfree>
 8013ab4:	9905      	ldr	r1, [sp, #20]
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f7ff f920 	bl	8012cfc <_Bfree>
 8013abc:	4659      	mov	r1, fp
 8013abe:	4620      	mov	r0, r4
 8013ac0:	f7ff f91c 	bl	8012cfc <_Bfree>
 8013ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f7ff f918 	bl	8012cfc <_Bfree>
 8013acc:	4629      	mov	r1, r5
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f7ff f914 	bl	8012cfc <_Bfree>
 8013ad4:	e5d7      	b.n	8013686 <_strtod_l+0x76>
 8013ad6:	4b32      	ldr	r3, [pc, #200]	; (8013ba0 <_strtod_l+0x590>)
 8013ad8:	9304      	str	r3, [sp, #16]
 8013ada:	2300      	movs	r3, #0
 8013adc:	112d      	asrs	r5, r5, #4
 8013ade:	4640      	mov	r0, r8
 8013ae0:	4649      	mov	r1, r9
 8013ae2:	469a      	mov	sl, r3
 8013ae4:	2d01      	cmp	r5, #1
 8013ae6:	dc21      	bgt.n	8013b2c <_strtod_l+0x51c>
 8013ae8:	b10b      	cbz	r3, 8013aee <_strtod_l+0x4de>
 8013aea:	4680      	mov	r8, r0
 8013aec:	4689      	mov	r9, r1
 8013aee:	492c      	ldr	r1, [pc, #176]	; (8013ba0 <_strtod_l+0x590>)
 8013af0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013af4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013af8:	4642      	mov	r2, r8
 8013afa:	464b      	mov	r3, r9
 8013afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b00:	f7ec fd7a 	bl	80005f8 <__aeabi_dmul>
 8013b04:	4b27      	ldr	r3, [pc, #156]	; (8013ba4 <_strtod_l+0x594>)
 8013b06:	460a      	mov	r2, r1
 8013b08:	400b      	ands	r3, r1
 8013b0a:	4927      	ldr	r1, [pc, #156]	; (8013ba8 <_strtod_l+0x598>)
 8013b0c:	428b      	cmp	r3, r1
 8013b0e:	4680      	mov	r8, r0
 8013b10:	d8be      	bhi.n	8013a90 <_strtod_l+0x480>
 8013b12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013b16:	428b      	cmp	r3, r1
 8013b18:	bf86      	itte	hi
 8013b1a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013bac <_strtod_l+0x59c>
 8013b1e:	f04f 38ff 	movhi.w	r8, #4294967295
 8013b22:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013b26:	2300      	movs	r3, #0
 8013b28:	9304      	str	r3, [sp, #16]
 8013b2a:	e07b      	b.n	8013c24 <_strtod_l+0x614>
 8013b2c:	07ea      	lsls	r2, r5, #31
 8013b2e:	d505      	bpl.n	8013b3c <_strtod_l+0x52c>
 8013b30:	9b04      	ldr	r3, [sp, #16]
 8013b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b36:	f7ec fd5f 	bl	80005f8 <__aeabi_dmul>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	9a04      	ldr	r2, [sp, #16]
 8013b3e:	3208      	adds	r2, #8
 8013b40:	f10a 0a01 	add.w	sl, sl, #1
 8013b44:	106d      	asrs	r5, r5, #1
 8013b46:	9204      	str	r2, [sp, #16]
 8013b48:	e7cc      	b.n	8013ae4 <_strtod_l+0x4d4>
 8013b4a:	d0ec      	beq.n	8013b26 <_strtod_l+0x516>
 8013b4c:	426d      	negs	r5, r5
 8013b4e:	f015 020f 	ands.w	r2, r5, #15
 8013b52:	d00a      	beq.n	8013b6a <_strtod_l+0x55a>
 8013b54:	4b11      	ldr	r3, [pc, #68]	; (8013b9c <_strtod_l+0x58c>)
 8013b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b5a:	4640      	mov	r0, r8
 8013b5c:	4649      	mov	r1, r9
 8013b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b62:	f7ec fe73 	bl	800084c <__aeabi_ddiv>
 8013b66:	4680      	mov	r8, r0
 8013b68:	4689      	mov	r9, r1
 8013b6a:	112d      	asrs	r5, r5, #4
 8013b6c:	d0db      	beq.n	8013b26 <_strtod_l+0x516>
 8013b6e:	2d1f      	cmp	r5, #31
 8013b70:	dd1e      	ble.n	8013bb0 <_strtod_l+0x5a0>
 8013b72:	2500      	movs	r5, #0
 8013b74:	46ab      	mov	fp, r5
 8013b76:	9509      	str	r5, [sp, #36]	; 0x24
 8013b78:	9505      	str	r5, [sp, #20]
 8013b7a:	2322      	movs	r3, #34	; 0x22
 8013b7c:	f04f 0800 	mov.w	r8, #0
 8013b80:	f04f 0900 	mov.w	r9, #0
 8013b84:	6023      	str	r3, [r4, #0]
 8013b86:	e78d      	b.n	8013aa4 <_strtod_l+0x494>
 8013b88:	0801574b 	.word	0x0801574b
 8013b8c:	08015974 	.word	0x08015974
 8013b90:	08015743 	.word	0x08015743
 8013b94:	0801577a 	.word	0x0801577a
 8013b98:	08015b05 	.word	0x08015b05
 8013b9c:	08015888 	.word	0x08015888
 8013ba0:	08015860 	.word	0x08015860
 8013ba4:	7ff00000 	.word	0x7ff00000
 8013ba8:	7ca00000 	.word	0x7ca00000
 8013bac:	7fefffff 	.word	0x7fefffff
 8013bb0:	f015 0310 	ands.w	r3, r5, #16
 8013bb4:	bf18      	it	ne
 8013bb6:	236a      	movne	r3, #106	; 0x6a
 8013bb8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013f5c <_strtod_l+0x94c>
 8013bbc:	9304      	str	r3, [sp, #16]
 8013bbe:	4640      	mov	r0, r8
 8013bc0:	4649      	mov	r1, r9
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	07ea      	lsls	r2, r5, #31
 8013bc6:	d504      	bpl.n	8013bd2 <_strtod_l+0x5c2>
 8013bc8:	e9da 2300 	ldrd	r2, r3, [sl]
 8013bcc:	f7ec fd14 	bl	80005f8 <__aeabi_dmul>
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	106d      	asrs	r5, r5, #1
 8013bd4:	f10a 0a08 	add.w	sl, sl, #8
 8013bd8:	d1f4      	bne.n	8013bc4 <_strtod_l+0x5b4>
 8013bda:	b10b      	cbz	r3, 8013be0 <_strtod_l+0x5d0>
 8013bdc:	4680      	mov	r8, r0
 8013bde:	4689      	mov	r9, r1
 8013be0:	9b04      	ldr	r3, [sp, #16]
 8013be2:	b1bb      	cbz	r3, 8013c14 <_strtod_l+0x604>
 8013be4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013be8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	4649      	mov	r1, r9
 8013bf0:	dd10      	ble.n	8013c14 <_strtod_l+0x604>
 8013bf2:	2b1f      	cmp	r3, #31
 8013bf4:	f340 811e 	ble.w	8013e34 <_strtod_l+0x824>
 8013bf8:	2b34      	cmp	r3, #52	; 0x34
 8013bfa:	bfde      	ittt	le
 8013bfc:	f04f 33ff 	movle.w	r3, #4294967295
 8013c00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013c04:	4093      	lslle	r3, r2
 8013c06:	f04f 0800 	mov.w	r8, #0
 8013c0a:	bfcc      	ite	gt
 8013c0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013c10:	ea03 0901 	andle.w	r9, r3, r1
 8013c14:	2200      	movs	r2, #0
 8013c16:	2300      	movs	r3, #0
 8013c18:	4640      	mov	r0, r8
 8013c1a:	4649      	mov	r1, r9
 8013c1c:	f7ec ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c20:	2800      	cmp	r0, #0
 8013c22:	d1a6      	bne.n	8013b72 <_strtod_l+0x562>
 8013c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c2a:	4633      	mov	r3, r6
 8013c2c:	465a      	mov	r2, fp
 8013c2e:	4620      	mov	r0, r4
 8013c30:	f7ff f8cc 	bl	8012dcc <__s2b>
 8013c34:	9009      	str	r0, [sp, #36]	; 0x24
 8013c36:	2800      	cmp	r0, #0
 8013c38:	f43f af2a 	beq.w	8013a90 <_strtod_l+0x480>
 8013c3c:	9a08      	ldr	r2, [sp, #32]
 8013c3e:	9b05      	ldr	r3, [sp, #20]
 8013c40:	2a00      	cmp	r2, #0
 8013c42:	eba3 0307 	sub.w	r3, r3, r7
 8013c46:	bfa8      	it	ge
 8013c48:	2300      	movge	r3, #0
 8013c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8013c4c:	2500      	movs	r5, #0
 8013c4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013c52:	9312      	str	r3, [sp, #72]	; 0x48
 8013c54:	46ab      	mov	fp, r5
 8013c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c58:	4620      	mov	r0, r4
 8013c5a:	6859      	ldr	r1, [r3, #4]
 8013c5c:	f7ff f80e 	bl	8012c7c <_Balloc>
 8013c60:	9005      	str	r0, [sp, #20]
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f43f af18 	beq.w	8013a98 <_strtod_l+0x488>
 8013c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c6a:	691a      	ldr	r2, [r3, #16]
 8013c6c:	3202      	adds	r2, #2
 8013c6e:	f103 010c 	add.w	r1, r3, #12
 8013c72:	0092      	lsls	r2, r2, #2
 8013c74:	300c      	adds	r0, #12
 8013c76:	f7fe f871 	bl	8011d5c <memcpy>
 8013c7a:	ec49 8b10 	vmov	d0, r8, r9
 8013c7e:	aa18      	add	r2, sp, #96	; 0x60
 8013c80:	a917      	add	r1, sp, #92	; 0x5c
 8013c82:	4620      	mov	r0, r4
 8013c84:	f7ff fbd6 	bl	8013434 <__d2b>
 8013c88:	ec49 8b18 	vmov	d8, r8, r9
 8013c8c:	9016      	str	r0, [sp, #88]	; 0x58
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f43f af02 	beq.w	8013a98 <_strtod_l+0x488>
 8013c94:	2101      	movs	r1, #1
 8013c96:	4620      	mov	r0, r4
 8013c98:	f7ff f930 	bl	8012efc <__i2b>
 8013c9c:	4683      	mov	fp, r0
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	f43f aefa 	beq.w	8013a98 <_strtod_l+0x488>
 8013ca4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013ca6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013ca8:	2e00      	cmp	r6, #0
 8013caa:	bfab      	itete	ge
 8013cac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013cae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013cb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013cb2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013cb6:	bfac      	ite	ge
 8013cb8:	eb06 0a03 	addge.w	sl, r6, r3
 8013cbc:	1b9f      	sublt	r7, r3, r6
 8013cbe:	9b04      	ldr	r3, [sp, #16]
 8013cc0:	1af6      	subs	r6, r6, r3
 8013cc2:	4416      	add	r6, r2
 8013cc4:	4ba0      	ldr	r3, [pc, #640]	; (8013f48 <_strtod_l+0x938>)
 8013cc6:	3e01      	subs	r6, #1
 8013cc8:	429e      	cmp	r6, r3
 8013cca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013cce:	f280 80c4 	bge.w	8013e5a <_strtod_l+0x84a>
 8013cd2:	1b9b      	subs	r3, r3, r6
 8013cd4:	2b1f      	cmp	r3, #31
 8013cd6:	eba2 0203 	sub.w	r2, r2, r3
 8013cda:	f04f 0101 	mov.w	r1, #1
 8013cde:	f300 80b0 	bgt.w	8013e42 <_strtod_l+0x832>
 8013ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8013ce6:	930e      	str	r3, [sp, #56]	; 0x38
 8013ce8:	2300      	movs	r3, #0
 8013cea:	930d      	str	r3, [sp, #52]	; 0x34
 8013cec:	eb0a 0602 	add.w	r6, sl, r2
 8013cf0:	9b04      	ldr	r3, [sp, #16]
 8013cf2:	45b2      	cmp	sl, r6
 8013cf4:	4417      	add	r7, r2
 8013cf6:	441f      	add	r7, r3
 8013cf8:	4653      	mov	r3, sl
 8013cfa:	bfa8      	it	ge
 8013cfc:	4633      	movge	r3, r6
 8013cfe:	42bb      	cmp	r3, r7
 8013d00:	bfa8      	it	ge
 8013d02:	463b      	movge	r3, r7
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	bfc2      	ittt	gt
 8013d08:	1af6      	subgt	r6, r6, r3
 8013d0a:	1aff      	subgt	r7, r7, r3
 8013d0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	dd17      	ble.n	8013d46 <_strtod_l+0x736>
 8013d16:	4659      	mov	r1, fp
 8013d18:	461a      	mov	r2, r3
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	f7ff f9ae 	bl	801307c <__pow5mult>
 8013d20:	4683      	mov	fp, r0
 8013d22:	2800      	cmp	r0, #0
 8013d24:	f43f aeb8 	beq.w	8013a98 <_strtod_l+0x488>
 8013d28:	4601      	mov	r1, r0
 8013d2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	f7ff f8fb 	bl	8012f28 <__multiply>
 8013d32:	900b      	str	r0, [sp, #44]	; 0x2c
 8013d34:	2800      	cmp	r0, #0
 8013d36:	f43f aeaf 	beq.w	8013a98 <_strtod_l+0x488>
 8013d3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f7fe ffdd 	bl	8012cfc <_Bfree>
 8013d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d44:	9316      	str	r3, [sp, #88]	; 0x58
 8013d46:	2e00      	cmp	r6, #0
 8013d48:	f300 808c 	bgt.w	8013e64 <_strtod_l+0x854>
 8013d4c:	9b08      	ldr	r3, [sp, #32]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	dd08      	ble.n	8013d64 <_strtod_l+0x754>
 8013d52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d54:	9905      	ldr	r1, [sp, #20]
 8013d56:	4620      	mov	r0, r4
 8013d58:	f7ff f990 	bl	801307c <__pow5mult>
 8013d5c:	9005      	str	r0, [sp, #20]
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	f43f ae9a 	beq.w	8013a98 <_strtod_l+0x488>
 8013d64:	2f00      	cmp	r7, #0
 8013d66:	dd08      	ble.n	8013d7a <_strtod_l+0x76a>
 8013d68:	9905      	ldr	r1, [sp, #20]
 8013d6a:	463a      	mov	r2, r7
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f7ff f9df 	bl	8013130 <__lshift>
 8013d72:	9005      	str	r0, [sp, #20]
 8013d74:	2800      	cmp	r0, #0
 8013d76:	f43f ae8f 	beq.w	8013a98 <_strtod_l+0x488>
 8013d7a:	f1ba 0f00 	cmp.w	sl, #0
 8013d7e:	dd08      	ble.n	8013d92 <_strtod_l+0x782>
 8013d80:	4659      	mov	r1, fp
 8013d82:	4652      	mov	r2, sl
 8013d84:	4620      	mov	r0, r4
 8013d86:	f7ff f9d3 	bl	8013130 <__lshift>
 8013d8a:	4683      	mov	fp, r0
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	f43f ae83 	beq.w	8013a98 <_strtod_l+0x488>
 8013d92:	9a05      	ldr	r2, [sp, #20]
 8013d94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013d96:	4620      	mov	r0, r4
 8013d98:	f7ff fa52 	bl	8013240 <__mdiff>
 8013d9c:	4605      	mov	r5, r0
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	f43f ae7a 	beq.w	8013a98 <_strtod_l+0x488>
 8013da4:	68c3      	ldr	r3, [r0, #12]
 8013da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013da8:	2300      	movs	r3, #0
 8013daa:	60c3      	str	r3, [r0, #12]
 8013dac:	4659      	mov	r1, fp
 8013dae:	f7ff fa2b 	bl	8013208 <__mcmp>
 8013db2:	2800      	cmp	r0, #0
 8013db4:	da60      	bge.n	8013e78 <_strtod_l+0x868>
 8013db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013db8:	ea53 0308 	orrs.w	r3, r3, r8
 8013dbc:	f040 8084 	bne.w	8013ec8 <_strtod_l+0x8b8>
 8013dc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d17f      	bne.n	8013ec8 <_strtod_l+0x8b8>
 8013dc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013dcc:	0d1b      	lsrs	r3, r3, #20
 8013dce:	051b      	lsls	r3, r3, #20
 8013dd0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013dd4:	d978      	bls.n	8013ec8 <_strtod_l+0x8b8>
 8013dd6:	696b      	ldr	r3, [r5, #20]
 8013dd8:	b913      	cbnz	r3, 8013de0 <_strtod_l+0x7d0>
 8013dda:	692b      	ldr	r3, [r5, #16]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	dd73      	ble.n	8013ec8 <_strtod_l+0x8b8>
 8013de0:	4629      	mov	r1, r5
 8013de2:	2201      	movs	r2, #1
 8013de4:	4620      	mov	r0, r4
 8013de6:	f7ff f9a3 	bl	8013130 <__lshift>
 8013dea:	4659      	mov	r1, fp
 8013dec:	4605      	mov	r5, r0
 8013dee:	f7ff fa0b 	bl	8013208 <__mcmp>
 8013df2:	2800      	cmp	r0, #0
 8013df4:	dd68      	ble.n	8013ec8 <_strtod_l+0x8b8>
 8013df6:	9904      	ldr	r1, [sp, #16]
 8013df8:	4a54      	ldr	r2, [pc, #336]	; (8013f4c <_strtod_l+0x93c>)
 8013dfa:	464b      	mov	r3, r9
 8013dfc:	2900      	cmp	r1, #0
 8013dfe:	f000 8084 	beq.w	8013f0a <_strtod_l+0x8fa>
 8013e02:	ea02 0109 	and.w	r1, r2, r9
 8013e06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013e0a:	dc7e      	bgt.n	8013f0a <_strtod_l+0x8fa>
 8013e0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013e10:	f77f aeb3 	ble.w	8013b7a <_strtod_l+0x56a>
 8013e14:	4b4e      	ldr	r3, [pc, #312]	; (8013f50 <_strtod_l+0x940>)
 8013e16:	4640      	mov	r0, r8
 8013e18:	4649      	mov	r1, r9
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	f7ec fbec 	bl	80005f8 <__aeabi_dmul>
 8013e20:	4b4a      	ldr	r3, [pc, #296]	; (8013f4c <_strtod_l+0x93c>)
 8013e22:	400b      	ands	r3, r1
 8013e24:	4680      	mov	r8, r0
 8013e26:	4689      	mov	r9, r1
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f47f ae3f 	bne.w	8013aac <_strtod_l+0x49c>
 8013e2e:	2322      	movs	r3, #34	; 0x22
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	e63b      	b.n	8013aac <_strtod_l+0x49c>
 8013e34:	f04f 32ff 	mov.w	r2, #4294967295
 8013e38:	fa02 f303 	lsl.w	r3, r2, r3
 8013e3c:	ea03 0808 	and.w	r8, r3, r8
 8013e40:	e6e8      	b.n	8013c14 <_strtod_l+0x604>
 8013e42:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013e46:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013e4a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013e4e:	36e2      	adds	r6, #226	; 0xe2
 8013e50:	fa01 f306 	lsl.w	r3, r1, r6
 8013e54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013e58:	e748      	b.n	8013cec <_strtod_l+0x6dc>
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013e62:	e743      	b.n	8013cec <_strtod_l+0x6dc>
 8013e64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013e66:	4632      	mov	r2, r6
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f7ff f961 	bl	8013130 <__lshift>
 8013e6e:	9016      	str	r0, [sp, #88]	; 0x58
 8013e70:	2800      	cmp	r0, #0
 8013e72:	f47f af6b 	bne.w	8013d4c <_strtod_l+0x73c>
 8013e76:	e60f      	b.n	8013a98 <_strtod_l+0x488>
 8013e78:	46ca      	mov	sl, r9
 8013e7a:	d171      	bne.n	8013f60 <_strtod_l+0x950>
 8013e7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e82:	b352      	cbz	r2, 8013eda <_strtod_l+0x8ca>
 8013e84:	4a33      	ldr	r2, [pc, #204]	; (8013f54 <_strtod_l+0x944>)
 8013e86:	4293      	cmp	r3, r2
 8013e88:	d12a      	bne.n	8013ee0 <_strtod_l+0x8d0>
 8013e8a:	9b04      	ldr	r3, [sp, #16]
 8013e8c:	4641      	mov	r1, r8
 8013e8e:	b1fb      	cbz	r3, 8013ed0 <_strtod_l+0x8c0>
 8013e90:	4b2e      	ldr	r3, [pc, #184]	; (8013f4c <_strtod_l+0x93c>)
 8013e92:	ea09 0303 	and.w	r3, r9, r3
 8013e96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e9e:	d81a      	bhi.n	8013ed6 <_strtod_l+0x8c6>
 8013ea0:	0d1b      	lsrs	r3, r3, #20
 8013ea2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8013eaa:	4299      	cmp	r1, r3
 8013eac:	d118      	bne.n	8013ee0 <_strtod_l+0x8d0>
 8013eae:	4b2a      	ldr	r3, [pc, #168]	; (8013f58 <_strtod_l+0x948>)
 8013eb0:	459a      	cmp	sl, r3
 8013eb2:	d102      	bne.n	8013eba <_strtod_l+0x8aa>
 8013eb4:	3101      	adds	r1, #1
 8013eb6:	f43f adef 	beq.w	8013a98 <_strtod_l+0x488>
 8013eba:	4b24      	ldr	r3, [pc, #144]	; (8013f4c <_strtod_l+0x93c>)
 8013ebc:	ea0a 0303 	and.w	r3, sl, r3
 8013ec0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013ec4:	f04f 0800 	mov.w	r8, #0
 8013ec8:	9b04      	ldr	r3, [sp, #16]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d1a2      	bne.n	8013e14 <_strtod_l+0x804>
 8013ece:	e5ed      	b.n	8013aac <_strtod_l+0x49c>
 8013ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ed4:	e7e9      	b.n	8013eaa <_strtod_l+0x89a>
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	e7e7      	b.n	8013eaa <_strtod_l+0x89a>
 8013eda:	ea53 0308 	orrs.w	r3, r3, r8
 8013ede:	d08a      	beq.n	8013df6 <_strtod_l+0x7e6>
 8013ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ee2:	b1e3      	cbz	r3, 8013f1e <_strtod_l+0x90e>
 8013ee4:	ea13 0f0a 	tst.w	r3, sl
 8013ee8:	d0ee      	beq.n	8013ec8 <_strtod_l+0x8b8>
 8013eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013eec:	9a04      	ldr	r2, [sp, #16]
 8013eee:	4640      	mov	r0, r8
 8013ef0:	4649      	mov	r1, r9
 8013ef2:	b1c3      	cbz	r3, 8013f26 <_strtod_l+0x916>
 8013ef4:	f7ff fb6f 	bl	80135d6 <sulp>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	460b      	mov	r3, r1
 8013efc:	ec51 0b18 	vmov	r0, r1, d8
 8013f00:	f7ec f9c4 	bl	800028c <__adddf3>
 8013f04:	4680      	mov	r8, r0
 8013f06:	4689      	mov	r9, r1
 8013f08:	e7de      	b.n	8013ec8 <_strtod_l+0x8b8>
 8013f0a:	4013      	ands	r3, r2
 8013f0c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013f10:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013f14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013f18:	f04f 38ff 	mov.w	r8, #4294967295
 8013f1c:	e7d4      	b.n	8013ec8 <_strtod_l+0x8b8>
 8013f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f20:	ea13 0f08 	tst.w	r3, r8
 8013f24:	e7e0      	b.n	8013ee8 <_strtod_l+0x8d8>
 8013f26:	f7ff fb56 	bl	80135d6 <sulp>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	460b      	mov	r3, r1
 8013f2e:	ec51 0b18 	vmov	r0, r1, d8
 8013f32:	f7ec f9a9 	bl	8000288 <__aeabi_dsub>
 8013f36:	2200      	movs	r2, #0
 8013f38:	2300      	movs	r3, #0
 8013f3a:	4680      	mov	r8, r0
 8013f3c:	4689      	mov	r9, r1
 8013f3e:	f7ec fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f42:	2800      	cmp	r0, #0
 8013f44:	d0c0      	beq.n	8013ec8 <_strtod_l+0x8b8>
 8013f46:	e618      	b.n	8013b7a <_strtod_l+0x56a>
 8013f48:	fffffc02 	.word	0xfffffc02
 8013f4c:	7ff00000 	.word	0x7ff00000
 8013f50:	39500000 	.word	0x39500000
 8013f54:	000fffff 	.word	0x000fffff
 8013f58:	7fefffff 	.word	0x7fefffff
 8013f5c:	08015988 	.word	0x08015988
 8013f60:	4659      	mov	r1, fp
 8013f62:	4628      	mov	r0, r5
 8013f64:	f7ff fac0 	bl	80134e8 <__ratio>
 8013f68:	ec57 6b10 	vmov	r6, r7, d0
 8013f6c:	ee10 0a10 	vmov	r0, s0
 8013f70:	2200      	movs	r2, #0
 8013f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f76:	4639      	mov	r1, r7
 8013f78:	f7ec fdba 	bl	8000af0 <__aeabi_dcmple>
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	d071      	beq.n	8014064 <_strtod_l+0xa54>
 8013f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d17c      	bne.n	8014080 <_strtod_l+0xa70>
 8013f86:	f1b8 0f00 	cmp.w	r8, #0
 8013f8a:	d15a      	bne.n	8014042 <_strtod_l+0xa32>
 8013f8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d15d      	bne.n	8014050 <_strtod_l+0xa40>
 8013f94:	4b90      	ldr	r3, [pc, #576]	; (80141d8 <_strtod_l+0xbc8>)
 8013f96:	2200      	movs	r2, #0
 8013f98:	4630      	mov	r0, r6
 8013f9a:	4639      	mov	r1, r7
 8013f9c:	f7ec fd9e 	bl	8000adc <__aeabi_dcmplt>
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	d15c      	bne.n	801405e <_strtod_l+0xa4e>
 8013fa4:	4630      	mov	r0, r6
 8013fa6:	4639      	mov	r1, r7
 8013fa8:	4b8c      	ldr	r3, [pc, #560]	; (80141dc <_strtod_l+0xbcc>)
 8013faa:	2200      	movs	r2, #0
 8013fac:	f7ec fb24 	bl	80005f8 <__aeabi_dmul>
 8013fb0:	4606      	mov	r6, r0
 8013fb2:	460f      	mov	r7, r1
 8013fb4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013fb8:	9606      	str	r6, [sp, #24]
 8013fba:	9307      	str	r3, [sp, #28]
 8013fbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013fc4:	4b86      	ldr	r3, [pc, #536]	; (80141e0 <_strtod_l+0xbd0>)
 8013fc6:	ea0a 0303 	and.w	r3, sl, r3
 8013fca:	930d      	str	r3, [sp, #52]	; 0x34
 8013fcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013fce:	4b85      	ldr	r3, [pc, #532]	; (80141e4 <_strtod_l+0xbd4>)
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	f040 8090 	bne.w	80140f6 <_strtod_l+0xae6>
 8013fd6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013fda:	ec49 8b10 	vmov	d0, r8, r9
 8013fde:	f7ff f9b9 	bl	8013354 <__ulp>
 8013fe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fe6:	ec51 0b10 	vmov	r0, r1, d0
 8013fea:	f7ec fb05 	bl	80005f8 <__aeabi_dmul>
 8013fee:	4642      	mov	r2, r8
 8013ff0:	464b      	mov	r3, r9
 8013ff2:	f7ec f94b 	bl	800028c <__adddf3>
 8013ff6:	460b      	mov	r3, r1
 8013ff8:	4979      	ldr	r1, [pc, #484]	; (80141e0 <_strtod_l+0xbd0>)
 8013ffa:	4a7b      	ldr	r2, [pc, #492]	; (80141e8 <_strtod_l+0xbd8>)
 8013ffc:	4019      	ands	r1, r3
 8013ffe:	4291      	cmp	r1, r2
 8014000:	4680      	mov	r8, r0
 8014002:	d944      	bls.n	801408e <_strtod_l+0xa7e>
 8014004:	ee18 2a90 	vmov	r2, s17
 8014008:	4b78      	ldr	r3, [pc, #480]	; (80141ec <_strtod_l+0xbdc>)
 801400a:	429a      	cmp	r2, r3
 801400c:	d104      	bne.n	8014018 <_strtod_l+0xa08>
 801400e:	ee18 3a10 	vmov	r3, s16
 8014012:	3301      	adds	r3, #1
 8014014:	f43f ad40 	beq.w	8013a98 <_strtod_l+0x488>
 8014018:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80141ec <_strtod_l+0xbdc>
 801401c:	f04f 38ff 	mov.w	r8, #4294967295
 8014020:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014022:	4620      	mov	r0, r4
 8014024:	f7fe fe6a 	bl	8012cfc <_Bfree>
 8014028:	9905      	ldr	r1, [sp, #20]
 801402a:	4620      	mov	r0, r4
 801402c:	f7fe fe66 	bl	8012cfc <_Bfree>
 8014030:	4659      	mov	r1, fp
 8014032:	4620      	mov	r0, r4
 8014034:	f7fe fe62 	bl	8012cfc <_Bfree>
 8014038:	4629      	mov	r1, r5
 801403a:	4620      	mov	r0, r4
 801403c:	f7fe fe5e 	bl	8012cfc <_Bfree>
 8014040:	e609      	b.n	8013c56 <_strtod_l+0x646>
 8014042:	f1b8 0f01 	cmp.w	r8, #1
 8014046:	d103      	bne.n	8014050 <_strtod_l+0xa40>
 8014048:	f1b9 0f00 	cmp.w	r9, #0
 801404c:	f43f ad95 	beq.w	8013b7a <_strtod_l+0x56a>
 8014050:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80141a8 <_strtod_l+0xb98>
 8014054:	4f60      	ldr	r7, [pc, #384]	; (80141d8 <_strtod_l+0xbc8>)
 8014056:	ed8d 7b06 	vstr	d7, [sp, #24]
 801405a:	2600      	movs	r6, #0
 801405c:	e7ae      	b.n	8013fbc <_strtod_l+0x9ac>
 801405e:	4f5f      	ldr	r7, [pc, #380]	; (80141dc <_strtod_l+0xbcc>)
 8014060:	2600      	movs	r6, #0
 8014062:	e7a7      	b.n	8013fb4 <_strtod_l+0x9a4>
 8014064:	4b5d      	ldr	r3, [pc, #372]	; (80141dc <_strtod_l+0xbcc>)
 8014066:	4630      	mov	r0, r6
 8014068:	4639      	mov	r1, r7
 801406a:	2200      	movs	r2, #0
 801406c:	f7ec fac4 	bl	80005f8 <__aeabi_dmul>
 8014070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014072:	4606      	mov	r6, r0
 8014074:	460f      	mov	r7, r1
 8014076:	2b00      	cmp	r3, #0
 8014078:	d09c      	beq.n	8013fb4 <_strtod_l+0x9a4>
 801407a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801407e:	e79d      	b.n	8013fbc <_strtod_l+0x9ac>
 8014080:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80141b0 <_strtod_l+0xba0>
 8014084:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014088:	ec57 6b17 	vmov	r6, r7, d7
 801408c:	e796      	b.n	8013fbc <_strtod_l+0x9ac>
 801408e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014092:	9b04      	ldr	r3, [sp, #16]
 8014094:	46ca      	mov	sl, r9
 8014096:	2b00      	cmp	r3, #0
 8014098:	d1c2      	bne.n	8014020 <_strtod_l+0xa10>
 801409a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801409e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80140a0:	0d1b      	lsrs	r3, r3, #20
 80140a2:	051b      	lsls	r3, r3, #20
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d1bb      	bne.n	8014020 <_strtod_l+0xa10>
 80140a8:	4630      	mov	r0, r6
 80140aa:	4639      	mov	r1, r7
 80140ac:	f7ec fdec 	bl	8000c88 <__aeabi_d2lz>
 80140b0:	f7ec fa74 	bl	800059c <__aeabi_l2d>
 80140b4:	4602      	mov	r2, r0
 80140b6:	460b      	mov	r3, r1
 80140b8:	4630      	mov	r0, r6
 80140ba:	4639      	mov	r1, r7
 80140bc:	f7ec f8e4 	bl	8000288 <__aeabi_dsub>
 80140c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80140c6:	ea43 0308 	orr.w	r3, r3, r8
 80140ca:	4313      	orrs	r3, r2
 80140cc:	4606      	mov	r6, r0
 80140ce:	460f      	mov	r7, r1
 80140d0:	d054      	beq.n	801417c <_strtod_l+0xb6c>
 80140d2:	a339      	add	r3, pc, #228	; (adr r3, 80141b8 <_strtod_l+0xba8>)
 80140d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140d8:	f7ec fd00 	bl	8000adc <__aeabi_dcmplt>
 80140dc:	2800      	cmp	r0, #0
 80140de:	f47f ace5 	bne.w	8013aac <_strtod_l+0x49c>
 80140e2:	a337      	add	r3, pc, #220	; (adr r3, 80141c0 <_strtod_l+0xbb0>)
 80140e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e8:	4630      	mov	r0, r6
 80140ea:	4639      	mov	r1, r7
 80140ec:	f7ec fd14 	bl	8000b18 <__aeabi_dcmpgt>
 80140f0:	2800      	cmp	r0, #0
 80140f2:	d095      	beq.n	8014020 <_strtod_l+0xa10>
 80140f4:	e4da      	b.n	8013aac <_strtod_l+0x49c>
 80140f6:	9b04      	ldr	r3, [sp, #16]
 80140f8:	b333      	cbz	r3, 8014148 <_strtod_l+0xb38>
 80140fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80140fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014100:	d822      	bhi.n	8014148 <_strtod_l+0xb38>
 8014102:	a331      	add	r3, pc, #196	; (adr r3, 80141c8 <_strtod_l+0xbb8>)
 8014104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014108:	4630      	mov	r0, r6
 801410a:	4639      	mov	r1, r7
 801410c:	f7ec fcf0 	bl	8000af0 <__aeabi_dcmple>
 8014110:	b1a0      	cbz	r0, 801413c <_strtod_l+0xb2c>
 8014112:	4639      	mov	r1, r7
 8014114:	4630      	mov	r0, r6
 8014116:	f7ec fd47 	bl	8000ba8 <__aeabi_d2uiz>
 801411a:	2801      	cmp	r0, #1
 801411c:	bf38      	it	cc
 801411e:	2001      	movcc	r0, #1
 8014120:	f7ec f9f0 	bl	8000504 <__aeabi_ui2d>
 8014124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014126:	4606      	mov	r6, r0
 8014128:	460f      	mov	r7, r1
 801412a:	bb23      	cbnz	r3, 8014176 <_strtod_l+0xb66>
 801412c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014130:	9010      	str	r0, [sp, #64]	; 0x40
 8014132:	9311      	str	r3, [sp, #68]	; 0x44
 8014134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014138:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801413c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801413e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014140:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014144:	1a9b      	subs	r3, r3, r2
 8014146:	930f      	str	r3, [sp, #60]	; 0x3c
 8014148:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801414c:	eeb0 0a48 	vmov.f32	s0, s16
 8014150:	eef0 0a68 	vmov.f32	s1, s17
 8014154:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014158:	f7ff f8fc 	bl	8013354 <__ulp>
 801415c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014160:	ec53 2b10 	vmov	r2, r3, d0
 8014164:	f7ec fa48 	bl	80005f8 <__aeabi_dmul>
 8014168:	ec53 2b18 	vmov	r2, r3, d8
 801416c:	f7ec f88e 	bl	800028c <__adddf3>
 8014170:	4680      	mov	r8, r0
 8014172:	4689      	mov	r9, r1
 8014174:	e78d      	b.n	8014092 <_strtod_l+0xa82>
 8014176:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801417a:	e7db      	b.n	8014134 <_strtod_l+0xb24>
 801417c:	a314      	add	r3, pc, #80	; (adr r3, 80141d0 <_strtod_l+0xbc0>)
 801417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014182:	f7ec fcab 	bl	8000adc <__aeabi_dcmplt>
 8014186:	e7b3      	b.n	80140f0 <_strtod_l+0xae0>
 8014188:	2300      	movs	r3, #0
 801418a:	930a      	str	r3, [sp, #40]	; 0x28
 801418c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801418e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014190:	6013      	str	r3, [r2, #0]
 8014192:	f7ff ba7c 	b.w	801368e <_strtod_l+0x7e>
 8014196:	2a65      	cmp	r2, #101	; 0x65
 8014198:	f43f ab75 	beq.w	8013886 <_strtod_l+0x276>
 801419c:	2a45      	cmp	r2, #69	; 0x45
 801419e:	f43f ab72 	beq.w	8013886 <_strtod_l+0x276>
 80141a2:	2301      	movs	r3, #1
 80141a4:	f7ff bbaa 	b.w	80138fc <_strtod_l+0x2ec>
 80141a8:	00000000 	.word	0x00000000
 80141ac:	bff00000 	.word	0xbff00000
 80141b0:	00000000 	.word	0x00000000
 80141b4:	3ff00000 	.word	0x3ff00000
 80141b8:	94a03595 	.word	0x94a03595
 80141bc:	3fdfffff 	.word	0x3fdfffff
 80141c0:	35afe535 	.word	0x35afe535
 80141c4:	3fe00000 	.word	0x3fe00000
 80141c8:	ffc00000 	.word	0xffc00000
 80141cc:	41dfffff 	.word	0x41dfffff
 80141d0:	94a03595 	.word	0x94a03595
 80141d4:	3fcfffff 	.word	0x3fcfffff
 80141d8:	3ff00000 	.word	0x3ff00000
 80141dc:	3fe00000 	.word	0x3fe00000
 80141e0:	7ff00000 	.word	0x7ff00000
 80141e4:	7fe00000 	.word	0x7fe00000
 80141e8:	7c9fffff 	.word	0x7c9fffff
 80141ec:	7fefffff 	.word	0x7fefffff

080141f0 <_strtod_r>:
 80141f0:	4b01      	ldr	r3, [pc, #4]	; (80141f8 <_strtod_r+0x8>)
 80141f2:	f7ff ba0d 	b.w	8013610 <_strtod_l>
 80141f6:	bf00      	nop
 80141f8:	20000168 	.word	0x20000168

080141fc <_strtol_l.constprop.0>:
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014202:	d001      	beq.n	8014208 <_strtol_l.constprop.0+0xc>
 8014204:	2b24      	cmp	r3, #36	; 0x24
 8014206:	d906      	bls.n	8014216 <_strtol_l.constprop.0+0x1a>
 8014208:	f7fd fd7c 	bl	8011d04 <__errno>
 801420c:	2316      	movs	r3, #22
 801420e:	6003      	str	r3, [r0, #0]
 8014210:	2000      	movs	r0, #0
 8014212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014216:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80142fc <_strtol_l.constprop.0+0x100>
 801421a:	460d      	mov	r5, r1
 801421c:	462e      	mov	r6, r5
 801421e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014222:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014226:	f017 0708 	ands.w	r7, r7, #8
 801422a:	d1f7      	bne.n	801421c <_strtol_l.constprop.0+0x20>
 801422c:	2c2d      	cmp	r4, #45	; 0x2d
 801422e:	d132      	bne.n	8014296 <_strtol_l.constprop.0+0x9a>
 8014230:	782c      	ldrb	r4, [r5, #0]
 8014232:	2701      	movs	r7, #1
 8014234:	1cb5      	adds	r5, r6, #2
 8014236:	2b00      	cmp	r3, #0
 8014238:	d05b      	beq.n	80142f2 <_strtol_l.constprop.0+0xf6>
 801423a:	2b10      	cmp	r3, #16
 801423c:	d109      	bne.n	8014252 <_strtol_l.constprop.0+0x56>
 801423e:	2c30      	cmp	r4, #48	; 0x30
 8014240:	d107      	bne.n	8014252 <_strtol_l.constprop.0+0x56>
 8014242:	782c      	ldrb	r4, [r5, #0]
 8014244:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014248:	2c58      	cmp	r4, #88	; 0x58
 801424a:	d14d      	bne.n	80142e8 <_strtol_l.constprop.0+0xec>
 801424c:	786c      	ldrb	r4, [r5, #1]
 801424e:	2310      	movs	r3, #16
 8014250:	3502      	adds	r5, #2
 8014252:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014256:	f108 38ff 	add.w	r8, r8, #4294967295
 801425a:	f04f 0e00 	mov.w	lr, #0
 801425e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014262:	4676      	mov	r6, lr
 8014264:	fb03 8a19 	mls	sl, r3, r9, r8
 8014268:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801426c:	f1bc 0f09 	cmp.w	ip, #9
 8014270:	d816      	bhi.n	80142a0 <_strtol_l.constprop.0+0xa4>
 8014272:	4664      	mov	r4, ip
 8014274:	42a3      	cmp	r3, r4
 8014276:	dd24      	ble.n	80142c2 <_strtol_l.constprop.0+0xc6>
 8014278:	f1be 3fff 	cmp.w	lr, #4294967295
 801427c:	d008      	beq.n	8014290 <_strtol_l.constprop.0+0x94>
 801427e:	45b1      	cmp	r9, r6
 8014280:	d31c      	bcc.n	80142bc <_strtol_l.constprop.0+0xc0>
 8014282:	d101      	bne.n	8014288 <_strtol_l.constprop.0+0x8c>
 8014284:	45a2      	cmp	sl, r4
 8014286:	db19      	blt.n	80142bc <_strtol_l.constprop.0+0xc0>
 8014288:	fb06 4603 	mla	r6, r6, r3, r4
 801428c:	f04f 0e01 	mov.w	lr, #1
 8014290:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014294:	e7e8      	b.n	8014268 <_strtol_l.constprop.0+0x6c>
 8014296:	2c2b      	cmp	r4, #43	; 0x2b
 8014298:	bf04      	itt	eq
 801429a:	782c      	ldrbeq	r4, [r5, #0]
 801429c:	1cb5      	addeq	r5, r6, #2
 801429e:	e7ca      	b.n	8014236 <_strtol_l.constprop.0+0x3a>
 80142a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80142a4:	f1bc 0f19 	cmp.w	ip, #25
 80142a8:	d801      	bhi.n	80142ae <_strtol_l.constprop.0+0xb2>
 80142aa:	3c37      	subs	r4, #55	; 0x37
 80142ac:	e7e2      	b.n	8014274 <_strtol_l.constprop.0+0x78>
 80142ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80142b2:	f1bc 0f19 	cmp.w	ip, #25
 80142b6:	d804      	bhi.n	80142c2 <_strtol_l.constprop.0+0xc6>
 80142b8:	3c57      	subs	r4, #87	; 0x57
 80142ba:	e7db      	b.n	8014274 <_strtol_l.constprop.0+0x78>
 80142bc:	f04f 3eff 	mov.w	lr, #4294967295
 80142c0:	e7e6      	b.n	8014290 <_strtol_l.constprop.0+0x94>
 80142c2:	f1be 3fff 	cmp.w	lr, #4294967295
 80142c6:	d105      	bne.n	80142d4 <_strtol_l.constprop.0+0xd8>
 80142c8:	2322      	movs	r3, #34	; 0x22
 80142ca:	6003      	str	r3, [r0, #0]
 80142cc:	4646      	mov	r6, r8
 80142ce:	b942      	cbnz	r2, 80142e2 <_strtol_l.constprop.0+0xe6>
 80142d0:	4630      	mov	r0, r6
 80142d2:	e79e      	b.n	8014212 <_strtol_l.constprop.0+0x16>
 80142d4:	b107      	cbz	r7, 80142d8 <_strtol_l.constprop.0+0xdc>
 80142d6:	4276      	negs	r6, r6
 80142d8:	2a00      	cmp	r2, #0
 80142da:	d0f9      	beq.n	80142d0 <_strtol_l.constprop.0+0xd4>
 80142dc:	f1be 0f00 	cmp.w	lr, #0
 80142e0:	d000      	beq.n	80142e4 <_strtol_l.constprop.0+0xe8>
 80142e2:	1e69      	subs	r1, r5, #1
 80142e4:	6011      	str	r1, [r2, #0]
 80142e6:	e7f3      	b.n	80142d0 <_strtol_l.constprop.0+0xd4>
 80142e8:	2430      	movs	r4, #48	; 0x30
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d1b1      	bne.n	8014252 <_strtol_l.constprop.0+0x56>
 80142ee:	2308      	movs	r3, #8
 80142f0:	e7af      	b.n	8014252 <_strtol_l.constprop.0+0x56>
 80142f2:	2c30      	cmp	r4, #48	; 0x30
 80142f4:	d0a5      	beq.n	8014242 <_strtol_l.constprop.0+0x46>
 80142f6:	230a      	movs	r3, #10
 80142f8:	e7ab      	b.n	8014252 <_strtol_l.constprop.0+0x56>
 80142fa:	bf00      	nop
 80142fc:	080159b1 	.word	0x080159b1

08014300 <_strtol_r>:
 8014300:	f7ff bf7c 	b.w	80141fc <_strtol_l.constprop.0>

08014304 <__ssputs_r>:
 8014304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014308:	688e      	ldr	r6, [r1, #8]
 801430a:	461f      	mov	r7, r3
 801430c:	42be      	cmp	r6, r7
 801430e:	680b      	ldr	r3, [r1, #0]
 8014310:	4682      	mov	sl, r0
 8014312:	460c      	mov	r4, r1
 8014314:	4690      	mov	r8, r2
 8014316:	d82c      	bhi.n	8014372 <__ssputs_r+0x6e>
 8014318:	898a      	ldrh	r2, [r1, #12]
 801431a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801431e:	d026      	beq.n	801436e <__ssputs_r+0x6a>
 8014320:	6965      	ldr	r5, [r4, #20]
 8014322:	6909      	ldr	r1, [r1, #16]
 8014324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014328:	eba3 0901 	sub.w	r9, r3, r1
 801432c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014330:	1c7b      	adds	r3, r7, #1
 8014332:	444b      	add	r3, r9
 8014334:	106d      	asrs	r5, r5, #1
 8014336:	429d      	cmp	r5, r3
 8014338:	bf38      	it	cc
 801433a:	461d      	movcc	r5, r3
 801433c:	0553      	lsls	r3, r2, #21
 801433e:	d527      	bpl.n	8014390 <__ssputs_r+0x8c>
 8014340:	4629      	mov	r1, r5
 8014342:	f7fe fc0f 	bl	8012b64 <_malloc_r>
 8014346:	4606      	mov	r6, r0
 8014348:	b360      	cbz	r0, 80143a4 <__ssputs_r+0xa0>
 801434a:	6921      	ldr	r1, [r4, #16]
 801434c:	464a      	mov	r2, r9
 801434e:	f7fd fd05 	bl	8011d5c <memcpy>
 8014352:	89a3      	ldrh	r3, [r4, #12]
 8014354:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801435c:	81a3      	strh	r3, [r4, #12]
 801435e:	6126      	str	r6, [r4, #16]
 8014360:	6165      	str	r5, [r4, #20]
 8014362:	444e      	add	r6, r9
 8014364:	eba5 0509 	sub.w	r5, r5, r9
 8014368:	6026      	str	r6, [r4, #0]
 801436a:	60a5      	str	r5, [r4, #8]
 801436c:	463e      	mov	r6, r7
 801436e:	42be      	cmp	r6, r7
 8014370:	d900      	bls.n	8014374 <__ssputs_r+0x70>
 8014372:	463e      	mov	r6, r7
 8014374:	6820      	ldr	r0, [r4, #0]
 8014376:	4632      	mov	r2, r6
 8014378:	4641      	mov	r1, r8
 801437a:	f7fd fc56 	bl	8011c2a <memmove>
 801437e:	68a3      	ldr	r3, [r4, #8]
 8014380:	1b9b      	subs	r3, r3, r6
 8014382:	60a3      	str	r3, [r4, #8]
 8014384:	6823      	ldr	r3, [r4, #0]
 8014386:	4433      	add	r3, r6
 8014388:	6023      	str	r3, [r4, #0]
 801438a:	2000      	movs	r0, #0
 801438c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014390:	462a      	mov	r2, r5
 8014392:	f000 fd86 	bl	8014ea2 <_realloc_r>
 8014396:	4606      	mov	r6, r0
 8014398:	2800      	cmp	r0, #0
 801439a:	d1e0      	bne.n	801435e <__ssputs_r+0x5a>
 801439c:	6921      	ldr	r1, [r4, #16]
 801439e:	4650      	mov	r0, sl
 80143a0:	f7fe fb6c 	bl	8012a7c <_free_r>
 80143a4:	230c      	movs	r3, #12
 80143a6:	f8ca 3000 	str.w	r3, [sl]
 80143aa:	89a3      	ldrh	r3, [r4, #12]
 80143ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143b0:	81a3      	strh	r3, [r4, #12]
 80143b2:	f04f 30ff 	mov.w	r0, #4294967295
 80143b6:	e7e9      	b.n	801438c <__ssputs_r+0x88>

080143b8 <_svfiprintf_r>:
 80143b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143bc:	4698      	mov	r8, r3
 80143be:	898b      	ldrh	r3, [r1, #12]
 80143c0:	061b      	lsls	r3, r3, #24
 80143c2:	b09d      	sub	sp, #116	; 0x74
 80143c4:	4607      	mov	r7, r0
 80143c6:	460d      	mov	r5, r1
 80143c8:	4614      	mov	r4, r2
 80143ca:	d50e      	bpl.n	80143ea <_svfiprintf_r+0x32>
 80143cc:	690b      	ldr	r3, [r1, #16]
 80143ce:	b963      	cbnz	r3, 80143ea <_svfiprintf_r+0x32>
 80143d0:	2140      	movs	r1, #64	; 0x40
 80143d2:	f7fe fbc7 	bl	8012b64 <_malloc_r>
 80143d6:	6028      	str	r0, [r5, #0]
 80143d8:	6128      	str	r0, [r5, #16]
 80143da:	b920      	cbnz	r0, 80143e6 <_svfiprintf_r+0x2e>
 80143dc:	230c      	movs	r3, #12
 80143de:	603b      	str	r3, [r7, #0]
 80143e0:	f04f 30ff 	mov.w	r0, #4294967295
 80143e4:	e0d0      	b.n	8014588 <_svfiprintf_r+0x1d0>
 80143e6:	2340      	movs	r3, #64	; 0x40
 80143e8:	616b      	str	r3, [r5, #20]
 80143ea:	2300      	movs	r3, #0
 80143ec:	9309      	str	r3, [sp, #36]	; 0x24
 80143ee:	2320      	movs	r3, #32
 80143f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80143f8:	2330      	movs	r3, #48	; 0x30
 80143fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80145a0 <_svfiprintf_r+0x1e8>
 80143fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014402:	f04f 0901 	mov.w	r9, #1
 8014406:	4623      	mov	r3, r4
 8014408:	469a      	mov	sl, r3
 801440a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801440e:	b10a      	cbz	r2, 8014414 <_svfiprintf_r+0x5c>
 8014410:	2a25      	cmp	r2, #37	; 0x25
 8014412:	d1f9      	bne.n	8014408 <_svfiprintf_r+0x50>
 8014414:	ebba 0b04 	subs.w	fp, sl, r4
 8014418:	d00b      	beq.n	8014432 <_svfiprintf_r+0x7a>
 801441a:	465b      	mov	r3, fp
 801441c:	4622      	mov	r2, r4
 801441e:	4629      	mov	r1, r5
 8014420:	4638      	mov	r0, r7
 8014422:	f7ff ff6f 	bl	8014304 <__ssputs_r>
 8014426:	3001      	adds	r0, #1
 8014428:	f000 80a9 	beq.w	801457e <_svfiprintf_r+0x1c6>
 801442c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801442e:	445a      	add	r2, fp
 8014430:	9209      	str	r2, [sp, #36]	; 0x24
 8014432:	f89a 3000 	ldrb.w	r3, [sl]
 8014436:	2b00      	cmp	r3, #0
 8014438:	f000 80a1 	beq.w	801457e <_svfiprintf_r+0x1c6>
 801443c:	2300      	movs	r3, #0
 801443e:	f04f 32ff 	mov.w	r2, #4294967295
 8014442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014446:	f10a 0a01 	add.w	sl, sl, #1
 801444a:	9304      	str	r3, [sp, #16]
 801444c:	9307      	str	r3, [sp, #28]
 801444e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014452:	931a      	str	r3, [sp, #104]	; 0x68
 8014454:	4654      	mov	r4, sl
 8014456:	2205      	movs	r2, #5
 8014458:	f814 1b01 	ldrb.w	r1, [r4], #1
 801445c:	4850      	ldr	r0, [pc, #320]	; (80145a0 <_svfiprintf_r+0x1e8>)
 801445e:	f7eb feb7 	bl	80001d0 <memchr>
 8014462:	9a04      	ldr	r2, [sp, #16]
 8014464:	b9d8      	cbnz	r0, 801449e <_svfiprintf_r+0xe6>
 8014466:	06d0      	lsls	r0, r2, #27
 8014468:	bf44      	itt	mi
 801446a:	2320      	movmi	r3, #32
 801446c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014470:	0711      	lsls	r1, r2, #28
 8014472:	bf44      	itt	mi
 8014474:	232b      	movmi	r3, #43	; 0x2b
 8014476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801447a:	f89a 3000 	ldrb.w	r3, [sl]
 801447e:	2b2a      	cmp	r3, #42	; 0x2a
 8014480:	d015      	beq.n	80144ae <_svfiprintf_r+0xf6>
 8014482:	9a07      	ldr	r2, [sp, #28]
 8014484:	4654      	mov	r4, sl
 8014486:	2000      	movs	r0, #0
 8014488:	f04f 0c0a 	mov.w	ip, #10
 801448c:	4621      	mov	r1, r4
 801448e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014492:	3b30      	subs	r3, #48	; 0x30
 8014494:	2b09      	cmp	r3, #9
 8014496:	d94d      	bls.n	8014534 <_svfiprintf_r+0x17c>
 8014498:	b1b0      	cbz	r0, 80144c8 <_svfiprintf_r+0x110>
 801449a:	9207      	str	r2, [sp, #28]
 801449c:	e014      	b.n	80144c8 <_svfiprintf_r+0x110>
 801449e:	eba0 0308 	sub.w	r3, r0, r8
 80144a2:	fa09 f303 	lsl.w	r3, r9, r3
 80144a6:	4313      	orrs	r3, r2
 80144a8:	9304      	str	r3, [sp, #16]
 80144aa:	46a2      	mov	sl, r4
 80144ac:	e7d2      	b.n	8014454 <_svfiprintf_r+0x9c>
 80144ae:	9b03      	ldr	r3, [sp, #12]
 80144b0:	1d19      	adds	r1, r3, #4
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	9103      	str	r1, [sp, #12]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	bfbb      	ittet	lt
 80144ba:	425b      	neglt	r3, r3
 80144bc:	f042 0202 	orrlt.w	r2, r2, #2
 80144c0:	9307      	strge	r3, [sp, #28]
 80144c2:	9307      	strlt	r3, [sp, #28]
 80144c4:	bfb8      	it	lt
 80144c6:	9204      	strlt	r2, [sp, #16]
 80144c8:	7823      	ldrb	r3, [r4, #0]
 80144ca:	2b2e      	cmp	r3, #46	; 0x2e
 80144cc:	d10c      	bne.n	80144e8 <_svfiprintf_r+0x130>
 80144ce:	7863      	ldrb	r3, [r4, #1]
 80144d0:	2b2a      	cmp	r3, #42	; 0x2a
 80144d2:	d134      	bne.n	801453e <_svfiprintf_r+0x186>
 80144d4:	9b03      	ldr	r3, [sp, #12]
 80144d6:	1d1a      	adds	r2, r3, #4
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	9203      	str	r2, [sp, #12]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	bfb8      	it	lt
 80144e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80144e4:	3402      	adds	r4, #2
 80144e6:	9305      	str	r3, [sp, #20]
 80144e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80145b0 <_svfiprintf_r+0x1f8>
 80144ec:	7821      	ldrb	r1, [r4, #0]
 80144ee:	2203      	movs	r2, #3
 80144f0:	4650      	mov	r0, sl
 80144f2:	f7eb fe6d 	bl	80001d0 <memchr>
 80144f6:	b138      	cbz	r0, 8014508 <_svfiprintf_r+0x150>
 80144f8:	9b04      	ldr	r3, [sp, #16]
 80144fa:	eba0 000a 	sub.w	r0, r0, sl
 80144fe:	2240      	movs	r2, #64	; 0x40
 8014500:	4082      	lsls	r2, r0
 8014502:	4313      	orrs	r3, r2
 8014504:	3401      	adds	r4, #1
 8014506:	9304      	str	r3, [sp, #16]
 8014508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801450c:	4825      	ldr	r0, [pc, #148]	; (80145a4 <_svfiprintf_r+0x1ec>)
 801450e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014512:	2206      	movs	r2, #6
 8014514:	f7eb fe5c 	bl	80001d0 <memchr>
 8014518:	2800      	cmp	r0, #0
 801451a:	d038      	beq.n	801458e <_svfiprintf_r+0x1d6>
 801451c:	4b22      	ldr	r3, [pc, #136]	; (80145a8 <_svfiprintf_r+0x1f0>)
 801451e:	bb1b      	cbnz	r3, 8014568 <_svfiprintf_r+0x1b0>
 8014520:	9b03      	ldr	r3, [sp, #12]
 8014522:	3307      	adds	r3, #7
 8014524:	f023 0307 	bic.w	r3, r3, #7
 8014528:	3308      	adds	r3, #8
 801452a:	9303      	str	r3, [sp, #12]
 801452c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801452e:	4433      	add	r3, r6
 8014530:	9309      	str	r3, [sp, #36]	; 0x24
 8014532:	e768      	b.n	8014406 <_svfiprintf_r+0x4e>
 8014534:	fb0c 3202 	mla	r2, ip, r2, r3
 8014538:	460c      	mov	r4, r1
 801453a:	2001      	movs	r0, #1
 801453c:	e7a6      	b.n	801448c <_svfiprintf_r+0xd4>
 801453e:	2300      	movs	r3, #0
 8014540:	3401      	adds	r4, #1
 8014542:	9305      	str	r3, [sp, #20]
 8014544:	4619      	mov	r1, r3
 8014546:	f04f 0c0a 	mov.w	ip, #10
 801454a:	4620      	mov	r0, r4
 801454c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014550:	3a30      	subs	r2, #48	; 0x30
 8014552:	2a09      	cmp	r2, #9
 8014554:	d903      	bls.n	801455e <_svfiprintf_r+0x1a6>
 8014556:	2b00      	cmp	r3, #0
 8014558:	d0c6      	beq.n	80144e8 <_svfiprintf_r+0x130>
 801455a:	9105      	str	r1, [sp, #20]
 801455c:	e7c4      	b.n	80144e8 <_svfiprintf_r+0x130>
 801455e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014562:	4604      	mov	r4, r0
 8014564:	2301      	movs	r3, #1
 8014566:	e7f0      	b.n	801454a <_svfiprintf_r+0x192>
 8014568:	ab03      	add	r3, sp, #12
 801456a:	9300      	str	r3, [sp, #0]
 801456c:	462a      	mov	r2, r5
 801456e:	4b0f      	ldr	r3, [pc, #60]	; (80145ac <_svfiprintf_r+0x1f4>)
 8014570:	a904      	add	r1, sp, #16
 8014572:	4638      	mov	r0, r7
 8014574:	f7fc fc3c 	bl	8010df0 <_printf_float>
 8014578:	1c42      	adds	r2, r0, #1
 801457a:	4606      	mov	r6, r0
 801457c:	d1d6      	bne.n	801452c <_svfiprintf_r+0x174>
 801457e:	89ab      	ldrh	r3, [r5, #12]
 8014580:	065b      	lsls	r3, r3, #25
 8014582:	f53f af2d 	bmi.w	80143e0 <_svfiprintf_r+0x28>
 8014586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014588:	b01d      	add	sp, #116	; 0x74
 801458a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801458e:	ab03      	add	r3, sp, #12
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	462a      	mov	r2, r5
 8014594:	4b05      	ldr	r3, [pc, #20]	; (80145ac <_svfiprintf_r+0x1f4>)
 8014596:	a904      	add	r1, sp, #16
 8014598:	4638      	mov	r0, r7
 801459a:	f7fc fecd 	bl	8011338 <_printf_i>
 801459e:	e7eb      	b.n	8014578 <_svfiprintf_r+0x1c0>
 80145a0:	08015ab1 	.word	0x08015ab1
 80145a4:	08015abb 	.word	0x08015abb
 80145a8:	08010df1 	.word	0x08010df1
 80145ac:	08014305 	.word	0x08014305
 80145b0:	08015ab7 	.word	0x08015ab7

080145b4 <__sflush_r>:
 80145b4:	898a      	ldrh	r2, [r1, #12]
 80145b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ba:	4605      	mov	r5, r0
 80145bc:	0710      	lsls	r0, r2, #28
 80145be:	460c      	mov	r4, r1
 80145c0:	d458      	bmi.n	8014674 <__sflush_r+0xc0>
 80145c2:	684b      	ldr	r3, [r1, #4]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	dc05      	bgt.n	80145d4 <__sflush_r+0x20>
 80145c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	dc02      	bgt.n	80145d4 <__sflush_r+0x20>
 80145ce:	2000      	movs	r0, #0
 80145d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145d6:	2e00      	cmp	r6, #0
 80145d8:	d0f9      	beq.n	80145ce <__sflush_r+0x1a>
 80145da:	2300      	movs	r3, #0
 80145dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80145e0:	682f      	ldr	r7, [r5, #0]
 80145e2:	6a21      	ldr	r1, [r4, #32]
 80145e4:	602b      	str	r3, [r5, #0]
 80145e6:	d032      	beq.n	801464e <__sflush_r+0x9a>
 80145e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80145ea:	89a3      	ldrh	r3, [r4, #12]
 80145ec:	075a      	lsls	r2, r3, #29
 80145ee:	d505      	bpl.n	80145fc <__sflush_r+0x48>
 80145f0:	6863      	ldr	r3, [r4, #4]
 80145f2:	1ac0      	subs	r0, r0, r3
 80145f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80145f6:	b10b      	cbz	r3, 80145fc <__sflush_r+0x48>
 80145f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80145fa:	1ac0      	subs	r0, r0, r3
 80145fc:	2300      	movs	r3, #0
 80145fe:	4602      	mov	r2, r0
 8014600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014602:	6a21      	ldr	r1, [r4, #32]
 8014604:	4628      	mov	r0, r5
 8014606:	47b0      	blx	r6
 8014608:	1c43      	adds	r3, r0, #1
 801460a:	89a3      	ldrh	r3, [r4, #12]
 801460c:	d106      	bne.n	801461c <__sflush_r+0x68>
 801460e:	6829      	ldr	r1, [r5, #0]
 8014610:	291d      	cmp	r1, #29
 8014612:	d82b      	bhi.n	801466c <__sflush_r+0xb8>
 8014614:	4a29      	ldr	r2, [pc, #164]	; (80146bc <__sflush_r+0x108>)
 8014616:	410a      	asrs	r2, r1
 8014618:	07d6      	lsls	r6, r2, #31
 801461a:	d427      	bmi.n	801466c <__sflush_r+0xb8>
 801461c:	2200      	movs	r2, #0
 801461e:	6062      	str	r2, [r4, #4]
 8014620:	04d9      	lsls	r1, r3, #19
 8014622:	6922      	ldr	r2, [r4, #16]
 8014624:	6022      	str	r2, [r4, #0]
 8014626:	d504      	bpl.n	8014632 <__sflush_r+0x7e>
 8014628:	1c42      	adds	r2, r0, #1
 801462a:	d101      	bne.n	8014630 <__sflush_r+0x7c>
 801462c:	682b      	ldr	r3, [r5, #0]
 801462e:	b903      	cbnz	r3, 8014632 <__sflush_r+0x7e>
 8014630:	6560      	str	r0, [r4, #84]	; 0x54
 8014632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014634:	602f      	str	r7, [r5, #0]
 8014636:	2900      	cmp	r1, #0
 8014638:	d0c9      	beq.n	80145ce <__sflush_r+0x1a>
 801463a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801463e:	4299      	cmp	r1, r3
 8014640:	d002      	beq.n	8014648 <__sflush_r+0x94>
 8014642:	4628      	mov	r0, r5
 8014644:	f7fe fa1a 	bl	8012a7c <_free_r>
 8014648:	2000      	movs	r0, #0
 801464a:	6360      	str	r0, [r4, #52]	; 0x34
 801464c:	e7c0      	b.n	80145d0 <__sflush_r+0x1c>
 801464e:	2301      	movs	r3, #1
 8014650:	4628      	mov	r0, r5
 8014652:	47b0      	blx	r6
 8014654:	1c41      	adds	r1, r0, #1
 8014656:	d1c8      	bne.n	80145ea <__sflush_r+0x36>
 8014658:	682b      	ldr	r3, [r5, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d0c5      	beq.n	80145ea <__sflush_r+0x36>
 801465e:	2b1d      	cmp	r3, #29
 8014660:	d001      	beq.n	8014666 <__sflush_r+0xb2>
 8014662:	2b16      	cmp	r3, #22
 8014664:	d101      	bne.n	801466a <__sflush_r+0xb6>
 8014666:	602f      	str	r7, [r5, #0]
 8014668:	e7b1      	b.n	80145ce <__sflush_r+0x1a>
 801466a:	89a3      	ldrh	r3, [r4, #12]
 801466c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014670:	81a3      	strh	r3, [r4, #12]
 8014672:	e7ad      	b.n	80145d0 <__sflush_r+0x1c>
 8014674:	690f      	ldr	r7, [r1, #16]
 8014676:	2f00      	cmp	r7, #0
 8014678:	d0a9      	beq.n	80145ce <__sflush_r+0x1a>
 801467a:	0793      	lsls	r3, r2, #30
 801467c:	680e      	ldr	r6, [r1, #0]
 801467e:	bf08      	it	eq
 8014680:	694b      	ldreq	r3, [r1, #20]
 8014682:	600f      	str	r7, [r1, #0]
 8014684:	bf18      	it	ne
 8014686:	2300      	movne	r3, #0
 8014688:	eba6 0807 	sub.w	r8, r6, r7
 801468c:	608b      	str	r3, [r1, #8]
 801468e:	f1b8 0f00 	cmp.w	r8, #0
 8014692:	dd9c      	ble.n	80145ce <__sflush_r+0x1a>
 8014694:	6a21      	ldr	r1, [r4, #32]
 8014696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014698:	4643      	mov	r3, r8
 801469a:	463a      	mov	r2, r7
 801469c:	4628      	mov	r0, r5
 801469e:	47b0      	blx	r6
 80146a0:	2800      	cmp	r0, #0
 80146a2:	dc06      	bgt.n	80146b2 <__sflush_r+0xfe>
 80146a4:	89a3      	ldrh	r3, [r4, #12]
 80146a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146aa:	81a3      	strh	r3, [r4, #12]
 80146ac:	f04f 30ff 	mov.w	r0, #4294967295
 80146b0:	e78e      	b.n	80145d0 <__sflush_r+0x1c>
 80146b2:	4407      	add	r7, r0
 80146b4:	eba8 0800 	sub.w	r8, r8, r0
 80146b8:	e7e9      	b.n	801468e <__sflush_r+0xda>
 80146ba:	bf00      	nop
 80146bc:	dfbffffe 	.word	0xdfbffffe

080146c0 <_fflush_r>:
 80146c0:	b538      	push	{r3, r4, r5, lr}
 80146c2:	690b      	ldr	r3, [r1, #16]
 80146c4:	4605      	mov	r5, r0
 80146c6:	460c      	mov	r4, r1
 80146c8:	b913      	cbnz	r3, 80146d0 <_fflush_r+0x10>
 80146ca:	2500      	movs	r5, #0
 80146cc:	4628      	mov	r0, r5
 80146ce:	bd38      	pop	{r3, r4, r5, pc}
 80146d0:	b118      	cbz	r0, 80146da <_fflush_r+0x1a>
 80146d2:	6a03      	ldr	r3, [r0, #32]
 80146d4:	b90b      	cbnz	r3, 80146da <_fflush_r+0x1a>
 80146d6:	f7fd f9db 	bl	8011a90 <__sinit>
 80146da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d0f3      	beq.n	80146ca <_fflush_r+0xa>
 80146e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80146e4:	07d0      	lsls	r0, r2, #31
 80146e6:	d404      	bmi.n	80146f2 <_fflush_r+0x32>
 80146e8:	0599      	lsls	r1, r3, #22
 80146ea:	d402      	bmi.n	80146f2 <_fflush_r+0x32>
 80146ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146ee:	f7fd fb33 	bl	8011d58 <__retarget_lock_acquire_recursive>
 80146f2:	4628      	mov	r0, r5
 80146f4:	4621      	mov	r1, r4
 80146f6:	f7ff ff5d 	bl	80145b4 <__sflush_r>
 80146fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80146fc:	07da      	lsls	r2, r3, #31
 80146fe:	4605      	mov	r5, r0
 8014700:	d4e4      	bmi.n	80146cc <_fflush_r+0xc>
 8014702:	89a3      	ldrh	r3, [r4, #12]
 8014704:	059b      	lsls	r3, r3, #22
 8014706:	d4e1      	bmi.n	80146cc <_fflush_r+0xc>
 8014708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801470a:	f7fd fb26 	bl	8011d5a <__retarget_lock_release_recursive>
 801470e:	e7dd      	b.n	80146cc <_fflush_r+0xc>

08014710 <strncmp>:
 8014710:	b510      	push	{r4, lr}
 8014712:	b16a      	cbz	r2, 8014730 <strncmp+0x20>
 8014714:	3901      	subs	r1, #1
 8014716:	1884      	adds	r4, r0, r2
 8014718:	f810 2b01 	ldrb.w	r2, [r0], #1
 801471c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014720:	429a      	cmp	r2, r3
 8014722:	d103      	bne.n	801472c <strncmp+0x1c>
 8014724:	42a0      	cmp	r0, r4
 8014726:	d001      	beq.n	801472c <strncmp+0x1c>
 8014728:	2a00      	cmp	r2, #0
 801472a:	d1f5      	bne.n	8014718 <strncmp+0x8>
 801472c:	1ad0      	subs	r0, r2, r3
 801472e:	bd10      	pop	{r4, pc}
 8014730:	4610      	mov	r0, r2
 8014732:	e7fc      	b.n	801472e <strncmp+0x1e>

08014734 <_sbrk_r>:
 8014734:	b538      	push	{r3, r4, r5, lr}
 8014736:	4d06      	ldr	r5, [pc, #24]	; (8014750 <_sbrk_r+0x1c>)
 8014738:	2300      	movs	r3, #0
 801473a:	4604      	mov	r4, r0
 801473c:	4608      	mov	r0, r1
 801473e:	602b      	str	r3, [r5, #0]
 8014740:	f7ed fd22 	bl	8002188 <_sbrk>
 8014744:	1c43      	adds	r3, r0, #1
 8014746:	d102      	bne.n	801474e <_sbrk_r+0x1a>
 8014748:	682b      	ldr	r3, [r5, #0]
 801474a:	b103      	cbz	r3, 801474e <_sbrk_r+0x1a>
 801474c:	6023      	str	r3, [r4, #0]
 801474e:	bd38      	pop	{r3, r4, r5, pc}
 8014750:	2000e41c 	.word	0x2000e41c
 8014754:	00000000 	.word	0x00000000

08014758 <nan>:
 8014758:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014760 <nan+0x8>
 801475c:	4770      	bx	lr
 801475e:	bf00      	nop
 8014760:	00000000 	.word	0x00000000
 8014764:	7ff80000 	.word	0x7ff80000

08014768 <__assert_func>:
 8014768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801476a:	4614      	mov	r4, r2
 801476c:	461a      	mov	r2, r3
 801476e:	4b09      	ldr	r3, [pc, #36]	; (8014794 <__assert_func+0x2c>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	4605      	mov	r5, r0
 8014774:	68d8      	ldr	r0, [r3, #12]
 8014776:	b14c      	cbz	r4, 801478c <__assert_func+0x24>
 8014778:	4b07      	ldr	r3, [pc, #28]	; (8014798 <__assert_func+0x30>)
 801477a:	9100      	str	r1, [sp, #0]
 801477c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014780:	4906      	ldr	r1, [pc, #24]	; (801479c <__assert_func+0x34>)
 8014782:	462b      	mov	r3, r5
 8014784:	f000 fbca 	bl	8014f1c <fiprintf>
 8014788:	f000 fbda 	bl	8014f40 <abort>
 801478c:	4b04      	ldr	r3, [pc, #16]	; (80147a0 <__assert_func+0x38>)
 801478e:	461c      	mov	r4, r3
 8014790:	e7f3      	b.n	801477a <__assert_func+0x12>
 8014792:	bf00      	nop
 8014794:	20000164 	.word	0x20000164
 8014798:	08015aca 	.word	0x08015aca
 801479c:	08015ad7 	.word	0x08015ad7
 80147a0:	08015b05 	.word	0x08015b05

080147a4 <_calloc_r>:
 80147a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147a6:	fba1 2402 	umull	r2, r4, r1, r2
 80147aa:	b94c      	cbnz	r4, 80147c0 <_calloc_r+0x1c>
 80147ac:	4611      	mov	r1, r2
 80147ae:	9201      	str	r2, [sp, #4]
 80147b0:	f7fe f9d8 	bl	8012b64 <_malloc_r>
 80147b4:	9a01      	ldr	r2, [sp, #4]
 80147b6:	4605      	mov	r5, r0
 80147b8:	b930      	cbnz	r0, 80147c8 <_calloc_r+0x24>
 80147ba:	4628      	mov	r0, r5
 80147bc:	b003      	add	sp, #12
 80147be:	bd30      	pop	{r4, r5, pc}
 80147c0:	220c      	movs	r2, #12
 80147c2:	6002      	str	r2, [r0, #0]
 80147c4:	2500      	movs	r5, #0
 80147c6:	e7f8      	b.n	80147ba <_calloc_r+0x16>
 80147c8:	4621      	mov	r1, r4
 80147ca:	f7fd fa48 	bl	8011c5e <memset>
 80147ce:	e7f4      	b.n	80147ba <_calloc_r+0x16>

080147d0 <rshift>:
 80147d0:	6903      	ldr	r3, [r0, #16]
 80147d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80147d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147da:	ea4f 1261 	mov.w	r2, r1, asr #5
 80147de:	f100 0414 	add.w	r4, r0, #20
 80147e2:	dd45      	ble.n	8014870 <rshift+0xa0>
 80147e4:	f011 011f 	ands.w	r1, r1, #31
 80147e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80147ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80147f0:	d10c      	bne.n	801480c <rshift+0x3c>
 80147f2:	f100 0710 	add.w	r7, r0, #16
 80147f6:	4629      	mov	r1, r5
 80147f8:	42b1      	cmp	r1, r6
 80147fa:	d334      	bcc.n	8014866 <rshift+0x96>
 80147fc:	1a9b      	subs	r3, r3, r2
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	1eea      	subs	r2, r5, #3
 8014802:	4296      	cmp	r6, r2
 8014804:	bf38      	it	cc
 8014806:	2300      	movcc	r3, #0
 8014808:	4423      	add	r3, r4
 801480a:	e015      	b.n	8014838 <rshift+0x68>
 801480c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014810:	f1c1 0820 	rsb	r8, r1, #32
 8014814:	40cf      	lsrs	r7, r1
 8014816:	f105 0e04 	add.w	lr, r5, #4
 801481a:	46a1      	mov	r9, r4
 801481c:	4576      	cmp	r6, lr
 801481e:	46f4      	mov	ip, lr
 8014820:	d815      	bhi.n	801484e <rshift+0x7e>
 8014822:	1a9a      	subs	r2, r3, r2
 8014824:	0092      	lsls	r2, r2, #2
 8014826:	3a04      	subs	r2, #4
 8014828:	3501      	adds	r5, #1
 801482a:	42ae      	cmp	r6, r5
 801482c:	bf38      	it	cc
 801482e:	2200      	movcc	r2, #0
 8014830:	18a3      	adds	r3, r4, r2
 8014832:	50a7      	str	r7, [r4, r2]
 8014834:	b107      	cbz	r7, 8014838 <rshift+0x68>
 8014836:	3304      	adds	r3, #4
 8014838:	1b1a      	subs	r2, r3, r4
 801483a:	42a3      	cmp	r3, r4
 801483c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014840:	bf08      	it	eq
 8014842:	2300      	moveq	r3, #0
 8014844:	6102      	str	r2, [r0, #16]
 8014846:	bf08      	it	eq
 8014848:	6143      	streq	r3, [r0, #20]
 801484a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801484e:	f8dc c000 	ldr.w	ip, [ip]
 8014852:	fa0c fc08 	lsl.w	ip, ip, r8
 8014856:	ea4c 0707 	orr.w	r7, ip, r7
 801485a:	f849 7b04 	str.w	r7, [r9], #4
 801485e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014862:	40cf      	lsrs	r7, r1
 8014864:	e7da      	b.n	801481c <rshift+0x4c>
 8014866:	f851 cb04 	ldr.w	ip, [r1], #4
 801486a:	f847 cf04 	str.w	ip, [r7, #4]!
 801486e:	e7c3      	b.n	80147f8 <rshift+0x28>
 8014870:	4623      	mov	r3, r4
 8014872:	e7e1      	b.n	8014838 <rshift+0x68>

08014874 <__hexdig_fun>:
 8014874:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014878:	2b09      	cmp	r3, #9
 801487a:	d802      	bhi.n	8014882 <__hexdig_fun+0xe>
 801487c:	3820      	subs	r0, #32
 801487e:	b2c0      	uxtb	r0, r0
 8014880:	4770      	bx	lr
 8014882:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014886:	2b05      	cmp	r3, #5
 8014888:	d801      	bhi.n	801488e <__hexdig_fun+0x1a>
 801488a:	3847      	subs	r0, #71	; 0x47
 801488c:	e7f7      	b.n	801487e <__hexdig_fun+0xa>
 801488e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014892:	2b05      	cmp	r3, #5
 8014894:	d801      	bhi.n	801489a <__hexdig_fun+0x26>
 8014896:	3827      	subs	r0, #39	; 0x27
 8014898:	e7f1      	b.n	801487e <__hexdig_fun+0xa>
 801489a:	2000      	movs	r0, #0
 801489c:	4770      	bx	lr
	...

080148a0 <__gethex>:
 80148a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a4:	4617      	mov	r7, r2
 80148a6:	680a      	ldr	r2, [r1, #0]
 80148a8:	b085      	sub	sp, #20
 80148aa:	f102 0b02 	add.w	fp, r2, #2
 80148ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80148b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80148b6:	4681      	mov	r9, r0
 80148b8:	468a      	mov	sl, r1
 80148ba:	9302      	str	r3, [sp, #8]
 80148bc:	32fe      	adds	r2, #254	; 0xfe
 80148be:	eb02 030b 	add.w	r3, r2, fp
 80148c2:	46d8      	mov	r8, fp
 80148c4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80148c8:	9301      	str	r3, [sp, #4]
 80148ca:	2830      	cmp	r0, #48	; 0x30
 80148cc:	d0f7      	beq.n	80148be <__gethex+0x1e>
 80148ce:	f7ff ffd1 	bl	8014874 <__hexdig_fun>
 80148d2:	4604      	mov	r4, r0
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d138      	bne.n	801494a <__gethex+0xaa>
 80148d8:	49a7      	ldr	r1, [pc, #668]	; (8014b78 <__gethex+0x2d8>)
 80148da:	2201      	movs	r2, #1
 80148dc:	4640      	mov	r0, r8
 80148de:	f7ff ff17 	bl	8014710 <strncmp>
 80148e2:	4606      	mov	r6, r0
 80148e4:	2800      	cmp	r0, #0
 80148e6:	d169      	bne.n	80149bc <__gethex+0x11c>
 80148e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80148ec:	465d      	mov	r5, fp
 80148ee:	f7ff ffc1 	bl	8014874 <__hexdig_fun>
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d064      	beq.n	80149c0 <__gethex+0x120>
 80148f6:	465a      	mov	r2, fp
 80148f8:	7810      	ldrb	r0, [r2, #0]
 80148fa:	2830      	cmp	r0, #48	; 0x30
 80148fc:	4690      	mov	r8, r2
 80148fe:	f102 0201 	add.w	r2, r2, #1
 8014902:	d0f9      	beq.n	80148f8 <__gethex+0x58>
 8014904:	f7ff ffb6 	bl	8014874 <__hexdig_fun>
 8014908:	2301      	movs	r3, #1
 801490a:	fab0 f480 	clz	r4, r0
 801490e:	0964      	lsrs	r4, r4, #5
 8014910:	465e      	mov	r6, fp
 8014912:	9301      	str	r3, [sp, #4]
 8014914:	4642      	mov	r2, r8
 8014916:	4615      	mov	r5, r2
 8014918:	3201      	adds	r2, #1
 801491a:	7828      	ldrb	r0, [r5, #0]
 801491c:	f7ff ffaa 	bl	8014874 <__hexdig_fun>
 8014920:	2800      	cmp	r0, #0
 8014922:	d1f8      	bne.n	8014916 <__gethex+0x76>
 8014924:	4994      	ldr	r1, [pc, #592]	; (8014b78 <__gethex+0x2d8>)
 8014926:	2201      	movs	r2, #1
 8014928:	4628      	mov	r0, r5
 801492a:	f7ff fef1 	bl	8014710 <strncmp>
 801492e:	b978      	cbnz	r0, 8014950 <__gethex+0xb0>
 8014930:	b946      	cbnz	r6, 8014944 <__gethex+0xa4>
 8014932:	1c6e      	adds	r6, r5, #1
 8014934:	4632      	mov	r2, r6
 8014936:	4615      	mov	r5, r2
 8014938:	3201      	adds	r2, #1
 801493a:	7828      	ldrb	r0, [r5, #0]
 801493c:	f7ff ff9a 	bl	8014874 <__hexdig_fun>
 8014940:	2800      	cmp	r0, #0
 8014942:	d1f8      	bne.n	8014936 <__gethex+0x96>
 8014944:	1b73      	subs	r3, r6, r5
 8014946:	009e      	lsls	r6, r3, #2
 8014948:	e004      	b.n	8014954 <__gethex+0xb4>
 801494a:	2400      	movs	r4, #0
 801494c:	4626      	mov	r6, r4
 801494e:	e7e1      	b.n	8014914 <__gethex+0x74>
 8014950:	2e00      	cmp	r6, #0
 8014952:	d1f7      	bne.n	8014944 <__gethex+0xa4>
 8014954:	782b      	ldrb	r3, [r5, #0]
 8014956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801495a:	2b50      	cmp	r3, #80	; 0x50
 801495c:	d13d      	bne.n	80149da <__gethex+0x13a>
 801495e:	786b      	ldrb	r3, [r5, #1]
 8014960:	2b2b      	cmp	r3, #43	; 0x2b
 8014962:	d02f      	beq.n	80149c4 <__gethex+0x124>
 8014964:	2b2d      	cmp	r3, #45	; 0x2d
 8014966:	d031      	beq.n	80149cc <__gethex+0x12c>
 8014968:	1c69      	adds	r1, r5, #1
 801496a:	f04f 0b00 	mov.w	fp, #0
 801496e:	7808      	ldrb	r0, [r1, #0]
 8014970:	f7ff ff80 	bl	8014874 <__hexdig_fun>
 8014974:	1e42      	subs	r2, r0, #1
 8014976:	b2d2      	uxtb	r2, r2
 8014978:	2a18      	cmp	r2, #24
 801497a:	d82e      	bhi.n	80149da <__gethex+0x13a>
 801497c:	f1a0 0210 	sub.w	r2, r0, #16
 8014980:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014984:	f7ff ff76 	bl	8014874 <__hexdig_fun>
 8014988:	f100 3cff 	add.w	ip, r0, #4294967295
 801498c:	fa5f fc8c 	uxtb.w	ip, ip
 8014990:	f1bc 0f18 	cmp.w	ip, #24
 8014994:	d91d      	bls.n	80149d2 <__gethex+0x132>
 8014996:	f1bb 0f00 	cmp.w	fp, #0
 801499a:	d000      	beq.n	801499e <__gethex+0xfe>
 801499c:	4252      	negs	r2, r2
 801499e:	4416      	add	r6, r2
 80149a0:	f8ca 1000 	str.w	r1, [sl]
 80149a4:	b1dc      	cbz	r4, 80149de <__gethex+0x13e>
 80149a6:	9b01      	ldr	r3, [sp, #4]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	bf14      	ite	ne
 80149ac:	f04f 0800 	movne.w	r8, #0
 80149b0:	f04f 0806 	moveq.w	r8, #6
 80149b4:	4640      	mov	r0, r8
 80149b6:	b005      	add	sp, #20
 80149b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149bc:	4645      	mov	r5, r8
 80149be:	4626      	mov	r6, r4
 80149c0:	2401      	movs	r4, #1
 80149c2:	e7c7      	b.n	8014954 <__gethex+0xb4>
 80149c4:	f04f 0b00 	mov.w	fp, #0
 80149c8:	1ca9      	adds	r1, r5, #2
 80149ca:	e7d0      	b.n	801496e <__gethex+0xce>
 80149cc:	f04f 0b01 	mov.w	fp, #1
 80149d0:	e7fa      	b.n	80149c8 <__gethex+0x128>
 80149d2:	230a      	movs	r3, #10
 80149d4:	fb03 0002 	mla	r0, r3, r2, r0
 80149d8:	e7d0      	b.n	801497c <__gethex+0xdc>
 80149da:	4629      	mov	r1, r5
 80149dc:	e7e0      	b.n	80149a0 <__gethex+0x100>
 80149de:	eba5 0308 	sub.w	r3, r5, r8
 80149e2:	3b01      	subs	r3, #1
 80149e4:	4621      	mov	r1, r4
 80149e6:	2b07      	cmp	r3, #7
 80149e8:	dc0a      	bgt.n	8014a00 <__gethex+0x160>
 80149ea:	4648      	mov	r0, r9
 80149ec:	f7fe f946 	bl	8012c7c <_Balloc>
 80149f0:	4604      	mov	r4, r0
 80149f2:	b940      	cbnz	r0, 8014a06 <__gethex+0x166>
 80149f4:	4b61      	ldr	r3, [pc, #388]	; (8014b7c <__gethex+0x2dc>)
 80149f6:	4602      	mov	r2, r0
 80149f8:	21e4      	movs	r1, #228	; 0xe4
 80149fa:	4861      	ldr	r0, [pc, #388]	; (8014b80 <__gethex+0x2e0>)
 80149fc:	f7ff feb4 	bl	8014768 <__assert_func>
 8014a00:	3101      	adds	r1, #1
 8014a02:	105b      	asrs	r3, r3, #1
 8014a04:	e7ef      	b.n	80149e6 <__gethex+0x146>
 8014a06:	f100 0a14 	add.w	sl, r0, #20
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	495a      	ldr	r1, [pc, #360]	; (8014b78 <__gethex+0x2d8>)
 8014a0e:	f8cd a004 	str.w	sl, [sp, #4]
 8014a12:	469b      	mov	fp, r3
 8014a14:	45a8      	cmp	r8, r5
 8014a16:	d342      	bcc.n	8014a9e <__gethex+0x1fe>
 8014a18:	9801      	ldr	r0, [sp, #4]
 8014a1a:	f840 bb04 	str.w	fp, [r0], #4
 8014a1e:	eba0 000a 	sub.w	r0, r0, sl
 8014a22:	1080      	asrs	r0, r0, #2
 8014a24:	6120      	str	r0, [r4, #16]
 8014a26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014a2a:	4658      	mov	r0, fp
 8014a2c:	f7fe fa18 	bl	8012e60 <__hi0bits>
 8014a30:	683d      	ldr	r5, [r7, #0]
 8014a32:	eba8 0000 	sub.w	r0, r8, r0
 8014a36:	42a8      	cmp	r0, r5
 8014a38:	dd59      	ble.n	8014aee <__gethex+0x24e>
 8014a3a:	eba0 0805 	sub.w	r8, r0, r5
 8014a3e:	4641      	mov	r1, r8
 8014a40:	4620      	mov	r0, r4
 8014a42:	f7fe fda7 	bl	8013594 <__any_on>
 8014a46:	4683      	mov	fp, r0
 8014a48:	b1b8      	cbz	r0, 8014a7a <__gethex+0x1da>
 8014a4a:	f108 33ff 	add.w	r3, r8, #4294967295
 8014a4e:	1159      	asrs	r1, r3, #5
 8014a50:	f003 021f 	and.w	r2, r3, #31
 8014a54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014a58:	f04f 0b01 	mov.w	fp, #1
 8014a5c:	fa0b f202 	lsl.w	r2, fp, r2
 8014a60:	420a      	tst	r2, r1
 8014a62:	d00a      	beq.n	8014a7a <__gethex+0x1da>
 8014a64:	455b      	cmp	r3, fp
 8014a66:	dd06      	ble.n	8014a76 <__gethex+0x1d6>
 8014a68:	f1a8 0102 	sub.w	r1, r8, #2
 8014a6c:	4620      	mov	r0, r4
 8014a6e:	f7fe fd91 	bl	8013594 <__any_on>
 8014a72:	2800      	cmp	r0, #0
 8014a74:	d138      	bne.n	8014ae8 <__gethex+0x248>
 8014a76:	f04f 0b02 	mov.w	fp, #2
 8014a7a:	4641      	mov	r1, r8
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	f7ff fea7 	bl	80147d0 <rshift>
 8014a82:	4446      	add	r6, r8
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	42b3      	cmp	r3, r6
 8014a88:	da41      	bge.n	8014b0e <__gethex+0x26e>
 8014a8a:	4621      	mov	r1, r4
 8014a8c:	4648      	mov	r0, r9
 8014a8e:	f7fe f935 	bl	8012cfc <_Bfree>
 8014a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a94:	2300      	movs	r3, #0
 8014a96:	6013      	str	r3, [r2, #0]
 8014a98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014a9c:	e78a      	b.n	80149b4 <__gethex+0x114>
 8014a9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014aa2:	2a2e      	cmp	r2, #46	; 0x2e
 8014aa4:	d014      	beq.n	8014ad0 <__gethex+0x230>
 8014aa6:	2b20      	cmp	r3, #32
 8014aa8:	d106      	bne.n	8014ab8 <__gethex+0x218>
 8014aaa:	9b01      	ldr	r3, [sp, #4]
 8014aac:	f843 bb04 	str.w	fp, [r3], #4
 8014ab0:	f04f 0b00 	mov.w	fp, #0
 8014ab4:	9301      	str	r3, [sp, #4]
 8014ab6:	465b      	mov	r3, fp
 8014ab8:	7828      	ldrb	r0, [r5, #0]
 8014aba:	9303      	str	r3, [sp, #12]
 8014abc:	f7ff feda 	bl	8014874 <__hexdig_fun>
 8014ac0:	9b03      	ldr	r3, [sp, #12]
 8014ac2:	f000 000f 	and.w	r0, r0, #15
 8014ac6:	4098      	lsls	r0, r3
 8014ac8:	ea4b 0b00 	orr.w	fp, fp, r0
 8014acc:	3304      	adds	r3, #4
 8014ace:	e7a1      	b.n	8014a14 <__gethex+0x174>
 8014ad0:	45a8      	cmp	r8, r5
 8014ad2:	d8e8      	bhi.n	8014aa6 <__gethex+0x206>
 8014ad4:	2201      	movs	r2, #1
 8014ad6:	4628      	mov	r0, r5
 8014ad8:	9303      	str	r3, [sp, #12]
 8014ada:	f7ff fe19 	bl	8014710 <strncmp>
 8014ade:	4926      	ldr	r1, [pc, #152]	; (8014b78 <__gethex+0x2d8>)
 8014ae0:	9b03      	ldr	r3, [sp, #12]
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	d1df      	bne.n	8014aa6 <__gethex+0x206>
 8014ae6:	e795      	b.n	8014a14 <__gethex+0x174>
 8014ae8:	f04f 0b03 	mov.w	fp, #3
 8014aec:	e7c5      	b.n	8014a7a <__gethex+0x1da>
 8014aee:	da0b      	bge.n	8014b08 <__gethex+0x268>
 8014af0:	eba5 0800 	sub.w	r8, r5, r0
 8014af4:	4621      	mov	r1, r4
 8014af6:	4642      	mov	r2, r8
 8014af8:	4648      	mov	r0, r9
 8014afa:	f7fe fb19 	bl	8013130 <__lshift>
 8014afe:	eba6 0608 	sub.w	r6, r6, r8
 8014b02:	4604      	mov	r4, r0
 8014b04:	f100 0a14 	add.w	sl, r0, #20
 8014b08:	f04f 0b00 	mov.w	fp, #0
 8014b0c:	e7ba      	b.n	8014a84 <__gethex+0x1e4>
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	42b3      	cmp	r3, r6
 8014b12:	dd73      	ble.n	8014bfc <__gethex+0x35c>
 8014b14:	1b9e      	subs	r6, r3, r6
 8014b16:	42b5      	cmp	r5, r6
 8014b18:	dc34      	bgt.n	8014b84 <__gethex+0x2e4>
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	2b02      	cmp	r3, #2
 8014b1e:	d023      	beq.n	8014b68 <__gethex+0x2c8>
 8014b20:	2b03      	cmp	r3, #3
 8014b22:	d025      	beq.n	8014b70 <__gethex+0x2d0>
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d115      	bne.n	8014b54 <__gethex+0x2b4>
 8014b28:	42b5      	cmp	r5, r6
 8014b2a:	d113      	bne.n	8014b54 <__gethex+0x2b4>
 8014b2c:	2d01      	cmp	r5, #1
 8014b2e:	d10b      	bne.n	8014b48 <__gethex+0x2a8>
 8014b30:	9a02      	ldr	r2, [sp, #8]
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	6013      	str	r3, [r2, #0]
 8014b36:	2301      	movs	r3, #1
 8014b38:	6123      	str	r3, [r4, #16]
 8014b3a:	f8ca 3000 	str.w	r3, [sl]
 8014b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b40:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014b44:	601c      	str	r4, [r3, #0]
 8014b46:	e735      	b.n	80149b4 <__gethex+0x114>
 8014b48:	1e69      	subs	r1, r5, #1
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f7fe fd22 	bl	8013594 <__any_on>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	d1ed      	bne.n	8014b30 <__gethex+0x290>
 8014b54:	4621      	mov	r1, r4
 8014b56:	4648      	mov	r0, r9
 8014b58:	f7fe f8d0 	bl	8012cfc <_Bfree>
 8014b5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b5e:	2300      	movs	r3, #0
 8014b60:	6013      	str	r3, [r2, #0]
 8014b62:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014b66:	e725      	b.n	80149b4 <__gethex+0x114>
 8014b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d1f2      	bne.n	8014b54 <__gethex+0x2b4>
 8014b6e:	e7df      	b.n	8014b30 <__gethex+0x290>
 8014b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d1dc      	bne.n	8014b30 <__gethex+0x290>
 8014b76:	e7ed      	b.n	8014b54 <__gethex+0x2b4>
 8014b78:	0801595c 	.word	0x0801595c
 8014b7c:	080157f3 	.word	0x080157f3
 8014b80:	08015b06 	.word	0x08015b06
 8014b84:	f106 38ff 	add.w	r8, r6, #4294967295
 8014b88:	f1bb 0f00 	cmp.w	fp, #0
 8014b8c:	d133      	bne.n	8014bf6 <__gethex+0x356>
 8014b8e:	f1b8 0f00 	cmp.w	r8, #0
 8014b92:	d004      	beq.n	8014b9e <__gethex+0x2fe>
 8014b94:	4641      	mov	r1, r8
 8014b96:	4620      	mov	r0, r4
 8014b98:	f7fe fcfc 	bl	8013594 <__any_on>
 8014b9c:	4683      	mov	fp, r0
 8014b9e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014ba8:	f008 081f 	and.w	r8, r8, #31
 8014bac:	fa03 f308 	lsl.w	r3, r3, r8
 8014bb0:	4213      	tst	r3, r2
 8014bb2:	4631      	mov	r1, r6
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	bf18      	it	ne
 8014bb8:	f04b 0b02 	orrne.w	fp, fp, #2
 8014bbc:	1bad      	subs	r5, r5, r6
 8014bbe:	f7ff fe07 	bl	80147d0 <rshift>
 8014bc2:	687e      	ldr	r6, [r7, #4]
 8014bc4:	f04f 0802 	mov.w	r8, #2
 8014bc8:	f1bb 0f00 	cmp.w	fp, #0
 8014bcc:	d04a      	beq.n	8014c64 <__gethex+0x3c4>
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	2b02      	cmp	r3, #2
 8014bd2:	d016      	beq.n	8014c02 <__gethex+0x362>
 8014bd4:	2b03      	cmp	r3, #3
 8014bd6:	d018      	beq.n	8014c0a <__gethex+0x36a>
 8014bd8:	2b01      	cmp	r3, #1
 8014bda:	d109      	bne.n	8014bf0 <__gethex+0x350>
 8014bdc:	f01b 0f02 	tst.w	fp, #2
 8014be0:	d006      	beq.n	8014bf0 <__gethex+0x350>
 8014be2:	f8da 3000 	ldr.w	r3, [sl]
 8014be6:	ea4b 0b03 	orr.w	fp, fp, r3
 8014bea:	f01b 0f01 	tst.w	fp, #1
 8014bee:	d10f      	bne.n	8014c10 <__gethex+0x370>
 8014bf0:	f048 0810 	orr.w	r8, r8, #16
 8014bf4:	e036      	b.n	8014c64 <__gethex+0x3c4>
 8014bf6:	f04f 0b01 	mov.w	fp, #1
 8014bfa:	e7d0      	b.n	8014b9e <__gethex+0x2fe>
 8014bfc:	f04f 0801 	mov.w	r8, #1
 8014c00:	e7e2      	b.n	8014bc8 <__gethex+0x328>
 8014c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c04:	f1c3 0301 	rsb	r3, r3, #1
 8014c08:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d0ef      	beq.n	8014bf0 <__gethex+0x350>
 8014c10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014c14:	f104 0214 	add.w	r2, r4, #20
 8014c18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014c1c:	9301      	str	r3, [sp, #4]
 8014c1e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014c22:	2300      	movs	r3, #0
 8014c24:	4694      	mov	ip, r2
 8014c26:	f852 1b04 	ldr.w	r1, [r2], #4
 8014c2a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014c2e:	d01e      	beq.n	8014c6e <__gethex+0x3ce>
 8014c30:	3101      	adds	r1, #1
 8014c32:	f8cc 1000 	str.w	r1, [ip]
 8014c36:	f1b8 0f02 	cmp.w	r8, #2
 8014c3a:	f104 0214 	add.w	r2, r4, #20
 8014c3e:	d13d      	bne.n	8014cbc <__gethex+0x41c>
 8014c40:	683b      	ldr	r3, [r7, #0]
 8014c42:	3b01      	subs	r3, #1
 8014c44:	42ab      	cmp	r3, r5
 8014c46:	d10b      	bne.n	8014c60 <__gethex+0x3c0>
 8014c48:	1169      	asrs	r1, r5, #5
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	f005 051f 	and.w	r5, r5, #31
 8014c50:	fa03 f505 	lsl.w	r5, r3, r5
 8014c54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c58:	421d      	tst	r5, r3
 8014c5a:	bf18      	it	ne
 8014c5c:	f04f 0801 	movne.w	r8, #1
 8014c60:	f048 0820 	orr.w	r8, r8, #32
 8014c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c66:	601c      	str	r4, [r3, #0]
 8014c68:	9b02      	ldr	r3, [sp, #8]
 8014c6a:	601e      	str	r6, [r3, #0]
 8014c6c:	e6a2      	b.n	80149b4 <__gethex+0x114>
 8014c6e:	4290      	cmp	r0, r2
 8014c70:	f842 3c04 	str.w	r3, [r2, #-4]
 8014c74:	d8d6      	bhi.n	8014c24 <__gethex+0x384>
 8014c76:	68a2      	ldr	r2, [r4, #8]
 8014c78:	4593      	cmp	fp, r2
 8014c7a:	db17      	blt.n	8014cac <__gethex+0x40c>
 8014c7c:	6861      	ldr	r1, [r4, #4]
 8014c7e:	4648      	mov	r0, r9
 8014c80:	3101      	adds	r1, #1
 8014c82:	f7fd fffb 	bl	8012c7c <_Balloc>
 8014c86:	4682      	mov	sl, r0
 8014c88:	b918      	cbnz	r0, 8014c92 <__gethex+0x3f2>
 8014c8a:	4b1b      	ldr	r3, [pc, #108]	; (8014cf8 <__gethex+0x458>)
 8014c8c:	4602      	mov	r2, r0
 8014c8e:	2184      	movs	r1, #132	; 0x84
 8014c90:	e6b3      	b.n	80149fa <__gethex+0x15a>
 8014c92:	6922      	ldr	r2, [r4, #16]
 8014c94:	3202      	adds	r2, #2
 8014c96:	f104 010c 	add.w	r1, r4, #12
 8014c9a:	0092      	lsls	r2, r2, #2
 8014c9c:	300c      	adds	r0, #12
 8014c9e:	f7fd f85d 	bl	8011d5c <memcpy>
 8014ca2:	4621      	mov	r1, r4
 8014ca4:	4648      	mov	r0, r9
 8014ca6:	f7fe f829 	bl	8012cfc <_Bfree>
 8014caa:	4654      	mov	r4, sl
 8014cac:	6922      	ldr	r2, [r4, #16]
 8014cae:	1c51      	adds	r1, r2, #1
 8014cb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014cb4:	6121      	str	r1, [r4, #16]
 8014cb6:	2101      	movs	r1, #1
 8014cb8:	6151      	str	r1, [r2, #20]
 8014cba:	e7bc      	b.n	8014c36 <__gethex+0x396>
 8014cbc:	6921      	ldr	r1, [r4, #16]
 8014cbe:	4559      	cmp	r1, fp
 8014cc0:	dd0b      	ble.n	8014cda <__gethex+0x43a>
 8014cc2:	2101      	movs	r1, #1
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	f7ff fd83 	bl	80147d0 <rshift>
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	3601      	adds	r6, #1
 8014cce:	42b3      	cmp	r3, r6
 8014cd0:	f6ff aedb 	blt.w	8014a8a <__gethex+0x1ea>
 8014cd4:	f04f 0801 	mov.w	r8, #1
 8014cd8:	e7c2      	b.n	8014c60 <__gethex+0x3c0>
 8014cda:	f015 051f 	ands.w	r5, r5, #31
 8014cde:	d0f9      	beq.n	8014cd4 <__gethex+0x434>
 8014ce0:	9b01      	ldr	r3, [sp, #4]
 8014ce2:	441a      	add	r2, r3
 8014ce4:	f1c5 0520 	rsb	r5, r5, #32
 8014ce8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014cec:	f7fe f8b8 	bl	8012e60 <__hi0bits>
 8014cf0:	42a8      	cmp	r0, r5
 8014cf2:	dbe6      	blt.n	8014cc2 <__gethex+0x422>
 8014cf4:	e7ee      	b.n	8014cd4 <__gethex+0x434>
 8014cf6:	bf00      	nop
 8014cf8:	080157f3 	.word	0x080157f3

08014cfc <L_shift>:
 8014cfc:	f1c2 0208 	rsb	r2, r2, #8
 8014d00:	0092      	lsls	r2, r2, #2
 8014d02:	b570      	push	{r4, r5, r6, lr}
 8014d04:	f1c2 0620 	rsb	r6, r2, #32
 8014d08:	6843      	ldr	r3, [r0, #4]
 8014d0a:	6804      	ldr	r4, [r0, #0]
 8014d0c:	fa03 f506 	lsl.w	r5, r3, r6
 8014d10:	432c      	orrs	r4, r5
 8014d12:	40d3      	lsrs	r3, r2
 8014d14:	6004      	str	r4, [r0, #0]
 8014d16:	f840 3f04 	str.w	r3, [r0, #4]!
 8014d1a:	4288      	cmp	r0, r1
 8014d1c:	d3f4      	bcc.n	8014d08 <L_shift+0xc>
 8014d1e:	bd70      	pop	{r4, r5, r6, pc}

08014d20 <__match>:
 8014d20:	b530      	push	{r4, r5, lr}
 8014d22:	6803      	ldr	r3, [r0, #0]
 8014d24:	3301      	adds	r3, #1
 8014d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d2a:	b914      	cbnz	r4, 8014d32 <__match+0x12>
 8014d2c:	6003      	str	r3, [r0, #0]
 8014d2e:	2001      	movs	r0, #1
 8014d30:	bd30      	pop	{r4, r5, pc}
 8014d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014d3a:	2d19      	cmp	r5, #25
 8014d3c:	bf98      	it	ls
 8014d3e:	3220      	addls	r2, #32
 8014d40:	42a2      	cmp	r2, r4
 8014d42:	d0f0      	beq.n	8014d26 <__match+0x6>
 8014d44:	2000      	movs	r0, #0
 8014d46:	e7f3      	b.n	8014d30 <__match+0x10>

08014d48 <__hexnan>:
 8014d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4c:	680b      	ldr	r3, [r1, #0]
 8014d4e:	6801      	ldr	r1, [r0, #0]
 8014d50:	115e      	asrs	r6, r3, #5
 8014d52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014d56:	f013 031f 	ands.w	r3, r3, #31
 8014d5a:	b087      	sub	sp, #28
 8014d5c:	bf18      	it	ne
 8014d5e:	3604      	addne	r6, #4
 8014d60:	2500      	movs	r5, #0
 8014d62:	1f37      	subs	r7, r6, #4
 8014d64:	4682      	mov	sl, r0
 8014d66:	4690      	mov	r8, r2
 8014d68:	9301      	str	r3, [sp, #4]
 8014d6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014d6e:	46b9      	mov	r9, r7
 8014d70:	463c      	mov	r4, r7
 8014d72:	9502      	str	r5, [sp, #8]
 8014d74:	46ab      	mov	fp, r5
 8014d76:	784a      	ldrb	r2, [r1, #1]
 8014d78:	1c4b      	adds	r3, r1, #1
 8014d7a:	9303      	str	r3, [sp, #12]
 8014d7c:	b342      	cbz	r2, 8014dd0 <__hexnan+0x88>
 8014d7e:	4610      	mov	r0, r2
 8014d80:	9105      	str	r1, [sp, #20]
 8014d82:	9204      	str	r2, [sp, #16]
 8014d84:	f7ff fd76 	bl	8014874 <__hexdig_fun>
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	d14f      	bne.n	8014e2c <__hexnan+0xe4>
 8014d8c:	9a04      	ldr	r2, [sp, #16]
 8014d8e:	9905      	ldr	r1, [sp, #20]
 8014d90:	2a20      	cmp	r2, #32
 8014d92:	d818      	bhi.n	8014dc6 <__hexnan+0x7e>
 8014d94:	9b02      	ldr	r3, [sp, #8]
 8014d96:	459b      	cmp	fp, r3
 8014d98:	dd13      	ble.n	8014dc2 <__hexnan+0x7a>
 8014d9a:	454c      	cmp	r4, r9
 8014d9c:	d206      	bcs.n	8014dac <__hexnan+0x64>
 8014d9e:	2d07      	cmp	r5, #7
 8014da0:	dc04      	bgt.n	8014dac <__hexnan+0x64>
 8014da2:	462a      	mov	r2, r5
 8014da4:	4649      	mov	r1, r9
 8014da6:	4620      	mov	r0, r4
 8014da8:	f7ff ffa8 	bl	8014cfc <L_shift>
 8014dac:	4544      	cmp	r4, r8
 8014dae:	d950      	bls.n	8014e52 <__hexnan+0x10a>
 8014db0:	2300      	movs	r3, #0
 8014db2:	f1a4 0904 	sub.w	r9, r4, #4
 8014db6:	f844 3c04 	str.w	r3, [r4, #-4]
 8014dba:	f8cd b008 	str.w	fp, [sp, #8]
 8014dbe:	464c      	mov	r4, r9
 8014dc0:	461d      	mov	r5, r3
 8014dc2:	9903      	ldr	r1, [sp, #12]
 8014dc4:	e7d7      	b.n	8014d76 <__hexnan+0x2e>
 8014dc6:	2a29      	cmp	r2, #41	; 0x29
 8014dc8:	d155      	bne.n	8014e76 <__hexnan+0x12e>
 8014dca:	3102      	adds	r1, #2
 8014dcc:	f8ca 1000 	str.w	r1, [sl]
 8014dd0:	f1bb 0f00 	cmp.w	fp, #0
 8014dd4:	d04f      	beq.n	8014e76 <__hexnan+0x12e>
 8014dd6:	454c      	cmp	r4, r9
 8014dd8:	d206      	bcs.n	8014de8 <__hexnan+0xa0>
 8014dda:	2d07      	cmp	r5, #7
 8014ddc:	dc04      	bgt.n	8014de8 <__hexnan+0xa0>
 8014dde:	462a      	mov	r2, r5
 8014de0:	4649      	mov	r1, r9
 8014de2:	4620      	mov	r0, r4
 8014de4:	f7ff ff8a 	bl	8014cfc <L_shift>
 8014de8:	4544      	cmp	r4, r8
 8014dea:	d934      	bls.n	8014e56 <__hexnan+0x10e>
 8014dec:	f1a8 0204 	sub.w	r2, r8, #4
 8014df0:	4623      	mov	r3, r4
 8014df2:	f853 1b04 	ldr.w	r1, [r3], #4
 8014df6:	f842 1f04 	str.w	r1, [r2, #4]!
 8014dfa:	429f      	cmp	r7, r3
 8014dfc:	d2f9      	bcs.n	8014df2 <__hexnan+0xaa>
 8014dfe:	1b3b      	subs	r3, r7, r4
 8014e00:	f023 0303 	bic.w	r3, r3, #3
 8014e04:	3304      	adds	r3, #4
 8014e06:	3e03      	subs	r6, #3
 8014e08:	3401      	adds	r4, #1
 8014e0a:	42a6      	cmp	r6, r4
 8014e0c:	bf38      	it	cc
 8014e0e:	2304      	movcc	r3, #4
 8014e10:	4443      	add	r3, r8
 8014e12:	2200      	movs	r2, #0
 8014e14:	f843 2b04 	str.w	r2, [r3], #4
 8014e18:	429f      	cmp	r7, r3
 8014e1a:	d2fb      	bcs.n	8014e14 <__hexnan+0xcc>
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	b91b      	cbnz	r3, 8014e28 <__hexnan+0xe0>
 8014e20:	4547      	cmp	r7, r8
 8014e22:	d126      	bne.n	8014e72 <__hexnan+0x12a>
 8014e24:	2301      	movs	r3, #1
 8014e26:	603b      	str	r3, [r7, #0]
 8014e28:	2005      	movs	r0, #5
 8014e2a:	e025      	b.n	8014e78 <__hexnan+0x130>
 8014e2c:	3501      	adds	r5, #1
 8014e2e:	2d08      	cmp	r5, #8
 8014e30:	f10b 0b01 	add.w	fp, fp, #1
 8014e34:	dd06      	ble.n	8014e44 <__hexnan+0xfc>
 8014e36:	4544      	cmp	r4, r8
 8014e38:	d9c3      	bls.n	8014dc2 <__hexnan+0x7a>
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e40:	2501      	movs	r5, #1
 8014e42:	3c04      	subs	r4, #4
 8014e44:	6822      	ldr	r2, [r4, #0]
 8014e46:	f000 000f 	and.w	r0, r0, #15
 8014e4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014e4e:	6020      	str	r0, [r4, #0]
 8014e50:	e7b7      	b.n	8014dc2 <__hexnan+0x7a>
 8014e52:	2508      	movs	r5, #8
 8014e54:	e7b5      	b.n	8014dc2 <__hexnan+0x7a>
 8014e56:	9b01      	ldr	r3, [sp, #4]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d0df      	beq.n	8014e1c <__hexnan+0xd4>
 8014e5c:	f1c3 0320 	rsb	r3, r3, #32
 8014e60:	f04f 32ff 	mov.w	r2, #4294967295
 8014e64:	40da      	lsrs	r2, r3
 8014e66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014e6a:	4013      	ands	r3, r2
 8014e6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8014e70:	e7d4      	b.n	8014e1c <__hexnan+0xd4>
 8014e72:	3f04      	subs	r7, #4
 8014e74:	e7d2      	b.n	8014e1c <__hexnan+0xd4>
 8014e76:	2004      	movs	r0, #4
 8014e78:	b007      	add	sp, #28
 8014e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e7e <__ascii_mbtowc>:
 8014e7e:	b082      	sub	sp, #8
 8014e80:	b901      	cbnz	r1, 8014e84 <__ascii_mbtowc+0x6>
 8014e82:	a901      	add	r1, sp, #4
 8014e84:	b142      	cbz	r2, 8014e98 <__ascii_mbtowc+0x1a>
 8014e86:	b14b      	cbz	r3, 8014e9c <__ascii_mbtowc+0x1e>
 8014e88:	7813      	ldrb	r3, [r2, #0]
 8014e8a:	600b      	str	r3, [r1, #0]
 8014e8c:	7812      	ldrb	r2, [r2, #0]
 8014e8e:	1e10      	subs	r0, r2, #0
 8014e90:	bf18      	it	ne
 8014e92:	2001      	movne	r0, #1
 8014e94:	b002      	add	sp, #8
 8014e96:	4770      	bx	lr
 8014e98:	4610      	mov	r0, r2
 8014e9a:	e7fb      	b.n	8014e94 <__ascii_mbtowc+0x16>
 8014e9c:	f06f 0001 	mvn.w	r0, #1
 8014ea0:	e7f8      	b.n	8014e94 <__ascii_mbtowc+0x16>

08014ea2 <_realloc_r>:
 8014ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ea6:	4680      	mov	r8, r0
 8014ea8:	4614      	mov	r4, r2
 8014eaa:	460e      	mov	r6, r1
 8014eac:	b921      	cbnz	r1, 8014eb8 <_realloc_r+0x16>
 8014eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb2:	4611      	mov	r1, r2
 8014eb4:	f7fd be56 	b.w	8012b64 <_malloc_r>
 8014eb8:	b92a      	cbnz	r2, 8014ec6 <_realloc_r+0x24>
 8014eba:	f7fd fddf 	bl	8012a7c <_free_r>
 8014ebe:	4625      	mov	r5, r4
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ec6:	f000 f842 	bl	8014f4e <_malloc_usable_size_r>
 8014eca:	4284      	cmp	r4, r0
 8014ecc:	4607      	mov	r7, r0
 8014ece:	d802      	bhi.n	8014ed6 <_realloc_r+0x34>
 8014ed0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014ed4:	d812      	bhi.n	8014efc <_realloc_r+0x5a>
 8014ed6:	4621      	mov	r1, r4
 8014ed8:	4640      	mov	r0, r8
 8014eda:	f7fd fe43 	bl	8012b64 <_malloc_r>
 8014ede:	4605      	mov	r5, r0
 8014ee0:	2800      	cmp	r0, #0
 8014ee2:	d0ed      	beq.n	8014ec0 <_realloc_r+0x1e>
 8014ee4:	42bc      	cmp	r4, r7
 8014ee6:	4622      	mov	r2, r4
 8014ee8:	4631      	mov	r1, r6
 8014eea:	bf28      	it	cs
 8014eec:	463a      	movcs	r2, r7
 8014eee:	f7fc ff35 	bl	8011d5c <memcpy>
 8014ef2:	4631      	mov	r1, r6
 8014ef4:	4640      	mov	r0, r8
 8014ef6:	f7fd fdc1 	bl	8012a7c <_free_r>
 8014efa:	e7e1      	b.n	8014ec0 <_realloc_r+0x1e>
 8014efc:	4635      	mov	r5, r6
 8014efe:	e7df      	b.n	8014ec0 <_realloc_r+0x1e>

08014f00 <__ascii_wctomb>:
 8014f00:	b149      	cbz	r1, 8014f16 <__ascii_wctomb+0x16>
 8014f02:	2aff      	cmp	r2, #255	; 0xff
 8014f04:	bf85      	ittet	hi
 8014f06:	238a      	movhi	r3, #138	; 0x8a
 8014f08:	6003      	strhi	r3, [r0, #0]
 8014f0a:	700a      	strbls	r2, [r1, #0]
 8014f0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014f10:	bf98      	it	ls
 8014f12:	2001      	movls	r0, #1
 8014f14:	4770      	bx	lr
 8014f16:	4608      	mov	r0, r1
 8014f18:	4770      	bx	lr
	...

08014f1c <fiprintf>:
 8014f1c:	b40e      	push	{r1, r2, r3}
 8014f1e:	b503      	push	{r0, r1, lr}
 8014f20:	4601      	mov	r1, r0
 8014f22:	ab03      	add	r3, sp, #12
 8014f24:	4805      	ldr	r0, [pc, #20]	; (8014f3c <fiprintf+0x20>)
 8014f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f2a:	6800      	ldr	r0, [r0, #0]
 8014f2c:	9301      	str	r3, [sp, #4]
 8014f2e:	f000 f83f 	bl	8014fb0 <_vfiprintf_r>
 8014f32:	b002      	add	sp, #8
 8014f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f38:	b003      	add	sp, #12
 8014f3a:	4770      	bx	lr
 8014f3c:	20000164 	.word	0x20000164

08014f40 <abort>:
 8014f40:	b508      	push	{r3, lr}
 8014f42:	2006      	movs	r0, #6
 8014f44:	f000 fa0c 	bl	8015360 <raise>
 8014f48:	2001      	movs	r0, #1
 8014f4a:	f7ed f8a5 	bl	8002098 <_exit>

08014f4e <_malloc_usable_size_r>:
 8014f4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f52:	1f18      	subs	r0, r3, #4
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	bfbc      	itt	lt
 8014f58:	580b      	ldrlt	r3, [r1, r0]
 8014f5a:	18c0      	addlt	r0, r0, r3
 8014f5c:	4770      	bx	lr

08014f5e <__sfputc_r>:
 8014f5e:	6893      	ldr	r3, [r2, #8]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	b410      	push	{r4}
 8014f66:	6093      	str	r3, [r2, #8]
 8014f68:	da08      	bge.n	8014f7c <__sfputc_r+0x1e>
 8014f6a:	6994      	ldr	r4, [r2, #24]
 8014f6c:	42a3      	cmp	r3, r4
 8014f6e:	db01      	blt.n	8014f74 <__sfputc_r+0x16>
 8014f70:	290a      	cmp	r1, #10
 8014f72:	d103      	bne.n	8014f7c <__sfputc_r+0x1e>
 8014f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f78:	f000 b934 	b.w	80151e4 <__swbuf_r>
 8014f7c:	6813      	ldr	r3, [r2, #0]
 8014f7e:	1c58      	adds	r0, r3, #1
 8014f80:	6010      	str	r0, [r2, #0]
 8014f82:	7019      	strb	r1, [r3, #0]
 8014f84:	4608      	mov	r0, r1
 8014f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f8a:	4770      	bx	lr

08014f8c <__sfputs_r>:
 8014f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f8e:	4606      	mov	r6, r0
 8014f90:	460f      	mov	r7, r1
 8014f92:	4614      	mov	r4, r2
 8014f94:	18d5      	adds	r5, r2, r3
 8014f96:	42ac      	cmp	r4, r5
 8014f98:	d101      	bne.n	8014f9e <__sfputs_r+0x12>
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	e007      	b.n	8014fae <__sfputs_r+0x22>
 8014f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fa2:	463a      	mov	r2, r7
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	f7ff ffda 	bl	8014f5e <__sfputc_r>
 8014faa:	1c43      	adds	r3, r0, #1
 8014fac:	d1f3      	bne.n	8014f96 <__sfputs_r+0xa>
 8014fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014fb0 <_vfiprintf_r>:
 8014fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb4:	460d      	mov	r5, r1
 8014fb6:	b09d      	sub	sp, #116	; 0x74
 8014fb8:	4614      	mov	r4, r2
 8014fba:	4698      	mov	r8, r3
 8014fbc:	4606      	mov	r6, r0
 8014fbe:	b118      	cbz	r0, 8014fc8 <_vfiprintf_r+0x18>
 8014fc0:	6a03      	ldr	r3, [r0, #32]
 8014fc2:	b90b      	cbnz	r3, 8014fc8 <_vfiprintf_r+0x18>
 8014fc4:	f7fc fd64 	bl	8011a90 <__sinit>
 8014fc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014fca:	07d9      	lsls	r1, r3, #31
 8014fcc:	d405      	bmi.n	8014fda <_vfiprintf_r+0x2a>
 8014fce:	89ab      	ldrh	r3, [r5, #12]
 8014fd0:	059a      	lsls	r2, r3, #22
 8014fd2:	d402      	bmi.n	8014fda <_vfiprintf_r+0x2a>
 8014fd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014fd6:	f7fc febf 	bl	8011d58 <__retarget_lock_acquire_recursive>
 8014fda:	89ab      	ldrh	r3, [r5, #12]
 8014fdc:	071b      	lsls	r3, r3, #28
 8014fde:	d501      	bpl.n	8014fe4 <_vfiprintf_r+0x34>
 8014fe0:	692b      	ldr	r3, [r5, #16]
 8014fe2:	b99b      	cbnz	r3, 801500c <_vfiprintf_r+0x5c>
 8014fe4:	4629      	mov	r1, r5
 8014fe6:	4630      	mov	r0, r6
 8014fe8:	f000 f93a 	bl	8015260 <__swsetup_r>
 8014fec:	b170      	cbz	r0, 801500c <_vfiprintf_r+0x5c>
 8014fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ff0:	07dc      	lsls	r4, r3, #31
 8014ff2:	d504      	bpl.n	8014ffe <_vfiprintf_r+0x4e>
 8014ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ff8:	b01d      	add	sp, #116	; 0x74
 8014ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ffe:	89ab      	ldrh	r3, [r5, #12]
 8015000:	0598      	lsls	r0, r3, #22
 8015002:	d4f7      	bmi.n	8014ff4 <_vfiprintf_r+0x44>
 8015004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015006:	f7fc fea8 	bl	8011d5a <__retarget_lock_release_recursive>
 801500a:	e7f3      	b.n	8014ff4 <_vfiprintf_r+0x44>
 801500c:	2300      	movs	r3, #0
 801500e:	9309      	str	r3, [sp, #36]	; 0x24
 8015010:	2320      	movs	r3, #32
 8015012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015016:	f8cd 800c 	str.w	r8, [sp, #12]
 801501a:	2330      	movs	r3, #48	; 0x30
 801501c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80151d0 <_vfiprintf_r+0x220>
 8015020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015024:	f04f 0901 	mov.w	r9, #1
 8015028:	4623      	mov	r3, r4
 801502a:	469a      	mov	sl, r3
 801502c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015030:	b10a      	cbz	r2, 8015036 <_vfiprintf_r+0x86>
 8015032:	2a25      	cmp	r2, #37	; 0x25
 8015034:	d1f9      	bne.n	801502a <_vfiprintf_r+0x7a>
 8015036:	ebba 0b04 	subs.w	fp, sl, r4
 801503a:	d00b      	beq.n	8015054 <_vfiprintf_r+0xa4>
 801503c:	465b      	mov	r3, fp
 801503e:	4622      	mov	r2, r4
 8015040:	4629      	mov	r1, r5
 8015042:	4630      	mov	r0, r6
 8015044:	f7ff ffa2 	bl	8014f8c <__sfputs_r>
 8015048:	3001      	adds	r0, #1
 801504a:	f000 80a9 	beq.w	80151a0 <_vfiprintf_r+0x1f0>
 801504e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015050:	445a      	add	r2, fp
 8015052:	9209      	str	r2, [sp, #36]	; 0x24
 8015054:	f89a 3000 	ldrb.w	r3, [sl]
 8015058:	2b00      	cmp	r3, #0
 801505a:	f000 80a1 	beq.w	80151a0 <_vfiprintf_r+0x1f0>
 801505e:	2300      	movs	r3, #0
 8015060:	f04f 32ff 	mov.w	r2, #4294967295
 8015064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015068:	f10a 0a01 	add.w	sl, sl, #1
 801506c:	9304      	str	r3, [sp, #16]
 801506e:	9307      	str	r3, [sp, #28]
 8015070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015074:	931a      	str	r3, [sp, #104]	; 0x68
 8015076:	4654      	mov	r4, sl
 8015078:	2205      	movs	r2, #5
 801507a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801507e:	4854      	ldr	r0, [pc, #336]	; (80151d0 <_vfiprintf_r+0x220>)
 8015080:	f7eb f8a6 	bl	80001d0 <memchr>
 8015084:	9a04      	ldr	r2, [sp, #16]
 8015086:	b9d8      	cbnz	r0, 80150c0 <_vfiprintf_r+0x110>
 8015088:	06d1      	lsls	r1, r2, #27
 801508a:	bf44      	itt	mi
 801508c:	2320      	movmi	r3, #32
 801508e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015092:	0713      	lsls	r3, r2, #28
 8015094:	bf44      	itt	mi
 8015096:	232b      	movmi	r3, #43	; 0x2b
 8015098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801509c:	f89a 3000 	ldrb.w	r3, [sl]
 80150a0:	2b2a      	cmp	r3, #42	; 0x2a
 80150a2:	d015      	beq.n	80150d0 <_vfiprintf_r+0x120>
 80150a4:	9a07      	ldr	r2, [sp, #28]
 80150a6:	4654      	mov	r4, sl
 80150a8:	2000      	movs	r0, #0
 80150aa:	f04f 0c0a 	mov.w	ip, #10
 80150ae:	4621      	mov	r1, r4
 80150b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150b4:	3b30      	subs	r3, #48	; 0x30
 80150b6:	2b09      	cmp	r3, #9
 80150b8:	d94d      	bls.n	8015156 <_vfiprintf_r+0x1a6>
 80150ba:	b1b0      	cbz	r0, 80150ea <_vfiprintf_r+0x13a>
 80150bc:	9207      	str	r2, [sp, #28]
 80150be:	e014      	b.n	80150ea <_vfiprintf_r+0x13a>
 80150c0:	eba0 0308 	sub.w	r3, r0, r8
 80150c4:	fa09 f303 	lsl.w	r3, r9, r3
 80150c8:	4313      	orrs	r3, r2
 80150ca:	9304      	str	r3, [sp, #16]
 80150cc:	46a2      	mov	sl, r4
 80150ce:	e7d2      	b.n	8015076 <_vfiprintf_r+0xc6>
 80150d0:	9b03      	ldr	r3, [sp, #12]
 80150d2:	1d19      	adds	r1, r3, #4
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	9103      	str	r1, [sp, #12]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	bfbb      	ittet	lt
 80150dc:	425b      	neglt	r3, r3
 80150de:	f042 0202 	orrlt.w	r2, r2, #2
 80150e2:	9307      	strge	r3, [sp, #28]
 80150e4:	9307      	strlt	r3, [sp, #28]
 80150e6:	bfb8      	it	lt
 80150e8:	9204      	strlt	r2, [sp, #16]
 80150ea:	7823      	ldrb	r3, [r4, #0]
 80150ec:	2b2e      	cmp	r3, #46	; 0x2e
 80150ee:	d10c      	bne.n	801510a <_vfiprintf_r+0x15a>
 80150f0:	7863      	ldrb	r3, [r4, #1]
 80150f2:	2b2a      	cmp	r3, #42	; 0x2a
 80150f4:	d134      	bne.n	8015160 <_vfiprintf_r+0x1b0>
 80150f6:	9b03      	ldr	r3, [sp, #12]
 80150f8:	1d1a      	adds	r2, r3, #4
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	9203      	str	r2, [sp, #12]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	bfb8      	it	lt
 8015102:	f04f 33ff 	movlt.w	r3, #4294967295
 8015106:	3402      	adds	r4, #2
 8015108:	9305      	str	r3, [sp, #20]
 801510a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80151e0 <_vfiprintf_r+0x230>
 801510e:	7821      	ldrb	r1, [r4, #0]
 8015110:	2203      	movs	r2, #3
 8015112:	4650      	mov	r0, sl
 8015114:	f7eb f85c 	bl	80001d0 <memchr>
 8015118:	b138      	cbz	r0, 801512a <_vfiprintf_r+0x17a>
 801511a:	9b04      	ldr	r3, [sp, #16]
 801511c:	eba0 000a 	sub.w	r0, r0, sl
 8015120:	2240      	movs	r2, #64	; 0x40
 8015122:	4082      	lsls	r2, r0
 8015124:	4313      	orrs	r3, r2
 8015126:	3401      	adds	r4, #1
 8015128:	9304      	str	r3, [sp, #16]
 801512a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801512e:	4829      	ldr	r0, [pc, #164]	; (80151d4 <_vfiprintf_r+0x224>)
 8015130:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015134:	2206      	movs	r2, #6
 8015136:	f7eb f84b 	bl	80001d0 <memchr>
 801513a:	2800      	cmp	r0, #0
 801513c:	d03f      	beq.n	80151be <_vfiprintf_r+0x20e>
 801513e:	4b26      	ldr	r3, [pc, #152]	; (80151d8 <_vfiprintf_r+0x228>)
 8015140:	bb1b      	cbnz	r3, 801518a <_vfiprintf_r+0x1da>
 8015142:	9b03      	ldr	r3, [sp, #12]
 8015144:	3307      	adds	r3, #7
 8015146:	f023 0307 	bic.w	r3, r3, #7
 801514a:	3308      	adds	r3, #8
 801514c:	9303      	str	r3, [sp, #12]
 801514e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015150:	443b      	add	r3, r7
 8015152:	9309      	str	r3, [sp, #36]	; 0x24
 8015154:	e768      	b.n	8015028 <_vfiprintf_r+0x78>
 8015156:	fb0c 3202 	mla	r2, ip, r2, r3
 801515a:	460c      	mov	r4, r1
 801515c:	2001      	movs	r0, #1
 801515e:	e7a6      	b.n	80150ae <_vfiprintf_r+0xfe>
 8015160:	2300      	movs	r3, #0
 8015162:	3401      	adds	r4, #1
 8015164:	9305      	str	r3, [sp, #20]
 8015166:	4619      	mov	r1, r3
 8015168:	f04f 0c0a 	mov.w	ip, #10
 801516c:	4620      	mov	r0, r4
 801516e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015172:	3a30      	subs	r2, #48	; 0x30
 8015174:	2a09      	cmp	r2, #9
 8015176:	d903      	bls.n	8015180 <_vfiprintf_r+0x1d0>
 8015178:	2b00      	cmp	r3, #0
 801517a:	d0c6      	beq.n	801510a <_vfiprintf_r+0x15a>
 801517c:	9105      	str	r1, [sp, #20]
 801517e:	e7c4      	b.n	801510a <_vfiprintf_r+0x15a>
 8015180:	fb0c 2101 	mla	r1, ip, r1, r2
 8015184:	4604      	mov	r4, r0
 8015186:	2301      	movs	r3, #1
 8015188:	e7f0      	b.n	801516c <_vfiprintf_r+0x1bc>
 801518a:	ab03      	add	r3, sp, #12
 801518c:	9300      	str	r3, [sp, #0]
 801518e:	462a      	mov	r2, r5
 8015190:	4b12      	ldr	r3, [pc, #72]	; (80151dc <_vfiprintf_r+0x22c>)
 8015192:	a904      	add	r1, sp, #16
 8015194:	4630      	mov	r0, r6
 8015196:	f7fb fe2b 	bl	8010df0 <_printf_float>
 801519a:	4607      	mov	r7, r0
 801519c:	1c78      	adds	r0, r7, #1
 801519e:	d1d6      	bne.n	801514e <_vfiprintf_r+0x19e>
 80151a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151a2:	07d9      	lsls	r1, r3, #31
 80151a4:	d405      	bmi.n	80151b2 <_vfiprintf_r+0x202>
 80151a6:	89ab      	ldrh	r3, [r5, #12]
 80151a8:	059a      	lsls	r2, r3, #22
 80151aa:	d402      	bmi.n	80151b2 <_vfiprintf_r+0x202>
 80151ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151ae:	f7fc fdd4 	bl	8011d5a <__retarget_lock_release_recursive>
 80151b2:	89ab      	ldrh	r3, [r5, #12]
 80151b4:	065b      	lsls	r3, r3, #25
 80151b6:	f53f af1d 	bmi.w	8014ff4 <_vfiprintf_r+0x44>
 80151ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151bc:	e71c      	b.n	8014ff8 <_vfiprintf_r+0x48>
 80151be:	ab03      	add	r3, sp, #12
 80151c0:	9300      	str	r3, [sp, #0]
 80151c2:	462a      	mov	r2, r5
 80151c4:	4b05      	ldr	r3, [pc, #20]	; (80151dc <_vfiprintf_r+0x22c>)
 80151c6:	a904      	add	r1, sp, #16
 80151c8:	4630      	mov	r0, r6
 80151ca:	f7fc f8b5 	bl	8011338 <_printf_i>
 80151ce:	e7e4      	b.n	801519a <_vfiprintf_r+0x1ea>
 80151d0:	08015ab1 	.word	0x08015ab1
 80151d4:	08015abb 	.word	0x08015abb
 80151d8:	08010df1 	.word	0x08010df1
 80151dc:	08014f8d 	.word	0x08014f8d
 80151e0:	08015ab7 	.word	0x08015ab7

080151e4 <__swbuf_r>:
 80151e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151e6:	460e      	mov	r6, r1
 80151e8:	4614      	mov	r4, r2
 80151ea:	4605      	mov	r5, r0
 80151ec:	b118      	cbz	r0, 80151f6 <__swbuf_r+0x12>
 80151ee:	6a03      	ldr	r3, [r0, #32]
 80151f0:	b90b      	cbnz	r3, 80151f6 <__swbuf_r+0x12>
 80151f2:	f7fc fc4d 	bl	8011a90 <__sinit>
 80151f6:	69a3      	ldr	r3, [r4, #24]
 80151f8:	60a3      	str	r3, [r4, #8]
 80151fa:	89a3      	ldrh	r3, [r4, #12]
 80151fc:	071a      	lsls	r2, r3, #28
 80151fe:	d525      	bpl.n	801524c <__swbuf_r+0x68>
 8015200:	6923      	ldr	r3, [r4, #16]
 8015202:	b31b      	cbz	r3, 801524c <__swbuf_r+0x68>
 8015204:	6823      	ldr	r3, [r4, #0]
 8015206:	6922      	ldr	r2, [r4, #16]
 8015208:	1a98      	subs	r0, r3, r2
 801520a:	6963      	ldr	r3, [r4, #20]
 801520c:	b2f6      	uxtb	r6, r6
 801520e:	4283      	cmp	r3, r0
 8015210:	4637      	mov	r7, r6
 8015212:	dc04      	bgt.n	801521e <__swbuf_r+0x3a>
 8015214:	4621      	mov	r1, r4
 8015216:	4628      	mov	r0, r5
 8015218:	f7ff fa52 	bl	80146c0 <_fflush_r>
 801521c:	b9e0      	cbnz	r0, 8015258 <__swbuf_r+0x74>
 801521e:	68a3      	ldr	r3, [r4, #8]
 8015220:	3b01      	subs	r3, #1
 8015222:	60a3      	str	r3, [r4, #8]
 8015224:	6823      	ldr	r3, [r4, #0]
 8015226:	1c5a      	adds	r2, r3, #1
 8015228:	6022      	str	r2, [r4, #0]
 801522a:	701e      	strb	r6, [r3, #0]
 801522c:	6962      	ldr	r2, [r4, #20]
 801522e:	1c43      	adds	r3, r0, #1
 8015230:	429a      	cmp	r2, r3
 8015232:	d004      	beq.n	801523e <__swbuf_r+0x5a>
 8015234:	89a3      	ldrh	r3, [r4, #12]
 8015236:	07db      	lsls	r3, r3, #31
 8015238:	d506      	bpl.n	8015248 <__swbuf_r+0x64>
 801523a:	2e0a      	cmp	r6, #10
 801523c:	d104      	bne.n	8015248 <__swbuf_r+0x64>
 801523e:	4621      	mov	r1, r4
 8015240:	4628      	mov	r0, r5
 8015242:	f7ff fa3d 	bl	80146c0 <_fflush_r>
 8015246:	b938      	cbnz	r0, 8015258 <__swbuf_r+0x74>
 8015248:	4638      	mov	r0, r7
 801524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801524c:	4621      	mov	r1, r4
 801524e:	4628      	mov	r0, r5
 8015250:	f000 f806 	bl	8015260 <__swsetup_r>
 8015254:	2800      	cmp	r0, #0
 8015256:	d0d5      	beq.n	8015204 <__swbuf_r+0x20>
 8015258:	f04f 37ff 	mov.w	r7, #4294967295
 801525c:	e7f4      	b.n	8015248 <__swbuf_r+0x64>
	...

08015260 <__swsetup_r>:
 8015260:	b538      	push	{r3, r4, r5, lr}
 8015262:	4b2a      	ldr	r3, [pc, #168]	; (801530c <__swsetup_r+0xac>)
 8015264:	4605      	mov	r5, r0
 8015266:	6818      	ldr	r0, [r3, #0]
 8015268:	460c      	mov	r4, r1
 801526a:	b118      	cbz	r0, 8015274 <__swsetup_r+0x14>
 801526c:	6a03      	ldr	r3, [r0, #32]
 801526e:	b90b      	cbnz	r3, 8015274 <__swsetup_r+0x14>
 8015270:	f7fc fc0e 	bl	8011a90 <__sinit>
 8015274:	89a3      	ldrh	r3, [r4, #12]
 8015276:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801527a:	0718      	lsls	r0, r3, #28
 801527c:	d422      	bmi.n	80152c4 <__swsetup_r+0x64>
 801527e:	06d9      	lsls	r1, r3, #27
 8015280:	d407      	bmi.n	8015292 <__swsetup_r+0x32>
 8015282:	2309      	movs	r3, #9
 8015284:	602b      	str	r3, [r5, #0]
 8015286:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801528a:	81a3      	strh	r3, [r4, #12]
 801528c:	f04f 30ff 	mov.w	r0, #4294967295
 8015290:	e034      	b.n	80152fc <__swsetup_r+0x9c>
 8015292:	0758      	lsls	r0, r3, #29
 8015294:	d512      	bpl.n	80152bc <__swsetup_r+0x5c>
 8015296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015298:	b141      	cbz	r1, 80152ac <__swsetup_r+0x4c>
 801529a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801529e:	4299      	cmp	r1, r3
 80152a0:	d002      	beq.n	80152a8 <__swsetup_r+0x48>
 80152a2:	4628      	mov	r0, r5
 80152a4:	f7fd fbea 	bl	8012a7c <_free_r>
 80152a8:	2300      	movs	r3, #0
 80152aa:	6363      	str	r3, [r4, #52]	; 0x34
 80152ac:	89a3      	ldrh	r3, [r4, #12]
 80152ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80152b2:	81a3      	strh	r3, [r4, #12]
 80152b4:	2300      	movs	r3, #0
 80152b6:	6063      	str	r3, [r4, #4]
 80152b8:	6923      	ldr	r3, [r4, #16]
 80152ba:	6023      	str	r3, [r4, #0]
 80152bc:	89a3      	ldrh	r3, [r4, #12]
 80152be:	f043 0308 	orr.w	r3, r3, #8
 80152c2:	81a3      	strh	r3, [r4, #12]
 80152c4:	6923      	ldr	r3, [r4, #16]
 80152c6:	b94b      	cbnz	r3, 80152dc <__swsetup_r+0x7c>
 80152c8:	89a3      	ldrh	r3, [r4, #12]
 80152ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80152ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152d2:	d003      	beq.n	80152dc <__swsetup_r+0x7c>
 80152d4:	4621      	mov	r1, r4
 80152d6:	4628      	mov	r0, r5
 80152d8:	f000 f884 	bl	80153e4 <__smakebuf_r>
 80152dc:	89a0      	ldrh	r0, [r4, #12]
 80152de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80152e2:	f010 0301 	ands.w	r3, r0, #1
 80152e6:	d00a      	beq.n	80152fe <__swsetup_r+0x9e>
 80152e8:	2300      	movs	r3, #0
 80152ea:	60a3      	str	r3, [r4, #8]
 80152ec:	6963      	ldr	r3, [r4, #20]
 80152ee:	425b      	negs	r3, r3
 80152f0:	61a3      	str	r3, [r4, #24]
 80152f2:	6923      	ldr	r3, [r4, #16]
 80152f4:	b943      	cbnz	r3, 8015308 <__swsetup_r+0xa8>
 80152f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80152fa:	d1c4      	bne.n	8015286 <__swsetup_r+0x26>
 80152fc:	bd38      	pop	{r3, r4, r5, pc}
 80152fe:	0781      	lsls	r1, r0, #30
 8015300:	bf58      	it	pl
 8015302:	6963      	ldrpl	r3, [r4, #20]
 8015304:	60a3      	str	r3, [r4, #8]
 8015306:	e7f4      	b.n	80152f2 <__swsetup_r+0x92>
 8015308:	2000      	movs	r0, #0
 801530a:	e7f7      	b.n	80152fc <__swsetup_r+0x9c>
 801530c:	20000164 	.word	0x20000164

08015310 <_raise_r>:
 8015310:	291f      	cmp	r1, #31
 8015312:	b538      	push	{r3, r4, r5, lr}
 8015314:	4604      	mov	r4, r0
 8015316:	460d      	mov	r5, r1
 8015318:	d904      	bls.n	8015324 <_raise_r+0x14>
 801531a:	2316      	movs	r3, #22
 801531c:	6003      	str	r3, [r0, #0]
 801531e:	f04f 30ff 	mov.w	r0, #4294967295
 8015322:	bd38      	pop	{r3, r4, r5, pc}
 8015324:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015326:	b112      	cbz	r2, 801532e <_raise_r+0x1e>
 8015328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801532c:	b94b      	cbnz	r3, 8015342 <_raise_r+0x32>
 801532e:	4620      	mov	r0, r4
 8015330:	f000 f830 	bl	8015394 <_getpid_r>
 8015334:	462a      	mov	r2, r5
 8015336:	4601      	mov	r1, r0
 8015338:	4620      	mov	r0, r4
 801533a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801533e:	f000 b817 	b.w	8015370 <_kill_r>
 8015342:	2b01      	cmp	r3, #1
 8015344:	d00a      	beq.n	801535c <_raise_r+0x4c>
 8015346:	1c59      	adds	r1, r3, #1
 8015348:	d103      	bne.n	8015352 <_raise_r+0x42>
 801534a:	2316      	movs	r3, #22
 801534c:	6003      	str	r3, [r0, #0]
 801534e:	2001      	movs	r0, #1
 8015350:	e7e7      	b.n	8015322 <_raise_r+0x12>
 8015352:	2400      	movs	r4, #0
 8015354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015358:	4628      	mov	r0, r5
 801535a:	4798      	blx	r3
 801535c:	2000      	movs	r0, #0
 801535e:	e7e0      	b.n	8015322 <_raise_r+0x12>

08015360 <raise>:
 8015360:	4b02      	ldr	r3, [pc, #8]	; (801536c <raise+0xc>)
 8015362:	4601      	mov	r1, r0
 8015364:	6818      	ldr	r0, [r3, #0]
 8015366:	f7ff bfd3 	b.w	8015310 <_raise_r>
 801536a:	bf00      	nop
 801536c:	20000164 	.word	0x20000164

08015370 <_kill_r>:
 8015370:	b538      	push	{r3, r4, r5, lr}
 8015372:	4d07      	ldr	r5, [pc, #28]	; (8015390 <_kill_r+0x20>)
 8015374:	2300      	movs	r3, #0
 8015376:	4604      	mov	r4, r0
 8015378:	4608      	mov	r0, r1
 801537a:	4611      	mov	r1, r2
 801537c:	602b      	str	r3, [r5, #0]
 801537e:	f7ec fe7b 	bl	8002078 <_kill>
 8015382:	1c43      	adds	r3, r0, #1
 8015384:	d102      	bne.n	801538c <_kill_r+0x1c>
 8015386:	682b      	ldr	r3, [r5, #0]
 8015388:	b103      	cbz	r3, 801538c <_kill_r+0x1c>
 801538a:	6023      	str	r3, [r4, #0]
 801538c:	bd38      	pop	{r3, r4, r5, pc}
 801538e:	bf00      	nop
 8015390:	2000e41c 	.word	0x2000e41c

08015394 <_getpid_r>:
 8015394:	f7ec be68 	b.w	8002068 <_getpid>

08015398 <__swhatbuf_r>:
 8015398:	b570      	push	{r4, r5, r6, lr}
 801539a:	460c      	mov	r4, r1
 801539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153a0:	2900      	cmp	r1, #0
 80153a2:	b096      	sub	sp, #88	; 0x58
 80153a4:	4615      	mov	r5, r2
 80153a6:	461e      	mov	r6, r3
 80153a8:	da0d      	bge.n	80153c6 <__swhatbuf_r+0x2e>
 80153aa:	89a3      	ldrh	r3, [r4, #12]
 80153ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80153b0:	f04f 0100 	mov.w	r1, #0
 80153b4:	bf0c      	ite	eq
 80153b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80153ba:	2340      	movne	r3, #64	; 0x40
 80153bc:	2000      	movs	r0, #0
 80153be:	6031      	str	r1, [r6, #0]
 80153c0:	602b      	str	r3, [r5, #0]
 80153c2:	b016      	add	sp, #88	; 0x58
 80153c4:	bd70      	pop	{r4, r5, r6, pc}
 80153c6:	466a      	mov	r2, sp
 80153c8:	f000 f848 	bl	801545c <_fstat_r>
 80153cc:	2800      	cmp	r0, #0
 80153ce:	dbec      	blt.n	80153aa <__swhatbuf_r+0x12>
 80153d0:	9901      	ldr	r1, [sp, #4]
 80153d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80153d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80153da:	4259      	negs	r1, r3
 80153dc:	4159      	adcs	r1, r3
 80153de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153e2:	e7eb      	b.n	80153bc <__swhatbuf_r+0x24>

080153e4 <__smakebuf_r>:
 80153e4:	898b      	ldrh	r3, [r1, #12]
 80153e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80153e8:	079d      	lsls	r5, r3, #30
 80153ea:	4606      	mov	r6, r0
 80153ec:	460c      	mov	r4, r1
 80153ee:	d507      	bpl.n	8015400 <__smakebuf_r+0x1c>
 80153f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80153f4:	6023      	str	r3, [r4, #0]
 80153f6:	6123      	str	r3, [r4, #16]
 80153f8:	2301      	movs	r3, #1
 80153fa:	6163      	str	r3, [r4, #20]
 80153fc:	b002      	add	sp, #8
 80153fe:	bd70      	pop	{r4, r5, r6, pc}
 8015400:	ab01      	add	r3, sp, #4
 8015402:	466a      	mov	r2, sp
 8015404:	f7ff ffc8 	bl	8015398 <__swhatbuf_r>
 8015408:	9900      	ldr	r1, [sp, #0]
 801540a:	4605      	mov	r5, r0
 801540c:	4630      	mov	r0, r6
 801540e:	f7fd fba9 	bl	8012b64 <_malloc_r>
 8015412:	b948      	cbnz	r0, 8015428 <__smakebuf_r+0x44>
 8015414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015418:	059a      	lsls	r2, r3, #22
 801541a:	d4ef      	bmi.n	80153fc <__smakebuf_r+0x18>
 801541c:	f023 0303 	bic.w	r3, r3, #3
 8015420:	f043 0302 	orr.w	r3, r3, #2
 8015424:	81a3      	strh	r3, [r4, #12]
 8015426:	e7e3      	b.n	80153f0 <__smakebuf_r+0xc>
 8015428:	89a3      	ldrh	r3, [r4, #12]
 801542a:	6020      	str	r0, [r4, #0]
 801542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015430:	81a3      	strh	r3, [r4, #12]
 8015432:	9b00      	ldr	r3, [sp, #0]
 8015434:	6163      	str	r3, [r4, #20]
 8015436:	9b01      	ldr	r3, [sp, #4]
 8015438:	6120      	str	r0, [r4, #16]
 801543a:	b15b      	cbz	r3, 8015454 <__smakebuf_r+0x70>
 801543c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015440:	4630      	mov	r0, r6
 8015442:	f000 f81d 	bl	8015480 <_isatty_r>
 8015446:	b128      	cbz	r0, 8015454 <__smakebuf_r+0x70>
 8015448:	89a3      	ldrh	r3, [r4, #12]
 801544a:	f023 0303 	bic.w	r3, r3, #3
 801544e:	f043 0301 	orr.w	r3, r3, #1
 8015452:	81a3      	strh	r3, [r4, #12]
 8015454:	89a3      	ldrh	r3, [r4, #12]
 8015456:	431d      	orrs	r5, r3
 8015458:	81a5      	strh	r5, [r4, #12]
 801545a:	e7cf      	b.n	80153fc <__smakebuf_r+0x18>

0801545c <_fstat_r>:
 801545c:	b538      	push	{r3, r4, r5, lr}
 801545e:	4d07      	ldr	r5, [pc, #28]	; (801547c <_fstat_r+0x20>)
 8015460:	2300      	movs	r3, #0
 8015462:	4604      	mov	r4, r0
 8015464:	4608      	mov	r0, r1
 8015466:	4611      	mov	r1, r2
 8015468:	602b      	str	r3, [r5, #0]
 801546a:	f7ec fe64 	bl	8002136 <_fstat>
 801546e:	1c43      	adds	r3, r0, #1
 8015470:	d102      	bne.n	8015478 <_fstat_r+0x1c>
 8015472:	682b      	ldr	r3, [r5, #0]
 8015474:	b103      	cbz	r3, 8015478 <_fstat_r+0x1c>
 8015476:	6023      	str	r3, [r4, #0]
 8015478:	bd38      	pop	{r3, r4, r5, pc}
 801547a:	bf00      	nop
 801547c:	2000e41c 	.word	0x2000e41c

08015480 <_isatty_r>:
 8015480:	b538      	push	{r3, r4, r5, lr}
 8015482:	4d06      	ldr	r5, [pc, #24]	; (801549c <_isatty_r+0x1c>)
 8015484:	2300      	movs	r3, #0
 8015486:	4604      	mov	r4, r0
 8015488:	4608      	mov	r0, r1
 801548a:	602b      	str	r3, [r5, #0]
 801548c:	f7ec fe63 	bl	8002156 <_isatty>
 8015490:	1c43      	adds	r3, r0, #1
 8015492:	d102      	bne.n	801549a <_isatty_r+0x1a>
 8015494:	682b      	ldr	r3, [r5, #0]
 8015496:	b103      	cbz	r3, 801549a <_isatty_r+0x1a>
 8015498:	6023      	str	r3, [r4, #0]
 801549a:	bd38      	pop	{r3, r4, r5, pc}
 801549c:	2000e41c 	.word	0x2000e41c

080154a0 <fmaxf>:
 80154a0:	b508      	push	{r3, lr}
 80154a2:	ed2d 8b02 	vpush	{d8}
 80154a6:	eeb0 8a40 	vmov.f32	s16, s0
 80154aa:	eef0 8a60 	vmov.f32	s17, s1
 80154ae:	f000 f813 	bl	80154d8 <__fpclassifyf>
 80154b2:	b148      	cbz	r0, 80154c8 <fmaxf+0x28>
 80154b4:	eeb0 0a68 	vmov.f32	s0, s17
 80154b8:	f000 f80e 	bl	80154d8 <__fpclassifyf>
 80154bc:	b130      	cbz	r0, 80154cc <fmaxf+0x2c>
 80154be:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80154c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c6:	dc01      	bgt.n	80154cc <fmaxf+0x2c>
 80154c8:	eeb0 8a68 	vmov.f32	s16, s17
 80154cc:	eeb0 0a48 	vmov.f32	s0, s16
 80154d0:	ecbd 8b02 	vpop	{d8}
 80154d4:	bd08      	pop	{r3, pc}
	...

080154d8 <__fpclassifyf>:
 80154d8:	ee10 3a10 	vmov	r3, s0
 80154dc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80154e0:	d00d      	beq.n	80154fe <__fpclassifyf+0x26>
 80154e2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80154e6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80154ea:	d30a      	bcc.n	8015502 <__fpclassifyf+0x2a>
 80154ec:	4b07      	ldr	r3, [pc, #28]	; (801550c <__fpclassifyf+0x34>)
 80154ee:	1e42      	subs	r2, r0, #1
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d908      	bls.n	8015506 <__fpclassifyf+0x2e>
 80154f4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80154f8:	4258      	negs	r0, r3
 80154fa:	4158      	adcs	r0, r3
 80154fc:	4770      	bx	lr
 80154fe:	2002      	movs	r0, #2
 8015500:	4770      	bx	lr
 8015502:	2004      	movs	r0, #4
 8015504:	4770      	bx	lr
 8015506:	2003      	movs	r0, #3
 8015508:	4770      	bx	lr
 801550a:	bf00      	nop
 801550c:	007ffffe 	.word	0x007ffffe

08015510 <_init>:
 8015510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015512:	bf00      	nop
 8015514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015516:	bc08      	pop	{r3}
 8015518:	469e      	mov	lr, r3
 801551a:	4770      	bx	lr

0801551c <_fini>:
 801551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801551e:	bf00      	nop
 8015520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015522:	bc08      	pop	{r3}
 8015524:	469e      	mov	lr, r3
 8015526:	4770      	bx	lr
