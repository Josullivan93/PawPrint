
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08015538  08015538  00025538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b68  08015b68  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  08015b68  08015b68  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015b68  08015b68  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b68  08015b68  00025b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b6c  08015b6c  00025b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08015b70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e158  200002d4  08015e44  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000e42c  08015e44  0003e42c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   000203ef  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054d5  00000000  00000000  00050736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b00  00000000  00000000  00055c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001456  00000000  00000000  00057710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ea6a  00000000  00000000  00058b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d4f  00000000  00000000  000875d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb010  00000000  00000000  000ad31f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083c4  00000000  00000000  001a8330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001b06f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015520 	.word	0x08015520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	08015520 	.word	0x08015520

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	213d      	movs	r1, #61	; 0x3d
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f002 fa07 	bl	800312c <HAL_I2C_Mem_Read>
 8000d1e:	4603      	mov	r3, r0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LIS2MDL_WriteReg>:
HAL_StatusTypeDef	LIS2MDL_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LIS2MDL_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	460b      	mov	r3, r1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	213d      	movs	r1, #61	; 0x3d
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f002 f8d5 	bl	8002efc <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	21d7      	movs	r1, #215	; 0xd7
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f002 f9d3 	bl	800312c <HAL_I2C_Mem_Read>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LSM6DSO_ReadRegs>:

HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21d7      	movs	r1, #215	; 0xd7
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f002 f9b5 	bl	800312c <HAL_I2C_Mem_Read>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DSO_WriteReg>:

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21d7      	movs	r1, #215	; 0xd7
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f002 f883 	bl	8002efc <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t inBuff[64];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
//	else if (GPIO_Pin == IMU_INT_Pin){
//
//		LSM6DSO_FIFO_RDY = 1;
//
//	}
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f001 fa14 	bl	800224a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f8d9 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 fa07 	bl	8001238 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2a:	f000 f9e7 	bl	80011fc <MX_DMA_Init>
  MX_I2C3_Init();
 8000e2e:	f000 f925 	bl	800107c <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000e32:	f000 f9bf 	bl	80011b4 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 8000e36:	f00f f8ed 	bl	8010014 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e3a:	f000 f95f 	bl	80010fc <MX_RTC_Init>
  MX_FATFS_Init();
 8000e3e:	f009 fe8f 	bl	800ab60 <MX_FATFS_Init>

  /* USER CODE BEGIN 2 */
  int attempts = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	494e      	ldr	r1, [pc, #312]	; (8000f84 <main+0x16c>)
 8000e4a:	484f      	ldr	r0, [pc, #316]	; (8000f88 <main+0x170>)
 8000e4c:	f00d fdcc 	bl	800e9e8 <f_mount>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <main+0x174>)
 8000e56:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e58:	e008      	b.n	8000e6c <main+0x54>
	  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4949      	ldr	r1, [pc, #292]	; (8000f84 <main+0x16c>)
 8000e5e:	484a      	ldr	r0, [pc, #296]	; (8000f88 <main+0x170>)
 8000e60:	f00d fdc2 	bl	800e9e8 <f_mount>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b48      	ldr	r3, [pc, #288]	; (8000f8c <main+0x174>)
 8000e6a:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e6c:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <main+0x174>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <main+0x62>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	ddef      	ble.n	8000e5a <main+0x42>
  }

 HAL_Delay(500);
 8000e7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7e:	f001 fa59 	bl	8002334 <HAL_Delay>

  volMakeStatus = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 8000e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <main+0x178>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	483d      	ldr	r0, [pc, #244]	; (8000f84 <main+0x16c>)
 8000e90:	f00e f9a2 	bl	800f1d8 <f_mkfs>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <main+0x17c>)
 8000e9a:	701a      	strb	r2, [r3, #0]
  if ( volMakeStatus != FR_OK){
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <main+0x17c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <main+0x90>
	  Error_Handler();
 8000ea4:	f000 fa42 	bl	800132c <Error_Handler>
  }
  HAL_Delay(500);
 8000ea8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eac:	f001 fa42 	bl	8002334 <HAL_Delay>

  fileCreateStatus = f_open(&SDFile, "Out.csv", FA_CREATE_ALWAYS | FA_WRITE);
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	4939      	ldr	r1, [pc, #228]	; (8000f98 <main+0x180>)
 8000eb4:	4839      	ldr	r0, [pc, #228]	; (8000f9c <main+0x184>)
 8000eb6:	f00d fddd 	bl	800ea74 <f_open>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <main+0x188>)
 8000ec0:	701a      	strb	r2, [r3, #0]
  if ( fileCreateStatus != FR_OK){
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <main+0x188>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <main+0xb6>
	  Error_Handler();
 8000eca:	f000 fa2f 	bl	800132c <Error_Handler>
  }

  f_printf(&SDFile,"TimeStamp,XL_X,XL_Y,XL_Z,GYR_X,GYR_Y,GYR_Z,MAG_X,MAG_Y,MAG_Z\r\n");
 8000ece:	4935      	ldr	r1, [pc, #212]	; (8000fa4 <main+0x18c>)
 8000ed0:	4832      	ldr	r0, [pc, #200]	; (8000f9c <main+0x184>)
 8000ed2:	f00e fe25 	bl	800fb20 <f_printf>

  f_sync( &SDFile );
 8000ed6:	4831      	ldr	r0, [pc, #196]	; (8000f9c <main+0x184>)
 8000ed8:	f00e f8ff 	bl	800f0da <f_sync>

  /* Search for connection via USB */
  /* Once Received proceed to init and data collection */

  // Initialise Sensor
  pawprint_init(&hi2c3);
 8000edc:	4832      	ldr	r0, [pc, #200]	; (8000fa8 <main+0x190>)
 8000ede:	f000 fa2a 	bl	8001336 <pawprint_init>

  LSM6DSO_FIFO_RDY = 0;
 8000ee2:	4b32      	ldr	r3, [pc, #200]	; (8000fac <main+0x194>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ( OVERTEMP == 1){
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <main+0x198>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <main+0xdc>
		  HAL_PWREx_EnterSHUTDOWNMode(); // Future iterations should have physical control here - skip MCU and cut power from battery with Temp_INT
 8000ef0:	f003 ffa0 	bl	8004e34 <HAL_PWREx_EnterSHUTDOWNMode>
	  }

	  pawprint_readFIFO(&hi2c3, (char *) buffer, &writeIndex, &maxoutLength, &tag_counter, &FIFOout); // Combine some features input here into structs for simplicity
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <main+0x19c>)
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <main+0x1a0>)
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <main+0x1a4>)
 8000efe:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <main+0x1a8>)
 8000f00:	4930      	ldr	r1, [pc, #192]	; (8000fc4 <main+0x1ac>)
 8000f02:	4829      	ldr	r0, [pc, #164]	; (8000fa8 <main+0x190>)
 8000f04:	f000 fc08 	bl	8001718 <pawprint_readFIFO>

	  // Check buffer fill
	  if (writeIndex >= 32000){
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <main+0x1a8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f10:	dbea      	blt.n	8000ee8 <main+0xd0>

		  f_write(&SDFile, (char *)&buffer, 32000, &byteCount);
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <main+0x1b0>)
 8000f14:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000f18:	492a      	ldr	r1, [pc, #168]	; (8000fc4 <main+0x1ac>)
 8000f1a:	4820      	ldr	r0, [pc, #128]	; (8000f9c <main+0x184>)
 8000f1c:	f00d ff68 	bl	800edf0 <f_write>

		  // Copy end of buffer to beginning and clear
		  strlcpy(tempBuff,(char *) &buffer[32000], 8000);
 8000f20:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f24:	4929      	ldr	r1, [pc, #164]	; (8000fcc <main+0x1b4>)
 8000f26:	482a      	ldr	r0, [pc, #168]	; (8000fd0 <main+0x1b8>)
 8000f28:	f010 fe91 	bl	8011c4e <strlcpy>
		  memset((char *) &buffer[0], 0, sizeof(buffer));
 8000f2c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000f30:	2100      	movs	r1, #0
 8000f32:	4824      	ldr	r0, [pc, #144]	; (8000fc4 <main+0x1ac>)
 8000f34:	f010 fe83 	bl	8011c3e <memset>
		  strlcpy((char *) &buffer, tempBuff, 40000);
 8000f38:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000f3c:	4924      	ldr	r1, [pc, #144]	; (8000fd0 <main+0x1b8>)
 8000f3e:	4821      	ldr	r0, [pc, #132]	; (8000fc4 <main+0x1ac>)
 8000f40:	f010 fe85 	bl	8011c4e <strlcpy>
		  memset(&tempBuff[0], 0, sizeof(tempBuff));
 8000f44:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <main+0x1b8>)
 8000f4c:	f010 fe77 	bl	8011c3e <memset>

		  // Set writeIndex to remainder length
		  writeIndex -= byteCount;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <main+0x1a8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <main+0x1b0>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <main+0x1a8>)
 8000f60:	601a      	str	r2, [r3, #0]
		  writeNum++;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <main+0x1bc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <main+0x1bc>)
 8000f6a:	6013      	str	r3, [r2, #0]

		  // fsync every 16MB to ensure SD buffer is being written
		  if( writeNum >= 500){
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <main+0x1bc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f74:	d3b8      	bcc.n	8000ee8 <main+0xd0>
			  f_sync(&SDFile);
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <main+0x184>)
 8000f78:	f00e f8af 	bl	800f0da <f_sync>
			  writeNum = 0;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <main+0x1bc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
	  if ( OVERTEMP == 1){
 8000f82:	e7b1      	b.n	8000ee8 <main+0xd0>
 8000f84:	2000c234 	.word	0x2000c234
 8000f88:	2000c238 	.word	0x2000c238
 8000f8c:	2000bfe4 	.word	0x2000bfe4
 8000f90:	2000bfe8 	.word	0x2000bfe8
 8000f94:	2000bfe5 	.word	0x2000bfe5
 8000f98:	08015538 	.word	0x08015538
 8000f9c:	2000c468 	.word	0x2000c468
 8000fa0:	2000bfe6 	.word	0x2000bfe6
 8000fa4:	08015540 	.word	0x08015540
 8000fa8:	200002f0 	.word	0x200002f0
 8000fac:	20000434 	.word	0x20000434
 8000fb0:	20000435 	.word	0x20000435
 8000fb4:	2000bfc4 	.word	0x2000bfc4
 8000fb8:	2000bfc0 	.word	0x2000bfc0
 8000fbc:	2000bfbc 	.word	0x2000bfbc
 8000fc0:	2000bfb8 	.word	0x2000bfb8
 8000fc4:	20000438 	.word	0x20000438
 8000fc8:	2000bfdc 	.word	0x2000bfdc
 8000fcc:	20008138 	.word	0x20008138
 8000fd0:	2000a078 	.word	0x2000a078
 8000fd4:	2000bfe0 	.word	0x2000bfe0

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b096      	sub	sp, #88	; 0x58
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	2244      	movs	r2, #68	; 0x44
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f010 fe29 	bl	8011c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ffa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ffe:	f003 feb3 	bl	8004d68 <HAL_PWREx_ControlVoltageScaling>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001008:	f000 f990 	bl	800132c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800100c:	2309      	movs	r3, #9
 800100e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001016:	2301      	movs	r3, #1
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101e:	2303      	movs	r3, #3
 8001020:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001026:	2308      	movs	r3, #8
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800102a:	2307      	movs	r3, #7
 800102c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001032:	2302      	movs	r3, #2
 8001034:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4618      	mov	r0, r3
 800103c:	f003 ff14 	bl	8004e68 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001046:	f000 f971 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104e:	2303      	movs	r3, #3
 8001050:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	2102      	movs	r1, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fadc 	bl	8005620 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800106e:	f000 f95d 	bl	800132c <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3758      	adds	r7, #88	; 0x58
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_I2C3_Init+0x74>)
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <MX_I2C3_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_I2C3_Init+0x74>)
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <MX_I2C3_Init+0x7c>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_I2C3_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_I2C3_Init+0x74>)
 8001094:	2201      	movs	r2, #1
 8001096:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_I2C3_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010b8:	f001 fe84 	bl	8002dc4 <HAL_I2C_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010c2:	f000 f933 	bl	800132c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010ca:	f002 fc01 	bl	80038d0 <HAL_I2CEx_ConfigAnalogFilter>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010d4:	f000 f92a 	bl	800132c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010d8:	2100      	movs	r1, #0
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_I2C3_Init+0x74>)
 80010dc:	f002 fc43 	bl	8003966 <HAL_I2CEx_ConfigDigitalFilter>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f000 f921 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200002f0 	.word	0x200002f0
 80010f4:	40005c00 	.word	0x40005c00
 80010f8:	20303e5d 	.word	0x20303e5d

080010fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <MX_RTC_Init+0xb0>)
 8001116:	4a26      	ldr	r2, [pc, #152]	; (80011b0 <MX_RTC_Init+0xb4>)
 8001118:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <MX_RTC_Init+0xb0>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <MX_RTC_Init+0xb0>)
 8001122:	227f      	movs	r2, #127	; 0x7f
 8001124:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_RTC_Init+0xb0>)
 8001128:	22ff      	movs	r2, #255	; 0xff
 800112a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_RTC_Init+0xb0>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001132:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_RTC_Init+0xb0>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_RTC_Init+0xb0>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_RTC_Init+0xb0>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001144:	4819      	ldr	r0, [pc, #100]	; (80011ac <MX_RTC_Init+0xb0>)
 8001146:	f005 ffa9 	bl	800709c <HAL_RTC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001150:	f000 f8ec 	bl	800132c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	480f      	ldr	r0, [pc, #60]	; (80011ac <MX_RTC_Init+0xb0>)
 8001170:	f006 f81c 	bl	80071ac <HAL_RTC_SetTime>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800117a:	f000 f8d7 	bl	800132c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800117e:	2301      	movs	r3, #1
 8001180:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001182:	2301      	movs	r3, #1
 8001184:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001186:	2301      	movs	r3, #1
 8001188:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_RTC_Init+0xb0>)
 8001196:	f006 f8a6 	bl	80072e6 <HAL_RTC_SetDate>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80011a0:	f000 f8c4 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000344 	.word	0x20000344
 80011b0:	40002800 	.word	0x40002800

080011b4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_SDMMC1_SD_Init+0x40>)
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <MX_SDMMC1_SD_Init+0x44>)
 80011bc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_SDMMC1_SD_Init+0x40>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_SDMMC1_SD_Init+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_SDMMC1_SD_Init+0x40>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_SDMMC1_SD_Init+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_SDMMC1_SD_Init+0x40>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 1;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <MX_SDMMC1_SD_Init+0x40>)
 80011de:	2201      	movs	r2, #1
 80011e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <MX_SDMMC1_SD_Init+0x40>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDMMC1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000368 	.word	0x20000368
 80011f8:	40012800 	.word	0x40012800

080011fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_DMA_Init+0x38>)
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <MX_DMA_Init+0x38>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6493      	str	r3, [r2, #72]	; 0x48
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_DMA_Init+0x38>)
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	203b      	movs	r0, #59	; 0x3b
 8001220:	f001 f987 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001224:	203b      	movs	r0, #59	; 0x3b
 8001226:	f001 f9a0 	bl	800256a <HAL_NVIC_EnableIRQ>

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124e:	4b35      	ldr	r3, [pc, #212]	; (8001324 <MX_GPIO_Init+0xec>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a34      	ldr	r2, [pc, #208]	; (8001324 <MX_GPIO_Init+0xec>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <MX_GPIO_Init+0xec>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <MX_GPIO_Init+0xec>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a2e      	ldr	r2, [pc, #184]	; (8001324 <MX_GPIO_Init+0xec>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <MX_GPIO_Init+0xec>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <MX_GPIO_Init+0xec>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a28      	ldr	r2, [pc, #160]	; (8001324 <MX_GPIO_Init+0xec>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_GPIO_Init+0xec>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <MX_GPIO_Init+0xec>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a22      	ldr	r2, [pc, #136]	; (8001324 <MX_GPIO_Init+0xec>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_GPIO_Init+0xec>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80012ae:	2304      	movs	r3, #4
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4819      	ldr	r0, [pc, #100]	; (8001328 <MX_GPIO_Init+0xf0>)
 80012c4:	f001 fba4 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 80012c8:	2308      	movs	r3, #8
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4812      	ldr	r0, [pc, #72]	; (8001328 <MX_GPIO_Init+0xf0>)
 80012de:	f001 fb97 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <MX_GPIO_Init+0xf0>)
 80012f6:	f001 fb8b 	bl	8002a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2008      	movs	r0, #8
 8001300:	f001 f917 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001304:	2008      	movs	r0, #8
 8001306:	f001 f930 	bl	800256a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2009      	movs	r0, #9
 8001310:	f001 f90f 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001314:	2009      	movs	r0, #9
 8001316:	f001 f928 	bl	800256a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>

08001336 <pawprint_init>:

/* Private Variables */

/* Initialisation */

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]

	//Create required variables
	uint8_t LSM6DSO_WHO,MasterTemp, RegDat, LIS2MDL_WHO, STTS_PROD, STTS_MAN;

	// Boot Delay
	HAL_Delay(20);
 800133e:	2014      	movs	r0, #20
 8001340:	f000 fff8 	bl	8002334 <HAL_Delay>
	/* Reset Sensor to defaults*/
	RegDat = 0x00;
 8001344:	2300      	movs	r3, #0
 8001346:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Ensure accessing correct registers
 8001348:	f107 030d 	add.w	r3, r7, #13
 800134c:	461a      	mov	r2, r3
 800134e:	2101      	movs	r1, #1
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fd3b 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x05;
 8001356:	2305      	movs	r3, #5
 8001358:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat); // Software reset
 800135a:	f107 030d 	add.w	r3, r7, #13
 800135e:	461a      	mov	r2, r3
 8001360:	2112      	movs	r1, #18
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fd32 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);
 8001368:	2064      	movs	r0, #100	; 0x64
 800136a:	f000 ffe3 	bl	8002334 <HAL_Delay>

	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &LSM6DSO_WHO);
 800136e:	f107 030f 	add.w	r3, r7, #15
 8001372:	461a      	mov	r2, r3
 8001374:	210f      	movs	r1, #15
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fcf0 	bl	8000d5c <LSM6DSO_ReadReg>

	/****** Enable PassThrough ******/
	RegDat = 0x40;
 800137c:	2340      	movs	r3, #64	; 0x40
 800137e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 8001380:	f107 030d 	add.w	r3, r7, #13
 8001384:	461a      	mov	r2, r3
 8001386:	2101      	movs	r1, #1
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fd1f 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp);// Save Master Config to MasterTemp
 800138e:	f107 030e 	add.w	r3, r7, #14
 8001392:	461a      	mov	r2, r3
 8001394:	2114      	movs	r1, #20
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fce0 	bl	8000d5c <LSM6DSO_ReadReg>
	MasterTemp |= 0x20;
 800139c:	7bbb      	ldrb	r3, [r7, #14]
 800139e:	f043 0320 	orr.w	r3, r3, #32
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 1 - sensor hub signal disable
 80013a6:	f107 030e 	add.w	r3, r7, #14
 80013aa:	461a      	mov	r2, r3
 80013ac:	2114      	movs	r1, #20
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fd0c 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(5);																							// Delay
 80013b4:	2005      	movs	r0, #5
 80013b6:	f000 ffbd 	bl	8002334 <HAL_Delay>
	MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 80013ba:	7bbb      	ldrb	r3, [r7, #14]
 80013bc:	f043 0320 	orr.w	r3, r3, #32
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Master On bit to 0 to enable
 80013ca:	f107 030e 	add.w	r3, r7, #14
 80013ce:	461a      	mov	r2, r3
 80013d0:	2114      	movs	r1, #20
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fcfa 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 0 to restore trigger
 80013e2:	f107 030e 	add.w	r3, r7, #14
 80013e6:	461a      	mov	r2, r3
 80013e8:	2114      	movs	r1, #20
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fcee 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Set Pullup to 0 to disable internal pullup
 80013fa:	f107 030e 	add.w	r3, r7, #14
 80013fe:	461a      	mov	r2, r3
 8001400:	2114      	movs	r1, #20
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fce2 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = 0x10;
 8001408:	2310      	movs	r3, #16
 800140a:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 800140c:	f107 030e 	add.w	r3, r7, #14
 8001410:	461a      	mov	r2, r3
 8001412:	2114      	movs	r1, #20
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fcd9 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 800141e:	f107 030d 	add.w	r3, r7, #13
 8001422:	461a      	mov	r2, r3
 8001424:	2101      	movs	r1, #1
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fcd0 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** LIS2MDL Configuration ***/

	LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &LIS2MDL_WHO);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	461a      	mov	r2, r3
 8001432:	214f      	movs	r1, #79	; 0x4f
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fc5d 	bl	8000cf4 <LIS2MDL_ReadReg>

	while( LIS2MDL_WHO != LIS2MDL_ID)
 800143a:	e001      	b.n	8001440 <pawprint_init+0x10a>

	/* Reset sensor to defaults */
	RegDat = 0x23;
 800143c:	2323      	movs	r3, #35	; 0x23
 800143e:	737b      	strb	r3, [r7, #13]
	while( LIS2MDL_WHO != LIS2MDL_ID)
 8001440:	7b3b      	ldrb	r3, [r7, #12]
 8001442:	2b40      	cmp	r3, #64	; 0x40
 8001444:	d1fa      	bne.n	800143c <pawprint_init+0x106>
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //Reset registers by soft rst of cfg A to 1
 8001446:	f107 030d 	add.w	r3, r7, #13
 800144a:	461a      	mov	r2, r3
 800144c:	2160      	movs	r1, #96	; 0x60
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fc6a 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(5);
 8001454:	2005      	movs	r0, #5
 8001456:	f000 ff6d 	bl	8002334 <HAL_Delay>
	RegDat = 0x43;
 800145a:	2343      	movs	r3, #67	; 0x43
 800145c:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //ReBOOT of cfg A to 1
 800145e:	f107 030d 	add.w	r3, r7, #13
 8001462:	461a      	mov	r2, r3
 8001464:	2160      	movs	r1, #96	; 0x60
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fc5e 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(20);
 800146c:	2014      	movs	r0, #20
 800146e:	f000 ff61 	bl	8002334 <HAL_Delay>

	/* Setup */
	RegDat = 0x10;
 8001472:	2310      	movs	r3, #16
 8001474:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_C, &RegDat);// bdu set 1
 8001476:	f107 030d 	add.w	r3, r7, #13
 800147a:	461a      	mov	r2, r3
 800147c:	2162      	movs	r1, #98	; 0x62
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fc52 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x8C;
 8001484:	238c      	movs	r3, #140	; 0x8c
 8001486:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat);// offset temp on, operating mode Default, & data rate  100Hz
 8001488:	f107 030d 	add.w	r3, r7, #13
 800148c:	461a      	mov	r2, r3
 800148e:	2160      	movs	r1, #96	; 0x60
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fc49 	bl	8000d28 <LIS2MDL_WriteReg>

	/**** Insert Calibration Code here - Requires Moving and Input trigger via USB ******/

	/*** STTS Setup ***/

	STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &STTS_PROD); // ProdID is 00 for this version of therm - therefore also use manID
 8001496:	f107 030b 	add.w	r3, r7, #11
 800149a:	461a      	mov	r2, r3
 800149c:	21fd      	movs	r1, #253	; 0xfd
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 fdb8 	bl	8002014 <STTS751_ReadReg>
	STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &STTS_MAN);
 80014a4:	f107 030a 	add.w	r3, r7, #10
 80014a8:	461a      	mov	r2, r3
 80014aa:	21fe      	movs	r1, #254	; 0xfe
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fdb1 	bl	8002014 <STTS751_ReadReg>

	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80014b2:	e001      	b.n	80014b8 <pawprint_init+0x182>

	RegDat = 0x04;
 80014b4:	2304      	movs	r3, #4
 80014b6:	737b      	strb	r3, [r7, #13]
	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <pawprint_init+0x18e>
 80014be:	7abb      	ldrb	r3, [r7, #10]
 80014c0:	2b53      	cmp	r3, #83	; 0x53
 80014c2:	d1f7      	bne.n	80014b4 <pawprint_init+0x17e>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONV_RATE, &RegDat); // 1Hz
 80014c4:	f107 030d 	add.w	r3, r7, #13
 80014c8:	461a      	mov	r2, r3
 80014ca:	2104      	movs	r1, #4
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fc2b 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x4B;
 80014d2:	234b      	movs	r3, #75	; 0x4b
 80014d4:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_H, &RegDat); // Thermal Limit - default is 85 lowered to 75, low limit at freezing
 80014d6:	f107 030d 	add.w	r3, r7, #13
 80014da:	461a      	mov	r2, r3
 80014dc:	2105      	movs	r1, #5
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fc22 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_THERM_LIMIT, &RegDat); //Therm limit for THERM pin - not used in this design but set regardless for consistency
 80014e4:	f107 030d 	add.w	r3, r7, #13
 80014e8:	461a      	mov	r2, r3
 80014ea:	2120      	movs	r1, #32
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fc1b 	bl	8000d28 <LIS2MDL_WriteReg>

	// No reset function - for safety ensure all thermal registers are set and not assumed to be correct
	RegDat = 0x00;
 80014f2:	2300      	movs	r3, #0
 80014f4:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_L, &RegDat);
 80014f6:	f107 030d 	add.w	r3, r7, #13
 80014fa:	461a      	mov	r2, r3
 80014fc:	2106      	movs	r1, #6
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fc12 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_H, &RegDat);
 8001504:	f107 030d 	add.w	r3, r7, #13
 8001508:	461a      	mov	r2, r3
 800150a:	2107      	movs	r1, #7
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fc0b 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_L, &RegDat);
 8001512:	f107 030d 	add.w	r3, r7, #13
 8001516:	461a      	mov	r2, r3
 8001518:	2108      	movs	r1, #8
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fc04 	bl	8000d28 <LIS2MDL_WriteReg>

	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONFIG, &RegDat);// Mask1 enabled - event pin active (b7), Run/standby mode (b6)
 8001520:	f107 030d 	add.w	r3, r7, #13
 8001524:	461a      	mov	r2, r3
 8001526:	2103      	movs	r1, #3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fbfd 	bl	8000d28 <LIS2MDL_WriteReg>

	/*** Disable Pass Through ***/
	RegDat = 0x40;
 800152e:	2340      	movs	r3, #64	; 0x40
 8001530:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 8001532:	f107 030d 	add.w	r3, r7, #13
 8001536:	461a      	mov	r2, r3
 8001538:	2101      	movs	r1, #1
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fc46 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);		// delay 100
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f000 fef7 	bl	8002334 <HAL_Delay>
	RegDat = 0x00;
 8001546:	2300      	movs	r3, #0
 8001548:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);	// Disable pass through
 800154a:	f107 030d 	add.w	r3, r7, #13
 800154e:	461a      	mov	r2, r3
 8001550:	2114      	movs	r1, #20
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fc3a 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);	// Disable SHUB access
 8001558:	f107 030d 	add.w	r3, r7, #13
 800155c:	461a      	mov	r2, r3
 800155e:	2101      	movs	r1, #1
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fc33 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Configure LSM6DSO ***/
	RegDat = 0xE2;
 8001566:	23e2      	movs	r3, #226	; 0xe2
 8001568:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL9_XL , &RegDat); // Disable I3C MIPI
 800156a:	f107 030d 	add.w	r3, r7, #13
 800156e:	461a      	mov	r2, r3
 8001570:	2118      	movs	r1, #24
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fc2a 	bl	8000dcc <LSM6DSO_WriteReg>

	RegDat = 0x00;
 8001578:	2300      	movs	r3, #0
 800157a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL , &RegDat); // Ensure Acc and Gyro Powered down
 800157c:	f107 030d 	add.w	r3, r7, #13
 8001580:	461a      	mov	r2, r3
 8001582:	2110      	movs	r1, #16
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fc21 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G , &RegDat);
 800158a:	f107 030d 	add.w	r3, r7, #13
 800158e:	461a      	mov	r2, r3
 8001590:	2111      	movs	r1, #17
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fc1a 	bl	8000dcc <LSM6DSO_WriteReg>

	/**** FIFO set up ****/
	RegDat = 0x32;
 8001598:	2332      	movs	r3, #50	; 0x32
 800159a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL1 , &RegDat);// Set Watermark level to 50
 800159c:	f107 030d 	add.w	r3, r7, #13
 80015a0:	461a      	mov	r2, r3
 80015a2:	2107      	movs	r1, #7
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fc11 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015aa:	2300      	movs	r3, #0
 80015ac:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL2 , &RegDat);
 80015ae:	f107 030d 	add.w	r3, r7, #13
 80015b2:	461a      	mov	r2, r3
 80015b4:	2108      	movs	r1, #8
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fc08 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x11;
 80015bc:	2311      	movs	r3, #17
 80015be:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL3 , &RegDat); // Set BDR for XL and Gyro (12.5Hz both)
 80015c0:	f107 030d 	add.w	r3, r7, #13
 80015c4:	461a      	mov	r2, r3
 80015c6:	2109      	movs	r1, #9
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fbff 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x46;
 80015ce:	2346      	movs	r3, #70	; 0x46
 80015d0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL4 , &RegDat);//41: FIFO mode, bqtch Timestamp, no temp   56: Set to continuous mode & batch Temp and Timestamp
 80015d2:	f107 030d 	add.w	r3, r7, #13
 80015d6:	461a      	mov	r2, r3
 80015d8:	210a      	movs	r1, #10
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fbf6 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00; //RegDat = 0x41;
 80015e0:	2300      	movs	r3, #0
 80015e2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_TAP_CFG0 , &RegDat); // Latch interrupt & clear on read
 80015e4:	f107 030d 	add.w	r3, r7, #13
 80015e8:	461a      	mov	r2, r3
 80015ea:	2156      	movs	r1, #86	; 0x56
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fbed 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x38;
 80015f2:	2338      	movs	r3, #56	; 0x38
 80015f4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_INT1_CTRL , &RegDat); // FIFO int on INT1
 80015f6:	f107 030d 	add.w	r3, r7, #13
 80015fa:	461a      	mov	r2, r3
 80015fc:	210d      	movs	r1, #13
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fbe4 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Peripheral address / subaddress config ***/
	RegDat = 0x40;
 8001604:	2340      	movs	r3, #64	; 0x40
 8001606:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB access
 8001608:	f107 030d 	add.w	r3, r7, #13
 800160c:	461a      	mov	r2, r3
 800160e:	2101      	movs	r1, #1
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fbdb 	bl	8000dcc <LSM6DSO_WriteReg>

	// LIS2MDL Peripheral enable
	RegDat = LIS2MDL_I2C_ADDR;
 8001616:	233d      	movs	r3, #61	; 0x3d
 8001618:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_ADD, &RegDat);// Set address slv0
 800161a:	f107 030d 	add.w	r3, r7, #13
 800161e:	461a      	mov	r2, r3
 8001620:	2115      	movs	r1, #21
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fbd2 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = LIS2MDL_REG_OUTX_L;
 8001628:	2368      	movs	r3, #104	; 0x68
 800162a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_SUBADD, &RegDat);// Set start register for data output
 800162c:	f107 030d 	add.w	r3, r7, #13
 8001630:	461a      	mov	r2, r3
 8001632:	2116      	movs	r1, #22
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fbc9 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0xCE;
 800163a:	23ce      	movs	r3, #206	; 0xce
 800163c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_CONFIG, &RegDat);// Set bytes to read 0E Default 104Hz
 800163e:	f107 030d 	add.w	r3, r7, #13
 8001642:	461a      	mov	r2, r3
 8001644:	2117      	movs	r1, #23
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fbc0 	bl	8000dcc <LSM6DSO_WriteReg>
//	RegDat = STTS751_REG_TEMP_H;
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_SUBADD, &RegDat);// Set start register for data output
//	RegDat = 0x0B;
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_CONFIG, &RegDat);// Set bytes to read - status between L and H registers so need to read 3
//	RegDat = 0x00;
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Disable SHUB access
 800164c:	f107 030d 	add.w	r3, r7, #13
 8001650:	461a      	mov	r2, r3
 8001652:	2101      	movs	r1, #1
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fbb9 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Configure Xl and Gyro */
	RegDat = 0x44;
 800165a:	2344      	movs	r3, #68	; 0x44
 800165c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat);// Enable block update and auto increment registers
 800165e:	f107 030d 	add.w	r3, r7, #13
 8001662:	461a      	mov	r2, r3
 8001664:	2112      	movs	r1, #18
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fbb0 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x28;
 800166c:	2328      	movs	r3, #40	; 0x28
 800166e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL4_C, &RegDat);	// Int 1 and mask DRDY until Filter settles
 8001670:	f107 030d 	add.w	r3, r7, #13
 8001674:	461a      	mov	r2, r3
 8001676:	2113      	movs	r1, #19
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fba7 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 800167e:	2310      	movs	r3, #16
 8001680:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL6_C, &RegDat);// XL High performance disabled
 8001682:	f107 030d 	add.w	r3, r7, #13
 8001686:	461a      	mov	r2, r3
 8001688:	2115      	movs	r1, #21
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fb9e 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x80;
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL7_G, &RegDat);// Gyro High performance disabled
 8001694:	f107 030d 	add.w	r3, r7, #13
 8001698:	461a      	mov	r2, r3
 800169a:	2116      	movs	r1, #22
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fb95 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x20;
 80016a2:	2320      	movs	r3, #32
 80016a4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL10_C, &RegDat);// enable timestamps
 80016a6:	f107 030d 	add.w	r3, r7, #13
 80016aa:	461a      	mov	r2, r3
 80016ac:	2119      	movs	r1, #25
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fb8c 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 80016b4:	2310      	movs	r3, #16
 80016b6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL, &RegDat);//Set acc scale and sample rate  - ctrl 1 xl
 80016b8:	f107 030d 	add.w	r3, r7, #13
 80016bc:	461a      	mov	r2, r3
 80016be:	2110      	movs	r1, #16
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fb83 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 80016c6:	2310      	movs	r3, #16
 80016c8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G, &RegDat);// Gyro scale and sample rate - ctrl 2 g
 80016ca:	f107 030d 	add.w	r3, r7, #13
 80016ce:	461a      	mov	r2, r3
 80016d0:	2111      	movs	r1, #17
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fb7a 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Enable I2C Master to begin Data collection */
	RegDat = 0x40;
 80016d8:	2340      	movs	r3, #64	; 0x40
 80016da:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB Reg Access
 80016dc:	f107 030d 	add.w	r3, r7, #13
 80016e0:	461a      	mov	r2, r3
 80016e2:	2101      	movs	r1, #1
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fb71 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x4C;
 80016ea:	234c      	movs	r3, #76	; 0x4c
 80016ec:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable pullups & accel trigger drdy & number external sensors
 80016ee:	f107 030d 	add.w	r3, r7, #13
 80016f2:	461a      	mov	r2, r3
 80016f4:	2114      	movs	r1, #20
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fb68 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80016fc:	2300      	movs	r3, #0
 80016fe:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 8001700:	f107 030d 	add.w	r3, r7, #13
 8001704:	461a      	mov	r2, r3
 8001706:	2101      	movs	r1, #1
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fb5f 	bl	8000dcc <LSM6DSO_WriteReg>

}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <pawprint_readFIFO>:
// Custom FIFO read function with single additional buffer - Trying to address missing data issue
// Will attempt to align on single line per time stamp
// SD write file incorporated to ensure  buffer is unloaded ASAP and does not overrun due to FIFO depth
// Perhaps add line to get maximum line size and check that if added to buffer would not overflow

void pawprint_readFIFO (I2C_HandleTypeDef *i2cHandle, char *buffer, int *writeIndex, int *maxoutLength, int *tag_counter, sensor_out *FIFOout) {
 8001718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800171c:	b0ad      	sub	sp, #180	; 0xb4
 800171e:	af12      	add	r7, sp, #72	; 0x48
 8001720:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001722:	63b9      	str	r1, [r7, #56]	; 0x38
 8001724:	637a      	str	r2, [r7, #52]	; 0x34
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
	// Time at start of timer in UNIX to microsecond - reset by writing AAh to TIMESTAMP2 register when grabbing RTC time to sync
	// BDR value
	// Previous Timestamp
	// Previous Tag count

	HAL_StatusTypeDef statusOut = 0x00; // Success/Fail for each read/write
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t FIFOstatus[2];
	uint16_t FIFOdepth = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	int outLength = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	663b      	str	r3, [r7, #96]	; 0x60

	// Set Sensor BDR - Move to external input
	float bdr_xl = 12.5f;
 8001738:	4bb9      	ldr	r3, [pc, #740]	; (8001a20 <pawprint_readFIFO+0x308>)
 800173a:	65fb      	str	r3, [r7, #92]	; 0x5c
	float bdr_gyr = 12.5f;
 800173c:	4bb8      	ldr	r3, [pc, #736]	; (8001a20 <pawprint_readFIFO+0x308>)
 800173e:	65bb      	str	r3, [r7, #88]	; 0x58
	float bdr_max = fmaxf(bdr_xl, bdr_gyr);
 8001740:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8001744:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8001748:	f013 feb2 	bl	80154b0 <fmaxf>
 800174c:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54

	// Period length converted to LSB - 1lsb = 25us
	float batch_period = (1000000*(1/bdr_max))/25;
 8001750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001754:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175c:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001a24 <pawprint_readFIFO+0x30c>
 8001760:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001764:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	// Read timestamp_endcount bit to check for timestamp overrun
		// Enable a bit that forces a check for timestamp < old timestamp? Or other overrun check?

	// Read watermark flag and if/else
	statusOut = LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, &FIFOstatus[0],2);
 8001770:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001774:	2302      	movs	r3, #2
 8001776:	213a      	movs	r1, #58	; 0x3a
 8001778:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800177a:	f7ff fb09 	bl	8000d90 <LSM6DSO_ReadRegs>
 800177e:	4603      	mov	r3, r0
 8001780:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if( ((FIFOstatus[1] >> 7) & 0x01) || ((FIFOstatus[1] >> 6) & 0x01) || ((FIFOstatus[1] >> 5) & 0x01) ){
 8001784:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001788:	09db      	lsrs	r3, r3, #7
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d110      	bne.n	80017b6 <pawprint_readFIFO+0x9e>
 8001794:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d108      	bne.n	80017b6 <pawprint_readFIFO+0x9e>
 80017a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8215 	beq.w	8001be0 <pawprint_readFIFO+0x4c8>
		//if ((FIFOstatus[1] >> 6) & 0x01) {
		//	overrunStatus = 1;
		//}

		// get fifo depth
		FIFOdepth = (((uint16_t)FIFOstatus[1] & 0x03) << 8 ) + (uint16_t)FIFOstatus[0];
 80017b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

		while(FIFOdepth--){
 80017d0:	e1fe      	b.n	8001bd0 <pawprint_readFIFO+0x4b8>

			uint8_t FIFOdat[7] = {0};
 80017d2:	2300      	movs	r3, #0
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
 80017d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017da:	2100      	movs	r1, #0
 80017dc:	460a      	mov	r2, r1
 80017de:	801a      	strh	r2, [r3, #0]
 80017e0:	460a      	mov	r2, r1
 80017e2:	709a      	strb	r2, [r3, #2]

			statusOut = LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_DATA_OUT_TAG, &FIFOdat[0], 7);
 80017e4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80017e8:	2307      	movs	r3, #7
 80017ea:	2178      	movs	r1, #120	; 0x78
 80017ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017ee:	f7ff facf 	bl	8000d90 <LSM6DSO_ReadRegs>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			// Get tag type & counter
			uint8_t tag = (FIFOdat[0] & 0xF8) >> 0x03;
 80017f8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80017fc:	08db      	lsrs	r3, r3, #3
 80017fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			uint8_t new_tag_counter = (FIFOdat[0] & 0x06) >> 0x01;
 8001802:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001806:	105b      	asrs	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

			// Is tag_counter same as previous?
			if ((new_tag_counter != *tag_counter)){
 8001812:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001816:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	f000 812f 	beq.w	8001a80 <pawprint_readFIFO+0x368>

					// send old data to buffer with snprintf
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 8001822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	189e      	adds	r6, r3, r2
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f1c3 0304 	rsb	r3, r3, #4
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
							        	    		    			FIFOout->timestamp * 25 / 1000000,
 8001834:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009a      	lsls	r2, r3, #2
 8001842:	4413      	add	r3, r2
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 8001844:	4a78      	ldr	r2, [pc, #480]	; (8001a28 <pawprint_readFIFO+0x310>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0c9a      	lsrs	r2, r3, #18
 800184c:	62ba      	str	r2, [r7, #40]	; 0x28
							        								lsm6dso_from_fs2_to_mg(FIFOout->XLdat.x),
 800184e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001852:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f9c8 	bl	8001bec <lsm6dso_from_fs2_to_mg>
 800185c:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe71 	bl	8000548 <__aeabi_f2d>
 8001866:	e9c7 0108 	strd	r0, r1, [r7, #32]
							        								lsm6dso_from_fs2_to_mg(FIFOout->XLdat.y),
 800186a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800186e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f9ba 	bl	8001bec <lsm6dso_from_fs2_to_mg>
 8001878:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe63 	bl	8000548 <__aeabi_f2d>
 8001882:	e9c7 0106 	strd	r0, r1, [r7, #24]
							        								lsm6dso_from_fs2_to_mg(FIFOout->XLdat.z),
 8001886:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800188a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f9ac 	bl	8001bec <lsm6dso_from_fs2_to_mg>
 8001894:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe55 	bl	8000548 <__aeabi_f2d>
 800189e:	e9c7 0104 	strd	r0, r1, [r7, #16]

									        						lsm6dso_from_fs125_to_mdps(FIFOout->GYRdat.x),
 80018a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f9b6 	bl	8001c1c <lsm6dso_from_fs125_to_mdps>
 80018b0:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe47 	bl	8000548 <__aeabi_f2d>
 80018ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
																	lsm6dso_from_fs125_to_mdps(FIFOout->GYRdat.y),
 80018be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018c2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f9a8 	bl	8001c1c <lsm6dso_from_fs125_to_mdps>
 80018cc:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe39 	bl	8000548 <__aeabi_f2d>
 80018d6:	e9c7 0100 	strd	r0, r1, [r7]
																	lsm6dso_from_fs125_to_mdps(FIFOout->GYRdat.z),
 80018da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f99a 	bl	8001c1c <lsm6dso_from_fs125_to_mdps>
 80018e8:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe2b 	bl	8000548 <__aeabi_f2d>
 80018f2:	4682      	mov	sl, r0
 80018f4:	468b      	mov	fp, r1

																	lis2mdl_from_lsb_to_mgauss(FIFOout->MAGdat.x),
 80018f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80018fa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f9a4 	bl	8001c4c <lis2mdl_from_lsb_to_mgauss>
 8001904:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe1d 	bl	8000548 <__aeabi_f2d>
 800190e:	4680      	mov	r8, r0
 8001910:	4689      	mov	r9, r1
																	lis2mdl_from_lsb_to_mgauss(FIFOout->MAGdat.y),
 8001912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001916:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f996 	bl	8001c4c <lis2mdl_from_lsb_to_mgauss>
 8001920:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe0f 	bl	8000548 <__aeabi_f2d>
 800192a:	4604      	mov	r4, r0
 800192c:	460d      	mov	r5, r1
																	lis2mdl_from_lsb_to_mgauss(FIFOout->MAGdat.z));
 800192e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001932:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f988 	bl	8001c4c <lis2mdl_from_lsb_to_mgauss>
 800193c:	ee10 3a10 	vmov	r3, s0
					outLength = snprintf(&buffer[*writeIndex],sizeof(&buffer)-*writeIndex ,"%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe01 	bl	8000548 <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800194e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001952:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001956:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800195a:	ed97 7b00 	vldr	d7, [r7]
 800195e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001962:	ed97 7b02 	vldr	d7, [r7, #8]
 8001966:	ed8d 7b06 	vstr	d7, [sp, #24]
 800196a:	ed97 7b04 	vldr	d7, [r7, #16]
 800196e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001972:	ed97 7b06 	vldr	d7, [r7, #24]
 8001976:	ed8d 7b02 	vstr	d7, [sp, #8]
 800197a:	ed97 7b08 	vldr	d7, [r7, #32]
 800197e:	ed8d 7b00 	vstr	d7, [sp]
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	4a29      	ldr	r2, [pc, #164]	; (8001a2c <pawprint_readFIFO+0x314>)
 8001986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001988:	4630      	mov	r0, r6
 800198a:	f010 f8a7 	bl	8011adc <sniprintf>
 800198e:	6638      	str	r0, [r7, #96]	; 0x60

					// clear data - Can I assign this in one? As not changing TimeStamp couldnt work it out
					FIFOout->XLdat.x = 0 ;
 8001990:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001994:	2200      	movs	r2, #0
 8001996:	809a      	strh	r2, [r3, #4]
					FIFOout->XLdat.y = 0 ;
 8001998:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800199c:	2200      	movs	r2, #0
 800199e:	80da      	strh	r2, [r3, #6]
					FIFOout->XLdat.z = 0 ;
 80019a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019a4:	2200      	movs	r2, #0
 80019a6:	811a      	strh	r2, [r3, #8]
					FIFOout->GYRdat.x = 0 ;
 80019a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019ac:	2200      	movs	r2, #0
 80019ae:	815a      	strh	r2, [r3, #10]
					FIFOout->GYRdat.y = 0 ;
 80019b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019b4:	2200      	movs	r2, #0
 80019b6:	819a      	strh	r2, [r3, #12]
					FIFOout->GYRdat.z = 0 ;
 80019b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019bc:	2200      	movs	r2, #0
 80019be:	81da      	strh	r2, [r3, #14]
					FIFOout->MAGdat.x = 0 ;
 80019c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019c4:	2200      	movs	r2, #0
 80019c6:	821a      	strh	r2, [r3, #16]
					FIFOout->GYRdat.y = 0 ;
 80019c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019cc:	2200      	movs	r2, #0
 80019ce:	819a      	strh	r2, [r3, #12]
					FIFOout->GYRdat.z = 0 ;
 80019d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019d4:	2200      	movs	r2, #0
 80019d6:	81da      	strh	r2, [r3, #14]
					//*FIFOout = (sensor_out) {0};

					// update max line length - for debug and not used?
					if (outLength > *maxoutLength){
 80019d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019de:	429a      	cmp	r2, r3
 80019e0:	dd02      	ble.n	80019e8 <pawprint_readFIFO+0x2d0>
						*maxoutLength = outLength;
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019e6:	601a      	str	r2, [r3, #0]
					}
					// update buffer write index
					*writeIndex += outLength;
 80019e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ee:	441a      	add	r2, r3
 80019f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f2:	601a      	str	r2, [r3, #0]

				uint8_t diff_tag_counter = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

				if(new_tag_counter < *tag_counter)
 80019fa:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80019fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	da13      	bge.n	8001a30 <pawprint_readFIFO+0x318>
				{

					diff_tag_counter = new_tag_counter + 4u - *tag_counter;
 8001a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	3304      	adds	r3, #4
 8001a1a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001a1e:	e010      	b.n	8001a42 <pawprint_readFIFO+0x32a>
 8001a20:	41480000 	.word	0x41480000
 8001a24:	49742400 	.word	0x49742400
 8001a28:	431bde83 	.word	0x431bde83
 8001a2c:	08015588 	.word	0x08015588

				}
				else
				{
					diff_tag_counter = new_tag_counter - *tag_counter;
 8001a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				}

				*tag_counter = new_tag_counter;
 8001a42:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a4a:	601a      	str	r2, [r3, #0]

				// Update Timestamp based on counter change - works reliably only where <4 batch periods have passed
				//uint32_t old_timestamp = FIFOout.timestamp;
				FIFOout->timestamp += (batch_period * diff_tag_counter);
 8001a4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a5a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a66:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a76:	ee17 2a90 	vmov	r2, s15
 8001a7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a7e:	601a      	str	r2, [r3, #0]
				// Timestamp reset bit exists but do not see reason to use?

			}

			// switch to ID sensor from tag
			switch (tag)
 8001a80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a84:	3b01      	subs	r3, #1
 8001a86:	2b0d      	cmp	r3, #13
 8001a88:	f200 80a2 	bhi.w	8001bd0 <pawprint_readFIFO+0x4b8>
 8001a8c:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <pawprint_readFIFO+0x37c>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001acd 	.word	0x08001acd
 8001a98:	08001b17 	.word	0x08001b17
 8001a9c:	08001bd1 	.word	0x08001bd1
 8001aa0:	08001b61 	.word	0x08001b61
 8001aa4:	08001bd1 	.word	0x08001bd1
 8001aa8:	08001bd1 	.word	0x08001bd1
 8001aac:	08001bd1 	.word	0x08001bd1
 8001ab0:	08001bd1 	.word	0x08001bd1
 8001ab4:	08001bd1 	.word	0x08001bd1
 8001ab8:	08001bd1 	.word	0x08001bd1
 8001abc:	08001bd1 	.word	0x08001bd1
 8001ac0:	08001bd1 	.word	0x08001bd1
 8001ac4:	08001bd1 	.word	0x08001bd1
 8001ac8:	08001b87 	.word	0x08001b87
			{
				case 0x01: // Gyroscope
					FIFOout->GYRdat.x = (FIFOdat[2] << 8) | FIFOdat[1] ;
 8001acc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	4313      	orrs	r3, r2
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ae2:	815a      	strh	r2, [r3, #10]
					FIFOout->GYRdat.y = (FIFOdat[4] << 8) | FIFOdat[3];
 8001ae4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001afa:	819a      	strh	r2, [r3, #12]
					FIFOout->GYRdat.z = (FIFOdat[6] << 8) | FIFOdat[5];
 8001afc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	b21a      	sxth	r2, r3
 8001b04:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b12:	81da      	strh	r2, [r3, #14]
					break;
 8001b14:	e05c      	b.n	8001bd0 <pawprint_readFIFO+0x4b8>

				case 0x02: // Accelerometer
					FIFOout->XLdat.x = (FIFOdat[2] << 8) | FIFOdat[1];
 8001b16:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b2c:	809a      	strh	r2, [r3, #4]
					FIFOout->XLdat.y = (FIFOdat[4] << 8) | FIFOdat[3];
 8001b2e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b44:	80da      	strh	r2, [r3, #6]
					FIFOout->XLdat.z = (FIFOdat[6] << 8) | FIFOdat[5];
 8001b46:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b21a      	sxth	r2, r3
 8001b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b5c:	811a      	strh	r2, [r3, #8]
					break;
 8001b5e:	e037      	b.n	8001bd0 <pawprint_readFIFO+0x4b8>

				case 0x04: // Timestamp
					FIFOout->timestamp = (FIFOdat[4] << 24) | (FIFOdat[3] << 16) | (FIFOdat[2] << 8) | FIFOdat[1];
 8001b60:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b64:	061a      	lsls	r2, r3, #24
 8001b66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	4313      	orrs	r3, r2
 8001b76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b82:	601a      	str	r2, [r3, #0]
					break;
 8001b84:	e024      	b.n	8001bd0 <pawprint_readFIFO+0x4b8>

				case 0x0E: // Magnetometer
					FIFOout->MAGdat.x = (FIFOdat[2] << 8) | FIFOdat[1];
 8001b86:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b9c:	821a      	strh	r2, [r3, #16]
					FIFOout->MAGdat.y = (FIFOdat[4] << 8) | FIFOdat[3];
 8001b9e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bb4:	825a      	strh	r2, [r3, #18]
					FIFOout->MAGdat.z = (FIFOdat[6] << 8) | FIFOdat[5];
 8001bb6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b21a      	sxth	r2, r3
 8001bbe:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	b21a      	sxth	r2, r3
 8001bc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bcc:	829a      	strh	r2, [r3, #20]
					break;
 8001bce:	bf00      	nop
		while(FIFOdepth--){
 8001bd0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001bd4:	1e5a      	subs	r2, r3, #1
 8001bd6:	f8a7 2066 	strh.w	r2, [r7, #102]	; 0x66
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f adf9 	bne.w	80017d2 <pawprint_readFIFO+0xba>

		}

	}

}
 8001be0:	bf00      	nop
 8001be2:	376c      	adds	r7, #108	; 0x6c
 8001be4:	46bd      	mov	sp, r7
 8001be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bea:	bf00      	nop

08001bec <lsm6dso_from_fs2_to_mg>:


float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8001bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c02:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c18 <lsm6dso_from_fs2_to_mg+0x2c>
 8001c06:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	3d79db23 	.word	0x3d79db23

08001c1c <lsm6dso_from_fs125_to_mdps>:

float_t lsm6dso_from_fs125_to_mdps(int16_t lsb)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 4.375f;
 8001c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c32:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c48 <lsm6dso_from_fs125_to_mdps+0x2c>
 8001c36:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	408c0000 	.word	0x408c0000

08001c4c <lis2mdl_from_lsb_to_mgauss>:

float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 8001c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c62:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001c66:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_MspInit+0x44>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_MspInit+0x44>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_MspInit+0x44>)
 8001c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_MspInit+0x44>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_MspInit+0x44>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_MspInit+0x44>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0ac      	sub	sp, #176	; 0xb0
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2288      	movs	r2, #136	; 0x88
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00f ffac 	bl	8011c3e <memset>
  if(hi2c->Instance==I2C3)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <HAL_I2C_MspInit+0xb0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d13b      	bne.n	8001d68 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 feb2 	bl	8005a68 <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d0a:	f7ff fb0f 	bl	800132c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_I2C_MspInit+0xb4>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_I2C_MspInit+0xb4>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_I2C_MspInit+0xb4>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <HAL_I2C_MspInit+0xb8>)
 8001d4c:	f000 fe60 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_I2C_MspInit+0xb4>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_I2C_MspInit+0xb4>)
 8001d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_I2C_MspInit+0xb4>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	37b0      	adds	r7, #176	; 0xb0
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40005c00 	.word	0x40005c00
 8001d74:	40021000 	.word	0x40021000
 8001d78:	48000800 	.word	0x48000800

08001d7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0a4      	sub	sp, #144	; 0x90
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	2288      	movs	r2, #136	; 0x88
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00f ff56 	bl	8011c3e <memset>
  if(hrtc->Instance==RTC)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a10      	ldr	r2, [pc, #64]	; (8001dd8 <HAL_RTC_MspInit+0x5c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d118      	bne.n	8001dce <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 fe5a 	bl	8005a68 <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001dba:	f7ff fab7 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_RTC_MspInit+0x60>)
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_RTC_MspInit+0x60>)
 8001dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3790      	adds	r7, #144	; 0x90
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40002800 	.word	0x40002800
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b0ac      	sub	sp, #176	; 0xb0
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2288      	movs	r2, #136	; 0x88
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f00f ff1c 	bl	8011c3e <memset>
  if(hsd->Instance==SDMMC1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_SD_MspInit+0x170>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	f040 809a 	bne.w	8001f46 <HAL_SD_MspInit+0x166>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001e12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 8001e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 fe1f 	bl	8005a68 <HAL_RCCEx_PeriphCLKConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001e30:	f7ff fa7c 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e34:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_SD_MspInit+0x174>)
 8001e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e38:	4a46      	ldr	r2, [pc, #280]	; (8001f54 <HAL_SD_MspInit+0x174>)
 8001e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <HAL_SD_MspInit+0x174>)
 8001e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_SD_MspInit+0x174>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	4a40      	ldr	r2, [pc, #256]	; (8001f54 <HAL_SD_MspInit+0x174>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e58:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <HAL_SD_MspInit+0x174>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <HAL_SD_MspInit+0x174>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	4a3a      	ldr	r2, [pc, #232]	; (8001f54 <HAL_SD_MspInit+0x174>)
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e70:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <HAL_SD_MspInit+0x174>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e7c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e96:	230c      	movs	r3, #12
 8001e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	482d      	ldr	r0, [pc, #180]	; (8001f58 <HAL_SD_MspInit+0x178>)
 8001ea4:	f000 fdb4 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ec0:	230c      	movs	r3, #12
 8001ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4823      	ldr	r0, [pc, #140]	; (8001f5c <HAL_SD_MspInit+0x17c>)
 8001ece:	f000 fd9f 	bl	8002a10 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8001ed2:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_SD_MspInit+0x184>)
 8001ed6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8001ed8:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001eda:	2207      	movs	r2, #7
 8001edc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001efe:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001f08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8001f0e:	4814      	ldr	r0, [pc, #80]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001f10:	f000 fb46 	bl	80025a0 <HAL_DMA_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_SD_MspInit+0x13e>
    {
      Error_Handler();
 8001f1a:	f7ff fa07 	bl	800132c <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001f2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_SD_MspInit+0x180>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2031      	movs	r0, #49	; 0x31
 8001f3c:	f000 faf9 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001f40:	2031      	movs	r0, #49	; 0x31
 8001f42:	f000 fb12 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001f46:	bf00      	nop
 8001f48:	37b0      	adds	r7, #176	; 0xb0
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40012800 	.word	0x40012800
 8001f54:	40021000 	.word	0x40021000
 8001f58:	48000800 	.word	0x48000800
 8001f5c:	48000c00 	.word	0x48000c00
 8001f60:	200003ec 	.word	0x200003ec
 8001f64:	40020444 	.word	0x40020444

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <NMI_Handler+0x4>

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb4:	f000 f99e 	bl	80022f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8001fc0:	2004      	movs	r0, #4
 8001fc2:	f000 fee7 	bl	8002d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_INT_Pin);
 8001fce:	2008      	movs	r0, #8
 8001fd0:	f000 fee0 	bl	8002d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <SDMMC1_IRQHandler+0x10>)
 8001fde:	f005 fd29 	bl	8007a34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000368 	.word	0x20000368

08001fec <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <DMA2_Channel4_IRQHandler+0x10>)
 8001ff2:	f000 fc2e 	bl	8002852 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200003ec 	.word	0x200003ec

08002000 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <OTG_FS_IRQHandler+0x10>)
 8002006:	f001 fe4d 	bl	8003ca4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000dbb4 	.word	0x2000dbb4

08002014 <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af04      	add	r7, sp, #16
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	460b      	mov	r3, r1
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	b29a      	uxth	r2, r3
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	2301      	movs	r3, #1
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	2172      	movs	r1, #114	; 0x72
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f001 f877 	bl	800312c <HAL_I2C_Mem_Read>
 800203e:	4603      	mov	r3, r0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return 1;
 800204c:	2301      	movs	r3, #1
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_kill>:

int _kill(int pid, int sig)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002062:	f00f fe59 	bl	8011d18 <__errno>
 8002066:	4603      	mov	r3, r0
 8002068:	2216      	movs	r2, #22
 800206a:	601a      	str	r2, [r3, #0]
  return -1;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_exit>:

void _exit (int status)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ffe7 	bl	8002058 <_kill>
  while (1) {}    /* Make sure we hang here */
 800208a:	e7fe      	b.n	800208a <_exit+0x12>

0800208c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	e00a      	b.n	80020b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800209e:	f3af 8000 	nop.w
 80020a2:	4601      	mov	r1, r0
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	60ba      	str	r2, [r7, #8]
 80020aa:	b2ca      	uxtb	r2, r1
 80020ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dbf0      	blt.n	800209e <_read+0x12>
  }

  return len;
 80020bc:	687b      	ldr	r3, [r7, #4]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e009      	b.n	80020ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	60ba      	str	r2, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3301      	adds	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dbf1      	blt.n	80020d8 <_write+0x12>
  }
  return len;
 80020f4:	687b      	ldr	r3, [r7, #4]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_close>:

int _close(int file)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002126:	605a      	str	r2, [r3, #4]
  return 0;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_isatty>:

int _isatty(int file)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <_sbrk+0x5c>)
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <_sbrk+0x60>)
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <_sbrk+0x64>)
 8002186:	4a12      	ldr	r2, [pc, #72]	; (80021d0 <_sbrk+0x68>)
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	429a      	cmp	r2, r3
 8002196:	d207      	bcs.n	80021a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002198:	f00f fdbe 	bl	8011d18 <__errno>
 800219c:	4603      	mov	r3, r0
 800219e:	220c      	movs	r2, #12
 80021a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e009      	b.n	80021bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ae:	4b07      	ldr	r3, [pc, #28]	; (80021cc <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <_sbrk+0x64>)
 80021b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20018000 	.word	0x20018000
 80021c8:	00000800 	.word	0x00000800
 80021cc:	2000c228 	.word	0x2000c228
 80021d0:	2000e430 	.word	0x2000e430

080021d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <SystemInit+0x20>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <SystemInit+0x20>)
 80021e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002230 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021fc:	f7ff ffea 	bl	80021d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002200:	480c      	ldr	r0, [pc, #48]	; (8002234 <LoopForever+0x6>)
  ldr r1, =_edata
 8002202:	490d      	ldr	r1, [pc, #52]	; (8002238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <LoopForever+0xe>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002208:	e002      	b.n	8002210 <LoopCopyDataInit>

0800220a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800220c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220e:	3304      	adds	r3, #4

08002210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002214:	d3f9      	bcc.n	800220a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002218:	4c0a      	ldr	r4, [pc, #40]	; (8002244 <LoopForever+0x16>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800221c:	e001      	b.n	8002222 <LoopFillZerobss>

0800221e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002220:	3204      	adds	r2, #4

08002222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002224:	d3fb      	bcc.n	800221e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002226:	f00f fd7d 	bl	8011d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800222a:	f7fe fdf5 	bl	8000e18 <main>

0800222e <LoopForever>:

LoopForever:
    b LoopForever
 800222e:	e7fe      	b.n	800222e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002230:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 800223c:	08015b70 	.word	0x08015b70
  ldr r2, =_sbss
 8002240:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8002244:	2000e42c 	.word	0x2000e42c

08002248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC1_2_IRQHandler>

0800224a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002254:	2003      	movs	r0, #3
 8002256:	f000 f961 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800225a:	200f      	movs	r0, #15
 800225c:	f000 f80e 	bl	800227c <HAL_InitTick>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	e001      	b.n	8002270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800226c:	f7ff fd04 	bl	8001c78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002270:	79fb      	ldrb	r3, [r7, #7]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_InitTick+0x6c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d023      	beq.n	80022d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_InitTick+0x70>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_InitTick+0x6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f96d 	bl	8002586 <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10f      	bne.n	80022d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d809      	bhi.n	80022cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f000 f937 	bl	8002532 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_InitTick+0x74>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e007      	b.n	80022dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e004      	b.n	80022dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
 80022d6:	e001      	b.n	80022dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000008 	.word	0x20000008
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004

080022f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	2000c22c 	.word	0x2000c22c

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000c22c 	.word	0x2000c22c

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4907      	ldr	r1, [pc, #28]	; (8002418 <__NVIC_EnableIRQ+0x38>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	; (800246c <__NVIC_SetPriority+0x50>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
         );
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff8e 	bl	800241c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff29 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff3e 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff8e 	bl	8002470 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5d 	bl	800241c <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff31 	bl	80023e0 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffa2 	bl	80024d8 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e098      	b.n	80026e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b4d      	ldr	r3, [pc, #308]	; (80026f0 <HAL_DMA_Init+0x150>)
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d80f      	bhi.n	80025de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <HAL_DMA_Init+0x154>)
 80025c6:	4413      	add	r3, r2
 80025c8:	4a4b      	ldr	r2, [pc, #300]	; (80026f8 <HAL_DMA_Init+0x158>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	009a      	lsls	r2, r3, #2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a48      	ldr	r2, [pc, #288]	; (80026fc <HAL_DMA_Init+0x15c>)
 80025da:	641a      	str	r2, [r3, #64]	; 0x40
 80025dc:	e00e      	b.n	80025fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b46      	ldr	r3, [pc, #280]	; (8002700 <HAL_DMA_Init+0x160>)
 80025e6:	4413      	add	r3, r2
 80025e8:	4a43      	ldr	r2, [pc, #268]	; (80026f8 <HAL_DMA_Init+0x158>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a42      	ldr	r2, [pc, #264]	; (8002704 <HAL_DMA_Init+0x164>)
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002656:	d039      	beq.n	80026cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <HAL_DMA_Init+0x15c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d11a      	bne.n	8002698 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_DMA_Init+0x168>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f003 031c 	and.w	r3, r3, #28
 800266e:	210f      	movs	r1, #15
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	4924      	ldr	r1, [pc, #144]	; (8002708 <HAL_DMA_Init+0x168>)
 8002678:	4013      	ands	r3, r2
 800267a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_DMA_Init+0x168>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f003 031c 	and.w	r3, r3, #28
 800268c:	fa01 f303 	lsl.w	r3, r1, r3
 8002690:	491d      	ldr	r1, [pc, #116]	; (8002708 <HAL_DMA_Init+0x168>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
 8002696:	e019      	b.n	80026cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_DMA_Init+0x16c>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	f003 031c 	and.w	r3, r3, #28
 80026a4:	210f      	movs	r1, #15
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	4917      	ldr	r1, [pc, #92]	; (800270c <HAL_DMA_Init+0x16c>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_DMA_Init+0x16c>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f003 031c 	and.w	r3, r3, #28
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	4911      	ldr	r1, [pc, #68]	; (800270c <HAL_DMA_Init+0x16c>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40020407 	.word	0x40020407
 80026f4:	bffdfff8 	.word	0xbffdfff8
 80026f8:	cccccccd 	.word	0xcccccccd
 80026fc:	40020000 	.word	0x40020000
 8002700:	bffdfbf8 	.word	0xbffdfbf8
 8002704:	40020400 	.word	0x40020400
 8002708:	400200a8 	.word	0x400200a8
 800270c:	400204a8 	.word	0x400204a8

08002710 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_DMA_Start_IT+0x20>
 800272c:	2302      	movs	r3, #2
 800272e:	e04b      	b.n	80027c8 <HAL_DMA_Start_IT+0xb8>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d13a      	bne.n	80027ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68b9      	ldr	r1, [r7, #8]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f921 	bl	80029b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 020e 	orr.w	r2, r2, #14
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e00f      	b.n	80027a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0204 	bic.w	r2, r2, #4
 8002796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 020a 	orr.w	r2, r2, #10
 80027a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e005      	b.n	80027c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
 80027c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d005      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2204      	movs	r2, #4
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e029      	b.n	8002848 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 020e 	bic.w	r2, r2, #14
 8002802:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	f003 021c 	and.w	r2, r3, #28
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
    }
  }
  return status;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 031c 	and.w	r3, r3, #28
 8002872:	2204      	movs	r2, #4
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d026      	beq.n	80028cc <HAL_DMA_IRQHandler+0x7a>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d021      	beq.n	80028cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0204 	bic.w	r2, r2, #4
 80028a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f003 021c 	and.w	r2, r3, #28
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2104      	movs	r1, #4
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d071      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028ca:	e06c      	b.n	80029a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f003 031c 	and.w	r3, r3, #28
 80028d4:	2202      	movs	r2, #2
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d02e      	beq.n	800293e <HAL_DMA_IRQHandler+0xec>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d029      	beq.n	800293e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 020a 	bic.w	r2, r2, #10
 8002906:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f003 021c 	and.w	r2, r3, #28
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	2102      	movs	r1, #2
 800291e:	fa01 f202 	lsl.w	r2, r1, r2
 8002922:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d038      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800293c:	e033      	b.n	80029a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f003 031c 	and.w	r3, r3, #28
 8002946:	2208      	movs	r2, #8
 8002948:	409a      	lsls	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d02a      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x156>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d025      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 020e 	bic.w	r2, r2, #14
 800296a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	f003 021c 	and.w	r2, r3, #28
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f202 	lsl.w	r2, r1, r2
 800297e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
}
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f003 021c 	and.w	r2, r3, #28
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2101      	movs	r1, #1
 80029cc:	fa01 f202 	lsl.w	r2, r1, r2
 80029d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b10      	cmp	r3, #16
 80029e0:	d108      	bne.n	80029f4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029f2:	e007      	b.n	8002a04 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	60da      	str	r2, [r3, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1e:	e17f      	b.n	8002d20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8171 	beq.w	8002d1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d005      	beq.n	8002a50 <HAL_GPIO_Init+0x40>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d130      	bne.n	8002ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a86:	2201      	movs	r2, #1
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 0201 	and.w	r2, r3, #1
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d118      	bne.n	8002af0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	f003 0201 	and.w	r2, r3, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d017      	beq.n	8002b2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d123      	bne.n	8002b80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	08da      	lsrs	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3208      	adds	r2, #8
 8002b7a:	6939      	ldr	r1, [r7, #16]
 8002b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80ac 	beq.w	8002d1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	4b5f      	ldr	r3, [pc, #380]	; (8002d40 <HAL_GPIO_Init+0x330>)
 8002bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc6:	4a5e      	ldr	r2, [pc, #376]	; (8002d40 <HAL_GPIO_Init+0x330>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8002bce:	4b5c      	ldr	r3, [pc, #368]	; (8002d40 <HAL_GPIO_Init+0x330>)
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bda:	4a5a      	ldr	r2, [pc, #360]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c04:	d025      	beq.n	8002c52 <HAL_GPIO_Init+0x242>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4f      	ldr	r2, [pc, #316]	; (8002d48 <HAL_GPIO_Init+0x338>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01f      	beq.n	8002c4e <HAL_GPIO_Init+0x23e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4e      	ldr	r2, [pc, #312]	; (8002d4c <HAL_GPIO_Init+0x33c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d019      	beq.n	8002c4a <HAL_GPIO_Init+0x23a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4d      	ldr	r2, [pc, #308]	; (8002d50 <HAL_GPIO_Init+0x340>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x236>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4c      	ldr	r2, [pc, #304]	; (8002d54 <HAL_GPIO_Init+0x344>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x232>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4b      	ldr	r2, [pc, #300]	; (8002d58 <HAL_GPIO_Init+0x348>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x22e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4a      	ldr	r2, [pc, #296]	; (8002d5c <HAL_GPIO_Init+0x34c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x22a>
 8002c36:	2306      	movs	r3, #6
 8002c38:	e00c      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	e00a      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c3e:	2305      	movs	r3, #5
 8002c40:	e008      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c42:	2304      	movs	r3, #4
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e004      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e002      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x244>
 8002c52:	2300      	movs	r3, #0
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c64:	4937      	ldr	r1, [pc, #220]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c96:	4a32      	ldr	r2, [pc, #200]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c9c:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cc6:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cea:	4a1d      	ldr	r2, [pc, #116]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d14:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f47f ae78 	bne.w	8002a20 <HAL_GPIO_Init+0x10>
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40010000 	.word	0x40010000
 8002d48:	48000400 	.word	0x48000400
 8002d4c:	48000800 	.word	0x48000800
 8002d50:	48000c00 	.word	0x48000c00
 8002d54:	48001000 	.word	0x48001000
 8002d58:	48001400 	.word	0x48001400
 8002d5c:	48001800 	.word	0x48001800
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e001      	b.n	8002d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f824 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40010400 	.word	0x40010400

08002dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e08d      	b.n	8002ef2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe ff68 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	; 0x24
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d107      	bne.n	8002e3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	e006      	b.n	8002e4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d108      	bne.n	8002e66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	e007      	b.n	8002e76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69d9      	ldr	r1, [r3, #28]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	f040 80fd 	bne.w	800311e <HAL_I2C_Mem_Write+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_I2C_Mem_Write+0x34>
 8002f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0f1      	b.n	8003120 <HAL_I2C_Mem_Write+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_I2C_Mem_Write+0x4e>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0ea      	b.n	8003120 <HAL_I2C_Mem_Write+0x224>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f52:	f7ff f9e3 	bl	800231c <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2319      	movs	r3, #25
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fac7 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0d5      	b.n	8003120 <HAL_I2C_Mem_Write+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2221      	movs	r2, #33	; 0x21
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2240      	movs	r2, #64	; 0x40
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a3a      	ldr	r2, [r7, #32]
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f9c:	88f8      	ldrh	r0, [r7, #6]
 8002f9e:	893a      	ldrh	r2, [r7, #8]
 8002fa0:	8979      	ldrh	r1, [r7, #10]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	4603      	mov	r3, r0
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f9d7 	bl	8003360 <I2C_RequestMemoryWrite>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0ad      	b.n	8003120 <HAL_I2C_Mem_Write+0x224>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2bff      	cmp	r3, #255	; 0xff
 8002fcc:	d90e      	bls.n	8002fec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	22ff      	movs	r2, #255	; 0xff
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	8979      	ldrh	r1, [r7, #10]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fc41 	bl	800386c <I2C_TransferConfig>
 8002fea:	e00f      	b.n	800300c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	8979      	ldrh	r1, [r7, #10]
 8002ffe:	2300      	movs	r3, #0
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fc30 	bl	800386c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fac0 	bl	8003596 <I2C_WaitOnTXISFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e07f      	b.n	8003120 <HAL_I2C_Mem_Write+0x224>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d034      	beq.n	80030c4 <HAL_I2C_Mem_Write+0x1c8>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d130      	bne.n	80030c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	2200      	movs	r2, #0
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fa43 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e051      	b.n	8003120 <HAL_I2C_Mem_Write+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2bff      	cmp	r3, #255	; 0xff
 8003084:	d90e      	bls.n	80030a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	22ff      	movs	r2, #255	; 0xff
 800308a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	b2da      	uxtb	r2, r3
 8003092:	8979      	ldrh	r1, [r7, #10]
 8003094:	2300      	movs	r3, #0
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fbe5 	bl	800386c <I2C_TransferConfig>
 80030a2:	e00f      	b.n	80030c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	2300      	movs	r3, #0
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fbd4 	bl	800386c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d19e      	bne.n	800300c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 faa6 	bl	8003624 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e01e      	b.n	8003120 <HAL_I2C_Mem_Write+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2220      	movs	r2, #32
 80030e8:	61da      	str	r2, [r3, #28]

    /* Clear NAK flag */

    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2210      	movs	r2, #16
 80030f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_I2C_Mem_Write+0x22c>)
 80030fe:	400b      	ands	r3, r1
 8003100:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_I2C_Mem_Write+0x224>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	fe00e800 	.word	0xfe00e800

0800312c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af02      	add	r7, sp, #8
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	461a      	mov	r2, r3
 800313a:	4603      	mov	r3, r0
 800313c:	817b      	strh	r3, [r7, #10]
 800313e:	460b      	mov	r3, r1
 8003140:	813b      	strh	r3, [r7, #8]
 8003142:	4613      	mov	r3, r2
 8003144:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	f040 80fd 	bne.w	800334e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_I2C_Mem_Read+0x34>
 800315a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0f1      	b.n	8003350 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_I2C_Mem_Read+0x4e>
 8003176:	2302      	movs	r3, #2
 8003178:	e0ea      	b.n	8003350 <HAL_I2C_Mem_Read+0x224>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003182:	f7ff f8cb 	bl	800231c <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2319      	movs	r3, #25
 800318e:	2201      	movs	r2, #1
 8003190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f9af 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0d5      	b.n	8003350 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2222      	movs	r2, #34	; 0x22
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2240      	movs	r2, #64	; 0x40
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a3a      	ldr	r2, [r7, #32]
 80031be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031cc:	88f8      	ldrh	r0, [r7, #6]
 80031ce:	893a      	ldrh	r2, [r7, #8]
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	4603      	mov	r3, r0
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f913 	bl	8003408 <I2C_RequestMemoryRead>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0ad      	b.n	8003350 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2bff      	cmp	r3, #255	; 0xff
 80031fc:	d90e      	bls.n	800321c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	22ff      	movs	r2, #255	; 0xff
 8003202:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	b2da      	uxtb	r2, r3
 800320a:	8979      	ldrh	r1, [r7, #10]
 800320c:	4b52      	ldr	r3, [pc, #328]	; (8003358 <HAL_I2C_Mem_Read+0x22c>)
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 fb29 	bl	800386c <I2C_TransferConfig>
 800321a:	e00f      	b.n	800323c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	b2da      	uxtb	r2, r3
 800322c:	8979      	ldrh	r1, [r7, #10]
 800322e:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_I2C_Mem_Read+0x22c>)
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fb18 	bl	800386c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	2200      	movs	r2, #0
 8003244:	2104      	movs	r1, #4
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f956 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e07c      	b.n	8003350 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d034      	beq.n	80032fc <HAL_I2C_Mem_Read+0x1d0>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	d130      	bne.n	80032fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a0:	2200      	movs	r2, #0
 80032a2:	2180      	movs	r1, #128	; 0x80
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f927 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e04d      	b.n	8003350 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2bff      	cmp	r3, #255	; 0xff
 80032bc:	d90e      	bls.n	80032dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	22ff      	movs	r2, #255	; 0xff
 80032c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	8979      	ldrh	r1, [r7, #10]
 80032cc:	2300      	movs	r3, #0
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fac9 	bl	800386c <I2C_TransferConfig>
 80032da:	e00f      	b.n	80032fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	8979      	ldrh	r1, [r7, #10]
 80032ee:	2300      	movs	r3, #0
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fab8 	bl	800386c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d19a      	bne.n	800323c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f98a 	bl	8003624 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e01a      	b.n	8003350 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2220      	movs	r2, #32
 8003320:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_I2C_Mem_Read+0x230>)
 800332e:	400b      	ands	r3, r1
 8003330:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e000      	b.n	8003350 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800334e:	2302      	movs	r3, #2
  }
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	80002400 	.word	0x80002400
 800335c:	fe00e800 	.word	0xfe00e800

08003360 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	461a      	mov	r2, r3
 800336e:	4603      	mov	r3, r0
 8003370:	817b      	strh	r3, [r7, #10]
 8003372:	460b      	mov	r3, r1
 8003374:	813b      	strh	r3, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	8979      	ldrh	r1, [r7, #10]
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <I2C_RequestMemoryWrite+0xa4>)
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 fa6f 	bl	800386c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	69b9      	ldr	r1, [r7, #24]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8ff 	bl	8003596 <I2C_WaitOnTXISFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e02c      	b.n	80033fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033a8:	893b      	ldrh	r3, [r7, #8]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
 80033b2:	e015      	b.n	80033e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033b4:	893b      	ldrh	r3, [r7, #8]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	69b9      	ldr	r1, [r7, #24]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f8e5 	bl	8003596 <I2C_WaitOnTXISFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e012      	b.n	80033fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033d6:	893b      	ldrh	r3, [r7, #8]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2200      	movs	r2, #0
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f884 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	80002000 	.word	0x80002000

08003408 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	8979      	ldrh	r1, [r7, #10]
 8003428:	4b20      	ldr	r3, [pc, #128]	; (80034ac <I2C_RequestMemoryRead+0xa4>)
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2300      	movs	r3, #0
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fa1c 	bl	800386c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f8ac 	bl	8003596 <I2C_WaitOnTXISFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e02c      	b.n	80034a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
 8003458:	e015      	b.n	8003486 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800345a:	893b      	ldrh	r3, [r7, #8]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	b29b      	uxth	r3, r3
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	69b9      	ldr	r1, [r7, #24]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f892 	bl	8003596 <I2C_WaitOnTXISFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e012      	b.n	80034a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800347c:	893b      	ldrh	r3, [r7, #8]
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2200      	movs	r2, #0
 800348e:	2140      	movs	r1, #64	; 0x40
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f831 	bl	80034f8 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	80002000 	.word	0x80002000

080034b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d103      	bne.n	80034ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d007      	beq.n	80034ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	619a      	str	r2, [r3, #24]
  }
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003508:	e031      	b.n	800356e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d02d      	beq.n	800356e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7fe ff03 	bl	800231c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d302      	bcc.n	8003528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d122      	bne.n	800356e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	429a      	cmp	r2, r3
 8003544:	d113      	bne.n	800356e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e00f      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	429a      	cmp	r2, r3
 800358a:	d0be      	beq.n	800350a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035a2:	e033      	b.n	800360c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f87f 	bl	80036ac <I2C_IsErrorOccurred>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e031      	b.n	800361c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d025      	beq.n	800360c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe feac 	bl	800231c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11a      	bne.n	800360c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d013      	beq.n	800360c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e007      	b.n	800361c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d1c4      	bne.n	80035a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003630:	e02f      	b.n	8003692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f838 	bl	80036ac <I2C_IsErrorOccurred>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e02d      	b.n	80036a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7fe fe69 	bl	800231c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d11a      	bne.n	8003692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b20      	cmp	r3, #32
 8003668:	d013      	beq.n	8003692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0220 	orr.w	r2, r3, #32
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e007      	b.n	80036a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b20      	cmp	r3, #32
 800369e:	d1c8      	bne.n	8003632 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d068      	beq.n	80037aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2210      	movs	r2, #16
 80036de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e0:	e049      	b.n	8003776 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d045      	beq.n	8003776 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fe fe17 	bl	800231c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_IsErrorOccurred+0x54>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d13a      	bne.n	8003776 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003712:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003722:	d121      	bne.n	8003768 <I2C_IsErrorOccurred+0xbc>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372a:	d01d      	beq.n	8003768 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b20      	cmp	r3, #32
 8003730:	d01a      	beq.n	8003768 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003740:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003742:	f7fe fdeb 	bl	800231c <HAL_GetTick>
 8003746:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003748:	e00e      	b.n	8003768 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800374a:	f7fe fde7 	bl	800231c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b19      	cmp	r3, #25
 8003756:	d907      	bls.n	8003768 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f043 0320 	orr.w	r3, r3, #32
 800375e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003766:	e006      	b.n	8003776 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b20      	cmp	r3, #32
 8003774:	d1e9      	bne.n	800374a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b20      	cmp	r3, #32
 8003782:	d003      	beq.n	800378c <I2C_IsErrorOccurred+0xe0>
 8003784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0aa      	beq.n	80036e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800378c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2220      	movs	r2, #32
 800379a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00b      	beq.n	80037d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f043 0302 	orr.w	r3, r3, #2
 8003806:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003810:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff fe45 	bl	80034b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <I2C_IsErrorOccurred+0x1bc>)
 8003832:	400b      	ands	r3, r1
 8003834:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	431a      	orrs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800385a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800385e:	4618      	mov	r0, r3
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	fe00e800 	.word	0xfe00e800

0800386c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	4613      	mov	r3, r2
 800387c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003884:	7a7b      	ldrb	r3, [r7, #9]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800388c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	4313      	orrs	r3, r2
 8003896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800389a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	0d5b      	lsrs	r3, r3, #21
 80038a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <I2C_TransferConfig+0x60>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	43db      	mvns	r3, r3
 80038b0:	ea02 0103 	and.w	r1, r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	03ff63ff 	.word	0x03ff63ff

080038d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d138      	bne.n	8003958 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e032      	b.n	800395a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2224      	movs	r2, #36	; 0x24
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003922:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6819      	ldr	r1, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b20      	cmp	r3, #32
 800397a:	d139      	bne.n	80039f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003986:	2302      	movs	r3, #2
 8003988:	e033      	b.n	80039f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2224      	movs	r2, #36	; 0x24
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e000      	b.n	80039f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a00:	b08f      	sub	sp, #60	; 0x3c
 8003a02:	af0a      	add	r7, sp, #40	; 0x28
 8003a04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e116      	b.n	8003c3e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f00c fcfa 	bl	8010424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2203      	movs	r2, #3
 8003a34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d102      	bne.n	8003a4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f005 fefd 	bl	800984e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	687e      	ldr	r6, [r7, #4]
 8003a5c:	466d      	mov	r5, sp
 8003a5e:	f106 0410 	add.w	r4, r6, #16
 8003a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a72:	1d33      	adds	r3, r6, #4
 8003a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a76:	6838      	ldr	r0, [r7, #0]
 8003a78:	f005 fe10 	bl	800969c <USB_CoreInit>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0d7      	b.n	8003c3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f005 feeb 	bl	8009870 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
 8003a9e:	e04a      	b.n	8003b36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	333d      	adds	r3, #61	; 0x3d
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	333c      	adds	r3, #60	; 0x3c
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	b298      	uxth	r0, r3
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	3356      	adds	r3, #86	; 0x56
 8003adc:	4602      	mov	r2, r0
 8003ade:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	3340      	adds	r3, #64	; 0x40
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	3344      	adds	r3, #68	; 0x44
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	3348      	adds	r3, #72	; 0x48
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	334c      	adds	r3, #76	; 0x4c
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	3301      	adds	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d3af      	bcc.n	8003aa0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b40:	2300      	movs	r3, #0
 8003b42:	73fb      	strb	r3, [r7, #15]
 8003b44:	e044      	b.n	8003bd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d3b5      	bcc.n	8003b46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	687e      	ldr	r6, [r7, #4]
 8003be2:	466d      	mov	r5, sp
 8003be4:	f106 0410 	add.w	r4, r6, #16
 8003be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bf8:	1d33      	adds	r3, r6, #4
 8003bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bfc:	6838      	ldr	r0, [r7, #0]
 8003bfe:	f005 fe83 	bl	8009908 <USB_DevInit>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e014      	b.n	8003c3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f001 f869 	bl	8004d04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f006 fe31 	bl	800a89e <USB_DevDisconnect>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_PCD_Start+0x1c>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e01c      	b.n	8003c9c <HAL_PCD_Start+0x56>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f005 fdd2 	bl	800982c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f006 fde5 	bl	800a85c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b08d      	sub	sp, #52	; 0x34
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f006 fea3 	bl	800aa06 <USB_GetMode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 847e 	bne.w	80045c4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f006 fe07 	bl	800a8e0 <USB_ReadInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8474 	beq.w	80045c2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f006 fdf4 	bl	800a8e0 <USB_ReadInterrupts>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d107      	bne.n	8003d12 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f002 0202 	and.w	r2, r2, #2
 8003d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f006 fde2 	bl	800a8e0 <USB_ReadInterrupts>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d161      	bne.n	8003dea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699a      	ldr	r2, [r3, #24]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0210 	bic.w	r2, r2, #16
 8003d34:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	3304      	adds	r3, #4
 8003d54:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	0c5b      	lsrs	r3, r3, #17
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d124      	bne.n	8003dac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d035      	beq.n	8003dda <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6a38      	ldr	r0, [r7, #32]
 8003d82:	f006 fc19 	bl	800a5b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d92:	441a      	add	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003da4:	441a      	add	r2, r3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	615a      	str	r2, [r3, #20]
 8003daa:	e016      	b.n	8003dda <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	0c5b      	lsrs	r3, r3, #17
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	2b06      	cmp	r3, #6
 8003db6:	d110      	bne.n	8003dda <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6a38      	ldr	r0, [r7, #32]
 8003dc4:	f006 fbf8 	bl	800a5b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dd4:	441a      	add	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0210 	orr.w	r2, r2, #16
 8003de8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f006 fd76 	bl	800a8e0 <USB_ReadInterrupts>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dfe:	f040 80a7 	bne.w	8003f50 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f006 fd7b 	bl	800a906 <USB_ReadDevAllOutEpInterrupt>
 8003e10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e12:	e099      	b.n	8003f48 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 808e 	beq.w	8003f3c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f006 fd9f 	bl	800a96e <USB_ReadDevOutEPInterrupt>
 8003e30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00c      	beq.n	8003e56 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fe7d 	bl	8004b50 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00c      	beq.n	8003e7a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2308      	movs	r3, #8
 8003e70:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 feb9 	bl	8004bec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	461a      	mov	r2, r3
 8003e92:	2310      	movs	r3, #16
 8003e94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d030      	beq.n	8003f02 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	2b80      	cmp	r3, #128	; 0x80
 8003eaa:	d109      	bne.n	8003ec0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ebe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	78db      	ldrb	r3, [r3, #3]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d108      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f00c fbe0 	bl	80106b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efc:	461a      	mov	r2, r3
 8003efe:	2302      	movs	r3, #2
 8003f00:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	461a      	mov	r2, r3
 8003f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f3a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	3301      	adds	r3, #1
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f47f af62 	bne.w	8003e14 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f006 fcc3 	bl	800a8e0 <USB_ReadInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f64:	f040 80a4 	bne.w	80040b0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f006 fce4 	bl	800a93a <USB_ReadDevAllInEpInterrupt>
 8003f72:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f78:	e096      	b.n	80040a8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 808b 	beq.w	800409c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f006 fd0a 	bl	800a9aa <USB_ReadDevInEPInterrupt>
 8003f96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d020      	beq.n	8003fe4 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	2201      	movs	r2, #1
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69f9      	ldr	r1, [r7, #28]
 8003fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f00c fad1 	bl	8010586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	461a      	mov	r2, r3
 8004018:	2310      	movs	r3, #16
 800401a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	461a      	mov	r2, r3
 8004034:	2340      	movs	r3, #64	; 0x40
 8004036:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d023      	beq.n	800408a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004044:	6a38      	ldr	r0, [r7, #32]
 8004046:	f005 fda1 	bl	8009b8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	3338      	adds	r3, #56	; 0x38
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	3304      	adds	r3, #4
 800405c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	78db      	ldrb	r3, [r3, #3]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d108      	bne.n	8004078 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f00c fb2e 	bl	80106d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004084:	461a      	mov	r2, r3
 8004086:	2302      	movs	r3, #2
 8004088:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fcd2 	bl	8004a40 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	3301      	adds	r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f47f af65 	bne.w	8003f7a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f006 fc13 	bl	800a8e0 <USB_ReadInterrupts>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c4:	d122      	bne.n	800410c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d108      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040ec:	2100      	movs	r1, #0
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f00c fd62 	bl	8010bb8 <HAL_PCDEx_LPM_Callback>
 80040f4:	e002      	b.n	80040fc <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f00c fab2 	bl	8010660 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800410a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f006 fbe5 	bl	800a8e0 <USB_ReadInterrupts>
 8004116:	4603      	mov	r3, r0
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004120:	d112      	bne.n	8004148 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f00c fa6e 	bl	8010614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004146:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f006 fbc7 	bl	800a8e0 <USB_ReadInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415c:	d121      	bne.n	80041a2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695a      	ldr	r2, [r3, #20]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800416c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d111      	bne.n	800419c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004192:	2101      	movs	r1, #1
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f00c fd0f 	bl	8010bb8 <HAL_PCDEx_LPM_Callback>
 800419a:	e002      	b.n	80041a2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f00c fa39 	bl	8010614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f006 fb9a 	bl	800a8e0 <USB_ReadInterrupts>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	f040 80b5 	bne.w	8004324 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2110      	movs	r1, #16
 80041d4:	4618      	mov	r0, r3
 80041d6:	f005 fcd9 	bl	8009b8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041de:	e046      	b.n	800426e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ec:	461a      	mov	r2, r3
 80041ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004212:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004220:	461a      	mov	r2, r3
 8004222:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004226:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004238:	0151      	lsls	r1, r2, #5
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	440a      	add	r2, r1
 800423e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004242:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004246:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004258:	0151      	lsls	r1, r2, #5
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	440a      	add	r2, r1
 800425e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004262:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004266:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	3301      	adds	r3, #1
 800426c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004274:	429a      	cmp	r2, r3
 8004276:	d3b3      	bcc.n	80041e0 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004286:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800428a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	2b00      	cmp	r3, #0
 8004292:	d016      	beq.n	80042c2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a4:	f043 030b 	orr.w	r3, r3, #11
 80042a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ba:	f043 030b 	orr.w	r3, r3, #11
 80042be:	6453      	str	r3, [r2, #68]	; 0x44
 80042c0:	e015      	b.n	80042ee <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80042d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e8:	f043 030b 	orr.w	r3, r3, #11
 80042ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004300:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f006 fbaa 	bl	800aa68 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f006 fad9 	bl	800a8e0 <USB_ReadInterrupts>
 800432e:	4603      	mov	r3, r0
 8004330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004338:	d124      	bne.n	8004384 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f006 fb6f 	bl	800aa22 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f005 fc9c 	bl	8009c86 <USB_GetDevSpeed>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681c      	ldr	r4, [r3, #0]
 800435a:	f001 faed 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 800435e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004364:	b2db      	uxtb	r3, r3
 8004366:	461a      	mov	r2, r3
 8004368:	4620      	mov	r0, r4
 800436a:	f005 f9c3 	bl	80096f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f00c f931 	bl	80105d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004382:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f006 faa9 	bl	800a8e0 <USB_ReadInterrupts>
 800438e:	4603      	mov	r3, r0
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b08      	cmp	r3, #8
 8004396:	d10a      	bne.n	80043ae <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f00c f90e 	bl	80105ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f002 0208 	and.w	r2, r2, #8
 80043ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f006 fa94 	bl	800a8e0 <USB_ReadInterrupts>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d122      	bne.n	8004408 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ce:	2301      	movs	r3, #1
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	e014      	b.n	80043fe <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d105      	bne.n	80043f8 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 faf3 	bl	80049de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	3301      	adds	r3, #1
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	429a      	cmp	r2, r3
 8004406:	d3e5      	bcc.n	80043d4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f006 fa67 	bl	800a8e0 <USB_ReadInterrupts>
 8004412:	4603      	mov	r3, r0
 8004414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441c:	d13b      	bne.n	8004496 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800441e:	2301      	movs	r3, #1
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
 8004422:	e02b      	b.n	800447c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004438:	4613      	mov	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3340      	adds	r3, #64	; 0x40
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d115      	bne.n	8004476 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800444a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800444c:	2b00      	cmp	r3, #0
 800444e:	da12      	bge.n	8004476 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	333f      	adds	r3, #63	; 0x3f
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800446c:	b2db      	uxtb	r3, r3
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fab4 	bl	80049de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	3301      	adds	r3, #1
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	429a      	cmp	r2, r3
 8004484:	d3ce      	bcc.n	8004424 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f006 fa20 	bl	800a8e0 <USB_ReadInterrupts>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044aa:	d155      	bne.n	8004558 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044ac:	2301      	movs	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
 80044b0:	e045      	b.n	800453e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d12e      	bne.n	8004538 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044dc:	2b00      	cmp	r3, #0
 80044de:	da2b      	bge.n	8004538 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80044ec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d121      	bne.n	8004538 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f8:	4613      	mov	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004534:	6053      	str	r3, [r2, #4]
            break;
 8004536:	e007      	b.n	8004548 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	3301      	adds	r3, #1
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004544:	429a      	cmp	r2, r3
 8004546:	d3b4      	bcc.n	80044b2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f006 f9bf 	bl	800a8e0 <USB_ReadInterrupts>
 8004562:	4603      	mov	r3, r0
 8004564:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456c:	d10a      	bne.n	8004584 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f00c f8c2 	bl	80106f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004582:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f006 f9a9 	bl	800a8e0 <USB_ReadInterrupts>
 800458e:	4603      	mov	r3, r0
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b04      	cmp	r3, #4
 8004596:	d115      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f00c f8b2 	bl	8010714 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6859      	ldr	r1, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
 80045c0:	e000      	b.n	80045c4 <HAL_PCD_IRQHandler+0x920>
      return;
 80045c2:	bf00      	nop
    }
  }
}
 80045c4:	3734      	adds	r7, #52	; 0x34
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd90      	pop	{r4, r7, pc}

080045ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	460b      	mov	r3, r1
 80045d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_PCD_SetAddress+0x1a>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e013      	b.n	800460c <HAL_PCD_SetAddress+0x42>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f006 f907 	bl	800a810 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	461a      	mov	r2, r3
 8004622:	4603      	mov	r3, r0
 8004624:	70fb      	strb	r3, [r7, #3]
 8004626:	460b      	mov	r3, r1
 8004628:	803b      	strh	r3, [r7, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004632:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004636:	2b00      	cmp	r3, #0
 8004638:	da0f      	bge.n	800465a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	f003 020f 	and.w	r2, r3, #15
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	3338      	adds	r3, #56	; 0x38
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	3304      	adds	r3, #4
 8004650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	705a      	strb	r2, [r3, #1]
 8004658:	e00f      	b.n	800467a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4413      	add	r3, r2
 8004670:	3304      	adds	r3, #4
 8004672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004686:	883a      	ldrh	r2, [r7, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	78ba      	ldrb	r2, [r7, #2]
 8004690:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046a4:	78bb      	ldrb	r3, [r7, #2]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d102      	bne.n	80046b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_PCD_EP_Open+0xaa>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e00e      	b.n	80046dc <HAL_PCD_EP_Open+0xc8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f005 faf9 	bl	8009cc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80046da:	7afb      	ldrb	r3, [r7, #11]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da0f      	bge.n	8004718 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	f003 020f 	and.w	r2, r3, #15
 80046fe:	4613      	mov	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	3338      	adds	r3, #56	; 0x38
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4413      	add	r3, r2
 800470c:	3304      	adds	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	705a      	strb	r2, [r3, #1]
 8004716:	e00f      	b.n	8004738 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4413      	add	r3, r2
 800472e:	3304      	adds	r3, #4
 8004730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	b2da      	uxtb	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_PCD_EP_Close+0x6e>
 800474e:	2302      	movs	r3, #2
 8004750:	e00e      	b.n	8004770 <HAL_PCD_EP_Close+0x8c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	4618      	mov	r0, r3
 8004762:	f005 fb37 	bl	8009dd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	460b      	mov	r3, r1
 8004786:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004788:	7afb      	ldrb	r3, [r7, #11]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4413      	add	r3, r2
 800479e:	3304      	adds	r3, #4
 80047a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2200      	movs	r2, #0
 80047b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ba:	7afb      	ldrb	r3, [r7, #11]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6979      	ldr	r1, [r7, #20]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f005 fbdd 	bl	8009f8c <USB_EPStartXfer>

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	f003 020f 	and.w	r2, r3, #15
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4413      	add	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	460b      	mov	r3, r1
 800481a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800481c:	7afb      	ldrb	r3, [r7, #11]
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	3338      	adds	r3, #56	; 0x38
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	3304      	adds	r3, #4
 8004832:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2200      	movs	r2, #0
 8004844:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2201      	movs	r2, #1
 800484a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800484c:	7afb      	ldrb	r3, [r7, #11]
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	b2da      	uxtb	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6979      	ldr	r1, [r7, #20]
 800485e:	4618      	mov	r0, r3
 8004860:	f005 fb94 	bl	8009f8c <USB_EPStartXfer>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	f003 020f 	and.w	r2, r3, #15
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	429a      	cmp	r2, r3
 8004886:	d901      	bls.n	800488c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e04e      	b.n	800492a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800488c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004890:	2b00      	cmp	r3, #0
 8004892:	da0f      	bge.n	80048b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 020f 	and.w	r2, r3, #15
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	3338      	adds	r3, #56	; 0x38
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4413      	add	r3, r2
 80048a8:	3304      	adds	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	705a      	strb	r2, [r3, #1]
 80048b2:	e00d      	b.n	80048d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048b4:	78fa      	ldrb	r2, [r7, #3]
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_PCD_EP_SetStall+0x82>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e01c      	b.n	800492a <HAL_PCD_EP_SetStall+0xbc>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	4618      	mov	r0, r3
 8004900:	f005 feb2 	bl	800a668 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f006 f8a4 	bl	800aa68 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	460b      	mov	r3, r1
 800493c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	f003 020f 	and.w	r2, r3, #15
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d901      	bls.n	8004950 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e042      	b.n	80049d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004954:	2b00      	cmp	r3, #0
 8004956:	da0f      	bge.n	8004978 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f003 020f 	and.w	r2, r3, #15
 800495e:	4613      	mov	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	3338      	adds	r3, #56	; 0x38
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4413      	add	r3, r2
 800496c:	3304      	adds	r3, #4
 800496e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	705a      	strb	r2, [r3, #1]
 8004976:	e00f      	b.n	8004998 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 020f 	and.w	r2, r3, #15
 800497e:	4613      	mov	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	3304      	adds	r3, #4
 8004990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_PCD_EP_ClrStall+0x86>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e00e      	b.n	80049d6 <HAL_PCD_EP_ClrStall+0xa4>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68f9      	ldr	r1, [r7, #12]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f005 febc 	bl	800a744 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da0c      	bge.n	8004a0c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	f003 020f 	and.w	r2, r3, #15
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	3338      	adds	r3, #56	; 0x38
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	3304      	adds	r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e00c      	b.n	8004a26 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	f003 020f 	and.w	r2, r3, #15
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	3304      	adds	r3, #4
 8004a24:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f005 fcdf 	bl	800a3f0 <USB_EPStopXfer>
 8004a32:	4603      	mov	r3, r0
 8004a34:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a36:	7afb      	ldrb	r3, [r7, #11]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	3338      	adds	r3, #56	; 0x38
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	4413      	add	r3, r2
 8004a64:	3304      	adds	r3, #4
 8004a66:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d901      	bls.n	8004a78 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e067      	b.n	8004b48 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d902      	bls.n	8004a94 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	3303      	adds	r3, #3
 8004a98:	089b      	lsrs	r3, r3, #2
 8004a9a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a9c:	e026      	b.n	8004aec <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d902      	bls.n	8004aba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3303      	adds	r3, #3
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68d9      	ldr	r1, [r3, #12]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f005 fd38 	bl	800a544 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	441a      	add	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	695a      	ldr	r2, [r3, #20]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d809      	bhi.n	8004b16 <PCD_WriteEmptyTxFifo+0xd6>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	695a      	ldr	r2, [r3, #20]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d203      	bcs.n	8004b16 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1c3      	bne.n	8004a9e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d811      	bhi.n	8004b46 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	2201      	movs	r2, #1
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	6939      	ldr	r1, [r7, #16]
 8004b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b42:	4013      	ands	r3, r2
 8004b44:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	333c      	adds	r3, #60	; 0x3c
 8004b68:	3304      	adds	r3, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <PCD_EP_OutXfrComplete_int+0x98>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d124      	bne.n	8004bd0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba2:	6093      	str	r3, [r2, #8]
 8004ba4:	e01a      	b.n	8004bdc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2320      	movs	r3, #32
 8004bc0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f00b fcc1 	bl	8010550 <HAL_PCD_DataOutStageCallback>
 8004bce:	e005      	b.n	8004bdc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f00b fcba 	bl	8010550 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	4f54310a 	.word	0x4f54310a

08004bec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	333c      	adds	r3, #60	; 0x3c
 8004c04:	3304      	adds	r3, #4
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a0c      	ldr	r2, [pc, #48]	; (8004c50 <PCD_EP_OutSetupPacket_int+0x64>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d90e      	bls.n	8004c40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d009      	beq.n	8004c40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f00b fc73 	bl	801052c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	4f54300a 	.word	0x4f54300a

08004c54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
 8004c60:	4613      	mov	r3, r2
 8004c62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c72:	883b      	ldrh	r3, [r7, #0]
 8004c74:	0419      	lsls	r1, r3, #16
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c80:	e028      	b.n	8004cd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c90:	2300      	movs	r3, #0
 8004c92:	73fb      	strb	r3, [r7, #15]
 8004c94:	e00d      	b.n	8004cb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	3340      	adds	r3, #64	; 0x40
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d3ec      	bcc.n	8004c96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cbc:	883b      	ldrh	r3, [r7, #0]
 8004cbe:	0418      	lsls	r0, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	4302      	orrs	r2, r0
 8004ccc:	3340      	adds	r3, #64	; 0x40
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d36:	f043 0303 	orr.w	r3, r3, #3
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40007000 	.word	0x40007000

08004d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d76:	d130      	bne.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d78:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d84:	d038      	beq.n	8004df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d86:	4b20      	ldr	r3, [pc, #128]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d8e:	4a1e      	ldr	r2, [pc, #120]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d94:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d96:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2232      	movs	r2, #50	; 0x32
 8004d9c:	fb02 f303 	mul.w	r3, r2, r3
 8004da0:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	0c9b      	lsrs	r3, r3, #18
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dac:	e002      	b.n	8004db4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004db4:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc0:	d102      	bne.n	8004dc8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1f2      	bne.n	8004dae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd4:	d110      	bne.n	8004df8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e00f      	b.n	8004dfa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de6:	d007      	beq.n	8004df8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004df0:	4a05      	ldr	r2, [pc, #20]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004df6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40007000 	.word	0x40007000
 8004e0c:	20000000 	.word	0x20000000
 8004e10:	431bde83 	.word	0x431bde83

08004e14 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e22:	6053      	str	r3, [r2, #4]
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40007000 	.word	0x40007000

08004e34 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 0307 	bic.w	r3, r3, #7
 8004e40:	4a07      	ldr	r2, [pc, #28]	; (8004e60 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8004e42:	f043 0304 	orr.w	r3, r3, #4
 8004e46:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	4a05      	ldr	r2, [pc, #20]	; (8004e64 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8004e4e:	f043 0304 	orr.w	r3, r3, #4
 8004e52:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004e54:	bf30      	wfi
}
 8004e56:	bf00      	nop
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40007000 	.word	0x40007000
 8004e64:	e000ed00 	.word	0xe000ed00

08004e68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e3ca      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e7a:	4b97      	ldr	r3, [pc, #604]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e84:	4b94      	ldr	r3, [pc, #592]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0310 	and.w	r3, r3, #16
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80e4 	beq.w	8005064 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x4a>
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	f040 808b 	bne.w	8004fc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	f040 8087 	bne.w	8004fc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004eb2:	4b89      	ldr	r3, [pc, #548]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_RCC_OscConfig+0x62>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e3a2      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1a      	ldr	r2, [r3, #32]
 8004ece:	4b82      	ldr	r3, [pc, #520]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d004      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x7c>
 8004eda:	4b7f      	ldr	r3, [pc, #508]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCC_OscConfig+0x88>
 8004ee4:	4b7c      	ldr	r3, [pc, #496]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d223      	bcs.n	8004f3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fd55 	bl	80059a8 <RCC_SetFlashLatencyFromMSIRange>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e383      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f08:	4b73      	ldr	r3, [pc, #460]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a72      	ldr	r2, [pc, #456]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f0e:	f043 0308 	orr.w	r3, r3, #8
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	4b70      	ldr	r3, [pc, #448]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	496d      	ldr	r1, [pc, #436]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f26:	4b6c      	ldr	r3, [pc, #432]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	4968      	ldr	r1, [pc, #416]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	604b      	str	r3, [r1, #4]
 8004f3a:	e025      	b.n	8004f88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f3c:	4b66      	ldr	r3, [pc, #408]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a65      	ldr	r2, [pc, #404]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f42:	f043 0308 	orr.w	r3, r3, #8
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4b63      	ldr	r3, [pc, #396]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4960      	ldr	r1, [pc, #384]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f5a:	4b5f      	ldr	r3, [pc, #380]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	495b      	ldr	r1, [pc, #364]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fd15 	bl	80059a8 <RCC_SetFlashLatencyFromMSIRange>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e343      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f88:	f000 fc4a 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	4b52      	ldr	r3, [pc, #328]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	4950      	ldr	r1, [pc, #320]	; (80050dc <HAL_RCC_OscConfig+0x274>)
 8004f9a:	5ccb      	ldrb	r3, [r1, r3]
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa4:	4a4e      	ldr	r2, [pc, #312]	; (80050e0 <HAL_RCC_OscConfig+0x278>)
 8004fa6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fa8:	4b4e      	ldr	r3, [pc, #312]	; (80050e4 <HAL_RCC_OscConfig+0x27c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fd f965 	bl	800227c <HAL_InitTick>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d052      	beq.n	8005062 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	e327      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d032      	beq.n	800502e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fc8:	4b43      	ldr	r3, [pc, #268]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a42      	ldr	r2, [pc, #264]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fd4:	f7fd f9a2 	bl	800231c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fdc:	f7fd f99e 	bl	800231c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e310      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fee:	4b3a      	ldr	r3, [pc, #232]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ffa:	4b37      	ldr	r3, [pc, #220]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a36      	ldr	r2, [pc, #216]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8005000:	f043 0308 	orr.w	r3, r3, #8
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4931      	ldr	r1, [pc, #196]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8005014:	4313      	orrs	r3, r2
 8005016:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005018:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	492c      	ldr	r1, [pc, #176]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8005028:	4313      	orrs	r3, r2
 800502a:	604b      	str	r3, [r1, #4]
 800502c:	e01a      	b.n	8005064 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800502e:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a29      	ldr	r2, [pc, #164]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800503a:	f7fd f96f 	bl	800231c <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005042:	f7fd f96b 	bl	800231c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e2dd      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005054:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f0      	bne.n	8005042 <HAL_RCC_OscConfig+0x1da>
 8005060:	e000      	b.n	8005064 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005062:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d074      	beq.n	800515a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b08      	cmp	r3, #8
 8005074:	d005      	beq.n	8005082 <HAL_RCC_OscConfig+0x21a>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b0c      	cmp	r3, #12
 800507a:	d10e      	bne.n	800509a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d10b      	bne.n	800509a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005082:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d064      	beq.n	8005158 <HAL_RCC_OscConfig+0x2f0>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d160      	bne.n	8005158 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e2ba      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a2:	d106      	bne.n	80050b2 <HAL_RCC_OscConfig+0x24a>
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a0b      	ldr	r2, [pc, #44]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 80050aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e026      	b.n	8005100 <HAL_RCC_OscConfig+0x298>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050ba:	d115      	bne.n	80050e8 <HAL_RCC_OscConfig+0x280>
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 80050c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a02      	ldr	r2, [pc, #8]	; (80050d8 <HAL_RCC_OscConfig+0x270>)
 80050ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e014      	b.n	8005100 <HAL_RCC_OscConfig+0x298>
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	08015640 	.word	0x08015640
 80050e0:	20000000 	.word	0x20000000
 80050e4:	20000004 	.word	0x20000004
 80050e8:	4ba0      	ldr	r3, [pc, #640]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a9f      	ldr	r2, [pc, #636]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80050ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	4b9d      	ldr	r3, [pc, #628]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a9c      	ldr	r2, [pc, #624]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80050fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d013      	beq.n	8005130 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fd f908 	bl	800231c <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005110:	f7fd f904 	bl	800231c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	; 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e276      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005122:	4b92      	ldr	r3, [pc, #584]	; (800536c <HAL_RCC_OscConfig+0x504>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x2a8>
 800512e:	e014      	b.n	800515a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fd f8f4 	bl	800231c <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005138:	f7fd f8f0 	bl	800231c <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e262      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800514a:	4b88      	ldr	r3, [pc, #544]	; (800536c <HAL_RCC_OscConfig+0x504>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x2d0>
 8005156:	e000      	b.n	800515a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d060      	beq.n	8005228 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d005      	beq.n	8005178 <HAL_RCC_OscConfig+0x310>
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d119      	bne.n	80051a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b02      	cmp	r3, #2
 8005176:	d116      	bne.n	80051a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005178:	4b7c      	ldr	r3, [pc, #496]	; (800536c <HAL_RCC_OscConfig+0x504>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_OscConfig+0x328>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e23f      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005190:	4b76      	ldr	r3, [pc, #472]	; (800536c <HAL_RCC_OscConfig+0x504>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	4973      	ldr	r1, [pc, #460]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a4:	e040      	b.n	8005228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d023      	beq.n	80051f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ae:	4b6f      	ldr	r3, [pc, #444]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a6e      	ldr	r2, [pc, #440]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80051b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ba:	f7fd f8af 	bl	800231c <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c2:	f7fd f8ab 	bl	800231c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e21d      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d4:	4b65      	ldr	r3, [pc, #404]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e0:	4b62      	ldr	r3, [pc, #392]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	495f      	ldr	r1, [pc, #380]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	604b      	str	r3, [r1, #4]
 80051f4:	e018      	b.n	8005228 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051f6:	4b5d      	ldr	r3, [pc, #372]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a5c      	ldr	r2, [pc, #368]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80051fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fd f88b 	bl	800231c <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800520a:	f7fd f887 	bl	800231c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e1f9      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800521c:	4b53      	ldr	r3, [pc, #332]	; (800536c <HAL_RCC_OscConfig+0x504>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f0      	bne.n	800520a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d03c      	beq.n	80052ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01c      	beq.n	8005276 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800523c:	4b4b      	ldr	r3, [pc, #300]	; (800536c <HAL_RCC_OscConfig+0x504>)
 800523e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005242:	4a4a      	ldr	r2, [pc, #296]	; (800536c <HAL_RCC_OscConfig+0x504>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fd f866 	bl	800231c <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005254:	f7fd f862 	bl	800231c <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e1d4      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005266:	4b41      	ldr	r3, [pc, #260]	; (800536c <HAL_RCC_OscConfig+0x504>)
 8005268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ef      	beq.n	8005254 <HAL_RCC_OscConfig+0x3ec>
 8005274:	e01b      	b.n	80052ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005276:	4b3d      	ldr	r3, [pc, #244]	; (800536c <HAL_RCC_OscConfig+0x504>)
 8005278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527c:	4a3b      	ldr	r2, [pc, #236]	; (800536c <HAL_RCC_OscConfig+0x504>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fd f849 	bl	800231c <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528e:	f7fd f845 	bl	800231c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e1b7      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052a0:	4b32      	ldr	r3, [pc, #200]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80052a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ef      	bne.n	800528e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80a6 	beq.w	8005408 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052bc:	2300      	movs	r3, #0
 80052be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052c0:	4b2a      	ldr	r3, [pc, #168]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80052c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052cc:	4b27      	ldr	r3, [pc, #156]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	4a26      	ldr	r2, [pc, #152]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80052d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d6:	6593      	str	r3, [r2, #88]	; 0x58
 80052d8:	4b24      	ldr	r3, [pc, #144]	; (800536c <HAL_RCC_OscConfig+0x504>)
 80052da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e4:	2301      	movs	r3, #1
 80052e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e8:	4b21      	ldr	r3, [pc, #132]	; (8005370 <HAL_RCC_OscConfig+0x508>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d118      	bne.n	8005326 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052f4:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <HAL_RCC_OscConfig+0x508>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1d      	ldr	r2, [pc, #116]	; (8005370 <HAL_RCC_OscConfig+0x508>)
 80052fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005300:	f7fd f80c 	bl	800231c <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005308:	f7fd f808 	bl	800231c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e17a      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <HAL_RCC_OscConfig+0x508>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d108      	bne.n	8005340 <HAL_RCC_OscConfig+0x4d8>
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <HAL_RCC_OscConfig+0x504>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005334:	4a0d      	ldr	r2, [pc, #52]	; (800536c <HAL_RCC_OscConfig+0x504>)
 8005336:	f043 0301 	orr.w	r3, r3, #1
 800533a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800533e:	e029      	b.n	8005394 <HAL_RCC_OscConfig+0x52c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b05      	cmp	r3, #5
 8005346:	d115      	bne.n	8005374 <HAL_RCC_OscConfig+0x50c>
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <HAL_RCC_OscConfig+0x504>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	4a07      	ldr	r2, [pc, #28]	; (800536c <HAL_RCC_OscConfig+0x504>)
 8005350:	f043 0304 	orr.w	r3, r3, #4
 8005354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <HAL_RCC_OscConfig+0x504>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535e:	4a03      	ldr	r2, [pc, #12]	; (800536c <HAL_RCC_OscConfig+0x504>)
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005368:	e014      	b.n	8005394 <HAL_RCC_OscConfig+0x52c>
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
 8005370:	40007000 	.word	0x40007000
 8005374:	4b9c      	ldr	r3, [pc, #624]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537a:	4a9b      	ldr	r2, [pc, #620]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005384:	4b98      	ldr	r3, [pc, #608]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	4a97      	ldr	r2, [pc, #604]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d016      	beq.n	80053ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539c:	f7fc ffbe 	bl	800231c <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a2:	e00a      	b.n	80053ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a4:	f7fc ffba 	bl	800231c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e12a      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ba:	4b8b      	ldr	r3, [pc, #556]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0ed      	beq.n	80053a4 <HAL_RCC_OscConfig+0x53c>
 80053c8:	e015      	b.n	80053f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ca:	f7fc ffa7 	bl	800231c <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053d0:	e00a      	b.n	80053e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d2:	f7fc ffa3 	bl	800231c <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e113      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e8:	4b7f      	ldr	r3, [pc, #508]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1ed      	bne.n	80053d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053f6:	7ffb      	ldrb	r3, [r7, #31]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d105      	bne.n	8005408 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053fc:	4b7a      	ldr	r3, [pc, #488]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80053fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005400:	4a79      	ldr	r2, [pc, #484]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 8005402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005406:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80fe 	beq.w	800560e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	2b02      	cmp	r3, #2
 8005418:	f040 80d0 	bne.w	80055bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800541c:	4b72      	ldr	r3, [pc, #456]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f003 0203 	and.w	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	429a      	cmp	r2, r3
 800542e:	d130      	bne.n	8005492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	3b01      	subs	r3, #1
 800543c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d127      	bne.n	8005492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d11f      	bne.n	8005492 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800545c:	2a07      	cmp	r2, #7
 800545e:	bf14      	ite	ne
 8005460:	2201      	movne	r2, #1
 8005462:	2200      	moveq	r2, #0
 8005464:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005466:	4293      	cmp	r3, r2
 8005468:	d113      	bne.n	8005492 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	085b      	lsrs	r3, r3, #1
 8005476:	3b01      	subs	r3, #1
 8005478:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800547a:	429a      	cmp	r2, r3
 800547c:	d109      	bne.n	8005492 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	3b01      	subs	r3, #1
 800548c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800548e:	429a      	cmp	r2, r3
 8005490:	d06e      	beq.n	8005570 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	2b0c      	cmp	r3, #12
 8005496:	d069      	beq.n	800556c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005498:	4b53      	ldr	r3, [pc, #332]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054a4:	4b50      	ldr	r3, [pc, #320]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0ad      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054b4:	4b4c      	ldr	r3, [pc, #304]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a4b      	ldr	r2, [pc, #300]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80054ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054c0:	f7fc ff2c 	bl	800231c <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c8:	f7fc ff28 	bl	800231c <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e09a      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054da:	4b43      	ldr	r3, [pc, #268]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e6:	4b40      	ldr	r3, [pc, #256]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	4b40      	ldr	r3, [pc, #256]	; (80055ec <HAL_RCC_OscConfig+0x784>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054f6:	3a01      	subs	r2, #1
 80054f8:	0112      	lsls	r2, r2, #4
 80054fa:	4311      	orrs	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005500:	0212      	lsls	r2, r2, #8
 8005502:	4311      	orrs	r1, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005508:	0852      	lsrs	r2, r2, #1
 800550a:	3a01      	subs	r2, #1
 800550c:	0552      	lsls	r2, r2, #21
 800550e:	4311      	orrs	r1, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005514:	0852      	lsrs	r2, r2, #1
 8005516:	3a01      	subs	r2, #1
 8005518:	0652      	lsls	r2, r2, #25
 800551a:	4311      	orrs	r1, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005520:	0912      	lsrs	r2, r2, #4
 8005522:	0452      	lsls	r2, r2, #17
 8005524:	430a      	orrs	r2, r1
 8005526:	4930      	ldr	r1, [pc, #192]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 8005528:	4313      	orrs	r3, r2
 800552a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800552c:	4b2e      	ldr	r3, [pc, #184]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2d      	ldr	r2, [pc, #180]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 8005532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005536:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005538:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a2a      	ldr	r2, [pc, #168]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800553e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005542:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005544:	f7fc feea 	bl	800231c <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800554c:	f7fc fee6 	bl	800231c <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e058      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555e:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800556a:	e050      	b.n	800560e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e04f      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d148      	bne.n	800560e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800557c:	4b1a      	ldr	r3, [pc, #104]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 8005582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005586:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005588:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 800558e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005592:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005594:	f7fc fec2 	bl	800231c <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559c:	f7fc febe 	bl	800231c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e030      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ae:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0x734>
 80055ba:	e028      	b.n	800560e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b0c      	cmp	r3, #12
 80055c0:	d023      	beq.n	800560a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c2:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <HAL_RCC_OscConfig+0x780>)
 80055c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ce:	f7fc fea5 	bl	800231c <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d4:	e00c      	b.n	80055f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d6:	f7fc fea1 	bl	800231c <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d905      	bls.n	80055f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e013      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
 80055e8:	40021000 	.word	0x40021000
 80055ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f0:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_RCC_OscConfig+0x7b0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ec      	bne.n	80055d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_RCC_OscConfig+0x7b0>)
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	4905      	ldr	r1, [pc, #20]	; (8005618 <HAL_RCC_OscConfig+0x7b0>)
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_RCC_OscConfig+0x7b4>)
 8005604:	4013      	ands	r3, r2
 8005606:	60cb      	str	r3, [r1, #12]
 8005608:	e001      	b.n	800560e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000
 800561c:	feeefffc 	.word	0xfeeefffc

08005620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0e7      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005634:	4b75      	ldr	r3, [pc, #468]	; (800580c <HAL_RCC_ClockConfig+0x1ec>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d910      	bls.n	8005664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	4b72      	ldr	r3, [pc, #456]	; (800580c <HAL_RCC_ClockConfig+0x1ec>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 0207 	bic.w	r2, r3, #7
 800564a:	4970      	ldr	r1, [pc, #448]	; (800580c <HAL_RCC_ClockConfig+0x1ec>)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b6e      	ldr	r3, [pc, #440]	; (800580c <HAL_RCC_ClockConfig+0x1ec>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0cf      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d010      	beq.n	8005692 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	4b66      	ldr	r3, [pc, #408]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800567c:	429a      	cmp	r2, r3
 800567e:	d908      	bls.n	8005692 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005680:	4b63      	ldr	r3, [pc, #396]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4960      	ldr	r1, [pc, #384]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d04c      	beq.n	8005738 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d107      	bne.n	80056b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056a6:	4b5a      	ldr	r3, [pc, #360]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d121      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0a6      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d107      	bne.n	80056ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056be:	4b54      	ldr	r3, [pc, #336]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d115      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e09a      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d107      	bne.n	80056e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056d6:	4b4e      	ldr	r3, [pc, #312]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e08e      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e6:	4b4a      	ldr	r3, [pc, #296]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e086      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056f6:	4b46      	ldr	r3, [pc, #280]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f023 0203 	bic.w	r2, r3, #3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	4943      	ldr	r1, [pc, #268]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 8005704:	4313      	orrs	r3, r2
 8005706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005708:	f7fc fe08 	bl	800231c <HAL_GetTick>
 800570c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800570e:	e00a      	b.n	8005726 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005710:	f7fc fe04 	bl	800231c <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f241 3288 	movw	r2, #5000	; 0x1388
 800571e:	4293      	cmp	r3, r2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e06e      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005726:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 020c 	and.w	r2, r3, #12
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	429a      	cmp	r2, r3
 8005736:	d1eb      	bne.n	8005710 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d010      	beq.n	8005766 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005750:	429a      	cmp	r2, r3
 8005752:	d208      	bcs.n	8005766 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005754:	4b2e      	ldr	r3, [pc, #184]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	492b      	ldr	r1, [pc, #172]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005766:	4b29      	ldr	r3, [pc, #164]	; (800580c <HAL_RCC_ClockConfig+0x1ec>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d210      	bcs.n	8005796 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005774:	4b25      	ldr	r3, [pc, #148]	; (800580c <HAL_RCC_ClockConfig+0x1ec>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f023 0207 	bic.w	r2, r3, #7
 800577c:	4923      	ldr	r1, [pc, #140]	; (800580c <HAL_RCC_ClockConfig+0x1ec>)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	4313      	orrs	r3, r2
 8005782:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005784:	4b21      	ldr	r3, [pc, #132]	; (800580c <HAL_RCC_ClockConfig+0x1ec>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d001      	beq.n	8005796 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e036      	b.n	8005804 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a2:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	4918      	ldr	r1, [pc, #96]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d009      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057c0:	4b13      	ldr	r3, [pc, #76]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4910      	ldr	r1, [pc, #64]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057d4:	f000 f824 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 80057d8:	4602      	mov	r2, r0
 80057da:	4b0d      	ldr	r3, [pc, #52]	; (8005810 <HAL_RCC_ClockConfig+0x1f0>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	091b      	lsrs	r3, r3, #4
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	490b      	ldr	r1, [pc, #44]	; (8005814 <HAL_RCC_ClockConfig+0x1f4>)
 80057e6:	5ccb      	ldrb	r3, [r1, r3]
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
 80057f0:	4a09      	ldr	r2, [pc, #36]	; (8005818 <HAL_RCC_ClockConfig+0x1f8>)
 80057f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <HAL_RCC_ClockConfig+0x1fc>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fc fd3f 	bl	800227c <HAL_InitTick>
 80057fe:	4603      	mov	r3, r0
 8005800:	72fb      	strb	r3, [r7, #11]

  return status;
 8005802:	7afb      	ldrb	r3, [r7, #11]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40022000 	.word	0x40022000
 8005810:	40021000 	.word	0x40021000
 8005814:	08015640 	.word	0x08015640
 8005818:	20000000 	.word	0x20000000
 800581c:	20000004 	.word	0x20000004

08005820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005820:	b480      	push	{r7}
 8005822:	b089      	sub	sp, #36	; 0x24
 8005824:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800582e:	4b3e      	ldr	r3, [pc, #248]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005838:	4b3b      	ldr	r3, [pc, #236]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x34>
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b0c      	cmp	r3, #12
 800584c:	d121      	bne.n	8005892 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d11e      	bne.n	8005892 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005854:	4b34      	ldr	r3, [pc, #208]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d107      	bne.n	8005870 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005860:	4b31      	ldr	r3, [pc, #196]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 8005862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005866:	0a1b      	lsrs	r3, r3, #8
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	e005      	b.n	800587c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005870:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800587c:	4a2b      	ldr	r2, [pc, #172]	; (800592c <HAL_RCC_GetSysClockFreq+0x10c>)
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005884:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10d      	bne.n	80058a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d102      	bne.n	800589e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005898:	4b25      	ldr	r3, [pc, #148]	; (8005930 <HAL_RCC_GetSysClockFreq+0x110>)
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	e004      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058a4:	4b23      	ldr	r3, [pc, #140]	; (8005934 <HAL_RCC_GetSysClockFreq+0x114>)
 80058a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b0c      	cmp	r3, #12
 80058ac:	d134      	bne.n	8005918 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058ae:	4b1e      	ldr	r3, [pc, #120]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d003      	beq.n	80058c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d003      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0xac>
 80058c4:	e005      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058c6:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <HAL_RCC_GetSysClockFreq+0x110>)
 80058c8:	617b      	str	r3, [r7, #20]
      break;
 80058ca:	e005      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058cc:	4b19      	ldr	r3, [pc, #100]	; (8005934 <HAL_RCC_GetSysClockFreq+0x114>)
 80058ce:	617b      	str	r3, [r7, #20]
      break;
 80058d0:	e002      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	617b      	str	r3, [r7, #20]
      break;
 80058d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	3301      	adds	r3, #1
 80058e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	fb03 f202 	mul.w	r2, r3, r2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058fe:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <HAL_RCC_GetSysClockFreq+0x108>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	0e5b      	lsrs	r3, r3, #25
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	3301      	adds	r3, #1
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005918:	69bb      	ldr	r3, [r7, #24]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3724      	adds	r7, #36	; 0x24
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
 800592c:	08015658 	.word	0x08015658
 8005930:	00f42400 	.word	0x00f42400
 8005934:	00b71b00 	.word	0x00b71b00

08005938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800593c:	4b03      	ldr	r3, [pc, #12]	; (800594c <HAL_RCC_GetHCLKFreq+0x14>)
 800593e:	681b      	ldr	r3, [r3, #0]
}
 8005940:	4618      	mov	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20000000 	.word	0x20000000

08005950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005954:	f7ff fff0 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 8005958:	4602      	mov	r2, r0
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	0a1b      	lsrs	r3, r3, #8
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	4904      	ldr	r1, [pc, #16]	; (8005978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005966:	5ccb      	ldrb	r3, [r1, r3]
 8005968:	f003 031f 	and.w	r3, r3, #31
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005970:	4618      	mov	r0, r3
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40021000 	.word	0x40021000
 8005978:	08015650 	.word	0x08015650

0800597c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005980:	f7ff ffda 	bl	8005938 <HAL_RCC_GetHCLKFreq>
 8005984:	4602      	mov	r2, r0
 8005986:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	0adb      	lsrs	r3, r3, #11
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	4904      	ldr	r1, [pc, #16]	; (80059a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005992:	5ccb      	ldrb	r3, [r1, r3]
 8005994:	f003 031f 	and.w	r3, r3, #31
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40021000 	.word	0x40021000
 80059a4:	08015650 	.word	0x08015650

080059a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059b4:	4b2a      	ldr	r3, [pc, #168]	; (8005a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059c0:	f7ff f9c4 	bl	8004d4c <HAL_PWREx_GetVoltageRange>
 80059c4:	6178      	str	r0, [r7, #20]
 80059c6:	e014      	b.n	80059f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059c8:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059cc:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d2:	6593      	str	r3, [r2, #88]	; 0x58
 80059d4:	4b22      	ldr	r3, [pc, #136]	; (8005a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80059e0:	f7ff f9b4 	bl	8004d4c <HAL_PWREx_GetVoltageRange>
 80059e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80059e6:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ea:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f8:	d10b      	bne.n	8005a12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d919      	bls.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2ba0      	cmp	r3, #160	; 0xa0
 8005a04:	d902      	bls.n	8005a0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a06:	2302      	movs	r3, #2
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	e013      	b.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	e010      	b.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b80      	cmp	r3, #128	; 0x80
 8005a16:	d902      	bls.n	8005a1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a18:	2303      	movs	r3, #3
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	e00a      	b.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	d102      	bne.n	8005a2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a24:	2302      	movs	r3, #2
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	e004      	b.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b70      	cmp	r3, #112	; 0x70
 8005a2e:	d101      	bne.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a30:	2301      	movs	r3, #1
 8005a32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f023 0207 	bic.w	r2, r3, #7
 8005a3c:	4909      	ldr	r1, [pc, #36]	; (8005a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d001      	beq.n	8005a56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40022000 	.word	0x40022000

08005a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a70:	2300      	movs	r3, #0
 8005a72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a74:	2300      	movs	r3, #0
 8005a76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d041      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a8c:	d02a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005a8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a92:	d824      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a98:	d008      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005a9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a9e:	d81e      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa8:	d010      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005aaa:	e018      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005aac:	4b86      	ldr	r3, [pc, #536]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a85      	ldr	r2, [pc, #532]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ab8:	e015      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3304      	adds	r3, #4
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 f829 	bl	8006b18 <RCCEx_PLLSAI1_Config>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aca:	e00c      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3320      	adds	r3, #32
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 f914 	bl	8006d00 <RCCEx_PLLSAI2_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005adc:	e003      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	74fb      	strb	r3, [r7, #19]
      break;
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae6:	7cfb      	ldrb	r3, [r7, #19]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10b      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aec:	4b76      	ldr	r3, [pc, #472]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afa:	4973      	ldr	r1, [pc, #460]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b02:	e001      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	7cfb      	ldrb	r3, [r7, #19]
 8005b06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d041      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b1c:	d02a      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b22:	d824      	bhi.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b28:	d008      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b2e:	d81e      	bhi.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b38:	d010      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b3a:	e018      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b3c:	4b62      	ldr	r3, [pc, #392]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	4a61      	ldr	r2, [pc, #388]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b48:	e015      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	2100      	movs	r1, #0
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 ffe1 	bl	8006b18 <RCCEx_PLLSAI1_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b5a:	e00c      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3320      	adds	r3, #32
 8005b60:	2100      	movs	r1, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 f8cc 	bl	8006d00 <RCCEx_PLLSAI2_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b6c:	e003      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	74fb      	strb	r3, [r7, #19]
      break;
 8005b72:	e000      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b76:	7cfb      	ldrb	r3, [r7, #19]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b7c:	4b52      	ldr	r3, [pc, #328]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b8a:	494f      	ldr	r1, [pc, #316]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b92:	e001      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 80a0 	beq.w	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005baa:	4b47      	ldr	r3, [pc, #284]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00d      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc0:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc4:	4a40      	ldr	r2, [pc, #256]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bca:	6593      	str	r3, [r2, #88]	; 0x58
 8005bcc:	4b3e      	ldr	r3, [pc, #248]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bdc:	4b3b      	ldr	r3, [pc, #236]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a3a      	ldr	r2, [pc, #232]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005be8:	f7fc fb98 	bl	800231c <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005bee:	e009      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf0:	f7fc fb94 	bl	800231c <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d902      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	74fb      	strb	r3, [r7, #19]
        break;
 8005c02:	e005      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c04:	4b31      	ldr	r3, [pc, #196]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0ef      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c10:	7cfb      	ldrb	r3, [r7, #19]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d15c      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c16:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01f      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d019      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c34:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c40:	4b21      	ldr	r3, [pc, #132]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c46:	4a20      	ldr	r2, [pc, #128]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c50:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	4a1c      	ldr	r2, [pc, #112]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c60:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d016      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c72:	f7fc fb53 	bl	800231c <HAL_GetTick>
 8005c76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c78:	e00b      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7a:	f7fc fb4f 	bl	800231c <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d902      	bls.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	74fb      	strb	r3, [r7, #19]
            break;
 8005c90:	e006      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c92:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0ec      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ca0:	7cfb      	ldrb	r3, [r7, #19]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ca6:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb6:	4904      	ldr	r1, [pc, #16]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cbe:	e009      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	74bb      	strb	r3, [r7, #18]
 8005cc4:	e006      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005cc6:	bf00      	nop
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cd4:	7c7b      	ldrb	r3, [r7, #17]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cda:	4b9e      	ldr	r3, [pc, #632]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cde:	4a9d      	ldr	r2, [pc, #628]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cf2:	4b98      	ldr	r3, [pc, #608]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf8:	f023 0203 	bic.w	r2, r3, #3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	4994      	ldr	r1, [pc, #592]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d14:	4b8f      	ldr	r3, [pc, #572]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1a:	f023 020c 	bic.w	r2, r3, #12
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	498c      	ldr	r1, [pc, #560]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d36:	4b87      	ldr	r3, [pc, #540]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	4983      	ldr	r1, [pc, #524]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d58:	4b7e      	ldr	r3, [pc, #504]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d66:	497b      	ldr	r1, [pc, #492]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d7a:	4b76      	ldr	r3, [pc, #472]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d88:	4972      	ldr	r1, [pc, #456]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d9c:	4b6d      	ldr	r3, [pc, #436]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005daa:	496a      	ldr	r1, [pc, #424]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dcc:	4961      	ldr	r1, [pc, #388]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005de0:	4b5c      	ldr	r3, [pc, #368]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dee:	4959      	ldr	r1, [pc, #356]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e02:	4b54      	ldr	r3, [pc, #336]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e10:	4950      	ldr	r1, [pc, #320]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e24:	4b4b      	ldr	r3, [pc, #300]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	4948      	ldr	r1, [pc, #288]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e46:	4b43      	ldr	r3, [pc, #268]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e54:	493f      	ldr	r1, [pc, #252]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d028      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e68:	4b3a      	ldr	r3, [pc, #232]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e76:	4937      	ldr	r1, [pc, #220]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e86:	d106      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e88:	4b32      	ldr	r3, [pc, #200]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4a31      	ldr	r2, [pc, #196]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e92:	60d3      	str	r3, [r2, #12]
 8005e94:	e011      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e9e:	d10c      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fe36 	bl	8006b18 <RCCEx_PLLSAI1_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005eb6:	7cfb      	ldrb	r3, [r7, #19]
 8005eb8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d028      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ec6:	4b23      	ldr	r3, [pc, #140]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ecc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed4:	491f      	ldr	r1, [pc, #124]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	4a1a      	ldr	r2, [pc, #104]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ef0:	60d3      	str	r3, [r2, #12]
 8005ef2:	e011      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005efc:	d10c      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3304      	adds	r3, #4
 8005f02:	2101      	movs	r1, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fe07 	bl	8006b18 <RCCEx_PLLSAI1_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f0e:	7cfb      	ldrb	r3, [r7, #19]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f14:	7cfb      	ldrb	r3, [r7, #19]
 8005f16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02b      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f32:	4908      	ldr	r1, [pc, #32]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f42:	d109      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	4a02      	ldr	r2, [pc, #8]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f4e:	60d3      	str	r3, [r2, #12]
 8005f50:	e014      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f60:	d10c      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	2101      	movs	r1, #1
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fdd5 	bl	8006b18 <RCCEx_PLLSAI1_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f72:	7cfb      	ldrb	r3, [r7, #19]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
 8005f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02f      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f88:	4b2b      	ldr	r3, [pc, #172]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f96:	4928      	ldr	r1, [pc, #160]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fa6:	d10d      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	2102      	movs	r1, #2
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fdb2 	bl	8006b18 <RCCEx_PLLSAI1_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fb8:	7cfb      	ldrb	r3, [r7, #19]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d014      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fbe:	7cfb      	ldrb	r3, [r7, #19]
 8005fc0:	74bb      	strb	r3, [r7, #18]
 8005fc2:	e011      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3320      	adds	r3, #32
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fe93 	bl	8006d00 <RCCEx_PLLSAI2_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fde:	7cfb      	ldrb	r3, [r7, #19]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005fe4:	7cfb      	ldrb	r3, [r7, #19]
 8005fe6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ff4:	4b10      	ldr	r3, [pc, #64]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006002:	490d      	ldr	r1, [pc, #52]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006004:	4313      	orrs	r3, r2
 8006006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00b      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006016:	4b08      	ldr	r3, [pc, #32]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006026:	4904      	ldr	r1, [pc, #16]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800602e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40021000 	.word	0x40021000

0800603c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800604e:	d13e      	bne.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006050:	4bb2      	ldr	r3, [pc, #712]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006062:	d028      	beq.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800606a:	f200 8542 	bhi.w	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006074:	d005      	beq.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607c:	d00e      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800607e:	f000 bd38 	b.w	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006082:	4ba6      	ldr	r3, [pc, #664]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	f040 8532 	bne.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8006092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006096:	61fb      	str	r3, [r7, #28]
      break;
 8006098:	f000 bd2d 	b.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800609c:	4b9f      	ldr	r3, [pc, #636]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800609e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	f040 8527 	bne.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80060ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80060b0:	61fb      	str	r3, [r7, #28]
      break;
 80060b2:	f000 bd22 	b.w	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060b6:	4b99      	ldr	r3, [pc, #612]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060c2:	f040 851c 	bne.w	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80060c6:	4b96      	ldr	r3, [pc, #600]	; (8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80060c8:	61fb      	str	r3, [r7, #28]
      break;
 80060ca:	f000 bd18 	b.w	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060ce:	4b93      	ldr	r3, [pc, #588]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d036      	beq.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d840      	bhi.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d003      	beq.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d020      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80060f0:	e039      	b.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80060f2:	4b8a      	ldr	r3, [pc, #552]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d116      	bne.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80060fe:	4b87      	ldr	r3, [pc, #540]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800610a:	4b84      	ldr	r3, [pc, #528]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	e005      	b.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006116:	4b81      	ldr	r3, [pc, #516]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800611c:	0a1b      	lsrs	r3, r3, #8
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	4a80      	ldr	r2, [pc, #512]	; (8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006128:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800612a:	e01f      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	61bb      	str	r3, [r7, #24]
      break;
 8006130:	e01c      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006132:	4b7a      	ldr	r3, [pc, #488]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800613e:	d102      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006140:	4b79      	ldr	r3, [pc, #484]	; (8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8006142:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006144:	e012      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
      break;
 800614a:	e00f      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800614c:	4b73      	ldr	r3, [pc, #460]	; (800631c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006158:	d102      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800615a:	4b74      	ldr	r3, [pc, #464]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800615c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800615e:	e005      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	61bb      	str	r3, [r7, #24]
      break;
 8006164:	e002      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
      break;
 800616a:	bf00      	nop
    }

    switch(PeriphClk)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006172:	f000 80dd 	beq.w	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800617c:	f200 84c1 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006186:	f000 80d3 	beq.w	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006190:	f200 84b7 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800619a:	f000 835f 	beq.w	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a4:	f200 84ad 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ae:	f000 847e 	beq.w	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b8:	f200 84a3 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061c2:	f000 82cd 	beq.w	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061cc:	f200 8499 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d6:	f000 80ab 	beq.w	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e0:	f200 848f 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	f000 8090 	beq.w	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f4:	f200 8485 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fe:	d07f      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006206:	f200 847c 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006210:	f000 8403 	beq.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621a:	f200 8472 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006224:	f000 83af 	beq.w	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800622e:	f200 8468 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006238:	f000 8379 	beq.w	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006242:	f200 845e 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b80      	cmp	r3, #128	; 0x80
 800624a:	f000 8344 	beq.w	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b80      	cmp	r3, #128	; 0x80
 8006252:	f200 8456 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b20      	cmp	r3, #32
 800625a:	d84b      	bhi.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 844f 	beq.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3b01      	subs	r3, #1
 8006268:	2b1f      	cmp	r3, #31
 800626a:	f200 844a 	bhi.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	0800645d 	.word	0x0800645d
 8006278:	080064cb 	.word	0x080064cb
 800627c:	08006b03 	.word	0x08006b03
 8006280:	0800655f 	.word	0x0800655f
 8006284:	08006b03 	.word	0x08006b03
 8006288:	08006b03 	.word	0x08006b03
 800628c:	08006b03 	.word	0x08006b03
 8006290:	080065e5 	.word	0x080065e5
 8006294:	08006b03 	.word	0x08006b03
 8006298:	08006b03 	.word	0x08006b03
 800629c:	08006b03 	.word	0x08006b03
 80062a0:	08006b03 	.word	0x08006b03
 80062a4:	08006b03 	.word	0x08006b03
 80062a8:	08006b03 	.word	0x08006b03
 80062ac:	08006b03 	.word	0x08006b03
 80062b0:	0800665d 	.word	0x0800665d
 80062b4:	08006b03 	.word	0x08006b03
 80062b8:	08006b03 	.word	0x08006b03
 80062bc:	08006b03 	.word	0x08006b03
 80062c0:	08006b03 	.word	0x08006b03
 80062c4:	08006b03 	.word	0x08006b03
 80062c8:	08006b03 	.word	0x08006b03
 80062cc:	08006b03 	.word	0x08006b03
 80062d0:	08006b03 	.word	0x08006b03
 80062d4:	08006b03 	.word	0x08006b03
 80062d8:	08006b03 	.word	0x08006b03
 80062dc:	08006b03 	.word	0x08006b03
 80062e0:	08006b03 	.word	0x08006b03
 80062e4:	08006b03 	.word	0x08006b03
 80062e8:	08006b03 	.word	0x08006b03
 80062ec:	08006b03 	.word	0x08006b03
 80062f0:	080066df 	.word	0x080066df
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	f000 82c1 	beq.w	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80062fc:	f000 bc01 	b.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006300:	69b9      	ldr	r1, [r7, #24]
 8006302:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006306:	f000 fdd9 	bl	8006ebc <RCCEx_GetSAIxPeriphCLKFreq>
 800630a:	61f8      	str	r0, [r7, #28]
      break;
 800630c:	e3fa      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800630e:	69b9      	ldr	r1, [r7, #24]
 8006310:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006314:	f000 fdd2 	bl	8006ebc <RCCEx_GetSAIxPeriphCLKFreq>
 8006318:	61f8      	str	r0, [r7, #28]
      break;
 800631a:	e3f3      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800631c:	40021000 	.word	0x40021000
 8006320:	0005b8d8 	.word	0x0005b8d8
 8006324:	08015658 	.word	0x08015658
 8006328:	00f42400 	.word	0x00f42400
 800632c:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006330:	4ba9      	ldr	r3, [pc, #676]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006336:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006342:	d00c      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800634a:	d87f      	bhi.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006352:	d04e      	beq.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635a:	d01d      	beq.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 800635c:	e076      	b.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800635e:	4b9e      	ldr	r3, [pc, #632]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d172      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800636a:	4b9b      	ldr	r3, [pc, #620]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8006376:	4b98      	ldr	r3, [pc, #608]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	091b      	lsrs	r3, r3, #4
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	e005      	b.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8006382:	4b95      	ldr	r3, [pc, #596]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006388:	0a1b      	lsrs	r3, r3, #8
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	4a93      	ldr	r2, [pc, #588]	; (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006394:	61fb      	str	r3, [r7, #28]
          break;
 8006396:	e05b      	b.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006398:	4b8f      	ldr	r3, [pc, #572]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063a4:	d156      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80063a6:	4b8c      	ldr	r3, [pc, #560]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b2:	d14f      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063b4:	4b88      	ldr	r3, [pc, #544]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	0a1b      	lsrs	r3, r3, #8
 80063ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063be:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	fb03 f202 	mul.w	r2, r3, r2
 80063c8:	4b83      	ldr	r3, [pc, #524]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	091b      	lsrs	r3, r3, #4
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	3301      	adds	r3, #1
 80063d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80063da:	4b7f      	ldr	r3, [pc, #508]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	0d5b      	lsrs	r3, r3, #21
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	3301      	adds	r3, #1
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	61fb      	str	r3, [r7, #28]
          break;
 80063f0:	e030      	b.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80063f2:	4b79      	ldr	r3, [pc, #484]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063fe:	d12b      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006400:	4b75      	ldr	r3, [pc, #468]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800640c:	d124      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800640e:	4b72      	ldr	r3, [pc, #456]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	0a1b      	lsrs	r3, r3, #8
 8006414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006418:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	fb03 f202 	mul.w	r2, r3, r2
 8006422:	4b6d      	ldr	r3, [pc, #436]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	3301      	adds	r3, #1
 800642e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006432:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006434:	4b68      	ldr	r3, [pc, #416]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	0d5b      	lsrs	r3, r3, #21
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	3301      	adds	r3, #1
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	61fb      	str	r3, [r7, #28]
          break;
 800644a:	e005      	b.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800644c:	bf00      	nop
 800644e:	e359      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006450:	bf00      	nop
 8006452:	e357      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006454:	bf00      	nop
 8006456:	e355      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006458:	bf00      	nop
        break;
 800645a:	e353      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800645c:	4b5e      	ldr	r3, [pc, #376]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b03      	cmp	r3, #3
 800646c:	d827      	bhi.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006485 	.word	0x08006485
 8006478:	0800648d 	.word	0x0800648d
 800647c:	08006495 	.word	0x08006495
 8006480:	080064a9 	.word	0x080064a9
          frequency = HAL_RCC_GetPCLK2Freq();
 8006484:	f7ff fa7a 	bl	800597c <HAL_RCC_GetPCLK2Freq>
 8006488:	61f8      	str	r0, [r7, #28]
          break;
 800648a:	e01d      	b.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 800648c:	f7ff f9c8 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8006490:	61f8      	str	r0, [r7, #28]
          break;
 8006492:	e019      	b.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006494:	4b50      	ldr	r3, [pc, #320]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a0:	d10f      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80064a2:	4b4f      	ldr	r3, [pc, #316]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80064a4:	61fb      	str	r3, [r7, #28]
          break;
 80064a6:	e00c      	b.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064a8:	4b4b      	ldr	r3, [pc, #300]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d107      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80064b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ba:	61fb      	str	r3, [r7, #28]
          break;
 80064bc:	e003      	b.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80064be:	bf00      	nop
 80064c0:	e320      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80064c2:	bf00      	nop
 80064c4:	e31e      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80064c6:	bf00      	nop
        break;
 80064c8:	e31c      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80064ca:	4b43      	ldr	r3, [pc, #268]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d0:	f003 030c 	and.w	r3, r3, #12
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b0c      	cmp	r3, #12
 80064da:	d83a      	bhi.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80064dc:	a201      	add	r2, pc, #4	; (adr r2, 80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	08006519 	.word	0x08006519
 80064e8:	08006553 	.word	0x08006553
 80064ec:	08006553 	.word	0x08006553
 80064f0:	08006553 	.word	0x08006553
 80064f4:	08006521 	.word	0x08006521
 80064f8:	08006553 	.word	0x08006553
 80064fc:	08006553 	.word	0x08006553
 8006500:	08006553 	.word	0x08006553
 8006504:	08006529 	.word	0x08006529
 8006508:	08006553 	.word	0x08006553
 800650c:	08006553 	.word	0x08006553
 8006510:	08006553 	.word	0x08006553
 8006514:	0800653d 	.word	0x0800653d
          frequency = HAL_RCC_GetPCLK1Freq();
 8006518:	f7ff fa1a 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 800651c:	61f8      	str	r0, [r7, #28]
          break;
 800651e:	e01d      	b.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006520:	f7ff f97e 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8006524:	61f8      	str	r0, [r7, #28]
          break;
 8006526:	e019      	b.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006528:	4b2b      	ldr	r3, [pc, #172]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006534:	d10f      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8006536:	4b2a      	ldr	r3, [pc, #168]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006538:	61fb      	str	r3, [r7, #28]
          break;
 800653a:	e00c      	b.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800653c:	4b26      	ldr	r3, [pc, #152]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b02      	cmp	r3, #2
 8006548:	d107      	bne.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800654a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654e:	61fb      	str	r3, [r7, #28]
          break;
 8006550:	e003      	b.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8006552:	bf00      	nop
 8006554:	e2d6      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006556:	bf00      	nop
 8006558:	e2d4      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800655a:	bf00      	nop
        break;
 800655c:	e2d2      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800655e:	4b1e      	ldr	r3, [pc, #120]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006564:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b30      	cmp	r3, #48	; 0x30
 800656e:	d021      	beq.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b30      	cmp	r3, #48	; 0x30
 8006574:	d829      	bhi.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	2b20      	cmp	r3, #32
 800657a:	d011      	beq.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2b20      	cmp	r3, #32
 8006580:	d823      	bhi.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d003      	beq.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b10      	cmp	r3, #16
 800658c:	d004      	beq.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800658e:	e01c      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006590:	f7ff f9de 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 8006594:	61f8      	str	r0, [r7, #28]
          break;
 8006596:	e01d      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8006598:	f7ff f942 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 800659c:	61f8      	str	r0, [r7, #28]
          break;
 800659e:	e019      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ac:	d10f      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80065b0:	61fb      	str	r3, [r7, #28]
          break;
 80065b2:	e00c      	b.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065b4:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d107      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80065c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c6:	61fb      	str	r3, [r7, #28]
          break;
 80065c8:	e003      	b.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80065ca:	bf00      	nop
 80065cc:	e29a      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80065ce:	bf00      	nop
 80065d0:	e298      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80065d2:	bf00      	nop
        break;
 80065d4:	e296      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80065d6:	bf00      	nop
 80065d8:	40021000 	.word	0x40021000
 80065dc:	08015658 	.word	0x08015658
 80065e0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80065e4:	4b9b      	ldr	r3, [pc, #620]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2bc0      	cmp	r3, #192	; 0xc0
 80065f4:	d021      	beq.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2bc0      	cmp	r3, #192	; 0xc0
 80065fa:	d829      	bhi.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b80      	cmp	r3, #128	; 0x80
 8006600:	d011      	beq.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d823      	bhi.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	2b40      	cmp	r3, #64	; 0x40
 8006612:	d004      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8006614:	e01c      	b.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006616:	f7ff f99b 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 800661a:	61f8      	str	r0, [r7, #28]
          break;
 800661c:	e01d      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800661e:	f7ff f8ff 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8006622:	61f8      	str	r0, [r7, #28]
          break;
 8006624:	e019      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006626:	4b8b      	ldr	r3, [pc, #556]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800662e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006632:	d10f      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8006634:	4b88      	ldr	r3, [pc, #544]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006636:	61fb      	str	r3, [r7, #28]
          break;
 8006638:	e00c      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800663a:	4b86      	ldr	r3, [pc, #536]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800663c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b02      	cmp	r3, #2
 8006646:	d107      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8006648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800664c:	61fb      	str	r3, [r7, #28]
          break;
 800664e:	e003      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8006650:	bf00      	nop
 8006652:	e257      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006654:	bf00      	nop
 8006656:	e255      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006658:	bf00      	nop
        break;
 800665a:	e253      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800665c:	4b7d      	ldr	r3, [pc, #500]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800666e:	d025      	beq.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006676:	d82c      	bhi.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800667e:	d013      	beq.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006686:	d824      	bhi.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d004      	beq.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006694:	d004      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8006696:	e01c      	b.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006698:	f7ff f95a 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 800669c:	61f8      	str	r0, [r7, #28]
          break;
 800669e:	e01d      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80066a0:	f7ff f8be 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 80066a4:	61f8      	str	r0, [r7, #28]
          break;
 80066a6:	e019      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066a8:	4b6a      	ldr	r3, [pc, #424]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b4:	d10f      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80066b6:	4b68      	ldr	r3, [pc, #416]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80066b8:	61fb      	str	r3, [r7, #28]
          break;
 80066ba:	e00c      	b.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80066bc:	4b65      	ldr	r3, [pc, #404]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d107      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80066ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ce:	61fb      	str	r3, [r7, #28]
          break;
 80066d0:	e003      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 80066d2:	bf00      	nop
 80066d4:	e216      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80066d6:	bf00      	nop
 80066d8:	e214      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80066da:	bf00      	nop
        break;
 80066dc:	e212      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80066de:	4b5d      	ldr	r3, [pc, #372]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066f0:	d025      	beq.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066f8:	d82c      	bhi.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006700:	d013      	beq.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006708:	d824      	bhi.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006716:	d004      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8006718:	e01c      	b.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800671a:	f7ff f919 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 800671e:	61f8      	str	r0, [r7, #28]
          break;
 8006720:	e01d      	b.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8006722:	f7ff f87d 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8006726:	61f8      	str	r0, [r7, #28]
          break;
 8006728:	e019      	b.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800672a:	4b4a      	ldr	r3, [pc, #296]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006736:	d10f      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8006738:	4b47      	ldr	r3, [pc, #284]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800673a:	61fb      	str	r3, [r7, #28]
          break;
 800673c:	e00c      	b.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800673e:	4b45      	ldr	r3, [pc, #276]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b02      	cmp	r3, #2
 800674a:	d107      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800674c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006750:	61fb      	str	r3, [r7, #28]
          break;
 8006752:	e003      	b.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8006754:	bf00      	nop
 8006756:	e1d5      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006758:	bf00      	nop
 800675a:	e1d3      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800675c:	bf00      	nop
        break;
 800675e:	e1d1      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006760:	4b3c      	ldr	r3, [pc, #240]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006772:	d00c      	beq.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800677a:	d864      	bhi.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006782:	d008      	beq.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800678a:	d030      	beq.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800678c:	e05b      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800678e:	f7ff f847 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8006792:	61f8      	str	r0, [r7, #28]
          break;
 8006794:	e05c      	b.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006796:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800679e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a2:	d152      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80067a4:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d04c      	beq.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	0a1b      	lsrs	r3, r3, #8
 80067b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ba:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	fb03 f202 	mul.w	r2, r3, r2
 80067c4:	4b23      	ldr	r3, [pc, #140]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	3301      	adds	r3, #1
 80067d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80067d6:	4b1f      	ldr	r3, [pc, #124]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	0e5b      	lsrs	r3, r3, #25
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	3301      	adds	r3, #1
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ea:	61fb      	str	r3, [r7, #28]
          break;
 80067ec:	e02d      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80067ee:	4b19      	ldr	r3, [pc, #100]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067fa:	d128      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80067fc:	4b15      	ldr	r3, [pc, #84]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d022      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006808:	4b12      	ldr	r3, [pc, #72]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	0a1b      	lsrs	r3, r3, #8
 800680e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006812:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	fb03 f202 	mul.w	r2, r3, r2
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	3301      	adds	r3, #1
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800682e:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	0e5b      	lsrs	r3, r3, #25
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	3301      	adds	r3, #1
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006842:	61fb      	str	r3, [r7, #28]
          break;
 8006844:	e003      	b.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8006846:	bf00      	nop
 8006848:	e15c      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800684a:	bf00      	nop
 800684c:	e15a      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800684e:	bf00      	nop
        break;
 8006850:	e158      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006852:	bf00      	nop
 8006854:	40021000 	.word	0x40021000
 8006858:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800685c:	4b9d      	ldr	r3, [pc, #628]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800685e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006866:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800686e:	f7ff f885 	bl	800597c <HAL_RCC_GetPCLK2Freq>
 8006872:	61f8      	str	r0, [r7, #28]
        break;
 8006874:	e146      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006876:	f7fe ffd3 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 800687a:	61f8      	str	r0, [r7, #28]
        break;
 800687c:	e142      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800687e:	4b95      	ldr	r3, [pc, #596]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006884:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006890:	d013      	beq.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006898:	d819      	bhi.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a6:	d004      	beq.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80068a8:	e011      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068aa:	f7ff f851 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 80068ae:	61f8      	str	r0, [r7, #28]
          break;
 80068b0:	e010      	b.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80068b2:	f7fe ffb5 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 80068b6:	61f8      	str	r0, [r7, #28]
          break;
 80068b8:	e00c      	b.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ba:	4b86      	ldr	r3, [pc, #536]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c6:	d104      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80068c8:	4b83      	ldr	r3, [pc, #524]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80068ca:	61fb      	str	r3, [r7, #28]
          break;
 80068cc:	e001      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80068ce:	bf00      	nop
 80068d0:	e118      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80068d2:	bf00      	nop
        break;
 80068d4:	e116      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068d6:	4b7f      	ldr	r3, [pc, #508]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e8:	d013      	beq.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f0:	d819      	bhi.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d004      	beq.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068fe:	d004      	beq.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8006900:	e011      	b.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006902:	f7ff f825 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 8006906:	61f8      	str	r0, [r7, #28]
          break;
 8006908:	e010      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800690a:	f7fe ff89 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 800690e:	61f8      	str	r0, [r7, #28]
          break;
 8006910:	e00c      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006912:	4b70      	ldr	r3, [pc, #448]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691e:	d104      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8006920:	4b6d      	ldr	r3, [pc, #436]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006922:	61fb      	str	r3, [r7, #28]
          break;
 8006924:	e001      	b.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8006926:	bf00      	nop
 8006928:	e0ec      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800692a:	bf00      	nop
        break;
 800692c:	e0ea      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800692e:	4b69      	ldr	r3, [pc, #420]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006940:	d013      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006948:	d819      	bhi.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006956:	d004      	beq.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8006958:	e011      	b.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800695a:	f7fe fff9 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 800695e:	61f8      	str	r0, [r7, #28]
          break;
 8006960:	e010      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8006962:	f7fe ff5d 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8006966:	61f8      	str	r0, [r7, #28]
          break;
 8006968:	e00c      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800696a:	4b5a      	ldr	r3, [pc, #360]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006976:	d104      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8006978:	4b57      	ldr	r3, [pc, #348]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800697a:	61fb      	str	r3, [r7, #28]
          break;
 800697c:	e001      	b.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 800697e:	bf00      	nop
 8006980:	e0c0      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006982:	bf00      	nop
        break;
 8006984:	e0be      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006986:	4b53      	ldr	r3, [pc, #332]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006998:	d02c      	beq.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069a0:	d833      	bhi.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069a8:	d01a      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069b0:	d82b      	bhi.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069be:	d004      	beq.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80069c0:	e023      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069c2:	f7fe ffc5 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 80069c6:	61f8      	str	r0, [r7, #28]
          break;
 80069c8:	e026      	b.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80069ca:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d11a      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80069d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80069dc:	61fb      	str	r3, [r7, #28]
          break;
 80069de:	e016      	b.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069e0:	4b3c      	ldr	r3, [pc, #240]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ec:	d111      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80069ee:	4b3a      	ldr	r3, [pc, #232]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80069f0:	61fb      	str	r3, [r7, #28]
          break;
 80069f2:	e00e      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80069f4:	4b37      	ldr	r3, [pc, #220]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d109      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8006a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a06:	61fb      	str	r3, [r7, #28]
          break;
 8006a08:	e005      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8006a0a:	bf00      	nop
 8006a0c:	e07a      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a0e:	bf00      	nop
 8006a10:	e078      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a12:	bf00      	nop
 8006a14:	e076      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a16:	bf00      	nop
        break;
 8006a18:	e074      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a1a:	4b2e      	ldr	r3, [pc, #184]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a2c:	d02c      	beq.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a34:	d833      	bhi.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a3c:	d01a      	beq.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a44:	d82b      	bhi.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d004      	beq.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a52:	d004      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8006a54:	e023      	b.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a56:	f7fe ff7b 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 8006a5a:	61f8      	str	r0, [r7, #28]
          break;
 8006a5c:	e026      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a5e:	4b1d      	ldr	r3, [pc, #116]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d11a      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8006a6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a70:	61fb      	str	r3, [r7, #28]
          break;
 8006a72:	e016      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a74:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a80:	d111      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8006a82:	4b15      	ldr	r3, [pc, #84]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006a84:	61fb      	str	r3, [r7, #28]
          break;
 8006a86:	e00e      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a88:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d109      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8006a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9a:	61fb      	str	r3, [r7, #28]
          break;
 8006a9c:	e005      	b.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8006a9e:	bf00      	nop
 8006aa0:	e030      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006aa2:	bf00      	nop
 8006aa4:	e02e      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006aa6:	bf00      	nop
 8006aa8:	e02c      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006aaa:	bf00      	nop
        break;
 8006aac:	e02a      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d004      	beq.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac6:	d009      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8006ac8:	e012      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006aca:	f7fe ff41 	bl	8005950 <HAL_RCC_GetPCLK1Freq>
 8006ace:	61f8      	str	r0, [r7, #28]
          break;
 8006ad0:	e00e      	b.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8006ad2:	bf00      	nop
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006adc:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae8:	d101      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8006aea:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006aec:	61fb      	str	r3, [r7, #28]
          break;
 8006aee:	bf00      	nop
        break;
 8006af0:	e008      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006af2:	bf00      	nop
 8006af4:	e006      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006af6:	bf00      	nop
 8006af8:	e004      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006afa:	bf00      	nop
 8006afc:	e002      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b02:	bf00      	nop
    }
  }

  return(frequency);
 8006b04:	69fb      	ldr	r3, [r7, #28]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3720      	adds	r7, #32
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	40021000 	.word	0x40021000
 8006b14:	00f42400 	.word	0x00f42400

08006b18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b26:	4b75      	ldr	r3, [pc, #468]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d018      	beq.n	8006b64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b32:	4b72      	ldr	r3, [pc, #456]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f003 0203 	and.w	r2, r3, #3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d10d      	bne.n	8006b5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
       ||
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d009      	beq.n	8006b5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b4a:	4b6c      	ldr	r3, [pc, #432]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
       ||
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d047      	beq.n	8006bee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
 8006b62:	e044      	b.n	8006bee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d018      	beq.n	8006b9e <RCCEx_PLLSAI1_Config+0x86>
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d825      	bhi.n	8006bbc <RCCEx_PLLSAI1_Config+0xa4>
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d002      	beq.n	8006b7a <RCCEx_PLLSAI1_Config+0x62>
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d009      	beq.n	8006b8c <RCCEx_PLLSAI1_Config+0x74>
 8006b78:	e020      	b.n	8006bbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b7a:	4b60      	ldr	r3, [pc, #384]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d11d      	bne.n	8006bc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b8a:	e01a      	b.n	8006bc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b8c:	4b5b      	ldr	r3, [pc, #364]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d116      	bne.n	8006bc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b9c:	e013      	b.n	8006bc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b9e:	4b57      	ldr	r3, [pc, #348]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10f      	bne.n	8006bca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006baa:	4b54      	ldr	r3, [pc, #336]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d109      	bne.n	8006bca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bba:	e006      	b.n	8006bca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc0:	e004      	b.n	8006bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bc2:	bf00      	nop
 8006bc4:	e002      	b.n	8006bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e000      	b.n	8006bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10d      	bne.n	8006bee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006bd2:	4b4a      	ldr	r3, [pc, #296]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6819      	ldr	r1, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	430b      	orrs	r3, r1
 8006be8:	4944      	ldr	r1, [pc, #272]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d17d      	bne.n	8006cf0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bf4:	4b41      	ldr	r3, [pc, #260]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a40      	ldr	r2, [pc, #256]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c00:	f7fb fb8c 	bl	800231c <HAL_GetTick>
 8006c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c06:	e009      	b.n	8006c1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c08:	f7fb fb88 	bl	800231c <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d902      	bls.n	8006c1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	73fb      	strb	r3, [r7, #15]
        break;
 8006c1a:	e005      	b.n	8006c28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c1c:	4b37      	ldr	r3, [pc, #220]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1ef      	bne.n	8006c08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d160      	bne.n	8006cf0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d111      	bne.n	8006c58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c34:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6892      	ldr	r2, [r2, #8]
 8006c44:	0211      	lsls	r1, r2, #8
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	68d2      	ldr	r2, [r2, #12]
 8006c4a:	0912      	lsrs	r2, r2, #4
 8006c4c:	0452      	lsls	r2, r2, #17
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	492a      	ldr	r1, [pc, #168]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	610b      	str	r3, [r1, #16]
 8006c56:	e027      	b.n	8006ca8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d112      	bne.n	8006c84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c5e:	4b27      	ldr	r3, [pc, #156]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6892      	ldr	r2, [r2, #8]
 8006c6e:	0211      	lsls	r1, r2, #8
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6912      	ldr	r2, [r2, #16]
 8006c74:	0852      	lsrs	r2, r2, #1
 8006c76:	3a01      	subs	r2, #1
 8006c78:	0552      	lsls	r2, r2, #21
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	491f      	ldr	r1, [pc, #124]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	610b      	str	r3, [r1, #16]
 8006c82:	e011      	b.n	8006ca8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6892      	ldr	r2, [r2, #8]
 8006c94:	0211      	lsls	r1, r2, #8
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6952      	ldr	r2, [r2, #20]
 8006c9a:	0852      	lsrs	r2, r2, #1
 8006c9c:	3a01      	subs	r2, #1
 8006c9e:	0652      	lsls	r2, r2, #25
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	4916      	ldr	r1, [pc, #88]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006ca8:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb4:	f7fb fb32 	bl	800231c <HAL_GetTick>
 8006cb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cba:	e009      	b.n	8006cd0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cbc:	f7fb fb2e 	bl	800231c <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d902      	bls.n	8006cd0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	73fb      	strb	r3, [r7, #15]
          break;
 8006cce:	e005      	b.n	8006cdc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0ef      	beq.n	8006cbc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ce2:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	4904      	ldr	r1, [pc, #16]	; (8006cfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40021000 	.word	0x40021000

08006d00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d0e:	4b6a      	ldr	r3, [pc, #424]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d018      	beq.n	8006d4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d1a:	4b67      	ldr	r3, [pc, #412]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f003 0203 	and.w	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d10d      	bne.n	8006d46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d009      	beq.n	8006d46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d32:	4b61      	ldr	r3, [pc, #388]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	091b      	lsrs	r3, r3, #4
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
       ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d047      	beq.n	8006dd6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	73fb      	strb	r3, [r7, #15]
 8006d4a:	e044      	b.n	8006dd6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d018      	beq.n	8006d86 <RCCEx_PLLSAI2_Config+0x86>
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d825      	bhi.n	8006da4 <RCCEx_PLLSAI2_Config+0xa4>
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d002      	beq.n	8006d62 <RCCEx_PLLSAI2_Config+0x62>
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d009      	beq.n	8006d74 <RCCEx_PLLSAI2_Config+0x74>
 8006d60:	e020      	b.n	8006da4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d62:	4b55      	ldr	r3, [pc, #340]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d11d      	bne.n	8006daa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d72:	e01a      	b.n	8006daa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d74:	4b50      	ldr	r3, [pc, #320]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d116      	bne.n	8006dae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d84:	e013      	b.n	8006dae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d86:	4b4c      	ldr	r3, [pc, #304]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10f      	bne.n	8006db2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d92:	4b49      	ldr	r3, [pc, #292]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006da2:	e006      	b.n	8006db2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	73fb      	strb	r3, [r7, #15]
      break;
 8006da8:	e004      	b.n	8006db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006daa:	bf00      	nop
 8006dac:	e002      	b.n	8006db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10d      	bne.n	8006dd6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006dba:	4b3f      	ldr	r3, [pc, #252]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6819      	ldr	r1, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	4939      	ldr	r1, [pc, #228]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d167      	bne.n	8006eac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ddc:	4b36      	ldr	r3, [pc, #216]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a35      	ldr	r2, [pc, #212]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de8:	f7fb fa98 	bl	800231c <HAL_GetTick>
 8006dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006dee:	e009      	b.n	8006e04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006df0:	f7fb fa94 	bl	800231c <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d902      	bls.n	8006e04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	73fb      	strb	r3, [r7, #15]
        break;
 8006e02:	e005      	b.n	8006e10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e04:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1ef      	bne.n	8006df0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d14a      	bne.n	8006eac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d111      	bne.n	8006e40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e1c:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6892      	ldr	r2, [r2, #8]
 8006e2c:	0211      	lsls	r1, r2, #8
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68d2      	ldr	r2, [r2, #12]
 8006e32:	0912      	lsrs	r2, r2, #4
 8006e34:	0452      	lsls	r2, r2, #17
 8006e36:	430a      	orrs	r2, r1
 8006e38:	491f      	ldr	r1, [pc, #124]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	614b      	str	r3, [r1, #20]
 8006e3e:	e011      	b.n	8006e64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e40:	4b1d      	ldr	r3, [pc, #116]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006e48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6892      	ldr	r2, [r2, #8]
 8006e50:	0211      	lsls	r1, r2, #8
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6912      	ldr	r2, [r2, #16]
 8006e56:	0852      	lsrs	r2, r2, #1
 8006e58:	3a01      	subs	r2, #1
 8006e5a:	0652      	lsls	r2, r2, #25
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	4916      	ldr	r1, [pc, #88]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e70:	f7fb fa54 	bl	800231c <HAL_GetTick>
 8006e74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e76:	e009      	b.n	8006e8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e78:	f7fb fa50 	bl	800231c <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d902      	bls.n	8006e8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	73fb      	strb	r3, [r7, #15]
          break;
 8006e8a:	e005      	b.n	8006e98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0ef      	beq.n	8006e78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	4904      	ldr	r1, [pc, #16]	; (8006eb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40021000 	.word	0x40021000

08006ebc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b089      	sub	sp, #36	; 0x24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed8:	d10c      	bne.n	8006ef4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006eda:	4b6e      	ldr	r3, [pc, #440]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006ee4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006eec:	d112      	bne.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006eee:	4b6a      	ldr	r3, [pc, #424]	; (8007098 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006ef0:	61fb      	str	r3, [r7, #28]
 8006ef2:	e00f      	b.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efa:	d10b      	bne.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006efc:	4b65      	ldr	r3, [pc, #404]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f02:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006f06:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f0e:	d101      	bne.n	8006f14 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006f10:	4b61      	ldr	r3, [pc, #388]	; (8007098 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006f12:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f040 80b4 	bne.w	8007084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f26:	d003      	beq.n	8006f30 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f2e:	d135      	bne.n	8006f9c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f30:	4b58      	ldr	r3, [pc, #352]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f3c:	f040 80a1 	bne.w	8007082 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006f40:	4b54      	ldr	r3, [pc, #336]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 809a 	beq.w	8007082 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f4e:	4b51      	ldr	r3, [pc, #324]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	3301      	adds	r3, #1
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006f62:	4b4c      	ldr	r3, [pc, #304]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006f74:	4b47      	ldr	r3, [pc, #284]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8006f80:	2311      	movs	r3, #17
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	e001      	b.n	8006f8a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8006f86:	2307      	movs	r3, #7
 8006f88:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	fb03 f202 	mul.w	r2, r3, r2
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f98:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f9a:	e072      	b.n	8007082 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d133      	bne.n	800700a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006fa2:	4b3c      	ldr	r3, [pc, #240]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fae:	d169      	bne.n	8007084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8006fb0:	4b38      	ldr	r3, [pc, #224]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d063      	beq.n	8007084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006fbc:	4b35      	ldr	r3, [pc, #212]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	091b      	lsrs	r3, r3, #4
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fce:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006fd0:	4b30      	ldr	r3, [pc, #192]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	0a1b      	lsrs	r3, r3, #8
 8006fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fda:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006fe2:	4b2c      	ldr	r3, [pc, #176]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8006fee:	2311      	movs	r3, #17
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	e001      	b.n	8006ff8 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8006ff4:	2307      	movs	r3, #7
 8006ff6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	fb03 f202 	mul.w	r2, r3, r2
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	fbb2 f3f3 	udiv	r3, r2, r3
 8007006:	61fb      	str	r3, [r7, #28]
 8007008:	e03c      	b.n	8007084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007010:	d003      	beq.n	800701a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007018:	d134      	bne.n	8007084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800701a:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007026:	d12d      	bne.n	8007084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8007028:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d027      	beq.n	8007084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007034:	4b17      	ldr	r3, [pc, #92]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	091b      	lsrs	r3, r3, #4
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	3301      	adds	r3, #1
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	fbb2 f3f3 	udiv	r3, r2, r3
 8007046:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007048:	4b12      	ldr	r3, [pc, #72]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	0a1b      	lsrs	r3, r3, #8
 800704e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007052:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800705a:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8007066:	2311      	movs	r3, #17
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	e001      	b.n	8007070 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800706c:	2307      	movs	r3, #7
 800706e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	fb03 f202 	mul.w	r2, r3, r2
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	e000      	b.n	8007084 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007082:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007084:	69fb      	ldr	r3, [r7, #28]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3724      	adds	r7, #36	; 0x24
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40021000 	.word	0x40021000
 8007098:	001fff68 	.word	0x001fff68

0800709c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d079      	beq.n	80071a2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fa fe5a 	bl	8001d7c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f003 0310 	and.w	r3, r3, #16
 80070da:	2b10      	cmp	r3, #16
 80070dc:	d058      	beq.n	8007190 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	22ca      	movs	r2, #202	; 0xca
 80070e4:	625a      	str	r2, [r3, #36]	; 0x24
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2253      	movs	r2, #83	; 0x53
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f9a4 	bl	800743c <RTC_EnterInitMode>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d127      	bne.n	800714e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800710c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007110:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6899      	ldr	r1, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	431a      	orrs	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	68d2      	ldr	r2, [r2, #12]
 8007138:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6919      	ldr	r1, [r3, #16]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	041a      	lsls	r2, r3, #16
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9a8 	bl	80074a4 <RTC_ExitInitMode>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d113      	bne.n	8007186 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0203 	bic.w	r2, r2, #3
 800716c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	430a      	orrs	r2, r1
 8007184:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	22ff      	movs	r2, #255	; 0xff
 800718c:	625a      	str	r2, [r3, #36]	; 0x24
 800718e:	e001      	b.n	8007194 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d103      	bne.n	80071a2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_RTC_SetTime+0x1a>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e08b      	b.n	80072de <HAL_RTC_SetTime+0x132>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	22ca      	movs	r2, #202	; 0xca
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2253      	movs	r2, #83	; 0x53
 80071e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f928 	bl	800743c <RTC_EnterInitMode>
 80071ec:	4603      	mov	r3, r0
 80071ee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80071f0:	7cfb      	ldrb	r3, [r7, #19]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d163      	bne.n	80072be <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d126      	bne.n	800724a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d102      	bne.n	8007210 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2200      	movs	r2, #0
 800720e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	4618      	mov	r0, r3
 8007216:	f000 f983 	bl	8007520 <RTC_ByteToBcd2>
 800721a:	4603      	mov	r3, r0
 800721c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 f97c 	bl	8007520 <RTC_ByteToBcd2>
 8007228:	4603      	mov	r3, r0
 800722a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800722c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	789b      	ldrb	r3, [r3, #2]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f974 	bl	8007520 <RTC_ByteToBcd2>
 8007238:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800723a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	78db      	ldrb	r3, [r3, #3]
 8007242:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	e018      	b.n	800727c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d102      	bne.n	800725e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800726a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007270:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	78db      	ldrb	r3, [r3, #3]
 8007276:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007286:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800728a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800729a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6899      	ldr	r1, [r3, #8]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f8f5 	bl	80074a4 <RTC_ExitInitMode>
 80072ba:	4603      	mov	r3, r0
 80072bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	22ff      	movs	r2, #255	; 0xff
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80072c6:	7cfb      	ldrb	r3, [r7, #19]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d103      	bne.n	80072d4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80072dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd90      	pop	{r4, r7, pc}

080072e6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80072e6:	b590      	push	{r4, r7, lr}
 80072e8:	b087      	sub	sp, #28
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_RTC_SetDate+0x1a>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e075      	b.n	80073ec <HAL_RTC_SetDate+0x106>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10e      	bne.n	8007334 <HAL_RTC_SetDate+0x4e>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b00      	cmp	r3, #0
 8007320:	d008      	beq.n	8007334 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	f023 0310 	bic.w	r3, r3, #16
 800732a:	b2db      	uxtb	r3, r3
 800732c:	330a      	adds	r3, #10
 800732e:	b2da      	uxtb	r2, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d11c      	bne.n	8007374 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	78db      	ldrb	r3, [r3, #3]
 800733e:	4618      	mov	r0, r3
 8007340:	f000 f8ee 	bl	8007520 <RTC_ByteToBcd2>
 8007344:	4603      	mov	r3, r0
 8007346:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 f8e7 	bl	8007520 <RTC_ByteToBcd2>
 8007352:	4603      	mov	r3, r0
 8007354:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007356:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	789b      	ldrb	r3, [r3, #2]
 800735c:	4618      	mov	r0, r3
 800735e:	f000 f8df 	bl	8007520 <RTC_ByteToBcd2>
 8007362:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007364:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	e00e      	b.n	8007392 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	78db      	ldrb	r3, [r3, #3]
 8007378:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007380:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007386:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	22ca      	movs	r2, #202	; 0xca
 8007398:	625a      	str	r2, [r3, #36]	; 0x24
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2253      	movs	r2, #83	; 0x53
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 f84a 	bl	800743c <RTC_EnterInitMode>
 80073a8:	4603      	mov	r3, r0
 80073aa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80073ac:	7cfb      	ldrb	r3, [r7, #19]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10c      	bne.n	80073cc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f86e 	bl	80074a4 <RTC_ExitInitMode>
 80073c8:	4603      	mov	r3, r0
 80073ca:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	22ff      	movs	r2, #255	; 0xff
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80073d4:	7cfb      	ldrb	r3, [r7, #19]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80073ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	371c      	adds	r7, #28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd90      	pop	{r4, r7, pc}

080073f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a0d      	ldr	r2, [pc, #52]	; (8007438 <HAL_RTC_WaitForSynchro+0x44>)
 8007402:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007404:	f7fa ff8a 	bl	800231c <HAL_GetTick>
 8007408:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800740a:	e009      	b.n	8007420 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800740c:	f7fa ff86 	bl	800231c <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800741a:	d901      	bls.n	8007420 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e007      	b.n	8007430 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0ee      	beq.n	800740c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	0003ff5f 	.word	0x0003ff5f

0800743c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d120      	bne.n	8007498 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f04f 32ff 	mov.w	r2, #4294967295
 800745e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007460:	f7fa ff5c 	bl	800231c <HAL_GetTick>
 8007464:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007466:	e00d      	b.n	8007484 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007468:	f7fa ff58 	bl	800231c <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007476:	d905      	bls.n	8007484 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2203      	movs	r2, #3
 8007480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <RTC_EnterInitMode+0x5c>
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b03      	cmp	r3, #3
 8007496:	d1e7      	bne.n	8007468 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80074b0:	4b1a      	ldr	r3, [pc, #104]	; (800751c <RTC_ExitInitMode+0x78>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4a19      	ldr	r2, [pc, #100]	; (800751c <RTC_ExitInitMode+0x78>)
 80074b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ba:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80074bc:	4b17      	ldr	r3, [pc, #92]	; (800751c <RTC_ExitInitMode+0x78>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10c      	bne.n	80074e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff93 	bl	80073f4 <HAL_RTC_WaitForSynchro>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01e      	beq.n	8007512 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2203      	movs	r2, #3
 80074d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	73fb      	strb	r3, [r7, #15]
 80074e0:	e017      	b.n	8007512 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80074e2:	4b0e      	ldr	r3, [pc, #56]	; (800751c <RTC_ExitInitMode+0x78>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	4a0d      	ldr	r2, [pc, #52]	; (800751c <RTC_ExitInitMode+0x78>)
 80074e8:	f023 0320 	bic.w	r3, r3, #32
 80074ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff ff80 	bl	80073f4 <HAL_RTC_WaitForSynchro>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2203      	movs	r2, #3
 80074fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007506:	4b05      	ldr	r3, [pc, #20]	; (800751c <RTC_ExitInitMode+0x78>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	4a04      	ldr	r2, [pc, #16]	; (800751c <RTC_ExitInitMode+0x78>)
 800750c:	f043 0320 	orr.w	r3, r3, #32
 8007510:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	40002800 	.word	0x40002800

08007520 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007532:	e005      	b.n	8007540 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3301      	adds	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	3b0a      	subs	r3, #10
 800753e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	2b09      	cmp	r3, #9
 8007544:	d8f6      	bhi.n	8007534 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	b2da      	uxtb	r2, r3
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	4313      	orrs	r3, r2
 8007552:	b2db      	uxtb	r3, r3
}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e022      	b.n	80075b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d105      	bne.n	800758a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7fa fc2b 	bl	8001de0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2203      	movs	r2, #3
 800758e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f814 	bl	80075c0 <HAL_SD_InitCard>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e00a      	b.n	80075b8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075c0:	b5b0      	push	{r4, r5, r7, lr}
 80075c2:	b08e      	sub	sp, #56	; 0x38
 80075c4:	af04      	add	r7, sp, #16
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80075dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80075e0:	f7fe fd2c 	bl	800603c <HAL_RCCEx_GetPeriphCLKFreq>
 80075e4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d109      	bne.n	8007600 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e07b      	b.n	80076f8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	09db      	lsrs	r3, r3, #7
 8007604:	4a3e      	ldr	r2, [pc, #248]	; (8007700 <HAL_SD_InitCard+0x140>)
 8007606:	fba2 2303 	umull	r2, r3, r2, r3
 800760a:	091b      	lsrs	r3, r3, #4
 800760c:	3b02      	subs	r3, #2
 800760e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681d      	ldr	r5, [r3, #0]
 8007614:	466c      	mov	r4, sp
 8007616:	f107 0314 	add.w	r3, r7, #20
 800761a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800761e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007622:	f107 0308 	add.w	r3, r7, #8
 8007626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007628:	4628      	mov	r0, r5
 800762a:	f001 fac1 	bl	8008bb0 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800763c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4618      	mov	r0, r3
 8007644:	f001 faff 	bl	8008c46 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007656:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	3302      	adds	r3, #2
 800765c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007664:	4a27      	ldr	r2, [pc, #156]	; (8007704 <HAL_SD_InitCard+0x144>)
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	fbb2 f3f3 	udiv	r3, r2, r3
 800766c:	3301      	adds	r3, #1
 800766e:	4618      	mov	r0, r3
 8007670:	f7fa fe60 	bl	8002334 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 ffdf 	bl	8008638 <SD_PowerON>
 800767a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e02e      	b.n	80076f8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fefe 	bl	800849c <SD_InitCard>
 80076a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00b      	beq.n	80076c0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e01b      	b.n	80076f8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076c8:	4618      	mov	r0, r3
 80076ca:	f001 fb4f 	bl	8008d6c <SDMMC_CmdBlockLength>
 80076ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00f      	beq.n	80076f6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a0b      	ldr	r2, [pc, #44]	; (8007708 <HAL_SD_InitCard+0x148>)
 80076dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3728      	adds	r7, #40	; 0x28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007700:	014f8b59 	.word	0x014f8b59
 8007704:	00012110 	.word	0x00012110
 8007708:	004005ff 	.word	0x004005ff

0800770c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08c      	sub	sp, #48	; 0x30
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d107      	bne.n	8007734 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e0a9      	b.n	8007888 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	f040 80a2 	bne.w	8007886 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	441a      	add	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007752:	429a      	cmp	r2, r3
 8007754:	d907      	bls.n	8007766 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e090      	b.n	8007888 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2203      	movs	r2, #3
 800776a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2200      	movs	r2, #0
 8007774:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4a45      	ldr	r2, [pc, #276]	; (8007890 <HAL_SD_ReadBlocks_DMA+0x184>)
 800777c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	4a44      	ldr	r2, [pc, #272]	; (8007894 <HAL_SD_ReadBlocks_DMA+0x188>)
 8007784:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	2200      	movs	r2, #0
 800778c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3380      	adds	r3, #128	; 0x80
 8007798:	4619      	mov	r1, r3
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	025b      	lsls	r3, r3, #9
 80077a0:	089b      	lsrs	r3, r3, #2
 80077a2:	f7fa ffb5 	bl	8002710 <HAL_DMA_Start_IT>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00f      	beq.n	80077cc <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a39      	ldr	r2, [pc, #228]	; (8007898 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e05d      	b.n	8007888 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0208 	orr.w	r2, r2, #8
 80077da:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d002      	beq.n	80077ea <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	025b      	lsls	r3, r3, #9
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80077ea:	f04f 33ff 	mov.w	r3, #4294967295
 80077ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	025b      	lsls	r3, r3, #9
 80077f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80077f6:	2390      	movs	r3, #144	; 0x90
 80077f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80077fa:	2302      	movs	r3, #2
 80077fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80077fe:	2300      	movs	r3, #0
 8007800:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007802:	2301      	movs	r3, #1
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f107 0210 	add.w	r2, r7, #16
 800780e:	4611      	mov	r1, r2
 8007810:	4618      	mov	r0, r3
 8007812:	f001 fa7f 	bl	8008d14 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d90a      	bls.n	8007832 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2282      	movs	r2, #130	; 0x82
 8007820:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007828:	4618      	mov	r0, r3
 800782a:	f001 fae3 	bl	8008df4 <SDMMC_CmdReadMultiBlock>
 800782e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007830:	e009      	b.n	8007846 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2281      	movs	r2, #129	; 0x81
 8007836:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800783e:	4618      	mov	r0, r3
 8007840:	f001 fab6 	bl	8008db0 <SDMMC_CmdReadSingleBlock>
 8007844:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d012      	beq.n	8007872 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a11      	ldr	r2, [pc, #68]	; (8007898 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	431a      	orrs	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e00a      	b.n	8007888 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007880:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	e000      	b.n	8007888 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007886:	2302      	movs	r3, #2
  }
}
 8007888:	4618      	mov	r0, r3
 800788a:	3730      	adds	r7, #48	; 0x30
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	080082b7 	.word	0x080082b7
 8007894:	08008329 	.word	0x08008329
 8007898:	004005ff 	.word	0x004005ff

0800789c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08c      	sub	sp, #48	; 0x30
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d107      	bne.n	80078c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0ac      	b.n	8007a1e <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	f040 80a5 	bne.w	8007a1c <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80078d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	441a      	add	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d907      	bls.n	80078f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e093      	b.n	8007a1e <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2203      	movs	r2, #3
 80078fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790a:	4a47      	ldr	r2, [pc, #284]	; (8007a28 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800790c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	4a46      	ldr	r2, [pc, #280]	; (8007a2c <HAL_SD_WriteBlocks_DMA+0x190>)
 8007914:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791a:	2200      	movs	r2, #0
 800791c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007922:	2b01      	cmp	r3, #1
 8007924:	d002      	beq.n	800792c <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	025b      	lsls	r3, r3, #9
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d90a      	bls.n	8007948 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	22a0      	movs	r2, #160	; 0xa0
 8007936:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800793e:	4618      	mov	r0, r3
 8007940:	f001 fa9c 	bl	8008e7c <SDMMC_CmdWriteMultiBlock>
 8007944:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007946:	e009      	b.n	800795c <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2290      	movs	r2, #144	; 0x90
 800794c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007954:	4618      	mov	r0, r3
 8007956:	f001 fa6f 	bl	8008e38 <SDMMC_CmdWriteSingleBlock>
 800795a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d012      	beq.n	8007988 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a32      	ldr	r2, [pc, #200]	; (8007a30 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007970:	431a      	orrs	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e04a      	b.n	8007a1e <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0208 	orr.w	r2, r2, #8
 8007996:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800799c:	68b9      	ldr	r1, [r7, #8]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3380      	adds	r3, #128	; 0x80
 80079a4:	461a      	mov	r2, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	025b      	lsls	r3, r3, #9
 80079aa:	089b      	lsrs	r3, r3, #2
 80079ac:	f7fa feb0 	bl	8002710 <HAL_DMA_Start_IT>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d012      	beq.n	80079dc <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1d      	ldr	r2, [pc, #116]	; (8007a30 <HAL_SD_WriteBlocks_DMA+0x194>)
 80079bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e020      	b.n	8007a1e <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079dc:	f04f 33ff 	mov.w	r3, #4294967295
 80079e0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	025b      	lsls	r3, r3, #9
 80079e6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80079e8:	2390      	movs	r3, #144	; 0x90
 80079ea:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80079ec:	2300      	movs	r3, #0
 80079ee:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f107 0210 	add.w	r2, r7, #16
 8007a00:	4611      	mov	r1, r2
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 f986 	bl	8008d14 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 021a 	orr.w	r2, r2, #26
 8007a16:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e000      	b.n	8007a1e <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3730      	adds	r7, #48	; 0x30
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	0800828d 	.word	0x0800828d
 8007a2c:	08008329 	.word	0x08008329
 8007a30:	004005ff 	.word	0x004005ff

08007a34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d008      	beq.n	8007a62 <HAL_SD_IRQHandler+0x2e>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 f802 	bl	8008a64 <SD_Read_IT>
 8007a60:	e155      	b.n	8007d0e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 808f 	beq.w	8007b90 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007a8a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007a8e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d039      	beq.n	8007b1e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d104      	bne.n	8007abe <HAL_SD_IRQHandler+0x8a>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d011      	beq.n	8007ae2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 f9fc 	bl	8008ec0 <SDMMC_CmdStopTransfer>
 8007ac8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d008      	beq.n	8007ae2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f91f 	bl	8007d20 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f240 523a 	movw	r2, #1338	; 0x53a
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d104      	bne.n	8007b0e <HAL_SD_IRQHandler+0xda>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f003 f8fc 	bl	800ad0c <HAL_SD_RxCpltCallback>
 8007b14:	e0fb      	b.n	8007d0e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f003 f8ee 	bl	800acf8 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007b1c:	e0f7      	b.n	8007d0e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80f2 	beq.w	8007d0e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d011      	beq.n	8007b58 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 f9c1 	bl	8008ec0 <SDMMC_CmdStopTransfer>
 8007b3e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d008      	beq.n	8007b58 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f8e4 	bl	8007d20 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f040 80d5 	bne.w	8007d0e <HAL_SD_IRQHandler+0x2da>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f040 80cf 	bne.w	8007d0e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0208 	bic.w	r2, r2, #8
 8007b7e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f003 f8b5 	bl	800acf8 <HAL_SD_TxCpltCallback>
}
 8007b8e:	e0be      	b.n	8007d0e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d008      	beq.n	8007bb0 <HAL_SD_IRQHandler+0x17c>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 ffac 	bl	8008b06 <SD_Write_IT>
 8007bae:	e0ae      	b.n	8007d0e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 80a7 	beq.w	8007d0e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	f043 0202 	orr.w	r2, r3, #2
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	f043 0208 	orr.w	r2, r3, #8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d005      	beq.n	8007c0e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c14:	f003 0310 	and.w	r3, r3, #16
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	f043 0210 	orr.w	r2, r3, #16
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007c40:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 f93a 	bl	8008ec0 <SDMMC_CmdStopTransfer>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f855 	bl	8007d20 <HAL_SD_ErrorCallback>
}
 8007c76:	e04a      	b.n	8007d0e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d045      	beq.n	8007d0e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f003 0310 	and.w	r3, r3, #16
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d104      	bne.n	8007c96 <HAL_SD_IRQHandler+0x262>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d011      	beq.n	8007cba <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9a:	4a1f      	ldr	r2, [pc, #124]	; (8007d18 <HAL_SD_IRQHandler+0x2e4>)
 8007c9c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fa fd94 	bl	80027d0 <HAL_DMA_Abort_IT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02f      	beq.n	8007d0e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fb84 	bl	80083c0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007cb8:	e029      	b.n	8007d0e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <HAL_SD_IRQHandler+0x29a>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d011      	beq.n	8007cf2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	4a12      	ldr	r2, [pc, #72]	; (8007d1c <HAL_SD_IRQHandler+0x2e8>)
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fa fd78 	bl	80027d0 <HAL_DMA_Abort_IT>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d013      	beq.n	8007d0e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fb9f 	bl	800842e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007cf0:	e00d      	b.n	8007d0e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f002 ffec 	bl	800ace4 <HAL_SD_AbortCallback>
}
 8007d0c:	e7ff      	b.n	8007d0e <HAL_SD_IRQHandler+0x2da>
 8007d0e:	bf00      	nop
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	080083c1 	.word	0x080083c1
 8007d1c:	0800842f 	.word	0x0800842f

08007d20 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d42:	0f9b      	lsrs	r3, r3, #30
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d4e:	0e9b      	lsrs	r3, r3, #26
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d60:	0e1b      	lsrs	r3, r3, #24
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d72:	0c1b      	lsrs	r3, r3, #16
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d94:	0d1b      	lsrs	r3, r3, #20
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da0:	0c1b      	lsrs	r3, r3, #16
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	f003 030f 	and.w	r3, r3, #15
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007db2:	0bdb      	lsrs	r3, r3, #15
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	f003 0301 	and.w	r3, r3, #1
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc4:	0b9b      	lsrs	r3, r3, #14
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd6:	0b5b      	lsrs	r3, r3, #13
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de8:	0b1b      	lsrs	r3, r3, #12
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d163      	bne.n	8007ecc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e08:	009a      	lsls	r2, r3, #2
 8007e0a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e0e:	4013      	ands	r3, r2
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e14:	0f92      	lsrs	r2, r2, #30
 8007e16:	431a      	orrs	r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e20:	0edb      	lsrs	r3, r3, #27
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e32:	0e1b      	lsrs	r3, r3, #24
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e44:	0d5b      	lsrs	r3, r3, #21
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e56:	0c9b      	lsrs	r3, r3, #18
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e68:	0bdb      	lsrs	r3, r3, #15
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	7e1b      	ldrb	r3, [r3, #24]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	3302      	adds	r3, #2
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e96:	fb03 f202 	mul.w	r2, r3, r2
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	7a1b      	ldrb	r3, [r3, #8]
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 030f 	and.w	r3, r3, #15
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007eb8:	0a52      	lsrs	r2, r2, #9
 8007eba:	fb03 f202 	mul.w	r2, r3, r2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec8:	661a      	str	r2, [r3, #96]	; 0x60
 8007eca:	e031      	b.n	8007f30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d11d      	bne.n	8007f10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed8:	041b      	lsls	r3, r3, #16
 8007eda:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee2:	0c1b      	lsrs	r3, r3, #16
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	029a      	lsls	r2, r3, #10
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f04:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	661a      	str	r2, [r3, #96]	; 0x60
 8007f0e:	e00f      	b.n	8007f30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a58      	ldr	r2, [pc, #352]	; (8008078 <HAL_SD_GetCardCSD+0x344>)
 8007f16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e09d      	b.n	800806c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f34:	0b9b      	lsrs	r3, r3, #14
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f46:	09db      	lsrs	r3, r3, #7
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f68:	0fdb      	lsrs	r3, r3, #31
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f74:	0f5b      	lsrs	r3, r3, #29
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 0303 	and.w	r3, r3, #3
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f86:	0e9b      	lsrs	r3, r3, #26
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f98:	0d9b      	lsrs	r3, r3, #22
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007faa:	0d5b      	lsrs	r3, r3, #21
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fda:	0bdb      	lsrs	r3, r3, #15
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	0b9b      	lsrs	r3, r3, #14
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008002:	0b5b      	lsrs	r3, r3, #13
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	b2da      	uxtb	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	0b1b      	lsrs	r3, r3, #12
 8008018:	b2db      	uxtb	r3, r3
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	b2da      	uxtb	r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	0a9b      	lsrs	r3, r3, #10
 800802c:	b2db      	uxtb	r3, r3
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	b2da      	uxtb	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	0a1b      	lsrs	r3, r3, #8
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	b2da      	uxtb	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008052:	085b      	lsrs	r3, r3, #1
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800805a:	b2da      	uxtb	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2201      	movs	r2, #1
 8008066:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	004005ff 	.word	0x004005ff

0800807c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80080d4:	b5b0      	push	{r4, r5, r7, lr}
 80080d6:	b090      	sub	sp, #64	; 0x40
 80080d8:	af04      	add	r7, sp, #16
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2203      	movs	r2, #3
 80080e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d02e      	beq.n	8008152 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fa:	d106      	bne.n	800810a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
 8008108:	e029      	b.n	800815e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008110:	d10a      	bne.n	8008128 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fb46 	bl	80087a4 <SD_WideBus_Enable>
 8008118:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	639a      	str	r2, [r3, #56]	; 0x38
 8008126:	e01a      	b.n	800815e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fb83 	bl	800883a <SD_WideBus_Disable>
 8008134:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
 8008142:	e00c      	b.n	800815e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	639a      	str	r2, [r3, #56]	; 0x38
 8008150:	e005      	b.n	800815e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a35      	ldr	r2, [pc, #212]	; (8008240 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008174:	e042      	b.n	80081fc <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008176:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800817a:	f7fd ff5f 	bl	800603c <HAL_RCCEx_GetPeriphCLKFreq>
 800817e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	2b00      	cmp	r3, #0
 8008184:	d031      	beq.n	80081ea <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	3302      	adds	r3, #2
 80081a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	4a25      	ldr	r2, [pc, #148]	; (8008244 <HAL_SD_ConfigWideBusOperation+0x170>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d907      	bls.n	80081c4 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	4a24      	ldr	r2, [pc, #144]	; (8008248 <HAL_SD_ConfigWideBusOperation+0x174>)
 80081b8:	fba2 2303 	umull	r2, r3, r2, r3
 80081bc:	0ddb      	lsrs	r3, r3, #23
 80081be:	3b02      	subs	r3, #2
 80081c0:	623b      	str	r3, [r7, #32]
 80081c2:	e002      	b.n	80081ca <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681d      	ldr	r5, [r3, #0]
 80081ce:	466c      	mov	r4, sp
 80081d0:	f107 0318 	add.w	r3, r7, #24
 80081d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081dc:	f107 030c 	add.w	r3, r7, #12
 80081e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 fce4 	bl	8008bb0 <SDMMC_Init>
 80081e8:	e008      	b.n	80081fc <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fdb1 	bl	8008d6c <SDMMC_CmdBlockLength>
 800820a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800820c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00c      	beq.n	800822c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a0a      	ldr	r2, [pc, #40]	; (8008240 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8008218:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	431a      	orrs	r2, r3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008238:	4618      	mov	r0, r3
 800823a:	3730      	adds	r7, #48	; 0x30
 800823c:	46bd      	mov	sp, r7
 800823e:	bdb0      	pop	{r4, r5, r7, pc}
 8008240:	004005ff 	.word	0x004005ff
 8008244:	017d7840 	.word	0x017d7840
 8008248:	55e63b89 	.word	0x55e63b89

0800824c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008258:	f107 030c 	add.w	r3, r7, #12
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa78 	bl	8008754 <SD_SendStatus>
 8008264:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	0a5b      	lsrs	r3, r3, #9
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008282:	693b      	ldr	r3, [r7, #16]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008298:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80082aa:	bf00      	nop
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c8:	2b82      	cmp	r3, #130	; 0x82
 80082ca:	d111      	bne.n	80082f0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 fdf5 	bl	8008ec0 <SDMMC_CmdStopTransfer>
 80082d6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d008      	beq.n	80082f0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	431a      	orrs	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f7ff fd18 	bl	8007d20 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0208 	bic.w	r2, r2, #8
 80082fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f240 523a 	movw	r2, #1338	; 0x53a
 8008308:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f002 fcf7 	bl	800ad0c <HAL_SD_RxCpltCallback>
#endif
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008344:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d002      	beq.n	8008352 <SD_DMAError+0x2a>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d12d      	bne.n	80083ae <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a19      	ldr	r2, [pc, #100]	; (80083bc <SD_DMAError+0x94>)
 8008358:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008368:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8008376:	6978      	ldr	r0, [r7, #20]
 8008378:	f7ff ff68 	bl	800824c <HAL_SD_GetCardState>
 800837c:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	2b06      	cmp	r3, #6
 8008382:	d002      	beq.n	800838a <SD_DMAError+0x62>
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b05      	cmp	r3, #5
 8008388:	d10a      	bne.n	80083a0 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fd96 	bl	8008ec0 <SDMMC_CmdStopTransfer>
 8008394:	4602      	mov	r2, r0
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839a:	431a      	orrs	r2, r3
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2200      	movs	r2, #0
 80083ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80083ae:	6978      	ldr	r0, [r7, #20]
 80083b0:	f7ff fcb6 	bl	8007d20 <HAL_SD_ErrorCallback>
#endif
}
 80083b4:	bf00      	nop
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	004005ff 	.word	0x004005ff

080083c0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083cc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7ff ff37 	bl	800824c <HAL_SD_GetCardState>
 80083de:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b06      	cmp	r3, #6
 80083f2:	d002      	beq.n	80083fa <SD_DMATxAbort+0x3a>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	d10a      	bne.n	8008410 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fd5e 	bl	8008ec0 <SDMMC_CmdStopTransfer>
 8008404:	4602      	mov	r2, r0
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	431a      	orrs	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f002 fc63 	bl	800ace4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800841e:	e002      	b.n	8008426 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7ff fc7d 	bl	8007d20 <HAL_SD_ErrorCallback>
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f240 523a 	movw	r2, #1338	; 0x53a
 8008444:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7ff ff00 	bl	800824c <HAL_SD_GetCardState>
 800844c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b06      	cmp	r3, #6
 8008460:	d002      	beq.n	8008468 <SD_DMARxAbort+0x3a>
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b05      	cmp	r3, #5
 8008466:	d10a      	bne.n	800847e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fd27 	bl	8008ec0 <SDMMC_CmdStopTransfer>
 8008472:	4602      	mov	r2, r0
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	431a      	orrs	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f002 fc2c 	bl	800ace4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800848c:	e002      	b.n	8008494 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7ff fc46 	bl	8007d20 <HAL_SD_ErrorCallback>
}
 8008494:	bf00      	nop
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800849c:	b5b0      	push	{r4, r5, r7, lr}
 800849e:	b094      	sub	sp, #80	; 0x50
 80084a0:	af04      	add	r7, sp, #16
 80084a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80084a4:	2301      	movs	r3, #1
 80084a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fbd9 	bl	8008c64 <SDMMC_GetPowerState>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d102      	bne.n	80084be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80084bc:	e0b8      	b.n	8008630 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d02f      	beq.n	8008526 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fe02 	bl	80090d4 <SDMMC_CmdSendCID>
 80084d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <SD_InitCard+0x40>
    {
      return errorstate;
 80084d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084da:	e0a9      	b.n	8008630 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fc03 	bl	8008cee <SDMMC_GetResponse>
 80084e8:	4602      	mov	r2, r0
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2104      	movs	r1, #4
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fbfa 	bl	8008cee <SDMMC_GetResponse>
 80084fa:	4602      	mov	r2, r0
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2108      	movs	r1, #8
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fbf1 	bl	8008cee <SDMMC_GetResponse>
 800850c:	4602      	mov	r2, r0
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	210c      	movs	r1, #12
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fbe8 	bl	8008cee <SDMMC_GetResponse>
 800851e:	4602      	mov	r2, r0
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800852a:	2b03      	cmp	r3, #3
 800852c:	d00d      	beq.n	800854a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f107 020e 	add.w	r2, r7, #14
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fe08 	bl	800914e <SDMMC_CmdSetRelAdd>
 800853e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <SD_InitCard+0xae>
    {
      return errorstate;
 8008546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008548:	e072      	b.n	8008630 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854e:	2b03      	cmp	r3, #3
 8008550:	d036      	beq.n	80085c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008552:	89fb      	ldrh	r3, [r7, #14]
 8008554:	461a      	mov	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008562:	041b      	lsls	r3, r3, #16
 8008564:	4619      	mov	r1, r3
 8008566:	4610      	mov	r0, r2
 8008568:	f000 fdd2 	bl	8009110 <SDMMC_CmdSendCSD>
 800856c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800856e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	e05b      	b.n	8008630 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2100      	movs	r1, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fbb5 	bl	8008cee <SDMMC_GetResponse>
 8008584:	4602      	mov	r2, r0
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2104      	movs	r1, #4
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fbac 	bl	8008cee <SDMMC_GetResponse>
 8008596:	4602      	mov	r2, r0
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2108      	movs	r1, #8
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fba3 	bl	8008cee <SDMMC_GetResponse>
 80085a8:	4602      	mov	r2, r0
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	210c      	movs	r1, #12
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fb9a 	bl	8008cee <SDMMC_GetResponse>
 80085ba:	4602      	mov	r2, r0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2104      	movs	r1, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fb91 	bl	8008cee <SDMMC_GetResponse>
 80085cc:	4603      	mov	r3, r0
 80085ce:	0d1a      	lsrs	r2, r3, #20
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085d4:	f107 0310 	add.w	r3, r7, #16
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7ff fbaa 	bl	8007d34 <HAL_SD_GetCardCSD>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085ea:	e021      	b.n	8008630 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6819      	ldr	r1, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f4:	041b      	lsls	r3, r3, #16
 80085f6:	2200      	movs	r2, #0
 80085f8:	461c      	mov	r4, r3
 80085fa:	4615      	mov	r5, r2
 80085fc:	4622      	mov	r2, r4
 80085fe:	462b      	mov	r3, r5
 8008600:	4608      	mov	r0, r1
 8008602:	f000 fc7f 	bl	8008f04 <SDMMC_CmdSelDesel>
 8008606:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <SD_InitCard+0x176>
  {
    return errorstate;
 800860e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008610:	e00e      	b.n	8008630 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681d      	ldr	r5, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	466c      	mov	r4, sp
 800861a:	f103 0210 	add.w	r2, r3, #16
 800861e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008624:	3304      	adds	r3, #4
 8008626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008628:	4628      	mov	r0, r5
 800862a:	f000 fac1 	bl	8008bb0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3740      	adds	r7, #64	; 0x40
 8008634:	46bd      	mov	sp, r7
 8008636:	bdb0      	pop	{r4, r5, r7, pc}

08008638 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	2300      	movs	r3, #0
 800864a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fc7a 	bl	8008f4a <SDMMC_CmdGoIdleState>
 8008656:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <SD_PowerON+0x2a>
  {
    return errorstate;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	e072      	b.n	8008748 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fc8d 	bl	8008f86 <SDMMC_CmdOperCond>
 800866c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00d      	beq.n	8008690 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fc63 	bl	8008f4a <SDMMC_CmdGoIdleState>
 8008684:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <SD_PowerON+0x5e>
    {
      return errorstate;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	e05b      	b.n	8008748 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800869a:	2b01      	cmp	r3, #1
 800869c:	d137      	bne.n	800870e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fc8d 	bl	8008fc4 <SDMMC_CmdAppCommand>
 80086aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d02d      	beq.n	800870e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086b6:	e047      	b.n	8008748 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fc80 	bl	8008fc4 <SDMMC_CmdAppCommand>
 80086c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	e03b      	b.n	8008748 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	491e      	ldr	r1, [pc, #120]	; (8008750 <SD_PowerON+0x118>)
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fc96 	bl	8009008 <SDMMC_CmdAppOperCommand>
 80086dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086e8:	e02e      	b.n	8008748 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fafc 	bl	8008cee <SDMMC_GetResponse>
 80086f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	0fdb      	lsrs	r3, r3, #31
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <SD_PowerON+0xcc>
 8008700:	2301      	movs	r3, #1
 8008702:	e000      	b.n	8008706 <SD_PowerON+0xce>
 8008704:	2300      	movs	r3, #0
 8008706:	613b      	str	r3, [r7, #16]

    count++;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	3301      	adds	r3, #1
 800870c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008714:	4293      	cmp	r3, r2
 8008716:	d802      	bhi.n	800871e <SD_PowerON+0xe6>
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0cc      	beq.n	80086b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008724:	4293      	cmp	r3, r2
 8008726:	d902      	bls.n	800872e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800872c:	e00c      	b.n	8008748 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	645a      	str	r2, [r3, #68]	; 0x44
 800873e:	e002      	b.n	8008746 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	c1100000 	.word	0xc1100000

08008754 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d102      	bne.n	800876a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008764:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008768:	e018      	b.n	800879c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008772:	041b      	lsls	r3, r3, #16
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f000 fd0a 	bl	8009190 <SDMMC_CmdSendStatus>
 800877c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	e009      	b.n	800879c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f000 faad 	bl	8008cee <SDMMC_GetResponse>
 8008794:	4602      	mov	r2, r0
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	2300      	movs	r3, #0
 80087b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2100      	movs	r1, #0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f000 fa97 	bl	8008cee <SDMMC_GetResponse>
 80087c0:	4603      	mov	r3, r0
 80087c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087ca:	d102      	bne.n	80087d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087d0:	e02f      	b.n	8008832 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087d2:	f107 030c 	add.w	r3, r7, #12
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f879 	bl	80088d0 <SD_FindSCR>
 80087de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	e023      	b.n	8008832 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d01c      	beq.n	800882e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087fc:	041b      	lsls	r3, r3, #16
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f000 fbdf 	bl	8008fc4 <SDMMC_CmdAppCommand>
 8008806:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	e00f      	b.n	8008832 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2102      	movs	r1, #2
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fc18 	bl	800904e <SDMMC_CmdBusWidth>
 800881e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	e003      	b.n	8008832 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800882a:	2300      	movs	r3, #0
 800882c:	e001      	b.n	8008832 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800882e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b086      	sub	sp, #24
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	2300      	movs	r3, #0
 8008848:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fa4c 	bl	8008cee <SDMMC_GetResponse>
 8008856:	4603      	mov	r3, r0
 8008858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008860:	d102      	bne.n	8008868 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008866:	e02f      	b.n	80088c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008868:	f107 030c 	add.w	r3, r7, #12
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f82e 	bl	80088d0 <SD_FindSCR>
 8008874:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	e023      	b.n	80088c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d01c      	beq.n	80088c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	4619      	mov	r1, r3
 8008896:	4610      	mov	r0, r2
 8008898:	f000 fb94 	bl	8008fc4 <SDMMC_CmdAppCommand>
 800889c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	e00f      	b.n	80088c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2100      	movs	r1, #0
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fbcd 	bl	800904e <SDMMC_CmdBusWidth>
 80088b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	e003      	b.n	80088c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e001      	b.n	80088c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088d0:	b590      	push	{r4, r7, lr}
 80088d2:	b08f      	sub	sp, #60	; 0x3c
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088da:	f7f9 fd1f 	bl	800231c <HAL_GetTick>
 80088de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80088e0:	2300      	movs	r3, #0
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80088e4:	2300      	movs	r3, #0
 80088e6:	60bb      	str	r3, [r7, #8]
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2108      	movs	r1, #8
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 fa38 	bl	8008d6c <SDMMC_CmdBlockLength>
 80088fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	e0a9      	b.n	8008a5c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008910:	041b      	lsls	r3, r3, #16
 8008912:	4619      	mov	r1, r3
 8008914:	4610      	mov	r0, r2
 8008916:	f000 fb55 	bl	8008fc4 <SDMMC_CmdAppCommand>
 800891a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	e09a      	b.n	8008a5c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008926:	f04f 33ff 	mov.w	r3, #4294967295
 800892a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800892c:	2308      	movs	r3, #8
 800892e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008930:	2330      	movs	r3, #48	; 0x30
 8008932:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008934:	2302      	movs	r3, #2
 8008936:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008938:	2300      	movs	r3, #0
 800893a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800893c:	2301      	movs	r3, #1
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f107 0210 	add.w	r2, r7, #16
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f9e2 	bl	8008d14 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fb9c 	bl	8009092 <SDMMC_CmdSendSCR>
 800895a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	2b00      	cmp	r3, #0
 8008960:	d022      	beq.n	80089a8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	e07a      	b.n	8008a5c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00e      	beq.n	8008992 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6819      	ldr	r1, [r3, #0]
 8008978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	f107 0208 	add.w	r2, r7, #8
 8008980:	18d4      	adds	r4, r2, r3
 8008982:	4608      	mov	r0, r1
 8008984:	f000 f941 	bl	8008c0a <SDMMC_ReadFIFO>
 8008988:	4603      	mov	r3, r0
 800898a:	6023      	str	r3, [r4, #0]
      index++;
 800898c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898e:	3301      	adds	r3, #1
 8008990:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008992:	f7f9 fcc3 	bl	800231c <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a0:	d102      	bne.n	80089a8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089a6:	e059      	b.n	8008a5c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ae:	f240 432a 	movw	r3, #1066	; 0x42a
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0d6      	beq.n	8008966 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089be:	f003 0308 	and.w	r3, r3, #8
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2208      	movs	r2, #8
 80089cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089ce:	2308      	movs	r3, #8
 80089d0:	e044      	b.n	8008a5c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d005      	beq.n	80089ec <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2202      	movs	r2, #2
 80089e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089e8:	2302      	movs	r3, #2
 80089ea:	e037      	b.n	8008a5c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d005      	beq.n	8008a06 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2220      	movs	r2, #32
 8008a00:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a02:	2320      	movs	r3, #32
 8008a04:	e02a      	b.n	8008a5c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	061a      	lsls	r2, r3, #24
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a1c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	0a1b      	lsrs	r3, r3, #8
 8008a22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a26:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	0e1b      	lsrs	r3, r3, #24
 8008a2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	601a      	str	r2, [r3, #0]
    scr++;
 8008a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a34:	3304      	adds	r3, #4
 8008a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	061a      	lsls	r2, r3, #24
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a44:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	0a1b      	lsrs	r3, r3, #8
 8008a4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a4e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	0e1b      	lsrs	r3, r3, #24
 8008a54:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	373c      	adds	r7, #60	; 0x3c
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd90      	pop	{r4, r7, pc}

08008a64 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a70:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d03f      	beq.n	8008afe <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008a7e:	2300      	movs	r3, #0
 8008a80:	617b      	str	r3, [r7, #20]
 8008a82:	e033      	b.n	8008aec <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 f8be 	bl	8008c0a <SDMMC_ReadFIFO>
 8008a8e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	0a1b      	lsrs	r3, r3, #8
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	0c1b      	lsrs	r3, r3, #16
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	0e1b      	lsrs	r3, r3, #24
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3301      	adds	r3, #1
 8008ade:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2b07      	cmp	r3, #7
 8008af0:	d9c8      	bls.n	8008a84 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008afe:	bf00      	nop
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b086      	sub	sp, #24
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d043      	beq.n	8008ba8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	e037      	b.n	8008b96 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	021a      	lsls	r2, r3, #8
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	041a      	lsls	r2, r3, #16
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	061a      	lsls	r2, r3, #24
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f107 0208 	add.w	r2, r7, #8
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f84a 	bl	8008c24 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	3301      	adds	r3, #1
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b07      	cmp	r3, #7
 8008b9a:	d9c4      	bls.n	8008b26 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008ba8:	bf00      	nop
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008bb0:	b084      	sub	sp, #16
 8008bb2:	b480      	push	{r7}
 8008bb4:	b085      	sub	sp, #20
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	f107 001c 	add.w	r0, r7, #28
 8008bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008bce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008bd2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008bd6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008bda:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008bde:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008bee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	b004      	add	sp, #16
 8008c08:	4770      	bx	lr

08008c0a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b083      	sub	sp, #12
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2203      	movs	r2, #3
 8008c52:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008c54:	2002      	movs	r0, #2
 8008c56:	f7f9 fb6d 	bl	8002334 <HAL_Delay>

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0303 	and.w	r3, r3, #3
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ca4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008caa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008cba:	f023 030f 	bic.w	r3, r3, #15
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	b2db      	uxtb	r3, r3
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3314      	adds	r3, #20
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	4413      	add	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d3a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d40:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d52:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0

}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d7a:	2310      	movs	r3, #16
 8008d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d7e:	2340      	movs	r3, #64	; 0x40
 8008d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d82:	2300      	movs	r3, #0
 8008d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d8c:	f107 0308 	add.w	r3, r7, #8
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff ff74 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d9c:	2110      	movs	r1, #16
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fa18 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008da6:	69fb      	ldr	r3, [r7, #28]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3720      	adds	r7, #32
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b088      	sub	sp, #32
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008dbe:	2311      	movs	r3, #17
 8008dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dc2:	2340      	movs	r3, #64	; 0x40
 8008dc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dd0:	f107 0308 	add.w	r3, r7, #8
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff ff52 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de0:	2111      	movs	r1, #17
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f9f6 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dea:	69fb      	ldr	r3, [r7, #28]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3720      	adds	r7, #32
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b088      	sub	sp, #32
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e02:	2312      	movs	r3, #18
 8008e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e06:	2340      	movs	r3, #64	; 0x40
 8008e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e14:	f107 0308 	add.w	r3, r7, #8
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff ff30 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e24:	2112      	movs	r1, #18
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f9d4 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3720      	adds	r7, #32
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e46:	2318      	movs	r3, #24
 8008e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e4a:	2340      	movs	r3, #64	; 0x40
 8008e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff ff0e 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e68:	2118      	movs	r1, #24
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f9b2 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e72:	69fb      	ldr	r3, [r7, #28]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008e8a:	2319      	movs	r3, #25
 8008e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e8e:	2340      	movs	r3, #64	; 0x40
 8008e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e92:	2300      	movs	r3, #0
 8008e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e9c:	f107 0308 	add.w	r3, r7, #8
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff feec 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eac:	2119      	movs	r1, #25
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f990 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ecc:	230c      	movs	r3, #12
 8008ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ed0:	2340      	movs	r3, #64	; 0x40
 8008ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008edc:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ede:	f107 0308 	add.w	r3, r7, #8
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff fecb 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008eea:	4a05      	ldr	r2, [pc, #20]	; (8008f00 <SDMMC_CmdStopTransfer+0x40>)
 8008eec:	210c      	movs	r1, #12
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f970 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008ef4:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3720      	adds	r7, #32
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	05f5e100 	.word	0x05f5e100

08008f04 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08a      	sub	sp, #40	; 0x28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f14:	2307      	movs	r3, #7
 8008f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f18:	2340      	movs	r3, #64	; 0x40
 8008f1a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f24:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f26:	f107 0310 	add.w	r3, r7, #16
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f7ff fea7 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f36:	2107      	movs	r1, #7
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f94b 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008f3e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3728      	adds	r7, #40	; 0x28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b088      	sub	sp, #32
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f68:	f107 0308 	add.w	r3, r7, #8
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff fe86 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fb65 	bl	8009644 <SDMMC_GetCmdError>
 8008f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3720      	adds	r7, #32
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b088      	sub	sp, #32
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008f8e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008f94:	2308      	movs	r3, #8
 8008f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f98:	2340      	movs	r3, #64	; 0x40
 8008f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fa6:	f107 0308 	add.w	r3, r7, #8
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff fe67 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 faf8 	bl	80095a8 <SDMMC_GetCmdResp7>
 8008fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fba:	69fb      	ldr	r3, [r7, #28]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3720      	adds	r7, #32
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fd2:	2337      	movs	r3, #55	; 0x37
 8008fd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fd6:	2340      	movs	r3, #64	; 0x40
 8008fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fe4:	f107 0308 	add.w	r3, r7, #8
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff fe48 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff4:	2137      	movs	r1, #55	; 0x37
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f8ec 	bl	80091d4 <SDMMC_GetCmdResp1>
 8008ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3720      	adds	r7, #32
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800901c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800901e:	2329      	movs	r3, #41	; 0x29
 8009020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009022:	2340      	movs	r3, #64	; 0x40
 8009024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800902a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800902e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009030:	f107 0308 	add.w	r3, r7, #8
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7ff fe22 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f9ff 	bl	8009440 <SDMMC_GetCmdResp3>
 8009042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009044:	69fb      	ldr	r3, [r7, #28]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3720      	adds	r7, #32
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b088      	sub	sp, #32
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800905c:	2306      	movs	r3, #6
 800905e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009060:	2340      	movs	r3, #64	; 0x40
 8009062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009064:	2300      	movs	r3, #0
 8009066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800906c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800906e:	f107 0308 	add.w	r3, r7, #8
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff fe03 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800907a:	f241 3288 	movw	r2, #5000	; 0x1388
 800907e:	2106      	movs	r1, #6
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f8a7 	bl	80091d4 <SDMMC_GetCmdResp1>
 8009086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009088:	69fb      	ldr	r3, [r7, #28]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3720      	adds	r7, #32
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b088      	sub	sp, #32
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800909e:	2333      	movs	r3, #51	; 0x33
 80090a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090a2:	2340      	movs	r3, #64	; 0x40
 80090a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff fde2 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80090bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c0:	2133      	movs	r1, #51	; 0x33
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f886 	bl	80091d4 <SDMMC_GetCmdResp1>
 80090c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ca:	69fb      	ldr	r3, [r7, #28]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3720      	adds	r7, #32
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80090e0:	2302      	movs	r3, #2
 80090e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80090e4:	23c0      	movs	r3, #192	; 0xc0
 80090e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090e8:	2300      	movs	r3, #0
 80090ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090f2:	f107 0308 	add.w	r3, r7, #8
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7ff fdc1 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f956 	bl	80093b0 <SDMMC_GetCmdResp2>
 8009104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009106:	69fb      	ldr	r3, [r7, #28]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3720      	adds	r7, #32
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800911e:	2309      	movs	r3, #9
 8009120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009122:	23c0      	movs	r3, #192	; 0xc0
 8009124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009126:	2300      	movs	r3, #0
 8009128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800912a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800912e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009130:	f107 0308 	add.w	r3, r7, #8
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff fda2 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f937 	bl	80093b0 <SDMMC_GetCmdResp2>
 8009142:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009144:	69fb      	ldr	r3, [r7, #28]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3720      	adds	r7, #32
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b088      	sub	sp, #32
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800915c:	2303      	movs	r3, #3
 800915e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009160:	2340      	movs	r3, #64	; 0x40
 8009162:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009164:	2300      	movs	r3, #0
 8009166:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800916c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800916e:	f107 0308 	add.w	r3, r7, #8
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff fd83 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	2103      	movs	r1, #3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f99c 	bl	80094bc <SDMMC_GetCmdResp6>
 8009184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009186:	69fb      	ldr	r3, [r7, #28]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3720      	adds	r7, #32
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800919e:	230d      	movs	r3, #13
 80091a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091a2:	2340      	movs	r3, #64	; 0x40
 80091a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091a6:	2300      	movs	r3, #0
 80091a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091b0:	f107 0308 	add.w	r3, r7, #8
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff fd62 	bl	8008c80 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80091bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091c0:	210d      	movs	r1, #13
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f806 	bl	80091d4 <SDMMC_GetCmdResp1>
 80091c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ca:	69fb      	ldr	r3, [r7, #28]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3720      	adds	r7, #32
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	460b      	mov	r3, r1
 80091de:	607a      	str	r2, [r7, #4]
 80091e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80091e2:	4b70      	ldr	r3, [pc, #448]	; (80093a4 <SDMMC_GetCmdResp1+0x1d0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a70      	ldr	r2, [pc, #448]	; (80093a8 <SDMMC_GetCmdResp1+0x1d4>)
 80091e8:	fba2 2303 	umull	r2, r3, r2, r3
 80091ec:	0a5a      	lsrs	r2, r3, #9
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	fb02 f303 	mul.w	r3, r2, r3
 80091f4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	1e5a      	subs	r2, r3, #1
 80091fa:	61fa      	str	r2, [r7, #28]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009204:	e0c9      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0ef      	beq.n	80091f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1ea      	bne.n	80091f6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2204      	movs	r2, #4
 8009230:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009232:	2304      	movs	r3, #4
 8009234:	e0b1      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009248:	2301      	movs	r3, #1
 800924a:	e0a6      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	22c5      	movs	r2, #197	; 0xc5
 8009250:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f7ff fd3e 	bl	8008cd4 <SDMMC_GetCommandResponse>
 8009258:	4603      	mov	r3, r0
 800925a:	461a      	mov	r2, r3
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	4293      	cmp	r3, r2
 8009260:	d001      	beq.n	8009266 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009262:	2301      	movs	r3, #1
 8009264:	e099      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009266:	2100      	movs	r1, #0
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fd40 	bl	8008cee <SDMMC_GetResponse>
 800926e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	4b4e      	ldr	r3, [pc, #312]	; (80093ac <SDMMC_GetCmdResp1+0x1d8>)
 8009274:	4013      	ands	r3, r2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800927a:	2300      	movs	r3, #0
 800927c:	e08d      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	da02      	bge.n	800928a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009288:	e087      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009294:	2340      	movs	r3, #64	; 0x40
 8009296:	e080      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	e079      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b4:	e071      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80092c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092c4:	e069      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80092d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092d4:	e061      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80092e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092e4:	e059      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092f4:	e051      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009304:	e049      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009314:	e041      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009324:	e039      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009334:	e031      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009344:	e029      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009354:	e021      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009360:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009364:	e019      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009370:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009374:	e011      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009380:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009384:	e009      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f003 0308 	and.w	r3, r3, #8
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009390:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009394:	e001      	b.n	800939a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800939a:	4618      	mov	r0, r3
 800939c:	3720      	adds	r7, #32
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	20000000 	.word	0x20000000
 80093a8:	10624dd3 	.word	0x10624dd3
 80093ac:	fdffe008 	.word	0xfdffe008

080093b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093b8:	4b1f      	ldr	r3, [pc, #124]	; (8009438 <SDMMC_GetCmdResp2+0x88>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a1f      	ldr	r2, [pc, #124]	; (800943c <SDMMC_GetCmdResp2+0x8c>)
 80093be:	fba2 2303 	umull	r2, r3, r2, r3
 80093c2:	0a5b      	lsrs	r3, r3, #9
 80093c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c8:	fb02 f303 	mul.w	r3, r2, r3
 80093cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1e5a      	subs	r2, r3, #1
 80093d2:	60fa      	str	r2, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093dc:	e026      	b.n	800942c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0ef      	beq.n	80093ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1ea      	bne.n	80093ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2204      	movs	r2, #4
 8009408:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800940a:	2304      	movs	r3, #4
 800940c:	e00e      	b.n	800942c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009420:	2301      	movs	r3, #1
 8009422:	e003      	b.n	800942c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	22c5      	movs	r2, #197	; 0xc5
 8009428:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	20000000 	.word	0x20000000
 800943c:	10624dd3 	.word	0x10624dd3

08009440 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009448:	4b1a      	ldr	r3, [pc, #104]	; (80094b4 <SDMMC_GetCmdResp3+0x74>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1a      	ldr	r2, [pc, #104]	; (80094b8 <SDMMC_GetCmdResp3+0x78>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	0a5b      	lsrs	r3, r3, #9
 8009454:	f241 3288 	movw	r2, #5000	; 0x1388
 8009458:	fb02 f303 	mul.w	r3, r2, r3
 800945c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	1e5a      	subs	r2, r3, #1
 8009462:	60fa      	str	r2, [r7, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d102      	bne.n	800946e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800946c:	e01b      	b.n	80094a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009472:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0ef      	beq.n	800945e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1ea      	bne.n	800945e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2204      	movs	r2, #4
 8009498:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800949a:	2304      	movs	r3, #4
 800949c:	e003      	b.n	80094a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	22c5      	movs	r2, #197	; 0xc5
 80094a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20000000 	.word	0x20000000
 80094b8:	10624dd3 	.word	0x10624dd3

080094bc <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	460b      	mov	r3, r1
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094ca:	4b35      	ldr	r3, [pc, #212]	; (80095a0 <SDMMC_GetCmdResp6+0xe4>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a35      	ldr	r2, [pc, #212]	; (80095a4 <SDMMC_GetCmdResp6+0xe8>)
 80094d0:	fba2 2303 	umull	r2, r3, r2, r3
 80094d4:	0a5b      	lsrs	r3, r3, #9
 80094d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094da:	fb02 f303 	mul.w	r3, r2, r3
 80094de:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	1e5a      	subs	r2, r3, #1
 80094e4:	61fa      	str	r2, [r7, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d102      	bne.n	80094f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094ee:	e052      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d0ef      	beq.n	80094e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1ea      	bne.n	80094e0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950e:	f003 0304 	and.w	r3, r3, #4
 8009512:	2b00      	cmp	r3, #0
 8009514:	d004      	beq.n	8009520 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2204      	movs	r2, #4
 800951a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800951c:	2304      	movs	r3, #4
 800951e:	e03a      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d004      	beq.n	8009536 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009532:	2301      	movs	r3, #1
 8009534:	e02f      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff fbcc 	bl	8008cd4 <SDMMC_GetCommandResponse>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	7afb      	ldrb	r3, [r7, #11]
 8009542:	4293      	cmp	r3, r2
 8009544:	d001      	beq.n	800954a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009546:	2301      	movs	r3, #1
 8009548:	e025      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	22c5      	movs	r2, #197	; 0xc5
 800954e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009550:	2100      	movs	r1, #0
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f7ff fbcb 	bl	8008cee <SDMMC_GetResponse>
 8009558:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d106      	bne.n	8009572 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	0c1b      	lsrs	r3, r3, #16
 8009568:	b29a      	uxth	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800956e:	2300      	movs	r3, #0
 8009570:	e011      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800957c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009580:	e009      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800958c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009590:	e001      	b.n	8009596 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009596:	4618      	mov	r0, r3
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20000000 	.word	0x20000000
 80095a4:	10624dd3 	.word	0x10624dd3

080095a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095b0:	4b22      	ldr	r3, [pc, #136]	; (800963c <SDMMC_GetCmdResp7+0x94>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a22      	ldr	r2, [pc, #136]	; (8009640 <SDMMC_GetCmdResp7+0x98>)
 80095b6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ba:	0a5b      	lsrs	r3, r3, #9
 80095bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c0:	fb02 f303 	mul.w	r3, r2, r3
 80095c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	1e5a      	subs	r2, r3, #1
 80095ca:	60fa      	str	r2, [r7, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095d4:	e02c      	b.n	8009630 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0ef      	beq.n	80095c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1ea      	bne.n	80095c6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d004      	beq.n	8009606 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2204      	movs	r2, #4
 8009600:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009602:	2304      	movs	r3, #4
 8009604:	e014      	b.n	8009630 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d004      	beq.n	800961c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009618:	2301      	movs	r3, #1
 800961a:	e009      	b.n	8009630 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009624:	2b00      	cmp	r3, #0
 8009626:	d002      	beq.n	800962e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2240      	movs	r2, #64	; 0x40
 800962c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800962e:	2300      	movs	r3, #0

}
 8009630:	4618      	mov	r0, r3
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	20000000 	.word	0x20000000
 8009640:	10624dd3 	.word	0x10624dd3

08009644 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800964c:	4b11      	ldr	r3, [pc, #68]	; (8009694 <SDMMC_GetCmdError+0x50>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a11      	ldr	r2, [pc, #68]	; (8009698 <SDMMC_GetCmdError+0x54>)
 8009652:	fba2 2303 	umull	r2, r3, r2, r3
 8009656:	0a5b      	lsrs	r3, r3, #9
 8009658:	f241 3288 	movw	r2, #5000	; 0x1388
 800965c:	fb02 f303 	mul.w	r3, r2, r3
 8009660:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	1e5a      	subs	r2, r3, #1
 8009666:	60fa      	str	r2, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800966c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009670:	e009      	b.n	8009686 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0f1      	beq.n	8009662 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	22c5      	movs	r2, #197	; 0xc5
 8009682:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000000 	.word	0x20000000
 8009698:	10624dd3 	.word	0x10624dd3

0800969c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800969c:	b084      	sub	sp, #16
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	f107 001c 	add.w	r0, r7, #28
 80096aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 fa1c 	bl	800aaf8 <USB_CoreReset>
 80096c0:	4603      	mov	r3, r0
 80096c2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80096c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d106      	bne.n	80096d8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	639a      	str	r2, [r3, #56]	; 0x38
 80096d6:	e005      	b.n	80096e4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096f0:	b004      	add	sp, #16
 80096f2:	4770      	bx	lr

080096f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	2b02      	cmp	r3, #2
 8009706:	d165      	bne.n	80097d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4a3e      	ldr	r2, [pc, #248]	; (8009804 <USB_SetTurnaroundTime+0x110>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d906      	bls.n	800971e <USB_SetTurnaroundTime+0x2a>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4a3d      	ldr	r2, [pc, #244]	; (8009808 <USB_SetTurnaroundTime+0x114>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d202      	bcs.n	800971e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009718:	230f      	movs	r3, #15
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	e05c      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	4a39      	ldr	r2, [pc, #228]	; (8009808 <USB_SetTurnaroundTime+0x114>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d306      	bcc.n	8009734 <USB_SetTurnaroundTime+0x40>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	4a38      	ldr	r2, [pc, #224]	; (800980c <USB_SetTurnaroundTime+0x118>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d202      	bcs.n	8009734 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800972e:	230e      	movs	r3, #14
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	e051      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	4a35      	ldr	r2, [pc, #212]	; (800980c <USB_SetTurnaroundTime+0x118>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d306      	bcc.n	800974a <USB_SetTurnaroundTime+0x56>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4a34      	ldr	r2, [pc, #208]	; (8009810 <USB_SetTurnaroundTime+0x11c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d202      	bcs.n	800974a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009744:	230d      	movs	r3, #13
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	e046      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	4a30      	ldr	r2, [pc, #192]	; (8009810 <USB_SetTurnaroundTime+0x11c>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d306      	bcc.n	8009760 <USB_SetTurnaroundTime+0x6c>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4a2f      	ldr	r2, [pc, #188]	; (8009814 <USB_SetTurnaroundTime+0x120>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d802      	bhi.n	8009760 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800975a:	230c      	movs	r3, #12
 800975c:	617b      	str	r3, [r7, #20]
 800975e:	e03b      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	4a2c      	ldr	r2, [pc, #176]	; (8009814 <USB_SetTurnaroundTime+0x120>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d906      	bls.n	8009776 <USB_SetTurnaroundTime+0x82>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	4a2b      	ldr	r2, [pc, #172]	; (8009818 <USB_SetTurnaroundTime+0x124>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d802      	bhi.n	8009776 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009770:	230b      	movs	r3, #11
 8009772:	617b      	str	r3, [r7, #20]
 8009774:	e030      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4a27      	ldr	r2, [pc, #156]	; (8009818 <USB_SetTurnaroundTime+0x124>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d906      	bls.n	800978c <USB_SetTurnaroundTime+0x98>
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	4a26      	ldr	r2, [pc, #152]	; (800981c <USB_SetTurnaroundTime+0x128>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d802      	bhi.n	800978c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009786:	230a      	movs	r3, #10
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	e025      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	4a23      	ldr	r2, [pc, #140]	; (800981c <USB_SetTurnaroundTime+0x128>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d906      	bls.n	80097a2 <USB_SetTurnaroundTime+0xae>
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	4a22      	ldr	r2, [pc, #136]	; (8009820 <USB_SetTurnaroundTime+0x12c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d202      	bcs.n	80097a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800979c:	2309      	movs	r3, #9
 800979e:	617b      	str	r3, [r7, #20]
 80097a0:	e01a      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	4a1e      	ldr	r2, [pc, #120]	; (8009820 <USB_SetTurnaroundTime+0x12c>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d306      	bcc.n	80097b8 <USB_SetTurnaroundTime+0xc4>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <USB_SetTurnaroundTime+0x130>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d802      	bhi.n	80097b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80097b2:	2308      	movs	r3, #8
 80097b4:	617b      	str	r3, [r7, #20]
 80097b6:	e00f      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4a1a      	ldr	r2, [pc, #104]	; (8009824 <USB_SetTurnaroundTime+0x130>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d906      	bls.n	80097ce <USB_SetTurnaroundTime+0xda>
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4a19      	ldr	r2, [pc, #100]	; (8009828 <USB_SetTurnaroundTime+0x134>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d202      	bcs.n	80097ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80097c8:	2307      	movs	r3, #7
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	e004      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80097ce:	2306      	movs	r3, #6
 80097d0:	617b      	str	r3, [r7, #20]
 80097d2:	e001      	b.n	80097d8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80097d4:	2309      	movs	r3, #9
 80097d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	029b      	lsls	r3, r3, #10
 80097ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80097f0:	431a      	orrs	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	00d8acbf 	.word	0x00d8acbf
 8009808:	00e4e1c0 	.word	0x00e4e1c0
 800980c:	00f42400 	.word	0x00f42400
 8009810:	01067380 	.word	0x01067380
 8009814:	011a499f 	.word	0x011a499f
 8009818:	01312cff 	.word	0x01312cff
 800981c:	014ca43f 	.word	0x014ca43f
 8009820:	016e3600 	.word	0x016e3600
 8009824:	01a6ab1f 	.word	0x01a6ab1f
 8009828:	01e84800 	.word	0x01e84800

0800982c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f043 0201 	orr.w	r2, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f023 0201 	bic.w	r2, r3, #1
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	2b01      	cmp	r3, #1
 8009890:	d115      	bne.n	80098be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800989e:	2001      	movs	r0, #1
 80098a0:	f7f8 fd48 	bl	8002334 <HAL_Delay>
      ms++;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3301      	adds	r3, #1
 80098a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f001 f8ab 	bl	800aa06 <USB_GetMode>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d01e      	beq.n	80098f4 <USB_SetCurrentMode+0x84>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b31      	cmp	r3, #49	; 0x31
 80098ba:	d9f0      	bls.n	800989e <USB_SetCurrentMode+0x2e>
 80098bc:	e01a      	b.n	80098f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098be:	78fb      	ldrb	r3, [r7, #3]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d115      	bne.n	80098f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098d0:	2001      	movs	r0, #1
 80098d2:	f7f8 fd2f 	bl	8002334 <HAL_Delay>
      ms++;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3301      	adds	r3, #1
 80098da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 f892 	bl	800aa06 <USB_GetMode>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d005      	beq.n	80098f4 <USB_SetCurrentMode+0x84>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b31      	cmp	r3, #49	; 0x31
 80098ec:	d9f0      	bls.n	80098d0 <USB_SetCurrentMode+0x60>
 80098ee:	e001      	b.n	80098f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e005      	b.n	8009900 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2b32      	cmp	r3, #50	; 0x32
 80098f8:	d101      	bne.n	80098fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e000      	b.n	8009900 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009908:	b084      	sub	sp, #16
 800990a:	b580      	push	{r7, lr}
 800990c:	b086      	sub	sp, #24
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009922:	2300      	movs	r3, #0
 8009924:	613b      	str	r3, [r7, #16]
 8009926:	e009      	b.n	800993c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	3340      	adds	r3, #64	; 0x40
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	4413      	add	r3, r2
 8009932:	2200      	movs	r2, #0
 8009934:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	3301      	adds	r3, #1
 800993a:	613b      	str	r3, [r7, #16]
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	2b0e      	cmp	r3, #14
 8009940:	d9f2      	bls.n	8009928 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d11c      	bne.n	8009982 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009956:	f043 0302 	orr.w	r3, r3, #2
 800995a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009960:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	e005      	b.n	800998e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009986:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009994:	461a      	mov	r2, r3
 8009996:	2300      	movs	r3, #0
 8009998:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800999a:	2103      	movs	r1, #3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f959 	bl	8009c54 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099a2:	2110      	movs	r1, #16
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f8f1 	bl	8009b8c <USB_FlushTxFifo>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d001      	beq.n	80099b4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f91d 	bl	8009bf4 <USB_FlushRxFifo>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ca:	461a      	mov	r2, r3
 80099cc:	2300      	movs	r3, #0
 80099ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d6:	461a      	mov	r2, r3
 80099d8:	2300      	movs	r3, #0
 80099da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	461a      	mov	r2, r3
 80099e4:	2300      	movs	r3, #0
 80099e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099e8:	2300      	movs	r3, #0
 80099ea:	613b      	str	r3, [r7, #16]
 80099ec:	e043      	b.n	8009a76 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a04:	d118      	bne.n	8009a38 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a18:	461a      	mov	r2, r3
 8009a1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	e013      	b.n	8009a4a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a34:	6013      	str	r3, [r2, #0]
 8009a36:	e008      	b.n	8009a4a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a44:	461a      	mov	r2, r3
 8009a46:	2300      	movs	r3, #0
 8009a48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a56:	461a      	mov	r2, r3
 8009a58:	2300      	movs	r3, #0
 8009a5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a68:	461a      	mov	r2, r3
 8009a6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	3301      	adds	r3, #1
 8009a74:	613b      	str	r3, [r7, #16]
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d3b7      	bcc.n	80099ee <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a7e:	2300      	movs	r3, #0
 8009a80:	613b      	str	r3, [r7, #16]
 8009a82:	e043      	b.n	8009b0c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a9a:	d118      	bne.n	8009ace <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10a      	bne.n	8009ab8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	e013      	b.n	8009ae0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009aca:	6013      	str	r3, [r2, #0]
 8009acc:	e008      	b.n	8009ae0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ada:	461a      	mov	r2, r3
 8009adc:	2300      	movs	r3, #0
 8009ade:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	015a      	lsls	r2, r3, #5
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aec:	461a      	mov	r2, r3
 8009aee:	2300      	movs	r3, #0
 8009af0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afe:	461a      	mov	r2, r3
 8009b00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	613b      	str	r3, [r7, #16]
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d3b7      	bcc.n	8009a84 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	f043 0210 	orr.w	r2, r3, #16
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699a      	ldr	r2, [r3, #24]
 8009b46:	4b10      	ldr	r3, [pc, #64]	; (8009b88 <USB_DevInit+0x280>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	f043 0208 	orr.w	r2, r3, #8
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d107      	bne.n	8009b76 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b6e:	f043 0304 	orr.w	r3, r3, #4
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3718      	adds	r7, #24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b82:	b004      	add	sp, #16
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	803c3800 	.word	0x803c3800

08009b8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	4a13      	ldr	r2, [pc, #76]	; (8009bf0 <USB_FlushTxFifo+0x64>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d901      	bls.n	8009bac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e01b      	b.n	8009be4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	daf2      	bge.n	8009b9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	019b      	lsls	r3, r3, #6
 8009bbc:	f043 0220 	orr.w	r2, r3, #32
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4a08      	ldr	r2, [pc, #32]	; (8009bf0 <USB_FlushTxFifo+0x64>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d901      	bls.n	8009bd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e006      	b.n	8009be4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	f003 0320 	and.w	r3, r3, #32
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	d0f0      	beq.n	8009bc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	00030d40 	.word	0x00030d40

08009bf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	3301      	adds	r3, #1
 8009c04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	4a11      	ldr	r2, [pc, #68]	; (8009c50 <USB_FlushRxFifo+0x5c>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d901      	bls.n	8009c12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e018      	b.n	8009c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	daf2      	bge.n	8009c00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2210      	movs	r2, #16
 8009c22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3301      	adds	r3, #1
 8009c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4a08      	ldr	r2, [pc, #32]	; (8009c50 <USB_FlushRxFifo+0x5c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d901      	bls.n	8009c36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e006      	b.n	8009c44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	f003 0310 	and.w	r3, r3, #16
 8009c3e:	2b10      	cmp	r3, #16
 8009c40:	d0f0      	beq.n	8009c24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	00030d40 	.word	0x00030d40

08009c54 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	68f9      	ldr	r1, [r7, #12]
 8009c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c74:	4313      	orrs	r3, r2
 8009c76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b087      	sub	sp, #28
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f003 0306 	and.w	r3, r3, #6
 8009c9e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d002      	beq.n	8009cac <USB_GetDevSpeed+0x26>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2b06      	cmp	r3, #6
 8009caa:	d102      	bne.n	8009cb2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009cac:	2302      	movs	r3, #2
 8009cae:	75fb      	strb	r3, [r7, #23]
 8009cb0:	e001      	b.n	8009cb6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009cb2:	230f      	movs	r3, #15
 8009cb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	371c      	adds	r7, #28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	785b      	ldrb	r3, [r3, #1]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d13a      	bne.n	8009d56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ce6:	69da      	ldr	r2, [r3, #28]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	68f9      	ldr	r1, [r7, #12]
 8009cfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	015a      	lsls	r2, r3, #5
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	4413      	add	r3, r2
 8009d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d155      	bne.n	8009dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	791b      	ldrb	r3, [r3, #4]
 8009d32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	059b      	lsls	r3, r3, #22
 8009d3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	0151      	lsls	r1, r2, #5
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	440a      	add	r2, r1
 8009d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	e036      	b.n	8009dc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5c:	69da      	ldr	r2, [r3, #28]
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	f003 030f 	and.w	r3, r3, #15
 8009d66:	2101      	movs	r1, #1
 8009d68:	fa01 f303 	lsl.w	r3, r1, r3
 8009d6c:	041b      	lsls	r3, r3, #16
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d74:	4313      	orrs	r3, r2
 8009d76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d11a      	bne.n	8009dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	791b      	ldrb	r3, [r3, #4]
 8009da8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009daa:	430b      	orrs	r3, r1
 8009dac:	4313      	orrs	r3, r2
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	0151      	lsls	r1, r2, #5
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	440a      	add	r2, r1
 8009db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
	...

08009dd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	785b      	ldrb	r3, [r3, #1]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d161      	bne.n	8009eb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	015a      	lsls	r2, r3, #5
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e06:	d11f      	bne.n	8009e48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	0151      	lsls	r1, r2, #5
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	440a      	add	r2, r1
 8009e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	015a      	lsls	r2, r3, #5
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	0151      	lsls	r1, r2, #5
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	440a      	add	r2, r1
 8009e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	f003 030f 	and.w	r3, r3, #15
 8009e58:	2101      	movs	r1, #1
 8009e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	43db      	mvns	r3, r3
 8009e62:	68f9      	ldr	r1, [r7, #12]
 8009e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e68:	4013      	ands	r3, r2
 8009e6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e72:	69da      	ldr	r2, [r3, #28]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 030f 	and.w	r3, r3, #15
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	43db      	mvns	r3, r3
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	0159      	lsls	r1, r3, #5
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	440b      	add	r3, r1
 8009ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4b35      	ldr	r3, [pc, #212]	; (8009f84 <USB_DeactivateEndpoint+0x1b0>)
 8009eae:	4013      	ands	r3, r2
 8009eb0:	600b      	str	r3, [r1, #0]
 8009eb2:	e060      	b.n	8009f76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009eca:	d11f      	bne.n	8009f0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	0151      	lsls	r1, r2, #5
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	440a      	add	r2, r1
 8009ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009eea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	0151      	lsls	r1, r2, #5
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	440a      	add	r2, r1
 8009f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	f003 030f 	and.w	r3, r3, #15
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f22:	041b      	lsls	r3, r3, #16
 8009f24:	43db      	mvns	r3, r3
 8009f26:	68f9      	ldr	r1, [r7, #12]
 8009f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f36:	69da      	ldr	r2, [r3, #28]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	f003 030f 	and.w	r3, r3, #15
 8009f40:	2101      	movs	r1, #1
 8009f42:	fa01 f303 	lsl.w	r3, r1, r3
 8009f46:	041b      	lsls	r3, r3, #16
 8009f48:	43db      	mvns	r3, r3
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f50:	4013      	ands	r3, r2
 8009f52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	0159      	lsls	r1, r3, #5
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	440b      	add	r3, r1
 8009f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <USB_DeactivateEndpoint+0x1b4>)
 8009f72:	4013      	ands	r3, r2
 8009f74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	ec337800 	.word	0xec337800
 8009f88:	eff37800 	.word	0xeff37800

08009f8c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	785b      	ldrb	r3, [r3, #1]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	f040 8128 	bne.w	800a1fa <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d132      	bne.n	800a018 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	0151      	lsls	r1, r2, #5
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	440a      	add	r2, r1
 8009fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	0151      	lsls	r1, r2, #5
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	440a      	add	r2, r1
 8009fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a010:	0cdb      	lsrs	r3, r3, #19
 800a012:	04db      	lsls	r3, r3, #19
 800a014:	6113      	str	r3, [r2, #16]
 800a016:	e092      	b.n	800a13e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	0151      	lsls	r1, r2, #5
 800a02a:	697a      	ldr	r2, [r7, #20]
 800a02c:	440a      	add	r2, r1
 800a02e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a032:	0cdb      	lsrs	r3, r3, #19
 800a034:	04db      	lsls	r3, r3, #19
 800a036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	0151      	lsls	r1, r2, #5
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	440a      	add	r2, r1
 800a04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a052:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a056:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a05a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d11a      	bne.n	800a098 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	691a      	ldr	r2, [r3, #16]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d903      	bls.n	800a076 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	689a      	ldr	r2, [r3, #8]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	0151      	lsls	r1, r2, #5
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	440a      	add	r2, r1
 800a08c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a094:	6113      	str	r3, [r2, #16]
 800a096:	e01b      	b.n	800a0d0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	6919      	ldr	r1, [r3, #16]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	440b      	add	r3, r1
 800a0b0:	1e59      	subs	r1, r3, #1
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0bc:	4b8d      	ldr	r3, [pc, #564]	; (800a2f4 <USB_EPStartXfer+0x368>)
 800a0be:	400b      	ands	r3, r1
 800a0c0:	6939      	ldr	r1, [r7, #16]
 800a0c2:	0148      	lsls	r0, r1, #5
 800a0c4:	6979      	ldr	r1, [r7, #20]
 800a0c6:	4401      	add	r1, r0
 800a0c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0dc:	691a      	ldr	r2, [r3, #16]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0e6:	6939      	ldr	r1, [r7, #16]
 800a0e8:	0148      	lsls	r0, r1, #5
 800a0ea:	6979      	ldr	r1, [r7, #20]
 800a0ec:	4401      	add	r1, r0
 800a0ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	791b      	ldrb	r3, [r3, #4]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d11f      	bne.n	800a13e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	0151      	lsls	r1, r2, #5
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	440a      	add	r2, r1
 800a114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a118:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a11c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	0151      	lsls	r1, r2, #5
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	440a      	add	r2, r1
 800a134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a13c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	440a      	add	r2, r1
 800a154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a158:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a15c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	791b      	ldrb	r3, [r3, #4]
 800a162:	2b01      	cmp	r3, #1
 800a164:	d015      	beq.n	800a192 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 8139 	beq.w	800a3e2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	f003 030f 	and.w	r3, r3, #15
 800a180:	2101      	movs	r1, #1
 800a182:	fa01 f303 	lsl.w	r3, r1, r3
 800a186:	6979      	ldr	r1, [r7, #20]
 800a188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a18c:	4313      	orrs	r3, r2
 800a18e:	634b      	str	r3, [r1, #52]	; 0x34
 800a190:	e127      	b.n	800a3e2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d110      	bne.n	800a1c4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	0151      	lsls	r1, r2, #5
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	440a      	add	r2, r1
 800a1b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	e00f      	b.n	800a1e4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1e2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	68d9      	ldr	r1, [r3, #12]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f9a6 	bl	800a544 <USB_WritePacket>
 800a1f8:	e0f3      	b.n	800a3e2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	4413      	add	r3, r2
 800a202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	0151      	lsls	r1, r2, #5
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	440a      	add	r2, r1
 800a210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a214:	0cdb      	lsrs	r3, r3, #19
 800a216:	04db      	lsls	r3, r3, #19
 800a218:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	015a      	lsls	r2, r3, #5
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	4413      	add	r3, r2
 800a222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	0151      	lsls	r1, r2, #5
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	440a      	add	r2, r1
 800a230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a234:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a238:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a23c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d12f      	bne.n	800a2a4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a268:	691a      	ldr	r2, [r3, #16]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a272:	6939      	ldr	r1, [r7, #16]
 800a274:	0148      	lsls	r0, r1, #5
 800a276:	6979      	ldr	r1, [r7, #20]
 800a278:	4401      	add	r1, r0
 800a27a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a27e:	4313      	orrs	r3, r2
 800a280:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	0151      	lsls	r1, r2, #5
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	440a      	add	r2, r1
 800a298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a29c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2a0:	6113      	str	r3, [r2, #16]
 800a2a2:	e061      	b.n	800a368 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d125      	bne.n	800a2f8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b8:	691a      	ldr	r2, [r3, #16]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2c2:	6939      	ldr	r1, [r7, #16]
 800a2c4:	0148      	lsls	r0, r1, #5
 800a2c6:	6979      	ldr	r1, [r7, #20]
 800a2c8:	4401      	add	r1, r0
 800a2ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	015a      	lsls	r2, r3, #5
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	0151      	lsls	r1, r2, #5
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	440a      	add	r2, r1
 800a2e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2f0:	6113      	str	r3, [r2, #16]
 800a2f2:	e039      	b.n	800a368 <USB_EPStartXfer+0x3dc>
 800a2f4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	691a      	ldr	r2, [r3, #16]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	4413      	add	r3, r2
 800a302:	1e5a      	subs	r2, r3, #1
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	fbb2 f3f3 	udiv	r3, r2, r3
 800a30c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	89fa      	ldrh	r2, [r7, #14]
 800a314:	fb03 f202 	mul.w	r2, r3, r2
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	015a      	lsls	r2, r3, #5
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	4413      	add	r3, r2
 800a324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a328:	691a      	ldr	r2, [r3, #16]
 800a32a:	89fb      	ldrh	r3, [r7, #14]
 800a32c:	04d9      	lsls	r1, r3, #19
 800a32e:	4b2f      	ldr	r3, [pc, #188]	; (800a3ec <USB_EPStartXfer+0x460>)
 800a330:	400b      	ands	r3, r1
 800a332:	6939      	ldr	r1, [r7, #16]
 800a334:	0148      	lsls	r0, r1, #5
 800a336:	6979      	ldr	r1, [r7, #20]
 800a338:	4401      	add	r1, r0
 800a33a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a33e:	4313      	orrs	r3, r2
 800a340:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34e:	691a      	ldr	r2, [r3, #16]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a358:	6939      	ldr	r1, [r7, #16]
 800a35a:	0148      	lsls	r0, r1, #5
 800a35c:	6979      	ldr	r1, [r7, #20]
 800a35e:	4401      	add	r1, r0
 800a360:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a364:	4313      	orrs	r3, r2
 800a366:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	791b      	ldrb	r3, [r3, #4]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d128      	bne.n	800a3c2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d110      	bne.n	800a3a2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	0151      	lsls	r1, r2, #5
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	440a      	add	r2, r1
 800a396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	e00f      	b.n	800a3c2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	0151      	lsls	r1, r2, #5
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	440a      	add	r2, r1
 800a3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3c0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	0151      	lsls	r1, r2, #5
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	440a      	add	r2, r1
 800a3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	1ff80000 	.word	0x1ff80000

0800a3f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d14a      	bne.n	800a4a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a426:	f040 8086 	bne.w	800a536 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	7812      	ldrb	r2, [r2, #0]
 800a43e:	0151      	lsls	r1, r2, #5
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	440a      	add	r2, r1
 800a444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a448:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a44c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	7812      	ldrb	r2, [r2, #0]
 800a462:	0151      	lsls	r1, r2, #5
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	440a      	add	r2, r1
 800a468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a46c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a470:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3301      	adds	r3, #1
 800a476:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a47e:	4293      	cmp	r3, r2
 800a480:	d902      	bls.n	800a488 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	75fb      	strb	r3, [r7, #23]
          break;
 800a486:	e056      	b.n	800a536 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	015a      	lsls	r2, r3, #5
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	4413      	add	r3, r2
 800a492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a49c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4a0:	d0e7      	beq.n	800a472 <USB_EPStopXfer+0x82>
 800a4a2:	e048      	b.n	800a536 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4bc:	d13b      	bne.n	800a536 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	7812      	ldrb	r2, [r2, #0]
 800a4d2:	0151      	lsls	r1, r2, #5
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	440a      	add	r2, r1
 800a4d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	7812      	ldrb	r2, [r2, #0]
 800a4f6:	0151      	lsls	r1, r2, #5
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	440a      	add	r2, r1
 800a4fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a504:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3301      	adds	r3, #1
 800a50a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a512:	4293      	cmp	r3, r2
 800a514:	d902      	bls.n	800a51c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	75fb      	strb	r3, [r7, #23]
          break;
 800a51a:	e00c      	b.n	800a536 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a534:	d0e7      	beq.n	800a506 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a536:	7dfb      	ldrb	r3, [r7, #23]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	371c      	adds	r7, #28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a544:	b480      	push	{r7}
 800a546:	b089      	sub	sp, #36	; 0x24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	4611      	mov	r1, r2
 800a550:	461a      	mov	r2, r3
 800a552:	460b      	mov	r3, r1
 800a554:	71fb      	strb	r3, [r7, #7]
 800a556:	4613      	mov	r3, r2
 800a558:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a562:	88bb      	ldrh	r3, [r7, #4]
 800a564:	3303      	adds	r3, #3
 800a566:	089b      	lsrs	r3, r3, #2
 800a568:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a56a:	2300      	movs	r3, #0
 800a56c:	61bb      	str	r3, [r7, #24]
 800a56e:	e018      	b.n	800a5a2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	031a      	lsls	r2, r3, #12
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	4413      	add	r3, r2
 800a578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a57c:	461a      	mov	r2, r3
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	3301      	adds	r3, #1
 800a588:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	3301      	adds	r3, #1
 800a58e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	3301      	adds	r3, #1
 800a594:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	3301      	adds	r3, #1
 800a59a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	61bb      	str	r3, [r7, #24]
 800a5a2:	69ba      	ldr	r2, [r7, #24]
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d3e2      	bcc.n	800a570 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3724      	adds	r7, #36	; 0x24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b08b      	sub	sp, #44	; 0x2c
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a5ce:	88fb      	ldrh	r3, [r7, #6]
 800a5d0:	089b      	lsrs	r3, r3, #2
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a5d6:	88fb      	ldrh	r3, [r7, #6]
 800a5d8:	f003 0303 	and.w	r3, r3, #3
 800a5dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a5de:	2300      	movs	r3, #0
 800a5e0:	623b      	str	r3, [r7, #32]
 800a5e2:	e014      	b.n	800a60e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	601a      	str	r2, [r3, #0]
    pDest++;
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	3301      	adds	r3, #1
 800a600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a604:	3301      	adds	r3, #1
 800a606:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	3301      	adds	r3, #1
 800a60c:	623b      	str	r3, [r7, #32]
 800a60e:	6a3a      	ldr	r2, [r7, #32]
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	429a      	cmp	r2, r3
 800a614:	d3e6      	bcc.n	800a5e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a616:	8bfb      	ldrh	r3, [r7, #30]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d01e      	beq.n	800a65a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a61c:	2300      	movs	r3, #0
 800a61e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a626:	461a      	mov	r2, r3
 800a628:	f107 0310 	add.w	r3, r7, #16
 800a62c:	6812      	ldr	r2, [r2, #0]
 800a62e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	b2db      	uxtb	r3, r3
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	fa22 f303 	lsr.w	r3, r2, r3
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	701a      	strb	r2, [r3, #0]
      i++;
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	3301      	adds	r3, #1
 800a646:	623b      	str	r3, [r7, #32]
      pDest++;
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	3301      	adds	r3, #1
 800a64c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a64e:	8bfb      	ldrh	r3, [r7, #30]
 800a650:	3b01      	subs	r3, #1
 800a652:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a654:	8bfb      	ldrh	r3, [r7, #30]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1ea      	bne.n	800a630 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	372c      	adds	r7, #44	; 0x2c
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	785b      	ldrb	r3, [r3, #1]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d12c      	bne.n	800a6de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	db12      	blt.n	800a6bc <USB_EPSetStall+0x54>
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00f      	beq.n	800a6bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	0151      	lsls	r1, r2, #5
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	440a      	add	r2, r1
 800a6b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a6ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	015a      	lsls	r2, r3, #5
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	0151      	lsls	r1, r2, #5
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	e02b      	b.n	800a736 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	db12      	blt.n	800a716 <USB_EPSetStall+0xae>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00f      	beq.n	800a716 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	0151      	lsls	r1, r2, #5
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	440a      	add	r2, r1
 800a70c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a710:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a714:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a734:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	785b      	ldrb	r3, [r3, #1]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d128      	bne.n	800a7b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	0151      	lsls	r1, r2, #5
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	440a      	add	r2, r1
 800a776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a77a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a77e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	791b      	ldrb	r3, [r3, #4]
 800a784:	2b03      	cmp	r3, #3
 800a786:	d003      	beq.n	800a790 <USB_EPClearStall+0x4c>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	791b      	ldrb	r3, [r3, #4]
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d138      	bne.n	800a802 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	0151      	lsls	r1, r2, #5
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	440a      	add	r2, r1
 800a7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	e027      	b.n	800a802 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	015a      	lsls	r2, r3, #5
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	0151      	lsls	r1, r2, #5
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	440a      	add	r2, r1
 800a7c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	791b      	ldrb	r3, [r3, #4]
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d003      	beq.n	800a7e2 <USB_EPClearStall+0x9e>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	791b      	ldrb	r3, [r3, #4]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d10f      	bne.n	800a802 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	0151      	lsls	r1, r2, #5
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	440a      	add	r2, r1
 800a7f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a800:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a82e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a832:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	011b      	lsls	r3, r3, #4
 800a840:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a844:	68f9      	ldr	r1, [r7, #12]
 800a846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a84a:	4313      	orrs	r3, r2
 800a84c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a876:	f023 0303 	bic.w	r3, r3, #3
 800a87a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a88a:	f023 0302 	bic.w	r3, r3, #2
 800a88e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b085      	sub	sp, #20
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8b8:	f023 0303 	bic.w	r3, r3, #3
 800a8bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8cc:	f043 0302 	orr.w	r3, r3, #2
 800a8d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	695b      	ldr	r3, [r3, #20]
 800a8ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a906:	b480      	push	{r7}
 800a908:	b085      	sub	sp, #20
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	4013      	ands	r3, r2
 800a928:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	0c1b      	lsrs	r3, r3, #16
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b085      	sub	sp, #20
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	4013      	ands	r3, r2
 800a95c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	b29b      	uxth	r3, r3
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a96e:	b480      	push	{r7}
 800a970:	b085      	sub	sp, #20
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	460b      	mov	r3, r1
 800a978:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a97e:	78fb      	ldrb	r3, [r7, #3]
 800a980:	015a      	lsls	r2, r3, #5
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	4013      	ands	r3, r2
 800a99a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a99c:	68bb      	ldr	r3, [r7, #8]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b087      	sub	sp, #28
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	f003 030f 	and.w	r3, r3, #15
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9da:	01db      	lsls	r3, r3, #7
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	371c      	adds	r7, #28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	695b      	ldr	r3, [r3, #20]
 800aa12:	f003 0301 	and.w	r3, r3, #1
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b085      	sub	sp, #20
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aa40:	f023 0307 	bic.w	r3, r3, #7
 800aa44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	333c      	adds	r3, #60	; 0x3c
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	4a1c      	ldr	r2, [pc, #112]	; (800aaf4 <USB_EP0_OutStart+0x8c>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d90a      	bls.n	800aa9e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa98:	d101      	bne.n	800aa9e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e024      	b.n	800aae8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aabc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aacc:	f043 0318 	orr.w	r3, r3, #24
 800aad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aae0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800aae4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	4f54300a 	.word	0x4f54300a

0800aaf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	3301      	adds	r3, #1
 800ab08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4a13      	ldr	r2, [pc, #76]	; (800ab5c <USB_CoreReset+0x64>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d901      	bls.n	800ab16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab12:	2303      	movs	r3, #3
 800ab14:	e01b      	b.n	800ab4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	daf2      	bge.n	800ab04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	f043 0201 	orr.w	r2, r3, #1
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3301      	adds	r3, #1
 800ab32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4a09      	ldr	r2, [pc, #36]	; (800ab5c <USB_CoreReset+0x64>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d901      	bls.n	800ab40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e006      	b.n	800ab4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	f003 0301 	and.w	r3, r3, #1
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d0f0      	beq.n	800ab2e <USB_CoreReset+0x36>

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	00030d40 	.word	0x00030d40

0800ab60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ab64:	4904      	ldr	r1, [pc, #16]	; (800ab78 <MX_FATFS_Init+0x18>)
 800ab66:	4805      	ldr	r0, [pc, #20]	; (800ab7c <MX_FATFS_Init+0x1c>)
 800ab68:	f005 fa44 	bl	800fff4 <FATFS_LinkDriver>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	461a      	mov	r2, r3
 800ab70:	4b03      	ldr	r3, [pc, #12]	; (800ab80 <MX_FATFS_Init+0x20>)
 800ab72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab74:	bf00      	nop
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	2000c234 	.word	0x2000c234
 800ab7c:	08015688 	.word	0x08015688
 800ab80:	2000c230 	.word	0x2000c230

0800ab84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ab84:	b480      	push	{r7}
 800ab86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ab88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ab9e:	f000 f8c6 	bl	800ad2e <BSP_SD_IsDetected>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d001      	beq.n	800abac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800aba8:	2302      	movs	r3, #2
 800abaa:	e012      	b.n	800abd2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800abac:	480b      	ldr	r0, [pc, #44]	; (800abdc <BSP_SD_Init+0x48>)
 800abae:	f7fc fcd7 	bl	8007560 <HAL_SD_Init>
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d109      	bne.n	800abd0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800abbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800abc0:	4806      	ldr	r0, [pc, #24]	; (800abdc <BSP_SD_Init+0x48>)
 800abc2:	f7fd fa87 	bl	80080d4 <HAL_SD_ConfigWideBusOperation>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800abd0:	79fb      	ldrb	r3, [r7, #7]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	20000368 	.word	0x20000368

0800abe0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmarx);
 800abf0:	4b13      	ldr	r3, [pc, #76]	; (800ac40 <BSP_SD_ReadBlocks_DMA+0x60>)
 800abf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	4b11      	ldr	r3, [pc, #68]	; (800ac40 <BSP_SD_ReadBlocks_DMA+0x60>)
 800abfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f022 0201 	bic.w	r2, r2, #1
 800ac02:	601a      	str	r2, [r3, #0]

  hsd1.hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac04:	4b0e      	ldr	r3, [pc, #56]	; (800ac40 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac08:	2200      	movs	r2, #0
 800ac0a:	609a      	str	r2, [r3, #8]

  hsd1.hdmarx->Instance->CCR &= ~DMA_CCR_DIR;
 800ac0c:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	4b0a      	ldr	r3, [pc, #40]	; (800ac40 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f022 0210 	bic.w	r2, r2, #16
 800ac1e:	601a      	str	r2, [r3, #0]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	68f9      	ldr	r1, [r7, #12]
 800ac26:	4806      	ldr	r0, [pc, #24]	; (800ac40 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac28:	f7fc fd70 	bl	800770c <HAL_SD_ReadBlocks_DMA>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <BSP_SD_ReadBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	20000368 	.word	0x20000368

0800ac44 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmatx);
 800ac54:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	4b11      	ldr	r3, [pc, #68]	; (800aca4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0201 	bic.w	r2, r2, #1
 800ac66:	601a      	str	r2, [r3, #0]

  hsd1.hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac68:	4b0e      	ldr	r3, [pc, #56]	; (800aca4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6c:	2210      	movs	r2, #16
 800ac6e:	609a      	str	r2, [r3, #8]

  hsd1.hdmatx->Instance->CCR |= (uint32_t)DMA_CCR_DIR;
 800ac70:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f042 0210 	orr.w	r2, r2, #16
 800ac82:	601a      	str	r2, [r3, #0]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	68f9      	ldr	r1, [r7, #12]
 800ac8a:	4806      	ldr	r0, [pc, #24]	; (800aca4 <BSP_SD_WriteBlocks_DMA+0x60>)
 800ac8c:	f7fc fe06 	bl	800789c <HAL_SD_WriteBlocks_DMA>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <BSP_SD_WriteBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20000368 	.word	0x20000368

0800aca8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800acac:	4805      	ldr	r0, [pc, #20]	; (800acc4 <BSP_SD_GetCardState+0x1c>)
 800acae:	f7fd facd 	bl	800824c <HAL_SD_GetCardState>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	bf14      	ite	ne
 800acb8:	2301      	movne	r3, #1
 800acba:	2300      	moveq	r3, #0
 800acbc:	b2db      	uxtb	r3, r3
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	20000368 	.word	0x20000368

0800acc8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800acd0:	6879      	ldr	r1, [r7, #4]
 800acd2:	4803      	ldr	r0, [pc, #12]	; (800ace0 <BSP_SD_GetCardInfo+0x18>)
 800acd4:	f7fd f9d2 	bl	800807c <HAL_SD_GetCardInfo>
}
 800acd8:	bf00      	nop
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20000368 	.word	0x20000368

0800ace4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800acec:	f000 f818 	bl	800ad20 <BSP_SD_AbortCallback>
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ad00:	f000 f9a8 	bl	800b054 <BSP_SD_WriteCpltCallback>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ad14:	f000 f9aa 	bl	800b06c <BSP_SD_ReadCpltCallback>
}
 800ad18:	bf00      	nop
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ad20:	b480      	push	{r7}
 800ad22:	af00      	add	r7, sp, #0

}
 800ad24:	bf00      	nop
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ad34:	2301      	movs	r3, #1
 800ad36:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ad38:	f000 f80c 	bl	800ad54 <BSP_PlatformIsDetected>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ad42:	2300      	movs	r3, #0
 800ad44:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ad46:	79fb      	ldrb	r3, [r7, #7]
 800ad48:	b2db      	uxtb	r3, r3
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ad5e:	2180      	movs	r1, #128	; 0x80
 800ad60:	4806      	ldr	r0, [pc, #24]	; (800ad7c <BSP_PlatformIsDetected+0x28>)
 800ad62:	f7f7 ffff 	bl	8002d64 <HAL_GPIO_ReadPin>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ad70:	79fb      	ldrb	r3, [r7, #7]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	48000800 	.word	0x48000800

0800ad80 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ad88:	f7f7 fac8 	bl	800231c <HAL_GetTick>
 800ad8c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ad8e:	e006      	b.n	800ad9e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ad90:	f7ff ff8a 	bl	800aca8 <BSP_SD_GetCardState>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d101      	bne.n	800ad9e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e009      	b.n	800adb2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ad9e:	f7f7 fabd 	bl	800231c <HAL_GetTick>
 800ada2:	4602      	mov	r2, r0
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d8f0      	bhi.n	800ad90 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800adae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	4603      	mov	r3, r0
 800adc4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800adc6:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <SD_CheckStatus+0x38>)
 800adc8:	2201      	movs	r2, #1
 800adca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800adcc:	f7ff ff6c 	bl	800aca8 <BSP_SD_GetCardState>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d107      	bne.n	800ade6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800add6:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <SD_CheckStatus+0x38>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	b2db      	uxtb	r3, r3
 800addc:	f023 0301 	bic.w	r3, r3, #1
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	4b04      	ldr	r3, [pc, #16]	; (800adf4 <SD_CheckStatus+0x38>)
 800ade4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ade6:	4b03      	ldr	r3, [pc, #12]	; (800adf4 <SD_CheckStatus+0x38>)
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	b2db      	uxtb	r3, r3
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	20000009 	.word	0x20000009

0800adf8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ae02:	f7ff fec7 	bl	800ab94 <BSP_SD_Init>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d107      	bne.n	800ae1c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff ffd4 	bl	800adbc <SD_CheckStatus>
 800ae14:	4603      	mov	r3, r0
 800ae16:	461a      	mov	r2, r3
 800ae18:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <SD_initialize+0x34>)
 800ae1a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ae1c:	4b03      	ldr	r3, [pc, #12]	; (800ae2c <SD_initialize+0x34>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	b2db      	uxtb	r3, r3
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	20000009 	.word	0x20000009

0800ae30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae3a:	79fb      	ldrb	r3, [r7, #7]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff ffbd 	bl	800adbc <SD_CheckStatus>
 800ae42:	4603      	mov	r3, r0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	607a      	str	r2, [r7, #4]
 800ae56:	603b      	str	r3, [r7, #0]
 800ae58:	4603      	mov	r3, r0
 800ae5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ae60:	f247 5030 	movw	r0, #30000	; 0x7530
 800ae64:	f7ff ff8c 	bl	800ad80 <SD_CheckStatusWithTimeout>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	da01      	bge.n	800ae72 <SD_read+0x26>
  {
    return res;
 800ae6e:	7dfb      	ldrb	r3, [r7, #23]
 800ae70:	e03b      	b.n	800aeea <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	6879      	ldr	r1, [r7, #4]
 800ae76:	68b8      	ldr	r0, [r7, #8]
 800ae78:	f7ff feb2 	bl	800abe0 <BSP_SD_ReadBlocks_DMA>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d132      	bne.n	800aee8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ae82:	4b1c      	ldr	r3, [pc, #112]	; (800aef4 <SD_read+0xa8>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ae88:	f7f7 fa48 	bl	800231c <HAL_GetTick>
 800ae8c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ae8e:	bf00      	nop
 800ae90:	4b18      	ldr	r3, [pc, #96]	; (800aef4 <SD_read+0xa8>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d108      	bne.n	800aeaa <SD_read+0x5e>
 800ae98:	f7f7 fa40 	bl	800231c <HAL_GetTick>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	f247 522f 	movw	r2, #29999	; 0x752f
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d9f2      	bls.n	800ae90 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800aeaa:	4b12      	ldr	r3, [pc, #72]	; (800aef4 <SD_read+0xa8>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d102      	bne.n	800aeb8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	75fb      	strb	r3, [r7, #23]
 800aeb6:	e017      	b.n	800aee8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800aeb8:	4b0e      	ldr	r3, [pc, #56]	; (800aef4 <SD_read+0xa8>)
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aebe:	f7f7 fa2d 	bl	800231c <HAL_GetTick>
 800aec2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aec4:	e007      	b.n	800aed6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aec6:	f7ff feef 	bl	800aca8 <BSP_SD_GetCardState>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <SD_read+0x8a>
          {
            res = RES_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aed4:	e008      	b.n	800aee8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aed6:	f7f7 fa21 	bl	800231c <HAL_GetTick>
 800aeda:	4602      	mov	r2, r0
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	f247 522f 	movw	r2, #29999	; 0x752f
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d9ee      	bls.n	800aec6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800aee8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3718      	adds	r7, #24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	2000c69c 	.word	0x2000c69c

0800aef8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800af0c:	4b24      	ldr	r3, [pc, #144]	; (800afa0 <SD_write+0xa8>)
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800af12:	f247 5030 	movw	r0, #30000	; 0x7530
 800af16:	f7ff ff33 	bl	800ad80 <SD_CheckStatusWithTimeout>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	da01      	bge.n	800af24 <SD_write+0x2c>
  {
    return res;
 800af20:	7dfb      	ldrb	r3, [r7, #23]
 800af22:	e038      	b.n	800af96 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	68b8      	ldr	r0, [r7, #8]
 800af2a:	f7ff fe8b 	bl	800ac44 <BSP_SD_WriteBlocks_DMA>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d12f      	bne.n	800af94 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800af34:	f7f7 f9f2 	bl	800231c <HAL_GetTick>
 800af38:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800af3a:	bf00      	nop
 800af3c:	4b18      	ldr	r3, [pc, #96]	; (800afa0 <SD_write+0xa8>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d108      	bne.n	800af56 <SD_write+0x5e>
 800af44:	f7f7 f9ea 	bl	800231c <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	f247 522f 	movw	r2, #29999	; 0x752f
 800af52:	4293      	cmp	r3, r2
 800af54:	d9f2      	bls.n	800af3c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800af56:	4b12      	ldr	r3, [pc, #72]	; (800afa0 <SD_write+0xa8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d102      	bne.n	800af64 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	75fb      	strb	r3, [r7, #23]
 800af62:	e017      	b.n	800af94 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800af64:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <SD_write+0xa8>)
 800af66:	2200      	movs	r2, #0
 800af68:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800af6a:	f7f7 f9d7 	bl	800231c <HAL_GetTick>
 800af6e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af70:	e007      	b.n	800af82 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af72:	f7ff fe99 	bl	800aca8 <BSP_SD_GetCardState>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d102      	bne.n	800af82 <SD_write+0x8a>
          {
            res = RES_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	75fb      	strb	r3, [r7, #23]
            break;
 800af80:	e008      	b.n	800af94 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af82:	f7f7 f9cb 	bl	800231c <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	f247 522f 	movw	r2, #29999	; 0x752f
 800af90:	4293      	cmp	r3, r2
 800af92:	d9ee      	bls.n	800af72 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800af94:	7dfb      	ldrb	r3, [r7, #23]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	2000c698 	.word	0x2000c698

0800afa4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b08c      	sub	sp, #48	; 0x30
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	4603      	mov	r3, r0
 800afac:	603a      	str	r2, [r7, #0]
 800afae:	71fb      	strb	r3, [r7, #7]
 800afb0:	460b      	mov	r3, r1
 800afb2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800afba:	4b25      	ldr	r3, [pc, #148]	; (800b050 <SD_ioctl+0xac>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <SD_ioctl+0x28>
 800afc8:	2303      	movs	r3, #3
 800afca:	e03c      	b.n	800b046 <SD_ioctl+0xa2>

  switch (cmd)
 800afcc:	79bb      	ldrb	r3, [r7, #6]
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d834      	bhi.n	800b03c <SD_ioctl+0x98>
 800afd2:	a201      	add	r2, pc, #4	; (adr r2, 800afd8 <SD_ioctl+0x34>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800afe9 	.word	0x0800afe9
 800afdc:	0800aff1 	.word	0x0800aff1
 800afe0:	0800b009 	.word	0x0800b009
 800afe4:	0800b023 	.word	0x0800b023
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800afee:	e028      	b.n	800b042 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800aff0:	f107 030c 	add.w	r3, r7, #12
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff fe67 	bl	800acc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800affa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b000:	2300      	movs	r3, #0
 800b002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b006:	e01c      	b.n	800b042 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b008:	f107 030c 	add.w	r3, r7, #12
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff fe5b 	bl	800acc8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	b29a      	uxth	r2, r3
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b020:	e00f      	b.n	800b042 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b022:	f107 030c 	add.w	r3, r7, #12
 800b026:	4618      	mov	r0, r3
 800b028:	f7ff fe4e 	bl	800acc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	0a5a      	lsrs	r2, r3, #9
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b03a:	e002      	b.n	800b042 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b03c:	2304      	movs	r3, #4
 800b03e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b042:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b046:	4618      	mov	r0, r3
 800b048:	3730      	adds	r7, #48	; 0x30
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000009 	.word	0x20000009

0800b054 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b054:	b480      	push	{r7}
 800b056:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b058:	4b03      	ldr	r3, [pc, #12]	; (800b068 <BSP_SD_WriteCpltCallback+0x14>)
 800b05a:	2201      	movs	r2, #1
 800b05c:	601a      	str	r2, [r3, #0]
}
 800b05e:	bf00      	nop
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr
 800b068:	2000c698 	.word	0x2000c698

0800b06c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b06c:	b480      	push	{r7}
 800b06e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b070:	4b03      	ldr	r3, [pc, #12]	; (800b080 <BSP_SD_ReadCpltCallback+0x14>)
 800b072:	2201      	movs	r2, #1
 800b074:	601a      	str	r2, [r3, #0]
}
 800b076:	bf00      	nop
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr
 800b080:	2000c69c 	.word	0x2000c69c

0800b084 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b090:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b094:	f005 fdde 	bl	8010c54 <USBD_static_malloc>
 800b098:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d109      	bne.n	800b0b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	32b0      	adds	r2, #176	; 0xb0
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	e0d4      	b.n	800b25e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b0b4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f006 fdbf 	bl	8011c3e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	32b0      	adds	r2, #176	; 0xb0
 800b0ca:	68f9      	ldr	r1, [r7, #12]
 800b0cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	32b0      	adds	r2, #176	; 0xb0
 800b0da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	7c1b      	ldrb	r3, [r3, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d138      	bne.n	800b15e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b0ec:	4b5e      	ldr	r3, [pc, #376]	; (800b268 <USBD_CDC_Init+0x1e4>)
 800b0ee:	7819      	ldrb	r1, [r3, #0]
 800b0f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f005 fb98 	bl	801082c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b0fc:	4b5a      	ldr	r3, [pc, #360]	; (800b268 <USBD_CDC_Init+0x1e4>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	f003 020f 	and.w	r2, r3, #15
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	440b      	add	r3, r1
 800b110:	3324      	adds	r3, #36	; 0x24
 800b112:	2201      	movs	r2, #1
 800b114:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b116:	4b55      	ldr	r3, [pc, #340]	; (800b26c <USBD_CDC_Init+0x1e8>)
 800b118:	7819      	ldrb	r1, [r3, #0]
 800b11a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b11e:	2202      	movs	r2, #2
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f005 fb83 	bl	801082c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b126:	4b51      	ldr	r3, [pc, #324]	; (800b26c <USBD_CDC_Init+0x1e8>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	f003 020f 	and.w	r2, r3, #15
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	4613      	mov	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b13e:	2201      	movs	r2, #1
 800b140:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b142:	4b4b      	ldr	r3, [pc, #300]	; (800b270 <USBD_CDC_Init+0x1ec>)
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	f003 020f 	and.w	r2, r3, #15
 800b14a:	6879      	ldr	r1, [r7, #4]
 800b14c:	4613      	mov	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4413      	add	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	440b      	add	r3, r1
 800b156:	3326      	adds	r3, #38	; 0x26
 800b158:	2210      	movs	r2, #16
 800b15a:	801a      	strh	r2, [r3, #0]
 800b15c:	e035      	b.n	800b1ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b15e:	4b42      	ldr	r3, [pc, #264]	; (800b268 <USBD_CDC_Init+0x1e4>)
 800b160:	7819      	ldrb	r1, [r3, #0]
 800b162:	2340      	movs	r3, #64	; 0x40
 800b164:	2202      	movs	r2, #2
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f005 fb60 	bl	801082c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b16c:	4b3e      	ldr	r3, [pc, #248]	; (800b268 <USBD_CDC_Init+0x1e4>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	f003 020f 	and.w	r2, r3, #15
 800b174:	6879      	ldr	r1, [r7, #4]
 800b176:	4613      	mov	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	440b      	add	r3, r1
 800b180:	3324      	adds	r3, #36	; 0x24
 800b182:	2201      	movs	r2, #1
 800b184:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b186:	4b39      	ldr	r3, [pc, #228]	; (800b26c <USBD_CDC_Init+0x1e8>)
 800b188:	7819      	ldrb	r1, [r3, #0]
 800b18a:	2340      	movs	r3, #64	; 0x40
 800b18c:	2202      	movs	r2, #2
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f005 fb4c 	bl	801082c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b194:	4b35      	ldr	r3, [pc, #212]	; (800b26c <USBD_CDC_Init+0x1e8>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	f003 020f 	and.w	r2, r3, #15
 800b19c:	6879      	ldr	r1, [r7, #4]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	440b      	add	r3, r1
 800b1a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b1b0:	4b2f      	ldr	r3, [pc, #188]	; (800b270 <USBD_CDC_Init+0x1ec>)
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	f003 020f 	and.w	r2, r3, #15
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	3326      	adds	r3, #38	; 0x26
 800b1c6:	2210      	movs	r2, #16
 800b1c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b1ca:	4b29      	ldr	r3, [pc, #164]	; (800b270 <USBD_CDC_Init+0x1ec>)
 800b1cc:	7819      	ldrb	r1, [r3, #0]
 800b1ce:	2308      	movs	r3, #8
 800b1d0:	2203      	movs	r2, #3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f005 fb2a 	bl	801082c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b1d8:	4b25      	ldr	r3, [pc, #148]	; (800b270 <USBD_CDC_Init+0x1ec>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	f003 020f 	and.w	r2, r3, #15
 800b1e0:	6879      	ldr	r1, [r7, #4]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	440b      	add	r3, r1
 800b1ec:	3324      	adds	r3, #36	; 0x24
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	33b0      	adds	r3, #176	; 0xb0
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b228:	2302      	movs	r3, #2
 800b22a:	e018      	b.n	800b25e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	7c1b      	ldrb	r3, [r3, #16]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10a      	bne.n	800b24a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b234:	4b0d      	ldr	r3, [pc, #52]	; (800b26c <USBD_CDC_Init+0x1e8>)
 800b236:	7819      	ldrb	r1, [r3, #0]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b23e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f005 fc6c 	bl	8010b20 <USBD_LL_PrepareReceive>
 800b248:	e008      	b.n	800b25c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b24a:	4b08      	ldr	r3, [pc, #32]	; (800b26c <USBD_CDC_Init+0x1e8>)
 800b24c:	7819      	ldrb	r1, [r3, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b254:	2340      	movs	r3, #64	; 0x40
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f005 fc62 	bl	8010b20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20000093 	.word	0x20000093
 800b26c:	20000094 	.word	0x20000094
 800b270:	20000095 	.word	0x20000095

0800b274 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b280:	4b3a      	ldr	r3, [pc, #232]	; (800b36c <USBD_CDC_DeInit+0xf8>)
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f005 fb0e 	bl	80108a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b28c:	4b37      	ldr	r3, [pc, #220]	; (800b36c <USBD_CDC_DeInit+0xf8>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	f003 020f 	and.w	r2, r3, #15
 800b294:	6879      	ldr	r1, [r7, #4]
 800b296:	4613      	mov	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	440b      	add	r3, r1
 800b2a0:	3324      	adds	r3, #36	; 0x24
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b2a6:	4b32      	ldr	r3, [pc, #200]	; (800b370 <USBD_CDC_DeInit+0xfc>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f005 fafb 	bl	80108a8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b2b2:	4b2f      	ldr	r3, [pc, #188]	; (800b370 <USBD_CDC_DeInit+0xfc>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	f003 020f 	and.w	r2, r3, #15
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	440b      	add	r3, r1
 800b2c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b2ce:	4b29      	ldr	r3, [pc, #164]	; (800b374 <USBD_CDC_DeInit+0x100>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f005 fae7 	bl	80108a8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b2da:	4b26      	ldr	r3, [pc, #152]	; (800b374 <USBD_CDC_DeInit+0x100>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	f003 020f 	and.w	r2, r3, #15
 800b2e2:	6879      	ldr	r1, [r7, #4]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	440b      	add	r3, r1
 800b2ee:	3324      	adds	r3, #36	; 0x24
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b2f4:	4b1f      	ldr	r3, [pc, #124]	; (800b374 <USBD_CDC_DeInit+0x100>)
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	f003 020f 	and.w	r2, r3, #15
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	4613      	mov	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	440b      	add	r3, r1
 800b308:	3326      	adds	r3, #38	; 0x26
 800b30a:	2200      	movs	r2, #0
 800b30c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	32b0      	adds	r2, #176	; 0xb0
 800b318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d01f      	beq.n	800b360 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	33b0      	adds	r3, #176	; 0xb0
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	32b0      	adds	r2, #176	; 0xb0
 800b33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b342:	4618      	mov	r0, r3
 800b344:	f005 fc94 	bl	8010c70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	32b0      	adds	r2, #176	; 0xb0
 800b352:	2100      	movs	r1, #0
 800b354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20000093 	.word	0x20000093
 800b370:	20000094 	.word	0x20000094
 800b374:	20000095 	.word	0x20000095

0800b378 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	32b0      	adds	r2, #176	; 0xb0
 800b38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b390:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b392:	2300      	movs	r3, #0
 800b394:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b396:	2300      	movs	r3, #0
 800b398:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e0bf      	b.n	800b528 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d050      	beq.n	800b456 <USBD_CDC_Setup+0xde>
 800b3b4:	2b20      	cmp	r3, #32
 800b3b6:	f040 80af 	bne.w	800b518 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	88db      	ldrh	r3, [r3, #6]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d03a      	beq.n	800b438 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	b25b      	sxtb	r3, r3
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	da1b      	bge.n	800b404 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	33b0      	adds	r3, #176	; 0xb0
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b3e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	88d2      	ldrh	r2, [r2, #6]
 800b3e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	88db      	ldrh	r3, [r3, #6]
 800b3ee:	2b07      	cmp	r3, #7
 800b3f0:	bf28      	it	cs
 800b3f2:	2307      	movcs	r3, #7
 800b3f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	89fa      	ldrh	r2, [r7, #14]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f001 fd73 	bl	800cee8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b402:	e090      	b.n	800b526 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	785a      	ldrb	r2, [r3, #1]
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	88db      	ldrh	r3, [r3, #6]
 800b412:	2b3f      	cmp	r3, #63	; 0x3f
 800b414:	d803      	bhi.n	800b41e <USBD_CDC_Setup+0xa6>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	88db      	ldrh	r3, [r3, #6]
 800b41a:	b2da      	uxtb	r2, r3
 800b41c:	e000      	b.n	800b420 <USBD_CDC_Setup+0xa8>
 800b41e:	2240      	movs	r2, #64	; 0x40
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b426:	6939      	ldr	r1, [r7, #16]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b42e:	461a      	mov	r2, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f001 fd85 	bl	800cf40 <USBD_CtlPrepareRx>
      break;
 800b436:	e076      	b.n	800b526 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	33b0      	adds	r3, #176	; 0xb0
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	4413      	add	r3, r2
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	7850      	ldrb	r0, [r2, #1]
 800b44e:	2200      	movs	r2, #0
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	4798      	blx	r3
      break;
 800b454:	e067      	b.n	800b526 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	2b0b      	cmp	r3, #11
 800b45c:	d851      	bhi.n	800b502 <USBD_CDC_Setup+0x18a>
 800b45e:	a201      	add	r2, pc, #4	; (adr r2, 800b464 <USBD_CDC_Setup+0xec>)
 800b460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b464:	0800b495 	.word	0x0800b495
 800b468:	0800b511 	.word	0x0800b511
 800b46c:	0800b503 	.word	0x0800b503
 800b470:	0800b503 	.word	0x0800b503
 800b474:	0800b503 	.word	0x0800b503
 800b478:	0800b503 	.word	0x0800b503
 800b47c:	0800b503 	.word	0x0800b503
 800b480:	0800b503 	.word	0x0800b503
 800b484:	0800b503 	.word	0x0800b503
 800b488:	0800b503 	.word	0x0800b503
 800b48c:	0800b4bf 	.word	0x0800b4bf
 800b490:	0800b4e9 	.word	0x0800b4e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	2b03      	cmp	r3, #3
 800b49e:	d107      	bne.n	800b4b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b4a0:	f107 030a 	add.w	r3, r7, #10
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 fd1d 	bl	800cee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4ae:	e032      	b.n	800b516 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 fca7 	bl	800ce06 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	75fb      	strb	r3, [r7, #23]
          break;
 800b4bc:	e02b      	b.n	800b516 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d107      	bne.n	800b4da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b4ca:	f107 030d 	add.w	r3, r7, #13
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f001 fd08 	bl	800cee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b4d8:	e01d      	b.n	800b516 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 fc92 	bl	800ce06 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	75fb      	strb	r3, [r7, #23]
          break;
 800b4e6:	e016      	b.n	800b516 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d00f      	beq.n	800b514 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 fc85 	bl	800ce06 <USBD_CtlError>
            ret = USBD_FAIL;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b500:	e008      	b.n	800b514 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b502:	6839      	ldr	r1, [r7, #0]
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 fc7e 	bl	800ce06 <USBD_CtlError>
          ret = USBD_FAIL;
 800b50a:	2303      	movs	r3, #3
 800b50c:	75fb      	strb	r3, [r7, #23]
          break;
 800b50e:	e002      	b.n	800b516 <USBD_CDC_Setup+0x19e>
          break;
 800b510:	bf00      	nop
 800b512:	e008      	b.n	800b526 <USBD_CDC_Setup+0x1ae>
          break;
 800b514:	bf00      	nop
      }
      break;
 800b516:	e006      	b.n	800b526 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f001 fc73 	bl	800ce06 <USBD_CtlError>
      ret = USBD_FAIL;
 800b520:	2303      	movs	r3, #3
 800b522:	75fb      	strb	r3, [r7, #23]
      break;
 800b524:	bf00      	nop
  }

  return (uint8_t)ret;
 800b526:	7dfb      	ldrb	r3, [r7, #23]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b542:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	32b0      	adds	r2, #176	; 0xb0
 800b54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b556:	2303      	movs	r3, #3
 800b558:	e065      	b.n	800b626 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	32b0      	adds	r2, #176	; 0xb0
 800b564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b568:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b56a:	78fb      	ldrb	r3, [r7, #3]
 800b56c:	f003 020f 	and.w	r2, r3, #15
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	440b      	add	r3, r1
 800b57c:	3318      	adds	r3, #24
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d02f      	beq.n	800b5e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b584:	78fb      	ldrb	r3, [r7, #3]
 800b586:	f003 020f 	and.w	r2, r3, #15
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	4613      	mov	r3, r2
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4413      	add	r3, r2
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	440b      	add	r3, r1
 800b596:	3318      	adds	r3, #24
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	f003 010f 	and.w	r1, r3, #15
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	00db      	lsls	r3, r3, #3
 800b5a6:	440b      	add	r3, r1
 800b5a8:	009b      	lsls	r3, r3, #2
 800b5aa:	4403      	add	r3, r0
 800b5ac:	3344      	adds	r3, #68	; 0x44
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b5b4:	fb01 f303 	mul.w	r3, r1, r3
 800b5b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d112      	bne.n	800b5e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b5be:	78fb      	ldrb	r3, [r7, #3]
 800b5c0:	f003 020f 	and.w	r2, r3, #15
 800b5c4:	6879      	ldr	r1, [r7, #4]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	440b      	add	r3, r1
 800b5d0:	3318      	adds	r3, #24
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b5d6:	78f9      	ldrb	r1, [r7, #3]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	2200      	movs	r2, #0
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f005 fa67 	bl	8010ab0 <USBD_LL_Transmit>
 800b5e2:	e01f      	b.n	800b624 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	33b0      	adds	r3, #176	; 0xb0
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d010      	beq.n	800b624 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	33b0      	adds	r3, #176	; 0xb0
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b620:	78fa      	ldrb	r2, [r7, #3]
 800b622:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	460b      	mov	r3, r1
 800b638:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	32b0      	adds	r2, #176	; 0xb0
 800b644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b648:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	32b0      	adds	r2, #176	; 0xb0
 800b654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d101      	bne.n	800b660 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e01a      	b.n	800b696 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f005 fa93 	bl	8010b90 <USBD_LL_GetRxDataSize>
 800b66a:	4602      	mov	r2, r0
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	33b0      	adds	r3, #176	; 0xb0
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	4413      	add	r3, r2
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b690:	4611      	mov	r1, r2
 800b692:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	32b0      	adds	r2, #176	; 0xb0
 800b6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e025      	b.n	800b70c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	33b0      	adds	r3, #176	; 0xb0
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d01a      	beq.n	800b70a <USBD_CDC_EP0_RxReady+0x6c>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b6da:	2bff      	cmp	r3, #255	; 0xff
 800b6dc:	d015      	beq.n	800b70a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	33b0      	adds	r3, #176	; 0xb0
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b6f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b6fe:	b292      	uxth	r2, r2
 800b700:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	22ff      	movs	r2, #255	; 0xff
 800b706:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b71c:	2182      	movs	r1, #130	; 0x82
 800b71e:	4818      	ldr	r0, [pc, #96]	; (800b780 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b720:	f000 fd0f 	bl	800c142 <USBD_GetEpDesc>
 800b724:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b726:	2101      	movs	r1, #1
 800b728:	4815      	ldr	r0, [pc, #84]	; (800b780 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b72a:	f000 fd0a 	bl	800c142 <USBD_GetEpDesc>
 800b72e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b730:	2181      	movs	r1, #129	; 0x81
 800b732:	4813      	ldr	r0, [pc, #76]	; (800b780 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b734:	f000 fd05 	bl	800c142 <USBD_GetEpDesc>
 800b738:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2210      	movs	r2, #16
 800b744:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d006      	beq.n	800b75a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	2200      	movs	r2, #0
 800b750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b754:	711a      	strb	r2, [r3, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d006      	beq.n	800b76e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b768:	711a      	strb	r2, [r3, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2243      	movs	r2, #67	; 0x43
 800b772:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b774:	4b02      	ldr	r3, [pc, #8]	; (800b780 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20000050 	.word	0x20000050

0800b784 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b78c:	2182      	movs	r1, #130	; 0x82
 800b78e:	4818      	ldr	r0, [pc, #96]	; (800b7f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b790:	f000 fcd7 	bl	800c142 <USBD_GetEpDesc>
 800b794:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b796:	2101      	movs	r1, #1
 800b798:	4815      	ldr	r0, [pc, #84]	; (800b7f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b79a:	f000 fcd2 	bl	800c142 <USBD_GetEpDesc>
 800b79e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b7a0:	2181      	movs	r1, #129	; 0x81
 800b7a2:	4813      	ldr	r0, [pc, #76]	; (800b7f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7a4:	f000 fccd 	bl	800c142 <USBD_GetEpDesc>
 800b7a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	2210      	movs	r2, #16
 800b7b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d006      	beq.n	800b7ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	711a      	strb	r2, [r3, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f042 0202 	orr.w	r2, r2, #2
 800b7c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d006      	beq.n	800b7de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	711a      	strb	r2, [r3, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f042 0202 	orr.w	r2, r2, #2
 800b7dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2243      	movs	r2, #67	; 0x43
 800b7e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7e4:	4b02      	ldr	r3, [pc, #8]	; (800b7f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20000050 	.word	0x20000050

0800b7f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b7fc:	2182      	movs	r1, #130	; 0x82
 800b7fe:	4818      	ldr	r0, [pc, #96]	; (800b860 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b800:	f000 fc9f 	bl	800c142 <USBD_GetEpDesc>
 800b804:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b806:	2101      	movs	r1, #1
 800b808:	4815      	ldr	r0, [pc, #84]	; (800b860 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b80a:	f000 fc9a 	bl	800c142 <USBD_GetEpDesc>
 800b80e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b810:	2181      	movs	r1, #129	; 0x81
 800b812:	4813      	ldr	r0, [pc, #76]	; (800b860 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b814:	f000 fc95 	bl	800c142 <USBD_GetEpDesc>
 800b818:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	2210      	movs	r2, #16
 800b824:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d006      	beq.n	800b83a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	2200      	movs	r2, #0
 800b830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b834:	711a      	strb	r2, [r3, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2200      	movs	r2, #0
 800b844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b848:	711a      	strb	r2, [r3, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2243      	movs	r2, #67	; 0x43
 800b852:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b854:	4b02      	ldr	r3, [pc, #8]	; (800b860 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20000050 	.word	0x20000050

0800b864 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	220a      	movs	r2, #10
 800b870:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b872:	4b03      	ldr	r3, [pc, #12]	; (800b880 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b874:	4618      	mov	r0, r3
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	2000000c 	.word	0x2000000c

0800b884 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b894:	2303      	movs	r3, #3
 800b896:	e009      	b.n	800b8ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	33b0      	adds	r3, #176	; 0xb0
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	32b0      	adds	r2, #176	; 0xb0
 800b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e008      	b.n	800b8f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	371c      	adds	r7, #28
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	32b0      	adds	r2, #176	; 0xb0
 800b910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b914:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b91c:	2303      	movs	r3, #3
 800b91e:	e004      	b.n	800b92a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3714      	adds	r7, #20
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
	...

0800b938 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	32b0      	adds	r2, #176	; 0xb0
 800b94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b94e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	32b0      	adds	r2, #176	; 0xb0
 800b95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b962:	2303      	movs	r3, #3
 800b964:	e018      	b.n	800b998 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	7c1b      	ldrb	r3, [r3, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10a      	bne.n	800b984 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b96e:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <USBD_CDC_ReceivePacket+0x68>)
 800b970:	7819      	ldrb	r1, [r3, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f005 f8cf 	bl	8010b20 <USBD_LL_PrepareReceive>
 800b982:	e008      	b.n	800b996 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b984:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <USBD_CDC_ReceivePacket+0x68>)
 800b986:	7819      	ldrb	r1, [r3, #0]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b98e:	2340      	movs	r3, #64	; 0x40
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f005 f8c5 	bl	8010b20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	20000094 	.word	0x20000094

0800b9a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e01f      	b.n	800b9fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	79fa      	ldrb	r2, [r7, #7]
 800b9ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f004 fe9d 	bl	8010730 <USBD_LL_Init>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d101      	bne.n	800ba1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e025      	b.n	800ba68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	32ae      	adds	r2, #174	; 0xae
 800ba2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00f      	beq.n	800ba58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	32ae      	adds	r2, #174	; 0xae
 800ba42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba48:	f107 020e 	add.w	r2, r7, #14
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	4798      	blx	r3
 800ba50:	4602      	mov	r2, r0
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ba5e:	1c5a      	adds	r2, r3, #1
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f004 fea5 	bl	80107c8 <USBD_LL_Start>
 800ba7e:	4603      	mov	r3, r0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d009      	beq.n	800bacc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	78fa      	ldrb	r2, [r7, #3]
 800bac2:	4611      	mov	r1, r2
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	4798      	blx	r3
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b084      	sub	sp, #16
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	460b      	mov	r3, r1
 800bae0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	78fa      	ldrb	r2, [r7, #3]
 800baf0:	4611      	mov	r1, r2
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	4798      	blx	r3
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d001      	beq.n	800bb00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bafc:	2303      	movs	r3, #3
 800bafe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb1a:	6839      	ldr	r1, [r7, #0]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f001 f938 	bl	800cd92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb30:	461a      	mov	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb3e:	f003 031f 	and.w	r3, r3, #31
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d01a      	beq.n	800bb7c <USBD_LL_SetupStage+0x72>
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d822      	bhi.n	800bb90 <USBD_LL_SetupStage+0x86>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d002      	beq.n	800bb54 <USBD_LL_SetupStage+0x4a>
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d00a      	beq.n	800bb68 <USBD_LL_SetupStage+0x5e>
 800bb52:	e01d      	b.n	800bb90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fb65 	bl	800c22c <USBD_StdDevReq>
 800bb62:	4603      	mov	r3, r0
 800bb64:	73fb      	strb	r3, [r7, #15]
      break;
 800bb66:	e020      	b.n	800bbaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fbcd 	bl	800c310 <USBD_StdItfReq>
 800bb76:	4603      	mov	r3, r0
 800bb78:	73fb      	strb	r3, [r7, #15]
      break;
 800bb7a:	e016      	b.n	800bbaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fc2f 	bl	800c3e8 <USBD_StdEPReq>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb8e:	e00c      	b.n	800bbaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f004 feb8 	bl	8010914 <USBD_LL_StallEP>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
      break;
 800bba8:	bf00      	nop
  }

  return ret;
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bbc6:	7afb      	ldrb	r3, [r7, #11]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d16e      	bne.n	800bcaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bbd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	f040 8098 	bne.w	800bd10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	689a      	ldr	r2, [r3, #8]
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d913      	bls.n	800bc14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	689a      	ldr	r2, [r3, #8]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	1ad2      	subs	r2, r2, r3
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	68da      	ldr	r2, [r3, #12]
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	4293      	cmp	r3, r2
 800bc04:	bf28      	it	cs
 800bc06:	4613      	movcs	r3, r2
 800bc08:	461a      	mov	r2, r3
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f001 f9b4 	bl	800cf7a <USBD_CtlContinueRx>
 800bc12:	e07d      	b.n	800bd10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc1a:	f003 031f 	and.w	r3, r3, #31
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d014      	beq.n	800bc4c <USBD_LL_DataOutStage+0x98>
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d81d      	bhi.n	800bc62 <USBD_LL_DataOutStage+0xae>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <USBD_LL_DataOutStage+0x7c>
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d003      	beq.n	800bc36 <USBD_LL_DataOutStage+0x82>
 800bc2e:	e018      	b.n	800bc62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	75bb      	strb	r3, [r7, #22]
            break;
 800bc34:	e018      	b.n	800bc68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	4619      	mov	r1, r3
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f000 fa64 	bl	800c10e <USBD_CoreFindIF>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75bb      	strb	r3, [r7, #22]
            break;
 800bc4a:	e00d      	b.n	800bc68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	4619      	mov	r1, r3
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 fa66 	bl	800c128 <USBD_CoreFindEP>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	75bb      	strb	r3, [r7, #22]
            break;
 800bc60:	e002      	b.n	800bc68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc62:	2300      	movs	r3, #0
 800bc64:	75bb      	strb	r3, [r7, #22]
            break;
 800bc66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc68:	7dbb      	ldrb	r3, [r7, #22]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d119      	bne.n	800bca2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d113      	bne.n	800bca2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc7a:	7dba      	ldrb	r2, [r7, #22]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	32ae      	adds	r2, #174	; 0xae
 800bc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00b      	beq.n	800bca2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bc8a:	7dba      	ldrb	r2, [r7, #22]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bc92:	7dba      	ldrb	r2, [r7, #22]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	32ae      	adds	r2, #174	; 0xae
 800bc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f001 f97a 	bl	800cf9c <USBD_CtlSendStatus>
 800bca8:	e032      	b.n	800bd10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcaa:	7afb      	ldrb	r3, [r7, #11]
 800bcac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 fa37 	bl	800c128 <USBD_CoreFindEP>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcbe:	7dbb      	ldrb	r3, [r7, #22]
 800bcc0:	2bff      	cmp	r3, #255	; 0xff
 800bcc2:	d025      	beq.n	800bd10 <USBD_LL_DataOutStage+0x15c>
 800bcc4:	7dbb      	ldrb	r3, [r7, #22]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d122      	bne.n	800bd10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	d117      	bne.n	800bd06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bcd6:	7dba      	ldrb	r2, [r7, #22]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	32ae      	adds	r2, #174	; 0xae
 800bcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00f      	beq.n	800bd06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bce6:	7dba      	ldrb	r2, [r7, #22]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bcee:	7dba      	ldrb	r2, [r7, #22]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	32ae      	adds	r2, #174	; 0xae
 800bcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	7afa      	ldrb	r2, [r7, #11]
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	4798      	blx	r3
 800bd02:	4603      	mov	r3, r0
 800bd04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	e000      	b.n	800bd12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b086      	sub	sp, #24
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	460b      	mov	r3, r1
 800bd24:	607a      	str	r2, [r7, #4]
 800bd26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd28:	7afb      	ldrb	r3, [r7, #11]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d16f      	bne.n	800be0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3314      	adds	r3, #20
 800bd32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d15a      	bne.n	800bdf4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	689a      	ldr	r2, [r3, #8]
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d914      	bls.n	800bd74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	689a      	ldr	r2, [r3, #8]
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	1ad2      	subs	r2, r2, r3
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	6879      	ldr	r1, [r7, #4]
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f001 f8dc 	bl	800cf1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd66:	2300      	movs	r3, #0
 800bd68:	2200      	movs	r2, #0
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f004 fed7 	bl	8010b20 <USBD_LL_PrepareReceive>
 800bd72:	e03f      	b.n	800bdf4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	68da      	ldr	r2, [r3, #12]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d11c      	bne.n	800bdba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	685a      	ldr	r2, [r3, #4]
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d316      	bcc.n	800bdba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	685a      	ldr	r2, [r3, #4]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d20f      	bcs.n	800bdba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f001 f8bd 	bl	800cf1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdac:	2300      	movs	r3, #0
 800bdae:	2200      	movs	r2, #0
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f004 feb4 	bl	8010b20 <USBD_LL_PrepareReceive>
 800bdb8:	e01c      	b.n	800bdf4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b03      	cmp	r3, #3
 800bdc4:	d10f      	bne.n	800bde6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d009      	beq.n	800bde6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bde6:	2180      	movs	r1, #128	; 0x80
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f004 fd93 	bl	8010914 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f001 f8e7 	bl	800cfc2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d03a      	beq.n	800be74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f7ff fe42 	bl	800ba88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be0c:	e032      	b.n	800be74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be0e:	7afb      	ldrb	r3, [r7, #11]
 800be10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be14:	b2db      	uxtb	r3, r3
 800be16:	4619      	mov	r1, r3
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 f985 	bl	800c128 <USBD_CoreFindEP>
 800be1e:	4603      	mov	r3, r0
 800be20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be22:	7dfb      	ldrb	r3, [r7, #23]
 800be24:	2bff      	cmp	r3, #255	; 0xff
 800be26:	d025      	beq.n	800be74 <USBD_LL_DataInStage+0x15a>
 800be28:	7dfb      	ldrb	r3, [r7, #23]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d122      	bne.n	800be74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b03      	cmp	r3, #3
 800be38:	d11c      	bne.n	800be74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be3a:	7dfa      	ldrb	r2, [r7, #23]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	32ae      	adds	r2, #174	; 0xae
 800be40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d014      	beq.n	800be74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800be4a:	7dfa      	ldrb	r2, [r7, #23]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be52:	7dfa      	ldrb	r2, [r7, #23]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	32ae      	adds	r2, #174	; 0xae
 800be58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	7afa      	ldrb	r2, [r7, #11]
 800be60:	4611      	mov	r1, r2
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	4798      	blx	r3
 800be66:	4603      	mov	r3, r0
 800be68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be6a:	7dbb      	ldrb	r3, [r7, #22]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800be70:	7dbb      	ldrb	r3, [r7, #22]
 800be72:	e000      	b.n	800be76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3718      	adds	r7, #24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d014      	beq.n	800bee4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00e      	beq.n	800bee4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	6852      	ldr	r2, [r2, #4]
 800bed2:	b2d2      	uxtb	r2, r2
 800bed4:	4611      	mov	r1, r2
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	4798      	blx	r3
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bee0:	2303      	movs	r3, #3
 800bee2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bee4:	2340      	movs	r3, #64	; 0x40
 800bee6:	2200      	movs	r2, #0
 800bee8:	2100      	movs	r1, #0
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f004 fc9e 	bl	801082c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2240      	movs	r2, #64	; 0x40
 800befc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf00:	2340      	movs	r3, #64	; 0x40
 800bf02:	2200      	movs	r2, #0
 800bf04:	2180      	movs	r1, #128	; 0x80
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f004 fc90 	bl	801082c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2240      	movs	r2, #64	; 0x40
 800bf16:	621a      	str	r2, [r3, #32]

  return ret;
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf22:	b480      	push	{r7}
 800bf24:	b083      	sub	sp, #12
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	78fa      	ldrb	r2, [r7, #3]
 800bf32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b04      	cmp	r3, #4
 800bf54:	d006      	beq.n	800bf64 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2204      	movs	r2, #4
 800bf68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	370c      	adds	r7, #12
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr

0800bf7a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	b083      	sub	sp, #12
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b04      	cmp	r3, #4
 800bf8c:	d106      	bne.n	800bf9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bf94:	b2da      	uxtb	r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b082      	sub	sp, #8
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	2b03      	cmp	r3, #3
 800bfbc:	d110      	bne.n	800bfe0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00b      	beq.n	800bfe0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfce:	69db      	ldr	r3, [r3, #28]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d005      	beq.n	800bfe0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	460b      	mov	r3, r1
 800bff4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	32ae      	adds	r2, #174	; 0xae
 800c000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c008:	2303      	movs	r3, #3
 800c00a:	e01c      	b.n	800c046 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c012:	b2db      	uxtb	r3, r3
 800c014:	2b03      	cmp	r3, #3
 800c016:	d115      	bne.n	800c044 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	32ae      	adds	r2, #174	; 0xae
 800c022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c026:	6a1b      	ldr	r3, [r3, #32]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00b      	beq.n	800c044 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	32ae      	adds	r2, #174	; 0xae
 800c036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03a:	6a1b      	ldr	r3, [r3, #32]
 800c03c:	78fa      	ldrb	r2, [r7, #3]
 800c03e:	4611      	mov	r1, r2
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	32ae      	adds	r2, #174	; 0xae
 800c064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e01c      	b.n	800c0aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c076:	b2db      	uxtb	r3, r3
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d115      	bne.n	800c0a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	32ae      	adds	r2, #174	; 0xae
 800c086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00b      	beq.n	800c0a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	32ae      	adds	r2, #174	; 0xae
 800c09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a0:	78fa      	ldrb	r2, [r7, #3]
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0b2:	b480      	push	{r7}
 800c0b4:	b083      	sub	sp, #12
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00e      	beq.n	800c104 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	6852      	ldr	r2, [r2, #4]
 800c0f2:	b2d2      	uxtb	r2, r2
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	4798      	blx	r3
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d001      	beq.n	800c104 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c100:	2303      	movs	r3, #3
 800c102:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c104:	7bfb      	ldrb	r3, [r7, #15]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c10e:	b480      	push	{r7}
 800c110:	b083      	sub	sp, #12
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	460b      	mov	r3, r1
 800c118:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c11a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	460b      	mov	r3, r1
 800c132:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c134:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c136:	4618      	mov	r0, r3
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b086      	sub	sp, #24
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	460b      	mov	r3, r1
 800c14c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c156:	2300      	movs	r3, #0
 800c158:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	885b      	ldrh	r3, [r3, #2]
 800c15e:	b29a      	uxth	r2, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	b29b      	uxth	r3, r3
 800c166:	429a      	cmp	r2, r3
 800c168:	d920      	bls.n	800c1ac <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c172:	e013      	b.n	800c19c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c174:	f107 030a 	add.w	r3, r7, #10
 800c178:	4619      	mov	r1, r3
 800c17a:	6978      	ldr	r0, [r7, #20]
 800c17c:	f000 f81b 	bl	800c1b6 <USBD_GetNextDesc>
 800c180:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	785b      	ldrb	r3, [r3, #1]
 800c186:	2b05      	cmp	r3, #5
 800c188:	d108      	bne.n	800c19c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	789b      	ldrb	r3, [r3, #2]
 800c192:	78fa      	ldrb	r2, [r7, #3]
 800c194:	429a      	cmp	r2, r3
 800c196:	d008      	beq.n	800c1aa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c198:	2300      	movs	r3, #0
 800c19a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	885b      	ldrh	r3, [r3, #2]
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	897b      	ldrh	r3, [r7, #10]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d8e5      	bhi.n	800c174 <USBD_GetEpDesc+0x32>
 800c1a8:	e000      	b.n	800c1ac <USBD_GetEpDesc+0x6a>
          break;
 800c1aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1ac:	693b      	ldr	r3, [r7, #16]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b085      	sub	sp, #20
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	881a      	ldrh	r2, [r3, #0]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	4413      	add	r3, r2
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4413      	add	r3, r2
 800c1e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3714      	adds	r7, #20
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	3301      	adds	r3, #1
 800c206:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c20e:	8a3b      	ldrh	r3, [r7, #16]
 800c210:	021b      	lsls	r3, r3, #8
 800c212:	b21a      	sxth	r2, r3
 800c214:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c218:	4313      	orrs	r3, r2
 800c21a:	b21b      	sxth	r3, r3
 800c21c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c21e:	89fb      	ldrh	r3, [r7, #14]
}
 800c220:	4618      	mov	r0, r3
 800c222:	371c      	adds	r7, #28
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c242:	2b40      	cmp	r3, #64	; 0x40
 800c244:	d005      	beq.n	800c252 <USBD_StdDevReq+0x26>
 800c246:	2b40      	cmp	r3, #64	; 0x40
 800c248:	d857      	bhi.n	800c2fa <USBD_StdDevReq+0xce>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00f      	beq.n	800c26e <USBD_StdDevReq+0x42>
 800c24e:	2b20      	cmp	r3, #32
 800c250:	d153      	bne.n	800c2fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	32ae      	adds	r2, #174	; 0xae
 800c25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c260:	689b      	ldr	r3, [r3, #8]
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	4798      	blx	r3
 800c268:	4603      	mov	r3, r0
 800c26a:	73fb      	strb	r3, [r7, #15]
      break;
 800c26c:	e04a      	b.n	800c304 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	785b      	ldrb	r3, [r3, #1]
 800c272:	2b09      	cmp	r3, #9
 800c274:	d83b      	bhi.n	800c2ee <USBD_StdDevReq+0xc2>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <USBD_StdDevReq+0x50>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c2d1 	.word	0x0800c2d1
 800c280:	0800c2e5 	.word	0x0800c2e5
 800c284:	0800c2ef 	.word	0x0800c2ef
 800c288:	0800c2db 	.word	0x0800c2db
 800c28c:	0800c2ef 	.word	0x0800c2ef
 800c290:	0800c2af 	.word	0x0800c2af
 800c294:	0800c2a5 	.word	0x0800c2a5
 800c298:	0800c2ef 	.word	0x0800c2ef
 800c29c:	0800c2c7 	.word	0x0800c2c7
 800c2a0:	0800c2b9 	.word	0x0800c2b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fa3c 	bl	800c724 <USBD_GetDescriptor>
          break;
 800c2ac:	e024      	b.n	800c2f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fbcb 	bl	800ca4c <USBD_SetAddress>
          break;
 800c2b6:	e01f      	b.n	800c2f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fc0a 	bl	800cad4 <USBD_SetConfig>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	73fb      	strb	r3, [r7, #15]
          break;
 800c2c4:	e018      	b.n	800c2f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fcad 	bl	800cc28 <USBD_GetConfig>
          break;
 800c2ce:	e013      	b.n	800c2f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fcde 	bl	800cc94 <USBD_GetStatus>
          break;
 800c2d8:	e00e      	b.n	800c2f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fd0d 	bl	800ccfc <USBD_SetFeature>
          break;
 800c2e2:	e009      	b.n	800c2f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fd31 	bl	800cd4e <USBD_ClrFeature>
          break;
 800c2ec:	e004      	b.n	800c2f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fd88 	bl	800ce06 <USBD_CtlError>
          break;
 800c2f6:	bf00      	nop
      }
      break;
 800c2f8:	e004      	b.n	800c304 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fd82 	bl	800ce06 <USBD_CtlError>
      break;
 800c302:	bf00      	nop
  }

  return ret;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop

0800c310 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c326:	2b40      	cmp	r3, #64	; 0x40
 800c328:	d005      	beq.n	800c336 <USBD_StdItfReq+0x26>
 800c32a:	2b40      	cmp	r3, #64	; 0x40
 800c32c:	d852      	bhi.n	800c3d4 <USBD_StdItfReq+0xc4>
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <USBD_StdItfReq+0x26>
 800c332:	2b20      	cmp	r3, #32
 800c334:	d14e      	bne.n	800c3d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	3b01      	subs	r3, #1
 800c340:	2b02      	cmp	r3, #2
 800c342:	d840      	bhi.n	800c3c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	889b      	ldrh	r3, [r3, #4]
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d836      	bhi.n	800c3bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	889b      	ldrh	r3, [r3, #4]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff fed9 	bl	800c10e <USBD_CoreFindIF>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c360:	7bbb      	ldrb	r3, [r7, #14]
 800c362:	2bff      	cmp	r3, #255	; 0xff
 800c364:	d01d      	beq.n	800c3a2 <USBD_StdItfReq+0x92>
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d11a      	bne.n	800c3a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c36c:	7bba      	ldrb	r2, [r7, #14]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	32ae      	adds	r2, #174	; 0xae
 800c372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00f      	beq.n	800c39c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c37c:	7bba      	ldrb	r2, [r7, #14]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c384:	7bba      	ldrb	r2, [r7, #14]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	32ae      	adds	r2, #174	; 0xae
 800c38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	4798      	blx	r3
 800c396:	4603      	mov	r3, r0
 800c398:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c39a:	e004      	b.n	800c3a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c39c:	2303      	movs	r3, #3
 800c39e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3a0:	e001      	b.n	800c3a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3a2:	2303      	movs	r3, #3
 800c3a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	88db      	ldrh	r3, [r3, #6]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d110      	bne.n	800c3d0 <USBD_StdItfReq+0xc0>
 800c3ae:	7bfb      	ldrb	r3, [r7, #15]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10d      	bne.n	800c3d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fdf1 	bl	800cf9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3ba:	e009      	b.n	800c3d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fd21 	bl	800ce06 <USBD_CtlError>
          break;
 800c3c4:	e004      	b.n	800c3d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fd1c 	bl	800ce06 <USBD_CtlError>
          break;
 800c3ce:	e000      	b.n	800c3d2 <USBD_StdItfReq+0xc2>
          break;
 800c3d0:	bf00      	nop
      }
      break;
 800c3d2:	e004      	b.n	800c3de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fd15 	bl	800ce06 <USBD_CtlError>
      break;
 800c3dc:	bf00      	nop
  }

  return ret;
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	889b      	ldrh	r3, [r3, #4]
 800c3fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c404:	2b40      	cmp	r3, #64	; 0x40
 800c406:	d007      	beq.n	800c418 <USBD_StdEPReq+0x30>
 800c408:	2b40      	cmp	r3, #64	; 0x40
 800c40a:	f200 817f 	bhi.w	800c70c <USBD_StdEPReq+0x324>
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d02a      	beq.n	800c468 <USBD_StdEPReq+0x80>
 800c412:	2b20      	cmp	r3, #32
 800c414:	f040 817a 	bne.w	800c70c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c418:	7bbb      	ldrb	r3, [r7, #14]
 800c41a:	4619      	mov	r1, r3
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7ff fe83 	bl	800c128 <USBD_CoreFindEP>
 800c422:	4603      	mov	r3, r0
 800c424:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c426:	7b7b      	ldrb	r3, [r7, #13]
 800c428:	2bff      	cmp	r3, #255	; 0xff
 800c42a:	f000 8174 	beq.w	800c716 <USBD_StdEPReq+0x32e>
 800c42e:	7b7b      	ldrb	r3, [r7, #13]
 800c430:	2b00      	cmp	r3, #0
 800c432:	f040 8170 	bne.w	800c716 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c436:	7b7a      	ldrb	r2, [r7, #13]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c43e:	7b7a      	ldrb	r2, [r7, #13]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	32ae      	adds	r2, #174	; 0xae
 800c444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	f000 8163 	beq.w	800c716 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c450:	7b7a      	ldrb	r2, [r7, #13]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	32ae      	adds	r2, #174	; 0xae
 800c456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	6839      	ldr	r1, [r7, #0]
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	4798      	blx	r3
 800c462:	4603      	mov	r3, r0
 800c464:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c466:	e156      	b.n	800c716 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	785b      	ldrb	r3, [r3, #1]
 800c46c:	2b03      	cmp	r3, #3
 800c46e:	d008      	beq.n	800c482 <USBD_StdEPReq+0x9a>
 800c470:	2b03      	cmp	r3, #3
 800c472:	f300 8145 	bgt.w	800c700 <USBD_StdEPReq+0x318>
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 809b 	beq.w	800c5b2 <USBD_StdEPReq+0x1ca>
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d03c      	beq.n	800c4fa <USBD_StdEPReq+0x112>
 800c480:	e13e      	b.n	800c700 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d002      	beq.n	800c494 <USBD_StdEPReq+0xac>
 800c48e:	2b03      	cmp	r3, #3
 800c490:	d016      	beq.n	800c4c0 <USBD_StdEPReq+0xd8>
 800c492:	e02c      	b.n	800c4ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00d      	beq.n	800c4b6 <USBD_StdEPReq+0xce>
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	2b80      	cmp	r3, #128	; 0x80
 800c49e:	d00a      	beq.n	800c4b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f004 fa35 	bl	8010914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4aa:	2180      	movs	r1, #128	; 0x80
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f004 fa31 	bl	8010914 <USBD_LL_StallEP>
 800c4b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4b4:	e020      	b.n	800c4f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fca4 	bl	800ce06 <USBD_CtlError>
              break;
 800c4be:	e01b      	b.n	800c4f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	885b      	ldrh	r3, [r3, #2]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10e      	bne.n	800c4e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00b      	beq.n	800c4e6 <USBD_StdEPReq+0xfe>
 800c4ce:	7bbb      	ldrb	r3, [r7, #14]
 800c4d0:	2b80      	cmp	r3, #128	; 0x80
 800c4d2:	d008      	beq.n	800c4e6 <USBD_StdEPReq+0xfe>
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	88db      	ldrh	r3, [r3, #6]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d104      	bne.n	800c4e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4dc:	7bbb      	ldrb	r3, [r7, #14]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f004 fa17 	bl	8010914 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fd58 	bl	800cf9c <USBD_CtlSendStatus>

              break;
 800c4ec:	e004      	b.n	800c4f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 fc88 	bl	800ce06 <USBD_CtlError>
              break;
 800c4f6:	bf00      	nop
          }
          break;
 800c4f8:	e107      	b.n	800c70a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c500:	b2db      	uxtb	r3, r3
 800c502:	2b02      	cmp	r3, #2
 800c504:	d002      	beq.n	800c50c <USBD_StdEPReq+0x124>
 800c506:	2b03      	cmp	r3, #3
 800c508:	d016      	beq.n	800c538 <USBD_StdEPReq+0x150>
 800c50a:	e04b      	b.n	800c5a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c50c:	7bbb      	ldrb	r3, [r7, #14]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00d      	beq.n	800c52e <USBD_StdEPReq+0x146>
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	2b80      	cmp	r3, #128	; 0x80
 800c516:	d00a      	beq.n	800c52e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c518:	7bbb      	ldrb	r3, [r7, #14]
 800c51a:	4619      	mov	r1, r3
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f004 f9f9 	bl	8010914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c522:	2180      	movs	r1, #128	; 0x80
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f004 f9f5 	bl	8010914 <USBD_LL_StallEP>
 800c52a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c52c:	e040      	b.n	800c5b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fc68 	bl	800ce06 <USBD_CtlError>
              break;
 800c536:	e03b      	b.n	800c5b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	885b      	ldrh	r3, [r3, #2]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d136      	bne.n	800c5ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c540:	7bbb      	ldrb	r3, [r7, #14]
 800c542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c546:	2b00      	cmp	r3, #0
 800c548:	d004      	beq.n	800c554 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c54a:	7bbb      	ldrb	r3, [r7, #14]
 800c54c:	4619      	mov	r1, r3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f004 fa16 	bl	8010980 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fd21 	bl	800cf9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c55a:	7bbb      	ldrb	r3, [r7, #14]
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff fde2 	bl	800c128 <USBD_CoreFindEP>
 800c564:	4603      	mov	r3, r0
 800c566:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c568:	7b7b      	ldrb	r3, [r7, #13]
 800c56a:	2bff      	cmp	r3, #255	; 0xff
 800c56c:	d01f      	beq.n	800c5ae <USBD_StdEPReq+0x1c6>
 800c56e:	7b7b      	ldrb	r3, [r7, #13]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d11c      	bne.n	800c5ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c574:	7b7a      	ldrb	r2, [r7, #13]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c57c:	7b7a      	ldrb	r2, [r7, #13]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	32ae      	adds	r2, #174	; 0xae
 800c582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d010      	beq.n	800c5ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c58c:	7b7a      	ldrb	r2, [r7, #13]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	32ae      	adds	r2, #174	; 0xae
 800c592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	4798      	blx	r3
 800c59e:	4603      	mov	r3, r0
 800c5a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5a2:	e004      	b.n	800c5ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fc2d 	bl	800ce06 <USBD_CtlError>
              break;
 800c5ac:	e000      	b.n	800c5b0 <USBD_StdEPReq+0x1c8>
              break;
 800c5ae:	bf00      	nop
          }
          break;
 800c5b0:	e0ab      	b.n	800c70a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d002      	beq.n	800c5c4 <USBD_StdEPReq+0x1dc>
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d032      	beq.n	800c628 <USBD_StdEPReq+0x240>
 800c5c2:	e097      	b.n	800c6f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5c4:	7bbb      	ldrb	r3, [r7, #14]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d007      	beq.n	800c5da <USBD_StdEPReq+0x1f2>
 800c5ca:	7bbb      	ldrb	r3, [r7, #14]
 800c5cc:	2b80      	cmp	r3, #128	; 0x80
 800c5ce:	d004      	beq.n	800c5da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 fc17 	bl	800ce06 <USBD_CtlError>
                break;
 800c5d8:	e091      	b.n	800c6fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	da0b      	bge.n	800c5fa <USBD_StdEPReq+0x212>
 800c5e2:	7bbb      	ldrb	r3, [r7, #14]
 800c5e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	4413      	add	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	3310      	adds	r3, #16
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	e00b      	b.n	800c612 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5fa:	7bbb      	ldrb	r3, [r7, #14]
 800c5fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c600:	4613      	mov	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	4413      	add	r3, r2
 800c610:	3304      	adds	r3, #4
 800c612:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	2202      	movs	r2, #2
 800c61e:	4619      	mov	r1, r3
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fc61 	bl	800cee8 <USBD_CtlSendData>
              break;
 800c626:	e06a      	b.n	800c6fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	da11      	bge.n	800c654 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c630:	7bbb      	ldrb	r3, [r7, #14]
 800c632:	f003 020f 	and.w	r2, r3, #15
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	440b      	add	r3, r1
 800c642:	3324      	adds	r3, #36	; 0x24
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d117      	bne.n	800c67a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fbda 	bl	800ce06 <USBD_CtlError>
                  break;
 800c652:	e054      	b.n	800c6fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c654:	7bbb      	ldrb	r3, [r7, #14]
 800c656:	f003 020f 	and.w	r2, r3, #15
 800c65a:	6879      	ldr	r1, [r7, #4]
 800c65c:	4613      	mov	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4413      	add	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	440b      	add	r3, r1
 800c666:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d104      	bne.n	800c67a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c670:	6839      	ldr	r1, [r7, #0]
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 fbc7 	bl	800ce06 <USBD_CtlError>
                  break;
 800c678:	e041      	b.n	800c6fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c67a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	da0b      	bge.n	800c69a <USBD_StdEPReq+0x2b2>
 800c682:	7bbb      	ldrb	r3, [r7, #14]
 800c684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c688:	4613      	mov	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	3310      	adds	r3, #16
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	4413      	add	r3, r2
 800c696:	3304      	adds	r3, #4
 800c698:	e00b      	b.n	800c6b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c69a:	7bbb      	ldrb	r3, [r7, #14]
 800c69c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6b4:	7bbb      	ldrb	r3, [r7, #14]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d002      	beq.n	800c6c0 <USBD_StdEPReq+0x2d8>
 800c6ba:	7bbb      	ldrb	r3, [r7, #14]
 800c6bc:	2b80      	cmp	r3, #128	; 0x80
 800c6be:	d103      	bne.n	800c6c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]
 800c6c6:	e00e      	b.n	800c6e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f004 f98d 	bl	80109ec <USBD_LL_IsStallEP>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d003      	beq.n	800c6e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	e002      	b.n	800c6e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fbfb 	bl	800cee8 <USBD_CtlSendData>
              break;
 800c6f2:	e004      	b.n	800c6fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 fb85 	bl	800ce06 <USBD_CtlError>
              break;
 800c6fc:	bf00      	nop
          }
          break;
 800c6fe:	e004      	b.n	800c70a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fb7f 	bl	800ce06 <USBD_CtlError>
          break;
 800c708:	bf00      	nop
      }
      break;
 800c70a:	e005      	b.n	800c718 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fb79 	bl	800ce06 <USBD_CtlError>
      break;
 800c714:	e000      	b.n	800c718 <USBD_StdEPReq+0x330>
      break;
 800c716:	bf00      	nop
  }

  return ret;
 800c718:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
	...

0800c724 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c72e:	2300      	movs	r3, #0
 800c730:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c732:	2300      	movs	r3, #0
 800c734:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c736:	2300      	movs	r3, #0
 800c738:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	885b      	ldrh	r3, [r3, #2]
 800c73e:	0a1b      	lsrs	r3, r3, #8
 800c740:	b29b      	uxth	r3, r3
 800c742:	3b01      	subs	r3, #1
 800c744:	2b0e      	cmp	r3, #14
 800c746:	f200 8152 	bhi.w	800c9ee <USBD_GetDescriptor+0x2ca>
 800c74a:	a201      	add	r2, pc, #4	; (adr r2, 800c750 <USBD_GetDescriptor+0x2c>)
 800c74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c750:	0800c7c1 	.word	0x0800c7c1
 800c754:	0800c7d9 	.word	0x0800c7d9
 800c758:	0800c819 	.word	0x0800c819
 800c75c:	0800c9ef 	.word	0x0800c9ef
 800c760:	0800c9ef 	.word	0x0800c9ef
 800c764:	0800c98f 	.word	0x0800c98f
 800c768:	0800c9bb 	.word	0x0800c9bb
 800c76c:	0800c9ef 	.word	0x0800c9ef
 800c770:	0800c9ef 	.word	0x0800c9ef
 800c774:	0800c9ef 	.word	0x0800c9ef
 800c778:	0800c9ef 	.word	0x0800c9ef
 800c77c:	0800c9ef 	.word	0x0800c9ef
 800c780:	0800c9ef 	.word	0x0800c9ef
 800c784:	0800c9ef 	.word	0x0800c9ef
 800c788:	0800c78d 	.word	0x0800c78d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c792:	69db      	ldr	r3, [r3, #28]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00b      	beq.n	800c7b0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c79e:	69db      	ldr	r3, [r3, #28]
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	7c12      	ldrb	r2, [r2, #16]
 800c7a4:	f107 0108 	add.w	r1, r7, #8
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	4798      	blx	r3
 800c7ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7ae:	e126      	b.n	800c9fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fb27 	bl	800ce06 <USBD_CtlError>
        err++;
 800c7b8:	7afb      	ldrb	r3, [r7, #11]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	72fb      	strb	r3, [r7, #11]
      break;
 800c7be:	e11e      	b.n	800c9fe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	7c12      	ldrb	r2, [r2, #16]
 800c7cc:	f107 0108 	add.w	r1, r7, #8
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	4798      	blx	r3
 800c7d4:	60f8      	str	r0, [r7, #12]
      break;
 800c7d6:	e112      	b.n	800c9fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	7c1b      	ldrb	r3, [r3, #16]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d10d      	bne.n	800c7fc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e8:	f107 0208 	add.w	r2, r7, #8
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	4798      	blx	r3
 800c7f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c7fa:	e100      	b.n	800c9fe <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c804:	f107 0208 	add.w	r2, r7, #8
 800c808:	4610      	mov	r0, r2
 800c80a:	4798      	blx	r3
 800c80c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3301      	adds	r3, #1
 800c812:	2202      	movs	r2, #2
 800c814:	701a      	strb	r2, [r3, #0]
      break;
 800c816:	e0f2      	b.n	800c9fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	885b      	ldrh	r3, [r3, #2]
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b05      	cmp	r3, #5
 800c820:	f200 80ac 	bhi.w	800c97c <USBD_GetDescriptor+0x258>
 800c824:	a201      	add	r2, pc, #4	; (adr r2, 800c82c <USBD_GetDescriptor+0x108>)
 800c826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82a:	bf00      	nop
 800c82c:	0800c845 	.word	0x0800c845
 800c830:	0800c879 	.word	0x0800c879
 800c834:	0800c8ad 	.word	0x0800c8ad
 800c838:	0800c8e1 	.word	0x0800c8e1
 800c83c:	0800c915 	.word	0x0800c915
 800c840:	0800c949 	.word	0x0800c949
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00b      	beq.n	800c868 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	7c12      	ldrb	r2, [r2, #16]
 800c85c:	f107 0108 	add.w	r1, r7, #8
 800c860:	4610      	mov	r0, r2
 800c862:	4798      	blx	r3
 800c864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c866:	e091      	b.n	800c98c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 facb 	bl	800ce06 <USBD_CtlError>
            err++;
 800c870:	7afb      	ldrb	r3, [r7, #11]
 800c872:	3301      	adds	r3, #1
 800c874:	72fb      	strb	r3, [r7, #11]
          break;
 800c876:	e089      	b.n	800c98c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00b      	beq.n	800c89c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	7c12      	ldrb	r2, [r2, #16]
 800c890:	f107 0108 	add.w	r1, r7, #8
 800c894:	4610      	mov	r0, r2
 800c896:	4798      	blx	r3
 800c898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c89a:	e077      	b.n	800c98c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fab1 	bl	800ce06 <USBD_CtlError>
            err++;
 800c8a4:	7afb      	ldrb	r3, [r7, #11]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8aa:	e06f      	b.n	800c98c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d00b      	beq.n	800c8d0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	7c12      	ldrb	r2, [r2, #16]
 800c8c4:	f107 0108 	add.w	r1, r7, #8
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	4798      	blx	r3
 800c8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ce:	e05d      	b.n	800c98c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fa97 	bl	800ce06 <USBD_CtlError>
            err++;
 800c8d8:	7afb      	ldrb	r3, [r7, #11]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c8de:	e055      	b.n	800c98c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00b      	beq.n	800c904 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	7c12      	ldrb	r2, [r2, #16]
 800c8f8:	f107 0108 	add.w	r1, r7, #8
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3
 800c900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c902:	e043      	b.n	800c98c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fa7d 	bl	800ce06 <USBD_CtlError>
            err++;
 800c90c:	7afb      	ldrb	r3, [r7, #11]
 800c90e:	3301      	adds	r3, #1
 800c910:	72fb      	strb	r3, [r7, #11]
          break;
 800c912:	e03b      	b.n	800c98c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c91a:	695b      	ldr	r3, [r3, #20]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00b      	beq.n	800c938 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c926:	695b      	ldr	r3, [r3, #20]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	7c12      	ldrb	r2, [r2, #16]
 800c92c:	f107 0108 	add.w	r1, r7, #8
 800c930:	4610      	mov	r0, r2
 800c932:	4798      	blx	r3
 800c934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c936:	e029      	b.n	800c98c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c938:	6839      	ldr	r1, [r7, #0]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fa63 	bl	800ce06 <USBD_CtlError>
            err++;
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	3301      	adds	r3, #1
 800c944:	72fb      	strb	r3, [r7, #11]
          break;
 800c946:	e021      	b.n	800c98c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00b      	beq.n	800c96c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	7c12      	ldrb	r2, [r2, #16]
 800c960:	f107 0108 	add.w	r1, r7, #8
 800c964:	4610      	mov	r0, r2
 800c966:	4798      	blx	r3
 800c968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c96a:	e00f      	b.n	800c98c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fa49 	bl	800ce06 <USBD_CtlError>
            err++;
 800c974:	7afb      	ldrb	r3, [r7, #11]
 800c976:	3301      	adds	r3, #1
 800c978:	72fb      	strb	r3, [r7, #11]
          break;
 800c97a:	e007      	b.n	800c98c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fa41 	bl	800ce06 <USBD_CtlError>
          err++;
 800c984:	7afb      	ldrb	r3, [r7, #11]
 800c986:	3301      	adds	r3, #1
 800c988:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c98a:	bf00      	nop
      }
      break;
 800c98c:	e037      	b.n	800c9fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	7c1b      	ldrb	r3, [r3, #16]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d109      	bne.n	800c9aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c99e:	f107 0208 	add.w	r2, r7, #8
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	4798      	blx	r3
 800c9a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9a8:	e029      	b.n	800c9fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fa2a 	bl	800ce06 <USBD_CtlError>
        err++;
 800c9b2:	7afb      	ldrb	r3, [r7, #11]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c9b8:	e021      	b.n	800c9fe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	7c1b      	ldrb	r3, [r3, #16]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10d      	bne.n	800c9de <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ca:	f107 0208 	add.w	r2, r7, #8
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	4798      	blx	r3
 800c9d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	2207      	movs	r2, #7
 800c9da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9dc:	e00f      	b.n	800c9fe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9de:	6839      	ldr	r1, [r7, #0]
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fa10 	bl	800ce06 <USBD_CtlError>
        err++;
 800c9e6:	7afb      	ldrb	r3, [r7, #11]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	72fb      	strb	r3, [r7, #11]
      break;
 800c9ec:	e007      	b.n	800c9fe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fa08 	bl	800ce06 <USBD_CtlError>
      err++;
 800c9f6:	7afb      	ldrb	r3, [r7, #11]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	72fb      	strb	r3, [r7, #11]
      break;
 800c9fc:	bf00      	nop
  }

  if (err != 0U)
 800c9fe:	7afb      	ldrb	r3, [r7, #11]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d11e      	bne.n	800ca42 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	88db      	ldrh	r3, [r3, #6]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d016      	beq.n	800ca3a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ca0c:	893b      	ldrh	r3, [r7, #8]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00e      	beq.n	800ca30 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	88da      	ldrh	r2, [r3, #6]
 800ca16:	893b      	ldrh	r3, [r7, #8]
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	bf28      	it	cs
 800ca1c:	4613      	movcs	r3, r2
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca22:	893b      	ldrh	r3, [r7, #8]
 800ca24:	461a      	mov	r2, r3
 800ca26:	68f9      	ldr	r1, [r7, #12]
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fa5d 	bl	800cee8 <USBD_CtlSendData>
 800ca2e:	e009      	b.n	800ca44 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f9e7 	bl	800ce06 <USBD_CtlError>
 800ca38:	e004      	b.n	800ca44 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 faae 	bl	800cf9c <USBD_CtlSendStatus>
 800ca40:	e000      	b.n	800ca44 <USBD_GetDescriptor+0x320>
    return;
 800ca42:	bf00      	nop
  }
}
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop

0800ca4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	889b      	ldrh	r3, [r3, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d131      	bne.n	800cac2 <USBD_SetAddress+0x76>
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	88db      	ldrh	r3, [r3, #6]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d12d      	bne.n	800cac2 <USBD_SetAddress+0x76>
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	885b      	ldrh	r3, [r3, #2]
 800ca6a:	2b7f      	cmp	r3, #127	; 0x7f
 800ca6c:	d829      	bhi.n	800cac2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	885b      	ldrh	r3, [r3, #2]
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d104      	bne.n	800ca90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f9bc 	bl	800ce06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8e:	e01d      	b.n	800cacc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	7bfa      	ldrb	r2, [r7, #15]
 800ca94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f003 ffd1 	bl	8010a44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fa7a 	bl	800cf9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d004      	beq.n	800cab8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2202      	movs	r2, #2
 800cab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cab6:	e009      	b.n	800cacc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cac0:	e004      	b.n	800cacc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cac2:	6839      	ldr	r1, [r7, #0]
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f99e 	bl	800ce06 <USBD_CtlError>
  }
}
 800caca:	bf00      	nop
 800cacc:	bf00      	nop
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	885b      	ldrh	r3, [r3, #2]
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	4b4e      	ldr	r3, [pc, #312]	; (800cc24 <USBD_SetConfig+0x150>)
 800caea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800caec:	4b4d      	ldr	r3, [pc, #308]	; (800cc24 <USBD_SetConfig+0x150>)
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d905      	bls.n	800cb00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f985 	bl	800ce06 <USBD_CtlError>
    return USBD_FAIL;
 800cafc:	2303      	movs	r3, #3
 800cafe:	e08c      	b.n	800cc1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d002      	beq.n	800cb12 <USBD_SetConfig+0x3e>
 800cb0c:	2b03      	cmp	r3, #3
 800cb0e:	d029      	beq.n	800cb64 <USBD_SetConfig+0x90>
 800cb10:	e075      	b.n	800cbfe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cb12:	4b44      	ldr	r3, [pc, #272]	; (800cc24 <USBD_SetConfig+0x150>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d020      	beq.n	800cb5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cb1a:	4b42      	ldr	r3, [pc, #264]	; (800cc24 <USBD_SetConfig+0x150>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb24:	4b3f      	ldr	r3, [pc, #252]	; (800cc24 <USBD_SetConfig+0x150>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7fe ffb7 	bl	800ba9e <USBD_SetClassConfig>
 800cb30:	4603      	mov	r3, r0
 800cb32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d008      	beq.n	800cb4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb3a:	6839      	ldr	r1, [r7, #0]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f962 	bl	800ce06 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2202      	movs	r2, #2
 800cb46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb4a:	e065      	b.n	800cc18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fa25 	bl	800cf9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2203      	movs	r2, #3
 800cb56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cb5a:	e05d      	b.n	800cc18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fa1d 	bl	800cf9c <USBD_CtlSendStatus>
      break;
 800cb62:	e059      	b.n	800cc18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb64:	4b2f      	ldr	r3, [pc, #188]	; (800cc24 <USBD_SetConfig+0x150>)
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d112      	bne.n	800cb92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2202      	movs	r2, #2
 800cb70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cb74:	4b2b      	ldr	r3, [pc, #172]	; (800cc24 <USBD_SetConfig+0x150>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb7e:	4b29      	ldr	r3, [pc, #164]	; (800cc24 <USBD_SetConfig+0x150>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7fe ffa6 	bl	800bad6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fa06 	bl	800cf9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb90:	e042      	b.n	800cc18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb92:	4b24      	ldr	r3, [pc, #144]	; (800cc24 <USBD_SetConfig+0x150>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	461a      	mov	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d02a      	beq.n	800cbf6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7fe ff94 	bl	800bad6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cbae:	4b1d      	ldr	r3, [pc, #116]	; (800cc24 <USBD_SetConfig+0x150>)
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbb8:	4b1a      	ldr	r3, [pc, #104]	; (800cc24 <USBD_SetConfig+0x150>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7fe ff6d 	bl	800ba9e <USBD_SetClassConfig>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00f      	beq.n	800cbee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f918 	bl	800ce06 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7fe ff79 	bl	800bad6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2202      	movs	r2, #2
 800cbe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cbec:	e014      	b.n	800cc18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f9d4 	bl	800cf9c <USBD_CtlSendStatus>
      break;
 800cbf4:	e010      	b.n	800cc18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f9d0 	bl	800cf9c <USBD_CtlSendStatus>
      break;
 800cbfc:	e00c      	b.n	800cc18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cbfe:	6839      	ldr	r1, [r7, #0]
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 f900 	bl	800ce06 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc06:	4b07      	ldr	r3, [pc, #28]	; (800cc24 <USBD_SetConfig+0x150>)
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7fe ff62 	bl	800bad6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cc12:	2303      	movs	r3, #3
 800cc14:	73fb      	strb	r3, [r7, #15]
      break;
 800cc16:	bf00      	nop
  }

  return ret;
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	2000c6a0 	.word	0x2000c6a0

0800cc28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	88db      	ldrh	r3, [r3, #6]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d004      	beq.n	800cc44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f8e2 	bl	800ce06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc42:	e023      	b.n	800cc8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	dc02      	bgt.n	800cc56 <USBD_GetConfig+0x2e>
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	dc03      	bgt.n	800cc5c <USBD_GetConfig+0x34>
 800cc54:	e015      	b.n	800cc82 <USBD_GetConfig+0x5a>
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d00b      	beq.n	800cc72 <USBD_GetConfig+0x4a>
 800cc5a:	e012      	b.n	800cc82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	3308      	adds	r3, #8
 800cc66:	2201      	movs	r2, #1
 800cc68:	4619      	mov	r1, r3
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f93c 	bl	800cee8 <USBD_CtlSendData>
        break;
 800cc70:	e00c      	b.n	800cc8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	3304      	adds	r3, #4
 800cc76:	2201      	movs	r2, #1
 800cc78:	4619      	mov	r1, r3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f934 	bl	800cee8 <USBD_CtlSendData>
        break;
 800cc80:	e004      	b.n	800cc8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 f8be 	bl	800ce06 <USBD_CtlError>
        break;
 800cc8a:	bf00      	nop
}
 800cc8c:	bf00      	nop
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	3b01      	subs	r3, #1
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d81e      	bhi.n	800ccea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	88db      	ldrh	r3, [r3, #6]
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	d004      	beq.n	800ccbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 f8a5 	bl	800ce06 <USBD_CtlError>
        break;
 800ccbc:	e01a      	b.n	800ccf4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	f043 0202 	orr.w	r2, r3, #2
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	330c      	adds	r3, #12
 800ccde:	2202      	movs	r2, #2
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f900 	bl	800cee8 <USBD_CtlSendData>
      break;
 800cce8:	e004      	b.n	800ccf4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ccea:	6839      	ldr	r1, [r7, #0]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 f88a 	bl	800ce06 <USBD_CtlError>
      break;
 800ccf2:	bf00      	nop
  }
}
 800ccf4:	bf00      	nop
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	885b      	ldrh	r3, [r3, #2]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d107      	bne.n	800cd1e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2201      	movs	r2, #1
 800cd12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 f940 	bl	800cf9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cd1c:	e013      	b.n	800cd46 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	885b      	ldrh	r3, [r3, #2]
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d10b      	bne.n	800cd3e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	889b      	ldrh	r3, [r3, #4]
 800cd2a:	0a1b      	lsrs	r3, r3, #8
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	b2da      	uxtb	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 f930 	bl	800cf9c <USBD_CtlSendStatus>
}
 800cd3c:	e003      	b.n	800cd46 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f860 	bl	800ce06 <USBD_CtlError>
}
 800cd46:	bf00      	nop
 800cd48:	3708      	adds	r7, #8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}

0800cd4e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b082      	sub	sp, #8
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
 800cd56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	3b01      	subs	r3, #1
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d80b      	bhi.n	800cd7e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	885b      	ldrh	r3, [r3, #2]
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d10c      	bne.n	800cd88 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f910 	bl	800cf9c <USBD_CtlSendStatus>
      }
      break;
 800cd7c:	e004      	b.n	800cd88 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd7e:	6839      	ldr	r1, [r7, #0]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 f840 	bl	800ce06 <USBD_CtlError>
      break;
 800cd86:	e000      	b.n	800cd8a <USBD_ClrFeature+0x3c>
      break;
 800cd88:	bf00      	nop
  }
}
 800cd8a:	bf00      	nop
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b084      	sub	sp, #16
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
 800cd9a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	781a      	ldrb	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	781a      	ldrb	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f7ff fa17 	bl	800c1f0 <SWAPBYTE>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cdd6:	68f8      	ldr	r0, [r7, #12]
 800cdd8:	f7ff fa0a 	bl	800c1f0 <SWAPBYTE>
 800cddc:	4603      	mov	r3, r0
 800cdde:	461a      	mov	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	3301      	adds	r3, #1
 800cde8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	3301      	adds	r3, #1
 800cdee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f7ff f9fd 	bl	800c1f0 <SWAPBYTE>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	80da      	strh	r2, [r3, #6]
}
 800cdfe:	bf00      	nop
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b082      	sub	sp, #8
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
 800ce0e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce10:	2180      	movs	r1, #128	; 0x80
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f003 fd7e 	bl	8010914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce18:	2100      	movs	r1, #0
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f003 fd7a 	bl	8010914 <USBD_LL_StallEP>
}
 800ce20:	bf00      	nop
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b086      	sub	sp, #24
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce34:	2300      	movs	r3, #0
 800ce36:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d036      	beq.n	800ceac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ce42:	6938      	ldr	r0, [r7, #16]
 800ce44:	f000 f836 	bl	800ceb4 <USBD_GetLen>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	005b      	lsls	r3, r3, #1
 800ce50:	b29a      	uxth	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce56:	7dfb      	ldrb	r3, [r7, #23]
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	7812      	ldrb	r2, [r2, #0]
 800ce60:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce62:	7dfb      	ldrb	r3, [r7, #23]
 800ce64:	3301      	adds	r3, #1
 800ce66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce68:	7dfb      	ldrb	r3, [r7, #23]
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	2203      	movs	r2, #3
 800ce70:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce72:	7dfb      	ldrb	r3, [r7, #23]
 800ce74:	3301      	adds	r3, #1
 800ce76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce78:	e013      	b.n	800cea2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ce7a:	7dfb      	ldrb	r3, [r7, #23]
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	4413      	add	r3, r2
 800ce80:	693a      	ldr	r2, [r7, #16]
 800ce82:	7812      	ldrb	r2, [r2, #0]
 800ce84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	613b      	str	r3, [r7, #16]
    idx++;
 800ce8c:	7dfb      	ldrb	r3, [r7, #23]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce92:	7dfb      	ldrb	r3, [r7, #23]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	4413      	add	r3, r2
 800ce98:	2200      	movs	r2, #0
 800ce9a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1e7      	bne.n	800ce7a <USBD_GetString+0x52>
 800ceaa:	e000      	b.n	800ceae <USBD_GetString+0x86>
    return;
 800ceac:	bf00      	nop
  }
}
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cec4:	e005      	b.n	800ced2 <USBD_GetLen+0x1e>
  {
    len++;
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
 800cec8:	3301      	adds	r3, #1
 800ceca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	3301      	adds	r3, #1
 800ced0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1f5      	bne.n	800cec6 <USBD_GetLen+0x12>
  }

  return len;
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2202      	movs	r2, #2
 800cef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	2100      	movs	r1, #0
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f003 fdce 	bl	8010ab0 <USBD_LL_Transmit>

  return USBD_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b084      	sub	sp, #16
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	60f8      	str	r0, [r7, #12]
 800cf26:	60b9      	str	r1, [r7, #8]
 800cf28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	2100      	movs	r1, #0
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f003 fdbd 	bl	8010ab0 <USBD_LL_Transmit>

  return USBD_OK;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2203      	movs	r2, #3
 800cf50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	2100      	movs	r1, #0
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f003 fdd8 	bl	8010b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	60f8      	str	r0, [r7, #12]
 800cf82:	60b9      	str	r1, [r7, #8]
 800cf84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	68f8      	ldr	r0, [r7, #12]
 800cf8e:	f003 fdc7 	bl	8010b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3710      	adds	r7, #16
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2204      	movs	r2, #4
 800cfa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfac:	2300      	movs	r3, #0
 800cfae:	2200      	movs	r2, #0
 800cfb0:	2100      	movs	r1, #0
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f003 fd7c 	bl	8010ab0 <USBD_LL_Transmit>

  return USBD_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2205      	movs	r2, #5
 800cfce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f003 fda1 	bl	8010b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfde:	2300      	movs	r3, #0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	4603      	mov	r3, r0
 800cff0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cff2:	79fb      	ldrb	r3, [r7, #7]
 800cff4:	4a08      	ldr	r2, [pc, #32]	; (800d018 <disk_status+0x30>)
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	79fa      	ldrb	r2, [r7, #7]
 800d000:	4905      	ldr	r1, [pc, #20]	; (800d018 <disk_status+0x30>)
 800d002:	440a      	add	r2, r1
 800d004:	7a12      	ldrb	r2, [r2, #8]
 800d006:	4610      	mov	r0, r2
 800d008:	4798      	blx	r3
 800d00a:	4603      	mov	r3, r0
 800d00c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	2000c6cc 	.word	0x2000c6cc

0800d01c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	4603      	mov	r3, r0
 800d024:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d026:	2300      	movs	r3, #0
 800d028:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	4a0d      	ldr	r2, [pc, #52]	; (800d064 <disk_initialize+0x48>)
 800d02e:	5cd3      	ldrb	r3, [r2, r3]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d111      	bne.n	800d058 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	4a0b      	ldr	r2, [pc, #44]	; (800d064 <disk_initialize+0x48>)
 800d038:	2101      	movs	r1, #1
 800d03a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d03c:	79fb      	ldrb	r3, [r7, #7]
 800d03e:	4a09      	ldr	r2, [pc, #36]	; (800d064 <disk_initialize+0x48>)
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	4413      	add	r3, r2
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	79fa      	ldrb	r2, [r7, #7]
 800d04a:	4906      	ldr	r1, [pc, #24]	; (800d064 <disk_initialize+0x48>)
 800d04c:	440a      	add	r2, r1
 800d04e:	7a12      	ldrb	r2, [r2, #8]
 800d050:	4610      	mov	r0, r2
 800d052:	4798      	blx	r3
 800d054:	4603      	mov	r3, r0
 800d056:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d058:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	2000c6cc 	.word	0x2000c6cc

0800d068 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d068:	b590      	push	{r4, r7, lr}
 800d06a:	b087      	sub	sp, #28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60b9      	str	r1, [r7, #8]
 800d070:	607a      	str	r2, [r7, #4]
 800d072:	603b      	str	r3, [r7, #0]
 800d074:	4603      	mov	r3, r0
 800d076:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d078:	7bfb      	ldrb	r3, [r7, #15]
 800d07a:	4a0a      	ldr	r2, [pc, #40]	; (800d0a4 <disk_read+0x3c>)
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	689c      	ldr	r4, [r3, #8]
 800d084:	7bfb      	ldrb	r3, [r7, #15]
 800d086:	4a07      	ldr	r2, [pc, #28]	; (800d0a4 <disk_read+0x3c>)
 800d088:	4413      	add	r3, r2
 800d08a:	7a18      	ldrb	r0, [r3, #8]
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	68b9      	ldr	r1, [r7, #8]
 800d092:	47a0      	blx	r4
 800d094:	4603      	mov	r3, r0
 800d096:	75fb      	strb	r3, [r7, #23]
  return res;
 800d098:	7dfb      	ldrb	r3, [r7, #23]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	371c      	adds	r7, #28
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd90      	pop	{r4, r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	2000c6cc 	.word	0x2000c6cc

0800d0a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d0a8:	b590      	push	{r4, r7, lr}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60b9      	str	r1, [r7, #8]
 800d0b0:	607a      	str	r2, [r7, #4]
 800d0b2:	603b      	str	r3, [r7, #0]
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d0b8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ba:	4a0a      	ldr	r2, [pc, #40]	; (800d0e4 <disk_write+0x3c>)
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4413      	add	r3, r2
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	68dc      	ldr	r4, [r3, #12]
 800d0c4:	7bfb      	ldrb	r3, [r7, #15]
 800d0c6:	4a07      	ldr	r2, [pc, #28]	; (800d0e4 <disk_write+0x3c>)
 800d0c8:	4413      	add	r3, r2
 800d0ca:	7a18      	ldrb	r0, [r3, #8]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	68b9      	ldr	r1, [r7, #8]
 800d0d2:	47a0      	blx	r4
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	371c      	adds	r7, #28
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd90      	pop	{r4, r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	2000c6cc 	.word	0x2000c6cc

0800d0e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	603a      	str	r2, [r7, #0]
 800d0f2:	71fb      	strb	r3, [r7, #7]
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d0f8:	79fb      	ldrb	r3, [r7, #7]
 800d0fa:	4a09      	ldr	r2, [pc, #36]	; (800d120 <disk_ioctl+0x38>)
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	4413      	add	r3, r2
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	79fa      	ldrb	r2, [r7, #7]
 800d106:	4906      	ldr	r1, [pc, #24]	; (800d120 <disk_ioctl+0x38>)
 800d108:	440a      	add	r2, r1
 800d10a:	7a10      	ldrb	r0, [r2, #8]
 800d10c:	79b9      	ldrb	r1, [r7, #6]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	4798      	blx	r3
 800d112:	4603      	mov	r3, r0
 800d114:	73fb      	strb	r3, [r7, #15]
  return res;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	2000c6cc 	.word	0x2000c6cc

0800d124 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	3301      	adds	r3, #1
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d134:	89fb      	ldrh	r3, [r7, #14]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	b21a      	sxth	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	b21b      	sxth	r3, r3
 800d140:	4313      	orrs	r3, r2
 800d142:	b21b      	sxth	r3, r3
 800d144:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d146:	89fb      	ldrh	r3, [r7, #14]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d154:	b480      	push	{r7}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	3303      	adds	r3, #3
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	021b      	lsls	r3, r3, #8
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	3202      	adds	r2, #2
 800d16c:	7812      	ldrb	r2, [r2, #0]
 800d16e:	4313      	orrs	r3, r2
 800d170:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	021b      	lsls	r3, r3, #8
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	3201      	adds	r2, #1
 800d17a:	7812      	ldrb	r2, [r2, #0]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	021b      	lsls	r3, r3, #8
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	7812      	ldrb	r2, [r2, #0]
 800d188:	4313      	orrs	r3, r2
 800d18a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d18c:	68fb      	ldr	r3, [r7, #12]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	1c5a      	adds	r2, r3, #1
 800d1aa:	607a      	str	r2, [r7, #4]
 800d1ac:	887a      	ldrh	r2, [r7, #2]
 800d1ae:	b2d2      	uxtb	r2, r2
 800d1b0:	701a      	strb	r2, [r3, #0]
 800d1b2:	887b      	ldrh	r3, [r7, #2]
 800d1b4:	0a1b      	lsrs	r3, r3, #8
 800d1b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	1c5a      	adds	r2, r3, #1
 800d1bc:	607a      	str	r2, [r7, #4]
 800d1be:	887a      	ldrh	r2, [r7, #2]
 800d1c0:	b2d2      	uxtb	r2, r2
 800d1c2:	701a      	strb	r2, [r3, #0]
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	1c5a      	adds	r2, r3, #1
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	683a      	ldr	r2, [r7, #0]
 800d1e2:	b2d2      	uxtb	r2, r2
 800d1e4:	701a      	strb	r2, [r3, #0]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	0a1b      	lsrs	r3, r3, #8
 800d1ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	1c5a      	adds	r2, r3, #1
 800d1f0:	607a      	str	r2, [r7, #4]
 800d1f2:	683a      	ldr	r2, [r7, #0]
 800d1f4:	b2d2      	uxtb	r2, r2
 800d1f6:	701a      	strb	r2, [r3, #0]
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	0a1b      	lsrs	r3, r3, #8
 800d1fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	607a      	str	r2, [r7, #4]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	b2d2      	uxtb	r2, r2
 800d208:	701a      	strb	r2, [r3, #0]
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	0a1b      	lsrs	r3, r3, #8
 800d20e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	1c5a      	adds	r2, r3, #1
 800d214:	607a      	str	r2, [r7, #4]
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	b2d2      	uxtb	r2, r2
 800d21a:	701a      	strb	r2, [r3, #0]
}
 800d21c:	bf00      	nop
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d228:	b480      	push	{r7}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00d      	beq.n	800d25e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	1c53      	adds	r3, r2, #1
 800d246:	613b      	str	r3, [r7, #16]
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	1c59      	adds	r1, r3, #1
 800d24c:	6179      	str	r1, [r7, #20]
 800d24e:	7812      	ldrb	r2, [r2, #0]
 800d250:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	3b01      	subs	r3, #1
 800d256:	607b      	str	r3, [r7, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1f1      	bne.n	800d242 <mem_cpy+0x1a>
	}
}
 800d25e:	bf00      	nop
 800d260:	371c      	adds	r7, #28
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d26a:	b480      	push	{r7}
 800d26c:	b087      	sub	sp, #28
 800d26e:	af00      	add	r7, sp, #0
 800d270:	60f8      	str	r0, [r7, #12]
 800d272:	60b9      	str	r1, [r7, #8]
 800d274:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	1c5a      	adds	r2, r3, #1
 800d27e:	617a      	str	r2, [r7, #20]
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	b2d2      	uxtb	r2, r2
 800d284:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3b01      	subs	r3, #1
 800d28a:	607b      	str	r3, [r7, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1f3      	bne.n	800d27a <mem_set+0x10>
}
 800d292:	bf00      	nop
 800d294:	bf00      	nop
 800d296:	371c      	adds	r7, #28
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d2a0:	b480      	push	{r7}
 800d2a2:	b089      	sub	sp, #36	; 0x24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	61fb      	str	r3, [r7, #28]
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	61fa      	str	r2, [r7, #28]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	61ba      	str	r2, [r7, #24]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	1acb      	subs	r3, r1, r3
 800d2cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	607b      	str	r3, [r7, #4]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d002      	beq.n	800d2e0 <mem_cmp+0x40>
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d0eb      	beq.n	800d2b8 <mem_cmp+0x18>

	return r;
 800d2e0:	697b      	ldr	r3, [r7, #20]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3724      	adds	r7, #36	; 0x24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
 800d2f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d2f8:	e002      	b.n	800d300 <chk_chr+0x12>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	607b      	str	r3, [r7, #4]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d005      	beq.n	800d314 <chk_chr+0x26>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	461a      	mov	r2, r3
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	4293      	cmp	r3, r2
 800d312:	d1f2      	bne.n	800d2fa <chk_chr+0xc>
	return *str;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	781b      	ldrb	r3, [r3, #0]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d32e:	2300      	movs	r3, #0
 800d330:	60bb      	str	r3, [r7, #8]
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	60fb      	str	r3, [r7, #12]
 800d336:	e029      	b.n	800d38c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d338:	4a27      	ldr	r2, [pc, #156]	; (800d3d8 <chk_lock+0xb4>)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	011b      	lsls	r3, r3, #4
 800d33e:	4413      	add	r3, r2
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d01d      	beq.n	800d382 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d346:	4a24      	ldr	r2, [pc, #144]	; (800d3d8 <chk_lock+0xb4>)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	011b      	lsls	r3, r3, #4
 800d34c:	4413      	add	r3, r2
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	429a      	cmp	r2, r3
 800d356:	d116      	bne.n	800d386 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d358:	4a1f      	ldr	r2, [pc, #124]	; (800d3d8 <chk_lock+0xb4>)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	011b      	lsls	r3, r3, #4
 800d35e:	4413      	add	r3, r2
 800d360:	3304      	adds	r3, #4
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d368:	429a      	cmp	r2, r3
 800d36a:	d10c      	bne.n	800d386 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d36c:	4a1a      	ldr	r2, [pc, #104]	; (800d3d8 <chk_lock+0xb4>)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	011b      	lsls	r3, r3, #4
 800d372:	4413      	add	r3, r2
 800d374:	3308      	adds	r3, #8
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d102      	bne.n	800d386 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d380:	e007      	b.n	800d392 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d382:	2301      	movs	r3, #1
 800d384:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3301      	adds	r3, #1
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d9d2      	bls.n	800d338 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b02      	cmp	r3, #2
 800d396:	d109      	bne.n	800d3ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d102      	bne.n	800d3a4 <chk_lock+0x80>
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d101      	bne.n	800d3a8 <chk_lock+0x84>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	e010      	b.n	800d3ca <chk_lock+0xa6>
 800d3a8:	2312      	movs	r3, #18
 800d3aa:	e00e      	b.n	800d3ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d108      	bne.n	800d3c4 <chk_lock+0xa0>
 800d3b2:	4a09      	ldr	r2, [pc, #36]	; (800d3d8 <chk_lock+0xb4>)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	011b      	lsls	r3, r3, #4
 800d3b8:	4413      	add	r3, r2
 800d3ba:	330c      	adds	r3, #12
 800d3bc:	881b      	ldrh	r3, [r3, #0]
 800d3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3c2:	d101      	bne.n	800d3c8 <chk_lock+0xa4>
 800d3c4:	2310      	movs	r3, #16
 800d3c6:	e000      	b.n	800d3ca <chk_lock+0xa6>
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	2000c6ac 	.word	0x2000c6ac

0800d3dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	607b      	str	r3, [r7, #4]
 800d3e6:	e002      	b.n	800d3ee <enq_lock+0x12>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	607b      	str	r3, [r7, #4]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d806      	bhi.n	800d402 <enq_lock+0x26>
 800d3f4:	4a09      	ldr	r2, [pc, #36]	; (800d41c <enq_lock+0x40>)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	011b      	lsls	r3, r3, #4
 800d3fa:	4413      	add	r3, r2
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1f2      	bne.n	800d3e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b02      	cmp	r3, #2
 800d406:	bf14      	ite	ne
 800d408:	2301      	movne	r3, #1
 800d40a:	2300      	moveq	r3, #0
 800d40c:	b2db      	uxtb	r3, r3
}
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	2000c6ac 	.word	0x2000c6ac

0800d420 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d42a:	2300      	movs	r3, #0
 800d42c:	60fb      	str	r3, [r7, #12]
 800d42e:	e01f      	b.n	800d470 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d430:	4a41      	ldr	r2, [pc, #260]	; (800d538 <inc_lock+0x118>)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	011b      	lsls	r3, r3, #4
 800d436:	4413      	add	r3, r2
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d113      	bne.n	800d46a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d442:	4a3d      	ldr	r2, [pc, #244]	; (800d538 <inc_lock+0x118>)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	011b      	lsls	r3, r3, #4
 800d448:	4413      	add	r3, r2
 800d44a:	3304      	adds	r3, #4
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d452:	429a      	cmp	r2, r3
 800d454:	d109      	bne.n	800d46a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d456:	4a38      	ldr	r2, [pc, #224]	; (800d538 <inc_lock+0x118>)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	011b      	lsls	r3, r3, #4
 800d45c:	4413      	add	r3, r2
 800d45e:	3308      	adds	r3, #8
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d466:	429a      	cmp	r2, r3
 800d468:	d006      	beq.n	800d478 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	3301      	adds	r3, #1
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b01      	cmp	r3, #1
 800d474:	d9dc      	bls.n	800d430 <inc_lock+0x10>
 800d476:	e000      	b.n	800d47a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d478:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d132      	bne.n	800d4e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d480:	2300      	movs	r3, #0
 800d482:	60fb      	str	r3, [r7, #12]
 800d484:	e002      	b.n	800d48c <inc_lock+0x6c>
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3301      	adds	r3, #1
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d806      	bhi.n	800d4a0 <inc_lock+0x80>
 800d492:	4a29      	ldr	r2, [pc, #164]	; (800d538 <inc_lock+0x118>)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	011b      	lsls	r3, r3, #4
 800d498:	4413      	add	r3, r2
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f2      	bne.n	800d486 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d101      	bne.n	800d4aa <inc_lock+0x8a>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e040      	b.n	800d52c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681a      	ldr	r2, [r3, #0]
 800d4ae:	4922      	ldr	r1, [pc, #136]	; (800d538 <inc_lock+0x118>)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	011b      	lsls	r3, r3, #4
 800d4b4:	440b      	add	r3, r1
 800d4b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	689a      	ldr	r2, [r3, #8]
 800d4bc:	491e      	ldr	r1, [pc, #120]	; (800d538 <inc_lock+0x118>)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	011b      	lsls	r3, r3, #4
 800d4c2:	440b      	add	r3, r1
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	695a      	ldr	r2, [r3, #20]
 800d4cc:	491a      	ldr	r1, [pc, #104]	; (800d538 <inc_lock+0x118>)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	011b      	lsls	r3, r3, #4
 800d4d2:	440b      	add	r3, r1
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d4d8:	4a17      	ldr	r2, [pc, #92]	; (800d538 <inc_lock+0x118>)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	011b      	lsls	r3, r3, #4
 800d4de:	4413      	add	r3, r2
 800d4e0:	330c      	adds	r3, #12
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d009      	beq.n	800d500 <inc_lock+0xe0>
 800d4ec:	4a12      	ldr	r2, [pc, #72]	; (800d538 <inc_lock+0x118>)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	011b      	lsls	r3, r3, #4
 800d4f2:	4413      	add	r3, r2
 800d4f4:	330c      	adds	r3, #12
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <inc_lock+0xe0>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	e015      	b.n	800d52c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d108      	bne.n	800d518 <inc_lock+0xf8>
 800d506:	4a0c      	ldr	r2, [pc, #48]	; (800d538 <inc_lock+0x118>)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	011b      	lsls	r3, r3, #4
 800d50c:	4413      	add	r3, r2
 800d50e:	330c      	adds	r3, #12
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	3301      	adds	r3, #1
 800d514:	b29a      	uxth	r2, r3
 800d516:	e001      	b.n	800d51c <inc_lock+0xfc>
 800d518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d51c:	4906      	ldr	r1, [pc, #24]	; (800d538 <inc_lock+0x118>)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	440b      	add	r3, r1
 800d524:	330c      	adds	r3, #12
 800d526:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	3301      	adds	r3, #1
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3714      	adds	r7, #20
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr
 800d538:	2000c6ac 	.word	0x2000c6ac

0800d53c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d544:	2300      	movs	r3, #0
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	e010      	b.n	800d56c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d54a:	4a0d      	ldr	r2, [pc, #52]	; (800d580 <clear_lock+0x44>)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	011b      	lsls	r3, r3, #4
 800d550:	4413      	add	r3, r2
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	429a      	cmp	r2, r3
 800d558:	d105      	bne.n	800d566 <clear_lock+0x2a>
 800d55a:	4a09      	ldr	r2, [pc, #36]	; (800d580 <clear_lock+0x44>)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	011b      	lsls	r3, r3, #4
 800d560:	4413      	add	r3, r2
 800d562:	2200      	movs	r2, #0
 800d564:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	3301      	adds	r3, #1
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d9eb      	bls.n	800d54a <clear_lock+0xe>
	}
}
 800d572:	bf00      	nop
 800d574:	bf00      	nop
 800d576:	3714      	adds	r7, #20
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr
 800d580:	2000c6ac 	.word	0x2000c6ac

0800d584 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	78db      	ldrb	r3, [r3, #3]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d034      	beq.n	800d602 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	7858      	ldrb	r0, [r3, #1]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	f7ff fd7c 	bl	800d0a8 <disk_write>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d002      	beq.n	800d5bc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	73fb      	strb	r3, [r7, #15]
 800d5ba:	e022      	b.n	800d602 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a1b      	ldr	r3, [r3, #32]
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	1ad2      	subs	r2, r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d217      	bcs.n	800d602 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	789b      	ldrb	r3, [r3, #2]
 800d5d6:	613b      	str	r3, [r7, #16]
 800d5d8:	e010      	b.n	800d5fc <sync_window+0x78>
					wsect += fs->fsize;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	699b      	ldr	r3, [r3, #24]
 800d5de:	697a      	ldr	r2, [r7, #20]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	7858      	ldrb	r0, [r3, #1]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	697a      	ldr	r2, [r7, #20]
 800d5f2:	f7ff fd59 	bl	800d0a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	613b      	str	r3, [r7, #16]
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d8eb      	bhi.n	800d5da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d602:	7bfb      	ldrb	r3, [r7, #15]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	429a      	cmp	r2, r3
 800d622:	d01b      	beq.n	800d65c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7ff ffad 	bl	800d584 <sync_window>
 800d62a:	4603      	mov	r3, r0
 800d62c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d62e:	7bfb      	ldrb	r3, [r7, #15]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d113      	bne.n	800d65c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7858      	ldrb	r0, [r3, #1]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d63e:	2301      	movs	r3, #1
 800d640:	683a      	ldr	r2, [r7, #0]
 800d642:	f7ff fd11 	bl	800d068 <disk_read>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d004      	beq.n	800d656 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d64c:	f04f 33ff 	mov.w	r3, #4294967295
 800d650:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d652:	2301      	movs	r3, #1
 800d654:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
	...

0800d668 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7ff ff87 	bl	800d584 <sync_window>
 800d676:	4603      	mov	r3, r0
 800d678:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d67a:	7bfb      	ldrb	r3, [r7, #15]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d158      	bne.n	800d732 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b03      	cmp	r3, #3
 800d686:	d148      	bne.n	800d71a <sync_fs+0xb2>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	791b      	ldrb	r3, [r3, #4]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d144      	bne.n	800d71a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	3330      	adds	r3, #48	; 0x30
 800d694:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d698:	2100      	movs	r1, #0
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7ff fde5 	bl	800d26a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	3330      	adds	r3, #48	; 0x30
 800d6a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6a8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7ff fd74 	bl	800d19a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	3330      	adds	r3, #48	; 0x30
 800d6b6:	4921      	ldr	r1, [pc, #132]	; (800d73c <sync_fs+0xd4>)
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7ff fd89 	bl	800d1d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	3330      	adds	r3, #48	; 0x30
 800d6c2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d6c6:	491e      	ldr	r1, [pc, #120]	; (800d740 <sync_fs+0xd8>)
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7ff fd81 	bl	800d1d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3330      	adds	r3, #48	; 0x30
 800d6d2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	4610      	mov	r0, r2
 800d6de:	f7ff fd77 	bl	800d1d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	3330      	adds	r3, #48	; 0x30
 800d6e6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f7ff fd6d 	bl	800d1d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	69db      	ldr	r3, [r3, #28]
 800d6fa:	1c5a      	adds	r2, r3, #1
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	7858      	ldrb	r0, [r3, #1]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d70e:	2301      	movs	r3, #1
 800d710:	f7ff fcca 	bl	800d0a8 <disk_write>
			fs->fsi_flag = 0;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	785b      	ldrb	r3, [r3, #1]
 800d71e:	2200      	movs	r2, #0
 800d720:	2100      	movs	r1, #0
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff fce0 	bl	800d0e8 <disk_ioctl>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <sync_fs+0xca>
 800d72e:	2301      	movs	r3, #1
 800d730:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d732:	7bfb      	ldrb	r3, [r7, #15]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	41615252 	.word	0x41615252
 800d740:	61417272 	.word	0x61417272

0800d744 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	3b02      	subs	r3, #2
 800d752:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	695b      	ldr	r3, [r3, #20]
 800d758:	3b02      	subs	r3, #2
 800d75a:	683a      	ldr	r2, [r7, #0]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d301      	bcc.n	800d764 <clust2sect+0x20>
 800d760:	2300      	movs	r3, #0
 800d762:	e008      	b.n	800d776 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	895b      	ldrh	r3, [r3, #10]
 800d768:	461a      	mov	r2, r3
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	fb03 f202 	mul.w	r2, r3, r2
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d774:	4413      	add	r3, r2
}
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b086      	sub	sp, #24
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
 800d78a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	2b01      	cmp	r3, #1
 800d796:	d904      	bls.n	800d7a2 <get_fat+0x20>
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	695b      	ldr	r3, [r3, #20]
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d302      	bcc.n	800d7a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	617b      	str	r3, [r7, #20]
 800d7a6:	e08f      	b.n	800d8c8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	2b03      	cmp	r3, #3
 800d7b4:	d062      	beq.n	800d87c <get_fat+0xfa>
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	dc7c      	bgt.n	800d8b4 <get_fat+0x132>
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d002      	beq.n	800d7c4 <get_fat+0x42>
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d042      	beq.n	800d848 <get_fat+0xc6>
 800d7c2:	e077      	b.n	800d8b4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	60fb      	str	r3, [r7, #12]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	085b      	lsrs	r3, r3, #1
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	6a1a      	ldr	r2, [r3, #32]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	0a5b      	lsrs	r3, r3, #9
 800d7da:	4413      	add	r3, r2
 800d7dc:	4619      	mov	r1, r3
 800d7de:	6938      	ldr	r0, [r7, #16]
 800d7e0:	f7ff ff14 	bl	800d60c <move_window>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d167      	bne.n	800d8ba <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	1c5a      	adds	r2, r3, #1
 800d7ee:	60fa      	str	r2, [r7, #12]
 800d7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	6a1a      	ldr	r2, [r3, #32]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	0a5b      	lsrs	r3, r3, #9
 800d806:	4413      	add	r3, r2
 800d808:	4619      	mov	r1, r3
 800d80a:	6938      	ldr	r0, [r7, #16]
 800d80c:	f7ff fefe 	bl	800d60c <move_window>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d153      	bne.n	800d8be <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	4413      	add	r3, r2
 800d820:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d824:	021b      	lsls	r3, r3, #8
 800d826:	461a      	mov	r2, r3
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	4313      	orrs	r3, r2
 800d82c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d002      	beq.n	800d83e <get_fat+0xbc>
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	091b      	lsrs	r3, r3, #4
 800d83c:	e002      	b.n	800d844 <get_fat+0xc2>
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d844:	617b      	str	r3, [r7, #20]
			break;
 800d846:	e03f      	b.n	800d8c8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	6a1a      	ldr	r2, [r3, #32]
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	0a1b      	lsrs	r3, r3, #8
 800d850:	4413      	add	r3, r2
 800d852:	4619      	mov	r1, r3
 800d854:	6938      	ldr	r0, [r7, #16]
 800d856:	f7ff fed9 	bl	800d60c <move_window>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d130      	bne.n	800d8c2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	005b      	lsls	r3, r3, #1
 800d86a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d86e:	4413      	add	r3, r2
 800d870:	4618      	mov	r0, r3
 800d872:	f7ff fc57 	bl	800d124 <ld_word>
 800d876:	4603      	mov	r3, r0
 800d878:	617b      	str	r3, [r7, #20]
			break;
 800d87a:	e025      	b.n	800d8c8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	6a1a      	ldr	r2, [r3, #32]
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	09db      	lsrs	r3, r3, #7
 800d884:	4413      	add	r3, r2
 800d886:	4619      	mov	r1, r3
 800d888:	6938      	ldr	r0, [r7, #16]
 800d88a:	f7ff febf 	bl	800d60c <move_window>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d118      	bne.n	800d8c6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d8a2:	4413      	add	r3, r2
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7ff fc55 	bl	800d154 <ld_dword>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d8b0:	617b      	str	r3, [r7, #20]
			break;
 800d8b2:	e009      	b.n	800d8c8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	617b      	str	r3, [r7, #20]
 800d8b8:	e006      	b.n	800d8c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8ba:	bf00      	nop
 800d8bc:	e004      	b.n	800d8c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8be:	bf00      	nop
 800d8c0:	e002      	b.n	800d8c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d8c2:	bf00      	nop
 800d8c4:	e000      	b.n	800d8c8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d8c6:	bf00      	nop
		}
	}

	return val;
 800d8c8:	697b      	ldr	r3, [r7, #20]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d8d2:	b590      	push	{r4, r7, lr}
 800d8d4:	b089      	sub	sp, #36	; 0x24
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	60b9      	str	r1, [r7, #8]
 800d8dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d8de:	2302      	movs	r3, #2
 800d8e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	f240 80d9 	bls.w	800da9c <put_fat+0x1ca>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	f080 80d3 	bcs.w	800da9c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b03      	cmp	r3, #3
 800d8fc:	f000 8096 	beq.w	800da2c <put_fat+0x15a>
 800d900:	2b03      	cmp	r3, #3
 800d902:	f300 80cb 	bgt.w	800da9c <put_fat+0x1ca>
 800d906:	2b01      	cmp	r3, #1
 800d908:	d002      	beq.n	800d910 <put_fat+0x3e>
 800d90a:	2b02      	cmp	r3, #2
 800d90c:	d06e      	beq.n	800d9ec <put_fat+0x11a>
 800d90e:	e0c5      	b.n	800da9c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	61bb      	str	r3, [r7, #24]
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	085b      	lsrs	r3, r3, #1
 800d918:	69ba      	ldr	r2, [r7, #24]
 800d91a:	4413      	add	r3, r2
 800d91c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6a1a      	ldr	r2, [r3, #32]
 800d922:	69bb      	ldr	r3, [r7, #24]
 800d924:	0a5b      	lsrs	r3, r3, #9
 800d926:	4413      	add	r3, r2
 800d928:	4619      	mov	r1, r3
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f7ff fe6e 	bl	800d60c <move_window>
 800d930:	4603      	mov	r3, r0
 800d932:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d934:	7ffb      	ldrb	r3, [r7, #31]
 800d936:	2b00      	cmp	r3, #0
 800d938:	f040 80a9 	bne.w	800da8e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	1c59      	adds	r1, r3, #1
 800d946:	61b9      	str	r1, [r7, #24]
 800d948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94c:	4413      	add	r3, r2
 800d94e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00d      	beq.n	800d976 <put_fat+0xa4>
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	b25b      	sxtb	r3, r3
 800d960:	f003 030f 	and.w	r3, r3, #15
 800d964:	b25a      	sxtb	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	011b      	lsls	r3, r3, #4
 800d96c:	b25b      	sxtb	r3, r3
 800d96e:	4313      	orrs	r3, r2
 800d970:	b25b      	sxtb	r3, r3
 800d972:	b2db      	uxtb	r3, r3
 800d974:	e001      	b.n	800d97a <put_fat+0xa8>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	697a      	ldr	r2, [r7, #20]
 800d97c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2201      	movs	r2, #1
 800d982:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6a1a      	ldr	r2, [r3, #32]
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	0a5b      	lsrs	r3, r3, #9
 800d98c:	4413      	add	r3, r2
 800d98e:	4619      	mov	r1, r3
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	f7ff fe3b 	bl	800d60c <move_window>
 800d996:	4603      	mov	r3, r0
 800d998:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d99a:	7ffb      	ldrb	r3, [r7, #31]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d178      	bne.n	800da92 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ac:	4413      	add	r3, r2
 800d9ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <put_fat+0xf0>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	091b      	lsrs	r3, r3, #4
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	e00e      	b.n	800d9e0 <put_fat+0x10e>
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	b25b      	sxtb	r3, r3
 800d9c8:	f023 030f 	bic.w	r3, r3, #15
 800d9cc:	b25a      	sxtb	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	0a1b      	lsrs	r3, r3, #8
 800d9d2:	b25b      	sxtb	r3, r3
 800d9d4:	f003 030f 	and.w	r3, r3, #15
 800d9d8:	b25b      	sxtb	r3, r3
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	b25b      	sxtb	r3, r3
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	70da      	strb	r2, [r3, #3]
			break;
 800d9ea:	e057      	b.n	800da9c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	6a1a      	ldr	r2, [r3, #32]
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	0a1b      	lsrs	r3, r3, #8
 800d9f4:	4413      	add	r3, r2
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f7ff fe07 	bl	800d60c <move_window>
 800d9fe:	4603      	mov	r3, r0
 800da00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da02:	7ffb      	ldrb	r3, [r7, #31]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d146      	bne.n	800da96 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800da16:	4413      	add	r3, r2
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	b292      	uxth	r2, r2
 800da1c:	4611      	mov	r1, r2
 800da1e:	4618      	mov	r0, r3
 800da20:	f7ff fbbb 	bl	800d19a <st_word>
			fs->wflag = 1;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2201      	movs	r2, #1
 800da28:	70da      	strb	r2, [r3, #3]
			break;
 800da2a:	e037      	b.n	800da9c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6a1a      	ldr	r2, [r3, #32]
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	09db      	lsrs	r3, r3, #7
 800da34:	4413      	add	r3, r2
 800da36:	4619      	mov	r1, r3
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f7ff fde7 	bl	800d60c <move_window>
 800da3e:	4603      	mov	r3, r0
 800da40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da42:	7ffb      	ldrb	r3, [r7, #31]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d128      	bne.n	800da9a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800da5c:	4413      	add	r3, r2
 800da5e:	4618      	mov	r0, r3
 800da60:	f7ff fb78 	bl	800d154 <ld_dword>
 800da64:	4603      	mov	r3, r0
 800da66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800da6a:	4323      	orrs	r3, r4
 800da6c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800da7c:	4413      	add	r3, r2
 800da7e:	6879      	ldr	r1, [r7, #4]
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff fba5 	bl	800d1d0 <st_dword>
			fs->wflag = 1;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2201      	movs	r2, #1
 800da8a:	70da      	strb	r2, [r3, #3]
			break;
 800da8c:	e006      	b.n	800da9c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da8e:	bf00      	nop
 800da90:	e004      	b.n	800da9c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da92:	bf00      	nop
 800da94:	e002      	b.n	800da9c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da96:	bf00      	nop
 800da98:	e000      	b.n	800da9c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800da9a:	bf00      	nop
		}
	}
	return res;
 800da9c:	7ffb      	ldrb	r3, [r7, #31]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3724      	adds	r7, #36	; 0x24
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd90      	pop	{r4, r7, pc}

0800daa6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b088      	sub	sp, #32
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d904      	bls.n	800dacc <remove_chain+0x26>
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d301      	bcc.n	800dad0 <remove_chain+0x2a>
 800dacc:	2302      	movs	r3, #2
 800dace:	e04b      	b.n	800db68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00c      	beq.n	800daf0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dad6:	f04f 32ff 	mov.w	r2, #4294967295
 800dada:	6879      	ldr	r1, [r7, #4]
 800dadc:	69b8      	ldr	r0, [r7, #24]
 800dade:	f7ff fef8 	bl	800d8d2 <put_fat>
 800dae2:	4603      	mov	r3, r0
 800dae4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dae6:	7ffb      	ldrb	r3, [r7, #31]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <remove_chain+0x4a>
 800daec:	7ffb      	ldrb	r3, [r7, #31]
 800daee:	e03b      	b.n	800db68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800daf0:	68b9      	ldr	r1, [r7, #8]
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f7ff fe45 	bl	800d782 <get_fat>
 800daf8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d031      	beq.n	800db64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d101      	bne.n	800db0a <remove_chain+0x64>
 800db06:	2302      	movs	r3, #2
 800db08:	e02e      	b.n	800db68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db10:	d101      	bne.n	800db16 <remove_chain+0x70>
 800db12:	2301      	movs	r3, #1
 800db14:	e028      	b.n	800db68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800db16:	2200      	movs	r2, #0
 800db18:	68b9      	ldr	r1, [r7, #8]
 800db1a:	69b8      	ldr	r0, [r7, #24]
 800db1c:	f7ff fed9 	bl	800d8d2 <put_fat>
 800db20:	4603      	mov	r3, r0
 800db22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800db24:	7ffb      	ldrb	r3, [r7, #31]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <remove_chain+0x88>
 800db2a:	7ffb      	ldrb	r3, [r7, #31]
 800db2c:	e01c      	b.n	800db68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	691a      	ldr	r2, [r3, #16]
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	695b      	ldr	r3, [r3, #20]
 800db36:	3b02      	subs	r3, #2
 800db38:	429a      	cmp	r2, r3
 800db3a:	d20b      	bcs.n	800db54 <remove_chain+0xae>
			fs->free_clst++;
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	1c5a      	adds	r2, r3, #1
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	791b      	ldrb	r3, [r3, #4]
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	695b      	ldr	r3, [r3, #20]
 800db5c:	68ba      	ldr	r2, [r7, #8]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d3c6      	bcc.n	800daf0 <remove_chain+0x4a>
 800db62:	e000      	b.n	800db66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800db64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3720      	adds	r7, #32
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d10d      	bne.n	800dba2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d004      	beq.n	800db9c <create_chain+0x2c>
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	695b      	ldr	r3, [r3, #20]
 800db96:	69ba      	ldr	r2, [r7, #24]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d31b      	bcc.n	800dbd4 <create_chain+0x64>
 800db9c:	2301      	movs	r3, #1
 800db9e:	61bb      	str	r3, [r7, #24]
 800dba0:	e018      	b.n	800dbd4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dba2:	6839      	ldr	r1, [r7, #0]
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7ff fdec 	bl	800d782 <get_fat>
 800dbaa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d801      	bhi.n	800dbb6 <create_chain+0x46>
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	e070      	b.n	800dc98 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbbc:	d101      	bne.n	800dbc2 <create_chain+0x52>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	e06a      	b.n	800dc98 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	695b      	ldr	r3, [r3, #20]
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d201      	bcs.n	800dbd0 <create_chain+0x60>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	e063      	b.n	800dc98 <create_chain+0x128>
		scl = clst;
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	69fa      	ldr	r2, [r7, #28]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d307      	bcc.n	800dbf8 <create_chain+0x88>
				ncl = 2;
 800dbe8:	2302      	movs	r3, #2
 800dbea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dbec:	69fa      	ldr	r2, [r7, #28]
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d901      	bls.n	800dbf8 <create_chain+0x88>
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	e04f      	b.n	800dc98 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dbf8:	69f9      	ldr	r1, [r7, #28]
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7ff fdc1 	bl	800d782 <get_fat>
 800dc00:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00e      	beq.n	800dc26 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d003      	beq.n	800dc16 <create_chain+0xa6>
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc14:	d101      	bne.n	800dc1a <create_chain+0xaa>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	e03e      	b.n	800dc98 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dc1a:	69fa      	ldr	r2, [r7, #28]
 800dc1c:	69bb      	ldr	r3, [r7, #24]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d1da      	bne.n	800dbd8 <create_chain+0x68>
 800dc22:	2300      	movs	r3, #0
 800dc24:	e038      	b.n	800dc98 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dc26:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dc28:	f04f 32ff 	mov.w	r2, #4294967295
 800dc2c:	69f9      	ldr	r1, [r7, #28]
 800dc2e:	6938      	ldr	r0, [r7, #16]
 800dc30:	f7ff fe4f 	bl	800d8d2 <put_fat>
 800dc34:	4603      	mov	r3, r0
 800dc36:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dc38:	7dfb      	ldrb	r3, [r7, #23]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d109      	bne.n	800dc52 <create_chain+0xe2>
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d006      	beq.n	800dc52 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dc44:	69fa      	ldr	r2, [r7, #28]
 800dc46:	6839      	ldr	r1, [r7, #0]
 800dc48:	6938      	ldr	r0, [r7, #16]
 800dc4a:	f7ff fe42 	bl	800d8d2 <put_fat>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dc52:	7dfb      	ldrb	r3, [r7, #23]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d116      	bne.n	800dc86 <create_chain+0x116>
		fs->last_clst = ncl;
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	69fa      	ldr	r2, [r7, #28]
 800dc5c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	691a      	ldr	r2, [r3, #16]
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	695b      	ldr	r3, [r3, #20]
 800dc66:	3b02      	subs	r3, #2
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d804      	bhi.n	800dc76 <create_chain+0x106>
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	691b      	ldr	r3, [r3, #16]
 800dc70:	1e5a      	subs	r2, r3, #1
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	791b      	ldrb	r3, [r3, #4]
 800dc7a:	f043 0301 	orr.w	r3, r3, #1
 800dc7e:	b2da      	uxtb	r2, r3
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	711a      	strb	r2, [r3, #4]
 800dc84:	e007      	b.n	800dc96 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dc86:	7dfb      	ldrb	r3, [r7, #23]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d102      	bne.n	800dc92 <create_chain+0x122>
 800dc8c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc90:	e000      	b.n	800dc94 <create_chain+0x124>
 800dc92:	2301      	movs	r3, #1
 800dc94:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dc96:	69fb      	ldr	r3, [r7, #28]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3720      	adds	r7, #32
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b087      	sub	sp, #28
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	0a5b      	lsrs	r3, r3, #9
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	8952      	ldrh	r2, [r2, #10]
 800dcc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcc4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	1d1a      	adds	r2, r3, #4
 800dcca:	613a      	str	r2, [r7, #16]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <clmt_clust+0x3a>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e010      	b.n	800dcfc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d307      	bcc.n	800dcf2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	617b      	str	r3, [r7, #20]
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	3304      	adds	r3, #4
 800dcee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dcf0:	e7e9      	b.n	800dcc6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dcf2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	4413      	add	r3, r2
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	371c      	adds	r7, #28
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd1e:	d204      	bcs.n	800dd2a <dir_sdi+0x22>
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	f003 031f 	and.w	r3, r3, #31
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <dir_sdi+0x26>
		return FR_INT_ERR;
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	e063      	b.n	800ddf6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <dir_sdi+0x46>
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d902      	bls.n	800dd4e <dir_sdi+0x46>
		clst = fs->dirbase;
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10c      	bne.n	800dd6e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	095b      	lsrs	r3, r3, #5
 800dd58:	693a      	ldr	r2, [r7, #16]
 800dd5a:	8912      	ldrh	r2, [r2, #8]
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d301      	bcc.n	800dd64 <dir_sdi+0x5c>
 800dd60:	2302      	movs	r3, #2
 800dd62:	e048      	b.n	800ddf6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	61da      	str	r2, [r3, #28]
 800dd6c:	e029      	b.n	800ddc2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	895b      	ldrh	r3, [r3, #10]
 800dd72:	025b      	lsls	r3, r3, #9
 800dd74:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dd76:	e019      	b.n	800ddac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6979      	ldr	r1, [r7, #20]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7ff fd00 	bl	800d782 <get_fat>
 800dd82:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8a:	d101      	bne.n	800dd90 <dir_sdi+0x88>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e032      	b.n	800ddf6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d904      	bls.n	800dda0 <dir_sdi+0x98>
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	697a      	ldr	r2, [r7, #20]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d301      	bcc.n	800dda4 <dir_sdi+0x9c>
 800dda0:	2302      	movs	r3, #2
 800dda2:	e028      	b.n	800ddf6 <dir_sdi+0xee>
			ofs -= csz;
 800dda4:	683a      	ldr	r2, [r7, #0]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d2e1      	bcs.n	800dd78 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ddb4:	6979      	ldr	r1, [r7, #20]
 800ddb6:	6938      	ldr	r0, [r7, #16]
 800ddb8:	f7ff fcc4 	bl	800d744 <clust2sect>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	697a      	ldr	r2, [r7, #20]
 800ddc6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	69db      	ldr	r3, [r3, #28]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <dir_sdi+0xcc>
 800ddd0:	2302      	movs	r3, #2
 800ddd2:	e010      	b.n	800ddf6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	69da      	ldr	r2, [r3, #28]
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	0a5b      	lsrs	r3, r3, #9
 800dddc:	441a      	add	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddee:	441a      	add	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3718      	adds	r7, #24
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b086      	sub	sp, #24
 800de02:	af00      	add	r7, sp, #0
 800de04:	6078      	str	r0, [r7, #4]
 800de06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	695b      	ldr	r3, [r3, #20]
 800de12:	3320      	adds	r3, #32
 800de14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d003      	beq.n	800de26 <dir_next+0x28>
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de24:	d301      	bcc.n	800de2a <dir_next+0x2c>
 800de26:	2304      	movs	r3, #4
 800de28:	e0aa      	b.n	800df80 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de30:	2b00      	cmp	r3, #0
 800de32:	f040 8098 	bne.w	800df66 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	69db      	ldr	r3, [r3, #28]
 800de3a:	1c5a      	adds	r2, r3, #1
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	699b      	ldr	r3, [r3, #24]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10b      	bne.n	800de60 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	095b      	lsrs	r3, r3, #5
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	8912      	ldrh	r2, [r2, #8]
 800de50:	4293      	cmp	r3, r2
 800de52:	f0c0 8088 	bcc.w	800df66 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	61da      	str	r2, [r3, #28]
 800de5c:	2304      	movs	r3, #4
 800de5e:	e08f      	b.n	800df80 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	0a5b      	lsrs	r3, r3, #9
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	8952      	ldrh	r2, [r2, #10]
 800de68:	3a01      	subs	r2, #1
 800de6a:	4013      	ands	r3, r2
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d17a      	bne.n	800df66 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	699b      	ldr	r3, [r3, #24]
 800de76:	4619      	mov	r1, r3
 800de78:	4610      	mov	r0, r2
 800de7a:	f7ff fc82 	bl	800d782 <get_fat>
 800de7e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d801      	bhi.n	800de8a <dir_next+0x8c>
 800de86:	2302      	movs	r3, #2
 800de88:	e07a      	b.n	800df80 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de90:	d101      	bne.n	800de96 <dir_next+0x98>
 800de92:	2301      	movs	r3, #1
 800de94:	e074      	b.n	800df80 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	697a      	ldr	r2, [r7, #20]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d358      	bcc.n	800df52 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d104      	bne.n	800deb0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2200      	movs	r2, #0
 800deaa:	61da      	str	r2, [r3, #28]
 800deac:	2304      	movs	r3, #4
 800deae:	e067      	b.n	800df80 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	699b      	ldr	r3, [r3, #24]
 800deb6:	4619      	mov	r1, r3
 800deb8:	4610      	mov	r0, r2
 800deba:	f7ff fe59 	bl	800db70 <create_chain>
 800debe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d101      	bne.n	800deca <dir_next+0xcc>
 800dec6:	2307      	movs	r3, #7
 800dec8:	e05a      	b.n	800df80 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d101      	bne.n	800ded4 <dir_next+0xd6>
 800ded0:	2302      	movs	r3, #2
 800ded2:	e055      	b.n	800df80 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deda:	d101      	bne.n	800dee0 <dir_next+0xe2>
 800dedc:	2301      	movs	r3, #1
 800dede:	e04f      	b.n	800df80 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7ff fb4f 	bl	800d584 <sync_window>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d001      	beq.n	800def0 <dir_next+0xf2>
 800deec:	2301      	movs	r3, #1
 800deee:	e047      	b.n	800df80 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	3330      	adds	r3, #48	; 0x30
 800def4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800def8:	2100      	movs	r1, #0
 800defa:	4618      	mov	r0, r3
 800defc:	f7ff f9b5 	bl	800d26a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df00:	2300      	movs	r3, #0
 800df02:	613b      	str	r3, [r7, #16]
 800df04:	6979      	ldr	r1, [r7, #20]
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f7ff fc1c 	bl	800d744 <clust2sect>
 800df0c:	4602      	mov	r2, r0
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	62da      	str	r2, [r3, #44]	; 0x2c
 800df12:	e012      	b.n	800df3a <dir_next+0x13c>
						fs->wflag = 1;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2201      	movs	r2, #1
 800df18:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f7ff fb32 	bl	800d584 <sync_window>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <dir_next+0x12c>
 800df26:	2301      	movs	r3, #1
 800df28:	e02a      	b.n	800df80 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	3301      	adds	r3, #1
 800df2e:	613b      	str	r3, [r7, #16]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	62da      	str	r2, [r3, #44]	; 0x2c
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	895b      	ldrh	r3, [r3, #10]
 800df3e:	461a      	mov	r2, r3
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	4293      	cmp	r3, r2
 800df44:	d3e6      	bcc.n	800df14 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	1ad2      	subs	r2, r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	697a      	ldr	r2, [r7, #20]
 800df56:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800df58:	6979      	ldr	r1, [r7, #20]
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff fbf2 	bl	800d744 <clust2sect>
 800df60:	4602      	mov	r2, r0
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df78:	441a      	add	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3718      	adds	r7, #24
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800df98:	2100      	movs	r1, #0
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7ff feb4 	bl	800dd08 <dir_sdi>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dfa4:	7dfb      	ldrb	r3, [r7, #23]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d12b      	bne.n	800e002 <dir_alloc+0x7a>
		n = 0;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	69db      	ldr	r3, [r3, #28]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	f7ff fb29 	bl	800d60c <move_window>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d11d      	bne.n	800e000 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6a1b      	ldr	r3, [r3, #32]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	2be5      	cmp	r3, #229	; 0xe5
 800dfcc:	d004      	beq.n	800dfd8 <dir_alloc+0x50>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d107      	bne.n	800dfe8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	613b      	str	r3, [r7, #16]
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d102      	bne.n	800dfec <dir_alloc+0x64>
 800dfe6:	e00c      	b.n	800e002 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dfe8:	2300      	movs	r3, #0
 800dfea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dfec:	2101      	movs	r1, #1
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f7ff ff05 	bl	800ddfe <dir_next>
 800dff4:	4603      	mov	r3, r0
 800dff6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dff8:	7dfb      	ldrb	r3, [r7, #23]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d0d7      	beq.n	800dfae <dir_alloc+0x26>
 800dffe:	e000      	b.n	800e002 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e000:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e002:	7dfb      	ldrb	r3, [r7, #23]
 800e004:	2b04      	cmp	r3, #4
 800e006:	d101      	bne.n	800e00c <dir_alloc+0x84>
 800e008:	2307      	movs	r3, #7
 800e00a:	75fb      	strb	r3, [r7, #23]
	return res;
 800e00c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3718      	adds	r7, #24
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	331a      	adds	r3, #26
 800e024:	4618      	mov	r0, r3
 800e026:	f7ff f87d 	bl	800d124 <ld_word>
 800e02a:	4603      	mov	r3, r0
 800e02c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2b03      	cmp	r3, #3
 800e034:	d109      	bne.n	800e04a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	3314      	adds	r3, #20
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7ff f872 	bl	800d124 <ld_word>
 800e040:	4603      	mov	r3, r0
 800e042:	041b      	lsls	r3, r3, #16
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	4313      	orrs	r3, r2
 800e048:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e04a:	68fb      	ldr	r3, [r7, #12]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	331a      	adds	r3, #26
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	b292      	uxth	r2, r2
 800e068:	4611      	mov	r1, r2
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff f895 	bl	800d19a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	2b03      	cmp	r3, #3
 800e076:	d109      	bne.n	800e08c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	f103 0214 	add.w	r2, r3, #20
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	0c1b      	lsrs	r3, r3, #16
 800e082:	b29b      	uxth	r3, r3
 800e084:	4619      	mov	r1, r3
 800e086:	4610      	mov	r0, r2
 800e088:	f7ff f887 	bl	800d19a <st_word>
	}
}
 800e08c:	bf00      	nop
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7ff fe2f 	bl	800dd08 <dir_sdi>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e0ae:	7dfb      	ldrb	r3, [r7, #23]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <dir_find+0x24>
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
 800e0b6:	e03e      	b.n	800e136 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	69db      	ldr	r3, [r3, #28]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6938      	ldr	r0, [r7, #16]
 800e0c0:	f7ff faa4 	bl	800d60c <move_window>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0c8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d12f      	bne.n	800e12e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e0d6:	7bfb      	ldrb	r3, [r7, #15]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d102      	bne.n	800e0e2 <dir_find+0x4e>
 800e0dc:	2304      	movs	r3, #4
 800e0de:	75fb      	strb	r3, [r7, #23]
 800e0e0:	e028      	b.n	800e134 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6a1b      	ldr	r3, [r3, #32]
 800e0e6:	330b      	adds	r3, #11
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a1b      	ldr	r3, [r3, #32]
 800e0f8:	330b      	adds	r3, #11
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	f003 0308 	and.w	r3, r3, #8
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10a      	bne.n	800e11a <dir_find+0x86>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6a18      	ldr	r0, [r3, #32]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	3324      	adds	r3, #36	; 0x24
 800e10c:	220b      	movs	r2, #11
 800e10e:	4619      	mov	r1, r3
 800e110:	f7ff f8c6 	bl	800d2a0 <mem_cmp>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00b      	beq.n	800e132 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e11a:	2100      	movs	r1, #0
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff fe6e 	bl	800ddfe <dir_next>
 800e122:	4603      	mov	r3, r0
 800e124:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e126:	7dfb      	ldrb	r3, [r7, #23]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0c5      	beq.n	800e0b8 <dir_find+0x24>
 800e12c:	e002      	b.n	800e134 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e12e:	bf00      	nop
 800e130:	e000      	b.n	800e134 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e132:	bf00      	nop

	return res;
 800e134:	7dfb      	ldrb	r3, [r7, #23]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b084      	sub	sp, #16
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e14c:	2101      	movs	r1, #1
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7ff ff1a 	bl	800df88 <dir_alloc>
 800e154:	4603      	mov	r3, r0
 800e156:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e158:	7bfb      	ldrb	r3, [r7, #15]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d11c      	bne.n	800e198 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	69db      	ldr	r3, [r3, #28]
 800e162:	4619      	mov	r1, r3
 800e164:	68b8      	ldr	r0, [r7, #8]
 800e166:	f7ff fa51 	bl	800d60c <move_window>
 800e16a:	4603      	mov	r3, r0
 800e16c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e16e:	7bfb      	ldrb	r3, [r7, #15]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d111      	bne.n	800e198 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a1b      	ldr	r3, [r3, #32]
 800e178:	2220      	movs	r2, #32
 800e17a:	2100      	movs	r1, #0
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff f874 	bl	800d26a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a18      	ldr	r0, [r3, #32]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	3324      	adds	r3, #36	; 0x24
 800e18a:	220b      	movs	r2, #11
 800e18c:	4619      	mov	r1, r3
 800e18e:	f7ff f84b 	bl	800d228 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2201      	movs	r2, #1
 800e196:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e198:	7bfb      	ldrb	r3, [r7, #15]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
	...

0800e1a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b088      	sub	sp, #32
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	60fb      	str	r3, [r7, #12]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	3324      	adds	r3, #36	; 0x24
 800e1b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e1ba:	220b      	movs	r2, #11
 800e1bc:	2120      	movs	r1, #32
 800e1be:	68b8      	ldr	r0, [r7, #8]
 800e1c0:	f7ff f853 	bl	800d26a <mem_set>
	si = i = 0; ni = 8;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	613b      	str	r3, [r7, #16]
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	61fb      	str	r3, [r7, #28]
 800e1cc:	2308      	movs	r3, #8
 800e1ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	61fa      	str	r2, [r7, #28]
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	4413      	add	r3, r2
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e1de:	7efb      	ldrb	r3, [r7, #27]
 800e1e0:	2b20      	cmp	r3, #32
 800e1e2:	d94e      	bls.n	800e282 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e1e4:	7efb      	ldrb	r3, [r7, #27]
 800e1e6:	2b2f      	cmp	r3, #47	; 0x2f
 800e1e8:	d006      	beq.n	800e1f8 <create_name+0x54>
 800e1ea:	7efb      	ldrb	r3, [r7, #27]
 800e1ec:	2b5c      	cmp	r3, #92	; 0x5c
 800e1ee:	d110      	bne.n	800e212 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e1f0:	e002      	b.n	800e1f8 <create_name+0x54>
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	61fb      	str	r3, [r7, #28]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	2b2f      	cmp	r3, #47	; 0x2f
 800e202:	d0f6      	beq.n	800e1f2 <create_name+0x4e>
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	4413      	add	r3, r2
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	2b5c      	cmp	r3, #92	; 0x5c
 800e20e:	d0f0      	beq.n	800e1f2 <create_name+0x4e>
			break;
 800e210:	e038      	b.n	800e284 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e212:	7efb      	ldrb	r3, [r7, #27]
 800e214:	2b2e      	cmp	r3, #46	; 0x2e
 800e216:	d003      	beq.n	800e220 <create_name+0x7c>
 800e218:	693a      	ldr	r2, [r7, #16]
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d30c      	bcc.n	800e23a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	2b0b      	cmp	r3, #11
 800e224:	d002      	beq.n	800e22c <create_name+0x88>
 800e226:	7efb      	ldrb	r3, [r7, #27]
 800e228:	2b2e      	cmp	r3, #46	; 0x2e
 800e22a:	d001      	beq.n	800e230 <create_name+0x8c>
 800e22c:	2306      	movs	r3, #6
 800e22e:	e044      	b.n	800e2ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e230:	2308      	movs	r3, #8
 800e232:	613b      	str	r3, [r7, #16]
 800e234:	230b      	movs	r3, #11
 800e236:	617b      	str	r3, [r7, #20]
			continue;
 800e238:	e022      	b.n	800e280 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e23a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	da04      	bge.n	800e24c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e242:	7efb      	ldrb	r3, [r7, #27]
 800e244:	3b80      	subs	r3, #128	; 0x80
 800e246:	4a1f      	ldr	r2, [pc, #124]	; (800e2c4 <create_name+0x120>)
 800e248:	5cd3      	ldrb	r3, [r2, r3]
 800e24a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e24c:	7efb      	ldrb	r3, [r7, #27]
 800e24e:	4619      	mov	r1, r3
 800e250:	481d      	ldr	r0, [pc, #116]	; (800e2c8 <create_name+0x124>)
 800e252:	f7ff f84c 	bl	800d2ee <chk_chr>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <create_name+0xbc>
 800e25c:	2306      	movs	r3, #6
 800e25e:	e02c      	b.n	800e2ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e260:	7efb      	ldrb	r3, [r7, #27]
 800e262:	2b60      	cmp	r3, #96	; 0x60
 800e264:	d905      	bls.n	800e272 <create_name+0xce>
 800e266:	7efb      	ldrb	r3, [r7, #27]
 800e268:	2b7a      	cmp	r3, #122	; 0x7a
 800e26a:	d802      	bhi.n	800e272 <create_name+0xce>
 800e26c:	7efb      	ldrb	r3, [r7, #27]
 800e26e:	3b20      	subs	r3, #32
 800e270:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	613a      	str	r2, [r7, #16]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	4413      	add	r3, r2
 800e27c:	7efa      	ldrb	r2, [r7, #27]
 800e27e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e280:	e7a6      	b.n	800e1d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e282:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	441a      	add	r2, r3
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d101      	bne.n	800e298 <create_name+0xf4>
 800e294:	2306      	movs	r3, #6
 800e296:	e010      	b.n	800e2ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2be5      	cmp	r3, #229	; 0xe5
 800e29e:	d102      	bne.n	800e2a6 <create_name+0x102>
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	2205      	movs	r2, #5
 800e2a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e2a6:	7efb      	ldrb	r3, [r7, #27]
 800e2a8:	2b20      	cmp	r3, #32
 800e2aa:	d801      	bhi.n	800e2b0 <create_name+0x10c>
 800e2ac:	2204      	movs	r2, #4
 800e2ae:	e000      	b.n	800e2b2 <create_name+0x10e>
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	330b      	adds	r3, #11
 800e2b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e2b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3720      	adds	r7, #32
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	0801569c 	.word	0x0801569c
 800e2c8:	080155bc 	.word	0x080155bc

0800e2cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e2e0:	e002      	b.n	800e2e8 <follow_path+0x1c>
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	603b      	str	r3, [r7, #0]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	2b2f      	cmp	r3, #47	; 0x2f
 800e2ee:	d0f8      	beq.n	800e2e2 <follow_path+0x16>
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2b5c      	cmp	r3, #92	; 0x5c
 800e2f6:	d0f4      	beq.n	800e2e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b1f      	cmp	r3, #31
 800e304:	d80a      	bhi.n	800e31c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2280      	movs	r2, #128	; 0x80
 800e30a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e30e:	2100      	movs	r1, #0
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7ff fcf9 	bl	800dd08 <dir_sdi>
 800e316:	4603      	mov	r3, r0
 800e318:	75fb      	strb	r3, [r7, #23]
 800e31a:	e043      	b.n	800e3a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e31c:	463b      	mov	r3, r7
 800e31e:	4619      	mov	r1, r3
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7ff ff3f 	bl	800e1a4 <create_name>
 800e326:	4603      	mov	r3, r0
 800e328:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d134      	bne.n	800e39a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff feaf 	bl	800e094 <dir_find>
 800e336:	4603      	mov	r3, r0
 800e338:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e340:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e342:	7dfb      	ldrb	r3, [r7, #23]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e348:	7dfb      	ldrb	r3, [r7, #23]
 800e34a:	2b04      	cmp	r3, #4
 800e34c:	d127      	bne.n	800e39e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e34e:	7afb      	ldrb	r3, [r7, #11]
 800e350:	f003 0304 	and.w	r3, r3, #4
 800e354:	2b00      	cmp	r3, #0
 800e356:	d122      	bne.n	800e39e <follow_path+0xd2>
 800e358:	2305      	movs	r3, #5
 800e35a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e35c:	e01f      	b.n	800e39e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e35e:	7afb      	ldrb	r3, [r7, #11]
 800e360:	f003 0304 	and.w	r3, r3, #4
 800e364:	2b00      	cmp	r3, #0
 800e366:	d11c      	bne.n	800e3a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	799b      	ldrb	r3, [r3, #6]
 800e36c:	f003 0310 	and.w	r3, r3, #16
 800e370:	2b00      	cmp	r3, #0
 800e372:	d102      	bne.n	800e37a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e374:	2305      	movs	r3, #5
 800e376:	75fb      	strb	r3, [r7, #23]
 800e378:	e014      	b.n	800e3a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e388:	4413      	add	r3, r2
 800e38a:	4619      	mov	r1, r3
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f7ff fe42 	bl	800e016 <ld_clust>
 800e392:	4602      	mov	r2, r0
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e398:	e7c0      	b.n	800e31c <follow_path+0x50>
			if (res != FR_OK) break;
 800e39a:	bf00      	nop
 800e39c:	e002      	b.n	800e3a4 <follow_path+0xd8>
				break;
 800e39e:	bf00      	nop
 800e3a0:	e000      	b.n	800e3a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e3a2:	bf00      	nop
			}
		}
	}

	return res;
 800e3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3718      	adds	r7, #24
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e3ae:	b480      	push	{r7}
 800e3b0:	b087      	sub	sp, #28
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d031      	beq.n	800e428 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	617b      	str	r3, [r7, #20]
 800e3ca:	e002      	b.n	800e3d2 <get_ldnumber+0x24>
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	617b      	str	r3, [r7, #20]
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	2b20      	cmp	r3, #32
 800e3d8:	d903      	bls.n	800e3e2 <get_ldnumber+0x34>
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	2b3a      	cmp	r3, #58	; 0x3a
 800e3e0:	d1f4      	bne.n	800e3cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2b3a      	cmp	r3, #58	; 0x3a
 800e3e8:	d11c      	bne.n	800e424 <get_ldnumber+0x76>
			tp = *path;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	1c5a      	adds	r2, r3, #1
 800e3f4:	60fa      	str	r2, [r7, #12]
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	3b30      	subs	r3, #48	; 0x30
 800e3fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	2b09      	cmp	r3, #9
 800e400:	d80e      	bhi.n	800e420 <get_ldnumber+0x72>
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	429a      	cmp	r2, r3
 800e408:	d10a      	bne.n	800e420 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d107      	bne.n	800e420 <get_ldnumber+0x72>
					vol = (int)i;
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	3301      	adds	r3, #1
 800e418:	617b      	str	r3, [r7, #20]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	697a      	ldr	r2, [r7, #20]
 800e41e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	e002      	b.n	800e42a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e424:	2300      	movs	r3, #0
 800e426:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e428:	693b      	ldr	r3, [r7, #16]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	371c      	adds	r7, #28
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
	...

0800e438 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	70da      	strb	r2, [r3, #3]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f04f 32ff 	mov.w	r2, #4294967295
 800e44e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e450:	6839      	ldr	r1, [r7, #0]
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff f8da 	bl	800d60c <move_window>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <check_fs+0x2a>
 800e45e:	2304      	movs	r3, #4
 800e460:	e038      	b.n	800e4d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3330      	adds	r3, #48	; 0x30
 800e466:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fe fe5a 	bl	800d124 <ld_word>
 800e470:	4603      	mov	r3, r0
 800e472:	461a      	mov	r2, r3
 800e474:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e478:	429a      	cmp	r2, r3
 800e47a:	d001      	beq.n	800e480 <check_fs+0x48>
 800e47c:	2303      	movs	r3, #3
 800e47e:	e029      	b.n	800e4d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e486:	2be9      	cmp	r3, #233	; 0xe9
 800e488:	d009      	beq.n	800e49e <check_fs+0x66>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e490:	2beb      	cmp	r3, #235	; 0xeb
 800e492:	d11e      	bne.n	800e4d2 <check_fs+0x9a>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e49a:	2b90      	cmp	r3, #144	; 0x90
 800e49c:	d119      	bne.n	800e4d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	3330      	adds	r3, #48	; 0x30
 800e4a2:	3336      	adds	r3, #54	; 0x36
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7fe fe55 	bl	800d154 <ld_dword>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e4b0:	4a0a      	ldr	r2, [pc, #40]	; (800e4dc <check_fs+0xa4>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d101      	bne.n	800e4ba <check_fs+0x82>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	e00c      	b.n	800e4d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	3330      	adds	r3, #48	; 0x30
 800e4be:	3352      	adds	r3, #82	; 0x52
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe fe47 	bl	800d154 <ld_dword>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	4a05      	ldr	r2, [pc, #20]	; (800e4e0 <check_fs+0xa8>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d101      	bne.n	800e4d2 <check_fs+0x9a>
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	e000      	b.n	800e4d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e4d2:	2302      	movs	r3, #2
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	00544146 	.word	0x00544146
 800e4e0:	33544146 	.word	0x33544146

0800e4e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b096      	sub	sp, #88	; 0x58
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	f7ff ff58 	bl	800e3ae <get_ldnumber>
 800e4fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e502:	2b00      	cmp	r3, #0
 800e504:	da01      	bge.n	800e50a <find_volume+0x26>
 800e506:	230b      	movs	r3, #11
 800e508:	e22d      	b.n	800e966 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e50a:	4aa1      	ldr	r2, [pc, #644]	; (800e790 <find_volume+0x2ac>)
 800e50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e512:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	2b00      	cmp	r3, #0
 800e518:	d101      	bne.n	800e51e <find_volume+0x3a>
 800e51a:	230c      	movs	r3, #12
 800e51c:	e223      	b.n	800e966 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e522:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e524:	79fb      	ldrb	r3, [r7, #7]
 800e526:	f023 0301 	bic.w	r3, r3, #1
 800e52a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d01a      	beq.n	800e56a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e536:	785b      	ldrb	r3, [r3, #1]
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fe fd55 	bl	800cfe8 <disk_status>
 800e53e:	4603      	mov	r3, r0
 800e540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e548:	f003 0301 	and.w	r3, r3, #1
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10c      	bne.n	800e56a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e550:	79fb      	ldrb	r3, [r7, #7]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d007      	beq.n	800e566 <find_volume+0x82>
 800e556:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e55a:	f003 0304 	and.w	r3, r3, #4
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e562:	230a      	movs	r3, #10
 800e564:	e1ff      	b.n	800e966 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e566:	2300      	movs	r3, #0
 800e568:	e1fd      	b.n	800e966 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56c:	2200      	movs	r2, #0
 800e56e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e572:	b2da      	uxtb	r2, r3
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57a:	785b      	ldrb	r3, [r3, #1]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7fe fd4d 	bl	800d01c <disk_initialize>
 800e582:	4603      	mov	r3, r0
 800e584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e588:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e58c:	f003 0301 	and.w	r3, r3, #1
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e594:	2303      	movs	r3, #3
 800e596:	e1e6      	b.n	800e966 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e598:	79fb      	ldrb	r3, [r7, #7]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d007      	beq.n	800e5ae <find_volume+0xca>
 800e59e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5a2:	f003 0304 	and.w	r3, r3, #4
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d001      	beq.n	800e5ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e5aa:	230a      	movs	r3, #10
 800e5ac:	e1db      	b.n	800e966 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e5b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e5b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5b6:	f7ff ff3f 	bl	800e438 <check_fs>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e5c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d149      	bne.n	800e65c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	643b      	str	r3, [r7, #64]	; 0x40
 800e5cc:	e01e      	b.n	800e60c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5d6:	011b      	lsls	r3, r3, #4
 800e5d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e5dc:	4413      	add	r3, r2
 800e5de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d006      	beq.n	800e5f8 <find_volume+0x114>
 800e5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7fe fdb0 	bl	800d154 <ld_dword>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	e000      	b.n	800e5fa <find_volume+0x116>
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	3358      	adds	r3, #88	; 0x58
 800e600:	443b      	add	r3, r7
 800e602:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e608:	3301      	adds	r3, #1
 800e60a:	643b      	str	r3, [r7, #64]	; 0x40
 800e60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e60e:	2b03      	cmp	r3, #3
 800e610:	d9dd      	bls.n	800e5ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e612:	2300      	movs	r3, #0
 800e614:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d002      	beq.n	800e622 <find_volume+0x13e>
 800e61c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e61e:	3b01      	subs	r3, #1
 800e620:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	3358      	adds	r3, #88	; 0x58
 800e628:	443b      	add	r3, r7
 800e62a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e62e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e632:	2b00      	cmp	r3, #0
 800e634:	d005      	beq.n	800e642 <find_volume+0x15e>
 800e636:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e638:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e63a:	f7ff fefd 	bl	800e438 <check_fs>
 800e63e:	4603      	mov	r3, r0
 800e640:	e000      	b.n	800e644 <find_volume+0x160>
 800e642:	2303      	movs	r3, #3
 800e644:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e648:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d905      	bls.n	800e65c <find_volume+0x178>
 800e650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e652:	3301      	adds	r3, #1
 800e654:	643b      	str	r3, [r7, #64]	; 0x40
 800e656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e658:	2b03      	cmp	r3, #3
 800e65a:	d9e2      	bls.n	800e622 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e65c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e660:	2b04      	cmp	r3, #4
 800e662:	d101      	bne.n	800e668 <find_volume+0x184>
 800e664:	2301      	movs	r3, #1
 800e666:	e17e      	b.n	800e966 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e668:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d901      	bls.n	800e674 <find_volume+0x190>
 800e670:	230d      	movs	r3, #13
 800e672:	e178      	b.n	800e966 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e676:	3330      	adds	r3, #48	; 0x30
 800e678:	330b      	adds	r3, #11
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fe fd52 	bl	800d124 <ld_word>
 800e680:	4603      	mov	r3, r0
 800e682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e686:	d001      	beq.n	800e68c <find_volume+0x1a8>
 800e688:	230d      	movs	r3, #13
 800e68a:	e16c      	b.n	800e966 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68e:	3330      	adds	r3, #48	; 0x30
 800e690:	3316      	adds	r3, #22
 800e692:	4618      	mov	r0, r3
 800e694:	f7fe fd46 	bl	800d124 <ld_word>
 800e698:	4603      	mov	r3, r0
 800e69a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e69c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d106      	bne.n	800e6b0 <find_volume+0x1cc>
 800e6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a4:	3330      	adds	r3, #48	; 0x30
 800e6a6:	3324      	adds	r3, #36	; 0x24
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7fe fd53 	bl	800d154 <ld_dword>
 800e6ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e6b4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c2:	789b      	ldrb	r3, [r3, #2]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d005      	beq.n	800e6d4 <find_volume+0x1f0>
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ca:	789b      	ldrb	r3, [r3, #2]
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d001      	beq.n	800e6d4 <find_volume+0x1f0>
 800e6d0:	230d      	movs	r3, #13
 800e6d2:	e148      	b.n	800e966 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d6:	789b      	ldrb	r3, [r3, #2]
 800e6d8:	461a      	mov	r2, r3
 800e6da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6dc:	fb02 f303 	mul.w	r3, r2, r3
 800e6e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f0:	895b      	ldrh	r3, [r3, #10]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d008      	beq.n	800e708 <find_volume+0x224>
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f8:	895b      	ldrh	r3, [r3, #10]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fe:	895b      	ldrh	r3, [r3, #10]
 800e700:	3b01      	subs	r3, #1
 800e702:	4013      	ands	r3, r2
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <find_volume+0x228>
 800e708:	230d      	movs	r3, #13
 800e70a:	e12c      	b.n	800e966 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70e:	3330      	adds	r3, #48	; 0x30
 800e710:	3311      	adds	r3, #17
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fd06 	bl	800d124 <ld_word>
 800e718:	4603      	mov	r3, r0
 800e71a:	461a      	mov	r2, r3
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e722:	891b      	ldrh	r3, [r3, #8]
 800e724:	f003 030f 	and.w	r3, r3, #15
 800e728:	b29b      	uxth	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d001      	beq.n	800e732 <find_volume+0x24e>
 800e72e:	230d      	movs	r3, #13
 800e730:	e119      	b.n	800e966 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e734:	3330      	adds	r3, #48	; 0x30
 800e736:	3313      	adds	r3, #19
 800e738:	4618      	mov	r0, r3
 800e73a:	f7fe fcf3 	bl	800d124 <ld_word>
 800e73e:	4603      	mov	r3, r0
 800e740:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e744:	2b00      	cmp	r3, #0
 800e746:	d106      	bne.n	800e756 <find_volume+0x272>
 800e748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74a:	3330      	adds	r3, #48	; 0x30
 800e74c:	3320      	adds	r3, #32
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fe fd00 	bl	800d154 <ld_dword>
 800e754:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	3330      	adds	r3, #48	; 0x30
 800e75a:	330e      	adds	r3, #14
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fe fce1 	bl	800d124 <ld_word>
 800e762:	4603      	mov	r3, r0
 800e764:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e766:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d101      	bne.n	800e770 <find_volume+0x28c>
 800e76c:	230d      	movs	r3, #13
 800e76e:	e0fa      	b.n	800e966 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e770:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e774:	4413      	add	r3, r2
 800e776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e778:	8912      	ldrh	r2, [r2, #8]
 800e77a:	0912      	lsrs	r2, r2, #4
 800e77c:	b292      	uxth	r2, r2
 800e77e:	4413      	add	r3, r2
 800e780:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e786:	429a      	cmp	r2, r3
 800e788:	d204      	bcs.n	800e794 <find_volume+0x2b0>
 800e78a:	230d      	movs	r3, #13
 800e78c:	e0eb      	b.n	800e966 <find_volume+0x482>
 800e78e:	bf00      	nop
 800e790:	2000c6a4 	.word	0x2000c6a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e79c:	8952      	ldrh	r2, [r2, #10]
 800e79e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d101      	bne.n	800e7ae <find_volume+0x2ca>
 800e7aa:	230d      	movs	r3, #13
 800e7ac:	e0db      	b.n	800e966 <find_volume+0x482>
		fmt = FS_FAT32;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d802      	bhi.n	800e7c4 <find_volume+0x2e0>
 800e7be:	2302      	movs	r3, #2
 800e7c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d802      	bhi.n	800e7d4 <find_volume+0x2f0>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d6:	1c9a      	adds	r2, r3, #2
 800e7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7da:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7e0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e7e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e7e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e6:	441a      	add	r2, r3
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e7ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f0:	441a      	add	r2, r3
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e7f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e7fa:	2b03      	cmp	r3, #3
 800e7fc:	d11e      	bne.n	800e83c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e800:	3330      	adds	r3, #48	; 0x30
 800e802:	332a      	adds	r3, #42	; 0x2a
 800e804:	4618      	mov	r0, r3
 800e806:	f7fe fc8d 	bl	800d124 <ld_word>
 800e80a:	4603      	mov	r3, r0
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d001      	beq.n	800e814 <find_volume+0x330>
 800e810:	230d      	movs	r3, #13
 800e812:	e0a8      	b.n	800e966 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e816:	891b      	ldrh	r3, [r3, #8]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d001      	beq.n	800e820 <find_volume+0x33c>
 800e81c:	230d      	movs	r3, #13
 800e81e:	e0a2      	b.n	800e966 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	3330      	adds	r3, #48	; 0x30
 800e824:	332c      	adds	r3, #44	; 0x2c
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe fc94 	bl	800d154 <ld_dword>
 800e82c:	4602      	mov	r2, r0
 800e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e830:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e834:	695b      	ldr	r3, [r3, #20]
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	647b      	str	r3, [r7, #68]	; 0x44
 800e83a:	e01f      	b.n	800e87c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83e:	891b      	ldrh	r3, [r3, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d101      	bne.n	800e848 <find_volume+0x364>
 800e844:	230d      	movs	r3, #13
 800e846:	e08e      	b.n	800e966 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84a:	6a1a      	ldr	r2, [r3, #32]
 800e84c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e84e:	441a      	add	r2, r3
 800e850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e852:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d103      	bne.n	800e864 <find_volume+0x380>
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	e00a      	b.n	800e87a <find_volume+0x396>
 800e864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e866:	695a      	ldr	r2, [r3, #20]
 800e868:	4613      	mov	r3, r2
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	4413      	add	r3, r2
 800e86e:	085a      	lsrs	r2, r3, #1
 800e870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e872:	695b      	ldr	r3, [r3, #20]
 800e874:	f003 0301 	and.w	r3, r3, #1
 800e878:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e87a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87e:	699a      	ldr	r2, [r3, #24]
 800e880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e882:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e886:	0a5b      	lsrs	r3, r3, #9
 800e888:	429a      	cmp	r2, r3
 800e88a:	d201      	bcs.n	800e890 <find_volume+0x3ac>
 800e88c:	230d      	movs	r3, #13
 800e88e:	e06a      	b.n	800e966 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e892:	f04f 32ff 	mov.w	r2, #4294967295
 800e896:	611a      	str	r2, [r3, #16]
 800e898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89a:	691a      	ldr	r2, [r3, #16]
 800e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a2:	2280      	movs	r2, #128	; 0x80
 800e8a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e8a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8aa:	2b03      	cmp	r3, #3
 800e8ac:	d149      	bne.n	800e942 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b0:	3330      	adds	r3, #48	; 0x30
 800e8b2:	3330      	adds	r3, #48	; 0x30
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7fe fc35 	bl	800d124 <ld_word>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d140      	bne.n	800e942 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8c8:	f7fe fea0 	bl	800d60c <move_window>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d137      	bne.n	800e942 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8da:	3330      	adds	r3, #48	; 0x30
 800e8dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fe fc1f 	bl	800d124 <ld_word>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d127      	bne.n	800e942 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f4:	3330      	adds	r3, #48	; 0x30
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fe fc2c 	bl	800d154 <ld_dword>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	4a1c      	ldr	r2, [pc, #112]	; (800e970 <find_volume+0x48c>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d11e      	bne.n	800e942 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e906:	3330      	adds	r3, #48	; 0x30
 800e908:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fc21 	bl	800d154 <ld_dword>
 800e912:	4603      	mov	r3, r0
 800e914:	4a17      	ldr	r2, [pc, #92]	; (800e974 <find_volume+0x490>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d113      	bne.n	800e942 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91c:	3330      	adds	r3, #48	; 0x30
 800e91e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e922:	4618      	mov	r0, r3
 800e924:	f7fe fc16 	bl	800d154 <ld_dword>
 800e928:	4602      	mov	r2, r0
 800e92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e930:	3330      	adds	r3, #48	; 0x30
 800e932:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e936:	4618      	mov	r0, r3
 800e938:	f7fe fc0c 	bl	800d154 <ld_dword>
 800e93c:	4602      	mov	r2, r0
 800e93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e940:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e944:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e948:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e94a:	4b0b      	ldr	r3, [pc, #44]	; (800e978 <find_volume+0x494>)
 800e94c:	881b      	ldrh	r3, [r3, #0]
 800e94e:	3301      	adds	r3, #1
 800e950:	b29a      	uxth	r2, r3
 800e952:	4b09      	ldr	r3, [pc, #36]	; (800e978 <find_volume+0x494>)
 800e954:	801a      	strh	r2, [r3, #0]
 800e956:	4b08      	ldr	r3, [pc, #32]	; (800e978 <find_volume+0x494>)
 800e958:	881a      	ldrh	r2, [r3, #0]
 800e95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e95e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e960:	f7fe fdec 	bl	800d53c <clear_lock>
#endif
	return FR_OK;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3758      	adds	r7, #88	; 0x58
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	41615252 	.word	0x41615252
 800e974:	61417272 	.word	0x61417272
 800e978:	2000c6a8 	.word	0x2000c6a8

0800e97c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e986:	2309      	movs	r3, #9
 800e988:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d01c      	beq.n	800e9ca <validate+0x4e>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d018      	beq.n	800e9ca <validate+0x4e>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d013      	beq.n	800e9ca <validate+0x4e>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	889a      	ldrh	r2, [r3, #4]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	88db      	ldrh	r3, [r3, #6]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d10c      	bne.n	800e9ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	785b      	ldrb	r3, [r3, #1]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7fe fb16 	bl	800cfe8 <disk_status>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	f003 0301 	and.w	r3, r3, #1
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d101      	bne.n	800e9ca <validate+0x4e>
			res = FR_OK;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e9ca:	7bfb      	ldrb	r3, [r7, #15]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d102      	bne.n	800e9d6 <validate+0x5a>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	e000      	b.n	800e9d8 <validate+0x5c>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	683a      	ldr	r2, [r7, #0]
 800e9da:	6013      	str	r3, [r2, #0]
	return res;
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
	...

0800e9e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e9fa:	f107 0310 	add.w	r3, r7, #16
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7ff fcd5 	bl	800e3ae <get_ldnumber>
 800ea04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	da01      	bge.n	800ea10 <f_mount+0x28>
 800ea0c:	230b      	movs	r3, #11
 800ea0e:	e02b      	b.n	800ea68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ea10:	4a17      	ldr	r2, [pc, #92]	; (800ea70 <f_mount+0x88>)
 800ea12:	69fb      	ldr	r3, [r7, #28]
 800ea14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ea1a:	69bb      	ldr	r3, [r7, #24]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d005      	beq.n	800ea2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ea20:	69b8      	ldr	r0, [r7, #24]
 800ea22:	f7fe fd8b 	bl	800d53c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d002      	beq.n	800ea38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	490d      	ldr	r1, [pc, #52]	; (800ea70 <f_mount+0x88>)
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <f_mount+0x66>
 800ea48:	79fb      	ldrb	r3, [r7, #7]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d001      	beq.n	800ea52 <f_mount+0x6a>
 800ea4e:	2300      	movs	r3, #0
 800ea50:	e00a      	b.n	800ea68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ea52:	f107 010c 	add.w	r1, r7, #12
 800ea56:	f107 0308 	add.w	r3, r7, #8
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7ff fd41 	bl	800e4e4 <find_volume>
 800ea62:	4603      	mov	r3, r0
 800ea64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ea66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3720      	adds	r7, #32
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	2000c6a4 	.word	0x2000c6a4

0800ea74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b098      	sub	sp, #96	; 0x60
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d101      	bne.n	800ea8c <f_open+0x18>
 800ea88:	2309      	movs	r3, #9
 800ea8a:	e1ad      	b.n	800ede8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ea8c:	79fb      	ldrb	r3, [r7, #7]
 800ea8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ea94:	79fa      	ldrb	r2, [r7, #7]
 800ea96:	f107 0110 	add.w	r1, r7, #16
 800ea9a:	f107 0308 	add.w	r3, r7, #8
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f7ff fd20 	bl	800e4e4 <find_volume>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800eaaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f040 8191 	bne.w	800edd6 <f_open+0x362>
		dj.obj.fs = fs;
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	f107 0314 	add.w	r3, r7, #20
 800eabe:	4611      	mov	r1, r2
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7ff fc03 	bl	800e2cc <follow_path>
 800eac6:	4603      	mov	r3, r0
 800eac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eacc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d11a      	bne.n	800eb0a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ead4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ead8:	b25b      	sxtb	r3, r3
 800eada:	2b00      	cmp	r3, #0
 800eadc:	da03      	bge.n	800eae6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800eade:	2306      	movs	r3, #6
 800eae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eae4:	e011      	b.n	800eb0a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eae6:	79fb      	ldrb	r3, [r7, #7]
 800eae8:	f023 0301 	bic.w	r3, r3, #1
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	bf14      	ite	ne
 800eaf0:	2301      	movne	r3, #1
 800eaf2:	2300      	moveq	r3, #0
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	f107 0314 	add.w	r3, r7, #20
 800eafc:	4611      	mov	r1, r2
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7fe fc10 	bl	800d324 <chk_lock>
 800eb04:	4603      	mov	r3, r0
 800eb06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800eb0a:	79fb      	ldrb	r3, [r7, #7]
 800eb0c:	f003 031c 	and.w	r3, r3, #28
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d07f      	beq.n	800ec14 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800eb14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d017      	beq.n	800eb4c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eb1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb20:	2b04      	cmp	r3, #4
 800eb22:	d10e      	bne.n	800eb42 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800eb24:	f7fe fc5a 	bl	800d3dc <enq_lock>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d006      	beq.n	800eb3c <f_open+0xc8>
 800eb2e:	f107 0314 	add.w	r3, r7, #20
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7ff fb03 	bl	800e13e <dir_register>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	e000      	b.n	800eb3e <f_open+0xca>
 800eb3c:	2312      	movs	r3, #18
 800eb3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eb42:	79fb      	ldrb	r3, [r7, #7]
 800eb44:	f043 0308 	orr.w	r3, r3, #8
 800eb48:	71fb      	strb	r3, [r7, #7]
 800eb4a:	e010      	b.n	800eb6e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eb4c:	7ebb      	ldrb	r3, [r7, #26]
 800eb4e:	f003 0311 	and.w	r3, r3, #17
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d003      	beq.n	800eb5e <f_open+0xea>
					res = FR_DENIED;
 800eb56:	2307      	movs	r3, #7
 800eb58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eb5c:	e007      	b.n	800eb6e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eb5e:	79fb      	ldrb	r3, [r7, #7]
 800eb60:	f003 0304 	and.w	r3, r3, #4
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d002      	beq.n	800eb6e <f_open+0xfa>
 800eb68:	2308      	movs	r3, #8
 800eb6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eb6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d168      	bne.n	800ec48 <f_open+0x1d4>
 800eb76:	79fb      	ldrb	r3, [r7, #7]
 800eb78:	f003 0308 	and.w	r3, r3, #8
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d063      	beq.n	800ec48 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eb80:	f7fc f800 	bl	800ab84 <get_fattime>
 800eb84:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb88:	330e      	adds	r3, #14
 800eb8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7fe fb1f 	bl	800d1d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb94:	3316      	adds	r3, #22
 800eb96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fe fb19 	bl	800d1d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eba0:	330b      	adds	r3, #11
 800eba2:	2220      	movs	r2, #32
 800eba4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebaa:	4611      	mov	r1, r2
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7ff fa32 	bl	800e016 <ld_clust>
 800ebb2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ebb8:	2200      	movs	r2, #0
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7ff fa4a 	bl	800e054 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ebc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc2:	331c      	adds	r3, #28
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fe fb02 	bl	800d1d0 <st_dword>
					fs->wflag = 1;
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ebd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d037      	beq.n	800ec48 <f_open+0x1d4>
						dw = fs->winsect;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebdc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ebde:	f107 0314 	add.w	r3, r7, #20
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fe ff5d 	bl	800daa6 <remove_chain>
 800ebec:	4603      	mov	r3, r0
 800ebee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ebf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d126      	bne.n	800ec48 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe fd04 	bl	800d60c <move_window>
 800ec04:	4603      	mov	r3, r0
 800ec06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ec0e:	3a01      	subs	r2, #1
 800ec10:	60da      	str	r2, [r3, #12]
 800ec12:	e019      	b.n	800ec48 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ec14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d115      	bne.n	800ec48 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ec1c:	7ebb      	ldrb	r3, [r7, #26]
 800ec1e:	f003 0310 	and.w	r3, r3, #16
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d003      	beq.n	800ec2e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ec26:	2304      	movs	r3, #4
 800ec28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ec2c:	e00c      	b.n	800ec48 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ec2e:	79fb      	ldrb	r3, [r7, #7]
 800ec30:	f003 0302 	and.w	r3, r3, #2
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d007      	beq.n	800ec48 <f_open+0x1d4>
 800ec38:	7ebb      	ldrb	r3, [r7, #26]
 800ec3a:	f003 0301 	and.w	r3, r3, #1
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d002      	beq.n	800ec48 <f_open+0x1d4>
						res = FR_DENIED;
 800ec42:	2307      	movs	r3, #7
 800ec44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ec48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d128      	bne.n	800eca2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ec50:	79fb      	ldrb	r3, [r7, #7]
 800ec52:	f003 0308 	and.w	r3, r3, #8
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d003      	beq.n	800ec62 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec60:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ec6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ec70:	79fb      	ldrb	r3, [r7, #7]
 800ec72:	f023 0301 	bic.w	r3, r3, #1
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	bf14      	ite	ne
 800ec7a:	2301      	movne	r3, #1
 800ec7c:	2300      	moveq	r3, #0
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	461a      	mov	r2, r3
 800ec82:	f107 0314 	add.w	r3, r7, #20
 800ec86:	4611      	mov	r1, r2
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fe fbc9 	bl	800d420 <inc_lock>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	691b      	ldr	r3, [r3, #16]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d102      	bne.n	800eca2 <f_open+0x22e>
 800ec9c:	2302      	movs	r3, #2
 800ec9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800eca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	f040 8095 	bne.w	800edd6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7ff f9af 	bl	800e016 <ld_clust>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ecbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecc0:	331c      	adds	r3, #28
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fe fa46 	bl	800d154 <ld_dword>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ecd4:	693a      	ldr	r2, [r7, #16]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	88da      	ldrh	r2, [r3, #6]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	79fa      	ldrb	r2, [r7, #7]
 800ece6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2200      	movs	r2, #0
 800ecec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	3330      	adds	r3, #48	; 0x30
 800ecfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed02:	2100      	movs	r1, #0
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fe fab0 	bl	800d26a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ed0a:	79fb      	ldrb	r3, [r7, #7]
 800ed0c:	f003 0320 	and.w	r3, r3, #32
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d060      	beq.n	800edd6 <f_open+0x362>
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d05c      	beq.n	800edd6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	68da      	ldr	r2, [r3, #12]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	895b      	ldrh	r3, [r3, #10]
 800ed28:	025b      	lsls	r3, r3, #9
 800ed2a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	68db      	ldr	r3, [r3, #12]
 800ed36:	657b      	str	r3, [r7, #84]	; 0x54
 800ed38:	e016      	b.n	800ed68 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fe fd1f 	bl	800d782 <get_fat>
 800ed44:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ed46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d802      	bhi.n	800ed52 <f_open+0x2de>
 800ed4c:	2302      	movs	r3, #2
 800ed4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ed52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed58:	d102      	bne.n	800ed60 <f_open+0x2ec>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ed60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed64:	1ad3      	subs	r3, r2, r3
 800ed66:	657b      	str	r3, [r7, #84]	; 0x54
 800ed68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d103      	bne.n	800ed78 <f_open+0x304>
 800ed70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d8e0      	bhi.n	800ed3a <f_open+0x2c6>
				}
				fp->clust = clst;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed7c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ed7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d127      	bne.n	800edd6 <f_open+0x362>
 800ed86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d022      	beq.n	800edd6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fe fcd5 	bl	800d744 <clust2sect>
 800ed9a:	6478      	str	r0, [r7, #68]	; 0x44
 800ed9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d103      	bne.n	800edaa <f_open+0x336>
						res = FR_INT_ERR;
 800eda2:	2302      	movs	r3, #2
 800eda4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800eda8:	e015      	b.n	800edd6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800edaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edac:	0a5a      	lsrs	r2, r3, #9
 800edae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edb0:	441a      	add	r2, r3
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	7858      	ldrb	r0, [r3, #1]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6a1a      	ldr	r2, [r3, #32]
 800edc4:	2301      	movs	r3, #1
 800edc6:	f7fe f94f 	bl	800d068 <disk_read>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <f_open+0x362>
 800edd0:	2301      	movs	r3, #1
 800edd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800edd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d002      	beq.n	800ede4 <f_open+0x370>
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2200      	movs	r2, #0
 800ede2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ede4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3760      	adds	r7, #96	; 0x60
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08c      	sub	sp, #48	; 0x30
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
 800edfc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	2200      	movs	r2, #0
 800ee06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f107 0210 	add.w	r2, r7, #16
 800ee0e:	4611      	mov	r1, r2
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7ff fdb3 	bl	800e97c <validate>
 800ee16:	4603      	mov	r3, r0
 800ee18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ee1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d107      	bne.n	800ee34 <f_write+0x44>
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	7d5b      	ldrb	r3, [r3, #21]
 800ee28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ee2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d002      	beq.n	800ee3a <f_write+0x4a>
 800ee34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee38:	e14b      	b.n	800f0d2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	7d1b      	ldrb	r3, [r3, #20]
 800ee3e:	f003 0302 	and.w	r3, r3, #2
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d101      	bne.n	800ee4a <f_write+0x5a>
 800ee46:	2307      	movs	r3, #7
 800ee48:	e143      	b.n	800f0d2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	699a      	ldr	r2, [r3, #24]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	441a      	add	r2, r3
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	f080 812d 	bcs.w	800f0b6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	43db      	mvns	r3, r3
 800ee62:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ee64:	e127      	b.n	800f0b6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	699b      	ldr	r3, [r3, #24]
 800ee6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f040 80e3 	bne.w	800f03a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	699b      	ldr	r3, [r3, #24]
 800ee78:	0a5b      	lsrs	r3, r3, #9
 800ee7a:	693a      	ldr	r2, [r7, #16]
 800ee7c:	8952      	ldrh	r2, [r2, #10]
 800ee7e:	3a01      	subs	r2, #1
 800ee80:	4013      	ands	r3, r2
 800ee82:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d143      	bne.n	800ef12 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	699b      	ldr	r3, [r3, #24]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10c      	bne.n	800eeac <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	689b      	ldr	r3, [r3, #8]
 800ee96:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d11a      	bne.n	800eed4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2100      	movs	r1, #0
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fe fe64 	bl	800db70 <create_chain>
 800eea8:	62b8      	str	r0, [r7, #40]	; 0x28
 800eeaa:	e013      	b.n	800eed4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d007      	beq.n	800eec4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f7fe fef0 	bl	800dca0 <clmt_clust>
 800eec0:	62b8      	str	r0, [r7, #40]	; 0x28
 800eec2:	e007      	b.n	800eed4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	69db      	ldr	r3, [r3, #28]
 800eeca:	4619      	mov	r1, r3
 800eecc:	4610      	mov	r0, r2
 800eece:	f7fe fe4f 	bl	800db70 <create_chain>
 800eed2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f000 80f2 	beq.w	800f0c0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d104      	bne.n	800eeec <f_write+0xfc>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2202      	movs	r2, #2
 800eee6:	755a      	strb	r2, [r3, #21]
 800eee8:	2302      	movs	r3, #2
 800eeea:	e0f2      	b.n	800f0d2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eef2:	d104      	bne.n	800eefe <f_write+0x10e>
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2201      	movs	r2, #1
 800eef8:	755a      	strb	r2, [r3, #21]
 800eefa:	2301      	movs	r3, #1
 800eefc:	e0e9      	b.n	800f0d2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef02:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d102      	bne.n	800ef12 <f_write+0x122>
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef10:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	7d1b      	ldrb	r3, [r3, #20]
 800ef16:	b25b      	sxtb	r3, r3
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	da18      	bge.n	800ef4e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	7858      	ldrb	r0, [r3, #1]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6a1a      	ldr	r2, [r3, #32]
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	f7fe f8bc 	bl	800d0a8 <disk_write>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d004      	beq.n	800ef40 <f_write+0x150>
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	755a      	strb	r2, [r3, #21]
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e0c8      	b.n	800f0d2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	7d1b      	ldrb	r3, [r3, #20]
 800ef44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef48:	b2da      	uxtb	r2, r3
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef4e:	693a      	ldr	r2, [r7, #16]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	69db      	ldr	r3, [r3, #28]
 800ef54:	4619      	mov	r1, r3
 800ef56:	4610      	mov	r0, r2
 800ef58:	f7fe fbf4 	bl	800d744 <clust2sect>
 800ef5c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d104      	bne.n	800ef6e <f_write+0x17e>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2202      	movs	r2, #2
 800ef68:	755a      	strb	r2, [r3, #21]
 800ef6a:	2302      	movs	r3, #2
 800ef6c:	e0b1      	b.n	800f0d2 <f_write+0x2e2>
			sect += csect;
 800ef6e:	697a      	ldr	r2, [r7, #20]
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	4413      	add	r3, r2
 800ef74:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	0a5b      	lsrs	r3, r3, #9
 800ef7a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ef7c:	6a3b      	ldr	r3, [r7, #32]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d03c      	beq.n	800effc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ef82:	69ba      	ldr	r2, [r7, #24]
 800ef84:	6a3b      	ldr	r3, [r7, #32]
 800ef86:	4413      	add	r3, r2
 800ef88:	693a      	ldr	r2, [r7, #16]
 800ef8a:	8952      	ldrh	r2, [r2, #10]
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d905      	bls.n	800ef9c <f_write+0x1ac>
					cc = fs->csize - csect;
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	895b      	ldrh	r3, [r3, #10]
 800ef94:	461a      	mov	r2, r3
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	1ad3      	subs	r3, r2, r3
 800ef9a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	7858      	ldrb	r0, [r3, #1]
 800efa0:	6a3b      	ldr	r3, [r7, #32]
 800efa2:	697a      	ldr	r2, [r7, #20]
 800efa4:	69f9      	ldr	r1, [r7, #28]
 800efa6:	f7fe f87f 	bl	800d0a8 <disk_write>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <f_write+0x1ca>
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2201      	movs	r2, #1
 800efb4:	755a      	strb	r2, [r3, #21]
 800efb6:	2301      	movs	r3, #1
 800efb8:	e08b      	b.n	800f0d2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6a1a      	ldr	r2, [r3, #32]
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	6a3a      	ldr	r2, [r7, #32]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d915      	bls.n	800eff4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6a1a      	ldr	r2, [r3, #32]
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	1ad3      	subs	r3, r2, r3
 800efd6:	025b      	lsls	r3, r3, #9
 800efd8:	69fa      	ldr	r2, [r7, #28]
 800efda:	4413      	add	r3, r2
 800efdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efe0:	4619      	mov	r1, r3
 800efe2:	f7fe f921 	bl	800d228 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	7d1b      	ldrb	r3, [r3, #20]
 800efea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	025b      	lsls	r3, r3, #9
 800eff8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800effa:	e03f      	b.n	800f07c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	6a1b      	ldr	r3, [r3, #32]
 800f000:	697a      	ldr	r2, [r7, #20]
 800f002:	429a      	cmp	r2, r3
 800f004:	d016      	beq.n	800f034 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	699a      	ldr	r2, [r3, #24]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f00e:	429a      	cmp	r2, r3
 800f010:	d210      	bcs.n	800f034 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	7858      	ldrb	r0, [r3, #1]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f01c:	2301      	movs	r3, #1
 800f01e:	697a      	ldr	r2, [r7, #20]
 800f020:	f7fe f822 	bl	800d068 <disk_read>
 800f024:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f026:	2b00      	cmp	r3, #0
 800f028:	d004      	beq.n	800f034 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2201      	movs	r2, #1
 800f02e:	755a      	strb	r2, [r3, #21]
 800f030:	2301      	movs	r3, #1
 800f032:	e04e      	b.n	800f0d2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	699b      	ldr	r3, [r3, #24]
 800f03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f042:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f046:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d901      	bls.n	800f054 <f_write+0x264>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f062:	4413      	add	r3, r2
 800f064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f066:	69f9      	ldr	r1, [r7, #28]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fe f8dd 	bl	800d228 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	7d1b      	ldrb	r3, [r3, #20]
 800f072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f076:	b2da      	uxtb	r2, r3
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f07c:	69fa      	ldr	r2, [r7, #28]
 800f07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f080:	4413      	add	r3, r2
 800f082:	61fb      	str	r3, [r7, #28]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	699a      	ldr	r2, [r3, #24]
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	441a      	add	r2, r3
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	619a      	str	r2, [r3, #24]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	68da      	ldr	r2, [r3, #12]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	699b      	ldr	r3, [r3, #24]
 800f098:	429a      	cmp	r2, r3
 800f09a:	bf38      	it	cc
 800f09c:	461a      	movcc	r2, r3
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	60da      	str	r2, [r3, #12]
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	441a      	add	r2, r3
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	601a      	str	r2, [r3, #0]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f47f aed4 	bne.w	800ee66 <f_write+0x76>
 800f0be:	e000      	b.n	800f0c2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f0c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	7d1b      	ldrb	r3, [r3, #20]
 800f0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3730      	adds	r7, #48	; 0x30
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b086      	sub	sp, #24
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f107 0208 	add.w	r2, r7, #8
 800f0e8:	4611      	mov	r1, r2
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7ff fc46 	bl	800e97c <validate>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f0f4:	7dfb      	ldrb	r3, [r7, #23]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d168      	bne.n	800f1cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	7d1b      	ldrb	r3, [r3, #20]
 800f0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f102:	2b00      	cmp	r3, #0
 800f104:	d062      	beq.n	800f1cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	7d1b      	ldrb	r3, [r3, #20]
 800f10a:	b25b      	sxtb	r3, r3
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	da15      	bge.n	800f13c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	7858      	ldrb	r0, [r3, #1]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a1a      	ldr	r2, [r3, #32]
 800f11e:	2301      	movs	r3, #1
 800f120:	f7fd ffc2 	bl	800d0a8 <disk_write>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d001      	beq.n	800f12e <f_sync+0x54>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e04f      	b.n	800f1ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	7d1b      	ldrb	r3, [r3, #20]
 800f132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f136:	b2da      	uxtb	r2, r3
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f13c:	f7fb fd22 	bl	800ab84 <get_fattime>
 800f140:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f142:	68ba      	ldr	r2, [r7, #8]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f148:	4619      	mov	r1, r3
 800f14a:	4610      	mov	r0, r2
 800f14c:	f7fe fa5e 	bl	800d60c <move_window>
 800f150:	4603      	mov	r3, r0
 800f152:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f154:	7dfb      	ldrb	r3, [r7, #23]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d138      	bne.n	800f1cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f15e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	330b      	adds	r3, #11
 800f164:	781a      	ldrb	r2, [r3, #0]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	330b      	adds	r3, #11
 800f16a:	f042 0220 	orr.w	r2, r2, #32
 800f16e:	b2d2      	uxtb	r2, r2
 800f170:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6818      	ldr	r0, [r3, #0]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	461a      	mov	r2, r3
 800f17c:	68f9      	ldr	r1, [r7, #12]
 800f17e:	f7fe ff69 	bl	800e054 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f103 021c 	add.w	r2, r3, #28
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	68db      	ldr	r3, [r3, #12]
 800f18c:	4619      	mov	r1, r3
 800f18e:	4610      	mov	r0, r2
 800f190:	f7fe f81e 	bl	800d1d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	3316      	adds	r3, #22
 800f198:	6939      	ldr	r1, [r7, #16]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fe f818 	bl	800d1d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	3312      	adds	r3, #18
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fd fff7 	bl	800d19a <st_word>
					fs->wflag = 1;
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fe fa57 	bl	800d668 <sync_fs>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	7d1b      	ldrb	r3, [r3, #20]
 800f1c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1c6:	b2da      	uxtb	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
	...

0800f1d8 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f1d8:	b590      	push	{r4, r7, lr}
 800f1da:	b09d      	sub	sp, #116	; 0x74
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	607a      	str	r2, [r7, #4]
 800f1e2:	603b      	str	r3, [r7, #0]
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f1ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1f0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f1f2:	f107 030c 	add.w	r3, r7, #12
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7ff f8d9 	bl	800e3ae <get_ldnumber>
 800f1fc:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f200:	2b00      	cmp	r3, #0
 800f202:	da02      	bge.n	800f20a <f_mkfs+0x32>
 800f204:	230b      	movs	r3, #11
 800f206:	f000 bc0d 	b.w	800fa24 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f20a:	4a94      	ldr	r2, [pc, #592]	; (800f45c <f_mkfs+0x284>)
 800f20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d005      	beq.n	800f222 <f_mkfs+0x4a>
 800f216:	4a91      	ldr	r2, [pc, #580]	; (800f45c <f_mkfs+0x284>)
 800f218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f21e:	2200      	movs	r2, #0
 800f220:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f224:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f228:	2300      	movs	r3, #0
 800f22a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f22e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f232:	4618      	mov	r0, r3
 800f234:	f7fd fef2 	bl	800d01c <disk_initialize>
 800f238:	4603      	mov	r3, r0
 800f23a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f23e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f242:	f003 0301 	and.w	r3, r3, #1
 800f246:	2b00      	cmp	r3, #0
 800f248:	d001      	beq.n	800f24e <f_mkfs+0x76>
 800f24a:	2303      	movs	r3, #3
 800f24c:	e3ea      	b.n	800fa24 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f24e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f252:	f003 0304 	and.w	r3, r3, #4
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <f_mkfs+0x86>
 800f25a:	230a      	movs	r3, #10
 800f25c:	e3e2      	b.n	800fa24 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f25e:	f107 0214 	add.w	r2, r7, #20
 800f262:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f266:	2103      	movs	r1, #3
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fd ff3d 	bl	800d0e8 <disk_ioctl>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d10c      	bne.n	800f28e <f_mkfs+0xb6>
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d009      	beq.n	800f28e <f_mkfs+0xb6>
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f280:	d805      	bhi.n	800f28e <f_mkfs+0xb6>
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	1e5a      	subs	r2, r3, #1
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	4013      	ands	r3, r2
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <f_mkfs+0xba>
 800f28e:	2301      	movs	r3, #1
 800f290:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f292:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f296:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d003      	beq.n	800f2a6 <f_mkfs+0xce>
 800f29e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d309      	bcc.n	800f2ba <f_mkfs+0xe2>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f2ac:	d805      	bhi.n	800f2ba <f_mkfs+0xe2>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	1e5a      	subs	r2, r3, #1
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	4013      	ands	r3, r2
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d001      	beq.n	800f2be <f_mkfs+0xe6>
 800f2ba:	2313      	movs	r3, #19
 800f2bc:	e3b2      	b.n	800fa24 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f2be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2c6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f2cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f2d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2dc:	fb02 f303 	mul.w	r3, r2, r3
 800f2e0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d101      	bne.n	800f2ec <f_mkfs+0x114>
 800f2e8:	230e      	movs	r3, #14
 800f2ea:	e39b      	b.n	800fa24 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f2ec:	f107 0210 	add.w	r2, r7, #16
 800f2f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f2f4:	2101      	movs	r1, #1
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fd fef6 	bl	800d0e8 <disk_ioctl>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d001      	beq.n	800f306 <f_mkfs+0x12e>
 800f302:	2301      	movs	r3, #1
 800f304:	e38e      	b.n	800fa24 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f306:	7afb      	ldrb	r3, [r7, #11]
 800f308:	f003 0308 	and.w	r3, r3, #8
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d001      	beq.n	800f314 <f_mkfs+0x13c>
 800f310:	2300      	movs	r3, #0
 800f312:	e000      	b.n	800f316 <f_mkfs+0x13e>
 800f314:	233f      	movs	r3, #63	; 0x3f
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d901      	bls.n	800f324 <f_mkfs+0x14c>
 800f320:	230e      	movs	r3, #14
 800f322:	e37f      	b.n	800fa24 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f324:	693a      	ldr	r2, [r7, #16]
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	1ad3      	subs	r3, r2, r3
 800f32a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	2b7f      	cmp	r3, #127	; 0x7f
 800f330:	d801      	bhi.n	800f336 <f_mkfs+0x15e>
 800f332:	230e      	movs	r3, #14
 800f334:	e376      	b.n	800fa24 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b80      	cmp	r3, #128	; 0x80
 800f33a:	d901      	bls.n	800f340 <f_mkfs+0x168>
 800f33c:	2313      	movs	r3, #19
 800f33e:	e371      	b.n	800fa24 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f340:	7afb      	ldrb	r3, [r7, #11]
 800f342:	f003 0302 	and.w	r3, r3, #2
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00d      	beq.n	800f366 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f34a:	7afb      	ldrb	r3, [r7, #11]
 800f34c:	f003 0307 	and.w	r3, r3, #7
 800f350:	2b02      	cmp	r3, #2
 800f352:	d004      	beq.n	800f35e <f_mkfs+0x186>
 800f354:	7afb      	ldrb	r3, [r7, #11]
 800f356:	f003 0301 	and.w	r3, r3, #1
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d103      	bne.n	800f366 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f35e:	2303      	movs	r3, #3
 800f360:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f364:	e009      	b.n	800f37a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f366:	7afb      	ldrb	r3, [r7, #11]
 800f368:	f003 0301 	and.w	r3, r3, #1
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d101      	bne.n	800f374 <f_mkfs+0x19c>
 800f370:	2313      	movs	r3, #19
 800f372:	e357      	b.n	800fa24 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f374:	2302      	movs	r3, #2
 800f376:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f37e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f382:	2b03      	cmp	r3, #3
 800f384:	d13c      	bne.n	800f400 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d11b      	bne.n	800f3c4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	0c5b      	lsrs	r3, r3, #17
 800f390:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f392:	2300      	movs	r3, #0
 800f394:	64bb      	str	r3, [r7, #72]	; 0x48
 800f396:	2301      	movs	r3, #1
 800f398:	653b      	str	r3, [r7, #80]	; 0x50
 800f39a:	e005      	b.n	800f3a8 <f_mkfs+0x1d0>
 800f39c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f39e:	3301      	adds	r3, #1
 800f3a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a4:	005b      	lsls	r3, r3, #1
 800f3a6:	653b      	str	r3, [r7, #80]	; 0x50
 800f3a8:	4a2d      	ldr	r2, [pc, #180]	; (800f460 <f_mkfs+0x288>)
 800f3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d007      	beq.n	800f3c4 <f_mkfs+0x1ec>
 800f3b4:	4a2a      	ldr	r2, [pc, #168]	; (800f460 <f_mkfs+0x288>)
 800f3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3bc:	461a      	mov	r2, r3
 800f3be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d2eb      	bcs.n	800f39c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f3c4:	693a      	ldr	r2, [r7, #16]
 800f3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3cc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f3ce:	6a3b      	ldr	r3, [r7, #32]
 800f3d0:	3302      	adds	r3, #2
 800f3d2:	009a      	lsls	r2, r3, #2
 800f3d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3d6:	4413      	add	r3, r2
 800f3d8:	1e5a      	subs	r2, r3, #1
 800f3da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3e0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800f3e2:	2320      	movs	r3, #32
 800f3e4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f3ea:	6a3b      	ldr	r3, [r7, #32]
 800f3ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d903      	bls.n	800f3fc <f_mkfs+0x224>
 800f3f4:	6a3b      	ldr	r3, [r7, #32]
 800f3f6:	4a1b      	ldr	r2, [pc, #108]	; (800f464 <f_mkfs+0x28c>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d952      	bls.n	800f4a2 <f_mkfs+0x2ca>
 800f3fc:	230e      	movs	r3, #14
 800f3fe:	e311      	b.n	800fa24 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f402:	2b00      	cmp	r3, #0
 800f404:	d11b      	bne.n	800f43e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	0b1b      	lsrs	r3, r3, #12
 800f40a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f40c:	2300      	movs	r3, #0
 800f40e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f410:	2301      	movs	r3, #1
 800f412:	653b      	str	r3, [r7, #80]	; 0x50
 800f414:	e005      	b.n	800f422 <f_mkfs+0x24a>
 800f416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f418:	3301      	adds	r3, #1
 800f41a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f41c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f41e:	005b      	lsls	r3, r3, #1
 800f420:	653b      	str	r3, [r7, #80]	; 0x50
 800f422:	4a11      	ldr	r2, [pc, #68]	; (800f468 <f_mkfs+0x290>)
 800f424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d007      	beq.n	800f43e <f_mkfs+0x266>
 800f42e:	4a0e      	ldr	r2, [pc, #56]	; (800f468 <f_mkfs+0x290>)
 800f430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f436:	461a      	mov	r2, r3
 800f438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d2eb      	bcs.n	800f416 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f43e:	693a      	ldr	r2, [r7, #16]
 800f440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f442:	fbb2 f3f3 	udiv	r3, r2, r3
 800f446:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f448:	6a3b      	ldr	r3, [r7, #32]
 800f44a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f44e:	4293      	cmp	r3, r2
 800f450:	d90c      	bls.n	800f46c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f452:	6a3b      	ldr	r3, [r7, #32]
 800f454:	3302      	adds	r3, #2
 800f456:	005b      	lsls	r3, r3, #1
 800f458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f45a:	e012      	b.n	800f482 <f_mkfs+0x2aa>
 800f45c:	2000c6a4 	.word	0x2000c6a4
 800f460:	0801571c 	.word	0x0801571c
 800f464:	0ffffff5 	.word	0x0ffffff5
 800f468:	0801572c 	.word	0x0801572c
				} else {
					fmt = FS_FAT12;
 800f46c:	2301      	movs	r3, #1
 800f46e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f472:	6a3a      	ldr	r2, [r7, #32]
 800f474:	4613      	mov	r3, r2
 800f476:	005b      	lsls	r3, r3, #1
 800f478:	4413      	add	r3, r2
 800f47a:	3301      	adds	r3, #1
 800f47c:	085b      	lsrs	r3, r3, #1
 800f47e:	3303      	adds	r3, #3
 800f480:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f482:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f486:	4413      	add	r3, r2
 800f488:	1e5a      	subs	r2, r3, #1
 800f48a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f490:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800f492:	2301      	movs	r3, #1
 800f494:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f498:	015a      	lsls	r2, r3, #5
 800f49a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4a0:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4a6:	4413      	add	r3, r2
 800f4a8:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f4aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4ae:	fb03 f202 	mul.w	r2, r3, r2
 800f4b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4b4:	4413      	add	r3, r2
 800f4b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f4b8:	4413      	add	r3, r2
 800f4ba:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f4bc:	697a      	ldr	r2, [r7, #20]
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	1e5a      	subs	r2, r3, #1
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	425b      	negs	r3, r3
 800f4c8:	401a      	ands	r2, r3
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	1ad3      	subs	r3, r2, r3
 800f4ce:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f4d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f4d4:	2b03      	cmp	r3, #3
 800f4d6:	d108      	bne.n	800f4ea <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f4d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4dc:	4413      	add	r3, r2
 800f4de:	657b      	str	r3, [r7, #84]	; 0x54
 800f4e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f4e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4e4:	4413      	add	r3, r2
 800f4e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f4e8:	e006      	b.n	800f4f8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f4ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4f4:	4413      	add	r3, r2
 800f4f6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f4f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4fa:	011a      	lsls	r2, r3, #4
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	441a      	add	r2, r3
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	1ad2      	subs	r2, r2, r3
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	429a      	cmp	r2, r3
 800f508:	d901      	bls.n	800f50e <f_mkfs+0x336>
 800f50a:	230e      	movs	r3, #14
 800f50c:	e28a      	b.n	800fa24 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f50e:	693a      	ldr	r2, [r7, #16]
 800f510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f512:	1ad2      	subs	r2, r2, r3
 800f514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f518:	fb01 f303 	mul.w	r3, r1, r3
 800f51c:	1ad2      	subs	r2, r2, r3
 800f51e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f520:	1ad2      	subs	r2, r2, r3
 800f522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f524:	fbb2 f3f3 	udiv	r3, r2, r3
 800f528:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f52a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f52e:	2b03      	cmp	r3, #3
 800f530:	d10f      	bne.n	800f552 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f538:	4293      	cmp	r3, r2
 800f53a:	d80a      	bhi.n	800f552 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d105      	bne.n	800f54e <f_mkfs+0x376>
 800f542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f544:	085b      	lsrs	r3, r3, #1
 800f546:	607b      	str	r3, [r7, #4]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d144      	bne.n	800f5d8 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f54e:	230e      	movs	r3, #14
 800f550:	e268      	b.n	800fa24 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f552:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f556:	2b02      	cmp	r3, #2
 800f558:	d133      	bne.n	800f5c2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f55a:	6a3b      	ldr	r3, [r7, #32]
 800f55c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f560:	4293      	cmp	r3, r2
 800f562:	d91e      	bls.n	800f5a2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d107      	bne.n	800f57a <f_mkfs+0x3a2>
 800f56a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f56c:	005b      	lsls	r3, r3, #1
 800f56e:	2b40      	cmp	r3, #64	; 0x40
 800f570:	d803      	bhi.n	800f57a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f574:	005b      	lsls	r3, r3, #1
 800f576:	607b      	str	r3, [r7, #4]
 800f578:	e033      	b.n	800f5e2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f57a:	7afb      	ldrb	r3, [r7, #11]
 800f57c:	f003 0302 	and.w	r3, r3, #2
 800f580:	2b00      	cmp	r3, #0
 800f582:	d003      	beq.n	800f58c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f584:	2303      	movs	r3, #3
 800f586:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f58a:	e02a      	b.n	800f5e2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d105      	bne.n	800f59e <f_mkfs+0x3c6>
 800f592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f594:	005b      	lsls	r3, r3, #1
 800f596:	607b      	str	r3, [r7, #4]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b80      	cmp	r3, #128	; 0x80
 800f59c:	d91e      	bls.n	800f5dc <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f59e:	230e      	movs	r3, #14
 800f5a0:	e240      	b.n	800fa24 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f5a2:	6a3b      	ldr	r3, [r7, #32]
 800f5a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d80a      	bhi.n	800f5c2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d105      	bne.n	800f5be <f_mkfs+0x3e6>
 800f5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5b4:	005b      	lsls	r3, r3, #1
 800f5b6:	607b      	str	r3, [r7, #4]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b80      	cmp	r3, #128	; 0x80
 800f5bc:	d910      	bls.n	800f5e0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f5be:	230e      	movs	r3, #14
 800f5c0:	e230      	b.n	800fa24 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f5c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d10c      	bne.n	800f5e4 <f_mkfs+0x40c>
 800f5ca:	6a3b      	ldr	r3, [r7, #32]
 800f5cc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d907      	bls.n	800f5e4 <f_mkfs+0x40c>
 800f5d4:	230e      	movs	r3, #14
 800f5d6:	e225      	b.n	800fa24 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f5d8:	bf00      	nop
 800f5da:	e6ce      	b.n	800f37a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f5dc:	bf00      	nop
 800f5de:	e6cc      	b.n	800f37a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f5e0:	bf00      	nop
			pau = au;
 800f5e2:	e6ca      	b.n	800f37a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f5e4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f5e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	2100      	movs	r1, #0
 800f5ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5ee:	f7fd fe3c 	bl	800d26a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f5f2:	220b      	movs	r2, #11
 800f5f4:	49b2      	ldr	r1, [pc, #712]	; (800f8c0 <f_mkfs+0x6e8>)
 800f5f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5f8:	f7fd fe16 	bl	800d228 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fe:	330b      	adds	r3, #11
 800f600:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f602:	4611      	mov	r1, r2
 800f604:	4618      	mov	r0, r3
 800f606:	f7fd fdc8 	bl	800d19a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60c:	330d      	adds	r3, #13
 800f60e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f610:	b2d2      	uxtb	r2, r2
 800f612:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f616:	330e      	adds	r3, #14
 800f618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f61a:	b292      	uxth	r2, r2
 800f61c:	4611      	mov	r1, r2
 800f61e:	4618      	mov	r0, r3
 800f620:	f7fd fdbb 	bl	800d19a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f626:	3310      	adds	r3, #16
 800f628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f62a:	b2d2      	uxtb	r2, r2
 800f62c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f630:	f103 0211 	add.w	r2, r3, #17
 800f634:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f638:	2b03      	cmp	r3, #3
 800f63a:	d002      	beq.n	800f642 <f_mkfs+0x46a>
 800f63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f63e:	b29b      	uxth	r3, r3
 800f640:	e000      	b.n	800f644 <f_mkfs+0x46c>
 800f642:	2300      	movs	r3, #0
 800f644:	4619      	mov	r1, r3
 800f646:	4610      	mov	r0, r2
 800f648:	f7fd fda7 	bl	800d19a <st_word>
		if (sz_vol < 0x10000) {
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f652:	d208      	bcs.n	800f666 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	3313      	adds	r3, #19
 800f658:	693a      	ldr	r2, [r7, #16]
 800f65a:	b292      	uxth	r2, r2
 800f65c:	4611      	mov	r1, r2
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fd fd9b 	bl	800d19a <st_word>
 800f664:	e006      	b.n	800f674 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	3320      	adds	r3, #32
 800f66a:	693a      	ldr	r2, [r7, #16]
 800f66c:	4611      	mov	r1, r2
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fd fdae 	bl	800d1d0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f676:	3315      	adds	r3, #21
 800f678:	22f8      	movs	r2, #248	; 0xf8
 800f67a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67e:	3318      	adds	r3, #24
 800f680:	213f      	movs	r1, #63	; 0x3f
 800f682:	4618      	mov	r0, r3
 800f684:	f7fd fd89 	bl	800d19a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	331a      	adds	r3, #26
 800f68c:	21ff      	movs	r1, #255	; 0xff
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fd fd83 	bl	800d19a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	331c      	adds	r3, #28
 800f698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fd fd98 	bl	800d1d0 <st_dword>
		if (fmt == FS_FAT32) {
 800f6a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6a4:	2b03      	cmp	r3, #3
 800f6a6:	d131      	bne.n	800f70c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f6ae:	f7fb fa69 	bl	800ab84 <get_fattime>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f7fd fd8a 	bl	800d1d0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6be:	3324      	adds	r3, #36	; 0x24
 800f6c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fd fd84 	bl	800d1d0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ca:	332c      	adds	r3, #44	; 0x2c
 800f6cc:	2102      	movs	r1, #2
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fd fd7e 	bl	800d1d0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d6:	3330      	adds	r3, #48	; 0x30
 800f6d8:	2101      	movs	r1, #1
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7fd fd5d 	bl	800d19a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e2:	3332      	adds	r3, #50	; 0x32
 800f6e4:	2106      	movs	r1, #6
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fd fd57 	bl	800d19a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ee:	3340      	adds	r3, #64	; 0x40
 800f6f0:	2280      	movs	r2, #128	; 0x80
 800f6f2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f6:	3342      	adds	r3, #66	; 0x42
 800f6f8:	2229      	movs	r2, #41	; 0x29
 800f6fa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fe:	3347      	adds	r3, #71	; 0x47
 800f700:	2213      	movs	r2, #19
 800f702:	4970      	ldr	r1, [pc, #448]	; (800f8c4 <f_mkfs+0x6ec>)
 800f704:	4618      	mov	r0, r3
 800f706:	f7fd fd8f 	bl	800d228 <mem_cpy>
 800f70a:	e020      	b.n	800f74e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f712:	f7fb fa37 	bl	800ab84 <get_fattime>
 800f716:	4603      	mov	r3, r0
 800f718:	4619      	mov	r1, r3
 800f71a:	4620      	mov	r0, r4
 800f71c:	f7fd fd58 	bl	800d1d0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f722:	3316      	adds	r3, #22
 800f724:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f726:	b292      	uxth	r2, r2
 800f728:	4611      	mov	r1, r2
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fd fd35 	bl	800d19a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f732:	3324      	adds	r3, #36	; 0x24
 800f734:	2280      	movs	r2, #128	; 0x80
 800f736:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	3326      	adds	r3, #38	; 0x26
 800f73c:	2229      	movs	r2, #41	; 0x29
 800f73e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f742:	332b      	adds	r3, #43	; 0x2b
 800f744:	2213      	movs	r2, #19
 800f746:	4960      	ldr	r1, [pc, #384]	; (800f8c8 <f_mkfs+0x6f0>)
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fd fd6d 	bl	800d228 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f750:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f754:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fd fd1e 	bl	800d19a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f75e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f762:	2301      	movs	r3, #1
 800f764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f766:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f768:	f7fd fc9e 	bl	800d0a8 <disk_write>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d001      	beq.n	800f776 <f_mkfs+0x59e>
 800f772:	2301      	movs	r3, #1
 800f774:	e156      	b.n	800fa24 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f776:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f77a:	2b03      	cmp	r3, #3
 800f77c:	d140      	bne.n	800f800 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f780:	1d9a      	adds	r2, r3, #6
 800f782:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f786:	2301      	movs	r3, #1
 800f788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f78a:	f7fd fc8d 	bl	800d0a8 <disk_write>
			mem_set(buf, 0, ss);
 800f78e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f790:	461a      	mov	r2, r3
 800f792:	2100      	movs	r1, #0
 800f794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f796:	f7fd fd68 	bl	800d26a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f79a:	494c      	ldr	r1, [pc, #304]	; (800f8cc <f_mkfs+0x6f4>)
 800f79c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f79e:	f7fd fd17 	bl	800d1d0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f7a8:	4949      	ldr	r1, [pc, #292]	; (800f8d0 <f_mkfs+0x6f8>)
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fd fd10 	bl	800d1d0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f7b6:	6a3b      	ldr	r3, [r7, #32]
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	4610      	mov	r0, r2
 800f7be:	f7fd fd07 	bl	800d1d0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f7c8:	2102      	movs	r1, #2
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fd fd00 	bl	800d1d0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f7d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7fd fcdd 	bl	800d19a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	1dda      	adds	r2, r3, #7
 800f7e4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7ec:	f7fd fc5c 	bl	800d0a8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7fc:	f7fd fc54 	bl	800d0a8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f802:	2100      	movs	r1, #0
 800f804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f806:	f7fd fd30 	bl	800d26a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f80a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f80c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f80e:	2300      	movs	r3, #0
 800f810:	64bb      	str	r3, [r7, #72]	; 0x48
 800f812:	e04b      	b.n	800f8ac <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f814:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f818:	2b03      	cmp	r3, #3
 800f81a:	d113      	bne.n	800f844 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f81c:	f06f 0107 	mvn.w	r1, #7
 800f820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f822:	f7fd fcd5 	bl	800d1d0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f828:	3304      	adds	r3, #4
 800f82a:	f04f 31ff 	mov.w	r1, #4294967295
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fd fcce 	bl	800d1d0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f836:	3308      	adds	r3, #8
 800f838:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7fd fcc7 	bl	800d1d0 <st_dword>
 800f842:	e00b      	b.n	800f85c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f844:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d101      	bne.n	800f850 <f_mkfs+0x678>
 800f84c:	4b21      	ldr	r3, [pc, #132]	; (800f8d4 <f_mkfs+0x6fc>)
 800f84e:	e001      	b.n	800f854 <f_mkfs+0x67c>
 800f850:	f06f 0307 	mvn.w	r3, #7
 800f854:	4619      	mov	r1, r3
 800f856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f858:	f7fd fcba 	bl	800d1d0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f85c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f85e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f864:	4293      	cmp	r3, r2
 800f866:	bf28      	it	cs
 800f868:	4613      	movcs	r3, r2
 800f86a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f86c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f872:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f876:	f7fd fc17 	bl	800d0a8 <disk_write>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d001      	beq.n	800f884 <f_mkfs+0x6ac>
 800f880:	2301      	movs	r3, #1
 800f882:	e0cf      	b.n	800fa24 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f886:	461a      	mov	r2, r3
 800f888:	2100      	movs	r1, #0
 800f88a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f88c:	f7fd fced 	bl	800d26a <mem_set>
				sect += n; nsect -= n;
 800f890:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f894:	4413      	add	r3, r2
 800f896:	667b      	str	r3, [r7, #100]	; 0x64
 800f898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f89a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800f8a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d1dc      	bne.n	800f860 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f8a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d3af      	bcc.n	800f814 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f8b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f8b8:	2b03      	cmp	r3, #3
 800f8ba:	d10d      	bne.n	800f8d8 <f_mkfs+0x700>
 800f8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8be:	e00c      	b.n	800f8da <f_mkfs+0x702>
 800f8c0:	080155cc 	.word	0x080155cc
 800f8c4:	080155d8 	.word	0x080155d8
 800f8c8:	080155ec 	.word	0x080155ec
 800f8cc:	41615252 	.word	0x41615252
 800f8d0:	61417272 	.word	0x61417272
 800f8d4:	00fffff8 	.word	0x00fffff8
 800f8d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f8da:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f8dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	bf28      	it	cs
 800f8e4:	4613      	movcs	r3, r2
 800f8e6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f8e8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f8ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8f2:	f7fd fbd9 	bl	800d0a8 <disk_write>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d001      	beq.n	800f900 <f_mkfs+0x728>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	e091      	b.n	800fa24 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800f900:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f904:	4413      	add	r3, r2
 800f906:	667b      	str	r3, [r7, #100]	; 0x64
 800f908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f90a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f90c:	1ad3      	subs	r3, r2, r3
 800f90e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800f910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f912:	2b00      	cmp	r3, #0
 800f914:	d1e2      	bne.n	800f8dc <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f916:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f91a:	2b03      	cmp	r3, #3
 800f91c:	d103      	bne.n	800f926 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f91e:	230c      	movs	r3, #12
 800f920:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f924:	e010      	b.n	800f948 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f92c:	d303      	bcc.n	800f936 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f92e:	2306      	movs	r3, #6
 800f930:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f934:	e008      	b.n	800f948 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f936:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f93a:	2b02      	cmp	r3, #2
 800f93c:	d101      	bne.n	800f942 <f_mkfs+0x76a>
 800f93e:	2304      	movs	r3, #4
 800f940:	e000      	b.n	800f944 <f_mkfs+0x76c>
 800f942:	2301      	movs	r3, #1
 800f944:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f948:	7afb      	ldrb	r3, [r7, #11]
 800f94a:	f003 0308 	and.w	r3, r3, #8
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d15b      	bne.n	800fa0a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f952:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f954:	461a      	mov	r2, r3
 800f956:	2100      	movs	r1, #0
 800f958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f95a:	f7fd fc86 	bl	800d26a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f960:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f964:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fd fc16 	bl	800d19a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f970:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f974:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f976:	69bb      	ldr	r3, [r7, #24]
 800f978:	2200      	movs	r2, #0
 800f97a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f97c:	69bb      	ldr	r3, [r7, #24]
 800f97e:	3301      	adds	r3, #1
 800f980:	2201      	movs	r2, #1
 800f982:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	3302      	adds	r3, #2
 800f988:	2201      	movs	r2, #1
 800f98a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f98c:	69bb      	ldr	r3, [r7, #24]
 800f98e:	3303      	adds	r3, #3
 800f990:	2200      	movs	r2, #0
 800f992:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	3304      	adds	r3, #4
 800f998:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800f99c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f99e:	693a      	ldr	r2, [r7, #16]
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a2:	441a      	add	r2, r3
 800f9a4:	4b21      	ldr	r3, [pc, #132]	; (800fa2c <f_mkfs+0x854>)
 800f9a6:	fba3 1302 	umull	r1, r3, r3, r2
 800f9aa:	1ad2      	subs	r2, r2, r3
 800f9ac:	0852      	lsrs	r2, r2, #1
 800f9ae:	4413      	add	r3, r2
 800f9b0:	0b5b      	lsrs	r3, r3, #13
 800f9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800f9b4:	69bb      	ldr	r3, [r7, #24]
 800f9b6:	3305      	adds	r3, #5
 800f9b8:	22fe      	movs	r2, #254	; 0xfe
 800f9ba:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f9bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9be:	089b      	lsrs	r3, r3, #2
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	3306      	adds	r3, #6
 800f9c6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f9ca:	b2d2      	uxtb	r2, r2
 800f9cc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f9ce:	69bb      	ldr	r3, [r7, #24]
 800f9d0:	3307      	adds	r3, #7
 800f9d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f9d4:	b2d2      	uxtb	r2, r2
 800f9d6:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	3308      	adds	r3, #8
 800f9dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fd fbf6 	bl	800d1d0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	330c      	adds	r3, #12
 800f9e8:	693a      	ldr	r2, [r7, #16]
 800f9ea:	4611      	mov	r1, r2
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fd fbef 	bl	800d1d0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f9f2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9fc:	f7fd fb54 	bl	800d0a8 <disk_write>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <f_mkfs+0x832>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e00c      	b.n	800fa24 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800fa0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fa0e:	2200      	movs	r2, #0
 800fa10:	2100      	movs	r1, #0
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fd fb68 	bl	800d0e8 <disk_ioctl>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d001      	beq.n	800fa22 <f_mkfs+0x84a>
 800fa1e:	2301      	movs	r3, #1
 800fa20:	e000      	b.n	800fa24 <f_mkfs+0x84c>

	return FR_OK;
 800fa22:	2300      	movs	r3, #0
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3774      	adds	r7, #116	; 0x74
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd90      	pop	{r4, r7, pc}
 800fa2c:	0515565b 	.word	0x0515565b

0800fa30 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	460b      	mov	r3, r1
 800fa3a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800fa3c:	78fb      	ldrb	r3, [r7, #3]
 800fa3e:	2b0a      	cmp	r3, #10
 800fa40:	d103      	bne.n	800fa4a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800fa42:	210d      	movs	r1, #13
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7ff fff3 	bl	800fa30 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	db25      	blt.n	800faa2 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	1c5a      	adds	r2, r3, #1
 800fa5a:	60fa      	str	r2, [r7, #12]
 800fa5c:	687a      	ldr	r2, [r7, #4]
 800fa5e:	4413      	add	r3, r2
 800fa60:	78fa      	ldrb	r2, [r7, #3]
 800fa62:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2b3c      	cmp	r3, #60	; 0x3c
 800fa68:	dd12      	ble.n	800fa90 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6818      	ldr	r0, [r3, #0]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f103 010c 	add.w	r1, r3, #12
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	f107 0308 	add.w	r3, r7, #8
 800fa7a:	f7ff f9b9 	bl	800edf0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800fa7e:	68ba      	ldr	r2, [r7, #8]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d101      	bne.n	800fa8a <putc_bfd+0x5a>
 800fa86:	2300      	movs	r3, #0
 800fa88:	e001      	b.n	800fa8e <putc_bfd+0x5e>
 800fa8a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	68fa      	ldr	r2, [r7, #12]
 800fa94:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	1c5a      	adds	r2, r3, #1
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	609a      	str	r2, [r3, #8]
 800faa0:	e000      	b.n	800faa4 <putc_bfd+0x74>
	if (i < 0) return;
 800faa2:	bf00      	nop
}
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b084      	sub	sp, #16
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	db16      	blt.n	800fae8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6818      	ldr	r0, [r3, #0]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f103 010c 	add.w	r1, r3, #12
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	461a      	mov	r2, r3
 800faca:	f107 030c 	add.w	r3, r7, #12
 800face:	f7ff f98f 	bl	800edf0 <f_write>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d107      	bne.n	800fae8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	4293      	cmp	r3, r2
 800fae0:	d102      	bne.n	800fae8 <putc_flush+0x3e>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	e001      	b.n	800faec <putc_flush+0x42>
	return EOF;
 800fae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800faec:	4618      	mov	r0, r3
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	683a      	ldr	r2, [r7, #0]
 800fb02:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2200      	movs	r2, #0
 800fb08:	605a      	str	r2, [r3, #4]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	685a      	ldr	r2, [r3, #4]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	609a      	str	r2, [r3, #8]
}
 800fb12:	bf00      	nop
 800fb14:	370c      	adds	r7, #12
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr
	...

0800fb20 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800fb20:	b40e      	push	{r1, r2, r3}
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b0a7      	sub	sp, #156	; 0x9c
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800fb2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb2e:	6879      	ldr	r1, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff ffdf 	bl	800faf4 <putc_init>

	va_start(arp, fmt);
 800fb36:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fb3a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800fb3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb40:	1c5a      	adds	r2, r3, #1
 800fb42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800fb4c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f000 81f2 	beq.w	800ff3a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800fb56:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fb5a:	2b25      	cmp	r3, #37	; 0x25
 800fb5c:	d008      	beq.n	800fb70 <f_printf+0x50>
			putc_bfd(&pb, c);
 800fb5e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800fb62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fb66:	4611      	mov	r1, r2
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff ff61 	bl	800fa30 <putc_bfd>
			continue;
 800fb6e:	e1e3      	b.n	800ff38 <f_printf+0x418>
		}
		w = f = 0;
 800fb70:	2300      	movs	r3, #0
 800fb72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fb76:	2300      	movs	r3, #0
 800fb78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800fb7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb80:	1c5a      	adds	r2, r3, #1
 800fb82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800fb8c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fb90:	2b30      	cmp	r3, #48	; 0x30
 800fb92:	d10b      	bne.n	800fbac <f_printf+0x8c>
			f = 1; c = *fmt++;
 800fb94:	2301      	movs	r3, #1
 800fb96:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fb9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb9e:	1c5a      	adds	r2, r3, #1
 800fba0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800fbaa:	e024      	b.n	800fbf6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800fbac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fbb0:	2b2d      	cmp	r3, #45	; 0x2d
 800fbb2:	d120      	bne.n	800fbf6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800fbb4:	2302      	movs	r3, #2
 800fbb6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fbba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800fbca:	e014      	b.n	800fbf6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800fbcc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	009b      	lsls	r3, r3, #2
 800fbd4:	4413      	add	r3, r2
 800fbd6:	005b      	lsls	r3, r3, #1
 800fbd8:	461a      	mov	r2, r3
 800fbda:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fbde:	4413      	add	r3, r2
 800fbe0:	3b30      	subs	r3, #48	; 0x30
 800fbe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800fbe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800fbf6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fbfa:	2b2f      	cmp	r3, #47	; 0x2f
 800fbfc:	d903      	bls.n	800fc06 <f_printf+0xe6>
 800fbfe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc02:	2b39      	cmp	r3, #57	; 0x39
 800fc04:	d9e2      	bls.n	800fbcc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800fc06:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc0a:	2b6c      	cmp	r3, #108	; 0x6c
 800fc0c:	d003      	beq.n	800fc16 <f_printf+0xf6>
 800fc0e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc12:	2b4c      	cmp	r3, #76	; 0x4c
 800fc14:	d10d      	bne.n	800fc32 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800fc16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fc1a:	f043 0304 	orr.w	r3, r3, #4
 800fc1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fc22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fc26:	1c5a      	adds	r2, r3, #1
 800fc28:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800fc32:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	f000 8181 	beq.w	800ff3e <f_printf+0x41e>
		d = c;
 800fc3c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fc40:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800fc44:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fc48:	2b60      	cmp	r3, #96	; 0x60
 800fc4a:	d908      	bls.n	800fc5e <f_printf+0x13e>
 800fc4c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fc50:	2b7a      	cmp	r3, #122	; 0x7a
 800fc52:	d804      	bhi.n	800fc5e <f_printf+0x13e>
 800fc54:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fc58:	3b20      	subs	r3, #32
 800fc5a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800fc5e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fc62:	3b42      	subs	r3, #66	; 0x42
 800fc64:	2b16      	cmp	r3, #22
 800fc66:	f200 8098 	bhi.w	800fd9a <f_printf+0x27a>
 800fc6a:	a201      	add	r2, pc, #4	; (adr r2, 800fc70 <f_printf+0x150>)
 800fc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc70:	0800fd7b 	.word	0x0800fd7b
 800fc74:	0800fd63 	.word	0x0800fd63
 800fc78:	0800fd8b 	.word	0x0800fd8b
 800fc7c:	0800fd9b 	.word	0x0800fd9b
 800fc80:	0800fd9b 	.word	0x0800fd9b
 800fc84:	0800fd9b 	.word	0x0800fd9b
 800fc88:	0800fd9b 	.word	0x0800fd9b
 800fc8c:	0800fd9b 	.word	0x0800fd9b
 800fc90:	0800fd9b 	.word	0x0800fd9b
 800fc94:	0800fd9b 	.word	0x0800fd9b
 800fc98:	0800fd9b 	.word	0x0800fd9b
 800fc9c:	0800fd9b 	.word	0x0800fd9b
 800fca0:	0800fd9b 	.word	0x0800fd9b
 800fca4:	0800fd83 	.word	0x0800fd83
 800fca8:	0800fd9b 	.word	0x0800fd9b
 800fcac:	0800fd9b 	.word	0x0800fd9b
 800fcb0:	0800fd9b 	.word	0x0800fd9b
 800fcb4:	0800fccd 	.word	0x0800fccd
 800fcb8:	0800fd9b 	.word	0x0800fd9b
 800fcbc:	0800fd8b 	.word	0x0800fd8b
 800fcc0:	0800fd9b 	.word	0x0800fd9b
 800fcc4:	0800fd9b 	.word	0x0800fd9b
 800fcc8:	0800fd93 	.word	0x0800fd93
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800fccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fcce:	1d1a      	adds	r2, r3, #4
 800fcd0:	67ba      	str	r2, [r7, #120]	; 0x78
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fcdc:	e004      	b.n	800fce8 <f_printf+0x1c8>
 800fcde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fce2:	3301      	adds	r3, #1
 800fce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fce8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fcea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcee:	4413      	add	r3, r2
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d1f3      	bne.n	800fcde <f_printf+0x1be>
			if (!(f & 2)) {
 800fcf6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fcfa:	f003 0302 	and.w	r3, r3, #2
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d11a      	bne.n	800fd38 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800fd02:	e005      	b.n	800fd10 <f_printf+0x1f0>
 800fd04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd08:	2120      	movs	r1, #32
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7ff fe90 	bl	800fa30 <putc_bfd>
 800fd10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd14:	1c5a      	adds	r2, r3, #1
 800fd16:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fd1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d8f0      	bhi.n	800fd04 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800fd22:	e009      	b.n	800fd38 <f_printf+0x218>
 800fd24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd26:	1c5a      	adds	r2, r3, #1
 800fd28:	67fa      	str	r2, [r7, #124]	; 0x7c
 800fd2a:	781a      	ldrb	r2, [r3, #0]
 800fd2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd30:	4611      	mov	r1, r2
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7ff fe7c 	bl	800fa30 <putc_bfd>
 800fd38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d1f1      	bne.n	800fd24 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800fd40:	e005      	b.n	800fd4e <f_printf+0x22e>
 800fd42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd46:	2120      	movs	r1, #32
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7ff fe71 	bl	800fa30 <putc_bfd>
 800fd4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd52:	1c5a      	adds	r2, r3, #1
 800fd54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fd58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d8f0      	bhi.n	800fd42 <f_printf+0x222>
			continue;
 800fd60:	e0ea      	b.n	800ff38 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800fd62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fd64:	1d1a      	adds	r2, r3, #4
 800fd66:	67ba      	str	r2, [r7, #120]	; 0x78
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	b2da      	uxtb	r2, r3
 800fd6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fd70:	4611      	mov	r1, r2
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7ff fe5c 	bl	800fa30 <putc_bfd>
 800fd78:	e0de      	b.n	800ff38 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800fd7a:	2302      	movs	r3, #2
 800fd7c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fd80:	e014      	b.n	800fdac <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800fd82:	2308      	movs	r3, #8
 800fd84:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fd88:	e010      	b.n	800fdac <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800fd8a:	230a      	movs	r3, #10
 800fd8c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fd90:	e00c      	b.n	800fdac <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800fd92:	2310      	movs	r3, #16
 800fd94:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800fd98:	e008      	b.n	800fdac <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800fd9a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800fd9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fda2:	4611      	mov	r1, r2
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7ff fe43 	bl	800fa30 <putc_bfd>
 800fdaa:	e0c5      	b.n	800ff38 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800fdac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fdb0:	f003 0304 	and.w	r3, r3, #4
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d004      	beq.n	800fdc2 <f_printf+0x2a2>
 800fdb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdba:	1d1a      	adds	r2, r3, #4
 800fdbc:	67ba      	str	r2, [r7, #120]	; 0x78
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	e00c      	b.n	800fddc <f_printf+0x2bc>
 800fdc2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fdc6:	2b44      	cmp	r3, #68	; 0x44
 800fdc8:	d104      	bne.n	800fdd4 <f_printf+0x2b4>
 800fdca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdcc:	1d1a      	adds	r2, r3, #4
 800fdce:	67ba      	str	r2, [r7, #120]	; 0x78
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	e003      	b.n	800fddc <f_printf+0x2bc>
 800fdd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdd6:	1d1a      	adds	r2, r3, #4
 800fdd8:	67ba      	str	r2, [r7, #120]	; 0x78
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800fde0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fde4:	2b44      	cmp	r3, #68	; 0x44
 800fde6:	d10e      	bne.n	800fe06 <f_printf+0x2e6>
 800fde8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	da0a      	bge.n	800fe06 <f_printf+0x2e6>
			v = 0 - v;
 800fdf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdf4:	425b      	negs	r3, r3
 800fdf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800fdfa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fdfe:	f043 0308 	orr.w	r3, r3, #8
 800fe02:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800fe06:	2300      	movs	r3, #0
 800fe08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800fe0c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800fe10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe14:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe18:	fb01 f202 	mul.w	r2, r1, r2
 800fe1c:	1a9b      	subs	r3, r3, r2
 800fe1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800fe22:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800fe26:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fe2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800fe32:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fe36:	2b09      	cmp	r3, #9
 800fe38:	d90b      	bls.n	800fe52 <f_printf+0x332>
 800fe3a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800fe3e:	2b78      	cmp	r3, #120	; 0x78
 800fe40:	d101      	bne.n	800fe46 <f_printf+0x326>
 800fe42:	2227      	movs	r2, #39	; 0x27
 800fe44:	e000      	b.n	800fe48 <f_printf+0x328>
 800fe46:	2207      	movs	r2, #7
 800fe48:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800fe4c:	4413      	add	r3, r2
 800fe4e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800fe52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe56:	1c5a      	adds	r2, r3, #1
 800fe58:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fe5c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800fe60:	3230      	adds	r2, #48	; 0x30
 800fe62:	b2d2      	uxtb	r2, r2
 800fe64:	3398      	adds	r3, #152	; 0x98
 800fe66:	443b      	add	r3, r7
 800fe68:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800fe6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d003      	beq.n	800fe7c <f_printf+0x35c>
 800fe74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe78:	2b1f      	cmp	r3, #31
 800fe7a:	d9c7      	bls.n	800fe0c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800fe7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fe80:	f003 0308 	and.w	r3, r3, #8
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d009      	beq.n	800fe9c <f_printf+0x37c>
 800fe88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800fe92:	3398      	adds	r3, #152	; 0x98
 800fe94:	443b      	add	r3, r7
 800fe96:	222d      	movs	r2, #45	; 0x2d
 800fe98:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800fe9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fea0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fea4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fea8:	f003 0301 	and.w	r3, r3, #1
 800feac:	2b00      	cmp	r3, #0
 800feae:	d001      	beq.n	800feb4 <f_printf+0x394>
 800feb0:	2330      	movs	r3, #48	; 0x30
 800feb2:	e000      	b.n	800feb6 <f_printf+0x396>
 800feb4:	2320      	movs	r3, #32
 800feb6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800feba:	e007      	b.n	800fecc <f_printf+0x3ac>
 800febc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800fec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fec4:	4611      	mov	r1, r2
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7ff fdb2 	bl	800fa30 <putc_bfd>
 800fecc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fed0:	f003 0302 	and.w	r3, r3, #2
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d108      	bne.n	800feea <f_printf+0x3ca>
 800fed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fedc:	1c5a      	adds	r2, r3, #1
 800fede:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800fee2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d8e8      	bhi.n	800febc <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800feea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800feee:	3b01      	subs	r3, #1
 800fef0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fef4:	f107 020c 	add.w	r2, r7, #12
 800fef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fefc:	4413      	add	r3, r2
 800fefe:	781a      	ldrb	r2, [r3, #0]
 800ff00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff04:	4611      	mov	r1, r2
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7ff fd92 	bl	800fa30 <putc_bfd>
		} while (i);
 800ff0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d1ea      	bne.n	800feea <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800ff14:	e007      	b.n	800ff26 <f_printf+0x406>
 800ff16:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ff1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff1e:	4611      	mov	r1, r2
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7ff fd85 	bl	800fa30 <putc_bfd>
 800ff26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff2a:	1c5a      	adds	r2, r3, #1
 800ff2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ff30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d8ee      	bhi.n	800ff16 <f_printf+0x3f6>
		c = *fmt++;
 800ff38:	e600      	b.n	800fb3c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ff3a:	bf00      	nop
 800ff3c:	e000      	b.n	800ff40 <f_printf+0x420>
		if (!c) break;
 800ff3e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ff40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ff44:	4618      	mov	r0, r3
 800ff46:	f7ff fdb0 	bl	800faaa <putc_flush>
 800ff4a:	4603      	mov	r3, r0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	379c      	adds	r7, #156	; 0x9c
 800ff50:	46bd      	mov	sp, r7
 800ff52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff56:	b003      	add	sp, #12
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop

0800ff5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b087      	sub	sp, #28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	60f8      	str	r0, [r7, #12]
 800ff64:	60b9      	str	r1, [r7, #8]
 800ff66:	4613      	mov	r3, r2
 800ff68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ff72:	4b1f      	ldr	r3, [pc, #124]	; (800fff0 <FATFS_LinkDriverEx+0x94>)
 800ff74:	7a5b      	ldrb	r3, [r3, #9]
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d131      	bne.n	800ffe0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ff7c:	4b1c      	ldr	r3, [pc, #112]	; (800fff0 <FATFS_LinkDriverEx+0x94>)
 800ff7e:	7a5b      	ldrb	r3, [r3, #9]
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	461a      	mov	r2, r3
 800ff84:	4b1a      	ldr	r3, [pc, #104]	; (800fff0 <FATFS_LinkDriverEx+0x94>)
 800ff86:	2100      	movs	r1, #0
 800ff88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ff8a:	4b19      	ldr	r3, [pc, #100]	; (800fff0 <FATFS_LinkDriverEx+0x94>)
 800ff8c:	7a5b      	ldrb	r3, [r3, #9]
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	4a17      	ldr	r2, [pc, #92]	; (800fff0 <FATFS_LinkDriverEx+0x94>)
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	4413      	add	r3, r2
 800ff96:	68fa      	ldr	r2, [r7, #12]
 800ff98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ff9a:	4b15      	ldr	r3, [pc, #84]	; (800fff0 <FATFS_LinkDriverEx+0x94>)
 800ff9c:	7a5b      	ldrb	r3, [r3, #9]
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	4b13      	ldr	r3, [pc, #76]	; (800fff0 <FATFS_LinkDriverEx+0x94>)
 800ffa4:	4413      	add	r3, r2
 800ffa6:	79fa      	ldrb	r2, [r7, #7]
 800ffa8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ffaa:	4b11      	ldr	r3, [pc, #68]	; (800fff0 <FATFS_LinkDriverEx+0x94>)
 800ffac:	7a5b      	ldrb	r3, [r3, #9]
 800ffae:	b2db      	uxtb	r3, r3
 800ffb0:	1c5a      	adds	r2, r3, #1
 800ffb2:	b2d1      	uxtb	r1, r2
 800ffb4:	4a0e      	ldr	r2, [pc, #56]	; (800fff0 <FATFS_LinkDriverEx+0x94>)
 800ffb6:	7251      	strb	r1, [r2, #9]
 800ffb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ffba:	7dbb      	ldrb	r3, [r7, #22]
 800ffbc:	3330      	adds	r3, #48	; 0x30
 800ffbe:	b2da      	uxtb	r2, r3
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	223a      	movs	r2, #58	; 0x3a
 800ffca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	3302      	adds	r3, #2
 800ffd0:	222f      	movs	r2, #47	; 0x2f
 800ffd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	3303      	adds	r3, #3
 800ffd8:	2200      	movs	r2, #0
 800ffda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ffe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	371c      	adds	r7, #28
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	2000c6cc 	.word	0x2000c6cc

0800fff4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fffe:	2200      	movs	r2, #0
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f7ff ffaa 	bl	800ff5c <FATFS_LinkDriverEx>
 8010008:	4603      	mov	r3, r0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3708      	adds	r7, #8
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
	...

08010014 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010018:	2200      	movs	r2, #0
 801001a:	4912      	ldr	r1, [pc, #72]	; (8010064 <MX_USB_DEVICE_Init+0x50>)
 801001c:	4812      	ldr	r0, [pc, #72]	; (8010068 <MX_USB_DEVICE_Init+0x54>)
 801001e:	f7fb fcc1 	bl	800b9a4 <USBD_Init>
 8010022:	4603      	mov	r3, r0
 8010024:	2b00      	cmp	r3, #0
 8010026:	d001      	beq.n	801002c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010028:	f7f1 f980 	bl	800132c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801002c:	490f      	ldr	r1, [pc, #60]	; (801006c <MX_USB_DEVICE_Init+0x58>)
 801002e:	480e      	ldr	r0, [pc, #56]	; (8010068 <MX_USB_DEVICE_Init+0x54>)
 8010030:	f7fb fce8 	bl	800ba04 <USBD_RegisterClass>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	d001      	beq.n	801003e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801003a:	f7f1 f977 	bl	800132c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801003e:	490c      	ldr	r1, [pc, #48]	; (8010070 <MX_USB_DEVICE_Init+0x5c>)
 8010040:	4809      	ldr	r0, [pc, #36]	; (8010068 <MX_USB_DEVICE_Init+0x54>)
 8010042:	f7fb fc1f 	bl	800b884 <USBD_CDC_RegisterInterface>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d001      	beq.n	8010050 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801004c:	f7f1 f96e 	bl	800132c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010050:	4805      	ldr	r0, [pc, #20]	; (8010068 <MX_USB_DEVICE_Init+0x54>)
 8010052:	f7fb fd0d 	bl	800ba70 <USBD_Start>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801005c:	f7f1 f966 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010060:	bf00      	nop
 8010062:	bd80      	pop	{r7, pc}
 8010064:	200000ac 	.word	0x200000ac
 8010068:	2000c6d8 	.word	0x2000c6d8
 801006c:	20000018 	.word	0x20000018
 8010070:	20000098 	.word	0x20000098

08010074 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010078:	2200      	movs	r2, #0
 801007a:	4905      	ldr	r1, [pc, #20]	; (8010090 <CDC_Init_FS+0x1c>)
 801007c:	4805      	ldr	r0, [pc, #20]	; (8010094 <CDC_Init_FS+0x20>)
 801007e:	f7fb fc1b 	bl	800b8b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010082:	4905      	ldr	r1, [pc, #20]	; (8010098 <CDC_Init_FS+0x24>)
 8010084:	4803      	ldr	r0, [pc, #12]	; (8010094 <CDC_Init_FS+0x20>)
 8010086:	f7fb fc39 	bl	800b8fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801008a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801008c:	4618      	mov	r0, r3
 801008e:	bd80      	pop	{r7, pc}
 8010090:	2000d1b4 	.word	0x2000d1b4
 8010094:	2000c6d8 	.word	0x2000c6d8
 8010098:	2000c9b4 	.word	0x2000c9b4

0801009c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801009c:	b480      	push	{r7}
 801009e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80100a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	6039      	str	r1, [r7, #0]
 80100b6:	71fb      	strb	r3, [r7, #7]
 80100b8:	4613      	mov	r3, r2
 80100ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80100bc:	79fb      	ldrb	r3, [r7, #7]
 80100be:	2b23      	cmp	r3, #35	; 0x23
 80100c0:	d84a      	bhi.n	8010158 <CDC_Control_FS+0xac>
 80100c2:	a201      	add	r2, pc, #4	; (adr r2, 80100c8 <CDC_Control_FS+0x1c>)
 80100c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100c8:	08010159 	.word	0x08010159
 80100cc:	08010159 	.word	0x08010159
 80100d0:	08010159 	.word	0x08010159
 80100d4:	08010159 	.word	0x08010159
 80100d8:	08010159 	.word	0x08010159
 80100dc:	08010159 	.word	0x08010159
 80100e0:	08010159 	.word	0x08010159
 80100e4:	08010159 	.word	0x08010159
 80100e8:	08010159 	.word	0x08010159
 80100ec:	08010159 	.word	0x08010159
 80100f0:	08010159 	.word	0x08010159
 80100f4:	08010159 	.word	0x08010159
 80100f8:	08010159 	.word	0x08010159
 80100fc:	08010159 	.word	0x08010159
 8010100:	08010159 	.word	0x08010159
 8010104:	08010159 	.word	0x08010159
 8010108:	08010159 	.word	0x08010159
 801010c:	08010159 	.word	0x08010159
 8010110:	08010159 	.word	0x08010159
 8010114:	08010159 	.word	0x08010159
 8010118:	08010159 	.word	0x08010159
 801011c:	08010159 	.word	0x08010159
 8010120:	08010159 	.word	0x08010159
 8010124:	08010159 	.word	0x08010159
 8010128:	08010159 	.word	0x08010159
 801012c:	08010159 	.word	0x08010159
 8010130:	08010159 	.word	0x08010159
 8010134:	08010159 	.word	0x08010159
 8010138:	08010159 	.word	0x08010159
 801013c:	08010159 	.word	0x08010159
 8010140:	08010159 	.word	0x08010159
 8010144:	08010159 	.word	0x08010159
 8010148:	08010159 	.word	0x08010159
 801014c:	08010159 	.word	0x08010159
 8010150:	08010159 	.word	0x08010159
 8010154:	08010159 	.word	0x08010159
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010158:	bf00      	nop
  }

  return (USBD_OK);
 801015a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801015c:	4618      	mov	r0, r3
 801015e:	370c      	adds	r7, #12
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010172:	6879      	ldr	r1, [r7, #4]
 8010174:	480f      	ldr	r0, [pc, #60]	; (80101b4 <CDC_Receive_FS+0x4c>)
 8010176:	f7fb fbc1 	bl	800b8fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801017a:	480e      	ldr	r0, [pc, #56]	; (80101b4 <CDC_Receive_FS+0x4c>)
 801017c:	f7fb fbdc 	bl	800b938 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	73fb      	strb	r3, [r7, #15]
  memset(inBuff, '\0', 64);
 8010186:	2240      	movs	r2, #64	; 0x40
 8010188:	2100      	movs	r1, #0
 801018a:	480b      	ldr	r0, [pc, #44]	; (80101b8 <CDC_Receive_FS+0x50>)
 801018c:	f001 fd57 	bl	8011c3e <memset>
  memcpy(inBuff, Buf, len);
 8010190:	7bfb      	ldrb	r3, [r7, #15]
 8010192:	461a      	mov	r2, r3
 8010194:	6879      	ldr	r1, [r7, #4]
 8010196:	4808      	ldr	r0, [pc, #32]	; (80101b8 <CDC_Receive_FS+0x50>)
 8010198:	f001 fdea 	bl	8011d70 <memcpy>
  memset(Buf, '\0', len);
 801019c:	7bfb      	ldrb	r3, [r7, #15]
 801019e:	461a      	mov	r2, r3
 80101a0:	2100      	movs	r1, #0
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f001 fd4b 	bl	8011c3e <memset>
  return (USBD_OK);
 80101a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	2000c6d8 	.word	0x2000c6d8
 80101b8:	2000c1e8 	.word	0x2000c1e8

080101bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80101bc:	b480      	push	{r7}
 80101be:	b087      	sub	sp, #28
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	4613      	mov	r3, r2
 80101c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80101ca:	2300      	movs	r3, #0
 80101cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80101ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	371c      	adds	r7, #28
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr
	...

080101e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	4603      	mov	r3, r0
 80101e8:	6039      	str	r1, [r7, #0]
 80101ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	2212      	movs	r2, #18
 80101f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80101f2:	4b03      	ldr	r3, [pc, #12]	; (8010200 <USBD_FS_DeviceDescriptor+0x20>)
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr
 8010200:	200000cc 	.word	0x200000cc

08010204 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010204:	b480      	push	{r7}
 8010206:	b083      	sub	sp, #12
 8010208:	af00      	add	r7, sp, #0
 801020a:	4603      	mov	r3, r0
 801020c:	6039      	str	r1, [r7, #0]
 801020e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	2204      	movs	r2, #4
 8010214:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010216:	4b03      	ldr	r3, [pc, #12]	; (8010224 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010218:	4618      	mov	r0, r3
 801021a:	370c      	adds	r7, #12
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr
 8010224:	200000ec 	.word	0x200000ec

08010228 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
 801022e:	4603      	mov	r3, r0
 8010230:	6039      	str	r1, [r7, #0]
 8010232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010234:	79fb      	ldrb	r3, [r7, #7]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d105      	bne.n	8010246 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801023a:	683a      	ldr	r2, [r7, #0]
 801023c:	4907      	ldr	r1, [pc, #28]	; (801025c <USBD_FS_ProductStrDescriptor+0x34>)
 801023e:	4808      	ldr	r0, [pc, #32]	; (8010260 <USBD_FS_ProductStrDescriptor+0x38>)
 8010240:	f7fc fdf2 	bl	800ce28 <USBD_GetString>
 8010244:	e004      	b.n	8010250 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010246:	683a      	ldr	r2, [r7, #0]
 8010248:	4904      	ldr	r1, [pc, #16]	; (801025c <USBD_FS_ProductStrDescriptor+0x34>)
 801024a:	4805      	ldr	r0, [pc, #20]	; (8010260 <USBD_FS_ProductStrDescriptor+0x38>)
 801024c:	f7fc fdec 	bl	800ce28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010250:	4b02      	ldr	r3, [pc, #8]	; (801025c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010252:	4618      	mov	r0, r3
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	2000d9b4 	.word	0x2000d9b4
 8010260:	08015600 	.word	0x08015600

08010264 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	4603      	mov	r3, r0
 801026c:	6039      	str	r1, [r7, #0]
 801026e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010270:	683a      	ldr	r2, [r7, #0]
 8010272:	4904      	ldr	r1, [pc, #16]	; (8010284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010274:	4804      	ldr	r0, [pc, #16]	; (8010288 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010276:	f7fc fdd7 	bl	800ce28 <USBD_GetString>
  return USBD_StrDesc;
 801027a:	4b02      	ldr	r3, [pc, #8]	; (8010284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801027c:	4618      	mov	r0, r3
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	2000d9b4 	.word	0x2000d9b4
 8010288:	08015610 	.word	0x08015610

0801028c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	4603      	mov	r3, r0
 8010294:	6039      	str	r1, [r7, #0]
 8010296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	221a      	movs	r2, #26
 801029c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801029e:	f000 f855 	bl	801034c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80102a2:	4b02      	ldr	r3, [pc, #8]	; (80102ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80102a4:	4618      	mov	r0, r3
 80102a6:	3708      	adds	r7, #8
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}
 80102ac:	200000f0 	.word	0x200000f0

080102b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	4603      	mov	r3, r0
 80102b8:	6039      	str	r1, [r7, #0]
 80102ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80102bc:	79fb      	ldrb	r3, [r7, #7]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d105      	bne.n	80102ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80102c2:	683a      	ldr	r2, [r7, #0]
 80102c4:	4907      	ldr	r1, [pc, #28]	; (80102e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80102c6:	4808      	ldr	r0, [pc, #32]	; (80102e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80102c8:	f7fc fdae 	bl	800ce28 <USBD_GetString>
 80102cc:	e004      	b.n	80102d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80102ce:	683a      	ldr	r2, [r7, #0]
 80102d0:	4904      	ldr	r1, [pc, #16]	; (80102e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80102d2:	4805      	ldr	r0, [pc, #20]	; (80102e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80102d4:	f7fc fda8 	bl	800ce28 <USBD_GetString>
  }
  return USBD_StrDesc;
 80102d8:	4b02      	ldr	r3, [pc, #8]	; (80102e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80102da:	4618      	mov	r0, r3
 80102dc:	3708      	adds	r7, #8
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	2000d9b4 	.word	0x2000d9b4
 80102e8:	08015624 	.word	0x08015624

080102ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	4603      	mov	r3, r0
 80102f4:	6039      	str	r1, [r7, #0]
 80102f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80102f8:	79fb      	ldrb	r3, [r7, #7]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d105      	bne.n	801030a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80102fe:	683a      	ldr	r2, [r7, #0]
 8010300:	4907      	ldr	r1, [pc, #28]	; (8010320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010302:	4808      	ldr	r0, [pc, #32]	; (8010324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010304:	f7fc fd90 	bl	800ce28 <USBD_GetString>
 8010308:	e004      	b.n	8010314 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801030a:	683a      	ldr	r2, [r7, #0]
 801030c:	4904      	ldr	r1, [pc, #16]	; (8010320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801030e:	4805      	ldr	r0, [pc, #20]	; (8010324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010310:	f7fc fd8a 	bl	800ce28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010314:	4b02      	ldr	r3, [pc, #8]	; (8010320 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010316:	4618      	mov	r0, r3
 8010318:	3708      	adds	r7, #8
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	2000d9b4 	.word	0x2000d9b4
 8010324:	08015630 	.word	0x08015630

08010328 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
 801032e:	4603      	mov	r3, r0
 8010330:	6039      	str	r1, [r7, #0]
 8010332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	220c      	movs	r2, #12
 8010338:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801033a:	4b03      	ldr	r3, [pc, #12]	; (8010348 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801033c:	4618      	mov	r0, r3
 801033e:	370c      	adds	r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr
 8010348:	200000e0 	.word	0x200000e0

0801034c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010352:	4b0f      	ldr	r3, [pc, #60]	; (8010390 <Get_SerialNum+0x44>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010358:	4b0e      	ldr	r3, [pc, #56]	; (8010394 <Get_SerialNum+0x48>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801035e:	4b0e      	ldr	r3, [pc, #56]	; (8010398 <Get_SerialNum+0x4c>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010364:	68fa      	ldr	r2, [r7, #12]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	4413      	add	r3, r2
 801036a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d009      	beq.n	8010386 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010372:	2208      	movs	r2, #8
 8010374:	4909      	ldr	r1, [pc, #36]	; (801039c <Get_SerialNum+0x50>)
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f000 f814 	bl	80103a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801037c:	2204      	movs	r2, #4
 801037e:	4908      	ldr	r1, [pc, #32]	; (80103a0 <Get_SerialNum+0x54>)
 8010380:	68b8      	ldr	r0, [r7, #8]
 8010382:	f000 f80f 	bl	80103a4 <IntToUnicode>
  }
}
 8010386:	bf00      	nop
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	1fff7590 	.word	0x1fff7590
 8010394:	1fff7594 	.word	0x1fff7594
 8010398:	1fff7598 	.word	0x1fff7598
 801039c:	200000f2 	.word	0x200000f2
 80103a0:	20000102 	.word	0x20000102

080103a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b087      	sub	sp, #28
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	4613      	mov	r3, r2
 80103b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80103b2:	2300      	movs	r3, #0
 80103b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80103b6:	2300      	movs	r3, #0
 80103b8:	75fb      	strb	r3, [r7, #23]
 80103ba:	e027      	b.n	801040c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	0f1b      	lsrs	r3, r3, #28
 80103c0:	2b09      	cmp	r3, #9
 80103c2:	d80b      	bhi.n	80103dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	0f1b      	lsrs	r3, r3, #28
 80103c8:	b2da      	uxtb	r2, r3
 80103ca:	7dfb      	ldrb	r3, [r7, #23]
 80103cc:	005b      	lsls	r3, r3, #1
 80103ce:	4619      	mov	r1, r3
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	440b      	add	r3, r1
 80103d4:	3230      	adds	r2, #48	; 0x30
 80103d6:	b2d2      	uxtb	r2, r2
 80103d8:	701a      	strb	r2, [r3, #0]
 80103da:	e00a      	b.n	80103f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	0f1b      	lsrs	r3, r3, #28
 80103e0:	b2da      	uxtb	r2, r3
 80103e2:	7dfb      	ldrb	r3, [r7, #23]
 80103e4:	005b      	lsls	r3, r3, #1
 80103e6:	4619      	mov	r1, r3
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	440b      	add	r3, r1
 80103ec:	3237      	adds	r2, #55	; 0x37
 80103ee:	b2d2      	uxtb	r2, r2
 80103f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	011b      	lsls	r3, r3, #4
 80103f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80103f8:	7dfb      	ldrb	r3, [r7, #23]
 80103fa:	005b      	lsls	r3, r3, #1
 80103fc:	3301      	adds	r3, #1
 80103fe:	68ba      	ldr	r2, [r7, #8]
 8010400:	4413      	add	r3, r2
 8010402:	2200      	movs	r2, #0
 8010404:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010406:	7dfb      	ldrb	r3, [r7, #23]
 8010408:	3301      	adds	r3, #1
 801040a:	75fb      	strb	r3, [r7, #23]
 801040c:	7dfa      	ldrb	r2, [r7, #23]
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	429a      	cmp	r2, r3
 8010412:	d3d3      	bcc.n	80103bc <IntToUnicode+0x18>
  }
}
 8010414:	bf00      	nop
 8010416:	bf00      	nop
 8010418:	371c      	adds	r7, #28
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
	...

08010424 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b0ac      	sub	sp, #176	; 0xb0
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801042c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010430:	2200      	movs	r2, #0
 8010432:	601a      	str	r2, [r3, #0]
 8010434:	605a      	str	r2, [r3, #4]
 8010436:	609a      	str	r2, [r3, #8]
 8010438:	60da      	str	r2, [r3, #12]
 801043a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801043c:	f107 0314 	add.w	r3, r7, #20
 8010440:	2288      	movs	r2, #136	; 0x88
 8010442:	2100      	movs	r1, #0
 8010444:	4618      	mov	r0, r3
 8010446:	f001 fbfa 	bl	8011c3e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010452:	d164      	bne.n	801051e <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010458:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801045a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801045e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010462:	f107 0314 	add.w	r3, r7, #20
 8010466:	4618      	mov	r0, r3
 8010468:	f7f5 fafe 	bl	8005a68 <HAL_RCCEx_PeriphCLKConfig>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8010472:	f7f0 ff5b 	bl	800132c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010476:	4b2c      	ldr	r3, [pc, #176]	; (8010528 <HAL_PCD_MspInit+0x104>)
 8010478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801047a:	4a2b      	ldr	r2, [pc, #172]	; (8010528 <HAL_PCD_MspInit+0x104>)
 801047c:	f043 0301 	orr.w	r3, r3, #1
 8010480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010482:	4b29      	ldr	r3, [pc, #164]	; (8010528 <HAL_PCD_MspInit+0x104>)
 8010484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010486:	f003 0301 	and.w	r3, r3, #1
 801048a:	613b      	str	r3, [r7, #16]
 801048c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801048e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010496:	2302      	movs	r3, #2
 8010498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801049c:	2300      	movs	r3, #0
 801049e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104a2:	2303      	movs	r3, #3
 80104a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80104a8:	230a      	movs	r3, #10
 80104aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80104b2:	4619      	mov	r1, r3
 80104b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80104b8:	f7f2 faaa 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80104bc:	4b1a      	ldr	r3, [pc, #104]	; (8010528 <HAL_PCD_MspInit+0x104>)
 80104be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104c0:	4a19      	ldr	r2, [pc, #100]	; (8010528 <HAL_PCD_MspInit+0x104>)
 80104c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80104c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80104c8:	4b17      	ldr	r3, [pc, #92]	; (8010528 <HAL_PCD_MspInit+0x104>)
 80104ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80104d0:	60fb      	str	r3, [r7, #12]
 80104d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80104d4:	4b14      	ldr	r3, [pc, #80]	; (8010528 <HAL_PCD_MspInit+0x104>)
 80104d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d114      	bne.n	801050a <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80104e0:	4b11      	ldr	r3, [pc, #68]	; (8010528 <HAL_PCD_MspInit+0x104>)
 80104e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104e4:	4a10      	ldr	r2, [pc, #64]	; (8010528 <HAL_PCD_MspInit+0x104>)
 80104e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104ea:	6593      	str	r3, [r2, #88]	; 0x58
 80104ec:	4b0e      	ldr	r3, [pc, #56]	; (8010528 <HAL_PCD_MspInit+0x104>)
 80104ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104f4:	60bb      	str	r3, [r7, #8]
 80104f6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80104f8:	f7f4 fc8c 	bl	8004e14 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80104fc:	4b0a      	ldr	r3, [pc, #40]	; (8010528 <HAL_PCD_MspInit+0x104>)
 80104fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010500:	4a09      	ldr	r2, [pc, #36]	; (8010528 <HAL_PCD_MspInit+0x104>)
 8010502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010506:	6593      	str	r3, [r2, #88]	; 0x58
 8010508:	e001      	b.n	801050e <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801050a:	f7f4 fc83 	bl	8004e14 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801050e:	2200      	movs	r2, #0
 8010510:	2100      	movs	r1, #0
 8010512:	2043      	movs	r0, #67	; 0x43
 8010514:	f7f2 f80d 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010518:	2043      	movs	r0, #67	; 0x43
 801051a:	f7f2 f826 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801051e:	bf00      	nop
 8010520:	37b0      	adds	r7, #176	; 0xb0
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
 8010526:	bf00      	nop
 8010528:	40021000 	.word	0x40021000

0801052c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010540:	4619      	mov	r1, r3
 8010542:	4610      	mov	r0, r2
 8010544:	f7fb fae1 	bl	800bb0a <USBD_LL_SetupStage>
}
 8010548:	bf00      	nop
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	460b      	mov	r3, r1
 801055a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010562:	78fa      	ldrb	r2, [r7, #3]
 8010564:	6879      	ldr	r1, [r7, #4]
 8010566:	4613      	mov	r3, r2
 8010568:	00db      	lsls	r3, r3, #3
 801056a:	4413      	add	r3, r2
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	440b      	add	r3, r1
 8010570:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010574:	681a      	ldr	r2, [r3, #0]
 8010576:	78fb      	ldrb	r3, [r7, #3]
 8010578:	4619      	mov	r1, r3
 801057a:	f7fb fb1b 	bl	800bbb4 <USBD_LL_DataOutStage>
}
 801057e:	bf00      	nop
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b082      	sub	sp, #8
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
 801058e:	460b      	mov	r3, r1
 8010590:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010598:	78fa      	ldrb	r2, [r7, #3]
 801059a:	6879      	ldr	r1, [r7, #4]
 801059c:	4613      	mov	r3, r2
 801059e:	00db      	lsls	r3, r3, #3
 80105a0:	4413      	add	r3, r2
 80105a2:	009b      	lsls	r3, r3, #2
 80105a4:	440b      	add	r3, r1
 80105a6:	3348      	adds	r3, #72	; 0x48
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	78fb      	ldrb	r3, [r7, #3]
 80105ac:	4619      	mov	r1, r3
 80105ae:	f7fb fbb4 	bl	800bd1a <USBD_LL_DataInStage>
}
 80105b2:	bf00      	nop
 80105b4:	3708      	adds	r7, #8
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b082      	sub	sp, #8
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fb fcee 	bl	800bfaa <USBD_LL_SOF>
}
 80105ce:	bf00      	nop
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b084      	sub	sp, #16
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80105de:	2301      	movs	r3, #1
 80105e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	2b02      	cmp	r3, #2
 80105e8:	d001      	beq.n	80105ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80105ea:	f7f0 fe9f 	bl	800132c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105f4:	7bfa      	ldrb	r2, [r7, #15]
 80105f6:	4611      	mov	r1, r2
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7fb fc92 	bl	800bf22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010604:	4618      	mov	r0, r3
 8010606:	f7fb fc3a 	bl	800be7e <USBD_LL_Reset>
}
 801060a:	bf00      	nop
 801060c:	3710      	adds	r7, #16
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
	...

08010614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b082      	sub	sp, #8
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	6812      	ldr	r2, [r2, #0]
 801062a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801062e:	f043 0301 	orr.w	r3, r3, #1
 8010632:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801063a:	4618      	mov	r0, r3
 801063c:	f7fb fc81 	bl	800bf42 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6a1b      	ldr	r3, [r3, #32]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d005      	beq.n	8010654 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010648:	4b04      	ldr	r3, [pc, #16]	; (801065c <HAL_PCD_SuspendCallback+0x48>)
 801064a:	691b      	ldr	r3, [r3, #16]
 801064c:	4a03      	ldr	r2, [pc, #12]	; (801065c <HAL_PCD_SuspendCallback+0x48>)
 801064e:	f043 0306 	orr.w	r3, r3, #6
 8010652:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010654:	bf00      	nop
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	e000ed00 	.word	0xe000ed00

08010660 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	6812      	ldr	r2, [r2, #0]
 8010676:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801067a:	f023 0301 	bic.w	r3, r3, #1
 801067e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6a1b      	ldr	r3, [r3, #32]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d007      	beq.n	8010698 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010688:	4b08      	ldr	r3, [pc, #32]	; (80106ac <HAL_PCD_ResumeCallback+0x4c>)
 801068a:	691b      	ldr	r3, [r3, #16]
 801068c:	4a07      	ldr	r2, [pc, #28]	; (80106ac <HAL_PCD_ResumeCallback+0x4c>)
 801068e:	f023 0306 	bic.w	r3, r3, #6
 8010692:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010694:	f000 faf6 	bl	8010c84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801069e:	4618      	mov	r0, r3
 80106a0:	f7fb fc6b 	bl	800bf7a <USBD_LL_Resume>
}
 80106a4:	bf00      	nop
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	e000ed00 	.word	0xe000ed00

080106b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	460b      	mov	r3, r1
 80106ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106c2:	78fa      	ldrb	r2, [r7, #3]
 80106c4:	4611      	mov	r1, r2
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fb fcc1 	bl	800c04e <USBD_LL_IsoOUTIncomplete>
}
 80106cc:	bf00      	nop
 80106ce:	3708      	adds	r7, #8
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	460b      	mov	r3, r1
 80106de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106e6:	78fa      	ldrb	r2, [r7, #3]
 80106e8:	4611      	mov	r1, r2
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7fb fc7d 	bl	800bfea <USBD_LL_IsoINIncomplete>
}
 80106f0:	bf00      	nop
 80106f2:	3708      	adds	r7, #8
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010706:	4618      	mov	r0, r3
 8010708:	f7fb fcd3 	bl	800c0b2 <USBD_LL_DevConnected>
}
 801070c:	bf00      	nop
 801070e:	3708      	adds	r7, #8
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010722:	4618      	mov	r0, r3
 8010724:	f7fb fcd0 	bl	800c0c8 <USBD_LL_DevDisconnected>
}
 8010728:	bf00      	nop
 801072a:	3708      	adds	r7, #8
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d13c      	bne.n	80107ba <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010740:	4a20      	ldr	r2, [pc, #128]	; (80107c4 <USBD_LL_Init+0x94>)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	4a1e      	ldr	r2, [pc, #120]	; (80107c4 <USBD_LL_Init+0x94>)
 801074c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010750:	4b1c      	ldr	r3, [pc, #112]	; (80107c4 <USBD_LL_Init+0x94>)
 8010752:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010758:	4b1a      	ldr	r3, [pc, #104]	; (80107c4 <USBD_LL_Init+0x94>)
 801075a:	2206      	movs	r2, #6
 801075c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801075e:	4b19      	ldr	r3, [pc, #100]	; (80107c4 <USBD_LL_Init+0x94>)
 8010760:	2202      	movs	r2, #2
 8010762:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010764:	4b17      	ldr	r3, [pc, #92]	; (80107c4 <USBD_LL_Init+0x94>)
 8010766:	2202      	movs	r2, #2
 8010768:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801076a:	4b16      	ldr	r3, [pc, #88]	; (80107c4 <USBD_LL_Init+0x94>)
 801076c:	2200      	movs	r2, #0
 801076e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010770:	4b14      	ldr	r3, [pc, #80]	; (80107c4 <USBD_LL_Init+0x94>)
 8010772:	2200      	movs	r2, #0
 8010774:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010776:	4b13      	ldr	r3, [pc, #76]	; (80107c4 <USBD_LL_Init+0x94>)
 8010778:	2200      	movs	r2, #0
 801077a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801077c:	4b11      	ldr	r3, [pc, #68]	; (80107c4 <USBD_LL_Init+0x94>)
 801077e:	2200      	movs	r2, #0
 8010780:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010782:	4b10      	ldr	r3, [pc, #64]	; (80107c4 <USBD_LL_Init+0x94>)
 8010784:	2200      	movs	r2, #0
 8010786:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010788:	4b0e      	ldr	r3, [pc, #56]	; (80107c4 <USBD_LL_Init+0x94>)
 801078a:	2200      	movs	r2, #0
 801078c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801078e:	480d      	ldr	r0, [pc, #52]	; (80107c4 <USBD_LL_Init+0x94>)
 8010790:	f7f3 f935 	bl	80039fe <HAL_PCD_Init>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d001      	beq.n	801079e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801079a:	f7f0 fdc7 	bl	800132c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801079e:	2180      	movs	r1, #128	; 0x80
 80107a0:	4808      	ldr	r0, [pc, #32]	; (80107c4 <USBD_LL_Init+0x94>)
 80107a2:	f7f4 fa9e 	bl	8004ce2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80107a6:	2240      	movs	r2, #64	; 0x40
 80107a8:	2100      	movs	r1, #0
 80107aa:	4806      	ldr	r0, [pc, #24]	; (80107c4 <USBD_LL_Init+0x94>)
 80107ac:	f7f4 fa52 	bl	8004c54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80107b0:	2280      	movs	r2, #128	; 0x80
 80107b2:	2101      	movs	r1, #1
 80107b4:	4803      	ldr	r0, [pc, #12]	; (80107c4 <USBD_LL_Init+0x94>)
 80107b6:	f7f4 fa4d 	bl	8004c54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80107ba:	2300      	movs	r3, #0
}
 80107bc:	4618      	mov	r0, r3
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	2000dbb4 	.word	0x2000dbb4

080107c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107d0:	2300      	movs	r3, #0
 80107d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107d4:	2300      	movs	r3, #0
 80107d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107de:	4618      	mov	r0, r3
 80107e0:	f7f3 fa31 	bl	8003c46 <HAL_PCD_Start>
 80107e4:	4603      	mov	r3, r0
 80107e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80107e8:	7bbb      	ldrb	r3, [r7, #14]
 80107ea:	2b03      	cmp	r3, #3
 80107ec:	d816      	bhi.n	801081c <USBD_LL_Start+0x54>
 80107ee:	a201      	add	r2, pc, #4	; (adr r2, 80107f4 <USBD_LL_Start+0x2c>)
 80107f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f4:	08010805 	.word	0x08010805
 80107f8:	0801080b 	.word	0x0801080b
 80107fc:	08010811 	.word	0x08010811
 8010800:	08010817 	.word	0x08010817
    case HAL_OK :
      usb_status = USBD_OK;
 8010804:	2300      	movs	r3, #0
 8010806:	73fb      	strb	r3, [r7, #15]
    break;
 8010808:	e00b      	b.n	8010822 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801080a:	2303      	movs	r3, #3
 801080c:	73fb      	strb	r3, [r7, #15]
    break;
 801080e:	e008      	b.n	8010822 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010810:	2301      	movs	r3, #1
 8010812:	73fb      	strb	r3, [r7, #15]
    break;
 8010814:	e005      	b.n	8010822 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010816:	2303      	movs	r3, #3
 8010818:	73fb      	strb	r3, [r7, #15]
    break;
 801081a:	e002      	b.n	8010822 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 801081c:	2303      	movs	r3, #3
 801081e:	73fb      	strb	r3, [r7, #15]
    break;
 8010820:	bf00      	nop
  }
  return usb_status;
 8010822:	7bfb      	ldrb	r3, [r7, #15]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	4608      	mov	r0, r1
 8010836:	4611      	mov	r1, r2
 8010838:	461a      	mov	r2, r3
 801083a:	4603      	mov	r3, r0
 801083c:	70fb      	strb	r3, [r7, #3]
 801083e:	460b      	mov	r3, r1
 8010840:	70bb      	strb	r3, [r7, #2]
 8010842:	4613      	mov	r3, r2
 8010844:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801084a:	2300      	movs	r3, #0
 801084c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010854:	78bb      	ldrb	r3, [r7, #2]
 8010856:	883a      	ldrh	r2, [r7, #0]
 8010858:	78f9      	ldrb	r1, [r7, #3]
 801085a:	f7f3 fedb 	bl	8004614 <HAL_PCD_EP_Open>
 801085e:	4603      	mov	r3, r0
 8010860:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010862:	7bbb      	ldrb	r3, [r7, #14]
 8010864:	2b03      	cmp	r3, #3
 8010866:	d817      	bhi.n	8010898 <USBD_LL_OpenEP+0x6c>
 8010868:	a201      	add	r2, pc, #4	; (adr r2, 8010870 <USBD_LL_OpenEP+0x44>)
 801086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801086e:	bf00      	nop
 8010870:	08010881 	.word	0x08010881
 8010874:	08010887 	.word	0x08010887
 8010878:	0801088d 	.word	0x0801088d
 801087c:	08010893 	.word	0x08010893
    case HAL_OK :
      usb_status = USBD_OK;
 8010880:	2300      	movs	r3, #0
 8010882:	73fb      	strb	r3, [r7, #15]
    break;
 8010884:	e00b      	b.n	801089e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010886:	2303      	movs	r3, #3
 8010888:	73fb      	strb	r3, [r7, #15]
    break;
 801088a:	e008      	b.n	801089e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801088c:	2301      	movs	r3, #1
 801088e:	73fb      	strb	r3, [r7, #15]
    break;
 8010890:	e005      	b.n	801089e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010892:	2303      	movs	r3, #3
 8010894:	73fb      	strb	r3, [r7, #15]
    break;
 8010896:	e002      	b.n	801089e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010898:	2303      	movs	r3, #3
 801089a:	73fb      	strb	r3, [r7, #15]
    break;
 801089c:	bf00      	nop
  }
  return usb_status;
 801089e:	7bfb      	ldrb	r3, [r7, #15]
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3710      	adds	r7, #16
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	460b      	mov	r3, r1
 80108b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108b4:	2300      	movs	r3, #0
 80108b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108b8:	2300      	movs	r3, #0
 80108ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108c2:	78fa      	ldrb	r2, [r7, #3]
 80108c4:	4611      	mov	r1, r2
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7f3 ff0c 	bl	80046e4 <HAL_PCD_EP_Close>
 80108cc:	4603      	mov	r3, r0
 80108ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80108d0:	7bbb      	ldrb	r3, [r7, #14]
 80108d2:	2b03      	cmp	r3, #3
 80108d4:	d816      	bhi.n	8010904 <USBD_LL_CloseEP+0x5c>
 80108d6:	a201      	add	r2, pc, #4	; (adr r2, 80108dc <USBD_LL_CloseEP+0x34>)
 80108d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108dc:	080108ed 	.word	0x080108ed
 80108e0:	080108f3 	.word	0x080108f3
 80108e4:	080108f9 	.word	0x080108f9
 80108e8:	080108ff 	.word	0x080108ff
    case HAL_OK :
      usb_status = USBD_OK;
 80108ec:	2300      	movs	r3, #0
 80108ee:	73fb      	strb	r3, [r7, #15]
    break;
 80108f0:	e00b      	b.n	801090a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108f2:	2303      	movs	r3, #3
 80108f4:	73fb      	strb	r3, [r7, #15]
    break;
 80108f6:	e008      	b.n	801090a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108f8:	2301      	movs	r3, #1
 80108fa:	73fb      	strb	r3, [r7, #15]
    break;
 80108fc:	e005      	b.n	801090a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108fe:	2303      	movs	r3, #3
 8010900:	73fb      	strb	r3, [r7, #15]
    break;
 8010902:	e002      	b.n	801090a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010904:	2303      	movs	r3, #3
 8010906:	73fb      	strb	r3, [r7, #15]
    break;
 8010908:	bf00      	nop
  }
  return usb_status;
 801090a:	7bfb      	ldrb	r3, [r7, #15]
}
 801090c:	4618      	mov	r0, r3
 801090e:	3710      	adds	r7, #16
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	460b      	mov	r3, r1
 801091e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010920:	2300      	movs	r3, #0
 8010922:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010924:	2300      	movs	r3, #0
 8010926:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801092e:	78fa      	ldrb	r2, [r7, #3]
 8010930:	4611      	mov	r1, r2
 8010932:	4618      	mov	r0, r3
 8010934:	f7f3 ff9b 	bl	800486e <HAL_PCD_EP_SetStall>
 8010938:	4603      	mov	r3, r0
 801093a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801093c:	7bbb      	ldrb	r3, [r7, #14]
 801093e:	2b03      	cmp	r3, #3
 8010940:	d816      	bhi.n	8010970 <USBD_LL_StallEP+0x5c>
 8010942:	a201      	add	r2, pc, #4	; (adr r2, 8010948 <USBD_LL_StallEP+0x34>)
 8010944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010948:	08010959 	.word	0x08010959
 801094c:	0801095f 	.word	0x0801095f
 8010950:	08010965 	.word	0x08010965
 8010954:	0801096b 	.word	0x0801096b
    case HAL_OK :
      usb_status = USBD_OK;
 8010958:	2300      	movs	r3, #0
 801095a:	73fb      	strb	r3, [r7, #15]
    break;
 801095c:	e00b      	b.n	8010976 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801095e:	2303      	movs	r3, #3
 8010960:	73fb      	strb	r3, [r7, #15]
    break;
 8010962:	e008      	b.n	8010976 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010964:	2301      	movs	r3, #1
 8010966:	73fb      	strb	r3, [r7, #15]
    break;
 8010968:	e005      	b.n	8010976 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801096a:	2303      	movs	r3, #3
 801096c:	73fb      	strb	r3, [r7, #15]
    break;
 801096e:	e002      	b.n	8010976 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010970:	2303      	movs	r3, #3
 8010972:	73fb      	strb	r3, [r7, #15]
    break;
 8010974:	bf00      	nop
  }
  return usb_status;
 8010976:	7bfb      	ldrb	r3, [r7, #15]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3710      	adds	r7, #16
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	460b      	mov	r3, r1
 801098a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801098c:	2300      	movs	r3, #0
 801098e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010990:	2300      	movs	r3, #0
 8010992:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801099a:	78fa      	ldrb	r2, [r7, #3]
 801099c:	4611      	mov	r1, r2
 801099e:	4618      	mov	r0, r3
 80109a0:	f7f3 ffc7 	bl	8004932 <HAL_PCD_EP_ClrStall>
 80109a4:	4603      	mov	r3, r0
 80109a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80109a8:	7bbb      	ldrb	r3, [r7, #14]
 80109aa:	2b03      	cmp	r3, #3
 80109ac:	d816      	bhi.n	80109dc <USBD_LL_ClearStallEP+0x5c>
 80109ae:	a201      	add	r2, pc, #4	; (adr r2, 80109b4 <USBD_LL_ClearStallEP+0x34>)
 80109b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b4:	080109c5 	.word	0x080109c5
 80109b8:	080109cb 	.word	0x080109cb
 80109bc:	080109d1 	.word	0x080109d1
 80109c0:	080109d7 	.word	0x080109d7
    case HAL_OK :
      usb_status = USBD_OK;
 80109c4:	2300      	movs	r3, #0
 80109c6:	73fb      	strb	r3, [r7, #15]
    break;
 80109c8:	e00b      	b.n	80109e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109ca:	2303      	movs	r3, #3
 80109cc:	73fb      	strb	r3, [r7, #15]
    break;
 80109ce:	e008      	b.n	80109e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109d0:	2301      	movs	r3, #1
 80109d2:	73fb      	strb	r3, [r7, #15]
    break;
 80109d4:	e005      	b.n	80109e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109d6:	2303      	movs	r3, #3
 80109d8:	73fb      	strb	r3, [r7, #15]
    break;
 80109da:	e002      	b.n	80109e2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80109dc:	2303      	movs	r3, #3
 80109de:	73fb      	strb	r3, [r7, #15]
    break;
 80109e0:	bf00      	nop
  }
  return usb_status;
 80109e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3710      	adds	r7, #16
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b085      	sub	sp, #20
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	460b      	mov	r3, r1
 80109f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80109fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	da0b      	bge.n	8010a20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010a08:	78fb      	ldrb	r3, [r7, #3]
 8010a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a0e:	68f9      	ldr	r1, [r7, #12]
 8010a10:	4613      	mov	r3, r2
 8010a12:	00db      	lsls	r3, r3, #3
 8010a14:	4413      	add	r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	440b      	add	r3, r1
 8010a1a:	333e      	adds	r3, #62	; 0x3e
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	e00b      	b.n	8010a38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010a20:	78fb      	ldrb	r3, [r7, #3]
 8010a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010a26:	68f9      	ldr	r1, [r7, #12]
 8010a28:	4613      	mov	r3, r2
 8010a2a:	00db      	lsls	r3, r3, #3
 8010a2c:	4413      	add	r3, r2
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	440b      	add	r3, r1
 8010a32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010a36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3714      	adds	r7, #20
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	460b      	mov	r3, r1
 8010a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a50:	2300      	movs	r3, #0
 8010a52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010a5e:	78fa      	ldrb	r2, [r7, #3]
 8010a60:	4611      	mov	r1, r2
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7f3 fdb1 	bl	80045ca <HAL_PCD_SetAddress>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010a6c:	7bbb      	ldrb	r3, [r7, #14]
 8010a6e:	2b03      	cmp	r3, #3
 8010a70:	d816      	bhi.n	8010aa0 <USBD_LL_SetUSBAddress+0x5c>
 8010a72:	a201      	add	r2, pc, #4	; (adr r2, 8010a78 <USBD_LL_SetUSBAddress+0x34>)
 8010a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a78:	08010a89 	.word	0x08010a89
 8010a7c:	08010a8f 	.word	0x08010a8f
 8010a80:	08010a95 	.word	0x08010a95
 8010a84:	08010a9b 	.word	0x08010a9b
    case HAL_OK :
      usb_status = USBD_OK;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8010a8c:	e00b      	b.n	8010aa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a8e:	2303      	movs	r3, #3
 8010a90:	73fb      	strb	r3, [r7, #15]
    break;
 8010a92:	e008      	b.n	8010aa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a94:	2301      	movs	r3, #1
 8010a96:	73fb      	strb	r3, [r7, #15]
    break;
 8010a98:	e005      	b.n	8010aa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a9a:	2303      	movs	r3, #3
 8010a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8010a9e:	e002      	b.n	8010aa6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010aa0:	2303      	movs	r3, #3
 8010aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8010aa4:	bf00      	nop
  }
  return usb_status;
 8010aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3710      	adds	r7, #16
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	607a      	str	r2, [r7, #4]
 8010aba:	603b      	str	r3, [r7, #0]
 8010abc:	460b      	mov	r3, r1
 8010abe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010ace:	7af9      	ldrb	r1, [r7, #11]
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	f7f3 fe9a 	bl	800480c <HAL_PCD_EP_Transmit>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010adc:	7dbb      	ldrb	r3, [r7, #22]
 8010ade:	2b03      	cmp	r3, #3
 8010ae0:	d816      	bhi.n	8010b10 <USBD_LL_Transmit+0x60>
 8010ae2:	a201      	add	r2, pc, #4	; (adr r2, 8010ae8 <USBD_LL_Transmit+0x38>)
 8010ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae8:	08010af9 	.word	0x08010af9
 8010aec:	08010aff 	.word	0x08010aff
 8010af0:	08010b05 	.word	0x08010b05
 8010af4:	08010b0b 	.word	0x08010b0b
    case HAL_OK :
      usb_status = USBD_OK;
 8010af8:	2300      	movs	r3, #0
 8010afa:	75fb      	strb	r3, [r7, #23]
    break;
 8010afc:	e00b      	b.n	8010b16 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010afe:	2303      	movs	r3, #3
 8010b00:	75fb      	strb	r3, [r7, #23]
    break;
 8010b02:	e008      	b.n	8010b16 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b04:	2301      	movs	r3, #1
 8010b06:	75fb      	strb	r3, [r7, #23]
    break;
 8010b08:	e005      	b.n	8010b16 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b0a:	2303      	movs	r3, #3
 8010b0c:	75fb      	strb	r3, [r7, #23]
    break;
 8010b0e:	e002      	b.n	8010b16 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010b10:	2303      	movs	r3, #3
 8010b12:	75fb      	strb	r3, [r7, #23]
    break;
 8010b14:	bf00      	nop
  }
  return usb_status;
 8010b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3718      	adds	r7, #24
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b086      	sub	sp, #24
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	607a      	str	r2, [r7, #4]
 8010b2a:	603b      	str	r3, [r7, #0]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b30:	2300      	movs	r3, #0
 8010b32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b34:	2300      	movs	r3, #0
 8010b36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010b3e:	7af9      	ldrb	r1, [r7, #11]
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	f7f3 fe18 	bl	8004778 <HAL_PCD_EP_Receive>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010b4c:	7dbb      	ldrb	r3, [r7, #22]
 8010b4e:	2b03      	cmp	r3, #3
 8010b50:	d816      	bhi.n	8010b80 <USBD_LL_PrepareReceive+0x60>
 8010b52:	a201      	add	r2, pc, #4	; (adr r2, 8010b58 <USBD_LL_PrepareReceive+0x38>)
 8010b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b58:	08010b69 	.word	0x08010b69
 8010b5c:	08010b6f 	.word	0x08010b6f
 8010b60:	08010b75 	.word	0x08010b75
 8010b64:	08010b7b 	.word	0x08010b7b
    case HAL_OK :
      usb_status = USBD_OK;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	75fb      	strb	r3, [r7, #23]
    break;
 8010b6c:	e00b      	b.n	8010b86 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b6e:	2303      	movs	r3, #3
 8010b70:	75fb      	strb	r3, [r7, #23]
    break;
 8010b72:	e008      	b.n	8010b86 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b74:	2301      	movs	r3, #1
 8010b76:	75fb      	strb	r3, [r7, #23]
    break;
 8010b78:	e005      	b.n	8010b86 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b7a:	2303      	movs	r3, #3
 8010b7c:	75fb      	strb	r3, [r7, #23]
    break;
 8010b7e:	e002      	b.n	8010b86 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010b80:	2303      	movs	r3, #3
 8010b82:	75fb      	strb	r3, [r7, #23]
    break;
 8010b84:	bf00      	nop
  }
  return usb_status;
 8010b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3718      	adds	r7, #24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ba2:	78fa      	ldrb	r2, [r7, #3]
 8010ba4:	4611      	mov	r1, r2
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7f3 fe18 	bl	80047dc <HAL_PCD_EP_GetRxCount>
 8010bac:	4603      	mov	r3, r0
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
	...

08010bb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010bc4:	78fb      	ldrb	r3, [r7, #3]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d002      	beq.n	8010bd0 <HAL_PCDEx_LPM_Callback+0x18>
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d01f      	beq.n	8010c0e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010bce:	e03b      	b.n	8010c48 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6a1b      	ldr	r3, [r3, #32]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d007      	beq.n	8010be8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010bd8:	f000 f854 	bl	8010c84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010bdc:	4b1c      	ldr	r3, [pc, #112]	; (8010c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	4a1b      	ldr	r2, [pc, #108]	; (8010c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8010be2:	f023 0306 	bic.w	r3, r3, #6
 8010be6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	6812      	ldr	r2, [r2, #0]
 8010bf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010bfa:	f023 0301 	bic.w	r3, r3, #1
 8010bfe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7fb f9b7 	bl	800bf7a <USBD_LL_Resume>
    break;
 8010c0c:	e01c      	b.n	8010c48 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	6812      	ldr	r2, [r2, #0]
 8010c1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c20:	f043 0301 	orr.w	r3, r3, #1
 8010c24:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fb f988 	bl	800bf42 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6a1b      	ldr	r3, [r3, #32]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d005      	beq.n	8010c46 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c3a:	4b05      	ldr	r3, [pc, #20]	; (8010c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	4a04      	ldr	r2, [pc, #16]	; (8010c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8010c40:	f043 0306 	orr.w	r3, r3, #6
 8010c44:	6113      	str	r3, [r2, #16]
    break;
 8010c46:	bf00      	nop
}
 8010c48:	bf00      	nop
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	e000ed00 	.word	0xe000ed00

08010c54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b083      	sub	sp, #12
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010c5c:	4b03      	ldr	r3, [pc, #12]	; (8010c6c <USBD_static_malloc+0x18>)
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	370c      	adds	r7, #12
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop
 8010c6c:	2000e0c0 	.word	0x2000e0c0

08010c70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]

}
 8010c78:	bf00      	nop
 8010c7a:	370c      	adds	r7, #12
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010c88:	f7f0 f9a6 	bl	8000fd8 <SystemClock_Config>
}
 8010c8c:	bf00      	nop
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <__cvt>:
 8010c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c94:	ec55 4b10 	vmov	r4, r5, d0
 8010c98:	2d00      	cmp	r5, #0
 8010c9a:	460e      	mov	r6, r1
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	462b      	mov	r3, r5
 8010ca0:	bfbb      	ittet	lt
 8010ca2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010ca6:	461d      	movlt	r5, r3
 8010ca8:	2300      	movge	r3, #0
 8010caa:	232d      	movlt	r3, #45	; 0x2d
 8010cac:	700b      	strb	r3, [r1, #0]
 8010cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010cb4:	4691      	mov	r9, r2
 8010cb6:	f023 0820 	bic.w	r8, r3, #32
 8010cba:	bfbc      	itt	lt
 8010cbc:	4622      	movlt	r2, r4
 8010cbe:	4614      	movlt	r4, r2
 8010cc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010cc4:	d005      	beq.n	8010cd2 <__cvt+0x42>
 8010cc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010cca:	d100      	bne.n	8010cce <__cvt+0x3e>
 8010ccc:	3601      	adds	r6, #1
 8010cce:	2102      	movs	r1, #2
 8010cd0:	e000      	b.n	8010cd4 <__cvt+0x44>
 8010cd2:	2103      	movs	r1, #3
 8010cd4:	ab03      	add	r3, sp, #12
 8010cd6:	9301      	str	r3, [sp, #4]
 8010cd8:	ab02      	add	r3, sp, #8
 8010cda:	9300      	str	r3, [sp, #0]
 8010cdc:	ec45 4b10 	vmov	d0, r4, r5
 8010ce0:	4653      	mov	r3, sl
 8010ce2:	4632      	mov	r2, r6
 8010ce4:	f001 f8e0 	bl	8011ea8 <_dtoa_r>
 8010ce8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010cec:	4607      	mov	r7, r0
 8010cee:	d102      	bne.n	8010cf6 <__cvt+0x66>
 8010cf0:	f019 0f01 	tst.w	r9, #1
 8010cf4:	d022      	beq.n	8010d3c <__cvt+0xac>
 8010cf6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010cfa:	eb07 0906 	add.w	r9, r7, r6
 8010cfe:	d110      	bne.n	8010d22 <__cvt+0x92>
 8010d00:	783b      	ldrb	r3, [r7, #0]
 8010d02:	2b30      	cmp	r3, #48	; 0x30
 8010d04:	d10a      	bne.n	8010d1c <__cvt+0x8c>
 8010d06:	2200      	movs	r2, #0
 8010d08:	2300      	movs	r3, #0
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	4629      	mov	r1, r5
 8010d0e:	f7ef fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d12:	b918      	cbnz	r0, 8010d1c <__cvt+0x8c>
 8010d14:	f1c6 0601 	rsb	r6, r6, #1
 8010d18:	f8ca 6000 	str.w	r6, [sl]
 8010d1c:	f8da 3000 	ldr.w	r3, [sl]
 8010d20:	4499      	add	r9, r3
 8010d22:	2200      	movs	r2, #0
 8010d24:	2300      	movs	r3, #0
 8010d26:	4620      	mov	r0, r4
 8010d28:	4629      	mov	r1, r5
 8010d2a:	f7ef fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d2e:	b108      	cbz	r0, 8010d34 <__cvt+0xa4>
 8010d30:	f8cd 900c 	str.w	r9, [sp, #12]
 8010d34:	2230      	movs	r2, #48	; 0x30
 8010d36:	9b03      	ldr	r3, [sp, #12]
 8010d38:	454b      	cmp	r3, r9
 8010d3a:	d307      	bcc.n	8010d4c <__cvt+0xbc>
 8010d3c:	9b03      	ldr	r3, [sp, #12]
 8010d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d40:	1bdb      	subs	r3, r3, r7
 8010d42:	4638      	mov	r0, r7
 8010d44:	6013      	str	r3, [r2, #0]
 8010d46:	b004      	add	sp, #16
 8010d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d4c:	1c59      	adds	r1, r3, #1
 8010d4e:	9103      	str	r1, [sp, #12]
 8010d50:	701a      	strb	r2, [r3, #0]
 8010d52:	e7f0      	b.n	8010d36 <__cvt+0xa6>

08010d54 <__exponent>:
 8010d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d56:	4603      	mov	r3, r0
 8010d58:	2900      	cmp	r1, #0
 8010d5a:	bfb8      	it	lt
 8010d5c:	4249      	neglt	r1, r1
 8010d5e:	f803 2b02 	strb.w	r2, [r3], #2
 8010d62:	bfb4      	ite	lt
 8010d64:	222d      	movlt	r2, #45	; 0x2d
 8010d66:	222b      	movge	r2, #43	; 0x2b
 8010d68:	2909      	cmp	r1, #9
 8010d6a:	7042      	strb	r2, [r0, #1]
 8010d6c:	dd2a      	ble.n	8010dc4 <__exponent+0x70>
 8010d6e:	f10d 0207 	add.w	r2, sp, #7
 8010d72:	4617      	mov	r7, r2
 8010d74:	260a      	movs	r6, #10
 8010d76:	4694      	mov	ip, r2
 8010d78:	fb91 f5f6 	sdiv	r5, r1, r6
 8010d7c:	fb06 1415 	mls	r4, r6, r5, r1
 8010d80:	3430      	adds	r4, #48	; 0x30
 8010d82:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010d86:	460c      	mov	r4, r1
 8010d88:	2c63      	cmp	r4, #99	; 0x63
 8010d8a:	f102 32ff 	add.w	r2, r2, #4294967295
 8010d8e:	4629      	mov	r1, r5
 8010d90:	dcf1      	bgt.n	8010d76 <__exponent+0x22>
 8010d92:	3130      	adds	r1, #48	; 0x30
 8010d94:	f1ac 0402 	sub.w	r4, ip, #2
 8010d98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010d9c:	1c41      	adds	r1, r0, #1
 8010d9e:	4622      	mov	r2, r4
 8010da0:	42ba      	cmp	r2, r7
 8010da2:	d30a      	bcc.n	8010dba <__exponent+0x66>
 8010da4:	f10d 0209 	add.w	r2, sp, #9
 8010da8:	eba2 020c 	sub.w	r2, r2, ip
 8010dac:	42bc      	cmp	r4, r7
 8010dae:	bf88      	it	hi
 8010db0:	2200      	movhi	r2, #0
 8010db2:	4413      	add	r3, r2
 8010db4:	1a18      	subs	r0, r3, r0
 8010db6:	b003      	add	sp, #12
 8010db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dba:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010dbe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010dc2:	e7ed      	b.n	8010da0 <__exponent+0x4c>
 8010dc4:	2330      	movs	r3, #48	; 0x30
 8010dc6:	3130      	adds	r1, #48	; 0x30
 8010dc8:	7083      	strb	r3, [r0, #2]
 8010dca:	70c1      	strb	r1, [r0, #3]
 8010dcc:	1d03      	adds	r3, r0, #4
 8010dce:	e7f1      	b.n	8010db4 <__exponent+0x60>

08010dd0 <_printf_float>:
 8010dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd4:	ed2d 8b02 	vpush	{d8}
 8010dd8:	b08d      	sub	sp, #52	; 0x34
 8010dda:	460c      	mov	r4, r1
 8010ddc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010de0:	4616      	mov	r6, r2
 8010de2:	461f      	mov	r7, r3
 8010de4:	4605      	mov	r5, r0
 8010de6:	f000 ff4d 	bl	8011c84 <_localeconv_r>
 8010dea:	f8d0 a000 	ldr.w	sl, [r0]
 8010dee:	4650      	mov	r0, sl
 8010df0:	f7ef fa3e 	bl	8000270 <strlen>
 8010df4:	2300      	movs	r3, #0
 8010df6:	930a      	str	r3, [sp, #40]	; 0x28
 8010df8:	6823      	ldr	r3, [r4, #0]
 8010dfa:	9305      	str	r3, [sp, #20]
 8010dfc:	f8d8 3000 	ldr.w	r3, [r8]
 8010e00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010e04:	3307      	adds	r3, #7
 8010e06:	f023 0307 	bic.w	r3, r3, #7
 8010e0a:	f103 0208 	add.w	r2, r3, #8
 8010e0e:	f8c8 2000 	str.w	r2, [r8]
 8010e12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010e1a:	9307      	str	r3, [sp, #28]
 8010e1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010e20:	ee08 0a10 	vmov	s16, r0
 8010e24:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010e28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e2c:	4b9e      	ldr	r3, [pc, #632]	; (80110a8 <_printf_float+0x2d8>)
 8010e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e32:	f7ef fe7b 	bl	8000b2c <__aeabi_dcmpun>
 8010e36:	bb88      	cbnz	r0, 8010e9c <_printf_float+0xcc>
 8010e38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e3c:	4b9a      	ldr	r3, [pc, #616]	; (80110a8 <_printf_float+0x2d8>)
 8010e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e42:	f7ef fe55 	bl	8000af0 <__aeabi_dcmple>
 8010e46:	bb48      	cbnz	r0, 8010e9c <_printf_float+0xcc>
 8010e48:	2200      	movs	r2, #0
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	4640      	mov	r0, r8
 8010e4e:	4649      	mov	r1, r9
 8010e50:	f7ef fe44 	bl	8000adc <__aeabi_dcmplt>
 8010e54:	b110      	cbz	r0, 8010e5c <_printf_float+0x8c>
 8010e56:	232d      	movs	r3, #45	; 0x2d
 8010e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e5c:	4a93      	ldr	r2, [pc, #588]	; (80110ac <_printf_float+0x2dc>)
 8010e5e:	4b94      	ldr	r3, [pc, #592]	; (80110b0 <_printf_float+0x2e0>)
 8010e60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010e64:	bf94      	ite	ls
 8010e66:	4690      	movls	r8, r2
 8010e68:	4698      	movhi	r8, r3
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	6123      	str	r3, [r4, #16]
 8010e6e:	9b05      	ldr	r3, [sp, #20]
 8010e70:	f023 0304 	bic.w	r3, r3, #4
 8010e74:	6023      	str	r3, [r4, #0]
 8010e76:	f04f 0900 	mov.w	r9, #0
 8010e7a:	9700      	str	r7, [sp, #0]
 8010e7c:	4633      	mov	r3, r6
 8010e7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010e80:	4621      	mov	r1, r4
 8010e82:	4628      	mov	r0, r5
 8010e84:	f000 f9da 	bl	801123c <_printf_common>
 8010e88:	3001      	adds	r0, #1
 8010e8a:	f040 8090 	bne.w	8010fae <_printf_float+0x1de>
 8010e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e92:	b00d      	add	sp, #52	; 0x34
 8010e94:	ecbd 8b02 	vpop	{d8}
 8010e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e9c:	4642      	mov	r2, r8
 8010e9e:	464b      	mov	r3, r9
 8010ea0:	4640      	mov	r0, r8
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	f7ef fe42 	bl	8000b2c <__aeabi_dcmpun>
 8010ea8:	b140      	cbz	r0, 8010ebc <_printf_float+0xec>
 8010eaa:	464b      	mov	r3, r9
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	bfbc      	itt	lt
 8010eb0:	232d      	movlt	r3, #45	; 0x2d
 8010eb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010eb6:	4a7f      	ldr	r2, [pc, #508]	; (80110b4 <_printf_float+0x2e4>)
 8010eb8:	4b7f      	ldr	r3, [pc, #508]	; (80110b8 <_printf_float+0x2e8>)
 8010eba:	e7d1      	b.n	8010e60 <_printf_float+0x90>
 8010ebc:	6863      	ldr	r3, [r4, #4]
 8010ebe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010ec2:	9206      	str	r2, [sp, #24]
 8010ec4:	1c5a      	adds	r2, r3, #1
 8010ec6:	d13f      	bne.n	8010f48 <_printf_float+0x178>
 8010ec8:	2306      	movs	r3, #6
 8010eca:	6063      	str	r3, [r4, #4]
 8010ecc:	9b05      	ldr	r3, [sp, #20]
 8010ece:	6861      	ldr	r1, [r4, #4]
 8010ed0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	9303      	str	r3, [sp, #12]
 8010ed8:	ab0a      	add	r3, sp, #40	; 0x28
 8010eda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010ede:	ab09      	add	r3, sp, #36	; 0x24
 8010ee0:	ec49 8b10 	vmov	d0, r8, r9
 8010ee4:	9300      	str	r3, [sp, #0]
 8010ee6:	6022      	str	r2, [r4, #0]
 8010ee8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010eec:	4628      	mov	r0, r5
 8010eee:	f7ff fecf 	bl	8010c90 <__cvt>
 8010ef2:	9b06      	ldr	r3, [sp, #24]
 8010ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ef6:	2b47      	cmp	r3, #71	; 0x47
 8010ef8:	4680      	mov	r8, r0
 8010efa:	d108      	bne.n	8010f0e <_printf_float+0x13e>
 8010efc:	1cc8      	adds	r0, r1, #3
 8010efe:	db02      	blt.n	8010f06 <_printf_float+0x136>
 8010f00:	6863      	ldr	r3, [r4, #4]
 8010f02:	4299      	cmp	r1, r3
 8010f04:	dd41      	ble.n	8010f8a <_printf_float+0x1ba>
 8010f06:	f1ab 0302 	sub.w	r3, fp, #2
 8010f0a:	fa5f fb83 	uxtb.w	fp, r3
 8010f0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010f12:	d820      	bhi.n	8010f56 <_printf_float+0x186>
 8010f14:	3901      	subs	r1, #1
 8010f16:	465a      	mov	r2, fp
 8010f18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f1c:	9109      	str	r1, [sp, #36]	; 0x24
 8010f1e:	f7ff ff19 	bl	8010d54 <__exponent>
 8010f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f24:	1813      	adds	r3, r2, r0
 8010f26:	2a01      	cmp	r2, #1
 8010f28:	4681      	mov	r9, r0
 8010f2a:	6123      	str	r3, [r4, #16]
 8010f2c:	dc02      	bgt.n	8010f34 <_printf_float+0x164>
 8010f2e:	6822      	ldr	r2, [r4, #0]
 8010f30:	07d2      	lsls	r2, r2, #31
 8010f32:	d501      	bpl.n	8010f38 <_printf_float+0x168>
 8010f34:	3301      	adds	r3, #1
 8010f36:	6123      	str	r3, [r4, #16]
 8010f38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d09c      	beq.n	8010e7a <_printf_float+0xaa>
 8010f40:	232d      	movs	r3, #45	; 0x2d
 8010f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f46:	e798      	b.n	8010e7a <_printf_float+0xaa>
 8010f48:	9a06      	ldr	r2, [sp, #24]
 8010f4a:	2a47      	cmp	r2, #71	; 0x47
 8010f4c:	d1be      	bne.n	8010ecc <_printf_float+0xfc>
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d1bc      	bne.n	8010ecc <_printf_float+0xfc>
 8010f52:	2301      	movs	r3, #1
 8010f54:	e7b9      	b.n	8010eca <_printf_float+0xfa>
 8010f56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010f5a:	d118      	bne.n	8010f8e <_printf_float+0x1be>
 8010f5c:	2900      	cmp	r1, #0
 8010f5e:	6863      	ldr	r3, [r4, #4]
 8010f60:	dd0b      	ble.n	8010f7a <_printf_float+0x1aa>
 8010f62:	6121      	str	r1, [r4, #16]
 8010f64:	b913      	cbnz	r3, 8010f6c <_printf_float+0x19c>
 8010f66:	6822      	ldr	r2, [r4, #0]
 8010f68:	07d0      	lsls	r0, r2, #31
 8010f6a:	d502      	bpl.n	8010f72 <_printf_float+0x1a2>
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	440b      	add	r3, r1
 8010f70:	6123      	str	r3, [r4, #16]
 8010f72:	65a1      	str	r1, [r4, #88]	; 0x58
 8010f74:	f04f 0900 	mov.w	r9, #0
 8010f78:	e7de      	b.n	8010f38 <_printf_float+0x168>
 8010f7a:	b913      	cbnz	r3, 8010f82 <_printf_float+0x1b2>
 8010f7c:	6822      	ldr	r2, [r4, #0]
 8010f7e:	07d2      	lsls	r2, r2, #31
 8010f80:	d501      	bpl.n	8010f86 <_printf_float+0x1b6>
 8010f82:	3302      	adds	r3, #2
 8010f84:	e7f4      	b.n	8010f70 <_printf_float+0x1a0>
 8010f86:	2301      	movs	r3, #1
 8010f88:	e7f2      	b.n	8010f70 <_printf_float+0x1a0>
 8010f8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f90:	4299      	cmp	r1, r3
 8010f92:	db05      	blt.n	8010fa0 <_printf_float+0x1d0>
 8010f94:	6823      	ldr	r3, [r4, #0]
 8010f96:	6121      	str	r1, [r4, #16]
 8010f98:	07d8      	lsls	r0, r3, #31
 8010f9a:	d5ea      	bpl.n	8010f72 <_printf_float+0x1a2>
 8010f9c:	1c4b      	adds	r3, r1, #1
 8010f9e:	e7e7      	b.n	8010f70 <_printf_float+0x1a0>
 8010fa0:	2900      	cmp	r1, #0
 8010fa2:	bfd4      	ite	le
 8010fa4:	f1c1 0202 	rsble	r2, r1, #2
 8010fa8:	2201      	movgt	r2, #1
 8010faa:	4413      	add	r3, r2
 8010fac:	e7e0      	b.n	8010f70 <_printf_float+0x1a0>
 8010fae:	6823      	ldr	r3, [r4, #0]
 8010fb0:	055a      	lsls	r2, r3, #21
 8010fb2:	d407      	bmi.n	8010fc4 <_printf_float+0x1f4>
 8010fb4:	6923      	ldr	r3, [r4, #16]
 8010fb6:	4642      	mov	r2, r8
 8010fb8:	4631      	mov	r1, r6
 8010fba:	4628      	mov	r0, r5
 8010fbc:	47b8      	blx	r7
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	d12c      	bne.n	801101c <_printf_float+0x24c>
 8010fc2:	e764      	b.n	8010e8e <_printf_float+0xbe>
 8010fc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010fc8:	f240 80e0 	bls.w	801118c <_printf_float+0x3bc>
 8010fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	f7ef fd78 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fd8:	2800      	cmp	r0, #0
 8010fda:	d034      	beq.n	8011046 <_printf_float+0x276>
 8010fdc:	4a37      	ldr	r2, [pc, #220]	; (80110bc <_printf_float+0x2ec>)
 8010fde:	2301      	movs	r3, #1
 8010fe0:	4631      	mov	r1, r6
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	47b8      	blx	r7
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	f43f af51 	beq.w	8010e8e <_printf_float+0xbe>
 8010fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	db02      	blt.n	8010ffa <_printf_float+0x22a>
 8010ff4:	6823      	ldr	r3, [r4, #0]
 8010ff6:	07d8      	lsls	r0, r3, #31
 8010ff8:	d510      	bpl.n	801101c <_printf_float+0x24c>
 8010ffa:	ee18 3a10 	vmov	r3, s16
 8010ffe:	4652      	mov	r2, sl
 8011000:	4631      	mov	r1, r6
 8011002:	4628      	mov	r0, r5
 8011004:	47b8      	blx	r7
 8011006:	3001      	adds	r0, #1
 8011008:	f43f af41 	beq.w	8010e8e <_printf_float+0xbe>
 801100c:	f04f 0800 	mov.w	r8, #0
 8011010:	f104 091a 	add.w	r9, r4, #26
 8011014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011016:	3b01      	subs	r3, #1
 8011018:	4543      	cmp	r3, r8
 801101a:	dc09      	bgt.n	8011030 <_printf_float+0x260>
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	079b      	lsls	r3, r3, #30
 8011020:	f100 8107 	bmi.w	8011232 <_printf_float+0x462>
 8011024:	68e0      	ldr	r0, [r4, #12]
 8011026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011028:	4298      	cmp	r0, r3
 801102a:	bfb8      	it	lt
 801102c:	4618      	movlt	r0, r3
 801102e:	e730      	b.n	8010e92 <_printf_float+0xc2>
 8011030:	2301      	movs	r3, #1
 8011032:	464a      	mov	r2, r9
 8011034:	4631      	mov	r1, r6
 8011036:	4628      	mov	r0, r5
 8011038:	47b8      	blx	r7
 801103a:	3001      	adds	r0, #1
 801103c:	f43f af27 	beq.w	8010e8e <_printf_float+0xbe>
 8011040:	f108 0801 	add.w	r8, r8, #1
 8011044:	e7e6      	b.n	8011014 <_printf_float+0x244>
 8011046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011048:	2b00      	cmp	r3, #0
 801104a:	dc39      	bgt.n	80110c0 <_printf_float+0x2f0>
 801104c:	4a1b      	ldr	r2, [pc, #108]	; (80110bc <_printf_float+0x2ec>)
 801104e:	2301      	movs	r3, #1
 8011050:	4631      	mov	r1, r6
 8011052:	4628      	mov	r0, r5
 8011054:	47b8      	blx	r7
 8011056:	3001      	adds	r0, #1
 8011058:	f43f af19 	beq.w	8010e8e <_printf_float+0xbe>
 801105c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011060:	4313      	orrs	r3, r2
 8011062:	d102      	bne.n	801106a <_printf_float+0x29a>
 8011064:	6823      	ldr	r3, [r4, #0]
 8011066:	07d9      	lsls	r1, r3, #31
 8011068:	d5d8      	bpl.n	801101c <_printf_float+0x24c>
 801106a:	ee18 3a10 	vmov	r3, s16
 801106e:	4652      	mov	r2, sl
 8011070:	4631      	mov	r1, r6
 8011072:	4628      	mov	r0, r5
 8011074:	47b8      	blx	r7
 8011076:	3001      	adds	r0, #1
 8011078:	f43f af09 	beq.w	8010e8e <_printf_float+0xbe>
 801107c:	f04f 0900 	mov.w	r9, #0
 8011080:	f104 0a1a 	add.w	sl, r4, #26
 8011084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011086:	425b      	negs	r3, r3
 8011088:	454b      	cmp	r3, r9
 801108a:	dc01      	bgt.n	8011090 <_printf_float+0x2c0>
 801108c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801108e:	e792      	b.n	8010fb6 <_printf_float+0x1e6>
 8011090:	2301      	movs	r3, #1
 8011092:	4652      	mov	r2, sl
 8011094:	4631      	mov	r1, r6
 8011096:	4628      	mov	r0, r5
 8011098:	47b8      	blx	r7
 801109a:	3001      	adds	r0, #1
 801109c:	f43f aef7 	beq.w	8010e8e <_printf_float+0xbe>
 80110a0:	f109 0901 	add.w	r9, r9, #1
 80110a4:	e7ee      	b.n	8011084 <_printf_float+0x2b4>
 80110a6:	bf00      	nop
 80110a8:	7fefffff 	.word	0x7fefffff
 80110ac:	0801573a 	.word	0x0801573a
 80110b0:	0801573e 	.word	0x0801573e
 80110b4:	08015742 	.word	0x08015742
 80110b8:	08015746 	.word	0x08015746
 80110bc:	0801574a 	.word	0x0801574a
 80110c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110c4:	429a      	cmp	r2, r3
 80110c6:	bfa8      	it	ge
 80110c8:	461a      	movge	r2, r3
 80110ca:	2a00      	cmp	r2, #0
 80110cc:	4691      	mov	r9, r2
 80110ce:	dc37      	bgt.n	8011140 <_printf_float+0x370>
 80110d0:	f04f 0b00 	mov.w	fp, #0
 80110d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110d8:	f104 021a 	add.w	r2, r4, #26
 80110dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110de:	9305      	str	r3, [sp, #20]
 80110e0:	eba3 0309 	sub.w	r3, r3, r9
 80110e4:	455b      	cmp	r3, fp
 80110e6:	dc33      	bgt.n	8011150 <_printf_float+0x380>
 80110e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110ec:	429a      	cmp	r2, r3
 80110ee:	db3b      	blt.n	8011168 <_printf_float+0x398>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	07da      	lsls	r2, r3, #31
 80110f4:	d438      	bmi.n	8011168 <_printf_float+0x398>
 80110f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80110fa:	eba2 0903 	sub.w	r9, r2, r3
 80110fe:	9b05      	ldr	r3, [sp, #20]
 8011100:	1ad2      	subs	r2, r2, r3
 8011102:	4591      	cmp	r9, r2
 8011104:	bfa8      	it	ge
 8011106:	4691      	movge	r9, r2
 8011108:	f1b9 0f00 	cmp.w	r9, #0
 801110c:	dc35      	bgt.n	801117a <_printf_float+0x3aa>
 801110e:	f04f 0800 	mov.w	r8, #0
 8011112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011116:	f104 0a1a 	add.w	sl, r4, #26
 801111a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801111e:	1a9b      	subs	r3, r3, r2
 8011120:	eba3 0309 	sub.w	r3, r3, r9
 8011124:	4543      	cmp	r3, r8
 8011126:	f77f af79 	ble.w	801101c <_printf_float+0x24c>
 801112a:	2301      	movs	r3, #1
 801112c:	4652      	mov	r2, sl
 801112e:	4631      	mov	r1, r6
 8011130:	4628      	mov	r0, r5
 8011132:	47b8      	blx	r7
 8011134:	3001      	adds	r0, #1
 8011136:	f43f aeaa 	beq.w	8010e8e <_printf_float+0xbe>
 801113a:	f108 0801 	add.w	r8, r8, #1
 801113e:	e7ec      	b.n	801111a <_printf_float+0x34a>
 8011140:	4613      	mov	r3, r2
 8011142:	4631      	mov	r1, r6
 8011144:	4642      	mov	r2, r8
 8011146:	4628      	mov	r0, r5
 8011148:	47b8      	blx	r7
 801114a:	3001      	adds	r0, #1
 801114c:	d1c0      	bne.n	80110d0 <_printf_float+0x300>
 801114e:	e69e      	b.n	8010e8e <_printf_float+0xbe>
 8011150:	2301      	movs	r3, #1
 8011152:	4631      	mov	r1, r6
 8011154:	4628      	mov	r0, r5
 8011156:	9205      	str	r2, [sp, #20]
 8011158:	47b8      	blx	r7
 801115a:	3001      	adds	r0, #1
 801115c:	f43f ae97 	beq.w	8010e8e <_printf_float+0xbe>
 8011160:	9a05      	ldr	r2, [sp, #20]
 8011162:	f10b 0b01 	add.w	fp, fp, #1
 8011166:	e7b9      	b.n	80110dc <_printf_float+0x30c>
 8011168:	ee18 3a10 	vmov	r3, s16
 801116c:	4652      	mov	r2, sl
 801116e:	4631      	mov	r1, r6
 8011170:	4628      	mov	r0, r5
 8011172:	47b8      	blx	r7
 8011174:	3001      	adds	r0, #1
 8011176:	d1be      	bne.n	80110f6 <_printf_float+0x326>
 8011178:	e689      	b.n	8010e8e <_printf_float+0xbe>
 801117a:	9a05      	ldr	r2, [sp, #20]
 801117c:	464b      	mov	r3, r9
 801117e:	4442      	add	r2, r8
 8011180:	4631      	mov	r1, r6
 8011182:	4628      	mov	r0, r5
 8011184:	47b8      	blx	r7
 8011186:	3001      	adds	r0, #1
 8011188:	d1c1      	bne.n	801110e <_printf_float+0x33e>
 801118a:	e680      	b.n	8010e8e <_printf_float+0xbe>
 801118c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801118e:	2a01      	cmp	r2, #1
 8011190:	dc01      	bgt.n	8011196 <_printf_float+0x3c6>
 8011192:	07db      	lsls	r3, r3, #31
 8011194:	d53a      	bpl.n	801120c <_printf_float+0x43c>
 8011196:	2301      	movs	r3, #1
 8011198:	4642      	mov	r2, r8
 801119a:	4631      	mov	r1, r6
 801119c:	4628      	mov	r0, r5
 801119e:	47b8      	blx	r7
 80111a0:	3001      	adds	r0, #1
 80111a2:	f43f ae74 	beq.w	8010e8e <_printf_float+0xbe>
 80111a6:	ee18 3a10 	vmov	r3, s16
 80111aa:	4652      	mov	r2, sl
 80111ac:	4631      	mov	r1, r6
 80111ae:	4628      	mov	r0, r5
 80111b0:	47b8      	blx	r7
 80111b2:	3001      	adds	r0, #1
 80111b4:	f43f ae6b 	beq.w	8010e8e <_printf_float+0xbe>
 80111b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80111bc:	2200      	movs	r2, #0
 80111be:	2300      	movs	r3, #0
 80111c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80111c4:	f7ef fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 80111c8:	b9d8      	cbnz	r0, 8011202 <_printf_float+0x432>
 80111ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80111ce:	f108 0201 	add.w	r2, r8, #1
 80111d2:	4631      	mov	r1, r6
 80111d4:	4628      	mov	r0, r5
 80111d6:	47b8      	blx	r7
 80111d8:	3001      	adds	r0, #1
 80111da:	d10e      	bne.n	80111fa <_printf_float+0x42a>
 80111dc:	e657      	b.n	8010e8e <_printf_float+0xbe>
 80111de:	2301      	movs	r3, #1
 80111e0:	4652      	mov	r2, sl
 80111e2:	4631      	mov	r1, r6
 80111e4:	4628      	mov	r0, r5
 80111e6:	47b8      	blx	r7
 80111e8:	3001      	adds	r0, #1
 80111ea:	f43f ae50 	beq.w	8010e8e <_printf_float+0xbe>
 80111ee:	f108 0801 	add.w	r8, r8, #1
 80111f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111f4:	3b01      	subs	r3, #1
 80111f6:	4543      	cmp	r3, r8
 80111f8:	dcf1      	bgt.n	80111de <_printf_float+0x40e>
 80111fa:	464b      	mov	r3, r9
 80111fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011200:	e6da      	b.n	8010fb8 <_printf_float+0x1e8>
 8011202:	f04f 0800 	mov.w	r8, #0
 8011206:	f104 0a1a 	add.w	sl, r4, #26
 801120a:	e7f2      	b.n	80111f2 <_printf_float+0x422>
 801120c:	2301      	movs	r3, #1
 801120e:	4642      	mov	r2, r8
 8011210:	e7df      	b.n	80111d2 <_printf_float+0x402>
 8011212:	2301      	movs	r3, #1
 8011214:	464a      	mov	r2, r9
 8011216:	4631      	mov	r1, r6
 8011218:	4628      	mov	r0, r5
 801121a:	47b8      	blx	r7
 801121c:	3001      	adds	r0, #1
 801121e:	f43f ae36 	beq.w	8010e8e <_printf_float+0xbe>
 8011222:	f108 0801 	add.w	r8, r8, #1
 8011226:	68e3      	ldr	r3, [r4, #12]
 8011228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801122a:	1a5b      	subs	r3, r3, r1
 801122c:	4543      	cmp	r3, r8
 801122e:	dcf0      	bgt.n	8011212 <_printf_float+0x442>
 8011230:	e6f8      	b.n	8011024 <_printf_float+0x254>
 8011232:	f04f 0800 	mov.w	r8, #0
 8011236:	f104 0919 	add.w	r9, r4, #25
 801123a:	e7f4      	b.n	8011226 <_printf_float+0x456>

0801123c <_printf_common>:
 801123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011240:	4616      	mov	r6, r2
 8011242:	4699      	mov	r9, r3
 8011244:	688a      	ldr	r2, [r1, #8]
 8011246:	690b      	ldr	r3, [r1, #16]
 8011248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801124c:	4293      	cmp	r3, r2
 801124e:	bfb8      	it	lt
 8011250:	4613      	movlt	r3, r2
 8011252:	6033      	str	r3, [r6, #0]
 8011254:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011258:	4607      	mov	r7, r0
 801125a:	460c      	mov	r4, r1
 801125c:	b10a      	cbz	r2, 8011262 <_printf_common+0x26>
 801125e:	3301      	adds	r3, #1
 8011260:	6033      	str	r3, [r6, #0]
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	0699      	lsls	r1, r3, #26
 8011266:	bf42      	ittt	mi
 8011268:	6833      	ldrmi	r3, [r6, #0]
 801126a:	3302      	addmi	r3, #2
 801126c:	6033      	strmi	r3, [r6, #0]
 801126e:	6825      	ldr	r5, [r4, #0]
 8011270:	f015 0506 	ands.w	r5, r5, #6
 8011274:	d106      	bne.n	8011284 <_printf_common+0x48>
 8011276:	f104 0a19 	add.w	sl, r4, #25
 801127a:	68e3      	ldr	r3, [r4, #12]
 801127c:	6832      	ldr	r2, [r6, #0]
 801127e:	1a9b      	subs	r3, r3, r2
 8011280:	42ab      	cmp	r3, r5
 8011282:	dc26      	bgt.n	80112d2 <_printf_common+0x96>
 8011284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011288:	1e13      	subs	r3, r2, #0
 801128a:	6822      	ldr	r2, [r4, #0]
 801128c:	bf18      	it	ne
 801128e:	2301      	movne	r3, #1
 8011290:	0692      	lsls	r2, r2, #26
 8011292:	d42b      	bmi.n	80112ec <_printf_common+0xb0>
 8011294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011298:	4649      	mov	r1, r9
 801129a:	4638      	mov	r0, r7
 801129c:	47c0      	blx	r8
 801129e:	3001      	adds	r0, #1
 80112a0:	d01e      	beq.n	80112e0 <_printf_common+0xa4>
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	6922      	ldr	r2, [r4, #16]
 80112a6:	f003 0306 	and.w	r3, r3, #6
 80112aa:	2b04      	cmp	r3, #4
 80112ac:	bf02      	ittt	eq
 80112ae:	68e5      	ldreq	r5, [r4, #12]
 80112b0:	6833      	ldreq	r3, [r6, #0]
 80112b2:	1aed      	subeq	r5, r5, r3
 80112b4:	68a3      	ldr	r3, [r4, #8]
 80112b6:	bf0c      	ite	eq
 80112b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112bc:	2500      	movne	r5, #0
 80112be:	4293      	cmp	r3, r2
 80112c0:	bfc4      	itt	gt
 80112c2:	1a9b      	subgt	r3, r3, r2
 80112c4:	18ed      	addgt	r5, r5, r3
 80112c6:	2600      	movs	r6, #0
 80112c8:	341a      	adds	r4, #26
 80112ca:	42b5      	cmp	r5, r6
 80112cc:	d11a      	bne.n	8011304 <_printf_common+0xc8>
 80112ce:	2000      	movs	r0, #0
 80112d0:	e008      	b.n	80112e4 <_printf_common+0xa8>
 80112d2:	2301      	movs	r3, #1
 80112d4:	4652      	mov	r2, sl
 80112d6:	4649      	mov	r1, r9
 80112d8:	4638      	mov	r0, r7
 80112da:	47c0      	blx	r8
 80112dc:	3001      	adds	r0, #1
 80112de:	d103      	bne.n	80112e8 <_printf_common+0xac>
 80112e0:	f04f 30ff 	mov.w	r0, #4294967295
 80112e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112e8:	3501      	adds	r5, #1
 80112ea:	e7c6      	b.n	801127a <_printf_common+0x3e>
 80112ec:	18e1      	adds	r1, r4, r3
 80112ee:	1c5a      	adds	r2, r3, #1
 80112f0:	2030      	movs	r0, #48	; 0x30
 80112f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112f6:	4422      	add	r2, r4
 80112f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011300:	3302      	adds	r3, #2
 8011302:	e7c7      	b.n	8011294 <_printf_common+0x58>
 8011304:	2301      	movs	r3, #1
 8011306:	4622      	mov	r2, r4
 8011308:	4649      	mov	r1, r9
 801130a:	4638      	mov	r0, r7
 801130c:	47c0      	blx	r8
 801130e:	3001      	adds	r0, #1
 8011310:	d0e6      	beq.n	80112e0 <_printf_common+0xa4>
 8011312:	3601      	adds	r6, #1
 8011314:	e7d9      	b.n	80112ca <_printf_common+0x8e>
	...

08011318 <_printf_i>:
 8011318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801131c:	7e0f      	ldrb	r7, [r1, #24]
 801131e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011320:	2f78      	cmp	r7, #120	; 0x78
 8011322:	4691      	mov	r9, r2
 8011324:	4680      	mov	r8, r0
 8011326:	460c      	mov	r4, r1
 8011328:	469a      	mov	sl, r3
 801132a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801132e:	d807      	bhi.n	8011340 <_printf_i+0x28>
 8011330:	2f62      	cmp	r7, #98	; 0x62
 8011332:	d80a      	bhi.n	801134a <_printf_i+0x32>
 8011334:	2f00      	cmp	r7, #0
 8011336:	f000 80d4 	beq.w	80114e2 <_printf_i+0x1ca>
 801133a:	2f58      	cmp	r7, #88	; 0x58
 801133c:	f000 80c0 	beq.w	80114c0 <_printf_i+0x1a8>
 8011340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011348:	e03a      	b.n	80113c0 <_printf_i+0xa8>
 801134a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801134e:	2b15      	cmp	r3, #21
 8011350:	d8f6      	bhi.n	8011340 <_printf_i+0x28>
 8011352:	a101      	add	r1, pc, #4	; (adr r1, 8011358 <_printf_i+0x40>)
 8011354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011358:	080113b1 	.word	0x080113b1
 801135c:	080113c5 	.word	0x080113c5
 8011360:	08011341 	.word	0x08011341
 8011364:	08011341 	.word	0x08011341
 8011368:	08011341 	.word	0x08011341
 801136c:	08011341 	.word	0x08011341
 8011370:	080113c5 	.word	0x080113c5
 8011374:	08011341 	.word	0x08011341
 8011378:	08011341 	.word	0x08011341
 801137c:	08011341 	.word	0x08011341
 8011380:	08011341 	.word	0x08011341
 8011384:	080114c9 	.word	0x080114c9
 8011388:	080113f1 	.word	0x080113f1
 801138c:	08011483 	.word	0x08011483
 8011390:	08011341 	.word	0x08011341
 8011394:	08011341 	.word	0x08011341
 8011398:	080114eb 	.word	0x080114eb
 801139c:	08011341 	.word	0x08011341
 80113a0:	080113f1 	.word	0x080113f1
 80113a4:	08011341 	.word	0x08011341
 80113a8:	08011341 	.word	0x08011341
 80113ac:	0801148b 	.word	0x0801148b
 80113b0:	682b      	ldr	r3, [r5, #0]
 80113b2:	1d1a      	adds	r2, r3, #4
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	602a      	str	r2, [r5, #0]
 80113b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113c0:	2301      	movs	r3, #1
 80113c2:	e09f      	b.n	8011504 <_printf_i+0x1ec>
 80113c4:	6820      	ldr	r0, [r4, #0]
 80113c6:	682b      	ldr	r3, [r5, #0]
 80113c8:	0607      	lsls	r7, r0, #24
 80113ca:	f103 0104 	add.w	r1, r3, #4
 80113ce:	6029      	str	r1, [r5, #0]
 80113d0:	d501      	bpl.n	80113d6 <_printf_i+0xbe>
 80113d2:	681e      	ldr	r6, [r3, #0]
 80113d4:	e003      	b.n	80113de <_printf_i+0xc6>
 80113d6:	0646      	lsls	r6, r0, #25
 80113d8:	d5fb      	bpl.n	80113d2 <_printf_i+0xba>
 80113da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80113de:	2e00      	cmp	r6, #0
 80113e0:	da03      	bge.n	80113ea <_printf_i+0xd2>
 80113e2:	232d      	movs	r3, #45	; 0x2d
 80113e4:	4276      	negs	r6, r6
 80113e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113ea:	485a      	ldr	r0, [pc, #360]	; (8011554 <_printf_i+0x23c>)
 80113ec:	230a      	movs	r3, #10
 80113ee:	e012      	b.n	8011416 <_printf_i+0xfe>
 80113f0:	682b      	ldr	r3, [r5, #0]
 80113f2:	6820      	ldr	r0, [r4, #0]
 80113f4:	1d19      	adds	r1, r3, #4
 80113f6:	6029      	str	r1, [r5, #0]
 80113f8:	0605      	lsls	r5, r0, #24
 80113fa:	d501      	bpl.n	8011400 <_printf_i+0xe8>
 80113fc:	681e      	ldr	r6, [r3, #0]
 80113fe:	e002      	b.n	8011406 <_printf_i+0xee>
 8011400:	0641      	lsls	r1, r0, #25
 8011402:	d5fb      	bpl.n	80113fc <_printf_i+0xe4>
 8011404:	881e      	ldrh	r6, [r3, #0]
 8011406:	4853      	ldr	r0, [pc, #332]	; (8011554 <_printf_i+0x23c>)
 8011408:	2f6f      	cmp	r7, #111	; 0x6f
 801140a:	bf0c      	ite	eq
 801140c:	2308      	moveq	r3, #8
 801140e:	230a      	movne	r3, #10
 8011410:	2100      	movs	r1, #0
 8011412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011416:	6865      	ldr	r5, [r4, #4]
 8011418:	60a5      	str	r5, [r4, #8]
 801141a:	2d00      	cmp	r5, #0
 801141c:	bfa2      	ittt	ge
 801141e:	6821      	ldrge	r1, [r4, #0]
 8011420:	f021 0104 	bicge.w	r1, r1, #4
 8011424:	6021      	strge	r1, [r4, #0]
 8011426:	b90e      	cbnz	r6, 801142c <_printf_i+0x114>
 8011428:	2d00      	cmp	r5, #0
 801142a:	d04b      	beq.n	80114c4 <_printf_i+0x1ac>
 801142c:	4615      	mov	r5, r2
 801142e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011432:	fb03 6711 	mls	r7, r3, r1, r6
 8011436:	5dc7      	ldrb	r7, [r0, r7]
 8011438:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801143c:	4637      	mov	r7, r6
 801143e:	42bb      	cmp	r3, r7
 8011440:	460e      	mov	r6, r1
 8011442:	d9f4      	bls.n	801142e <_printf_i+0x116>
 8011444:	2b08      	cmp	r3, #8
 8011446:	d10b      	bne.n	8011460 <_printf_i+0x148>
 8011448:	6823      	ldr	r3, [r4, #0]
 801144a:	07de      	lsls	r6, r3, #31
 801144c:	d508      	bpl.n	8011460 <_printf_i+0x148>
 801144e:	6923      	ldr	r3, [r4, #16]
 8011450:	6861      	ldr	r1, [r4, #4]
 8011452:	4299      	cmp	r1, r3
 8011454:	bfde      	ittt	le
 8011456:	2330      	movle	r3, #48	; 0x30
 8011458:	f805 3c01 	strble.w	r3, [r5, #-1]
 801145c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011460:	1b52      	subs	r2, r2, r5
 8011462:	6122      	str	r2, [r4, #16]
 8011464:	f8cd a000 	str.w	sl, [sp]
 8011468:	464b      	mov	r3, r9
 801146a:	aa03      	add	r2, sp, #12
 801146c:	4621      	mov	r1, r4
 801146e:	4640      	mov	r0, r8
 8011470:	f7ff fee4 	bl	801123c <_printf_common>
 8011474:	3001      	adds	r0, #1
 8011476:	d14a      	bne.n	801150e <_printf_i+0x1f6>
 8011478:	f04f 30ff 	mov.w	r0, #4294967295
 801147c:	b004      	add	sp, #16
 801147e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011482:	6823      	ldr	r3, [r4, #0]
 8011484:	f043 0320 	orr.w	r3, r3, #32
 8011488:	6023      	str	r3, [r4, #0]
 801148a:	4833      	ldr	r0, [pc, #204]	; (8011558 <_printf_i+0x240>)
 801148c:	2778      	movs	r7, #120	; 0x78
 801148e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011492:	6823      	ldr	r3, [r4, #0]
 8011494:	6829      	ldr	r1, [r5, #0]
 8011496:	061f      	lsls	r7, r3, #24
 8011498:	f851 6b04 	ldr.w	r6, [r1], #4
 801149c:	d402      	bmi.n	80114a4 <_printf_i+0x18c>
 801149e:	065f      	lsls	r7, r3, #25
 80114a0:	bf48      	it	mi
 80114a2:	b2b6      	uxthmi	r6, r6
 80114a4:	07df      	lsls	r7, r3, #31
 80114a6:	bf48      	it	mi
 80114a8:	f043 0320 	orrmi.w	r3, r3, #32
 80114ac:	6029      	str	r1, [r5, #0]
 80114ae:	bf48      	it	mi
 80114b0:	6023      	strmi	r3, [r4, #0]
 80114b2:	b91e      	cbnz	r6, 80114bc <_printf_i+0x1a4>
 80114b4:	6823      	ldr	r3, [r4, #0]
 80114b6:	f023 0320 	bic.w	r3, r3, #32
 80114ba:	6023      	str	r3, [r4, #0]
 80114bc:	2310      	movs	r3, #16
 80114be:	e7a7      	b.n	8011410 <_printf_i+0xf8>
 80114c0:	4824      	ldr	r0, [pc, #144]	; (8011554 <_printf_i+0x23c>)
 80114c2:	e7e4      	b.n	801148e <_printf_i+0x176>
 80114c4:	4615      	mov	r5, r2
 80114c6:	e7bd      	b.n	8011444 <_printf_i+0x12c>
 80114c8:	682b      	ldr	r3, [r5, #0]
 80114ca:	6826      	ldr	r6, [r4, #0]
 80114cc:	6961      	ldr	r1, [r4, #20]
 80114ce:	1d18      	adds	r0, r3, #4
 80114d0:	6028      	str	r0, [r5, #0]
 80114d2:	0635      	lsls	r5, r6, #24
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	d501      	bpl.n	80114dc <_printf_i+0x1c4>
 80114d8:	6019      	str	r1, [r3, #0]
 80114da:	e002      	b.n	80114e2 <_printf_i+0x1ca>
 80114dc:	0670      	lsls	r0, r6, #25
 80114de:	d5fb      	bpl.n	80114d8 <_printf_i+0x1c0>
 80114e0:	8019      	strh	r1, [r3, #0]
 80114e2:	2300      	movs	r3, #0
 80114e4:	6123      	str	r3, [r4, #16]
 80114e6:	4615      	mov	r5, r2
 80114e8:	e7bc      	b.n	8011464 <_printf_i+0x14c>
 80114ea:	682b      	ldr	r3, [r5, #0]
 80114ec:	1d1a      	adds	r2, r3, #4
 80114ee:	602a      	str	r2, [r5, #0]
 80114f0:	681d      	ldr	r5, [r3, #0]
 80114f2:	6862      	ldr	r2, [r4, #4]
 80114f4:	2100      	movs	r1, #0
 80114f6:	4628      	mov	r0, r5
 80114f8:	f7ee fe6a 	bl	80001d0 <memchr>
 80114fc:	b108      	cbz	r0, 8011502 <_printf_i+0x1ea>
 80114fe:	1b40      	subs	r0, r0, r5
 8011500:	6060      	str	r0, [r4, #4]
 8011502:	6863      	ldr	r3, [r4, #4]
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	2300      	movs	r3, #0
 8011508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801150c:	e7aa      	b.n	8011464 <_printf_i+0x14c>
 801150e:	6923      	ldr	r3, [r4, #16]
 8011510:	462a      	mov	r2, r5
 8011512:	4649      	mov	r1, r9
 8011514:	4640      	mov	r0, r8
 8011516:	47d0      	blx	sl
 8011518:	3001      	adds	r0, #1
 801151a:	d0ad      	beq.n	8011478 <_printf_i+0x160>
 801151c:	6823      	ldr	r3, [r4, #0]
 801151e:	079b      	lsls	r3, r3, #30
 8011520:	d413      	bmi.n	801154a <_printf_i+0x232>
 8011522:	68e0      	ldr	r0, [r4, #12]
 8011524:	9b03      	ldr	r3, [sp, #12]
 8011526:	4298      	cmp	r0, r3
 8011528:	bfb8      	it	lt
 801152a:	4618      	movlt	r0, r3
 801152c:	e7a6      	b.n	801147c <_printf_i+0x164>
 801152e:	2301      	movs	r3, #1
 8011530:	4632      	mov	r2, r6
 8011532:	4649      	mov	r1, r9
 8011534:	4640      	mov	r0, r8
 8011536:	47d0      	blx	sl
 8011538:	3001      	adds	r0, #1
 801153a:	d09d      	beq.n	8011478 <_printf_i+0x160>
 801153c:	3501      	adds	r5, #1
 801153e:	68e3      	ldr	r3, [r4, #12]
 8011540:	9903      	ldr	r1, [sp, #12]
 8011542:	1a5b      	subs	r3, r3, r1
 8011544:	42ab      	cmp	r3, r5
 8011546:	dcf2      	bgt.n	801152e <_printf_i+0x216>
 8011548:	e7eb      	b.n	8011522 <_printf_i+0x20a>
 801154a:	2500      	movs	r5, #0
 801154c:	f104 0619 	add.w	r6, r4, #25
 8011550:	e7f5      	b.n	801153e <_printf_i+0x226>
 8011552:	bf00      	nop
 8011554:	0801574c 	.word	0x0801574c
 8011558:	0801575d 	.word	0x0801575d

0801155c <_scanf_float>:
 801155c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011560:	b087      	sub	sp, #28
 8011562:	4617      	mov	r7, r2
 8011564:	9303      	str	r3, [sp, #12]
 8011566:	688b      	ldr	r3, [r1, #8]
 8011568:	1e5a      	subs	r2, r3, #1
 801156a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801156e:	bf83      	ittte	hi
 8011570:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011574:	195b      	addhi	r3, r3, r5
 8011576:	9302      	strhi	r3, [sp, #8]
 8011578:	2300      	movls	r3, #0
 801157a:	bf86      	itte	hi
 801157c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011580:	608b      	strhi	r3, [r1, #8]
 8011582:	9302      	strls	r3, [sp, #8]
 8011584:	680b      	ldr	r3, [r1, #0]
 8011586:	468b      	mov	fp, r1
 8011588:	2500      	movs	r5, #0
 801158a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801158e:	f84b 3b1c 	str.w	r3, [fp], #28
 8011592:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011596:	4680      	mov	r8, r0
 8011598:	460c      	mov	r4, r1
 801159a:	465e      	mov	r6, fp
 801159c:	46aa      	mov	sl, r5
 801159e:	46a9      	mov	r9, r5
 80115a0:	9501      	str	r5, [sp, #4]
 80115a2:	68a2      	ldr	r2, [r4, #8]
 80115a4:	b152      	cbz	r2, 80115bc <_scanf_float+0x60>
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	2b4e      	cmp	r3, #78	; 0x4e
 80115ac:	d864      	bhi.n	8011678 <_scanf_float+0x11c>
 80115ae:	2b40      	cmp	r3, #64	; 0x40
 80115b0:	d83c      	bhi.n	801162c <_scanf_float+0xd0>
 80115b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80115b6:	b2c8      	uxtb	r0, r1
 80115b8:	280e      	cmp	r0, #14
 80115ba:	d93a      	bls.n	8011632 <_scanf_float+0xd6>
 80115bc:	f1b9 0f00 	cmp.w	r9, #0
 80115c0:	d003      	beq.n	80115ca <_scanf_float+0x6e>
 80115c2:	6823      	ldr	r3, [r4, #0]
 80115c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80115c8:	6023      	str	r3, [r4, #0]
 80115ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80115ce:	f1ba 0f01 	cmp.w	sl, #1
 80115d2:	f200 8113 	bhi.w	80117fc <_scanf_float+0x2a0>
 80115d6:	455e      	cmp	r6, fp
 80115d8:	f200 8105 	bhi.w	80117e6 <_scanf_float+0x28a>
 80115dc:	2501      	movs	r5, #1
 80115de:	4628      	mov	r0, r5
 80115e0:	b007      	add	sp, #28
 80115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80115ea:	2a0d      	cmp	r2, #13
 80115ec:	d8e6      	bhi.n	80115bc <_scanf_float+0x60>
 80115ee:	a101      	add	r1, pc, #4	; (adr r1, 80115f4 <_scanf_float+0x98>)
 80115f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80115f4:	08011733 	.word	0x08011733
 80115f8:	080115bd 	.word	0x080115bd
 80115fc:	080115bd 	.word	0x080115bd
 8011600:	080115bd 	.word	0x080115bd
 8011604:	08011793 	.word	0x08011793
 8011608:	0801176b 	.word	0x0801176b
 801160c:	080115bd 	.word	0x080115bd
 8011610:	080115bd 	.word	0x080115bd
 8011614:	08011741 	.word	0x08011741
 8011618:	080115bd 	.word	0x080115bd
 801161c:	080115bd 	.word	0x080115bd
 8011620:	080115bd 	.word	0x080115bd
 8011624:	080115bd 	.word	0x080115bd
 8011628:	080116f9 	.word	0x080116f9
 801162c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011630:	e7db      	b.n	80115ea <_scanf_float+0x8e>
 8011632:	290e      	cmp	r1, #14
 8011634:	d8c2      	bhi.n	80115bc <_scanf_float+0x60>
 8011636:	a001      	add	r0, pc, #4	; (adr r0, 801163c <_scanf_float+0xe0>)
 8011638:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801163c:	080116eb 	.word	0x080116eb
 8011640:	080115bd 	.word	0x080115bd
 8011644:	080116eb 	.word	0x080116eb
 8011648:	0801177f 	.word	0x0801177f
 801164c:	080115bd 	.word	0x080115bd
 8011650:	08011699 	.word	0x08011699
 8011654:	080116d5 	.word	0x080116d5
 8011658:	080116d5 	.word	0x080116d5
 801165c:	080116d5 	.word	0x080116d5
 8011660:	080116d5 	.word	0x080116d5
 8011664:	080116d5 	.word	0x080116d5
 8011668:	080116d5 	.word	0x080116d5
 801166c:	080116d5 	.word	0x080116d5
 8011670:	080116d5 	.word	0x080116d5
 8011674:	080116d5 	.word	0x080116d5
 8011678:	2b6e      	cmp	r3, #110	; 0x6e
 801167a:	d809      	bhi.n	8011690 <_scanf_float+0x134>
 801167c:	2b60      	cmp	r3, #96	; 0x60
 801167e:	d8b2      	bhi.n	80115e6 <_scanf_float+0x8a>
 8011680:	2b54      	cmp	r3, #84	; 0x54
 8011682:	d077      	beq.n	8011774 <_scanf_float+0x218>
 8011684:	2b59      	cmp	r3, #89	; 0x59
 8011686:	d199      	bne.n	80115bc <_scanf_float+0x60>
 8011688:	2d07      	cmp	r5, #7
 801168a:	d197      	bne.n	80115bc <_scanf_float+0x60>
 801168c:	2508      	movs	r5, #8
 801168e:	e029      	b.n	80116e4 <_scanf_float+0x188>
 8011690:	2b74      	cmp	r3, #116	; 0x74
 8011692:	d06f      	beq.n	8011774 <_scanf_float+0x218>
 8011694:	2b79      	cmp	r3, #121	; 0x79
 8011696:	e7f6      	b.n	8011686 <_scanf_float+0x12a>
 8011698:	6821      	ldr	r1, [r4, #0]
 801169a:	05c8      	lsls	r0, r1, #23
 801169c:	d51a      	bpl.n	80116d4 <_scanf_float+0x178>
 801169e:	9b02      	ldr	r3, [sp, #8]
 80116a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80116a4:	6021      	str	r1, [r4, #0]
 80116a6:	f109 0901 	add.w	r9, r9, #1
 80116aa:	b11b      	cbz	r3, 80116b4 <_scanf_float+0x158>
 80116ac:	3b01      	subs	r3, #1
 80116ae:	3201      	adds	r2, #1
 80116b0:	9302      	str	r3, [sp, #8]
 80116b2:	60a2      	str	r2, [r4, #8]
 80116b4:	68a3      	ldr	r3, [r4, #8]
 80116b6:	3b01      	subs	r3, #1
 80116b8:	60a3      	str	r3, [r4, #8]
 80116ba:	6923      	ldr	r3, [r4, #16]
 80116bc:	3301      	adds	r3, #1
 80116be:	6123      	str	r3, [r4, #16]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	3b01      	subs	r3, #1
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	607b      	str	r3, [r7, #4]
 80116c8:	f340 8084 	ble.w	80117d4 <_scanf_float+0x278>
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	3301      	adds	r3, #1
 80116d0:	603b      	str	r3, [r7, #0]
 80116d2:	e766      	b.n	80115a2 <_scanf_float+0x46>
 80116d4:	eb1a 0f05 	cmn.w	sl, r5
 80116d8:	f47f af70 	bne.w	80115bc <_scanf_float+0x60>
 80116dc:	6822      	ldr	r2, [r4, #0]
 80116de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80116e2:	6022      	str	r2, [r4, #0]
 80116e4:	f806 3b01 	strb.w	r3, [r6], #1
 80116e8:	e7e4      	b.n	80116b4 <_scanf_float+0x158>
 80116ea:	6822      	ldr	r2, [r4, #0]
 80116ec:	0610      	lsls	r0, r2, #24
 80116ee:	f57f af65 	bpl.w	80115bc <_scanf_float+0x60>
 80116f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80116f6:	e7f4      	b.n	80116e2 <_scanf_float+0x186>
 80116f8:	f1ba 0f00 	cmp.w	sl, #0
 80116fc:	d10e      	bne.n	801171c <_scanf_float+0x1c0>
 80116fe:	f1b9 0f00 	cmp.w	r9, #0
 8011702:	d10e      	bne.n	8011722 <_scanf_float+0x1c6>
 8011704:	6822      	ldr	r2, [r4, #0]
 8011706:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801170a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801170e:	d108      	bne.n	8011722 <_scanf_float+0x1c6>
 8011710:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011714:	6022      	str	r2, [r4, #0]
 8011716:	f04f 0a01 	mov.w	sl, #1
 801171a:	e7e3      	b.n	80116e4 <_scanf_float+0x188>
 801171c:	f1ba 0f02 	cmp.w	sl, #2
 8011720:	d055      	beq.n	80117ce <_scanf_float+0x272>
 8011722:	2d01      	cmp	r5, #1
 8011724:	d002      	beq.n	801172c <_scanf_float+0x1d0>
 8011726:	2d04      	cmp	r5, #4
 8011728:	f47f af48 	bne.w	80115bc <_scanf_float+0x60>
 801172c:	3501      	adds	r5, #1
 801172e:	b2ed      	uxtb	r5, r5
 8011730:	e7d8      	b.n	80116e4 <_scanf_float+0x188>
 8011732:	f1ba 0f01 	cmp.w	sl, #1
 8011736:	f47f af41 	bne.w	80115bc <_scanf_float+0x60>
 801173a:	f04f 0a02 	mov.w	sl, #2
 801173e:	e7d1      	b.n	80116e4 <_scanf_float+0x188>
 8011740:	b97d      	cbnz	r5, 8011762 <_scanf_float+0x206>
 8011742:	f1b9 0f00 	cmp.w	r9, #0
 8011746:	f47f af3c 	bne.w	80115c2 <_scanf_float+0x66>
 801174a:	6822      	ldr	r2, [r4, #0]
 801174c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011750:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011754:	f47f af39 	bne.w	80115ca <_scanf_float+0x6e>
 8011758:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801175c:	6022      	str	r2, [r4, #0]
 801175e:	2501      	movs	r5, #1
 8011760:	e7c0      	b.n	80116e4 <_scanf_float+0x188>
 8011762:	2d03      	cmp	r5, #3
 8011764:	d0e2      	beq.n	801172c <_scanf_float+0x1d0>
 8011766:	2d05      	cmp	r5, #5
 8011768:	e7de      	b.n	8011728 <_scanf_float+0x1cc>
 801176a:	2d02      	cmp	r5, #2
 801176c:	f47f af26 	bne.w	80115bc <_scanf_float+0x60>
 8011770:	2503      	movs	r5, #3
 8011772:	e7b7      	b.n	80116e4 <_scanf_float+0x188>
 8011774:	2d06      	cmp	r5, #6
 8011776:	f47f af21 	bne.w	80115bc <_scanf_float+0x60>
 801177a:	2507      	movs	r5, #7
 801177c:	e7b2      	b.n	80116e4 <_scanf_float+0x188>
 801177e:	6822      	ldr	r2, [r4, #0]
 8011780:	0591      	lsls	r1, r2, #22
 8011782:	f57f af1b 	bpl.w	80115bc <_scanf_float+0x60>
 8011786:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801178a:	6022      	str	r2, [r4, #0]
 801178c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011790:	e7a8      	b.n	80116e4 <_scanf_float+0x188>
 8011792:	6822      	ldr	r2, [r4, #0]
 8011794:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011798:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801179c:	d006      	beq.n	80117ac <_scanf_float+0x250>
 801179e:	0550      	lsls	r0, r2, #21
 80117a0:	f57f af0c 	bpl.w	80115bc <_scanf_float+0x60>
 80117a4:	f1b9 0f00 	cmp.w	r9, #0
 80117a8:	f43f af0f 	beq.w	80115ca <_scanf_float+0x6e>
 80117ac:	0591      	lsls	r1, r2, #22
 80117ae:	bf58      	it	pl
 80117b0:	9901      	ldrpl	r1, [sp, #4]
 80117b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80117b6:	bf58      	it	pl
 80117b8:	eba9 0101 	subpl.w	r1, r9, r1
 80117bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80117c0:	bf58      	it	pl
 80117c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80117c6:	6022      	str	r2, [r4, #0]
 80117c8:	f04f 0900 	mov.w	r9, #0
 80117cc:	e78a      	b.n	80116e4 <_scanf_float+0x188>
 80117ce:	f04f 0a03 	mov.w	sl, #3
 80117d2:	e787      	b.n	80116e4 <_scanf_float+0x188>
 80117d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80117d8:	4639      	mov	r1, r7
 80117da:	4640      	mov	r0, r8
 80117dc:	4798      	blx	r3
 80117de:	2800      	cmp	r0, #0
 80117e0:	f43f aedf 	beq.w	80115a2 <_scanf_float+0x46>
 80117e4:	e6ea      	b.n	80115bc <_scanf_float+0x60>
 80117e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80117ee:	463a      	mov	r2, r7
 80117f0:	4640      	mov	r0, r8
 80117f2:	4798      	blx	r3
 80117f4:	6923      	ldr	r3, [r4, #16]
 80117f6:	3b01      	subs	r3, #1
 80117f8:	6123      	str	r3, [r4, #16]
 80117fa:	e6ec      	b.n	80115d6 <_scanf_float+0x7a>
 80117fc:	1e6b      	subs	r3, r5, #1
 80117fe:	2b06      	cmp	r3, #6
 8011800:	d825      	bhi.n	801184e <_scanf_float+0x2f2>
 8011802:	2d02      	cmp	r5, #2
 8011804:	d836      	bhi.n	8011874 <_scanf_float+0x318>
 8011806:	455e      	cmp	r6, fp
 8011808:	f67f aee8 	bls.w	80115dc <_scanf_float+0x80>
 801180c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011810:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011814:	463a      	mov	r2, r7
 8011816:	4640      	mov	r0, r8
 8011818:	4798      	blx	r3
 801181a:	6923      	ldr	r3, [r4, #16]
 801181c:	3b01      	subs	r3, #1
 801181e:	6123      	str	r3, [r4, #16]
 8011820:	e7f1      	b.n	8011806 <_scanf_float+0x2aa>
 8011822:	9802      	ldr	r0, [sp, #8]
 8011824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011828:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801182c:	9002      	str	r0, [sp, #8]
 801182e:	463a      	mov	r2, r7
 8011830:	4640      	mov	r0, r8
 8011832:	4798      	blx	r3
 8011834:	6923      	ldr	r3, [r4, #16]
 8011836:	3b01      	subs	r3, #1
 8011838:	6123      	str	r3, [r4, #16]
 801183a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801183e:	fa5f fa8a 	uxtb.w	sl, sl
 8011842:	f1ba 0f02 	cmp.w	sl, #2
 8011846:	d1ec      	bne.n	8011822 <_scanf_float+0x2c6>
 8011848:	3d03      	subs	r5, #3
 801184a:	b2ed      	uxtb	r5, r5
 801184c:	1b76      	subs	r6, r6, r5
 801184e:	6823      	ldr	r3, [r4, #0]
 8011850:	05da      	lsls	r2, r3, #23
 8011852:	d52f      	bpl.n	80118b4 <_scanf_float+0x358>
 8011854:	055b      	lsls	r3, r3, #21
 8011856:	d510      	bpl.n	801187a <_scanf_float+0x31e>
 8011858:	455e      	cmp	r6, fp
 801185a:	f67f aebf 	bls.w	80115dc <_scanf_float+0x80>
 801185e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011862:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011866:	463a      	mov	r2, r7
 8011868:	4640      	mov	r0, r8
 801186a:	4798      	blx	r3
 801186c:	6923      	ldr	r3, [r4, #16]
 801186e:	3b01      	subs	r3, #1
 8011870:	6123      	str	r3, [r4, #16]
 8011872:	e7f1      	b.n	8011858 <_scanf_float+0x2fc>
 8011874:	46aa      	mov	sl, r5
 8011876:	9602      	str	r6, [sp, #8]
 8011878:	e7df      	b.n	801183a <_scanf_float+0x2de>
 801187a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801187e:	6923      	ldr	r3, [r4, #16]
 8011880:	2965      	cmp	r1, #101	; 0x65
 8011882:	f103 33ff 	add.w	r3, r3, #4294967295
 8011886:	f106 35ff 	add.w	r5, r6, #4294967295
 801188a:	6123      	str	r3, [r4, #16]
 801188c:	d00c      	beq.n	80118a8 <_scanf_float+0x34c>
 801188e:	2945      	cmp	r1, #69	; 0x45
 8011890:	d00a      	beq.n	80118a8 <_scanf_float+0x34c>
 8011892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011896:	463a      	mov	r2, r7
 8011898:	4640      	mov	r0, r8
 801189a:	4798      	blx	r3
 801189c:	6923      	ldr	r3, [r4, #16]
 801189e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80118a2:	3b01      	subs	r3, #1
 80118a4:	1eb5      	subs	r5, r6, #2
 80118a6:	6123      	str	r3, [r4, #16]
 80118a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118ac:	463a      	mov	r2, r7
 80118ae:	4640      	mov	r0, r8
 80118b0:	4798      	blx	r3
 80118b2:	462e      	mov	r6, r5
 80118b4:	6825      	ldr	r5, [r4, #0]
 80118b6:	f015 0510 	ands.w	r5, r5, #16
 80118ba:	d158      	bne.n	801196e <_scanf_float+0x412>
 80118bc:	7035      	strb	r5, [r6, #0]
 80118be:	6823      	ldr	r3, [r4, #0]
 80118c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80118c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80118c8:	d11c      	bne.n	8011904 <_scanf_float+0x3a8>
 80118ca:	9b01      	ldr	r3, [sp, #4]
 80118cc:	454b      	cmp	r3, r9
 80118ce:	eba3 0209 	sub.w	r2, r3, r9
 80118d2:	d124      	bne.n	801191e <_scanf_float+0x3c2>
 80118d4:	2200      	movs	r2, #0
 80118d6:	4659      	mov	r1, fp
 80118d8:	4640      	mov	r0, r8
 80118da:	f002 fc91 	bl	8014200 <_strtod_r>
 80118de:	9b03      	ldr	r3, [sp, #12]
 80118e0:	6821      	ldr	r1, [r4, #0]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f011 0f02 	tst.w	r1, #2
 80118e8:	ec57 6b10 	vmov	r6, r7, d0
 80118ec:	f103 0204 	add.w	r2, r3, #4
 80118f0:	d020      	beq.n	8011934 <_scanf_float+0x3d8>
 80118f2:	9903      	ldr	r1, [sp, #12]
 80118f4:	600a      	str	r2, [r1, #0]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	e9c3 6700 	strd	r6, r7, [r3]
 80118fc:	68e3      	ldr	r3, [r4, #12]
 80118fe:	3301      	adds	r3, #1
 8011900:	60e3      	str	r3, [r4, #12]
 8011902:	e66c      	b.n	80115de <_scanf_float+0x82>
 8011904:	9b04      	ldr	r3, [sp, #16]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d0e4      	beq.n	80118d4 <_scanf_float+0x378>
 801190a:	9905      	ldr	r1, [sp, #20]
 801190c:	230a      	movs	r3, #10
 801190e:	462a      	mov	r2, r5
 8011910:	3101      	adds	r1, #1
 8011912:	4640      	mov	r0, r8
 8011914:	f002 fcfc 	bl	8014310 <_strtol_r>
 8011918:	9b04      	ldr	r3, [sp, #16]
 801191a:	9e05      	ldr	r6, [sp, #20]
 801191c:	1ac2      	subs	r2, r0, r3
 801191e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011922:	429e      	cmp	r6, r3
 8011924:	bf28      	it	cs
 8011926:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801192a:	4912      	ldr	r1, [pc, #72]	; (8011974 <_scanf_float+0x418>)
 801192c:	4630      	mov	r0, r6
 801192e:	f000 f909 	bl	8011b44 <siprintf>
 8011932:	e7cf      	b.n	80118d4 <_scanf_float+0x378>
 8011934:	f011 0f04 	tst.w	r1, #4
 8011938:	9903      	ldr	r1, [sp, #12]
 801193a:	600a      	str	r2, [r1, #0]
 801193c:	d1db      	bne.n	80118f6 <_scanf_float+0x39a>
 801193e:	f8d3 8000 	ldr.w	r8, [r3]
 8011942:	ee10 2a10 	vmov	r2, s0
 8011946:	ee10 0a10 	vmov	r0, s0
 801194a:	463b      	mov	r3, r7
 801194c:	4639      	mov	r1, r7
 801194e:	f7ef f8ed 	bl	8000b2c <__aeabi_dcmpun>
 8011952:	b128      	cbz	r0, 8011960 <_scanf_float+0x404>
 8011954:	4808      	ldr	r0, [pc, #32]	; (8011978 <_scanf_float+0x41c>)
 8011956:	f000 fa19 	bl	8011d8c <nanf>
 801195a:	ed88 0a00 	vstr	s0, [r8]
 801195e:	e7cd      	b.n	80118fc <_scanf_float+0x3a0>
 8011960:	4630      	mov	r0, r6
 8011962:	4639      	mov	r1, r7
 8011964:	f7ef f940 	bl	8000be8 <__aeabi_d2f>
 8011968:	f8c8 0000 	str.w	r0, [r8]
 801196c:	e7c6      	b.n	80118fc <_scanf_float+0x3a0>
 801196e:	2500      	movs	r5, #0
 8011970:	e635      	b.n	80115de <_scanf_float+0x82>
 8011972:	bf00      	nop
 8011974:	0801576e 	.word	0x0801576e
 8011978:	08015b05 	.word	0x08015b05

0801197c <std>:
 801197c:	2300      	movs	r3, #0
 801197e:	b510      	push	{r4, lr}
 8011980:	4604      	mov	r4, r0
 8011982:	e9c0 3300 	strd	r3, r3, [r0]
 8011986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801198a:	6083      	str	r3, [r0, #8]
 801198c:	8181      	strh	r1, [r0, #12]
 801198e:	6643      	str	r3, [r0, #100]	; 0x64
 8011990:	81c2      	strh	r2, [r0, #14]
 8011992:	6183      	str	r3, [r0, #24]
 8011994:	4619      	mov	r1, r3
 8011996:	2208      	movs	r2, #8
 8011998:	305c      	adds	r0, #92	; 0x5c
 801199a:	f000 f950 	bl	8011c3e <memset>
 801199e:	4b05      	ldr	r3, [pc, #20]	; (80119b4 <std+0x38>)
 80119a0:	6263      	str	r3, [r4, #36]	; 0x24
 80119a2:	4b05      	ldr	r3, [pc, #20]	; (80119b8 <std+0x3c>)
 80119a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80119a6:	4b05      	ldr	r3, [pc, #20]	; (80119bc <std+0x40>)
 80119a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80119aa:	4b05      	ldr	r3, [pc, #20]	; (80119c0 <std+0x44>)
 80119ac:	6224      	str	r4, [r4, #32]
 80119ae:	6323      	str	r3, [r4, #48]	; 0x30
 80119b0:	bd10      	pop	{r4, pc}
 80119b2:	bf00      	nop
 80119b4:	08011b85 	.word	0x08011b85
 80119b8:	08011ba7 	.word	0x08011ba7
 80119bc:	08011bdf 	.word	0x08011bdf
 80119c0:	08011c03 	.word	0x08011c03

080119c4 <stdio_exit_handler>:
 80119c4:	4a02      	ldr	r2, [pc, #8]	; (80119d0 <stdio_exit_handler+0xc>)
 80119c6:	4903      	ldr	r1, [pc, #12]	; (80119d4 <stdio_exit_handler+0x10>)
 80119c8:	4803      	ldr	r0, [pc, #12]	; (80119d8 <stdio_exit_handler+0x14>)
 80119ca:	f000 b869 	b.w	8011aa0 <_fwalk_sglue>
 80119ce:	bf00      	nop
 80119d0:	2000010c 	.word	0x2000010c
 80119d4:	080146d1 	.word	0x080146d1
 80119d8:	20000118 	.word	0x20000118

080119dc <cleanup_stdio>:
 80119dc:	6841      	ldr	r1, [r0, #4]
 80119de:	4b0c      	ldr	r3, [pc, #48]	; (8011a10 <cleanup_stdio+0x34>)
 80119e0:	4299      	cmp	r1, r3
 80119e2:	b510      	push	{r4, lr}
 80119e4:	4604      	mov	r4, r0
 80119e6:	d001      	beq.n	80119ec <cleanup_stdio+0x10>
 80119e8:	f002 fe72 	bl	80146d0 <_fflush_r>
 80119ec:	68a1      	ldr	r1, [r4, #8]
 80119ee:	4b09      	ldr	r3, [pc, #36]	; (8011a14 <cleanup_stdio+0x38>)
 80119f0:	4299      	cmp	r1, r3
 80119f2:	d002      	beq.n	80119fa <cleanup_stdio+0x1e>
 80119f4:	4620      	mov	r0, r4
 80119f6:	f002 fe6b 	bl	80146d0 <_fflush_r>
 80119fa:	68e1      	ldr	r1, [r4, #12]
 80119fc:	4b06      	ldr	r3, [pc, #24]	; (8011a18 <cleanup_stdio+0x3c>)
 80119fe:	4299      	cmp	r1, r3
 8011a00:	d004      	beq.n	8011a0c <cleanup_stdio+0x30>
 8011a02:	4620      	mov	r0, r4
 8011a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a08:	f002 be62 	b.w	80146d0 <_fflush_r>
 8011a0c:	bd10      	pop	{r4, pc}
 8011a0e:	bf00      	nop
 8011a10:	2000e2e0 	.word	0x2000e2e0
 8011a14:	2000e348 	.word	0x2000e348
 8011a18:	2000e3b0 	.word	0x2000e3b0

08011a1c <global_stdio_init.part.0>:
 8011a1c:	b510      	push	{r4, lr}
 8011a1e:	4b0b      	ldr	r3, [pc, #44]	; (8011a4c <global_stdio_init.part.0+0x30>)
 8011a20:	4c0b      	ldr	r4, [pc, #44]	; (8011a50 <global_stdio_init.part.0+0x34>)
 8011a22:	4a0c      	ldr	r2, [pc, #48]	; (8011a54 <global_stdio_init.part.0+0x38>)
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	4620      	mov	r0, r4
 8011a28:	2200      	movs	r2, #0
 8011a2a:	2104      	movs	r1, #4
 8011a2c:	f7ff ffa6 	bl	801197c <std>
 8011a30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011a34:	2201      	movs	r2, #1
 8011a36:	2109      	movs	r1, #9
 8011a38:	f7ff ffa0 	bl	801197c <std>
 8011a3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011a40:	2202      	movs	r2, #2
 8011a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a46:	2112      	movs	r1, #18
 8011a48:	f7ff bf98 	b.w	801197c <std>
 8011a4c:	2000e418 	.word	0x2000e418
 8011a50:	2000e2e0 	.word	0x2000e2e0
 8011a54:	080119c5 	.word	0x080119c5

08011a58 <__sfp_lock_acquire>:
 8011a58:	4801      	ldr	r0, [pc, #4]	; (8011a60 <__sfp_lock_acquire+0x8>)
 8011a5a:	f000 b987 	b.w	8011d6c <__retarget_lock_acquire_recursive>
 8011a5e:	bf00      	nop
 8011a60:	2000e421 	.word	0x2000e421

08011a64 <__sfp_lock_release>:
 8011a64:	4801      	ldr	r0, [pc, #4]	; (8011a6c <__sfp_lock_release+0x8>)
 8011a66:	f000 b982 	b.w	8011d6e <__retarget_lock_release_recursive>
 8011a6a:	bf00      	nop
 8011a6c:	2000e421 	.word	0x2000e421

08011a70 <__sinit>:
 8011a70:	b510      	push	{r4, lr}
 8011a72:	4604      	mov	r4, r0
 8011a74:	f7ff fff0 	bl	8011a58 <__sfp_lock_acquire>
 8011a78:	6a23      	ldr	r3, [r4, #32]
 8011a7a:	b11b      	cbz	r3, 8011a84 <__sinit+0x14>
 8011a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a80:	f7ff bff0 	b.w	8011a64 <__sfp_lock_release>
 8011a84:	4b04      	ldr	r3, [pc, #16]	; (8011a98 <__sinit+0x28>)
 8011a86:	6223      	str	r3, [r4, #32]
 8011a88:	4b04      	ldr	r3, [pc, #16]	; (8011a9c <__sinit+0x2c>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1f5      	bne.n	8011a7c <__sinit+0xc>
 8011a90:	f7ff ffc4 	bl	8011a1c <global_stdio_init.part.0>
 8011a94:	e7f2      	b.n	8011a7c <__sinit+0xc>
 8011a96:	bf00      	nop
 8011a98:	080119dd 	.word	0x080119dd
 8011a9c:	2000e418 	.word	0x2000e418

08011aa0 <_fwalk_sglue>:
 8011aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011aa4:	4607      	mov	r7, r0
 8011aa6:	4688      	mov	r8, r1
 8011aa8:	4614      	mov	r4, r2
 8011aaa:	2600      	movs	r6, #0
 8011aac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ab0:	f1b9 0901 	subs.w	r9, r9, #1
 8011ab4:	d505      	bpl.n	8011ac2 <_fwalk_sglue+0x22>
 8011ab6:	6824      	ldr	r4, [r4, #0]
 8011ab8:	2c00      	cmp	r4, #0
 8011aba:	d1f7      	bne.n	8011aac <_fwalk_sglue+0xc>
 8011abc:	4630      	mov	r0, r6
 8011abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ac2:	89ab      	ldrh	r3, [r5, #12]
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d907      	bls.n	8011ad8 <_fwalk_sglue+0x38>
 8011ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011acc:	3301      	adds	r3, #1
 8011ace:	d003      	beq.n	8011ad8 <_fwalk_sglue+0x38>
 8011ad0:	4629      	mov	r1, r5
 8011ad2:	4638      	mov	r0, r7
 8011ad4:	47c0      	blx	r8
 8011ad6:	4306      	orrs	r6, r0
 8011ad8:	3568      	adds	r5, #104	; 0x68
 8011ada:	e7e9      	b.n	8011ab0 <_fwalk_sglue+0x10>

08011adc <sniprintf>:
 8011adc:	b40c      	push	{r2, r3}
 8011ade:	b530      	push	{r4, r5, lr}
 8011ae0:	4b17      	ldr	r3, [pc, #92]	; (8011b40 <sniprintf+0x64>)
 8011ae2:	1e0c      	subs	r4, r1, #0
 8011ae4:	681d      	ldr	r5, [r3, #0]
 8011ae6:	b09d      	sub	sp, #116	; 0x74
 8011ae8:	da08      	bge.n	8011afc <sniprintf+0x20>
 8011aea:	238b      	movs	r3, #139	; 0x8b
 8011aec:	602b      	str	r3, [r5, #0]
 8011aee:	f04f 30ff 	mov.w	r0, #4294967295
 8011af2:	b01d      	add	sp, #116	; 0x74
 8011af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011af8:	b002      	add	sp, #8
 8011afa:	4770      	bx	lr
 8011afc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011b00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011b04:	bf14      	ite	ne
 8011b06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011b0a:	4623      	moveq	r3, r4
 8011b0c:	9304      	str	r3, [sp, #16]
 8011b0e:	9307      	str	r3, [sp, #28]
 8011b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b14:	9002      	str	r0, [sp, #8]
 8011b16:	9006      	str	r0, [sp, #24]
 8011b18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011b1e:	ab21      	add	r3, sp, #132	; 0x84
 8011b20:	a902      	add	r1, sp, #8
 8011b22:	4628      	mov	r0, r5
 8011b24:	9301      	str	r3, [sp, #4]
 8011b26:	f002 fc4f 	bl	80143c8 <_svfiprintf_r>
 8011b2a:	1c43      	adds	r3, r0, #1
 8011b2c:	bfbc      	itt	lt
 8011b2e:	238b      	movlt	r3, #139	; 0x8b
 8011b30:	602b      	strlt	r3, [r5, #0]
 8011b32:	2c00      	cmp	r4, #0
 8011b34:	d0dd      	beq.n	8011af2 <sniprintf+0x16>
 8011b36:	9b02      	ldr	r3, [sp, #8]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	701a      	strb	r2, [r3, #0]
 8011b3c:	e7d9      	b.n	8011af2 <sniprintf+0x16>
 8011b3e:	bf00      	nop
 8011b40:	20000164 	.word	0x20000164

08011b44 <siprintf>:
 8011b44:	b40e      	push	{r1, r2, r3}
 8011b46:	b500      	push	{lr}
 8011b48:	b09c      	sub	sp, #112	; 0x70
 8011b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8011b4c:	9002      	str	r0, [sp, #8]
 8011b4e:	9006      	str	r0, [sp, #24]
 8011b50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b54:	4809      	ldr	r0, [pc, #36]	; (8011b7c <siprintf+0x38>)
 8011b56:	9107      	str	r1, [sp, #28]
 8011b58:	9104      	str	r1, [sp, #16]
 8011b5a:	4909      	ldr	r1, [pc, #36]	; (8011b80 <siprintf+0x3c>)
 8011b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b60:	9105      	str	r1, [sp, #20]
 8011b62:	6800      	ldr	r0, [r0, #0]
 8011b64:	9301      	str	r3, [sp, #4]
 8011b66:	a902      	add	r1, sp, #8
 8011b68:	f002 fc2e 	bl	80143c8 <_svfiprintf_r>
 8011b6c:	9b02      	ldr	r3, [sp, #8]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	701a      	strb	r2, [r3, #0]
 8011b72:	b01c      	add	sp, #112	; 0x70
 8011b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b78:	b003      	add	sp, #12
 8011b7a:	4770      	bx	lr
 8011b7c:	20000164 	.word	0x20000164
 8011b80:	ffff0208 	.word	0xffff0208

08011b84 <__sread>:
 8011b84:	b510      	push	{r4, lr}
 8011b86:	460c      	mov	r4, r1
 8011b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b8c:	f000 f8a0 	bl	8011cd0 <_read_r>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	bfab      	itete	ge
 8011b94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b96:	89a3      	ldrhlt	r3, [r4, #12]
 8011b98:	181b      	addge	r3, r3, r0
 8011b9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b9e:	bfac      	ite	ge
 8011ba0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ba2:	81a3      	strhlt	r3, [r4, #12]
 8011ba4:	bd10      	pop	{r4, pc}

08011ba6 <__swrite>:
 8011ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011baa:	461f      	mov	r7, r3
 8011bac:	898b      	ldrh	r3, [r1, #12]
 8011bae:	05db      	lsls	r3, r3, #23
 8011bb0:	4605      	mov	r5, r0
 8011bb2:	460c      	mov	r4, r1
 8011bb4:	4616      	mov	r6, r2
 8011bb6:	d505      	bpl.n	8011bc4 <__swrite+0x1e>
 8011bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bbc:	2302      	movs	r3, #2
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	f000 f874 	bl	8011cac <_lseek_r>
 8011bc4:	89a3      	ldrh	r3, [r4, #12]
 8011bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bce:	81a3      	strh	r3, [r4, #12]
 8011bd0:	4632      	mov	r2, r6
 8011bd2:	463b      	mov	r3, r7
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bda:	f000 b88b 	b.w	8011cf4 <_write_r>

08011bde <__sseek>:
 8011bde:	b510      	push	{r4, lr}
 8011be0:	460c      	mov	r4, r1
 8011be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011be6:	f000 f861 	bl	8011cac <_lseek_r>
 8011bea:	1c43      	adds	r3, r0, #1
 8011bec:	89a3      	ldrh	r3, [r4, #12]
 8011bee:	bf15      	itete	ne
 8011bf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011bf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bfa:	81a3      	strheq	r3, [r4, #12]
 8011bfc:	bf18      	it	ne
 8011bfe:	81a3      	strhne	r3, [r4, #12]
 8011c00:	bd10      	pop	{r4, pc}

08011c02 <__sclose>:
 8011c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c06:	f000 b841 	b.w	8011c8c <_close_r>

08011c0a <memmove>:
 8011c0a:	4288      	cmp	r0, r1
 8011c0c:	b510      	push	{r4, lr}
 8011c0e:	eb01 0402 	add.w	r4, r1, r2
 8011c12:	d902      	bls.n	8011c1a <memmove+0x10>
 8011c14:	4284      	cmp	r4, r0
 8011c16:	4623      	mov	r3, r4
 8011c18:	d807      	bhi.n	8011c2a <memmove+0x20>
 8011c1a:	1e43      	subs	r3, r0, #1
 8011c1c:	42a1      	cmp	r1, r4
 8011c1e:	d008      	beq.n	8011c32 <memmove+0x28>
 8011c20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c28:	e7f8      	b.n	8011c1c <memmove+0x12>
 8011c2a:	4402      	add	r2, r0
 8011c2c:	4601      	mov	r1, r0
 8011c2e:	428a      	cmp	r2, r1
 8011c30:	d100      	bne.n	8011c34 <memmove+0x2a>
 8011c32:	bd10      	pop	{r4, pc}
 8011c34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c3c:	e7f7      	b.n	8011c2e <memmove+0x24>

08011c3e <memset>:
 8011c3e:	4402      	add	r2, r0
 8011c40:	4603      	mov	r3, r0
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d100      	bne.n	8011c48 <memset+0xa>
 8011c46:	4770      	bx	lr
 8011c48:	f803 1b01 	strb.w	r1, [r3], #1
 8011c4c:	e7f9      	b.n	8011c42 <memset+0x4>

08011c4e <strlcpy>:
 8011c4e:	b510      	push	{r4, lr}
 8011c50:	b192      	cbz	r2, 8011c78 <strlcpy+0x2a>
 8011c52:	440a      	add	r2, r1
 8011c54:	460b      	mov	r3, r1
 8011c56:	461c      	mov	r4, r3
 8011c58:	3301      	adds	r3, #1
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d103      	bne.n	8011c66 <strlcpy+0x18>
 8011c5e:	2300      	movs	r3, #0
 8011c60:	7003      	strb	r3, [r0, #0]
 8011c62:	4623      	mov	r3, r4
 8011c64:	e009      	b.n	8011c7a <strlcpy+0x2c>
 8011c66:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8011c6a:	f800 4b01 	strb.w	r4, [r0], #1
 8011c6e:	2c00      	cmp	r4, #0
 8011c70:	d1f1      	bne.n	8011c56 <strlcpy+0x8>
 8011c72:	1a59      	subs	r1, r3, r1
 8011c74:	1e48      	subs	r0, r1, #1
 8011c76:	bd10      	pop	{r4, pc}
 8011c78:	460b      	mov	r3, r1
 8011c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c7e:	2a00      	cmp	r2, #0
 8011c80:	d1fb      	bne.n	8011c7a <strlcpy+0x2c>
 8011c82:	e7f6      	b.n	8011c72 <strlcpy+0x24>

08011c84 <_localeconv_r>:
 8011c84:	4800      	ldr	r0, [pc, #0]	; (8011c88 <_localeconv_r+0x4>)
 8011c86:	4770      	bx	lr
 8011c88:	20000258 	.word	0x20000258

08011c8c <_close_r>:
 8011c8c:	b538      	push	{r3, r4, r5, lr}
 8011c8e:	4d06      	ldr	r5, [pc, #24]	; (8011ca8 <_close_r+0x1c>)
 8011c90:	2300      	movs	r3, #0
 8011c92:	4604      	mov	r4, r0
 8011c94:	4608      	mov	r0, r1
 8011c96:	602b      	str	r3, [r5, #0]
 8011c98:	f7f0 fa31 	bl	80020fe <_close>
 8011c9c:	1c43      	adds	r3, r0, #1
 8011c9e:	d102      	bne.n	8011ca6 <_close_r+0x1a>
 8011ca0:	682b      	ldr	r3, [r5, #0]
 8011ca2:	b103      	cbz	r3, 8011ca6 <_close_r+0x1a>
 8011ca4:	6023      	str	r3, [r4, #0]
 8011ca6:	bd38      	pop	{r3, r4, r5, pc}
 8011ca8:	2000e41c 	.word	0x2000e41c

08011cac <_lseek_r>:
 8011cac:	b538      	push	{r3, r4, r5, lr}
 8011cae:	4d07      	ldr	r5, [pc, #28]	; (8011ccc <_lseek_r+0x20>)
 8011cb0:	4604      	mov	r4, r0
 8011cb2:	4608      	mov	r0, r1
 8011cb4:	4611      	mov	r1, r2
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	602a      	str	r2, [r5, #0]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	f7f0 fa46 	bl	800214c <_lseek>
 8011cc0:	1c43      	adds	r3, r0, #1
 8011cc2:	d102      	bne.n	8011cca <_lseek_r+0x1e>
 8011cc4:	682b      	ldr	r3, [r5, #0]
 8011cc6:	b103      	cbz	r3, 8011cca <_lseek_r+0x1e>
 8011cc8:	6023      	str	r3, [r4, #0]
 8011cca:	bd38      	pop	{r3, r4, r5, pc}
 8011ccc:	2000e41c 	.word	0x2000e41c

08011cd0 <_read_r>:
 8011cd0:	b538      	push	{r3, r4, r5, lr}
 8011cd2:	4d07      	ldr	r5, [pc, #28]	; (8011cf0 <_read_r+0x20>)
 8011cd4:	4604      	mov	r4, r0
 8011cd6:	4608      	mov	r0, r1
 8011cd8:	4611      	mov	r1, r2
 8011cda:	2200      	movs	r2, #0
 8011cdc:	602a      	str	r2, [r5, #0]
 8011cde:	461a      	mov	r2, r3
 8011ce0:	f7f0 f9d4 	bl	800208c <_read>
 8011ce4:	1c43      	adds	r3, r0, #1
 8011ce6:	d102      	bne.n	8011cee <_read_r+0x1e>
 8011ce8:	682b      	ldr	r3, [r5, #0]
 8011cea:	b103      	cbz	r3, 8011cee <_read_r+0x1e>
 8011cec:	6023      	str	r3, [r4, #0]
 8011cee:	bd38      	pop	{r3, r4, r5, pc}
 8011cf0:	2000e41c 	.word	0x2000e41c

08011cf4 <_write_r>:
 8011cf4:	b538      	push	{r3, r4, r5, lr}
 8011cf6:	4d07      	ldr	r5, [pc, #28]	; (8011d14 <_write_r+0x20>)
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	4608      	mov	r0, r1
 8011cfc:	4611      	mov	r1, r2
 8011cfe:	2200      	movs	r2, #0
 8011d00:	602a      	str	r2, [r5, #0]
 8011d02:	461a      	mov	r2, r3
 8011d04:	f7f0 f9df 	bl	80020c6 <_write>
 8011d08:	1c43      	adds	r3, r0, #1
 8011d0a:	d102      	bne.n	8011d12 <_write_r+0x1e>
 8011d0c:	682b      	ldr	r3, [r5, #0]
 8011d0e:	b103      	cbz	r3, 8011d12 <_write_r+0x1e>
 8011d10:	6023      	str	r3, [r4, #0]
 8011d12:	bd38      	pop	{r3, r4, r5, pc}
 8011d14:	2000e41c 	.word	0x2000e41c

08011d18 <__errno>:
 8011d18:	4b01      	ldr	r3, [pc, #4]	; (8011d20 <__errno+0x8>)
 8011d1a:	6818      	ldr	r0, [r3, #0]
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop
 8011d20:	20000164 	.word	0x20000164

08011d24 <__libc_init_array>:
 8011d24:	b570      	push	{r4, r5, r6, lr}
 8011d26:	4d0d      	ldr	r5, [pc, #52]	; (8011d5c <__libc_init_array+0x38>)
 8011d28:	4c0d      	ldr	r4, [pc, #52]	; (8011d60 <__libc_init_array+0x3c>)
 8011d2a:	1b64      	subs	r4, r4, r5
 8011d2c:	10a4      	asrs	r4, r4, #2
 8011d2e:	2600      	movs	r6, #0
 8011d30:	42a6      	cmp	r6, r4
 8011d32:	d109      	bne.n	8011d48 <__libc_init_array+0x24>
 8011d34:	4d0b      	ldr	r5, [pc, #44]	; (8011d64 <__libc_init_array+0x40>)
 8011d36:	4c0c      	ldr	r4, [pc, #48]	; (8011d68 <__libc_init_array+0x44>)
 8011d38:	f003 fbf2 	bl	8015520 <_init>
 8011d3c:	1b64      	subs	r4, r4, r5
 8011d3e:	10a4      	asrs	r4, r4, #2
 8011d40:	2600      	movs	r6, #0
 8011d42:	42a6      	cmp	r6, r4
 8011d44:	d105      	bne.n	8011d52 <__libc_init_array+0x2e>
 8011d46:	bd70      	pop	{r4, r5, r6, pc}
 8011d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d4c:	4798      	blx	r3
 8011d4e:	3601      	adds	r6, #1
 8011d50:	e7ee      	b.n	8011d30 <__libc_init_array+0xc>
 8011d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d56:	4798      	blx	r3
 8011d58:	3601      	adds	r6, #1
 8011d5a:	e7f2      	b.n	8011d42 <__libc_init_array+0x1e>
 8011d5c:	08015b68 	.word	0x08015b68
 8011d60:	08015b68 	.word	0x08015b68
 8011d64:	08015b68 	.word	0x08015b68
 8011d68:	08015b6c 	.word	0x08015b6c

08011d6c <__retarget_lock_acquire_recursive>:
 8011d6c:	4770      	bx	lr

08011d6e <__retarget_lock_release_recursive>:
 8011d6e:	4770      	bx	lr

08011d70 <memcpy>:
 8011d70:	440a      	add	r2, r1
 8011d72:	4291      	cmp	r1, r2
 8011d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d78:	d100      	bne.n	8011d7c <memcpy+0xc>
 8011d7a:	4770      	bx	lr
 8011d7c:	b510      	push	{r4, lr}
 8011d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d86:	4291      	cmp	r1, r2
 8011d88:	d1f9      	bne.n	8011d7e <memcpy+0xe>
 8011d8a:	bd10      	pop	{r4, pc}

08011d8c <nanf>:
 8011d8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011d94 <nanf+0x8>
 8011d90:	4770      	bx	lr
 8011d92:	bf00      	nop
 8011d94:	7fc00000 	.word	0x7fc00000

08011d98 <quorem>:
 8011d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d9c:	6903      	ldr	r3, [r0, #16]
 8011d9e:	690c      	ldr	r4, [r1, #16]
 8011da0:	42a3      	cmp	r3, r4
 8011da2:	4607      	mov	r7, r0
 8011da4:	db7e      	blt.n	8011ea4 <quorem+0x10c>
 8011da6:	3c01      	subs	r4, #1
 8011da8:	f101 0814 	add.w	r8, r1, #20
 8011dac:	f100 0514 	add.w	r5, r0, #20
 8011db0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011db4:	9301      	str	r3, [sp, #4]
 8011db6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011dba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011dc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011dca:	fbb2 f6f3 	udiv	r6, r2, r3
 8011dce:	d331      	bcc.n	8011e34 <quorem+0x9c>
 8011dd0:	f04f 0e00 	mov.w	lr, #0
 8011dd4:	4640      	mov	r0, r8
 8011dd6:	46ac      	mov	ip, r5
 8011dd8:	46f2      	mov	sl, lr
 8011dda:	f850 2b04 	ldr.w	r2, [r0], #4
 8011dde:	b293      	uxth	r3, r2
 8011de0:	fb06 e303 	mla	r3, r6, r3, lr
 8011de4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011de8:	0c1a      	lsrs	r2, r3, #16
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	ebaa 0303 	sub.w	r3, sl, r3
 8011df0:	f8dc a000 	ldr.w	sl, [ip]
 8011df4:	fa13 f38a 	uxtah	r3, r3, sl
 8011df8:	fb06 220e 	mla	r2, r6, lr, r2
 8011dfc:	9300      	str	r3, [sp, #0]
 8011dfe:	9b00      	ldr	r3, [sp, #0]
 8011e00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011e04:	b292      	uxth	r2, r2
 8011e06:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011e0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011e12:	4581      	cmp	r9, r0
 8011e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e18:	f84c 3b04 	str.w	r3, [ip], #4
 8011e1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011e20:	d2db      	bcs.n	8011dda <quorem+0x42>
 8011e22:	f855 300b 	ldr.w	r3, [r5, fp]
 8011e26:	b92b      	cbnz	r3, 8011e34 <quorem+0x9c>
 8011e28:	9b01      	ldr	r3, [sp, #4]
 8011e2a:	3b04      	subs	r3, #4
 8011e2c:	429d      	cmp	r5, r3
 8011e2e:	461a      	mov	r2, r3
 8011e30:	d32c      	bcc.n	8011e8c <quorem+0xf4>
 8011e32:	613c      	str	r4, [r7, #16]
 8011e34:	4638      	mov	r0, r7
 8011e36:	f001 f9ef 	bl	8013218 <__mcmp>
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	db22      	blt.n	8011e84 <quorem+0xec>
 8011e3e:	3601      	adds	r6, #1
 8011e40:	4629      	mov	r1, r5
 8011e42:	2000      	movs	r0, #0
 8011e44:	f858 2b04 	ldr.w	r2, [r8], #4
 8011e48:	f8d1 c000 	ldr.w	ip, [r1]
 8011e4c:	b293      	uxth	r3, r2
 8011e4e:	1ac3      	subs	r3, r0, r3
 8011e50:	0c12      	lsrs	r2, r2, #16
 8011e52:	fa13 f38c 	uxtah	r3, r3, ip
 8011e56:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011e5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e64:	45c1      	cmp	r9, r8
 8011e66:	f841 3b04 	str.w	r3, [r1], #4
 8011e6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011e6e:	d2e9      	bcs.n	8011e44 <quorem+0xac>
 8011e70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e78:	b922      	cbnz	r2, 8011e84 <quorem+0xec>
 8011e7a:	3b04      	subs	r3, #4
 8011e7c:	429d      	cmp	r5, r3
 8011e7e:	461a      	mov	r2, r3
 8011e80:	d30a      	bcc.n	8011e98 <quorem+0x100>
 8011e82:	613c      	str	r4, [r7, #16]
 8011e84:	4630      	mov	r0, r6
 8011e86:	b003      	add	sp, #12
 8011e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e8c:	6812      	ldr	r2, [r2, #0]
 8011e8e:	3b04      	subs	r3, #4
 8011e90:	2a00      	cmp	r2, #0
 8011e92:	d1ce      	bne.n	8011e32 <quorem+0x9a>
 8011e94:	3c01      	subs	r4, #1
 8011e96:	e7c9      	b.n	8011e2c <quorem+0x94>
 8011e98:	6812      	ldr	r2, [r2, #0]
 8011e9a:	3b04      	subs	r3, #4
 8011e9c:	2a00      	cmp	r2, #0
 8011e9e:	d1f0      	bne.n	8011e82 <quorem+0xea>
 8011ea0:	3c01      	subs	r4, #1
 8011ea2:	e7eb      	b.n	8011e7c <quorem+0xe4>
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	e7ee      	b.n	8011e86 <quorem+0xee>

08011ea8 <_dtoa_r>:
 8011ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eac:	ed2d 8b04 	vpush	{d8-d9}
 8011eb0:	69c5      	ldr	r5, [r0, #28]
 8011eb2:	b093      	sub	sp, #76	; 0x4c
 8011eb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011eb8:	ec57 6b10 	vmov	r6, r7, d0
 8011ebc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011ec0:	9107      	str	r1, [sp, #28]
 8011ec2:	4604      	mov	r4, r0
 8011ec4:	920a      	str	r2, [sp, #40]	; 0x28
 8011ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8011ec8:	b975      	cbnz	r5, 8011ee8 <_dtoa_r+0x40>
 8011eca:	2010      	movs	r0, #16
 8011ecc:	f000 fe2a 	bl	8012b24 <malloc>
 8011ed0:	4602      	mov	r2, r0
 8011ed2:	61e0      	str	r0, [r4, #28]
 8011ed4:	b920      	cbnz	r0, 8011ee0 <_dtoa_r+0x38>
 8011ed6:	4bae      	ldr	r3, [pc, #696]	; (8012190 <_dtoa_r+0x2e8>)
 8011ed8:	21ef      	movs	r1, #239	; 0xef
 8011eda:	48ae      	ldr	r0, [pc, #696]	; (8012194 <_dtoa_r+0x2ec>)
 8011edc:	f002 fc4c 	bl	8014778 <__assert_func>
 8011ee0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011ee4:	6005      	str	r5, [r0, #0]
 8011ee6:	60c5      	str	r5, [r0, #12]
 8011ee8:	69e3      	ldr	r3, [r4, #28]
 8011eea:	6819      	ldr	r1, [r3, #0]
 8011eec:	b151      	cbz	r1, 8011f04 <_dtoa_r+0x5c>
 8011eee:	685a      	ldr	r2, [r3, #4]
 8011ef0:	604a      	str	r2, [r1, #4]
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	4093      	lsls	r3, r2
 8011ef6:	608b      	str	r3, [r1, #8]
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f000 ff07 	bl	8012d0c <_Bfree>
 8011efe:	69e3      	ldr	r3, [r4, #28]
 8011f00:	2200      	movs	r2, #0
 8011f02:	601a      	str	r2, [r3, #0]
 8011f04:	1e3b      	subs	r3, r7, #0
 8011f06:	bfbb      	ittet	lt
 8011f08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011f0c:	9303      	strlt	r3, [sp, #12]
 8011f0e:	2300      	movge	r3, #0
 8011f10:	2201      	movlt	r2, #1
 8011f12:	bfac      	ite	ge
 8011f14:	f8c8 3000 	strge.w	r3, [r8]
 8011f18:	f8c8 2000 	strlt.w	r2, [r8]
 8011f1c:	4b9e      	ldr	r3, [pc, #632]	; (8012198 <_dtoa_r+0x2f0>)
 8011f1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011f22:	ea33 0308 	bics.w	r3, r3, r8
 8011f26:	d11b      	bne.n	8011f60 <_dtoa_r+0xb8>
 8011f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f2e:	6013      	str	r3, [r2, #0]
 8011f30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011f34:	4333      	orrs	r3, r6
 8011f36:	f000 8593 	beq.w	8012a60 <_dtoa_r+0xbb8>
 8011f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f3c:	b963      	cbnz	r3, 8011f58 <_dtoa_r+0xb0>
 8011f3e:	4b97      	ldr	r3, [pc, #604]	; (801219c <_dtoa_r+0x2f4>)
 8011f40:	e027      	b.n	8011f92 <_dtoa_r+0xea>
 8011f42:	4b97      	ldr	r3, [pc, #604]	; (80121a0 <_dtoa_r+0x2f8>)
 8011f44:	9300      	str	r3, [sp, #0]
 8011f46:	3308      	adds	r3, #8
 8011f48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011f4a:	6013      	str	r3, [r2, #0]
 8011f4c:	9800      	ldr	r0, [sp, #0]
 8011f4e:	b013      	add	sp, #76	; 0x4c
 8011f50:	ecbd 8b04 	vpop	{d8-d9}
 8011f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f58:	4b90      	ldr	r3, [pc, #576]	; (801219c <_dtoa_r+0x2f4>)
 8011f5a:	9300      	str	r3, [sp, #0]
 8011f5c:	3303      	adds	r3, #3
 8011f5e:	e7f3      	b.n	8011f48 <_dtoa_r+0xa0>
 8011f60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f64:	2200      	movs	r2, #0
 8011f66:	ec51 0b17 	vmov	r0, r1, d7
 8011f6a:	eeb0 8a47 	vmov.f32	s16, s14
 8011f6e:	eef0 8a67 	vmov.f32	s17, s15
 8011f72:	2300      	movs	r3, #0
 8011f74:	f7ee fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f78:	4681      	mov	r9, r0
 8011f7a:	b160      	cbz	r0, 8011f96 <_dtoa_r+0xee>
 8011f7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f7e:	2301      	movs	r3, #1
 8011f80:	6013      	str	r3, [r2, #0]
 8011f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f000 8568 	beq.w	8012a5a <_dtoa_r+0xbb2>
 8011f8a:	4b86      	ldr	r3, [pc, #536]	; (80121a4 <_dtoa_r+0x2fc>)
 8011f8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011f8e:	6013      	str	r3, [r2, #0]
 8011f90:	3b01      	subs	r3, #1
 8011f92:	9300      	str	r3, [sp, #0]
 8011f94:	e7da      	b.n	8011f4c <_dtoa_r+0xa4>
 8011f96:	aa10      	add	r2, sp, #64	; 0x40
 8011f98:	a911      	add	r1, sp, #68	; 0x44
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8011fa0:	eef0 0a68 	vmov.f32	s1, s17
 8011fa4:	f001 fa4e 	bl	8013444 <__d2b>
 8011fa8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011fac:	4682      	mov	sl, r0
 8011fae:	2d00      	cmp	r5, #0
 8011fb0:	d07f      	beq.n	80120b2 <_dtoa_r+0x20a>
 8011fb2:	ee18 3a90 	vmov	r3, s17
 8011fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011fba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011fbe:	ec51 0b18 	vmov	r0, r1, d8
 8011fc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011fca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011fce:	4619      	mov	r1, r3
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	4b75      	ldr	r3, [pc, #468]	; (80121a8 <_dtoa_r+0x300>)
 8011fd4:	f7ee f958 	bl	8000288 <__aeabi_dsub>
 8011fd8:	a367      	add	r3, pc, #412	; (adr r3, 8012178 <_dtoa_r+0x2d0>)
 8011fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fde:	f7ee fb0b 	bl	80005f8 <__aeabi_dmul>
 8011fe2:	a367      	add	r3, pc, #412	; (adr r3, 8012180 <_dtoa_r+0x2d8>)
 8011fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe8:	f7ee f950 	bl	800028c <__adddf3>
 8011fec:	4606      	mov	r6, r0
 8011fee:	4628      	mov	r0, r5
 8011ff0:	460f      	mov	r7, r1
 8011ff2:	f7ee fa97 	bl	8000524 <__aeabi_i2d>
 8011ff6:	a364      	add	r3, pc, #400	; (adr r3, 8012188 <_dtoa_r+0x2e0>)
 8011ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffc:	f7ee fafc 	bl	80005f8 <__aeabi_dmul>
 8012000:	4602      	mov	r2, r0
 8012002:	460b      	mov	r3, r1
 8012004:	4630      	mov	r0, r6
 8012006:	4639      	mov	r1, r7
 8012008:	f7ee f940 	bl	800028c <__adddf3>
 801200c:	4606      	mov	r6, r0
 801200e:	460f      	mov	r7, r1
 8012010:	f7ee fda2 	bl	8000b58 <__aeabi_d2iz>
 8012014:	2200      	movs	r2, #0
 8012016:	4683      	mov	fp, r0
 8012018:	2300      	movs	r3, #0
 801201a:	4630      	mov	r0, r6
 801201c:	4639      	mov	r1, r7
 801201e:	f7ee fd5d 	bl	8000adc <__aeabi_dcmplt>
 8012022:	b148      	cbz	r0, 8012038 <_dtoa_r+0x190>
 8012024:	4658      	mov	r0, fp
 8012026:	f7ee fa7d 	bl	8000524 <__aeabi_i2d>
 801202a:	4632      	mov	r2, r6
 801202c:	463b      	mov	r3, r7
 801202e:	f7ee fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8012032:	b908      	cbnz	r0, 8012038 <_dtoa_r+0x190>
 8012034:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012038:	f1bb 0f16 	cmp.w	fp, #22
 801203c:	d857      	bhi.n	80120ee <_dtoa_r+0x246>
 801203e:	4b5b      	ldr	r3, [pc, #364]	; (80121ac <_dtoa_r+0x304>)
 8012040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	ec51 0b18 	vmov	r0, r1, d8
 801204c:	f7ee fd46 	bl	8000adc <__aeabi_dcmplt>
 8012050:	2800      	cmp	r0, #0
 8012052:	d04e      	beq.n	80120f2 <_dtoa_r+0x24a>
 8012054:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012058:	2300      	movs	r3, #0
 801205a:	930c      	str	r3, [sp, #48]	; 0x30
 801205c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801205e:	1b5b      	subs	r3, r3, r5
 8012060:	1e5a      	subs	r2, r3, #1
 8012062:	bf45      	ittet	mi
 8012064:	f1c3 0301 	rsbmi	r3, r3, #1
 8012068:	9305      	strmi	r3, [sp, #20]
 801206a:	2300      	movpl	r3, #0
 801206c:	2300      	movmi	r3, #0
 801206e:	9206      	str	r2, [sp, #24]
 8012070:	bf54      	ite	pl
 8012072:	9305      	strpl	r3, [sp, #20]
 8012074:	9306      	strmi	r3, [sp, #24]
 8012076:	f1bb 0f00 	cmp.w	fp, #0
 801207a:	db3c      	blt.n	80120f6 <_dtoa_r+0x24e>
 801207c:	9b06      	ldr	r3, [sp, #24]
 801207e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012082:	445b      	add	r3, fp
 8012084:	9306      	str	r3, [sp, #24]
 8012086:	2300      	movs	r3, #0
 8012088:	9308      	str	r3, [sp, #32]
 801208a:	9b07      	ldr	r3, [sp, #28]
 801208c:	2b09      	cmp	r3, #9
 801208e:	d868      	bhi.n	8012162 <_dtoa_r+0x2ba>
 8012090:	2b05      	cmp	r3, #5
 8012092:	bfc4      	itt	gt
 8012094:	3b04      	subgt	r3, #4
 8012096:	9307      	strgt	r3, [sp, #28]
 8012098:	9b07      	ldr	r3, [sp, #28]
 801209a:	f1a3 0302 	sub.w	r3, r3, #2
 801209e:	bfcc      	ite	gt
 80120a0:	2500      	movgt	r5, #0
 80120a2:	2501      	movle	r5, #1
 80120a4:	2b03      	cmp	r3, #3
 80120a6:	f200 8085 	bhi.w	80121b4 <_dtoa_r+0x30c>
 80120aa:	e8df f003 	tbb	[pc, r3]
 80120ae:	3b2e      	.short	0x3b2e
 80120b0:	5839      	.short	0x5839
 80120b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80120b6:	441d      	add	r5, r3
 80120b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80120bc:	2b20      	cmp	r3, #32
 80120be:	bfc1      	itttt	gt
 80120c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80120c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80120c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80120cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80120d0:	bfd6      	itet	le
 80120d2:	f1c3 0320 	rsble	r3, r3, #32
 80120d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80120da:	fa06 f003 	lslle.w	r0, r6, r3
 80120de:	f7ee fa11 	bl	8000504 <__aeabi_ui2d>
 80120e2:	2201      	movs	r2, #1
 80120e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80120e8:	3d01      	subs	r5, #1
 80120ea:	920e      	str	r2, [sp, #56]	; 0x38
 80120ec:	e76f      	b.n	8011fce <_dtoa_r+0x126>
 80120ee:	2301      	movs	r3, #1
 80120f0:	e7b3      	b.n	801205a <_dtoa_r+0x1b2>
 80120f2:	900c      	str	r0, [sp, #48]	; 0x30
 80120f4:	e7b2      	b.n	801205c <_dtoa_r+0x1b4>
 80120f6:	9b05      	ldr	r3, [sp, #20]
 80120f8:	eba3 030b 	sub.w	r3, r3, fp
 80120fc:	9305      	str	r3, [sp, #20]
 80120fe:	f1cb 0300 	rsb	r3, fp, #0
 8012102:	9308      	str	r3, [sp, #32]
 8012104:	2300      	movs	r3, #0
 8012106:	930b      	str	r3, [sp, #44]	; 0x2c
 8012108:	e7bf      	b.n	801208a <_dtoa_r+0x1e2>
 801210a:	2300      	movs	r3, #0
 801210c:	9309      	str	r3, [sp, #36]	; 0x24
 801210e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012110:	2b00      	cmp	r3, #0
 8012112:	dc52      	bgt.n	80121ba <_dtoa_r+0x312>
 8012114:	2301      	movs	r3, #1
 8012116:	9301      	str	r3, [sp, #4]
 8012118:	9304      	str	r3, [sp, #16]
 801211a:	461a      	mov	r2, r3
 801211c:	920a      	str	r2, [sp, #40]	; 0x28
 801211e:	e00b      	b.n	8012138 <_dtoa_r+0x290>
 8012120:	2301      	movs	r3, #1
 8012122:	e7f3      	b.n	801210c <_dtoa_r+0x264>
 8012124:	2300      	movs	r3, #0
 8012126:	9309      	str	r3, [sp, #36]	; 0x24
 8012128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801212a:	445b      	add	r3, fp
 801212c:	9301      	str	r3, [sp, #4]
 801212e:	3301      	adds	r3, #1
 8012130:	2b01      	cmp	r3, #1
 8012132:	9304      	str	r3, [sp, #16]
 8012134:	bfb8      	it	lt
 8012136:	2301      	movlt	r3, #1
 8012138:	69e0      	ldr	r0, [r4, #28]
 801213a:	2100      	movs	r1, #0
 801213c:	2204      	movs	r2, #4
 801213e:	f102 0614 	add.w	r6, r2, #20
 8012142:	429e      	cmp	r6, r3
 8012144:	d93d      	bls.n	80121c2 <_dtoa_r+0x31a>
 8012146:	6041      	str	r1, [r0, #4]
 8012148:	4620      	mov	r0, r4
 801214a:	f000 fd9f 	bl	8012c8c <_Balloc>
 801214e:	9000      	str	r0, [sp, #0]
 8012150:	2800      	cmp	r0, #0
 8012152:	d139      	bne.n	80121c8 <_dtoa_r+0x320>
 8012154:	4b16      	ldr	r3, [pc, #88]	; (80121b0 <_dtoa_r+0x308>)
 8012156:	4602      	mov	r2, r0
 8012158:	f240 11af 	movw	r1, #431	; 0x1af
 801215c:	e6bd      	b.n	8011eda <_dtoa_r+0x32>
 801215e:	2301      	movs	r3, #1
 8012160:	e7e1      	b.n	8012126 <_dtoa_r+0x27e>
 8012162:	2501      	movs	r5, #1
 8012164:	2300      	movs	r3, #0
 8012166:	9307      	str	r3, [sp, #28]
 8012168:	9509      	str	r5, [sp, #36]	; 0x24
 801216a:	f04f 33ff 	mov.w	r3, #4294967295
 801216e:	9301      	str	r3, [sp, #4]
 8012170:	9304      	str	r3, [sp, #16]
 8012172:	2200      	movs	r2, #0
 8012174:	2312      	movs	r3, #18
 8012176:	e7d1      	b.n	801211c <_dtoa_r+0x274>
 8012178:	636f4361 	.word	0x636f4361
 801217c:	3fd287a7 	.word	0x3fd287a7
 8012180:	8b60c8b3 	.word	0x8b60c8b3
 8012184:	3fc68a28 	.word	0x3fc68a28
 8012188:	509f79fb 	.word	0x509f79fb
 801218c:	3fd34413 	.word	0x3fd34413
 8012190:	08015780 	.word	0x08015780
 8012194:	08015797 	.word	0x08015797
 8012198:	7ff00000 	.word	0x7ff00000
 801219c:	0801577c 	.word	0x0801577c
 80121a0:	08015773 	.word	0x08015773
 80121a4:	0801574b 	.word	0x0801574b
 80121a8:	3ff80000 	.word	0x3ff80000
 80121ac:	08015888 	.word	0x08015888
 80121b0:	080157ef 	.word	0x080157ef
 80121b4:	2301      	movs	r3, #1
 80121b6:	9309      	str	r3, [sp, #36]	; 0x24
 80121b8:	e7d7      	b.n	801216a <_dtoa_r+0x2c2>
 80121ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121bc:	9301      	str	r3, [sp, #4]
 80121be:	9304      	str	r3, [sp, #16]
 80121c0:	e7ba      	b.n	8012138 <_dtoa_r+0x290>
 80121c2:	3101      	adds	r1, #1
 80121c4:	0052      	lsls	r2, r2, #1
 80121c6:	e7ba      	b.n	801213e <_dtoa_r+0x296>
 80121c8:	69e3      	ldr	r3, [r4, #28]
 80121ca:	9a00      	ldr	r2, [sp, #0]
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	9b04      	ldr	r3, [sp, #16]
 80121d0:	2b0e      	cmp	r3, #14
 80121d2:	f200 80a8 	bhi.w	8012326 <_dtoa_r+0x47e>
 80121d6:	2d00      	cmp	r5, #0
 80121d8:	f000 80a5 	beq.w	8012326 <_dtoa_r+0x47e>
 80121dc:	f1bb 0f00 	cmp.w	fp, #0
 80121e0:	dd38      	ble.n	8012254 <_dtoa_r+0x3ac>
 80121e2:	4bc0      	ldr	r3, [pc, #768]	; (80124e4 <_dtoa_r+0x63c>)
 80121e4:	f00b 020f 	and.w	r2, fp, #15
 80121e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80121f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80121f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80121f8:	d019      	beq.n	801222e <_dtoa_r+0x386>
 80121fa:	4bbb      	ldr	r3, [pc, #748]	; (80124e8 <_dtoa_r+0x640>)
 80121fc:	ec51 0b18 	vmov	r0, r1, d8
 8012200:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012204:	f7ee fb22 	bl	800084c <__aeabi_ddiv>
 8012208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801220c:	f008 080f 	and.w	r8, r8, #15
 8012210:	2503      	movs	r5, #3
 8012212:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80124e8 <_dtoa_r+0x640>
 8012216:	f1b8 0f00 	cmp.w	r8, #0
 801221a:	d10a      	bne.n	8012232 <_dtoa_r+0x38a>
 801221c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012220:	4632      	mov	r2, r6
 8012222:	463b      	mov	r3, r7
 8012224:	f7ee fb12 	bl	800084c <__aeabi_ddiv>
 8012228:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801222c:	e02b      	b.n	8012286 <_dtoa_r+0x3de>
 801222e:	2502      	movs	r5, #2
 8012230:	e7ef      	b.n	8012212 <_dtoa_r+0x36a>
 8012232:	f018 0f01 	tst.w	r8, #1
 8012236:	d008      	beq.n	801224a <_dtoa_r+0x3a2>
 8012238:	4630      	mov	r0, r6
 801223a:	4639      	mov	r1, r7
 801223c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012240:	f7ee f9da 	bl	80005f8 <__aeabi_dmul>
 8012244:	3501      	adds	r5, #1
 8012246:	4606      	mov	r6, r0
 8012248:	460f      	mov	r7, r1
 801224a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801224e:	f109 0908 	add.w	r9, r9, #8
 8012252:	e7e0      	b.n	8012216 <_dtoa_r+0x36e>
 8012254:	f000 809f 	beq.w	8012396 <_dtoa_r+0x4ee>
 8012258:	f1cb 0600 	rsb	r6, fp, #0
 801225c:	4ba1      	ldr	r3, [pc, #644]	; (80124e4 <_dtoa_r+0x63c>)
 801225e:	4fa2      	ldr	r7, [pc, #648]	; (80124e8 <_dtoa_r+0x640>)
 8012260:	f006 020f 	and.w	r2, r6, #15
 8012264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	ec51 0b18 	vmov	r0, r1, d8
 8012270:	f7ee f9c2 	bl	80005f8 <__aeabi_dmul>
 8012274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012278:	1136      	asrs	r6, r6, #4
 801227a:	2300      	movs	r3, #0
 801227c:	2502      	movs	r5, #2
 801227e:	2e00      	cmp	r6, #0
 8012280:	d17e      	bne.n	8012380 <_dtoa_r+0x4d8>
 8012282:	2b00      	cmp	r3, #0
 8012284:	d1d0      	bne.n	8012228 <_dtoa_r+0x380>
 8012286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012288:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801228c:	2b00      	cmp	r3, #0
 801228e:	f000 8084 	beq.w	801239a <_dtoa_r+0x4f2>
 8012292:	4b96      	ldr	r3, [pc, #600]	; (80124ec <_dtoa_r+0x644>)
 8012294:	2200      	movs	r2, #0
 8012296:	4640      	mov	r0, r8
 8012298:	4649      	mov	r1, r9
 801229a:	f7ee fc1f 	bl	8000adc <__aeabi_dcmplt>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d07b      	beq.n	801239a <_dtoa_r+0x4f2>
 80122a2:	9b04      	ldr	r3, [sp, #16]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d078      	beq.n	801239a <_dtoa_r+0x4f2>
 80122a8:	9b01      	ldr	r3, [sp, #4]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	dd39      	ble.n	8012322 <_dtoa_r+0x47a>
 80122ae:	4b90      	ldr	r3, [pc, #576]	; (80124f0 <_dtoa_r+0x648>)
 80122b0:	2200      	movs	r2, #0
 80122b2:	4640      	mov	r0, r8
 80122b4:	4649      	mov	r1, r9
 80122b6:	f7ee f99f 	bl	80005f8 <__aeabi_dmul>
 80122ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122be:	9e01      	ldr	r6, [sp, #4]
 80122c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80122c4:	3501      	adds	r5, #1
 80122c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80122ca:	4628      	mov	r0, r5
 80122cc:	f7ee f92a 	bl	8000524 <__aeabi_i2d>
 80122d0:	4642      	mov	r2, r8
 80122d2:	464b      	mov	r3, r9
 80122d4:	f7ee f990 	bl	80005f8 <__aeabi_dmul>
 80122d8:	4b86      	ldr	r3, [pc, #536]	; (80124f4 <_dtoa_r+0x64c>)
 80122da:	2200      	movs	r2, #0
 80122dc:	f7ed ffd6 	bl	800028c <__adddf3>
 80122e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80122e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122e8:	9303      	str	r3, [sp, #12]
 80122ea:	2e00      	cmp	r6, #0
 80122ec:	d158      	bne.n	80123a0 <_dtoa_r+0x4f8>
 80122ee:	4b82      	ldr	r3, [pc, #520]	; (80124f8 <_dtoa_r+0x650>)
 80122f0:	2200      	movs	r2, #0
 80122f2:	4640      	mov	r0, r8
 80122f4:	4649      	mov	r1, r9
 80122f6:	f7ed ffc7 	bl	8000288 <__aeabi_dsub>
 80122fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80122fe:	4680      	mov	r8, r0
 8012300:	4689      	mov	r9, r1
 8012302:	f7ee fc09 	bl	8000b18 <__aeabi_dcmpgt>
 8012306:	2800      	cmp	r0, #0
 8012308:	f040 8296 	bne.w	8012838 <_dtoa_r+0x990>
 801230c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012310:	4640      	mov	r0, r8
 8012312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012316:	4649      	mov	r1, r9
 8012318:	f7ee fbe0 	bl	8000adc <__aeabi_dcmplt>
 801231c:	2800      	cmp	r0, #0
 801231e:	f040 8289 	bne.w	8012834 <_dtoa_r+0x98c>
 8012322:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012328:	2b00      	cmp	r3, #0
 801232a:	f2c0 814e 	blt.w	80125ca <_dtoa_r+0x722>
 801232e:	f1bb 0f0e 	cmp.w	fp, #14
 8012332:	f300 814a 	bgt.w	80125ca <_dtoa_r+0x722>
 8012336:	4b6b      	ldr	r3, [pc, #428]	; (80124e4 <_dtoa_r+0x63c>)
 8012338:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801233c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012342:	2b00      	cmp	r3, #0
 8012344:	f280 80dc 	bge.w	8012500 <_dtoa_r+0x658>
 8012348:	9b04      	ldr	r3, [sp, #16]
 801234a:	2b00      	cmp	r3, #0
 801234c:	f300 80d8 	bgt.w	8012500 <_dtoa_r+0x658>
 8012350:	f040 826f 	bne.w	8012832 <_dtoa_r+0x98a>
 8012354:	4b68      	ldr	r3, [pc, #416]	; (80124f8 <_dtoa_r+0x650>)
 8012356:	2200      	movs	r2, #0
 8012358:	4640      	mov	r0, r8
 801235a:	4649      	mov	r1, r9
 801235c:	f7ee f94c 	bl	80005f8 <__aeabi_dmul>
 8012360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012364:	f7ee fbce 	bl	8000b04 <__aeabi_dcmpge>
 8012368:	9e04      	ldr	r6, [sp, #16]
 801236a:	4637      	mov	r7, r6
 801236c:	2800      	cmp	r0, #0
 801236e:	f040 8245 	bne.w	80127fc <_dtoa_r+0x954>
 8012372:	9d00      	ldr	r5, [sp, #0]
 8012374:	2331      	movs	r3, #49	; 0x31
 8012376:	f805 3b01 	strb.w	r3, [r5], #1
 801237a:	f10b 0b01 	add.w	fp, fp, #1
 801237e:	e241      	b.n	8012804 <_dtoa_r+0x95c>
 8012380:	07f2      	lsls	r2, r6, #31
 8012382:	d505      	bpl.n	8012390 <_dtoa_r+0x4e8>
 8012384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012388:	f7ee f936 	bl	80005f8 <__aeabi_dmul>
 801238c:	3501      	adds	r5, #1
 801238e:	2301      	movs	r3, #1
 8012390:	1076      	asrs	r6, r6, #1
 8012392:	3708      	adds	r7, #8
 8012394:	e773      	b.n	801227e <_dtoa_r+0x3d6>
 8012396:	2502      	movs	r5, #2
 8012398:	e775      	b.n	8012286 <_dtoa_r+0x3de>
 801239a:	9e04      	ldr	r6, [sp, #16]
 801239c:	465f      	mov	r7, fp
 801239e:	e792      	b.n	80122c6 <_dtoa_r+0x41e>
 80123a0:	9900      	ldr	r1, [sp, #0]
 80123a2:	4b50      	ldr	r3, [pc, #320]	; (80124e4 <_dtoa_r+0x63c>)
 80123a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123a8:	4431      	add	r1, r6
 80123aa:	9102      	str	r1, [sp, #8]
 80123ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123ae:	eeb0 9a47 	vmov.f32	s18, s14
 80123b2:	eef0 9a67 	vmov.f32	s19, s15
 80123b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80123ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80123be:	2900      	cmp	r1, #0
 80123c0:	d044      	beq.n	801244c <_dtoa_r+0x5a4>
 80123c2:	494e      	ldr	r1, [pc, #312]	; (80124fc <_dtoa_r+0x654>)
 80123c4:	2000      	movs	r0, #0
 80123c6:	f7ee fa41 	bl	800084c <__aeabi_ddiv>
 80123ca:	ec53 2b19 	vmov	r2, r3, d9
 80123ce:	f7ed ff5b 	bl	8000288 <__aeabi_dsub>
 80123d2:	9d00      	ldr	r5, [sp, #0]
 80123d4:	ec41 0b19 	vmov	d9, r0, r1
 80123d8:	4649      	mov	r1, r9
 80123da:	4640      	mov	r0, r8
 80123dc:	f7ee fbbc 	bl	8000b58 <__aeabi_d2iz>
 80123e0:	4606      	mov	r6, r0
 80123e2:	f7ee f89f 	bl	8000524 <__aeabi_i2d>
 80123e6:	4602      	mov	r2, r0
 80123e8:	460b      	mov	r3, r1
 80123ea:	4640      	mov	r0, r8
 80123ec:	4649      	mov	r1, r9
 80123ee:	f7ed ff4b 	bl	8000288 <__aeabi_dsub>
 80123f2:	3630      	adds	r6, #48	; 0x30
 80123f4:	f805 6b01 	strb.w	r6, [r5], #1
 80123f8:	ec53 2b19 	vmov	r2, r3, d9
 80123fc:	4680      	mov	r8, r0
 80123fe:	4689      	mov	r9, r1
 8012400:	f7ee fb6c 	bl	8000adc <__aeabi_dcmplt>
 8012404:	2800      	cmp	r0, #0
 8012406:	d164      	bne.n	80124d2 <_dtoa_r+0x62a>
 8012408:	4642      	mov	r2, r8
 801240a:	464b      	mov	r3, r9
 801240c:	4937      	ldr	r1, [pc, #220]	; (80124ec <_dtoa_r+0x644>)
 801240e:	2000      	movs	r0, #0
 8012410:	f7ed ff3a 	bl	8000288 <__aeabi_dsub>
 8012414:	ec53 2b19 	vmov	r2, r3, d9
 8012418:	f7ee fb60 	bl	8000adc <__aeabi_dcmplt>
 801241c:	2800      	cmp	r0, #0
 801241e:	f040 80b6 	bne.w	801258e <_dtoa_r+0x6e6>
 8012422:	9b02      	ldr	r3, [sp, #8]
 8012424:	429d      	cmp	r5, r3
 8012426:	f43f af7c 	beq.w	8012322 <_dtoa_r+0x47a>
 801242a:	4b31      	ldr	r3, [pc, #196]	; (80124f0 <_dtoa_r+0x648>)
 801242c:	ec51 0b19 	vmov	r0, r1, d9
 8012430:	2200      	movs	r2, #0
 8012432:	f7ee f8e1 	bl	80005f8 <__aeabi_dmul>
 8012436:	4b2e      	ldr	r3, [pc, #184]	; (80124f0 <_dtoa_r+0x648>)
 8012438:	ec41 0b19 	vmov	d9, r0, r1
 801243c:	2200      	movs	r2, #0
 801243e:	4640      	mov	r0, r8
 8012440:	4649      	mov	r1, r9
 8012442:	f7ee f8d9 	bl	80005f8 <__aeabi_dmul>
 8012446:	4680      	mov	r8, r0
 8012448:	4689      	mov	r9, r1
 801244a:	e7c5      	b.n	80123d8 <_dtoa_r+0x530>
 801244c:	ec51 0b17 	vmov	r0, r1, d7
 8012450:	f7ee f8d2 	bl	80005f8 <__aeabi_dmul>
 8012454:	9b02      	ldr	r3, [sp, #8]
 8012456:	9d00      	ldr	r5, [sp, #0]
 8012458:	930f      	str	r3, [sp, #60]	; 0x3c
 801245a:	ec41 0b19 	vmov	d9, r0, r1
 801245e:	4649      	mov	r1, r9
 8012460:	4640      	mov	r0, r8
 8012462:	f7ee fb79 	bl	8000b58 <__aeabi_d2iz>
 8012466:	4606      	mov	r6, r0
 8012468:	f7ee f85c 	bl	8000524 <__aeabi_i2d>
 801246c:	3630      	adds	r6, #48	; 0x30
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	4640      	mov	r0, r8
 8012474:	4649      	mov	r1, r9
 8012476:	f7ed ff07 	bl	8000288 <__aeabi_dsub>
 801247a:	f805 6b01 	strb.w	r6, [r5], #1
 801247e:	9b02      	ldr	r3, [sp, #8]
 8012480:	429d      	cmp	r5, r3
 8012482:	4680      	mov	r8, r0
 8012484:	4689      	mov	r9, r1
 8012486:	f04f 0200 	mov.w	r2, #0
 801248a:	d124      	bne.n	80124d6 <_dtoa_r+0x62e>
 801248c:	4b1b      	ldr	r3, [pc, #108]	; (80124fc <_dtoa_r+0x654>)
 801248e:	ec51 0b19 	vmov	r0, r1, d9
 8012492:	f7ed fefb 	bl	800028c <__adddf3>
 8012496:	4602      	mov	r2, r0
 8012498:	460b      	mov	r3, r1
 801249a:	4640      	mov	r0, r8
 801249c:	4649      	mov	r1, r9
 801249e:	f7ee fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 80124a2:	2800      	cmp	r0, #0
 80124a4:	d173      	bne.n	801258e <_dtoa_r+0x6e6>
 80124a6:	ec53 2b19 	vmov	r2, r3, d9
 80124aa:	4914      	ldr	r1, [pc, #80]	; (80124fc <_dtoa_r+0x654>)
 80124ac:	2000      	movs	r0, #0
 80124ae:	f7ed feeb 	bl	8000288 <__aeabi_dsub>
 80124b2:	4602      	mov	r2, r0
 80124b4:	460b      	mov	r3, r1
 80124b6:	4640      	mov	r0, r8
 80124b8:	4649      	mov	r1, r9
 80124ba:	f7ee fb0f 	bl	8000adc <__aeabi_dcmplt>
 80124be:	2800      	cmp	r0, #0
 80124c0:	f43f af2f 	beq.w	8012322 <_dtoa_r+0x47a>
 80124c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80124c6:	1e6b      	subs	r3, r5, #1
 80124c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80124ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80124ce:	2b30      	cmp	r3, #48	; 0x30
 80124d0:	d0f8      	beq.n	80124c4 <_dtoa_r+0x61c>
 80124d2:	46bb      	mov	fp, r7
 80124d4:	e04a      	b.n	801256c <_dtoa_r+0x6c4>
 80124d6:	4b06      	ldr	r3, [pc, #24]	; (80124f0 <_dtoa_r+0x648>)
 80124d8:	f7ee f88e 	bl	80005f8 <__aeabi_dmul>
 80124dc:	4680      	mov	r8, r0
 80124de:	4689      	mov	r9, r1
 80124e0:	e7bd      	b.n	801245e <_dtoa_r+0x5b6>
 80124e2:	bf00      	nop
 80124e4:	08015888 	.word	0x08015888
 80124e8:	08015860 	.word	0x08015860
 80124ec:	3ff00000 	.word	0x3ff00000
 80124f0:	40240000 	.word	0x40240000
 80124f4:	401c0000 	.word	0x401c0000
 80124f8:	40140000 	.word	0x40140000
 80124fc:	3fe00000 	.word	0x3fe00000
 8012500:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012504:	9d00      	ldr	r5, [sp, #0]
 8012506:	4642      	mov	r2, r8
 8012508:	464b      	mov	r3, r9
 801250a:	4630      	mov	r0, r6
 801250c:	4639      	mov	r1, r7
 801250e:	f7ee f99d 	bl	800084c <__aeabi_ddiv>
 8012512:	f7ee fb21 	bl	8000b58 <__aeabi_d2iz>
 8012516:	9001      	str	r0, [sp, #4]
 8012518:	f7ee f804 	bl	8000524 <__aeabi_i2d>
 801251c:	4642      	mov	r2, r8
 801251e:	464b      	mov	r3, r9
 8012520:	f7ee f86a 	bl	80005f8 <__aeabi_dmul>
 8012524:	4602      	mov	r2, r0
 8012526:	460b      	mov	r3, r1
 8012528:	4630      	mov	r0, r6
 801252a:	4639      	mov	r1, r7
 801252c:	f7ed feac 	bl	8000288 <__aeabi_dsub>
 8012530:	9e01      	ldr	r6, [sp, #4]
 8012532:	9f04      	ldr	r7, [sp, #16]
 8012534:	3630      	adds	r6, #48	; 0x30
 8012536:	f805 6b01 	strb.w	r6, [r5], #1
 801253a:	9e00      	ldr	r6, [sp, #0]
 801253c:	1bae      	subs	r6, r5, r6
 801253e:	42b7      	cmp	r7, r6
 8012540:	4602      	mov	r2, r0
 8012542:	460b      	mov	r3, r1
 8012544:	d134      	bne.n	80125b0 <_dtoa_r+0x708>
 8012546:	f7ed fea1 	bl	800028c <__adddf3>
 801254a:	4642      	mov	r2, r8
 801254c:	464b      	mov	r3, r9
 801254e:	4606      	mov	r6, r0
 8012550:	460f      	mov	r7, r1
 8012552:	f7ee fae1 	bl	8000b18 <__aeabi_dcmpgt>
 8012556:	b9c8      	cbnz	r0, 801258c <_dtoa_r+0x6e4>
 8012558:	4642      	mov	r2, r8
 801255a:	464b      	mov	r3, r9
 801255c:	4630      	mov	r0, r6
 801255e:	4639      	mov	r1, r7
 8012560:	f7ee fab2 	bl	8000ac8 <__aeabi_dcmpeq>
 8012564:	b110      	cbz	r0, 801256c <_dtoa_r+0x6c4>
 8012566:	9b01      	ldr	r3, [sp, #4]
 8012568:	07db      	lsls	r3, r3, #31
 801256a:	d40f      	bmi.n	801258c <_dtoa_r+0x6e4>
 801256c:	4651      	mov	r1, sl
 801256e:	4620      	mov	r0, r4
 8012570:	f000 fbcc 	bl	8012d0c <_Bfree>
 8012574:	2300      	movs	r3, #0
 8012576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012578:	702b      	strb	r3, [r5, #0]
 801257a:	f10b 0301 	add.w	r3, fp, #1
 801257e:	6013      	str	r3, [r2, #0]
 8012580:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012582:	2b00      	cmp	r3, #0
 8012584:	f43f ace2 	beq.w	8011f4c <_dtoa_r+0xa4>
 8012588:	601d      	str	r5, [r3, #0]
 801258a:	e4df      	b.n	8011f4c <_dtoa_r+0xa4>
 801258c:	465f      	mov	r7, fp
 801258e:	462b      	mov	r3, r5
 8012590:	461d      	mov	r5, r3
 8012592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012596:	2a39      	cmp	r2, #57	; 0x39
 8012598:	d106      	bne.n	80125a8 <_dtoa_r+0x700>
 801259a:	9a00      	ldr	r2, [sp, #0]
 801259c:	429a      	cmp	r2, r3
 801259e:	d1f7      	bne.n	8012590 <_dtoa_r+0x6e8>
 80125a0:	9900      	ldr	r1, [sp, #0]
 80125a2:	2230      	movs	r2, #48	; 0x30
 80125a4:	3701      	adds	r7, #1
 80125a6:	700a      	strb	r2, [r1, #0]
 80125a8:	781a      	ldrb	r2, [r3, #0]
 80125aa:	3201      	adds	r2, #1
 80125ac:	701a      	strb	r2, [r3, #0]
 80125ae:	e790      	b.n	80124d2 <_dtoa_r+0x62a>
 80125b0:	4ba3      	ldr	r3, [pc, #652]	; (8012840 <_dtoa_r+0x998>)
 80125b2:	2200      	movs	r2, #0
 80125b4:	f7ee f820 	bl	80005f8 <__aeabi_dmul>
 80125b8:	2200      	movs	r2, #0
 80125ba:	2300      	movs	r3, #0
 80125bc:	4606      	mov	r6, r0
 80125be:	460f      	mov	r7, r1
 80125c0:	f7ee fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d09e      	beq.n	8012506 <_dtoa_r+0x65e>
 80125c8:	e7d0      	b.n	801256c <_dtoa_r+0x6c4>
 80125ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125cc:	2a00      	cmp	r2, #0
 80125ce:	f000 80ca 	beq.w	8012766 <_dtoa_r+0x8be>
 80125d2:	9a07      	ldr	r2, [sp, #28]
 80125d4:	2a01      	cmp	r2, #1
 80125d6:	f300 80ad 	bgt.w	8012734 <_dtoa_r+0x88c>
 80125da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125dc:	2a00      	cmp	r2, #0
 80125de:	f000 80a5 	beq.w	801272c <_dtoa_r+0x884>
 80125e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80125e6:	9e08      	ldr	r6, [sp, #32]
 80125e8:	9d05      	ldr	r5, [sp, #20]
 80125ea:	9a05      	ldr	r2, [sp, #20]
 80125ec:	441a      	add	r2, r3
 80125ee:	9205      	str	r2, [sp, #20]
 80125f0:	9a06      	ldr	r2, [sp, #24]
 80125f2:	2101      	movs	r1, #1
 80125f4:	441a      	add	r2, r3
 80125f6:	4620      	mov	r0, r4
 80125f8:	9206      	str	r2, [sp, #24]
 80125fa:	f000 fc87 	bl	8012f0c <__i2b>
 80125fe:	4607      	mov	r7, r0
 8012600:	b165      	cbz	r5, 801261c <_dtoa_r+0x774>
 8012602:	9b06      	ldr	r3, [sp, #24]
 8012604:	2b00      	cmp	r3, #0
 8012606:	dd09      	ble.n	801261c <_dtoa_r+0x774>
 8012608:	42ab      	cmp	r3, r5
 801260a:	9a05      	ldr	r2, [sp, #20]
 801260c:	bfa8      	it	ge
 801260e:	462b      	movge	r3, r5
 8012610:	1ad2      	subs	r2, r2, r3
 8012612:	9205      	str	r2, [sp, #20]
 8012614:	9a06      	ldr	r2, [sp, #24]
 8012616:	1aed      	subs	r5, r5, r3
 8012618:	1ad3      	subs	r3, r2, r3
 801261a:	9306      	str	r3, [sp, #24]
 801261c:	9b08      	ldr	r3, [sp, #32]
 801261e:	b1f3      	cbz	r3, 801265e <_dtoa_r+0x7b6>
 8012620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012622:	2b00      	cmp	r3, #0
 8012624:	f000 80a3 	beq.w	801276e <_dtoa_r+0x8c6>
 8012628:	2e00      	cmp	r6, #0
 801262a:	dd10      	ble.n	801264e <_dtoa_r+0x7a6>
 801262c:	4639      	mov	r1, r7
 801262e:	4632      	mov	r2, r6
 8012630:	4620      	mov	r0, r4
 8012632:	f000 fd2b 	bl	801308c <__pow5mult>
 8012636:	4652      	mov	r2, sl
 8012638:	4601      	mov	r1, r0
 801263a:	4607      	mov	r7, r0
 801263c:	4620      	mov	r0, r4
 801263e:	f000 fc7b 	bl	8012f38 <__multiply>
 8012642:	4651      	mov	r1, sl
 8012644:	4680      	mov	r8, r0
 8012646:	4620      	mov	r0, r4
 8012648:	f000 fb60 	bl	8012d0c <_Bfree>
 801264c:	46c2      	mov	sl, r8
 801264e:	9b08      	ldr	r3, [sp, #32]
 8012650:	1b9a      	subs	r2, r3, r6
 8012652:	d004      	beq.n	801265e <_dtoa_r+0x7b6>
 8012654:	4651      	mov	r1, sl
 8012656:	4620      	mov	r0, r4
 8012658:	f000 fd18 	bl	801308c <__pow5mult>
 801265c:	4682      	mov	sl, r0
 801265e:	2101      	movs	r1, #1
 8012660:	4620      	mov	r0, r4
 8012662:	f000 fc53 	bl	8012f0c <__i2b>
 8012666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012668:	2b00      	cmp	r3, #0
 801266a:	4606      	mov	r6, r0
 801266c:	f340 8081 	ble.w	8012772 <_dtoa_r+0x8ca>
 8012670:	461a      	mov	r2, r3
 8012672:	4601      	mov	r1, r0
 8012674:	4620      	mov	r0, r4
 8012676:	f000 fd09 	bl	801308c <__pow5mult>
 801267a:	9b07      	ldr	r3, [sp, #28]
 801267c:	2b01      	cmp	r3, #1
 801267e:	4606      	mov	r6, r0
 8012680:	dd7a      	ble.n	8012778 <_dtoa_r+0x8d0>
 8012682:	f04f 0800 	mov.w	r8, #0
 8012686:	6933      	ldr	r3, [r6, #16]
 8012688:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801268c:	6918      	ldr	r0, [r3, #16]
 801268e:	f000 fbef 	bl	8012e70 <__hi0bits>
 8012692:	f1c0 0020 	rsb	r0, r0, #32
 8012696:	9b06      	ldr	r3, [sp, #24]
 8012698:	4418      	add	r0, r3
 801269a:	f010 001f 	ands.w	r0, r0, #31
 801269e:	f000 8094 	beq.w	80127ca <_dtoa_r+0x922>
 80126a2:	f1c0 0320 	rsb	r3, r0, #32
 80126a6:	2b04      	cmp	r3, #4
 80126a8:	f340 8085 	ble.w	80127b6 <_dtoa_r+0x90e>
 80126ac:	9b05      	ldr	r3, [sp, #20]
 80126ae:	f1c0 001c 	rsb	r0, r0, #28
 80126b2:	4403      	add	r3, r0
 80126b4:	9305      	str	r3, [sp, #20]
 80126b6:	9b06      	ldr	r3, [sp, #24]
 80126b8:	4403      	add	r3, r0
 80126ba:	4405      	add	r5, r0
 80126bc:	9306      	str	r3, [sp, #24]
 80126be:	9b05      	ldr	r3, [sp, #20]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	dd05      	ble.n	80126d0 <_dtoa_r+0x828>
 80126c4:	4651      	mov	r1, sl
 80126c6:	461a      	mov	r2, r3
 80126c8:	4620      	mov	r0, r4
 80126ca:	f000 fd39 	bl	8013140 <__lshift>
 80126ce:	4682      	mov	sl, r0
 80126d0:	9b06      	ldr	r3, [sp, #24]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dd05      	ble.n	80126e2 <_dtoa_r+0x83a>
 80126d6:	4631      	mov	r1, r6
 80126d8:	461a      	mov	r2, r3
 80126da:	4620      	mov	r0, r4
 80126dc:	f000 fd30 	bl	8013140 <__lshift>
 80126e0:	4606      	mov	r6, r0
 80126e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d072      	beq.n	80127ce <_dtoa_r+0x926>
 80126e8:	4631      	mov	r1, r6
 80126ea:	4650      	mov	r0, sl
 80126ec:	f000 fd94 	bl	8013218 <__mcmp>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	da6c      	bge.n	80127ce <_dtoa_r+0x926>
 80126f4:	2300      	movs	r3, #0
 80126f6:	4651      	mov	r1, sl
 80126f8:	220a      	movs	r2, #10
 80126fa:	4620      	mov	r0, r4
 80126fc:	f000 fb28 	bl	8012d50 <__multadd>
 8012700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012702:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012706:	4682      	mov	sl, r0
 8012708:	2b00      	cmp	r3, #0
 801270a:	f000 81b0 	beq.w	8012a6e <_dtoa_r+0xbc6>
 801270e:	2300      	movs	r3, #0
 8012710:	4639      	mov	r1, r7
 8012712:	220a      	movs	r2, #10
 8012714:	4620      	mov	r0, r4
 8012716:	f000 fb1b 	bl	8012d50 <__multadd>
 801271a:	9b01      	ldr	r3, [sp, #4]
 801271c:	2b00      	cmp	r3, #0
 801271e:	4607      	mov	r7, r0
 8012720:	f300 8096 	bgt.w	8012850 <_dtoa_r+0x9a8>
 8012724:	9b07      	ldr	r3, [sp, #28]
 8012726:	2b02      	cmp	r3, #2
 8012728:	dc59      	bgt.n	80127de <_dtoa_r+0x936>
 801272a:	e091      	b.n	8012850 <_dtoa_r+0x9a8>
 801272c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801272e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012732:	e758      	b.n	80125e6 <_dtoa_r+0x73e>
 8012734:	9b04      	ldr	r3, [sp, #16]
 8012736:	1e5e      	subs	r6, r3, #1
 8012738:	9b08      	ldr	r3, [sp, #32]
 801273a:	42b3      	cmp	r3, r6
 801273c:	bfbf      	itttt	lt
 801273e:	9b08      	ldrlt	r3, [sp, #32]
 8012740:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012742:	9608      	strlt	r6, [sp, #32]
 8012744:	1af3      	sublt	r3, r6, r3
 8012746:	bfb4      	ite	lt
 8012748:	18d2      	addlt	r2, r2, r3
 801274a:	1b9e      	subge	r6, r3, r6
 801274c:	9b04      	ldr	r3, [sp, #16]
 801274e:	bfbc      	itt	lt
 8012750:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012752:	2600      	movlt	r6, #0
 8012754:	2b00      	cmp	r3, #0
 8012756:	bfb7      	itett	lt
 8012758:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801275c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012760:	1a9d      	sublt	r5, r3, r2
 8012762:	2300      	movlt	r3, #0
 8012764:	e741      	b.n	80125ea <_dtoa_r+0x742>
 8012766:	9e08      	ldr	r6, [sp, #32]
 8012768:	9d05      	ldr	r5, [sp, #20]
 801276a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801276c:	e748      	b.n	8012600 <_dtoa_r+0x758>
 801276e:	9a08      	ldr	r2, [sp, #32]
 8012770:	e770      	b.n	8012654 <_dtoa_r+0x7ac>
 8012772:	9b07      	ldr	r3, [sp, #28]
 8012774:	2b01      	cmp	r3, #1
 8012776:	dc19      	bgt.n	80127ac <_dtoa_r+0x904>
 8012778:	9b02      	ldr	r3, [sp, #8]
 801277a:	b9bb      	cbnz	r3, 80127ac <_dtoa_r+0x904>
 801277c:	9b03      	ldr	r3, [sp, #12]
 801277e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012782:	b99b      	cbnz	r3, 80127ac <_dtoa_r+0x904>
 8012784:	9b03      	ldr	r3, [sp, #12]
 8012786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801278a:	0d1b      	lsrs	r3, r3, #20
 801278c:	051b      	lsls	r3, r3, #20
 801278e:	b183      	cbz	r3, 80127b2 <_dtoa_r+0x90a>
 8012790:	9b05      	ldr	r3, [sp, #20]
 8012792:	3301      	adds	r3, #1
 8012794:	9305      	str	r3, [sp, #20]
 8012796:	9b06      	ldr	r3, [sp, #24]
 8012798:	3301      	adds	r3, #1
 801279a:	9306      	str	r3, [sp, #24]
 801279c:	f04f 0801 	mov.w	r8, #1
 80127a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f47f af6f 	bne.w	8012686 <_dtoa_r+0x7de>
 80127a8:	2001      	movs	r0, #1
 80127aa:	e774      	b.n	8012696 <_dtoa_r+0x7ee>
 80127ac:	f04f 0800 	mov.w	r8, #0
 80127b0:	e7f6      	b.n	80127a0 <_dtoa_r+0x8f8>
 80127b2:	4698      	mov	r8, r3
 80127b4:	e7f4      	b.n	80127a0 <_dtoa_r+0x8f8>
 80127b6:	d082      	beq.n	80126be <_dtoa_r+0x816>
 80127b8:	9a05      	ldr	r2, [sp, #20]
 80127ba:	331c      	adds	r3, #28
 80127bc:	441a      	add	r2, r3
 80127be:	9205      	str	r2, [sp, #20]
 80127c0:	9a06      	ldr	r2, [sp, #24]
 80127c2:	441a      	add	r2, r3
 80127c4:	441d      	add	r5, r3
 80127c6:	9206      	str	r2, [sp, #24]
 80127c8:	e779      	b.n	80126be <_dtoa_r+0x816>
 80127ca:	4603      	mov	r3, r0
 80127cc:	e7f4      	b.n	80127b8 <_dtoa_r+0x910>
 80127ce:	9b04      	ldr	r3, [sp, #16]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	dc37      	bgt.n	8012844 <_dtoa_r+0x99c>
 80127d4:	9b07      	ldr	r3, [sp, #28]
 80127d6:	2b02      	cmp	r3, #2
 80127d8:	dd34      	ble.n	8012844 <_dtoa_r+0x99c>
 80127da:	9b04      	ldr	r3, [sp, #16]
 80127dc:	9301      	str	r3, [sp, #4]
 80127de:	9b01      	ldr	r3, [sp, #4]
 80127e0:	b963      	cbnz	r3, 80127fc <_dtoa_r+0x954>
 80127e2:	4631      	mov	r1, r6
 80127e4:	2205      	movs	r2, #5
 80127e6:	4620      	mov	r0, r4
 80127e8:	f000 fab2 	bl	8012d50 <__multadd>
 80127ec:	4601      	mov	r1, r0
 80127ee:	4606      	mov	r6, r0
 80127f0:	4650      	mov	r0, sl
 80127f2:	f000 fd11 	bl	8013218 <__mcmp>
 80127f6:	2800      	cmp	r0, #0
 80127f8:	f73f adbb 	bgt.w	8012372 <_dtoa_r+0x4ca>
 80127fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127fe:	9d00      	ldr	r5, [sp, #0]
 8012800:	ea6f 0b03 	mvn.w	fp, r3
 8012804:	f04f 0800 	mov.w	r8, #0
 8012808:	4631      	mov	r1, r6
 801280a:	4620      	mov	r0, r4
 801280c:	f000 fa7e 	bl	8012d0c <_Bfree>
 8012810:	2f00      	cmp	r7, #0
 8012812:	f43f aeab 	beq.w	801256c <_dtoa_r+0x6c4>
 8012816:	f1b8 0f00 	cmp.w	r8, #0
 801281a:	d005      	beq.n	8012828 <_dtoa_r+0x980>
 801281c:	45b8      	cmp	r8, r7
 801281e:	d003      	beq.n	8012828 <_dtoa_r+0x980>
 8012820:	4641      	mov	r1, r8
 8012822:	4620      	mov	r0, r4
 8012824:	f000 fa72 	bl	8012d0c <_Bfree>
 8012828:	4639      	mov	r1, r7
 801282a:	4620      	mov	r0, r4
 801282c:	f000 fa6e 	bl	8012d0c <_Bfree>
 8012830:	e69c      	b.n	801256c <_dtoa_r+0x6c4>
 8012832:	2600      	movs	r6, #0
 8012834:	4637      	mov	r7, r6
 8012836:	e7e1      	b.n	80127fc <_dtoa_r+0x954>
 8012838:	46bb      	mov	fp, r7
 801283a:	4637      	mov	r7, r6
 801283c:	e599      	b.n	8012372 <_dtoa_r+0x4ca>
 801283e:	bf00      	nop
 8012840:	40240000 	.word	0x40240000
 8012844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012846:	2b00      	cmp	r3, #0
 8012848:	f000 80c8 	beq.w	80129dc <_dtoa_r+0xb34>
 801284c:	9b04      	ldr	r3, [sp, #16]
 801284e:	9301      	str	r3, [sp, #4]
 8012850:	2d00      	cmp	r5, #0
 8012852:	dd05      	ble.n	8012860 <_dtoa_r+0x9b8>
 8012854:	4639      	mov	r1, r7
 8012856:	462a      	mov	r2, r5
 8012858:	4620      	mov	r0, r4
 801285a:	f000 fc71 	bl	8013140 <__lshift>
 801285e:	4607      	mov	r7, r0
 8012860:	f1b8 0f00 	cmp.w	r8, #0
 8012864:	d05b      	beq.n	801291e <_dtoa_r+0xa76>
 8012866:	6879      	ldr	r1, [r7, #4]
 8012868:	4620      	mov	r0, r4
 801286a:	f000 fa0f 	bl	8012c8c <_Balloc>
 801286e:	4605      	mov	r5, r0
 8012870:	b928      	cbnz	r0, 801287e <_dtoa_r+0x9d6>
 8012872:	4b83      	ldr	r3, [pc, #524]	; (8012a80 <_dtoa_r+0xbd8>)
 8012874:	4602      	mov	r2, r0
 8012876:	f240 21ef 	movw	r1, #751	; 0x2ef
 801287a:	f7ff bb2e 	b.w	8011eda <_dtoa_r+0x32>
 801287e:	693a      	ldr	r2, [r7, #16]
 8012880:	3202      	adds	r2, #2
 8012882:	0092      	lsls	r2, r2, #2
 8012884:	f107 010c 	add.w	r1, r7, #12
 8012888:	300c      	adds	r0, #12
 801288a:	f7ff fa71 	bl	8011d70 <memcpy>
 801288e:	2201      	movs	r2, #1
 8012890:	4629      	mov	r1, r5
 8012892:	4620      	mov	r0, r4
 8012894:	f000 fc54 	bl	8013140 <__lshift>
 8012898:	9b00      	ldr	r3, [sp, #0]
 801289a:	3301      	adds	r3, #1
 801289c:	9304      	str	r3, [sp, #16]
 801289e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128a2:	4413      	add	r3, r2
 80128a4:	9308      	str	r3, [sp, #32]
 80128a6:	9b02      	ldr	r3, [sp, #8]
 80128a8:	f003 0301 	and.w	r3, r3, #1
 80128ac:	46b8      	mov	r8, r7
 80128ae:	9306      	str	r3, [sp, #24]
 80128b0:	4607      	mov	r7, r0
 80128b2:	9b04      	ldr	r3, [sp, #16]
 80128b4:	4631      	mov	r1, r6
 80128b6:	3b01      	subs	r3, #1
 80128b8:	4650      	mov	r0, sl
 80128ba:	9301      	str	r3, [sp, #4]
 80128bc:	f7ff fa6c 	bl	8011d98 <quorem>
 80128c0:	4641      	mov	r1, r8
 80128c2:	9002      	str	r0, [sp, #8]
 80128c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80128c8:	4650      	mov	r0, sl
 80128ca:	f000 fca5 	bl	8013218 <__mcmp>
 80128ce:	463a      	mov	r2, r7
 80128d0:	9005      	str	r0, [sp, #20]
 80128d2:	4631      	mov	r1, r6
 80128d4:	4620      	mov	r0, r4
 80128d6:	f000 fcbb 	bl	8013250 <__mdiff>
 80128da:	68c2      	ldr	r2, [r0, #12]
 80128dc:	4605      	mov	r5, r0
 80128de:	bb02      	cbnz	r2, 8012922 <_dtoa_r+0xa7a>
 80128e0:	4601      	mov	r1, r0
 80128e2:	4650      	mov	r0, sl
 80128e4:	f000 fc98 	bl	8013218 <__mcmp>
 80128e8:	4602      	mov	r2, r0
 80128ea:	4629      	mov	r1, r5
 80128ec:	4620      	mov	r0, r4
 80128ee:	9209      	str	r2, [sp, #36]	; 0x24
 80128f0:	f000 fa0c 	bl	8012d0c <_Bfree>
 80128f4:	9b07      	ldr	r3, [sp, #28]
 80128f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128f8:	9d04      	ldr	r5, [sp, #16]
 80128fa:	ea43 0102 	orr.w	r1, r3, r2
 80128fe:	9b06      	ldr	r3, [sp, #24]
 8012900:	4319      	orrs	r1, r3
 8012902:	d110      	bne.n	8012926 <_dtoa_r+0xa7e>
 8012904:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012908:	d029      	beq.n	801295e <_dtoa_r+0xab6>
 801290a:	9b05      	ldr	r3, [sp, #20]
 801290c:	2b00      	cmp	r3, #0
 801290e:	dd02      	ble.n	8012916 <_dtoa_r+0xa6e>
 8012910:	9b02      	ldr	r3, [sp, #8]
 8012912:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012916:	9b01      	ldr	r3, [sp, #4]
 8012918:	f883 9000 	strb.w	r9, [r3]
 801291c:	e774      	b.n	8012808 <_dtoa_r+0x960>
 801291e:	4638      	mov	r0, r7
 8012920:	e7ba      	b.n	8012898 <_dtoa_r+0x9f0>
 8012922:	2201      	movs	r2, #1
 8012924:	e7e1      	b.n	80128ea <_dtoa_r+0xa42>
 8012926:	9b05      	ldr	r3, [sp, #20]
 8012928:	2b00      	cmp	r3, #0
 801292a:	db04      	blt.n	8012936 <_dtoa_r+0xa8e>
 801292c:	9907      	ldr	r1, [sp, #28]
 801292e:	430b      	orrs	r3, r1
 8012930:	9906      	ldr	r1, [sp, #24]
 8012932:	430b      	orrs	r3, r1
 8012934:	d120      	bne.n	8012978 <_dtoa_r+0xad0>
 8012936:	2a00      	cmp	r2, #0
 8012938:	dded      	ble.n	8012916 <_dtoa_r+0xa6e>
 801293a:	4651      	mov	r1, sl
 801293c:	2201      	movs	r2, #1
 801293e:	4620      	mov	r0, r4
 8012940:	f000 fbfe 	bl	8013140 <__lshift>
 8012944:	4631      	mov	r1, r6
 8012946:	4682      	mov	sl, r0
 8012948:	f000 fc66 	bl	8013218 <__mcmp>
 801294c:	2800      	cmp	r0, #0
 801294e:	dc03      	bgt.n	8012958 <_dtoa_r+0xab0>
 8012950:	d1e1      	bne.n	8012916 <_dtoa_r+0xa6e>
 8012952:	f019 0f01 	tst.w	r9, #1
 8012956:	d0de      	beq.n	8012916 <_dtoa_r+0xa6e>
 8012958:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801295c:	d1d8      	bne.n	8012910 <_dtoa_r+0xa68>
 801295e:	9a01      	ldr	r2, [sp, #4]
 8012960:	2339      	movs	r3, #57	; 0x39
 8012962:	7013      	strb	r3, [r2, #0]
 8012964:	462b      	mov	r3, r5
 8012966:	461d      	mov	r5, r3
 8012968:	3b01      	subs	r3, #1
 801296a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801296e:	2a39      	cmp	r2, #57	; 0x39
 8012970:	d06c      	beq.n	8012a4c <_dtoa_r+0xba4>
 8012972:	3201      	adds	r2, #1
 8012974:	701a      	strb	r2, [r3, #0]
 8012976:	e747      	b.n	8012808 <_dtoa_r+0x960>
 8012978:	2a00      	cmp	r2, #0
 801297a:	dd07      	ble.n	801298c <_dtoa_r+0xae4>
 801297c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012980:	d0ed      	beq.n	801295e <_dtoa_r+0xab6>
 8012982:	9a01      	ldr	r2, [sp, #4]
 8012984:	f109 0301 	add.w	r3, r9, #1
 8012988:	7013      	strb	r3, [r2, #0]
 801298a:	e73d      	b.n	8012808 <_dtoa_r+0x960>
 801298c:	9b04      	ldr	r3, [sp, #16]
 801298e:	9a08      	ldr	r2, [sp, #32]
 8012990:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012994:	4293      	cmp	r3, r2
 8012996:	d043      	beq.n	8012a20 <_dtoa_r+0xb78>
 8012998:	4651      	mov	r1, sl
 801299a:	2300      	movs	r3, #0
 801299c:	220a      	movs	r2, #10
 801299e:	4620      	mov	r0, r4
 80129a0:	f000 f9d6 	bl	8012d50 <__multadd>
 80129a4:	45b8      	cmp	r8, r7
 80129a6:	4682      	mov	sl, r0
 80129a8:	f04f 0300 	mov.w	r3, #0
 80129ac:	f04f 020a 	mov.w	r2, #10
 80129b0:	4641      	mov	r1, r8
 80129b2:	4620      	mov	r0, r4
 80129b4:	d107      	bne.n	80129c6 <_dtoa_r+0xb1e>
 80129b6:	f000 f9cb 	bl	8012d50 <__multadd>
 80129ba:	4680      	mov	r8, r0
 80129bc:	4607      	mov	r7, r0
 80129be:	9b04      	ldr	r3, [sp, #16]
 80129c0:	3301      	adds	r3, #1
 80129c2:	9304      	str	r3, [sp, #16]
 80129c4:	e775      	b.n	80128b2 <_dtoa_r+0xa0a>
 80129c6:	f000 f9c3 	bl	8012d50 <__multadd>
 80129ca:	4639      	mov	r1, r7
 80129cc:	4680      	mov	r8, r0
 80129ce:	2300      	movs	r3, #0
 80129d0:	220a      	movs	r2, #10
 80129d2:	4620      	mov	r0, r4
 80129d4:	f000 f9bc 	bl	8012d50 <__multadd>
 80129d8:	4607      	mov	r7, r0
 80129da:	e7f0      	b.n	80129be <_dtoa_r+0xb16>
 80129dc:	9b04      	ldr	r3, [sp, #16]
 80129de:	9301      	str	r3, [sp, #4]
 80129e0:	9d00      	ldr	r5, [sp, #0]
 80129e2:	4631      	mov	r1, r6
 80129e4:	4650      	mov	r0, sl
 80129e6:	f7ff f9d7 	bl	8011d98 <quorem>
 80129ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80129ee:	9b00      	ldr	r3, [sp, #0]
 80129f0:	f805 9b01 	strb.w	r9, [r5], #1
 80129f4:	1aea      	subs	r2, r5, r3
 80129f6:	9b01      	ldr	r3, [sp, #4]
 80129f8:	4293      	cmp	r3, r2
 80129fa:	dd07      	ble.n	8012a0c <_dtoa_r+0xb64>
 80129fc:	4651      	mov	r1, sl
 80129fe:	2300      	movs	r3, #0
 8012a00:	220a      	movs	r2, #10
 8012a02:	4620      	mov	r0, r4
 8012a04:	f000 f9a4 	bl	8012d50 <__multadd>
 8012a08:	4682      	mov	sl, r0
 8012a0a:	e7ea      	b.n	80129e2 <_dtoa_r+0xb3a>
 8012a0c:	9b01      	ldr	r3, [sp, #4]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	bfc8      	it	gt
 8012a12:	461d      	movgt	r5, r3
 8012a14:	9b00      	ldr	r3, [sp, #0]
 8012a16:	bfd8      	it	le
 8012a18:	2501      	movle	r5, #1
 8012a1a:	441d      	add	r5, r3
 8012a1c:	f04f 0800 	mov.w	r8, #0
 8012a20:	4651      	mov	r1, sl
 8012a22:	2201      	movs	r2, #1
 8012a24:	4620      	mov	r0, r4
 8012a26:	f000 fb8b 	bl	8013140 <__lshift>
 8012a2a:	4631      	mov	r1, r6
 8012a2c:	4682      	mov	sl, r0
 8012a2e:	f000 fbf3 	bl	8013218 <__mcmp>
 8012a32:	2800      	cmp	r0, #0
 8012a34:	dc96      	bgt.n	8012964 <_dtoa_r+0xabc>
 8012a36:	d102      	bne.n	8012a3e <_dtoa_r+0xb96>
 8012a38:	f019 0f01 	tst.w	r9, #1
 8012a3c:	d192      	bne.n	8012964 <_dtoa_r+0xabc>
 8012a3e:	462b      	mov	r3, r5
 8012a40:	461d      	mov	r5, r3
 8012a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a46:	2a30      	cmp	r2, #48	; 0x30
 8012a48:	d0fa      	beq.n	8012a40 <_dtoa_r+0xb98>
 8012a4a:	e6dd      	b.n	8012808 <_dtoa_r+0x960>
 8012a4c:	9a00      	ldr	r2, [sp, #0]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d189      	bne.n	8012966 <_dtoa_r+0xabe>
 8012a52:	f10b 0b01 	add.w	fp, fp, #1
 8012a56:	2331      	movs	r3, #49	; 0x31
 8012a58:	e796      	b.n	8012988 <_dtoa_r+0xae0>
 8012a5a:	4b0a      	ldr	r3, [pc, #40]	; (8012a84 <_dtoa_r+0xbdc>)
 8012a5c:	f7ff ba99 	b.w	8011f92 <_dtoa_r+0xea>
 8012a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	f47f aa6d 	bne.w	8011f42 <_dtoa_r+0x9a>
 8012a68:	4b07      	ldr	r3, [pc, #28]	; (8012a88 <_dtoa_r+0xbe0>)
 8012a6a:	f7ff ba92 	b.w	8011f92 <_dtoa_r+0xea>
 8012a6e:	9b01      	ldr	r3, [sp, #4]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	dcb5      	bgt.n	80129e0 <_dtoa_r+0xb38>
 8012a74:	9b07      	ldr	r3, [sp, #28]
 8012a76:	2b02      	cmp	r3, #2
 8012a78:	f73f aeb1 	bgt.w	80127de <_dtoa_r+0x936>
 8012a7c:	e7b0      	b.n	80129e0 <_dtoa_r+0xb38>
 8012a7e:	bf00      	nop
 8012a80:	080157ef 	.word	0x080157ef
 8012a84:	0801574a 	.word	0x0801574a
 8012a88:	08015773 	.word	0x08015773

08012a8c <_free_r>:
 8012a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a8e:	2900      	cmp	r1, #0
 8012a90:	d044      	beq.n	8012b1c <_free_r+0x90>
 8012a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a96:	9001      	str	r0, [sp, #4]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8012a9e:	bfb8      	it	lt
 8012aa0:	18e4      	addlt	r4, r4, r3
 8012aa2:	f000 f8e7 	bl	8012c74 <__malloc_lock>
 8012aa6:	4a1e      	ldr	r2, [pc, #120]	; (8012b20 <_free_r+0x94>)
 8012aa8:	9801      	ldr	r0, [sp, #4]
 8012aaa:	6813      	ldr	r3, [r2, #0]
 8012aac:	b933      	cbnz	r3, 8012abc <_free_r+0x30>
 8012aae:	6063      	str	r3, [r4, #4]
 8012ab0:	6014      	str	r4, [r2, #0]
 8012ab2:	b003      	add	sp, #12
 8012ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ab8:	f000 b8e2 	b.w	8012c80 <__malloc_unlock>
 8012abc:	42a3      	cmp	r3, r4
 8012abe:	d908      	bls.n	8012ad2 <_free_r+0x46>
 8012ac0:	6825      	ldr	r5, [r4, #0]
 8012ac2:	1961      	adds	r1, r4, r5
 8012ac4:	428b      	cmp	r3, r1
 8012ac6:	bf01      	itttt	eq
 8012ac8:	6819      	ldreq	r1, [r3, #0]
 8012aca:	685b      	ldreq	r3, [r3, #4]
 8012acc:	1949      	addeq	r1, r1, r5
 8012ace:	6021      	streq	r1, [r4, #0]
 8012ad0:	e7ed      	b.n	8012aae <_free_r+0x22>
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	b10b      	cbz	r3, 8012adc <_free_r+0x50>
 8012ad8:	42a3      	cmp	r3, r4
 8012ada:	d9fa      	bls.n	8012ad2 <_free_r+0x46>
 8012adc:	6811      	ldr	r1, [r2, #0]
 8012ade:	1855      	adds	r5, r2, r1
 8012ae0:	42a5      	cmp	r5, r4
 8012ae2:	d10b      	bne.n	8012afc <_free_r+0x70>
 8012ae4:	6824      	ldr	r4, [r4, #0]
 8012ae6:	4421      	add	r1, r4
 8012ae8:	1854      	adds	r4, r2, r1
 8012aea:	42a3      	cmp	r3, r4
 8012aec:	6011      	str	r1, [r2, #0]
 8012aee:	d1e0      	bne.n	8012ab2 <_free_r+0x26>
 8012af0:	681c      	ldr	r4, [r3, #0]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	6053      	str	r3, [r2, #4]
 8012af6:	440c      	add	r4, r1
 8012af8:	6014      	str	r4, [r2, #0]
 8012afa:	e7da      	b.n	8012ab2 <_free_r+0x26>
 8012afc:	d902      	bls.n	8012b04 <_free_r+0x78>
 8012afe:	230c      	movs	r3, #12
 8012b00:	6003      	str	r3, [r0, #0]
 8012b02:	e7d6      	b.n	8012ab2 <_free_r+0x26>
 8012b04:	6825      	ldr	r5, [r4, #0]
 8012b06:	1961      	adds	r1, r4, r5
 8012b08:	428b      	cmp	r3, r1
 8012b0a:	bf04      	itt	eq
 8012b0c:	6819      	ldreq	r1, [r3, #0]
 8012b0e:	685b      	ldreq	r3, [r3, #4]
 8012b10:	6063      	str	r3, [r4, #4]
 8012b12:	bf04      	itt	eq
 8012b14:	1949      	addeq	r1, r1, r5
 8012b16:	6021      	streq	r1, [r4, #0]
 8012b18:	6054      	str	r4, [r2, #4]
 8012b1a:	e7ca      	b.n	8012ab2 <_free_r+0x26>
 8012b1c:	b003      	add	sp, #12
 8012b1e:	bd30      	pop	{r4, r5, pc}
 8012b20:	2000e424 	.word	0x2000e424

08012b24 <malloc>:
 8012b24:	4b02      	ldr	r3, [pc, #8]	; (8012b30 <malloc+0xc>)
 8012b26:	4601      	mov	r1, r0
 8012b28:	6818      	ldr	r0, [r3, #0]
 8012b2a:	f000 b823 	b.w	8012b74 <_malloc_r>
 8012b2e:	bf00      	nop
 8012b30:	20000164 	.word	0x20000164

08012b34 <sbrk_aligned>:
 8012b34:	b570      	push	{r4, r5, r6, lr}
 8012b36:	4e0e      	ldr	r6, [pc, #56]	; (8012b70 <sbrk_aligned+0x3c>)
 8012b38:	460c      	mov	r4, r1
 8012b3a:	6831      	ldr	r1, [r6, #0]
 8012b3c:	4605      	mov	r5, r0
 8012b3e:	b911      	cbnz	r1, 8012b46 <sbrk_aligned+0x12>
 8012b40:	f001 fe00 	bl	8014744 <_sbrk_r>
 8012b44:	6030      	str	r0, [r6, #0]
 8012b46:	4621      	mov	r1, r4
 8012b48:	4628      	mov	r0, r5
 8012b4a:	f001 fdfb 	bl	8014744 <_sbrk_r>
 8012b4e:	1c43      	adds	r3, r0, #1
 8012b50:	d00a      	beq.n	8012b68 <sbrk_aligned+0x34>
 8012b52:	1cc4      	adds	r4, r0, #3
 8012b54:	f024 0403 	bic.w	r4, r4, #3
 8012b58:	42a0      	cmp	r0, r4
 8012b5a:	d007      	beq.n	8012b6c <sbrk_aligned+0x38>
 8012b5c:	1a21      	subs	r1, r4, r0
 8012b5e:	4628      	mov	r0, r5
 8012b60:	f001 fdf0 	bl	8014744 <_sbrk_r>
 8012b64:	3001      	adds	r0, #1
 8012b66:	d101      	bne.n	8012b6c <sbrk_aligned+0x38>
 8012b68:	f04f 34ff 	mov.w	r4, #4294967295
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	bd70      	pop	{r4, r5, r6, pc}
 8012b70:	2000e428 	.word	0x2000e428

08012b74 <_malloc_r>:
 8012b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b78:	1ccd      	adds	r5, r1, #3
 8012b7a:	f025 0503 	bic.w	r5, r5, #3
 8012b7e:	3508      	adds	r5, #8
 8012b80:	2d0c      	cmp	r5, #12
 8012b82:	bf38      	it	cc
 8012b84:	250c      	movcc	r5, #12
 8012b86:	2d00      	cmp	r5, #0
 8012b88:	4607      	mov	r7, r0
 8012b8a:	db01      	blt.n	8012b90 <_malloc_r+0x1c>
 8012b8c:	42a9      	cmp	r1, r5
 8012b8e:	d905      	bls.n	8012b9c <_malloc_r+0x28>
 8012b90:	230c      	movs	r3, #12
 8012b92:	603b      	str	r3, [r7, #0]
 8012b94:	2600      	movs	r6, #0
 8012b96:	4630      	mov	r0, r6
 8012b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012c70 <_malloc_r+0xfc>
 8012ba0:	f000 f868 	bl	8012c74 <__malloc_lock>
 8012ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8012ba8:	461c      	mov	r4, r3
 8012baa:	bb5c      	cbnz	r4, 8012c04 <_malloc_r+0x90>
 8012bac:	4629      	mov	r1, r5
 8012bae:	4638      	mov	r0, r7
 8012bb0:	f7ff ffc0 	bl	8012b34 <sbrk_aligned>
 8012bb4:	1c43      	adds	r3, r0, #1
 8012bb6:	4604      	mov	r4, r0
 8012bb8:	d155      	bne.n	8012c66 <_malloc_r+0xf2>
 8012bba:	f8d8 4000 	ldr.w	r4, [r8]
 8012bbe:	4626      	mov	r6, r4
 8012bc0:	2e00      	cmp	r6, #0
 8012bc2:	d145      	bne.n	8012c50 <_malloc_r+0xdc>
 8012bc4:	2c00      	cmp	r4, #0
 8012bc6:	d048      	beq.n	8012c5a <_malloc_r+0xe6>
 8012bc8:	6823      	ldr	r3, [r4, #0]
 8012bca:	4631      	mov	r1, r6
 8012bcc:	4638      	mov	r0, r7
 8012bce:	eb04 0903 	add.w	r9, r4, r3
 8012bd2:	f001 fdb7 	bl	8014744 <_sbrk_r>
 8012bd6:	4581      	cmp	r9, r0
 8012bd8:	d13f      	bne.n	8012c5a <_malloc_r+0xe6>
 8012bda:	6821      	ldr	r1, [r4, #0]
 8012bdc:	1a6d      	subs	r5, r5, r1
 8012bde:	4629      	mov	r1, r5
 8012be0:	4638      	mov	r0, r7
 8012be2:	f7ff ffa7 	bl	8012b34 <sbrk_aligned>
 8012be6:	3001      	adds	r0, #1
 8012be8:	d037      	beq.n	8012c5a <_malloc_r+0xe6>
 8012bea:	6823      	ldr	r3, [r4, #0]
 8012bec:	442b      	add	r3, r5
 8012bee:	6023      	str	r3, [r4, #0]
 8012bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d038      	beq.n	8012c6a <_malloc_r+0xf6>
 8012bf8:	685a      	ldr	r2, [r3, #4]
 8012bfa:	42a2      	cmp	r2, r4
 8012bfc:	d12b      	bne.n	8012c56 <_malloc_r+0xe2>
 8012bfe:	2200      	movs	r2, #0
 8012c00:	605a      	str	r2, [r3, #4]
 8012c02:	e00f      	b.n	8012c24 <_malloc_r+0xb0>
 8012c04:	6822      	ldr	r2, [r4, #0]
 8012c06:	1b52      	subs	r2, r2, r5
 8012c08:	d41f      	bmi.n	8012c4a <_malloc_r+0xd6>
 8012c0a:	2a0b      	cmp	r2, #11
 8012c0c:	d917      	bls.n	8012c3e <_malloc_r+0xca>
 8012c0e:	1961      	adds	r1, r4, r5
 8012c10:	42a3      	cmp	r3, r4
 8012c12:	6025      	str	r5, [r4, #0]
 8012c14:	bf18      	it	ne
 8012c16:	6059      	strne	r1, [r3, #4]
 8012c18:	6863      	ldr	r3, [r4, #4]
 8012c1a:	bf08      	it	eq
 8012c1c:	f8c8 1000 	streq.w	r1, [r8]
 8012c20:	5162      	str	r2, [r4, r5]
 8012c22:	604b      	str	r3, [r1, #4]
 8012c24:	4638      	mov	r0, r7
 8012c26:	f104 060b 	add.w	r6, r4, #11
 8012c2a:	f000 f829 	bl	8012c80 <__malloc_unlock>
 8012c2e:	f026 0607 	bic.w	r6, r6, #7
 8012c32:	1d23      	adds	r3, r4, #4
 8012c34:	1af2      	subs	r2, r6, r3
 8012c36:	d0ae      	beq.n	8012b96 <_malloc_r+0x22>
 8012c38:	1b9b      	subs	r3, r3, r6
 8012c3a:	50a3      	str	r3, [r4, r2]
 8012c3c:	e7ab      	b.n	8012b96 <_malloc_r+0x22>
 8012c3e:	42a3      	cmp	r3, r4
 8012c40:	6862      	ldr	r2, [r4, #4]
 8012c42:	d1dd      	bne.n	8012c00 <_malloc_r+0x8c>
 8012c44:	f8c8 2000 	str.w	r2, [r8]
 8012c48:	e7ec      	b.n	8012c24 <_malloc_r+0xb0>
 8012c4a:	4623      	mov	r3, r4
 8012c4c:	6864      	ldr	r4, [r4, #4]
 8012c4e:	e7ac      	b.n	8012baa <_malloc_r+0x36>
 8012c50:	4634      	mov	r4, r6
 8012c52:	6876      	ldr	r6, [r6, #4]
 8012c54:	e7b4      	b.n	8012bc0 <_malloc_r+0x4c>
 8012c56:	4613      	mov	r3, r2
 8012c58:	e7cc      	b.n	8012bf4 <_malloc_r+0x80>
 8012c5a:	230c      	movs	r3, #12
 8012c5c:	603b      	str	r3, [r7, #0]
 8012c5e:	4638      	mov	r0, r7
 8012c60:	f000 f80e 	bl	8012c80 <__malloc_unlock>
 8012c64:	e797      	b.n	8012b96 <_malloc_r+0x22>
 8012c66:	6025      	str	r5, [r4, #0]
 8012c68:	e7dc      	b.n	8012c24 <_malloc_r+0xb0>
 8012c6a:	605b      	str	r3, [r3, #4]
 8012c6c:	deff      	udf	#255	; 0xff
 8012c6e:	bf00      	nop
 8012c70:	2000e424 	.word	0x2000e424

08012c74 <__malloc_lock>:
 8012c74:	4801      	ldr	r0, [pc, #4]	; (8012c7c <__malloc_lock+0x8>)
 8012c76:	f7ff b879 	b.w	8011d6c <__retarget_lock_acquire_recursive>
 8012c7a:	bf00      	nop
 8012c7c:	2000e420 	.word	0x2000e420

08012c80 <__malloc_unlock>:
 8012c80:	4801      	ldr	r0, [pc, #4]	; (8012c88 <__malloc_unlock+0x8>)
 8012c82:	f7ff b874 	b.w	8011d6e <__retarget_lock_release_recursive>
 8012c86:	bf00      	nop
 8012c88:	2000e420 	.word	0x2000e420

08012c8c <_Balloc>:
 8012c8c:	b570      	push	{r4, r5, r6, lr}
 8012c8e:	69c6      	ldr	r6, [r0, #28]
 8012c90:	4604      	mov	r4, r0
 8012c92:	460d      	mov	r5, r1
 8012c94:	b976      	cbnz	r6, 8012cb4 <_Balloc+0x28>
 8012c96:	2010      	movs	r0, #16
 8012c98:	f7ff ff44 	bl	8012b24 <malloc>
 8012c9c:	4602      	mov	r2, r0
 8012c9e:	61e0      	str	r0, [r4, #28]
 8012ca0:	b920      	cbnz	r0, 8012cac <_Balloc+0x20>
 8012ca2:	4b18      	ldr	r3, [pc, #96]	; (8012d04 <_Balloc+0x78>)
 8012ca4:	4818      	ldr	r0, [pc, #96]	; (8012d08 <_Balloc+0x7c>)
 8012ca6:	216b      	movs	r1, #107	; 0x6b
 8012ca8:	f001 fd66 	bl	8014778 <__assert_func>
 8012cac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012cb0:	6006      	str	r6, [r0, #0]
 8012cb2:	60c6      	str	r6, [r0, #12]
 8012cb4:	69e6      	ldr	r6, [r4, #28]
 8012cb6:	68f3      	ldr	r3, [r6, #12]
 8012cb8:	b183      	cbz	r3, 8012cdc <_Balloc+0x50>
 8012cba:	69e3      	ldr	r3, [r4, #28]
 8012cbc:	68db      	ldr	r3, [r3, #12]
 8012cbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cc2:	b9b8      	cbnz	r0, 8012cf4 <_Balloc+0x68>
 8012cc4:	2101      	movs	r1, #1
 8012cc6:	fa01 f605 	lsl.w	r6, r1, r5
 8012cca:	1d72      	adds	r2, r6, #5
 8012ccc:	0092      	lsls	r2, r2, #2
 8012cce:	4620      	mov	r0, r4
 8012cd0:	f001 fd70 	bl	80147b4 <_calloc_r>
 8012cd4:	b160      	cbz	r0, 8012cf0 <_Balloc+0x64>
 8012cd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012cda:	e00e      	b.n	8012cfa <_Balloc+0x6e>
 8012cdc:	2221      	movs	r2, #33	; 0x21
 8012cde:	2104      	movs	r1, #4
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	f001 fd67 	bl	80147b4 <_calloc_r>
 8012ce6:	69e3      	ldr	r3, [r4, #28]
 8012ce8:	60f0      	str	r0, [r6, #12]
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d1e4      	bne.n	8012cba <_Balloc+0x2e>
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	bd70      	pop	{r4, r5, r6, pc}
 8012cf4:	6802      	ldr	r2, [r0, #0]
 8012cf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d00:	e7f7      	b.n	8012cf2 <_Balloc+0x66>
 8012d02:	bf00      	nop
 8012d04:	08015780 	.word	0x08015780
 8012d08:	08015800 	.word	0x08015800

08012d0c <_Bfree>:
 8012d0c:	b570      	push	{r4, r5, r6, lr}
 8012d0e:	69c6      	ldr	r6, [r0, #28]
 8012d10:	4605      	mov	r5, r0
 8012d12:	460c      	mov	r4, r1
 8012d14:	b976      	cbnz	r6, 8012d34 <_Bfree+0x28>
 8012d16:	2010      	movs	r0, #16
 8012d18:	f7ff ff04 	bl	8012b24 <malloc>
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	61e8      	str	r0, [r5, #28]
 8012d20:	b920      	cbnz	r0, 8012d2c <_Bfree+0x20>
 8012d22:	4b09      	ldr	r3, [pc, #36]	; (8012d48 <_Bfree+0x3c>)
 8012d24:	4809      	ldr	r0, [pc, #36]	; (8012d4c <_Bfree+0x40>)
 8012d26:	218f      	movs	r1, #143	; 0x8f
 8012d28:	f001 fd26 	bl	8014778 <__assert_func>
 8012d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d30:	6006      	str	r6, [r0, #0]
 8012d32:	60c6      	str	r6, [r0, #12]
 8012d34:	b13c      	cbz	r4, 8012d46 <_Bfree+0x3a>
 8012d36:	69eb      	ldr	r3, [r5, #28]
 8012d38:	6862      	ldr	r2, [r4, #4]
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d40:	6021      	str	r1, [r4, #0]
 8012d42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d46:	bd70      	pop	{r4, r5, r6, pc}
 8012d48:	08015780 	.word	0x08015780
 8012d4c:	08015800 	.word	0x08015800

08012d50 <__multadd>:
 8012d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d54:	690d      	ldr	r5, [r1, #16]
 8012d56:	4607      	mov	r7, r0
 8012d58:	460c      	mov	r4, r1
 8012d5a:	461e      	mov	r6, r3
 8012d5c:	f101 0c14 	add.w	ip, r1, #20
 8012d60:	2000      	movs	r0, #0
 8012d62:	f8dc 3000 	ldr.w	r3, [ip]
 8012d66:	b299      	uxth	r1, r3
 8012d68:	fb02 6101 	mla	r1, r2, r1, r6
 8012d6c:	0c1e      	lsrs	r6, r3, #16
 8012d6e:	0c0b      	lsrs	r3, r1, #16
 8012d70:	fb02 3306 	mla	r3, r2, r6, r3
 8012d74:	b289      	uxth	r1, r1
 8012d76:	3001      	adds	r0, #1
 8012d78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d7c:	4285      	cmp	r5, r0
 8012d7e:	f84c 1b04 	str.w	r1, [ip], #4
 8012d82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d86:	dcec      	bgt.n	8012d62 <__multadd+0x12>
 8012d88:	b30e      	cbz	r6, 8012dce <__multadd+0x7e>
 8012d8a:	68a3      	ldr	r3, [r4, #8]
 8012d8c:	42ab      	cmp	r3, r5
 8012d8e:	dc19      	bgt.n	8012dc4 <__multadd+0x74>
 8012d90:	6861      	ldr	r1, [r4, #4]
 8012d92:	4638      	mov	r0, r7
 8012d94:	3101      	adds	r1, #1
 8012d96:	f7ff ff79 	bl	8012c8c <_Balloc>
 8012d9a:	4680      	mov	r8, r0
 8012d9c:	b928      	cbnz	r0, 8012daa <__multadd+0x5a>
 8012d9e:	4602      	mov	r2, r0
 8012da0:	4b0c      	ldr	r3, [pc, #48]	; (8012dd4 <__multadd+0x84>)
 8012da2:	480d      	ldr	r0, [pc, #52]	; (8012dd8 <__multadd+0x88>)
 8012da4:	21ba      	movs	r1, #186	; 0xba
 8012da6:	f001 fce7 	bl	8014778 <__assert_func>
 8012daa:	6922      	ldr	r2, [r4, #16]
 8012dac:	3202      	adds	r2, #2
 8012dae:	f104 010c 	add.w	r1, r4, #12
 8012db2:	0092      	lsls	r2, r2, #2
 8012db4:	300c      	adds	r0, #12
 8012db6:	f7fe ffdb 	bl	8011d70 <memcpy>
 8012dba:	4621      	mov	r1, r4
 8012dbc:	4638      	mov	r0, r7
 8012dbe:	f7ff ffa5 	bl	8012d0c <_Bfree>
 8012dc2:	4644      	mov	r4, r8
 8012dc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012dc8:	3501      	adds	r5, #1
 8012dca:	615e      	str	r6, [r3, #20]
 8012dcc:	6125      	str	r5, [r4, #16]
 8012dce:	4620      	mov	r0, r4
 8012dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dd4:	080157ef 	.word	0x080157ef
 8012dd8:	08015800 	.word	0x08015800

08012ddc <__s2b>:
 8012ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012de0:	460c      	mov	r4, r1
 8012de2:	4615      	mov	r5, r2
 8012de4:	461f      	mov	r7, r3
 8012de6:	2209      	movs	r2, #9
 8012de8:	3308      	adds	r3, #8
 8012dea:	4606      	mov	r6, r0
 8012dec:	fb93 f3f2 	sdiv	r3, r3, r2
 8012df0:	2100      	movs	r1, #0
 8012df2:	2201      	movs	r2, #1
 8012df4:	429a      	cmp	r2, r3
 8012df6:	db09      	blt.n	8012e0c <__s2b+0x30>
 8012df8:	4630      	mov	r0, r6
 8012dfa:	f7ff ff47 	bl	8012c8c <_Balloc>
 8012dfe:	b940      	cbnz	r0, 8012e12 <__s2b+0x36>
 8012e00:	4602      	mov	r2, r0
 8012e02:	4b19      	ldr	r3, [pc, #100]	; (8012e68 <__s2b+0x8c>)
 8012e04:	4819      	ldr	r0, [pc, #100]	; (8012e6c <__s2b+0x90>)
 8012e06:	21d3      	movs	r1, #211	; 0xd3
 8012e08:	f001 fcb6 	bl	8014778 <__assert_func>
 8012e0c:	0052      	lsls	r2, r2, #1
 8012e0e:	3101      	adds	r1, #1
 8012e10:	e7f0      	b.n	8012df4 <__s2b+0x18>
 8012e12:	9b08      	ldr	r3, [sp, #32]
 8012e14:	6143      	str	r3, [r0, #20]
 8012e16:	2d09      	cmp	r5, #9
 8012e18:	f04f 0301 	mov.w	r3, #1
 8012e1c:	6103      	str	r3, [r0, #16]
 8012e1e:	dd16      	ble.n	8012e4e <__s2b+0x72>
 8012e20:	f104 0909 	add.w	r9, r4, #9
 8012e24:	46c8      	mov	r8, r9
 8012e26:	442c      	add	r4, r5
 8012e28:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e2c:	4601      	mov	r1, r0
 8012e2e:	3b30      	subs	r3, #48	; 0x30
 8012e30:	220a      	movs	r2, #10
 8012e32:	4630      	mov	r0, r6
 8012e34:	f7ff ff8c 	bl	8012d50 <__multadd>
 8012e38:	45a0      	cmp	r8, r4
 8012e3a:	d1f5      	bne.n	8012e28 <__s2b+0x4c>
 8012e3c:	f1a5 0408 	sub.w	r4, r5, #8
 8012e40:	444c      	add	r4, r9
 8012e42:	1b2d      	subs	r5, r5, r4
 8012e44:	1963      	adds	r3, r4, r5
 8012e46:	42bb      	cmp	r3, r7
 8012e48:	db04      	blt.n	8012e54 <__s2b+0x78>
 8012e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e4e:	340a      	adds	r4, #10
 8012e50:	2509      	movs	r5, #9
 8012e52:	e7f6      	b.n	8012e42 <__s2b+0x66>
 8012e54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e58:	4601      	mov	r1, r0
 8012e5a:	3b30      	subs	r3, #48	; 0x30
 8012e5c:	220a      	movs	r2, #10
 8012e5e:	4630      	mov	r0, r6
 8012e60:	f7ff ff76 	bl	8012d50 <__multadd>
 8012e64:	e7ee      	b.n	8012e44 <__s2b+0x68>
 8012e66:	bf00      	nop
 8012e68:	080157ef 	.word	0x080157ef
 8012e6c:	08015800 	.word	0x08015800

08012e70 <__hi0bits>:
 8012e70:	0c03      	lsrs	r3, r0, #16
 8012e72:	041b      	lsls	r3, r3, #16
 8012e74:	b9d3      	cbnz	r3, 8012eac <__hi0bits+0x3c>
 8012e76:	0400      	lsls	r0, r0, #16
 8012e78:	2310      	movs	r3, #16
 8012e7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012e7e:	bf04      	itt	eq
 8012e80:	0200      	lsleq	r0, r0, #8
 8012e82:	3308      	addeq	r3, #8
 8012e84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012e88:	bf04      	itt	eq
 8012e8a:	0100      	lsleq	r0, r0, #4
 8012e8c:	3304      	addeq	r3, #4
 8012e8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012e92:	bf04      	itt	eq
 8012e94:	0080      	lsleq	r0, r0, #2
 8012e96:	3302      	addeq	r3, #2
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	db05      	blt.n	8012ea8 <__hi0bits+0x38>
 8012e9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ea0:	f103 0301 	add.w	r3, r3, #1
 8012ea4:	bf08      	it	eq
 8012ea6:	2320      	moveq	r3, #32
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	4770      	bx	lr
 8012eac:	2300      	movs	r3, #0
 8012eae:	e7e4      	b.n	8012e7a <__hi0bits+0xa>

08012eb0 <__lo0bits>:
 8012eb0:	6803      	ldr	r3, [r0, #0]
 8012eb2:	f013 0207 	ands.w	r2, r3, #7
 8012eb6:	d00c      	beq.n	8012ed2 <__lo0bits+0x22>
 8012eb8:	07d9      	lsls	r1, r3, #31
 8012eba:	d422      	bmi.n	8012f02 <__lo0bits+0x52>
 8012ebc:	079a      	lsls	r2, r3, #30
 8012ebe:	bf49      	itett	mi
 8012ec0:	085b      	lsrmi	r3, r3, #1
 8012ec2:	089b      	lsrpl	r3, r3, #2
 8012ec4:	6003      	strmi	r3, [r0, #0]
 8012ec6:	2201      	movmi	r2, #1
 8012ec8:	bf5c      	itt	pl
 8012eca:	6003      	strpl	r3, [r0, #0]
 8012ecc:	2202      	movpl	r2, #2
 8012ece:	4610      	mov	r0, r2
 8012ed0:	4770      	bx	lr
 8012ed2:	b299      	uxth	r1, r3
 8012ed4:	b909      	cbnz	r1, 8012eda <__lo0bits+0x2a>
 8012ed6:	0c1b      	lsrs	r3, r3, #16
 8012ed8:	2210      	movs	r2, #16
 8012eda:	b2d9      	uxtb	r1, r3
 8012edc:	b909      	cbnz	r1, 8012ee2 <__lo0bits+0x32>
 8012ede:	3208      	adds	r2, #8
 8012ee0:	0a1b      	lsrs	r3, r3, #8
 8012ee2:	0719      	lsls	r1, r3, #28
 8012ee4:	bf04      	itt	eq
 8012ee6:	091b      	lsreq	r3, r3, #4
 8012ee8:	3204      	addeq	r2, #4
 8012eea:	0799      	lsls	r1, r3, #30
 8012eec:	bf04      	itt	eq
 8012eee:	089b      	lsreq	r3, r3, #2
 8012ef0:	3202      	addeq	r2, #2
 8012ef2:	07d9      	lsls	r1, r3, #31
 8012ef4:	d403      	bmi.n	8012efe <__lo0bits+0x4e>
 8012ef6:	085b      	lsrs	r3, r3, #1
 8012ef8:	f102 0201 	add.w	r2, r2, #1
 8012efc:	d003      	beq.n	8012f06 <__lo0bits+0x56>
 8012efe:	6003      	str	r3, [r0, #0]
 8012f00:	e7e5      	b.n	8012ece <__lo0bits+0x1e>
 8012f02:	2200      	movs	r2, #0
 8012f04:	e7e3      	b.n	8012ece <__lo0bits+0x1e>
 8012f06:	2220      	movs	r2, #32
 8012f08:	e7e1      	b.n	8012ece <__lo0bits+0x1e>
	...

08012f0c <__i2b>:
 8012f0c:	b510      	push	{r4, lr}
 8012f0e:	460c      	mov	r4, r1
 8012f10:	2101      	movs	r1, #1
 8012f12:	f7ff febb 	bl	8012c8c <_Balloc>
 8012f16:	4602      	mov	r2, r0
 8012f18:	b928      	cbnz	r0, 8012f26 <__i2b+0x1a>
 8012f1a:	4b05      	ldr	r3, [pc, #20]	; (8012f30 <__i2b+0x24>)
 8012f1c:	4805      	ldr	r0, [pc, #20]	; (8012f34 <__i2b+0x28>)
 8012f1e:	f240 1145 	movw	r1, #325	; 0x145
 8012f22:	f001 fc29 	bl	8014778 <__assert_func>
 8012f26:	2301      	movs	r3, #1
 8012f28:	6144      	str	r4, [r0, #20]
 8012f2a:	6103      	str	r3, [r0, #16]
 8012f2c:	bd10      	pop	{r4, pc}
 8012f2e:	bf00      	nop
 8012f30:	080157ef 	.word	0x080157ef
 8012f34:	08015800 	.word	0x08015800

08012f38 <__multiply>:
 8012f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f3c:	4691      	mov	r9, r2
 8012f3e:	690a      	ldr	r2, [r1, #16]
 8012f40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	bfb8      	it	lt
 8012f48:	460b      	movlt	r3, r1
 8012f4a:	460c      	mov	r4, r1
 8012f4c:	bfbc      	itt	lt
 8012f4e:	464c      	movlt	r4, r9
 8012f50:	4699      	movlt	r9, r3
 8012f52:	6927      	ldr	r7, [r4, #16]
 8012f54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012f58:	68a3      	ldr	r3, [r4, #8]
 8012f5a:	6861      	ldr	r1, [r4, #4]
 8012f5c:	eb07 060a 	add.w	r6, r7, sl
 8012f60:	42b3      	cmp	r3, r6
 8012f62:	b085      	sub	sp, #20
 8012f64:	bfb8      	it	lt
 8012f66:	3101      	addlt	r1, #1
 8012f68:	f7ff fe90 	bl	8012c8c <_Balloc>
 8012f6c:	b930      	cbnz	r0, 8012f7c <__multiply+0x44>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	4b44      	ldr	r3, [pc, #272]	; (8013084 <__multiply+0x14c>)
 8012f72:	4845      	ldr	r0, [pc, #276]	; (8013088 <__multiply+0x150>)
 8012f74:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012f78:	f001 fbfe 	bl	8014778 <__assert_func>
 8012f7c:	f100 0514 	add.w	r5, r0, #20
 8012f80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012f84:	462b      	mov	r3, r5
 8012f86:	2200      	movs	r2, #0
 8012f88:	4543      	cmp	r3, r8
 8012f8a:	d321      	bcc.n	8012fd0 <__multiply+0x98>
 8012f8c:	f104 0314 	add.w	r3, r4, #20
 8012f90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012f94:	f109 0314 	add.w	r3, r9, #20
 8012f98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012f9c:	9202      	str	r2, [sp, #8]
 8012f9e:	1b3a      	subs	r2, r7, r4
 8012fa0:	3a15      	subs	r2, #21
 8012fa2:	f022 0203 	bic.w	r2, r2, #3
 8012fa6:	3204      	adds	r2, #4
 8012fa8:	f104 0115 	add.w	r1, r4, #21
 8012fac:	428f      	cmp	r7, r1
 8012fae:	bf38      	it	cc
 8012fb0:	2204      	movcc	r2, #4
 8012fb2:	9201      	str	r2, [sp, #4]
 8012fb4:	9a02      	ldr	r2, [sp, #8]
 8012fb6:	9303      	str	r3, [sp, #12]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d80c      	bhi.n	8012fd6 <__multiply+0x9e>
 8012fbc:	2e00      	cmp	r6, #0
 8012fbe:	dd03      	ble.n	8012fc8 <__multiply+0x90>
 8012fc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d05b      	beq.n	8013080 <__multiply+0x148>
 8012fc8:	6106      	str	r6, [r0, #16]
 8012fca:	b005      	add	sp, #20
 8012fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd0:	f843 2b04 	str.w	r2, [r3], #4
 8012fd4:	e7d8      	b.n	8012f88 <__multiply+0x50>
 8012fd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8012fda:	f1ba 0f00 	cmp.w	sl, #0
 8012fde:	d024      	beq.n	801302a <__multiply+0xf2>
 8012fe0:	f104 0e14 	add.w	lr, r4, #20
 8012fe4:	46a9      	mov	r9, r5
 8012fe6:	f04f 0c00 	mov.w	ip, #0
 8012fea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012fee:	f8d9 1000 	ldr.w	r1, [r9]
 8012ff2:	fa1f fb82 	uxth.w	fp, r2
 8012ff6:	b289      	uxth	r1, r1
 8012ff8:	fb0a 110b 	mla	r1, sl, fp, r1
 8012ffc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013000:	f8d9 2000 	ldr.w	r2, [r9]
 8013004:	4461      	add	r1, ip
 8013006:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801300a:	fb0a c20b 	mla	r2, sl, fp, ip
 801300e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013012:	b289      	uxth	r1, r1
 8013014:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013018:	4577      	cmp	r7, lr
 801301a:	f849 1b04 	str.w	r1, [r9], #4
 801301e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013022:	d8e2      	bhi.n	8012fea <__multiply+0xb2>
 8013024:	9a01      	ldr	r2, [sp, #4]
 8013026:	f845 c002 	str.w	ip, [r5, r2]
 801302a:	9a03      	ldr	r2, [sp, #12]
 801302c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013030:	3304      	adds	r3, #4
 8013032:	f1b9 0f00 	cmp.w	r9, #0
 8013036:	d021      	beq.n	801307c <__multiply+0x144>
 8013038:	6829      	ldr	r1, [r5, #0]
 801303a:	f104 0c14 	add.w	ip, r4, #20
 801303e:	46ae      	mov	lr, r5
 8013040:	f04f 0a00 	mov.w	sl, #0
 8013044:	f8bc b000 	ldrh.w	fp, [ip]
 8013048:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801304c:	fb09 220b 	mla	r2, r9, fp, r2
 8013050:	4452      	add	r2, sl
 8013052:	b289      	uxth	r1, r1
 8013054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013058:	f84e 1b04 	str.w	r1, [lr], #4
 801305c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013064:	f8be 1000 	ldrh.w	r1, [lr]
 8013068:	fb09 110a 	mla	r1, r9, sl, r1
 801306c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013070:	4567      	cmp	r7, ip
 8013072:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013076:	d8e5      	bhi.n	8013044 <__multiply+0x10c>
 8013078:	9a01      	ldr	r2, [sp, #4]
 801307a:	50a9      	str	r1, [r5, r2]
 801307c:	3504      	adds	r5, #4
 801307e:	e799      	b.n	8012fb4 <__multiply+0x7c>
 8013080:	3e01      	subs	r6, #1
 8013082:	e79b      	b.n	8012fbc <__multiply+0x84>
 8013084:	080157ef 	.word	0x080157ef
 8013088:	08015800 	.word	0x08015800

0801308c <__pow5mult>:
 801308c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013090:	4615      	mov	r5, r2
 8013092:	f012 0203 	ands.w	r2, r2, #3
 8013096:	4606      	mov	r6, r0
 8013098:	460f      	mov	r7, r1
 801309a:	d007      	beq.n	80130ac <__pow5mult+0x20>
 801309c:	4c25      	ldr	r4, [pc, #148]	; (8013134 <__pow5mult+0xa8>)
 801309e:	3a01      	subs	r2, #1
 80130a0:	2300      	movs	r3, #0
 80130a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130a6:	f7ff fe53 	bl	8012d50 <__multadd>
 80130aa:	4607      	mov	r7, r0
 80130ac:	10ad      	asrs	r5, r5, #2
 80130ae:	d03d      	beq.n	801312c <__pow5mult+0xa0>
 80130b0:	69f4      	ldr	r4, [r6, #28]
 80130b2:	b97c      	cbnz	r4, 80130d4 <__pow5mult+0x48>
 80130b4:	2010      	movs	r0, #16
 80130b6:	f7ff fd35 	bl	8012b24 <malloc>
 80130ba:	4602      	mov	r2, r0
 80130bc:	61f0      	str	r0, [r6, #28]
 80130be:	b928      	cbnz	r0, 80130cc <__pow5mult+0x40>
 80130c0:	4b1d      	ldr	r3, [pc, #116]	; (8013138 <__pow5mult+0xac>)
 80130c2:	481e      	ldr	r0, [pc, #120]	; (801313c <__pow5mult+0xb0>)
 80130c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80130c8:	f001 fb56 	bl	8014778 <__assert_func>
 80130cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130d0:	6004      	str	r4, [r0, #0]
 80130d2:	60c4      	str	r4, [r0, #12]
 80130d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80130d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80130dc:	b94c      	cbnz	r4, 80130f2 <__pow5mult+0x66>
 80130de:	f240 2171 	movw	r1, #625	; 0x271
 80130e2:	4630      	mov	r0, r6
 80130e4:	f7ff ff12 	bl	8012f0c <__i2b>
 80130e8:	2300      	movs	r3, #0
 80130ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80130ee:	4604      	mov	r4, r0
 80130f0:	6003      	str	r3, [r0, #0]
 80130f2:	f04f 0900 	mov.w	r9, #0
 80130f6:	07eb      	lsls	r3, r5, #31
 80130f8:	d50a      	bpl.n	8013110 <__pow5mult+0x84>
 80130fa:	4639      	mov	r1, r7
 80130fc:	4622      	mov	r2, r4
 80130fe:	4630      	mov	r0, r6
 8013100:	f7ff ff1a 	bl	8012f38 <__multiply>
 8013104:	4639      	mov	r1, r7
 8013106:	4680      	mov	r8, r0
 8013108:	4630      	mov	r0, r6
 801310a:	f7ff fdff 	bl	8012d0c <_Bfree>
 801310e:	4647      	mov	r7, r8
 8013110:	106d      	asrs	r5, r5, #1
 8013112:	d00b      	beq.n	801312c <__pow5mult+0xa0>
 8013114:	6820      	ldr	r0, [r4, #0]
 8013116:	b938      	cbnz	r0, 8013128 <__pow5mult+0x9c>
 8013118:	4622      	mov	r2, r4
 801311a:	4621      	mov	r1, r4
 801311c:	4630      	mov	r0, r6
 801311e:	f7ff ff0b 	bl	8012f38 <__multiply>
 8013122:	6020      	str	r0, [r4, #0]
 8013124:	f8c0 9000 	str.w	r9, [r0]
 8013128:	4604      	mov	r4, r0
 801312a:	e7e4      	b.n	80130f6 <__pow5mult+0x6a>
 801312c:	4638      	mov	r0, r7
 801312e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013132:	bf00      	nop
 8013134:	08015950 	.word	0x08015950
 8013138:	08015780 	.word	0x08015780
 801313c:	08015800 	.word	0x08015800

08013140 <__lshift>:
 8013140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013144:	460c      	mov	r4, r1
 8013146:	6849      	ldr	r1, [r1, #4]
 8013148:	6923      	ldr	r3, [r4, #16]
 801314a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801314e:	68a3      	ldr	r3, [r4, #8]
 8013150:	4607      	mov	r7, r0
 8013152:	4691      	mov	r9, r2
 8013154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013158:	f108 0601 	add.w	r6, r8, #1
 801315c:	42b3      	cmp	r3, r6
 801315e:	db0b      	blt.n	8013178 <__lshift+0x38>
 8013160:	4638      	mov	r0, r7
 8013162:	f7ff fd93 	bl	8012c8c <_Balloc>
 8013166:	4605      	mov	r5, r0
 8013168:	b948      	cbnz	r0, 801317e <__lshift+0x3e>
 801316a:	4602      	mov	r2, r0
 801316c:	4b28      	ldr	r3, [pc, #160]	; (8013210 <__lshift+0xd0>)
 801316e:	4829      	ldr	r0, [pc, #164]	; (8013214 <__lshift+0xd4>)
 8013170:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013174:	f001 fb00 	bl	8014778 <__assert_func>
 8013178:	3101      	adds	r1, #1
 801317a:	005b      	lsls	r3, r3, #1
 801317c:	e7ee      	b.n	801315c <__lshift+0x1c>
 801317e:	2300      	movs	r3, #0
 8013180:	f100 0114 	add.w	r1, r0, #20
 8013184:	f100 0210 	add.w	r2, r0, #16
 8013188:	4618      	mov	r0, r3
 801318a:	4553      	cmp	r3, sl
 801318c:	db33      	blt.n	80131f6 <__lshift+0xb6>
 801318e:	6920      	ldr	r0, [r4, #16]
 8013190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013194:	f104 0314 	add.w	r3, r4, #20
 8013198:	f019 091f 	ands.w	r9, r9, #31
 801319c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131a4:	d02b      	beq.n	80131fe <__lshift+0xbe>
 80131a6:	f1c9 0e20 	rsb	lr, r9, #32
 80131aa:	468a      	mov	sl, r1
 80131ac:	2200      	movs	r2, #0
 80131ae:	6818      	ldr	r0, [r3, #0]
 80131b0:	fa00 f009 	lsl.w	r0, r0, r9
 80131b4:	4310      	orrs	r0, r2
 80131b6:	f84a 0b04 	str.w	r0, [sl], #4
 80131ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80131be:	459c      	cmp	ip, r3
 80131c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80131c4:	d8f3      	bhi.n	80131ae <__lshift+0x6e>
 80131c6:	ebac 0304 	sub.w	r3, ip, r4
 80131ca:	3b15      	subs	r3, #21
 80131cc:	f023 0303 	bic.w	r3, r3, #3
 80131d0:	3304      	adds	r3, #4
 80131d2:	f104 0015 	add.w	r0, r4, #21
 80131d6:	4584      	cmp	ip, r0
 80131d8:	bf38      	it	cc
 80131da:	2304      	movcc	r3, #4
 80131dc:	50ca      	str	r2, [r1, r3]
 80131de:	b10a      	cbz	r2, 80131e4 <__lshift+0xa4>
 80131e0:	f108 0602 	add.w	r6, r8, #2
 80131e4:	3e01      	subs	r6, #1
 80131e6:	4638      	mov	r0, r7
 80131e8:	612e      	str	r6, [r5, #16]
 80131ea:	4621      	mov	r1, r4
 80131ec:	f7ff fd8e 	bl	8012d0c <_Bfree>
 80131f0:	4628      	mov	r0, r5
 80131f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80131fa:	3301      	adds	r3, #1
 80131fc:	e7c5      	b.n	801318a <__lshift+0x4a>
 80131fe:	3904      	subs	r1, #4
 8013200:	f853 2b04 	ldr.w	r2, [r3], #4
 8013204:	f841 2f04 	str.w	r2, [r1, #4]!
 8013208:	459c      	cmp	ip, r3
 801320a:	d8f9      	bhi.n	8013200 <__lshift+0xc0>
 801320c:	e7ea      	b.n	80131e4 <__lshift+0xa4>
 801320e:	bf00      	nop
 8013210:	080157ef 	.word	0x080157ef
 8013214:	08015800 	.word	0x08015800

08013218 <__mcmp>:
 8013218:	b530      	push	{r4, r5, lr}
 801321a:	6902      	ldr	r2, [r0, #16]
 801321c:	690c      	ldr	r4, [r1, #16]
 801321e:	1b12      	subs	r2, r2, r4
 8013220:	d10e      	bne.n	8013240 <__mcmp+0x28>
 8013222:	f100 0314 	add.w	r3, r0, #20
 8013226:	3114      	adds	r1, #20
 8013228:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801322c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013230:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013234:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013238:	42a5      	cmp	r5, r4
 801323a:	d003      	beq.n	8013244 <__mcmp+0x2c>
 801323c:	d305      	bcc.n	801324a <__mcmp+0x32>
 801323e:	2201      	movs	r2, #1
 8013240:	4610      	mov	r0, r2
 8013242:	bd30      	pop	{r4, r5, pc}
 8013244:	4283      	cmp	r3, r0
 8013246:	d3f3      	bcc.n	8013230 <__mcmp+0x18>
 8013248:	e7fa      	b.n	8013240 <__mcmp+0x28>
 801324a:	f04f 32ff 	mov.w	r2, #4294967295
 801324e:	e7f7      	b.n	8013240 <__mcmp+0x28>

08013250 <__mdiff>:
 8013250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013254:	460c      	mov	r4, r1
 8013256:	4606      	mov	r6, r0
 8013258:	4611      	mov	r1, r2
 801325a:	4620      	mov	r0, r4
 801325c:	4690      	mov	r8, r2
 801325e:	f7ff ffdb 	bl	8013218 <__mcmp>
 8013262:	1e05      	subs	r5, r0, #0
 8013264:	d110      	bne.n	8013288 <__mdiff+0x38>
 8013266:	4629      	mov	r1, r5
 8013268:	4630      	mov	r0, r6
 801326a:	f7ff fd0f 	bl	8012c8c <_Balloc>
 801326e:	b930      	cbnz	r0, 801327e <__mdiff+0x2e>
 8013270:	4b3a      	ldr	r3, [pc, #232]	; (801335c <__mdiff+0x10c>)
 8013272:	4602      	mov	r2, r0
 8013274:	f240 2137 	movw	r1, #567	; 0x237
 8013278:	4839      	ldr	r0, [pc, #228]	; (8013360 <__mdiff+0x110>)
 801327a:	f001 fa7d 	bl	8014778 <__assert_func>
 801327e:	2301      	movs	r3, #1
 8013280:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013288:	bfa4      	itt	ge
 801328a:	4643      	movge	r3, r8
 801328c:	46a0      	movge	r8, r4
 801328e:	4630      	mov	r0, r6
 8013290:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013294:	bfa6      	itte	ge
 8013296:	461c      	movge	r4, r3
 8013298:	2500      	movge	r5, #0
 801329a:	2501      	movlt	r5, #1
 801329c:	f7ff fcf6 	bl	8012c8c <_Balloc>
 80132a0:	b920      	cbnz	r0, 80132ac <__mdiff+0x5c>
 80132a2:	4b2e      	ldr	r3, [pc, #184]	; (801335c <__mdiff+0x10c>)
 80132a4:	4602      	mov	r2, r0
 80132a6:	f240 2145 	movw	r1, #581	; 0x245
 80132aa:	e7e5      	b.n	8013278 <__mdiff+0x28>
 80132ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80132b0:	6926      	ldr	r6, [r4, #16]
 80132b2:	60c5      	str	r5, [r0, #12]
 80132b4:	f104 0914 	add.w	r9, r4, #20
 80132b8:	f108 0514 	add.w	r5, r8, #20
 80132bc:	f100 0e14 	add.w	lr, r0, #20
 80132c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80132c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80132c8:	f108 0210 	add.w	r2, r8, #16
 80132cc:	46f2      	mov	sl, lr
 80132ce:	2100      	movs	r1, #0
 80132d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80132d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80132d8:	fa11 f88b 	uxtah	r8, r1, fp
 80132dc:	b299      	uxth	r1, r3
 80132de:	0c1b      	lsrs	r3, r3, #16
 80132e0:	eba8 0801 	sub.w	r8, r8, r1
 80132e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80132e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80132ec:	fa1f f888 	uxth.w	r8, r8
 80132f0:	1419      	asrs	r1, r3, #16
 80132f2:	454e      	cmp	r6, r9
 80132f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80132f8:	f84a 3b04 	str.w	r3, [sl], #4
 80132fc:	d8e8      	bhi.n	80132d0 <__mdiff+0x80>
 80132fe:	1b33      	subs	r3, r6, r4
 8013300:	3b15      	subs	r3, #21
 8013302:	f023 0303 	bic.w	r3, r3, #3
 8013306:	3304      	adds	r3, #4
 8013308:	3415      	adds	r4, #21
 801330a:	42a6      	cmp	r6, r4
 801330c:	bf38      	it	cc
 801330e:	2304      	movcc	r3, #4
 8013310:	441d      	add	r5, r3
 8013312:	4473      	add	r3, lr
 8013314:	469e      	mov	lr, r3
 8013316:	462e      	mov	r6, r5
 8013318:	4566      	cmp	r6, ip
 801331a:	d30e      	bcc.n	801333a <__mdiff+0xea>
 801331c:	f10c 0203 	add.w	r2, ip, #3
 8013320:	1b52      	subs	r2, r2, r5
 8013322:	f022 0203 	bic.w	r2, r2, #3
 8013326:	3d03      	subs	r5, #3
 8013328:	45ac      	cmp	ip, r5
 801332a:	bf38      	it	cc
 801332c:	2200      	movcc	r2, #0
 801332e:	4413      	add	r3, r2
 8013330:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013334:	b17a      	cbz	r2, 8013356 <__mdiff+0x106>
 8013336:	6107      	str	r7, [r0, #16]
 8013338:	e7a4      	b.n	8013284 <__mdiff+0x34>
 801333a:	f856 8b04 	ldr.w	r8, [r6], #4
 801333e:	fa11 f288 	uxtah	r2, r1, r8
 8013342:	1414      	asrs	r4, r2, #16
 8013344:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013348:	b292      	uxth	r2, r2
 801334a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801334e:	f84e 2b04 	str.w	r2, [lr], #4
 8013352:	1421      	asrs	r1, r4, #16
 8013354:	e7e0      	b.n	8013318 <__mdiff+0xc8>
 8013356:	3f01      	subs	r7, #1
 8013358:	e7ea      	b.n	8013330 <__mdiff+0xe0>
 801335a:	bf00      	nop
 801335c:	080157ef 	.word	0x080157ef
 8013360:	08015800 	.word	0x08015800

08013364 <__ulp>:
 8013364:	b082      	sub	sp, #8
 8013366:	ed8d 0b00 	vstr	d0, [sp]
 801336a:	9a01      	ldr	r2, [sp, #4]
 801336c:	4b0f      	ldr	r3, [pc, #60]	; (80133ac <__ulp+0x48>)
 801336e:	4013      	ands	r3, r2
 8013370:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8013374:	2b00      	cmp	r3, #0
 8013376:	dc08      	bgt.n	801338a <__ulp+0x26>
 8013378:	425b      	negs	r3, r3
 801337a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801337e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013382:	da04      	bge.n	801338e <__ulp+0x2a>
 8013384:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013388:	4113      	asrs	r3, r2
 801338a:	2200      	movs	r2, #0
 801338c:	e008      	b.n	80133a0 <__ulp+0x3c>
 801338e:	f1a2 0314 	sub.w	r3, r2, #20
 8013392:	2b1e      	cmp	r3, #30
 8013394:	bfda      	itte	le
 8013396:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801339a:	40da      	lsrle	r2, r3
 801339c:	2201      	movgt	r2, #1
 801339e:	2300      	movs	r3, #0
 80133a0:	4619      	mov	r1, r3
 80133a2:	4610      	mov	r0, r2
 80133a4:	ec41 0b10 	vmov	d0, r0, r1
 80133a8:	b002      	add	sp, #8
 80133aa:	4770      	bx	lr
 80133ac:	7ff00000 	.word	0x7ff00000

080133b0 <__b2d>:
 80133b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b4:	6906      	ldr	r6, [r0, #16]
 80133b6:	f100 0814 	add.w	r8, r0, #20
 80133ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80133be:	1f37      	subs	r7, r6, #4
 80133c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80133c4:	4610      	mov	r0, r2
 80133c6:	f7ff fd53 	bl	8012e70 <__hi0bits>
 80133ca:	f1c0 0320 	rsb	r3, r0, #32
 80133ce:	280a      	cmp	r0, #10
 80133d0:	600b      	str	r3, [r1, #0]
 80133d2:	491b      	ldr	r1, [pc, #108]	; (8013440 <__b2d+0x90>)
 80133d4:	dc15      	bgt.n	8013402 <__b2d+0x52>
 80133d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80133da:	fa22 f30c 	lsr.w	r3, r2, ip
 80133de:	45b8      	cmp	r8, r7
 80133e0:	ea43 0501 	orr.w	r5, r3, r1
 80133e4:	bf34      	ite	cc
 80133e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80133ea:	2300      	movcs	r3, #0
 80133ec:	3015      	adds	r0, #21
 80133ee:	fa02 f000 	lsl.w	r0, r2, r0
 80133f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80133f6:	4303      	orrs	r3, r0
 80133f8:	461c      	mov	r4, r3
 80133fa:	ec45 4b10 	vmov	d0, r4, r5
 80133fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013402:	45b8      	cmp	r8, r7
 8013404:	bf3a      	itte	cc
 8013406:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801340a:	f1a6 0708 	subcc.w	r7, r6, #8
 801340e:	2300      	movcs	r3, #0
 8013410:	380b      	subs	r0, #11
 8013412:	d012      	beq.n	801343a <__b2d+0x8a>
 8013414:	f1c0 0120 	rsb	r1, r0, #32
 8013418:	fa23 f401 	lsr.w	r4, r3, r1
 801341c:	4082      	lsls	r2, r0
 801341e:	4322      	orrs	r2, r4
 8013420:	4547      	cmp	r7, r8
 8013422:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8013426:	bf8c      	ite	hi
 8013428:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801342c:	2200      	movls	r2, #0
 801342e:	4083      	lsls	r3, r0
 8013430:	40ca      	lsrs	r2, r1
 8013432:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013436:	4313      	orrs	r3, r2
 8013438:	e7de      	b.n	80133f8 <__b2d+0x48>
 801343a:	ea42 0501 	orr.w	r5, r2, r1
 801343e:	e7db      	b.n	80133f8 <__b2d+0x48>
 8013440:	3ff00000 	.word	0x3ff00000

08013444 <__d2b>:
 8013444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013448:	460f      	mov	r7, r1
 801344a:	2101      	movs	r1, #1
 801344c:	ec59 8b10 	vmov	r8, r9, d0
 8013450:	4616      	mov	r6, r2
 8013452:	f7ff fc1b 	bl	8012c8c <_Balloc>
 8013456:	4604      	mov	r4, r0
 8013458:	b930      	cbnz	r0, 8013468 <__d2b+0x24>
 801345a:	4602      	mov	r2, r0
 801345c:	4b24      	ldr	r3, [pc, #144]	; (80134f0 <__d2b+0xac>)
 801345e:	4825      	ldr	r0, [pc, #148]	; (80134f4 <__d2b+0xb0>)
 8013460:	f240 310f 	movw	r1, #783	; 0x30f
 8013464:	f001 f988 	bl	8014778 <__assert_func>
 8013468:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801346c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013470:	bb2d      	cbnz	r5, 80134be <__d2b+0x7a>
 8013472:	9301      	str	r3, [sp, #4]
 8013474:	f1b8 0300 	subs.w	r3, r8, #0
 8013478:	d026      	beq.n	80134c8 <__d2b+0x84>
 801347a:	4668      	mov	r0, sp
 801347c:	9300      	str	r3, [sp, #0]
 801347e:	f7ff fd17 	bl	8012eb0 <__lo0bits>
 8013482:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013486:	b1e8      	cbz	r0, 80134c4 <__d2b+0x80>
 8013488:	f1c0 0320 	rsb	r3, r0, #32
 801348c:	fa02 f303 	lsl.w	r3, r2, r3
 8013490:	430b      	orrs	r3, r1
 8013492:	40c2      	lsrs	r2, r0
 8013494:	6163      	str	r3, [r4, #20]
 8013496:	9201      	str	r2, [sp, #4]
 8013498:	9b01      	ldr	r3, [sp, #4]
 801349a:	61a3      	str	r3, [r4, #24]
 801349c:	2b00      	cmp	r3, #0
 801349e:	bf14      	ite	ne
 80134a0:	2202      	movne	r2, #2
 80134a2:	2201      	moveq	r2, #1
 80134a4:	6122      	str	r2, [r4, #16]
 80134a6:	b1bd      	cbz	r5, 80134d8 <__d2b+0x94>
 80134a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80134ac:	4405      	add	r5, r0
 80134ae:	603d      	str	r5, [r7, #0]
 80134b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80134b4:	6030      	str	r0, [r6, #0]
 80134b6:	4620      	mov	r0, r4
 80134b8:	b003      	add	sp, #12
 80134ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80134c2:	e7d6      	b.n	8013472 <__d2b+0x2e>
 80134c4:	6161      	str	r1, [r4, #20]
 80134c6:	e7e7      	b.n	8013498 <__d2b+0x54>
 80134c8:	a801      	add	r0, sp, #4
 80134ca:	f7ff fcf1 	bl	8012eb0 <__lo0bits>
 80134ce:	9b01      	ldr	r3, [sp, #4]
 80134d0:	6163      	str	r3, [r4, #20]
 80134d2:	3020      	adds	r0, #32
 80134d4:	2201      	movs	r2, #1
 80134d6:	e7e5      	b.n	80134a4 <__d2b+0x60>
 80134d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80134dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80134e0:	6038      	str	r0, [r7, #0]
 80134e2:	6918      	ldr	r0, [r3, #16]
 80134e4:	f7ff fcc4 	bl	8012e70 <__hi0bits>
 80134e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80134ec:	e7e2      	b.n	80134b4 <__d2b+0x70>
 80134ee:	bf00      	nop
 80134f0:	080157ef 	.word	0x080157ef
 80134f4:	08015800 	.word	0x08015800

080134f8 <__ratio>:
 80134f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134fc:	4688      	mov	r8, r1
 80134fe:	4669      	mov	r1, sp
 8013500:	4681      	mov	r9, r0
 8013502:	f7ff ff55 	bl	80133b0 <__b2d>
 8013506:	a901      	add	r1, sp, #4
 8013508:	4640      	mov	r0, r8
 801350a:	ec55 4b10 	vmov	r4, r5, d0
 801350e:	f7ff ff4f 	bl	80133b0 <__b2d>
 8013512:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013516:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801351a:	eba3 0c02 	sub.w	ip, r3, r2
 801351e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013522:	1a9b      	subs	r3, r3, r2
 8013524:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013528:	ec51 0b10 	vmov	r0, r1, d0
 801352c:	2b00      	cmp	r3, #0
 801352e:	bfd6      	itet	le
 8013530:	460a      	movle	r2, r1
 8013532:	462a      	movgt	r2, r5
 8013534:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013538:	468b      	mov	fp, r1
 801353a:	462f      	mov	r7, r5
 801353c:	bfd4      	ite	le
 801353e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013542:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013546:	4620      	mov	r0, r4
 8013548:	ee10 2a10 	vmov	r2, s0
 801354c:	465b      	mov	r3, fp
 801354e:	4639      	mov	r1, r7
 8013550:	f7ed f97c 	bl	800084c <__aeabi_ddiv>
 8013554:	ec41 0b10 	vmov	d0, r0, r1
 8013558:	b003      	add	sp, #12
 801355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801355e <__copybits>:
 801355e:	3901      	subs	r1, #1
 8013560:	b570      	push	{r4, r5, r6, lr}
 8013562:	1149      	asrs	r1, r1, #5
 8013564:	6914      	ldr	r4, [r2, #16]
 8013566:	3101      	adds	r1, #1
 8013568:	f102 0314 	add.w	r3, r2, #20
 801356c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013570:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013574:	1f05      	subs	r5, r0, #4
 8013576:	42a3      	cmp	r3, r4
 8013578:	d30c      	bcc.n	8013594 <__copybits+0x36>
 801357a:	1aa3      	subs	r3, r4, r2
 801357c:	3b11      	subs	r3, #17
 801357e:	f023 0303 	bic.w	r3, r3, #3
 8013582:	3211      	adds	r2, #17
 8013584:	42a2      	cmp	r2, r4
 8013586:	bf88      	it	hi
 8013588:	2300      	movhi	r3, #0
 801358a:	4418      	add	r0, r3
 801358c:	2300      	movs	r3, #0
 801358e:	4288      	cmp	r0, r1
 8013590:	d305      	bcc.n	801359e <__copybits+0x40>
 8013592:	bd70      	pop	{r4, r5, r6, pc}
 8013594:	f853 6b04 	ldr.w	r6, [r3], #4
 8013598:	f845 6f04 	str.w	r6, [r5, #4]!
 801359c:	e7eb      	b.n	8013576 <__copybits+0x18>
 801359e:	f840 3b04 	str.w	r3, [r0], #4
 80135a2:	e7f4      	b.n	801358e <__copybits+0x30>

080135a4 <__any_on>:
 80135a4:	f100 0214 	add.w	r2, r0, #20
 80135a8:	6900      	ldr	r0, [r0, #16]
 80135aa:	114b      	asrs	r3, r1, #5
 80135ac:	4298      	cmp	r0, r3
 80135ae:	b510      	push	{r4, lr}
 80135b0:	db11      	blt.n	80135d6 <__any_on+0x32>
 80135b2:	dd0a      	ble.n	80135ca <__any_on+0x26>
 80135b4:	f011 011f 	ands.w	r1, r1, #31
 80135b8:	d007      	beq.n	80135ca <__any_on+0x26>
 80135ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80135be:	fa24 f001 	lsr.w	r0, r4, r1
 80135c2:	fa00 f101 	lsl.w	r1, r0, r1
 80135c6:	428c      	cmp	r4, r1
 80135c8:	d10b      	bne.n	80135e2 <__any_on+0x3e>
 80135ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80135ce:	4293      	cmp	r3, r2
 80135d0:	d803      	bhi.n	80135da <__any_on+0x36>
 80135d2:	2000      	movs	r0, #0
 80135d4:	bd10      	pop	{r4, pc}
 80135d6:	4603      	mov	r3, r0
 80135d8:	e7f7      	b.n	80135ca <__any_on+0x26>
 80135da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135de:	2900      	cmp	r1, #0
 80135e0:	d0f5      	beq.n	80135ce <__any_on+0x2a>
 80135e2:	2001      	movs	r0, #1
 80135e4:	e7f6      	b.n	80135d4 <__any_on+0x30>

080135e6 <sulp>:
 80135e6:	b570      	push	{r4, r5, r6, lr}
 80135e8:	4604      	mov	r4, r0
 80135ea:	460d      	mov	r5, r1
 80135ec:	ec45 4b10 	vmov	d0, r4, r5
 80135f0:	4616      	mov	r6, r2
 80135f2:	f7ff feb7 	bl	8013364 <__ulp>
 80135f6:	ec51 0b10 	vmov	r0, r1, d0
 80135fa:	b17e      	cbz	r6, 801361c <sulp+0x36>
 80135fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013600:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013604:	2b00      	cmp	r3, #0
 8013606:	dd09      	ble.n	801361c <sulp+0x36>
 8013608:	051b      	lsls	r3, r3, #20
 801360a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801360e:	2400      	movs	r4, #0
 8013610:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013614:	4622      	mov	r2, r4
 8013616:	462b      	mov	r3, r5
 8013618:	f7ec ffee 	bl	80005f8 <__aeabi_dmul>
 801361c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013620 <_strtod_l>:
 8013620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013624:	ed2d 8b02 	vpush	{d8}
 8013628:	b09b      	sub	sp, #108	; 0x6c
 801362a:	4604      	mov	r4, r0
 801362c:	9213      	str	r2, [sp, #76]	; 0x4c
 801362e:	2200      	movs	r2, #0
 8013630:	9216      	str	r2, [sp, #88]	; 0x58
 8013632:	460d      	mov	r5, r1
 8013634:	f04f 0800 	mov.w	r8, #0
 8013638:	f04f 0900 	mov.w	r9, #0
 801363c:	460a      	mov	r2, r1
 801363e:	9215      	str	r2, [sp, #84]	; 0x54
 8013640:	7811      	ldrb	r1, [r2, #0]
 8013642:	292b      	cmp	r1, #43	; 0x2b
 8013644:	d04c      	beq.n	80136e0 <_strtod_l+0xc0>
 8013646:	d83a      	bhi.n	80136be <_strtod_l+0x9e>
 8013648:	290d      	cmp	r1, #13
 801364a:	d834      	bhi.n	80136b6 <_strtod_l+0x96>
 801364c:	2908      	cmp	r1, #8
 801364e:	d834      	bhi.n	80136ba <_strtod_l+0x9a>
 8013650:	2900      	cmp	r1, #0
 8013652:	d03d      	beq.n	80136d0 <_strtod_l+0xb0>
 8013654:	2200      	movs	r2, #0
 8013656:	920a      	str	r2, [sp, #40]	; 0x28
 8013658:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801365a:	7832      	ldrb	r2, [r6, #0]
 801365c:	2a30      	cmp	r2, #48	; 0x30
 801365e:	f040 80b4 	bne.w	80137ca <_strtod_l+0x1aa>
 8013662:	7872      	ldrb	r2, [r6, #1]
 8013664:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013668:	2a58      	cmp	r2, #88	; 0x58
 801366a:	d170      	bne.n	801374e <_strtod_l+0x12e>
 801366c:	9302      	str	r3, [sp, #8]
 801366e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013670:	9301      	str	r3, [sp, #4]
 8013672:	ab16      	add	r3, sp, #88	; 0x58
 8013674:	9300      	str	r3, [sp, #0]
 8013676:	4a8e      	ldr	r2, [pc, #568]	; (80138b0 <_strtod_l+0x290>)
 8013678:	ab17      	add	r3, sp, #92	; 0x5c
 801367a:	a915      	add	r1, sp, #84	; 0x54
 801367c:	4620      	mov	r0, r4
 801367e:	f001 f917 	bl	80148b0 <__gethex>
 8013682:	f010 070f 	ands.w	r7, r0, #15
 8013686:	4605      	mov	r5, r0
 8013688:	d005      	beq.n	8013696 <_strtod_l+0x76>
 801368a:	2f06      	cmp	r7, #6
 801368c:	d12a      	bne.n	80136e4 <_strtod_l+0xc4>
 801368e:	3601      	adds	r6, #1
 8013690:	2300      	movs	r3, #0
 8013692:	9615      	str	r6, [sp, #84]	; 0x54
 8013694:	930a      	str	r3, [sp, #40]	; 0x28
 8013696:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013698:	2b00      	cmp	r3, #0
 801369a:	f040 857f 	bne.w	801419c <_strtod_l+0xb7c>
 801369e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136a0:	b1db      	cbz	r3, 80136da <_strtod_l+0xba>
 80136a2:	4642      	mov	r2, r8
 80136a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80136a8:	ec43 2b10 	vmov	d0, r2, r3
 80136ac:	b01b      	add	sp, #108	; 0x6c
 80136ae:	ecbd 8b02 	vpop	{d8}
 80136b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136b6:	2920      	cmp	r1, #32
 80136b8:	d1cc      	bne.n	8013654 <_strtod_l+0x34>
 80136ba:	3201      	adds	r2, #1
 80136bc:	e7bf      	b.n	801363e <_strtod_l+0x1e>
 80136be:	292d      	cmp	r1, #45	; 0x2d
 80136c0:	d1c8      	bne.n	8013654 <_strtod_l+0x34>
 80136c2:	2101      	movs	r1, #1
 80136c4:	910a      	str	r1, [sp, #40]	; 0x28
 80136c6:	1c51      	adds	r1, r2, #1
 80136c8:	9115      	str	r1, [sp, #84]	; 0x54
 80136ca:	7852      	ldrb	r2, [r2, #1]
 80136cc:	2a00      	cmp	r2, #0
 80136ce:	d1c3      	bne.n	8013658 <_strtod_l+0x38>
 80136d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80136d2:	9515      	str	r5, [sp, #84]	; 0x54
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	f040 855f 	bne.w	8014198 <_strtod_l+0xb78>
 80136da:	4642      	mov	r2, r8
 80136dc:	464b      	mov	r3, r9
 80136de:	e7e3      	b.n	80136a8 <_strtod_l+0x88>
 80136e0:	2100      	movs	r1, #0
 80136e2:	e7ef      	b.n	80136c4 <_strtod_l+0xa4>
 80136e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80136e6:	b13a      	cbz	r2, 80136f8 <_strtod_l+0xd8>
 80136e8:	2135      	movs	r1, #53	; 0x35
 80136ea:	a818      	add	r0, sp, #96	; 0x60
 80136ec:	f7ff ff37 	bl	801355e <__copybits>
 80136f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80136f2:	4620      	mov	r0, r4
 80136f4:	f7ff fb0a 	bl	8012d0c <_Bfree>
 80136f8:	3f01      	subs	r7, #1
 80136fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80136fc:	2f04      	cmp	r7, #4
 80136fe:	d806      	bhi.n	801370e <_strtod_l+0xee>
 8013700:	e8df f007 	tbb	[pc, r7]
 8013704:	201d0314 	.word	0x201d0314
 8013708:	14          	.byte	0x14
 8013709:	00          	.byte	0x00
 801370a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801370e:	05e9      	lsls	r1, r5, #23
 8013710:	bf48      	it	mi
 8013712:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8013716:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801371a:	0d1b      	lsrs	r3, r3, #20
 801371c:	051b      	lsls	r3, r3, #20
 801371e:	2b00      	cmp	r3, #0
 8013720:	d1b9      	bne.n	8013696 <_strtod_l+0x76>
 8013722:	f7fe faf9 	bl	8011d18 <__errno>
 8013726:	2322      	movs	r3, #34	; 0x22
 8013728:	6003      	str	r3, [r0, #0]
 801372a:	e7b4      	b.n	8013696 <_strtod_l+0x76>
 801372c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8013730:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013734:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013738:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801373c:	e7e7      	b.n	801370e <_strtod_l+0xee>
 801373e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80138b8 <_strtod_l+0x298>
 8013742:	e7e4      	b.n	801370e <_strtod_l+0xee>
 8013744:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013748:	f04f 38ff 	mov.w	r8, #4294967295
 801374c:	e7df      	b.n	801370e <_strtod_l+0xee>
 801374e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013750:	1c5a      	adds	r2, r3, #1
 8013752:	9215      	str	r2, [sp, #84]	; 0x54
 8013754:	785b      	ldrb	r3, [r3, #1]
 8013756:	2b30      	cmp	r3, #48	; 0x30
 8013758:	d0f9      	beq.n	801374e <_strtod_l+0x12e>
 801375a:	2b00      	cmp	r3, #0
 801375c:	d09b      	beq.n	8013696 <_strtod_l+0x76>
 801375e:	2301      	movs	r3, #1
 8013760:	f04f 0a00 	mov.w	sl, #0
 8013764:	9304      	str	r3, [sp, #16]
 8013766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013768:	930b      	str	r3, [sp, #44]	; 0x2c
 801376a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801376e:	46d3      	mov	fp, sl
 8013770:	220a      	movs	r2, #10
 8013772:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013774:	7806      	ldrb	r6, [r0, #0]
 8013776:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801377a:	b2d9      	uxtb	r1, r3
 801377c:	2909      	cmp	r1, #9
 801377e:	d926      	bls.n	80137ce <_strtod_l+0x1ae>
 8013780:	494c      	ldr	r1, [pc, #304]	; (80138b4 <_strtod_l+0x294>)
 8013782:	2201      	movs	r2, #1
 8013784:	f000 ffcc 	bl	8014720 <strncmp>
 8013788:	2800      	cmp	r0, #0
 801378a:	d030      	beq.n	80137ee <_strtod_l+0x1ce>
 801378c:	2000      	movs	r0, #0
 801378e:	4632      	mov	r2, r6
 8013790:	9005      	str	r0, [sp, #20]
 8013792:	465e      	mov	r6, fp
 8013794:	4603      	mov	r3, r0
 8013796:	2a65      	cmp	r2, #101	; 0x65
 8013798:	d001      	beq.n	801379e <_strtod_l+0x17e>
 801379a:	2a45      	cmp	r2, #69	; 0x45
 801379c:	d113      	bne.n	80137c6 <_strtod_l+0x1a6>
 801379e:	b91e      	cbnz	r6, 80137a8 <_strtod_l+0x188>
 80137a0:	9a04      	ldr	r2, [sp, #16]
 80137a2:	4302      	orrs	r2, r0
 80137a4:	d094      	beq.n	80136d0 <_strtod_l+0xb0>
 80137a6:	2600      	movs	r6, #0
 80137a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80137aa:	1c6a      	adds	r2, r5, #1
 80137ac:	9215      	str	r2, [sp, #84]	; 0x54
 80137ae:	786a      	ldrb	r2, [r5, #1]
 80137b0:	2a2b      	cmp	r2, #43	; 0x2b
 80137b2:	d074      	beq.n	801389e <_strtod_l+0x27e>
 80137b4:	2a2d      	cmp	r2, #45	; 0x2d
 80137b6:	d078      	beq.n	80138aa <_strtod_l+0x28a>
 80137b8:	f04f 0c00 	mov.w	ip, #0
 80137bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80137c0:	2909      	cmp	r1, #9
 80137c2:	d97f      	bls.n	80138c4 <_strtod_l+0x2a4>
 80137c4:	9515      	str	r5, [sp, #84]	; 0x54
 80137c6:	2700      	movs	r7, #0
 80137c8:	e09e      	b.n	8013908 <_strtod_l+0x2e8>
 80137ca:	2300      	movs	r3, #0
 80137cc:	e7c8      	b.n	8013760 <_strtod_l+0x140>
 80137ce:	f1bb 0f08 	cmp.w	fp, #8
 80137d2:	bfd8      	it	le
 80137d4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80137d6:	f100 0001 	add.w	r0, r0, #1
 80137da:	bfda      	itte	le
 80137dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80137e0:	9309      	strle	r3, [sp, #36]	; 0x24
 80137e2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80137e6:	f10b 0b01 	add.w	fp, fp, #1
 80137ea:	9015      	str	r0, [sp, #84]	; 0x54
 80137ec:	e7c1      	b.n	8013772 <_strtod_l+0x152>
 80137ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137f0:	1c5a      	adds	r2, r3, #1
 80137f2:	9215      	str	r2, [sp, #84]	; 0x54
 80137f4:	785a      	ldrb	r2, [r3, #1]
 80137f6:	f1bb 0f00 	cmp.w	fp, #0
 80137fa:	d037      	beq.n	801386c <_strtod_l+0x24c>
 80137fc:	9005      	str	r0, [sp, #20]
 80137fe:	465e      	mov	r6, fp
 8013800:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013804:	2b09      	cmp	r3, #9
 8013806:	d912      	bls.n	801382e <_strtod_l+0x20e>
 8013808:	2301      	movs	r3, #1
 801380a:	e7c4      	b.n	8013796 <_strtod_l+0x176>
 801380c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801380e:	1c5a      	adds	r2, r3, #1
 8013810:	9215      	str	r2, [sp, #84]	; 0x54
 8013812:	785a      	ldrb	r2, [r3, #1]
 8013814:	3001      	adds	r0, #1
 8013816:	2a30      	cmp	r2, #48	; 0x30
 8013818:	d0f8      	beq.n	801380c <_strtod_l+0x1ec>
 801381a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801381e:	2b08      	cmp	r3, #8
 8013820:	f200 84c1 	bhi.w	80141a6 <_strtod_l+0xb86>
 8013824:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013826:	9005      	str	r0, [sp, #20]
 8013828:	2000      	movs	r0, #0
 801382a:	930b      	str	r3, [sp, #44]	; 0x2c
 801382c:	4606      	mov	r6, r0
 801382e:	3a30      	subs	r2, #48	; 0x30
 8013830:	f100 0301 	add.w	r3, r0, #1
 8013834:	d014      	beq.n	8013860 <_strtod_l+0x240>
 8013836:	9905      	ldr	r1, [sp, #20]
 8013838:	4419      	add	r1, r3
 801383a:	9105      	str	r1, [sp, #20]
 801383c:	4633      	mov	r3, r6
 801383e:	eb00 0c06 	add.w	ip, r0, r6
 8013842:	210a      	movs	r1, #10
 8013844:	4563      	cmp	r3, ip
 8013846:	d113      	bne.n	8013870 <_strtod_l+0x250>
 8013848:	1833      	adds	r3, r6, r0
 801384a:	2b08      	cmp	r3, #8
 801384c:	f106 0601 	add.w	r6, r6, #1
 8013850:	4406      	add	r6, r0
 8013852:	dc1a      	bgt.n	801388a <_strtod_l+0x26a>
 8013854:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013856:	230a      	movs	r3, #10
 8013858:	fb03 2301 	mla	r3, r3, r1, r2
 801385c:	9309      	str	r3, [sp, #36]	; 0x24
 801385e:	2300      	movs	r3, #0
 8013860:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013862:	1c51      	adds	r1, r2, #1
 8013864:	9115      	str	r1, [sp, #84]	; 0x54
 8013866:	7852      	ldrb	r2, [r2, #1]
 8013868:	4618      	mov	r0, r3
 801386a:	e7c9      	b.n	8013800 <_strtod_l+0x1e0>
 801386c:	4658      	mov	r0, fp
 801386e:	e7d2      	b.n	8013816 <_strtod_l+0x1f6>
 8013870:	2b08      	cmp	r3, #8
 8013872:	f103 0301 	add.w	r3, r3, #1
 8013876:	dc03      	bgt.n	8013880 <_strtod_l+0x260>
 8013878:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801387a:	434f      	muls	r7, r1
 801387c:	9709      	str	r7, [sp, #36]	; 0x24
 801387e:	e7e1      	b.n	8013844 <_strtod_l+0x224>
 8013880:	2b10      	cmp	r3, #16
 8013882:	bfd8      	it	le
 8013884:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013888:	e7dc      	b.n	8013844 <_strtod_l+0x224>
 801388a:	2e10      	cmp	r6, #16
 801388c:	bfdc      	itt	le
 801388e:	230a      	movle	r3, #10
 8013890:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013894:	e7e3      	b.n	801385e <_strtod_l+0x23e>
 8013896:	2300      	movs	r3, #0
 8013898:	9305      	str	r3, [sp, #20]
 801389a:	2301      	movs	r3, #1
 801389c:	e780      	b.n	80137a0 <_strtod_l+0x180>
 801389e:	f04f 0c00 	mov.w	ip, #0
 80138a2:	1caa      	adds	r2, r5, #2
 80138a4:	9215      	str	r2, [sp, #84]	; 0x54
 80138a6:	78aa      	ldrb	r2, [r5, #2]
 80138a8:	e788      	b.n	80137bc <_strtod_l+0x19c>
 80138aa:	f04f 0c01 	mov.w	ip, #1
 80138ae:	e7f8      	b.n	80138a2 <_strtod_l+0x282>
 80138b0:	08015960 	.word	0x08015960
 80138b4:	0801595c 	.word	0x0801595c
 80138b8:	7ff00000 	.word	0x7ff00000
 80138bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138be:	1c51      	adds	r1, r2, #1
 80138c0:	9115      	str	r1, [sp, #84]	; 0x54
 80138c2:	7852      	ldrb	r2, [r2, #1]
 80138c4:	2a30      	cmp	r2, #48	; 0x30
 80138c6:	d0f9      	beq.n	80138bc <_strtod_l+0x29c>
 80138c8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80138cc:	2908      	cmp	r1, #8
 80138ce:	f63f af7a 	bhi.w	80137c6 <_strtod_l+0x1a6>
 80138d2:	3a30      	subs	r2, #48	; 0x30
 80138d4:	9208      	str	r2, [sp, #32]
 80138d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138d8:	920c      	str	r2, [sp, #48]	; 0x30
 80138da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138dc:	1c57      	adds	r7, r2, #1
 80138de:	9715      	str	r7, [sp, #84]	; 0x54
 80138e0:	7852      	ldrb	r2, [r2, #1]
 80138e2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80138e6:	f1be 0f09 	cmp.w	lr, #9
 80138ea:	d938      	bls.n	801395e <_strtod_l+0x33e>
 80138ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80138ee:	1a7f      	subs	r7, r7, r1
 80138f0:	2f08      	cmp	r7, #8
 80138f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80138f6:	dc03      	bgt.n	8013900 <_strtod_l+0x2e0>
 80138f8:	9908      	ldr	r1, [sp, #32]
 80138fa:	428f      	cmp	r7, r1
 80138fc:	bfa8      	it	ge
 80138fe:	460f      	movge	r7, r1
 8013900:	f1bc 0f00 	cmp.w	ip, #0
 8013904:	d000      	beq.n	8013908 <_strtod_l+0x2e8>
 8013906:	427f      	negs	r7, r7
 8013908:	2e00      	cmp	r6, #0
 801390a:	d14f      	bne.n	80139ac <_strtod_l+0x38c>
 801390c:	9904      	ldr	r1, [sp, #16]
 801390e:	4301      	orrs	r1, r0
 8013910:	f47f aec1 	bne.w	8013696 <_strtod_l+0x76>
 8013914:	2b00      	cmp	r3, #0
 8013916:	f47f aedb 	bne.w	80136d0 <_strtod_l+0xb0>
 801391a:	2a69      	cmp	r2, #105	; 0x69
 801391c:	d029      	beq.n	8013972 <_strtod_l+0x352>
 801391e:	dc26      	bgt.n	801396e <_strtod_l+0x34e>
 8013920:	2a49      	cmp	r2, #73	; 0x49
 8013922:	d026      	beq.n	8013972 <_strtod_l+0x352>
 8013924:	2a4e      	cmp	r2, #78	; 0x4e
 8013926:	f47f aed3 	bne.w	80136d0 <_strtod_l+0xb0>
 801392a:	499b      	ldr	r1, [pc, #620]	; (8013b98 <_strtod_l+0x578>)
 801392c:	a815      	add	r0, sp, #84	; 0x54
 801392e:	f001 f9ff 	bl	8014d30 <__match>
 8013932:	2800      	cmp	r0, #0
 8013934:	f43f aecc 	beq.w	80136d0 <_strtod_l+0xb0>
 8013938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	2b28      	cmp	r3, #40	; 0x28
 801393e:	d12f      	bne.n	80139a0 <_strtod_l+0x380>
 8013940:	4996      	ldr	r1, [pc, #600]	; (8013b9c <_strtod_l+0x57c>)
 8013942:	aa18      	add	r2, sp, #96	; 0x60
 8013944:	a815      	add	r0, sp, #84	; 0x54
 8013946:	f001 fa07 	bl	8014d58 <__hexnan>
 801394a:	2805      	cmp	r0, #5
 801394c:	d128      	bne.n	80139a0 <_strtod_l+0x380>
 801394e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013950:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013954:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013958:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801395c:	e69b      	b.n	8013696 <_strtod_l+0x76>
 801395e:	9f08      	ldr	r7, [sp, #32]
 8013960:	210a      	movs	r1, #10
 8013962:	fb01 2107 	mla	r1, r1, r7, r2
 8013966:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801396a:	9208      	str	r2, [sp, #32]
 801396c:	e7b5      	b.n	80138da <_strtod_l+0x2ba>
 801396e:	2a6e      	cmp	r2, #110	; 0x6e
 8013970:	e7d9      	b.n	8013926 <_strtod_l+0x306>
 8013972:	498b      	ldr	r1, [pc, #556]	; (8013ba0 <_strtod_l+0x580>)
 8013974:	a815      	add	r0, sp, #84	; 0x54
 8013976:	f001 f9db 	bl	8014d30 <__match>
 801397a:	2800      	cmp	r0, #0
 801397c:	f43f aea8 	beq.w	80136d0 <_strtod_l+0xb0>
 8013980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013982:	4988      	ldr	r1, [pc, #544]	; (8013ba4 <_strtod_l+0x584>)
 8013984:	3b01      	subs	r3, #1
 8013986:	a815      	add	r0, sp, #84	; 0x54
 8013988:	9315      	str	r3, [sp, #84]	; 0x54
 801398a:	f001 f9d1 	bl	8014d30 <__match>
 801398e:	b910      	cbnz	r0, 8013996 <_strtod_l+0x376>
 8013990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013992:	3301      	adds	r3, #1
 8013994:	9315      	str	r3, [sp, #84]	; 0x54
 8013996:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013bb4 <_strtod_l+0x594>
 801399a:	f04f 0800 	mov.w	r8, #0
 801399e:	e67a      	b.n	8013696 <_strtod_l+0x76>
 80139a0:	4881      	ldr	r0, [pc, #516]	; (8013ba8 <_strtod_l+0x588>)
 80139a2:	f000 fee1 	bl	8014768 <nan>
 80139a6:	ec59 8b10 	vmov	r8, r9, d0
 80139aa:	e674      	b.n	8013696 <_strtod_l+0x76>
 80139ac:	9b05      	ldr	r3, [sp, #20]
 80139ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139b0:	1afb      	subs	r3, r7, r3
 80139b2:	f1bb 0f00 	cmp.w	fp, #0
 80139b6:	bf08      	it	eq
 80139b8:	46b3      	moveq	fp, r6
 80139ba:	2e10      	cmp	r6, #16
 80139bc:	9308      	str	r3, [sp, #32]
 80139be:	4635      	mov	r5, r6
 80139c0:	bfa8      	it	ge
 80139c2:	2510      	movge	r5, #16
 80139c4:	f7ec fd9e 	bl	8000504 <__aeabi_ui2d>
 80139c8:	2e09      	cmp	r6, #9
 80139ca:	4680      	mov	r8, r0
 80139cc:	4689      	mov	r9, r1
 80139ce:	dd13      	ble.n	80139f8 <_strtod_l+0x3d8>
 80139d0:	4b76      	ldr	r3, [pc, #472]	; (8013bac <_strtod_l+0x58c>)
 80139d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80139d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80139da:	f7ec fe0d 	bl	80005f8 <__aeabi_dmul>
 80139de:	4680      	mov	r8, r0
 80139e0:	4650      	mov	r0, sl
 80139e2:	4689      	mov	r9, r1
 80139e4:	f7ec fd8e 	bl	8000504 <__aeabi_ui2d>
 80139e8:	4602      	mov	r2, r0
 80139ea:	460b      	mov	r3, r1
 80139ec:	4640      	mov	r0, r8
 80139ee:	4649      	mov	r1, r9
 80139f0:	f7ec fc4c 	bl	800028c <__adddf3>
 80139f4:	4680      	mov	r8, r0
 80139f6:	4689      	mov	r9, r1
 80139f8:	2e0f      	cmp	r6, #15
 80139fa:	dc38      	bgt.n	8013a6e <_strtod_l+0x44e>
 80139fc:	9b08      	ldr	r3, [sp, #32]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	f43f ae49 	beq.w	8013696 <_strtod_l+0x76>
 8013a04:	dd24      	ble.n	8013a50 <_strtod_l+0x430>
 8013a06:	2b16      	cmp	r3, #22
 8013a08:	dc0b      	bgt.n	8013a22 <_strtod_l+0x402>
 8013a0a:	4968      	ldr	r1, [pc, #416]	; (8013bac <_strtod_l+0x58c>)
 8013a0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a14:	4642      	mov	r2, r8
 8013a16:	464b      	mov	r3, r9
 8013a18:	f7ec fdee 	bl	80005f8 <__aeabi_dmul>
 8013a1c:	4680      	mov	r8, r0
 8013a1e:	4689      	mov	r9, r1
 8013a20:	e639      	b.n	8013696 <_strtod_l+0x76>
 8013a22:	9a08      	ldr	r2, [sp, #32]
 8013a24:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	db20      	blt.n	8013a6e <_strtod_l+0x44e>
 8013a2c:	4c5f      	ldr	r4, [pc, #380]	; (8013bac <_strtod_l+0x58c>)
 8013a2e:	f1c6 060f 	rsb	r6, r6, #15
 8013a32:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8013a36:	4642      	mov	r2, r8
 8013a38:	464b      	mov	r3, r9
 8013a3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a3e:	f7ec fddb 	bl	80005f8 <__aeabi_dmul>
 8013a42:	9b08      	ldr	r3, [sp, #32]
 8013a44:	1b9e      	subs	r6, r3, r6
 8013a46:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013a4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013a4e:	e7e3      	b.n	8013a18 <_strtod_l+0x3f8>
 8013a50:	9b08      	ldr	r3, [sp, #32]
 8013a52:	3316      	adds	r3, #22
 8013a54:	db0b      	blt.n	8013a6e <_strtod_l+0x44e>
 8013a56:	9b05      	ldr	r3, [sp, #20]
 8013a58:	1bdf      	subs	r7, r3, r7
 8013a5a:	4b54      	ldr	r3, [pc, #336]	; (8013bac <_strtod_l+0x58c>)
 8013a5c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a64:	4640      	mov	r0, r8
 8013a66:	4649      	mov	r1, r9
 8013a68:	f7ec fef0 	bl	800084c <__aeabi_ddiv>
 8013a6c:	e7d6      	b.n	8013a1c <_strtod_l+0x3fc>
 8013a6e:	9b08      	ldr	r3, [sp, #32]
 8013a70:	1b75      	subs	r5, r6, r5
 8013a72:	441d      	add	r5, r3
 8013a74:	2d00      	cmp	r5, #0
 8013a76:	dd70      	ble.n	8013b5a <_strtod_l+0x53a>
 8013a78:	f015 030f 	ands.w	r3, r5, #15
 8013a7c:	d00a      	beq.n	8013a94 <_strtod_l+0x474>
 8013a7e:	494b      	ldr	r1, [pc, #300]	; (8013bac <_strtod_l+0x58c>)
 8013a80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a84:	4642      	mov	r2, r8
 8013a86:	464b      	mov	r3, r9
 8013a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a8c:	f7ec fdb4 	bl	80005f8 <__aeabi_dmul>
 8013a90:	4680      	mov	r8, r0
 8013a92:	4689      	mov	r9, r1
 8013a94:	f035 050f 	bics.w	r5, r5, #15
 8013a98:	d04d      	beq.n	8013b36 <_strtod_l+0x516>
 8013a9a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013a9e:	dd22      	ble.n	8013ae6 <_strtod_l+0x4c6>
 8013aa0:	2500      	movs	r5, #0
 8013aa2:	46ab      	mov	fp, r5
 8013aa4:	9509      	str	r5, [sp, #36]	; 0x24
 8013aa6:	9505      	str	r5, [sp, #20]
 8013aa8:	2322      	movs	r3, #34	; 0x22
 8013aaa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013bb4 <_strtod_l+0x594>
 8013aae:	6023      	str	r3, [r4, #0]
 8013ab0:	f04f 0800 	mov.w	r8, #0
 8013ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	f43f aded 	beq.w	8013696 <_strtod_l+0x76>
 8013abc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013abe:	4620      	mov	r0, r4
 8013ac0:	f7ff f924 	bl	8012d0c <_Bfree>
 8013ac4:	9905      	ldr	r1, [sp, #20]
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f7ff f920 	bl	8012d0c <_Bfree>
 8013acc:	4659      	mov	r1, fp
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f7ff f91c 	bl	8012d0c <_Bfree>
 8013ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f7ff f918 	bl	8012d0c <_Bfree>
 8013adc:	4629      	mov	r1, r5
 8013ade:	4620      	mov	r0, r4
 8013ae0:	f7ff f914 	bl	8012d0c <_Bfree>
 8013ae4:	e5d7      	b.n	8013696 <_strtod_l+0x76>
 8013ae6:	4b32      	ldr	r3, [pc, #200]	; (8013bb0 <_strtod_l+0x590>)
 8013ae8:	9304      	str	r3, [sp, #16]
 8013aea:	2300      	movs	r3, #0
 8013aec:	112d      	asrs	r5, r5, #4
 8013aee:	4640      	mov	r0, r8
 8013af0:	4649      	mov	r1, r9
 8013af2:	469a      	mov	sl, r3
 8013af4:	2d01      	cmp	r5, #1
 8013af6:	dc21      	bgt.n	8013b3c <_strtod_l+0x51c>
 8013af8:	b10b      	cbz	r3, 8013afe <_strtod_l+0x4de>
 8013afa:	4680      	mov	r8, r0
 8013afc:	4689      	mov	r9, r1
 8013afe:	492c      	ldr	r1, [pc, #176]	; (8013bb0 <_strtod_l+0x590>)
 8013b00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8013b04:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013b08:	4642      	mov	r2, r8
 8013b0a:	464b      	mov	r3, r9
 8013b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b10:	f7ec fd72 	bl	80005f8 <__aeabi_dmul>
 8013b14:	4b27      	ldr	r3, [pc, #156]	; (8013bb4 <_strtod_l+0x594>)
 8013b16:	460a      	mov	r2, r1
 8013b18:	400b      	ands	r3, r1
 8013b1a:	4927      	ldr	r1, [pc, #156]	; (8013bb8 <_strtod_l+0x598>)
 8013b1c:	428b      	cmp	r3, r1
 8013b1e:	4680      	mov	r8, r0
 8013b20:	d8be      	bhi.n	8013aa0 <_strtod_l+0x480>
 8013b22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013b26:	428b      	cmp	r3, r1
 8013b28:	bf86      	itte	hi
 8013b2a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013bbc <_strtod_l+0x59c>
 8013b2e:	f04f 38ff 	movhi.w	r8, #4294967295
 8013b32:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8013b36:	2300      	movs	r3, #0
 8013b38:	9304      	str	r3, [sp, #16]
 8013b3a:	e07b      	b.n	8013c34 <_strtod_l+0x614>
 8013b3c:	07ea      	lsls	r2, r5, #31
 8013b3e:	d505      	bpl.n	8013b4c <_strtod_l+0x52c>
 8013b40:	9b04      	ldr	r3, [sp, #16]
 8013b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b46:	f7ec fd57 	bl	80005f8 <__aeabi_dmul>
 8013b4a:	2301      	movs	r3, #1
 8013b4c:	9a04      	ldr	r2, [sp, #16]
 8013b4e:	3208      	adds	r2, #8
 8013b50:	f10a 0a01 	add.w	sl, sl, #1
 8013b54:	106d      	asrs	r5, r5, #1
 8013b56:	9204      	str	r2, [sp, #16]
 8013b58:	e7cc      	b.n	8013af4 <_strtod_l+0x4d4>
 8013b5a:	d0ec      	beq.n	8013b36 <_strtod_l+0x516>
 8013b5c:	426d      	negs	r5, r5
 8013b5e:	f015 020f 	ands.w	r2, r5, #15
 8013b62:	d00a      	beq.n	8013b7a <_strtod_l+0x55a>
 8013b64:	4b11      	ldr	r3, [pc, #68]	; (8013bac <_strtod_l+0x58c>)
 8013b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	4649      	mov	r1, r9
 8013b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b72:	f7ec fe6b 	bl	800084c <__aeabi_ddiv>
 8013b76:	4680      	mov	r8, r0
 8013b78:	4689      	mov	r9, r1
 8013b7a:	112d      	asrs	r5, r5, #4
 8013b7c:	d0db      	beq.n	8013b36 <_strtod_l+0x516>
 8013b7e:	2d1f      	cmp	r5, #31
 8013b80:	dd1e      	ble.n	8013bc0 <_strtod_l+0x5a0>
 8013b82:	2500      	movs	r5, #0
 8013b84:	46ab      	mov	fp, r5
 8013b86:	9509      	str	r5, [sp, #36]	; 0x24
 8013b88:	9505      	str	r5, [sp, #20]
 8013b8a:	2322      	movs	r3, #34	; 0x22
 8013b8c:	f04f 0800 	mov.w	r8, #0
 8013b90:	f04f 0900 	mov.w	r9, #0
 8013b94:	6023      	str	r3, [r4, #0]
 8013b96:	e78d      	b.n	8013ab4 <_strtod_l+0x494>
 8013b98:	08015747 	.word	0x08015747
 8013b9c:	08015974 	.word	0x08015974
 8013ba0:	0801573f 	.word	0x0801573f
 8013ba4:	08015776 	.word	0x08015776
 8013ba8:	08015b05 	.word	0x08015b05
 8013bac:	08015888 	.word	0x08015888
 8013bb0:	08015860 	.word	0x08015860
 8013bb4:	7ff00000 	.word	0x7ff00000
 8013bb8:	7ca00000 	.word	0x7ca00000
 8013bbc:	7fefffff 	.word	0x7fefffff
 8013bc0:	f015 0310 	ands.w	r3, r5, #16
 8013bc4:	bf18      	it	ne
 8013bc6:	236a      	movne	r3, #106	; 0x6a
 8013bc8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013f6c <_strtod_l+0x94c>
 8013bcc:	9304      	str	r3, [sp, #16]
 8013bce:	4640      	mov	r0, r8
 8013bd0:	4649      	mov	r1, r9
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	07ea      	lsls	r2, r5, #31
 8013bd6:	d504      	bpl.n	8013be2 <_strtod_l+0x5c2>
 8013bd8:	e9da 2300 	ldrd	r2, r3, [sl]
 8013bdc:	f7ec fd0c 	bl	80005f8 <__aeabi_dmul>
 8013be0:	2301      	movs	r3, #1
 8013be2:	106d      	asrs	r5, r5, #1
 8013be4:	f10a 0a08 	add.w	sl, sl, #8
 8013be8:	d1f4      	bne.n	8013bd4 <_strtod_l+0x5b4>
 8013bea:	b10b      	cbz	r3, 8013bf0 <_strtod_l+0x5d0>
 8013bec:	4680      	mov	r8, r0
 8013bee:	4689      	mov	r9, r1
 8013bf0:	9b04      	ldr	r3, [sp, #16]
 8013bf2:	b1bb      	cbz	r3, 8013c24 <_strtod_l+0x604>
 8013bf4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013bf8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	4649      	mov	r1, r9
 8013c00:	dd10      	ble.n	8013c24 <_strtod_l+0x604>
 8013c02:	2b1f      	cmp	r3, #31
 8013c04:	f340 811e 	ble.w	8013e44 <_strtod_l+0x824>
 8013c08:	2b34      	cmp	r3, #52	; 0x34
 8013c0a:	bfde      	ittt	le
 8013c0c:	f04f 33ff 	movle.w	r3, #4294967295
 8013c10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013c14:	4093      	lslle	r3, r2
 8013c16:	f04f 0800 	mov.w	r8, #0
 8013c1a:	bfcc      	ite	gt
 8013c1c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8013c20:	ea03 0901 	andle.w	r9, r3, r1
 8013c24:	2200      	movs	r2, #0
 8013c26:	2300      	movs	r3, #0
 8013c28:	4640      	mov	r0, r8
 8013c2a:	4649      	mov	r1, r9
 8013c2c:	f7ec ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c30:	2800      	cmp	r0, #0
 8013c32:	d1a6      	bne.n	8013b82 <_strtod_l+0x562>
 8013c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c36:	9300      	str	r3, [sp, #0]
 8013c38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c3a:	4633      	mov	r3, r6
 8013c3c:	465a      	mov	r2, fp
 8013c3e:	4620      	mov	r0, r4
 8013c40:	f7ff f8cc 	bl	8012ddc <__s2b>
 8013c44:	9009      	str	r0, [sp, #36]	; 0x24
 8013c46:	2800      	cmp	r0, #0
 8013c48:	f43f af2a 	beq.w	8013aa0 <_strtod_l+0x480>
 8013c4c:	9a08      	ldr	r2, [sp, #32]
 8013c4e:	9b05      	ldr	r3, [sp, #20]
 8013c50:	2a00      	cmp	r2, #0
 8013c52:	eba3 0307 	sub.w	r3, r3, r7
 8013c56:	bfa8      	it	ge
 8013c58:	2300      	movge	r3, #0
 8013c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8013c5c:	2500      	movs	r5, #0
 8013c5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013c62:	9312      	str	r3, [sp, #72]	; 0x48
 8013c64:	46ab      	mov	fp, r5
 8013c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c68:	4620      	mov	r0, r4
 8013c6a:	6859      	ldr	r1, [r3, #4]
 8013c6c:	f7ff f80e 	bl	8012c8c <_Balloc>
 8013c70:	9005      	str	r0, [sp, #20]
 8013c72:	2800      	cmp	r0, #0
 8013c74:	f43f af18 	beq.w	8013aa8 <_strtod_l+0x488>
 8013c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c7a:	691a      	ldr	r2, [r3, #16]
 8013c7c:	3202      	adds	r2, #2
 8013c7e:	f103 010c 	add.w	r1, r3, #12
 8013c82:	0092      	lsls	r2, r2, #2
 8013c84:	300c      	adds	r0, #12
 8013c86:	f7fe f873 	bl	8011d70 <memcpy>
 8013c8a:	ec49 8b10 	vmov	d0, r8, r9
 8013c8e:	aa18      	add	r2, sp, #96	; 0x60
 8013c90:	a917      	add	r1, sp, #92	; 0x5c
 8013c92:	4620      	mov	r0, r4
 8013c94:	f7ff fbd6 	bl	8013444 <__d2b>
 8013c98:	ec49 8b18 	vmov	d8, r8, r9
 8013c9c:	9016      	str	r0, [sp, #88]	; 0x58
 8013c9e:	2800      	cmp	r0, #0
 8013ca0:	f43f af02 	beq.w	8013aa8 <_strtod_l+0x488>
 8013ca4:	2101      	movs	r1, #1
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	f7ff f930 	bl	8012f0c <__i2b>
 8013cac:	4683      	mov	fp, r0
 8013cae:	2800      	cmp	r0, #0
 8013cb0:	f43f aefa 	beq.w	8013aa8 <_strtod_l+0x488>
 8013cb4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013cb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013cb8:	2e00      	cmp	r6, #0
 8013cba:	bfab      	itete	ge
 8013cbc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013cbe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013cc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013cc2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013cc6:	bfac      	ite	ge
 8013cc8:	eb06 0a03 	addge.w	sl, r6, r3
 8013ccc:	1b9f      	sublt	r7, r3, r6
 8013cce:	9b04      	ldr	r3, [sp, #16]
 8013cd0:	1af6      	subs	r6, r6, r3
 8013cd2:	4416      	add	r6, r2
 8013cd4:	4ba0      	ldr	r3, [pc, #640]	; (8013f58 <_strtod_l+0x938>)
 8013cd6:	3e01      	subs	r6, #1
 8013cd8:	429e      	cmp	r6, r3
 8013cda:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013cde:	f280 80c4 	bge.w	8013e6a <_strtod_l+0x84a>
 8013ce2:	1b9b      	subs	r3, r3, r6
 8013ce4:	2b1f      	cmp	r3, #31
 8013ce6:	eba2 0203 	sub.w	r2, r2, r3
 8013cea:	f04f 0101 	mov.w	r1, #1
 8013cee:	f300 80b0 	bgt.w	8013e52 <_strtod_l+0x832>
 8013cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8013cf6:	930e      	str	r3, [sp, #56]	; 0x38
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8013cfc:	eb0a 0602 	add.w	r6, sl, r2
 8013d00:	9b04      	ldr	r3, [sp, #16]
 8013d02:	45b2      	cmp	sl, r6
 8013d04:	4417      	add	r7, r2
 8013d06:	441f      	add	r7, r3
 8013d08:	4653      	mov	r3, sl
 8013d0a:	bfa8      	it	ge
 8013d0c:	4633      	movge	r3, r6
 8013d0e:	42bb      	cmp	r3, r7
 8013d10:	bfa8      	it	ge
 8013d12:	463b      	movge	r3, r7
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	bfc2      	ittt	gt
 8013d18:	1af6      	subgt	r6, r6, r3
 8013d1a:	1aff      	subgt	r7, r7, r3
 8013d1c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8013d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	dd17      	ble.n	8013d56 <_strtod_l+0x736>
 8013d26:	4659      	mov	r1, fp
 8013d28:	461a      	mov	r2, r3
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f7ff f9ae 	bl	801308c <__pow5mult>
 8013d30:	4683      	mov	fp, r0
 8013d32:	2800      	cmp	r0, #0
 8013d34:	f43f aeb8 	beq.w	8013aa8 <_strtod_l+0x488>
 8013d38:	4601      	mov	r1, r0
 8013d3a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	f7ff f8fb 	bl	8012f38 <__multiply>
 8013d42:	900b      	str	r0, [sp, #44]	; 0x2c
 8013d44:	2800      	cmp	r0, #0
 8013d46:	f43f aeaf 	beq.w	8013aa8 <_strtod_l+0x488>
 8013d4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013d4c:	4620      	mov	r0, r4
 8013d4e:	f7fe ffdd 	bl	8012d0c <_Bfree>
 8013d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d54:	9316      	str	r3, [sp, #88]	; 0x58
 8013d56:	2e00      	cmp	r6, #0
 8013d58:	f300 808c 	bgt.w	8013e74 <_strtod_l+0x854>
 8013d5c:	9b08      	ldr	r3, [sp, #32]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	dd08      	ble.n	8013d74 <_strtod_l+0x754>
 8013d62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d64:	9905      	ldr	r1, [sp, #20]
 8013d66:	4620      	mov	r0, r4
 8013d68:	f7ff f990 	bl	801308c <__pow5mult>
 8013d6c:	9005      	str	r0, [sp, #20]
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	f43f ae9a 	beq.w	8013aa8 <_strtod_l+0x488>
 8013d74:	2f00      	cmp	r7, #0
 8013d76:	dd08      	ble.n	8013d8a <_strtod_l+0x76a>
 8013d78:	9905      	ldr	r1, [sp, #20]
 8013d7a:	463a      	mov	r2, r7
 8013d7c:	4620      	mov	r0, r4
 8013d7e:	f7ff f9df 	bl	8013140 <__lshift>
 8013d82:	9005      	str	r0, [sp, #20]
 8013d84:	2800      	cmp	r0, #0
 8013d86:	f43f ae8f 	beq.w	8013aa8 <_strtod_l+0x488>
 8013d8a:	f1ba 0f00 	cmp.w	sl, #0
 8013d8e:	dd08      	ble.n	8013da2 <_strtod_l+0x782>
 8013d90:	4659      	mov	r1, fp
 8013d92:	4652      	mov	r2, sl
 8013d94:	4620      	mov	r0, r4
 8013d96:	f7ff f9d3 	bl	8013140 <__lshift>
 8013d9a:	4683      	mov	fp, r0
 8013d9c:	2800      	cmp	r0, #0
 8013d9e:	f43f ae83 	beq.w	8013aa8 <_strtod_l+0x488>
 8013da2:	9a05      	ldr	r2, [sp, #20]
 8013da4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013da6:	4620      	mov	r0, r4
 8013da8:	f7ff fa52 	bl	8013250 <__mdiff>
 8013dac:	4605      	mov	r5, r0
 8013dae:	2800      	cmp	r0, #0
 8013db0:	f43f ae7a 	beq.w	8013aa8 <_strtod_l+0x488>
 8013db4:	68c3      	ldr	r3, [r0, #12]
 8013db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013db8:	2300      	movs	r3, #0
 8013dba:	60c3      	str	r3, [r0, #12]
 8013dbc:	4659      	mov	r1, fp
 8013dbe:	f7ff fa2b 	bl	8013218 <__mcmp>
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	da60      	bge.n	8013e88 <_strtod_l+0x868>
 8013dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dc8:	ea53 0308 	orrs.w	r3, r3, r8
 8013dcc:	f040 8084 	bne.w	8013ed8 <_strtod_l+0x8b8>
 8013dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d17f      	bne.n	8013ed8 <_strtod_l+0x8b8>
 8013dd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013ddc:	0d1b      	lsrs	r3, r3, #20
 8013dde:	051b      	lsls	r3, r3, #20
 8013de0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013de4:	d978      	bls.n	8013ed8 <_strtod_l+0x8b8>
 8013de6:	696b      	ldr	r3, [r5, #20]
 8013de8:	b913      	cbnz	r3, 8013df0 <_strtod_l+0x7d0>
 8013dea:	692b      	ldr	r3, [r5, #16]
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	dd73      	ble.n	8013ed8 <_strtod_l+0x8b8>
 8013df0:	4629      	mov	r1, r5
 8013df2:	2201      	movs	r2, #1
 8013df4:	4620      	mov	r0, r4
 8013df6:	f7ff f9a3 	bl	8013140 <__lshift>
 8013dfa:	4659      	mov	r1, fp
 8013dfc:	4605      	mov	r5, r0
 8013dfe:	f7ff fa0b 	bl	8013218 <__mcmp>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	dd68      	ble.n	8013ed8 <_strtod_l+0x8b8>
 8013e06:	9904      	ldr	r1, [sp, #16]
 8013e08:	4a54      	ldr	r2, [pc, #336]	; (8013f5c <_strtod_l+0x93c>)
 8013e0a:	464b      	mov	r3, r9
 8013e0c:	2900      	cmp	r1, #0
 8013e0e:	f000 8084 	beq.w	8013f1a <_strtod_l+0x8fa>
 8013e12:	ea02 0109 	and.w	r1, r2, r9
 8013e16:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013e1a:	dc7e      	bgt.n	8013f1a <_strtod_l+0x8fa>
 8013e1c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013e20:	f77f aeb3 	ble.w	8013b8a <_strtod_l+0x56a>
 8013e24:	4b4e      	ldr	r3, [pc, #312]	; (8013f60 <_strtod_l+0x940>)
 8013e26:	4640      	mov	r0, r8
 8013e28:	4649      	mov	r1, r9
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	f7ec fbe4 	bl	80005f8 <__aeabi_dmul>
 8013e30:	4b4a      	ldr	r3, [pc, #296]	; (8013f5c <_strtod_l+0x93c>)
 8013e32:	400b      	ands	r3, r1
 8013e34:	4680      	mov	r8, r0
 8013e36:	4689      	mov	r9, r1
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	f47f ae3f 	bne.w	8013abc <_strtod_l+0x49c>
 8013e3e:	2322      	movs	r3, #34	; 0x22
 8013e40:	6023      	str	r3, [r4, #0]
 8013e42:	e63b      	b.n	8013abc <_strtod_l+0x49c>
 8013e44:	f04f 32ff 	mov.w	r2, #4294967295
 8013e48:	fa02 f303 	lsl.w	r3, r2, r3
 8013e4c:	ea03 0808 	and.w	r8, r3, r8
 8013e50:	e6e8      	b.n	8013c24 <_strtod_l+0x604>
 8013e52:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013e56:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013e5a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013e5e:	36e2      	adds	r6, #226	; 0xe2
 8013e60:	fa01 f306 	lsl.w	r3, r1, r6
 8013e64:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013e68:	e748      	b.n	8013cfc <_strtod_l+0x6dc>
 8013e6a:	2100      	movs	r1, #0
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013e72:	e743      	b.n	8013cfc <_strtod_l+0x6dc>
 8013e74:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013e76:	4632      	mov	r2, r6
 8013e78:	4620      	mov	r0, r4
 8013e7a:	f7ff f961 	bl	8013140 <__lshift>
 8013e7e:	9016      	str	r0, [sp, #88]	; 0x58
 8013e80:	2800      	cmp	r0, #0
 8013e82:	f47f af6b 	bne.w	8013d5c <_strtod_l+0x73c>
 8013e86:	e60f      	b.n	8013aa8 <_strtod_l+0x488>
 8013e88:	46ca      	mov	sl, r9
 8013e8a:	d171      	bne.n	8013f70 <_strtod_l+0x950>
 8013e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013e8e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e92:	b352      	cbz	r2, 8013eea <_strtod_l+0x8ca>
 8013e94:	4a33      	ldr	r2, [pc, #204]	; (8013f64 <_strtod_l+0x944>)
 8013e96:	4293      	cmp	r3, r2
 8013e98:	d12a      	bne.n	8013ef0 <_strtod_l+0x8d0>
 8013e9a:	9b04      	ldr	r3, [sp, #16]
 8013e9c:	4641      	mov	r1, r8
 8013e9e:	b1fb      	cbz	r3, 8013ee0 <_strtod_l+0x8c0>
 8013ea0:	4b2e      	ldr	r3, [pc, #184]	; (8013f5c <_strtod_l+0x93c>)
 8013ea2:	ea09 0303 	and.w	r3, r9, r3
 8013ea6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8013eae:	d81a      	bhi.n	8013ee6 <_strtod_l+0x8c6>
 8013eb0:	0d1b      	lsrs	r3, r3, #20
 8013eb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8013eba:	4299      	cmp	r1, r3
 8013ebc:	d118      	bne.n	8013ef0 <_strtod_l+0x8d0>
 8013ebe:	4b2a      	ldr	r3, [pc, #168]	; (8013f68 <_strtod_l+0x948>)
 8013ec0:	459a      	cmp	sl, r3
 8013ec2:	d102      	bne.n	8013eca <_strtod_l+0x8aa>
 8013ec4:	3101      	adds	r1, #1
 8013ec6:	f43f adef 	beq.w	8013aa8 <_strtod_l+0x488>
 8013eca:	4b24      	ldr	r3, [pc, #144]	; (8013f5c <_strtod_l+0x93c>)
 8013ecc:	ea0a 0303 	and.w	r3, sl, r3
 8013ed0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013ed4:	f04f 0800 	mov.w	r8, #0
 8013ed8:	9b04      	ldr	r3, [sp, #16]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d1a2      	bne.n	8013e24 <_strtod_l+0x804>
 8013ede:	e5ed      	b.n	8013abc <_strtod_l+0x49c>
 8013ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ee4:	e7e9      	b.n	8013eba <_strtod_l+0x89a>
 8013ee6:	4613      	mov	r3, r2
 8013ee8:	e7e7      	b.n	8013eba <_strtod_l+0x89a>
 8013eea:	ea53 0308 	orrs.w	r3, r3, r8
 8013eee:	d08a      	beq.n	8013e06 <_strtod_l+0x7e6>
 8013ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ef2:	b1e3      	cbz	r3, 8013f2e <_strtod_l+0x90e>
 8013ef4:	ea13 0f0a 	tst.w	r3, sl
 8013ef8:	d0ee      	beq.n	8013ed8 <_strtod_l+0x8b8>
 8013efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013efc:	9a04      	ldr	r2, [sp, #16]
 8013efe:	4640      	mov	r0, r8
 8013f00:	4649      	mov	r1, r9
 8013f02:	b1c3      	cbz	r3, 8013f36 <_strtod_l+0x916>
 8013f04:	f7ff fb6f 	bl	80135e6 <sulp>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	460b      	mov	r3, r1
 8013f0c:	ec51 0b18 	vmov	r0, r1, d8
 8013f10:	f7ec f9bc 	bl	800028c <__adddf3>
 8013f14:	4680      	mov	r8, r0
 8013f16:	4689      	mov	r9, r1
 8013f18:	e7de      	b.n	8013ed8 <_strtod_l+0x8b8>
 8013f1a:	4013      	ands	r3, r2
 8013f1c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013f20:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013f24:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013f28:	f04f 38ff 	mov.w	r8, #4294967295
 8013f2c:	e7d4      	b.n	8013ed8 <_strtod_l+0x8b8>
 8013f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f30:	ea13 0f08 	tst.w	r3, r8
 8013f34:	e7e0      	b.n	8013ef8 <_strtod_l+0x8d8>
 8013f36:	f7ff fb56 	bl	80135e6 <sulp>
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	ec51 0b18 	vmov	r0, r1, d8
 8013f42:	f7ec f9a1 	bl	8000288 <__aeabi_dsub>
 8013f46:	2200      	movs	r2, #0
 8013f48:	2300      	movs	r3, #0
 8013f4a:	4680      	mov	r8, r0
 8013f4c:	4689      	mov	r9, r1
 8013f4e:	f7ec fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f52:	2800      	cmp	r0, #0
 8013f54:	d0c0      	beq.n	8013ed8 <_strtod_l+0x8b8>
 8013f56:	e618      	b.n	8013b8a <_strtod_l+0x56a>
 8013f58:	fffffc02 	.word	0xfffffc02
 8013f5c:	7ff00000 	.word	0x7ff00000
 8013f60:	39500000 	.word	0x39500000
 8013f64:	000fffff 	.word	0x000fffff
 8013f68:	7fefffff 	.word	0x7fefffff
 8013f6c:	08015988 	.word	0x08015988
 8013f70:	4659      	mov	r1, fp
 8013f72:	4628      	mov	r0, r5
 8013f74:	f7ff fac0 	bl	80134f8 <__ratio>
 8013f78:	ec57 6b10 	vmov	r6, r7, d0
 8013f7c:	ee10 0a10 	vmov	r0, s0
 8013f80:	2200      	movs	r2, #0
 8013f82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f86:	4639      	mov	r1, r7
 8013f88:	f7ec fdb2 	bl	8000af0 <__aeabi_dcmple>
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	d071      	beq.n	8014074 <_strtod_l+0xa54>
 8013f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d17c      	bne.n	8014090 <_strtod_l+0xa70>
 8013f96:	f1b8 0f00 	cmp.w	r8, #0
 8013f9a:	d15a      	bne.n	8014052 <_strtod_l+0xa32>
 8013f9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d15d      	bne.n	8014060 <_strtod_l+0xa40>
 8013fa4:	4b90      	ldr	r3, [pc, #576]	; (80141e8 <_strtod_l+0xbc8>)
 8013fa6:	2200      	movs	r2, #0
 8013fa8:	4630      	mov	r0, r6
 8013faa:	4639      	mov	r1, r7
 8013fac:	f7ec fd96 	bl	8000adc <__aeabi_dcmplt>
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	d15c      	bne.n	801406e <_strtod_l+0xa4e>
 8013fb4:	4630      	mov	r0, r6
 8013fb6:	4639      	mov	r1, r7
 8013fb8:	4b8c      	ldr	r3, [pc, #560]	; (80141ec <_strtod_l+0xbcc>)
 8013fba:	2200      	movs	r2, #0
 8013fbc:	f7ec fb1c 	bl	80005f8 <__aeabi_dmul>
 8013fc0:	4606      	mov	r6, r0
 8013fc2:	460f      	mov	r7, r1
 8013fc4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013fc8:	9606      	str	r6, [sp, #24]
 8013fca:	9307      	str	r3, [sp, #28]
 8013fcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013fd4:	4b86      	ldr	r3, [pc, #536]	; (80141f0 <_strtod_l+0xbd0>)
 8013fd6:	ea0a 0303 	and.w	r3, sl, r3
 8013fda:	930d      	str	r3, [sp, #52]	; 0x34
 8013fdc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013fde:	4b85      	ldr	r3, [pc, #532]	; (80141f4 <_strtod_l+0xbd4>)
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	f040 8090 	bne.w	8014106 <_strtod_l+0xae6>
 8013fe6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013fea:	ec49 8b10 	vmov	d0, r8, r9
 8013fee:	f7ff f9b9 	bl	8013364 <__ulp>
 8013ff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ff6:	ec51 0b10 	vmov	r0, r1, d0
 8013ffa:	f7ec fafd 	bl	80005f8 <__aeabi_dmul>
 8013ffe:	4642      	mov	r2, r8
 8014000:	464b      	mov	r3, r9
 8014002:	f7ec f943 	bl	800028c <__adddf3>
 8014006:	460b      	mov	r3, r1
 8014008:	4979      	ldr	r1, [pc, #484]	; (80141f0 <_strtod_l+0xbd0>)
 801400a:	4a7b      	ldr	r2, [pc, #492]	; (80141f8 <_strtod_l+0xbd8>)
 801400c:	4019      	ands	r1, r3
 801400e:	4291      	cmp	r1, r2
 8014010:	4680      	mov	r8, r0
 8014012:	d944      	bls.n	801409e <_strtod_l+0xa7e>
 8014014:	ee18 2a90 	vmov	r2, s17
 8014018:	4b78      	ldr	r3, [pc, #480]	; (80141fc <_strtod_l+0xbdc>)
 801401a:	429a      	cmp	r2, r3
 801401c:	d104      	bne.n	8014028 <_strtod_l+0xa08>
 801401e:	ee18 3a10 	vmov	r3, s16
 8014022:	3301      	adds	r3, #1
 8014024:	f43f ad40 	beq.w	8013aa8 <_strtod_l+0x488>
 8014028:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80141fc <_strtod_l+0xbdc>
 801402c:	f04f 38ff 	mov.w	r8, #4294967295
 8014030:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014032:	4620      	mov	r0, r4
 8014034:	f7fe fe6a 	bl	8012d0c <_Bfree>
 8014038:	9905      	ldr	r1, [sp, #20]
 801403a:	4620      	mov	r0, r4
 801403c:	f7fe fe66 	bl	8012d0c <_Bfree>
 8014040:	4659      	mov	r1, fp
 8014042:	4620      	mov	r0, r4
 8014044:	f7fe fe62 	bl	8012d0c <_Bfree>
 8014048:	4629      	mov	r1, r5
 801404a:	4620      	mov	r0, r4
 801404c:	f7fe fe5e 	bl	8012d0c <_Bfree>
 8014050:	e609      	b.n	8013c66 <_strtod_l+0x646>
 8014052:	f1b8 0f01 	cmp.w	r8, #1
 8014056:	d103      	bne.n	8014060 <_strtod_l+0xa40>
 8014058:	f1b9 0f00 	cmp.w	r9, #0
 801405c:	f43f ad95 	beq.w	8013b8a <_strtod_l+0x56a>
 8014060:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80141b8 <_strtod_l+0xb98>
 8014064:	4f60      	ldr	r7, [pc, #384]	; (80141e8 <_strtod_l+0xbc8>)
 8014066:	ed8d 7b06 	vstr	d7, [sp, #24]
 801406a:	2600      	movs	r6, #0
 801406c:	e7ae      	b.n	8013fcc <_strtod_l+0x9ac>
 801406e:	4f5f      	ldr	r7, [pc, #380]	; (80141ec <_strtod_l+0xbcc>)
 8014070:	2600      	movs	r6, #0
 8014072:	e7a7      	b.n	8013fc4 <_strtod_l+0x9a4>
 8014074:	4b5d      	ldr	r3, [pc, #372]	; (80141ec <_strtod_l+0xbcc>)
 8014076:	4630      	mov	r0, r6
 8014078:	4639      	mov	r1, r7
 801407a:	2200      	movs	r2, #0
 801407c:	f7ec fabc 	bl	80005f8 <__aeabi_dmul>
 8014080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014082:	4606      	mov	r6, r0
 8014084:	460f      	mov	r7, r1
 8014086:	2b00      	cmp	r3, #0
 8014088:	d09c      	beq.n	8013fc4 <_strtod_l+0x9a4>
 801408a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801408e:	e79d      	b.n	8013fcc <_strtod_l+0x9ac>
 8014090:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80141c0 <_strtod_l+0xba0>
 8014094:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014098:	ec57 6b17 	vmov	r6, r7, d7
 801409c:	e796      	b.n	8013fcc <_strtod_l+0x9ac>
 801409e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80140a2:	9b04      	ldr	r3, [sp, #16]
 80140a4:	46ca      	mov	sl, r9
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d1c2      	bne.n	8014030 <_strtod_l+0xa10>
 80140aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80140ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80140b0:	0d1b      	lsrs	r3, r3, #20
 80140b2:	051b      	lsls	r3, r3, #20
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d1bb      	bne.n	8014030 <_strtod_l+0xa10>
 80140b8:	4630      	mov	r0, r6
 80140ba:	4639      	mov	r1, r7
 80140bc:	f7ec fde4 	bl	8000c88 <__aeabi_d2lz>
 80140c0:	f7ec fa6c 	bl	800059c <__aeabi_l2d>
 80140c4:	4602      	mov	r2, r0
 80140c6:	460b      	mov	r3, r1
 80140c8:	4630      	mov	r0, r6
 80140ca:	4639      	mov	r1, r7
 80140cc:	f7ec f8dc 	bl	8000288 <__aeabi_dsub>
 80140d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80140d6:	ea43 0308 	orr.w	r3, r3, r8
 80140da:	4313      	orrs	r3, r2
 80140dc:	4606      	mov	r6, r0
 80140de:	460f      	mov	r7, r1
 80140e0:	d054      	beq.n	801418c <_strtod_l+0xb6c>
 80140e2:	a339      	add	r3, pc, #228	; (adr r3, 80141c8 <_strtod_l+0xba8>)
 80140e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e8:	f7ec fcf8 	bl	8000adc <__aeabi_dcmplt>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	f47f ace5 	bne.w	8013abc <_strtod_l+0x49c>
 80140f2:	a337      	add	r3, pc, #220	; (adr r3, 80141d0 <_strtod_l+0xbb0>)
 80140f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f8:	4630      	mov	r0, r6
 80140fa:	4639      	mov	r1, r7
 80140fc:	f7ec fd0c 	bl	8000b18 <__aeabi_dcmpgt>
 8014100:	2800      	cmp	r0, #0
 8014102:	d095      	beq.n	8014030 <_strtod_l+0xa10>
 8014104:	e4da      	b.n	8013abc <_strtod_l+0x49c>
 8014106:	9b04      	ldr	r3, [sp, #16]
 8014108:	b333      	cbz	r3, 8014158 <_strtod_l+0xb38>
 801410a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801410c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014110:	d822      	bhi.n	8014158 <_strtod_l+0xb38>
 8014112:	a331      	add	r3, pc, #196	; (adr r3, 80141d8 <_strtod_l+0xbb8>)
 8014114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014118:	4630      	mov	r0, r6
 801411a:	4639      	mov	r1, r7
 801411c:	f7ec fce8 	bl	8000af0 <__aeabi_dcmple>
 8014120:	b1a0      	cbz	r0, 801414c <_strtod_l+0xb2c>
 8014122:	4639      	mov	r1, r7
 8014124:	4630      	mov	r0, r6
 8014126:	f7ec fd3f 	bl	8000ba8 <__aeabi_d2uiz>
 801412a:	2801      	cmp	r0, #1
 801412c:	bf38      	it	cc
 801412e:	2001      	movcc	r0, #1
 8014130:	f7ec f9e8 	bl	8000504 <__aeabi_ui2d>
 8014134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014136:	4606      	mov	r6, r0
 8014138:	460f      	mov	r7, r1
 801413a:	bb23      	cbnz	r3, 8014186 <_strtod_l+0xb66>
 801413c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014140:	9010      	str	r0, [sp, #64]	; 0x40
 8014142:	9311      	str	r3, [sp, #68]	; 0x44
 8014144:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014148:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801414c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801414e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014150:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014154:	1a9b      	subs	r3, r3, r2
 8014156:	930f      	str	r3, [sp, #60]	; 0x3c
 8014158:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801415c:	eeb0 0a48 	vmov.f32	s0, s16
 8014160:	eef0 0a68 	vmov.f32	s1, s17
 8014164:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014168:	f7ff f8fc 	bl	8013364 <__ulp>
 801416c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8014170:	ec53 2b10 	vmov	r2, r3, d0
 8014174:	f7ec fa40 	bl	80005f8 <__aeabi_dmul>
 8014178:	ec53 2b18 	vmov	r2, r3, d8
 801417c:	f7ec f886 	bl	800028c <__adddf3>
 8014180:	4680      	mov	r8, r0
 8014182:	4689      	mov	r9, r1
 8014184:	e78d      	b.n	80140a2 <_strtod_l+0xa82>
 8014186:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801418a:	e7db      	b.n	8014144 <_strtod_l+0xb24>
 801418c:	a314      	add	r3, pc, #80	; (adr r3, 80141e0 <_strtod_l+0xbc0>)
 801418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014192:	f7ec fca3 	bl	8000adc <__aeabi_dcmplt>
 8014196:	e7b3      	b.n	8014100 <_strtod_l+0xae0>
 8014198:	2300      	movs	r3, #0
 801419a:	930a      	str	r3, [sp, #40]	; 0x28
 801419c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801419e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141a0:	6013      	str	r3, [r2, #0]
 80141a2:	f7ff ba7c 	b.w	801369e <_strtod_l+0x7e>
 80141a6:	2a65      	cmp	r2, #101	; 0x65
 80141a8:	f43f ab75 	beq.w	8013896 <_strtod_l+0x276>
 80141ac:	2a45      	cmp	r2, #69	; 0x45
 80141ae:	f43f ab72 	beq.w	8013896 <_strtod_l+0x276>
 80141b2:	2301      	movs	r3, #1
 80141b4:	f7ff bbaa 	b.w	801390c <_strtod_l+0x2ec>
 80141b8:	00000000 	.word	0x00000000
 80141bc:	bff00000 	.word	0xbff00000
 80141c0:	00000000 	.word	0x00000000
 80141c4:	3ff00000 	.word	0x3ff00000
 80141c8:	94a03595 	.word	0x94a03595
 80141cc:	3fdfffff 	.word	0x3fdfffff
 80141d0:	35afe535 	.word	0x35afe535
 80141d4:	3fe00000 	.word	0x3fe00000
 80141d8:	ffc00000 	.word	0xffc00000
 80141dc:	41dfffff 	.word	0x41dfffff
 80141e0:	94a03595 	.word	0x94a03595
 80141e4:	3fcfffff 	.word	0x3fcfffff
 80141e8:	3ff00000 	.word	0x3ff00000
 80141ec:	3fe00000 	.word	0x3fe00000
 80141f0:	7ff00000 	.word	0x7ff00000
 80141f4:	7fe00000 	.word	0x7fe00000
 80141f8:	7c9fffff 	.word	0x7c9fffff
 80141fc:	7fefffff 	.word	0x7fefffff

08014200 <_strtod_r>:
 8014200:	4b01      	ldr	r3, [pc, #4]	; (8014208 <_strtod_r+0x8>)
 8014202:	f7ff ba0d 	b.w	8013620 <_strtod_l>
 8014206:	bf00      	nop
 8014208:	20000168 	.word	0x20000168

0801420c <_strtol_l.constprop.0>:
 801420c:	2b01      	cmp	r3, #1
 801420e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014212:	d001      	beq.n	8014218 <_strtol_l.constprop.0+0xc>
 8014214:	2b24      	cmp	r3, #36	; 0x24
 8014216:	d906      	bls.n	8014226 <_strtol_l.constprop.0+0x1a>
 8014218:	f7fd fd7e 	bl	8011d18 <__errno>
 801421c:	2316      	movs	r3, #22
 801421e:	6003      	str	r3, [r0, #0]
 8014220:	2000      	movs	r0, #0
 8014222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014226:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801430c <_strtol_l.constprop.0+0x100>
 801422a:	460d      	mov	r5, r1
 801422c:	462e      	mov	r6, r5
 801422e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014232:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8014236:	f017 0708 	ands.w	r7, r7, #8
 801423a:	d1f7      	bne.n	801422c <_strtol_l.constprop.0+0x20>
 801423c:	2c2d      	cmp	r4, #45	; 0x2d
 801423e:	d132      	bne.n	80142a6 <_strtol_l.constprop.0+0x9a>
 8014240:	782c      	ldrb	r4, [r5, #0]
 8014242:	2701      	movs	r7, #1
 8014244:	1cb5      	adds	r5, r6, #2
 8014246:	2b00      	cmp	r3, #0
 8014248:	d05b      	beq.n	8014302 <_strtol_l.constprop.0+0xf6>
 801424a:	2b10      	cmp	r3, #16
 801424c:	d109      	bne.n	8014262 <_strtol_l.constprop.0+0x56>
 801424e:	2c30      	cmp	r4, #48	; 0x30
 8014250:	d107      	bne.n	8014262 <_strtol_l.constprop.0+0x56>
 8014252:	782c      	ldrb	r4, [r5, #0]
 8014254:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014258:	2c58      	cmp	r4, #88	; 0x58
 801425a:	d14d      	bne.n	80142f8 <_strtol_l.constprop.0+0xec>
 801425c:	786c      	ldrb	r4, [r5, #1]
 801425e:	2310      	movs	r3, #16
 8014260:	3502      	adds	r5, #2
 8014262:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014266:	f108 38ff 	add.w	r8, r8, #4294967295
 801426a:	f04f 0e00 	mov.w	lr, #0
 801426e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014272:	4676      	mov	r6, lr
 8014274:	fb03 8a19 	mls	sl, r3, r9, r8
 8014278:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801427c:	f1bc 0f09 	cmp.w	ip, #9
 8014280:	d816      	bhi.n	80142b0 <_strtol_l.constprop.0+0xa4>
 8014282:	4664      	mov	r4, ip
 8014284:	42a3      	cmp	r3, r4
 8014286:	dd24      	ble.n	80142d2 <_strtol_l.constprop.0+0xc6>
 8014288:	f1be 3fff 	cmp.w	lr, #4294967295
 801428c:	d008      	beq.n	80142a0 <_strtol_l.constprop.0+0x94>
 801428e:	45b1      	cmp	r9, r6
 8014290:	d31c      	bcc.n	80142cc <_strtol_l.constprop.0+0xc0>
 8014292:	d101      	bne.n	8014298 <_strtol_l.constprop.0+0x8c>
 8014294:	45a2      	cmp	sl, r4
 8014296:	db19      	blt.n	80142cc <_strtol_l.constprop.0+0xc0>
 8014298:	fb06 4603 	mla	r6, r6, r3, r4
 801429c:	f04f 0e01 	mov.w	lr, #1
 80142a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142a4:	e7e8      	b.n	8014278 <_strtol_l.constprop.0+0x6c>
 80142a6:	2c2b      	cmp	r4, #43	; 0x2b
 80142a8:	bf04      	itt	eq
 80142aa:	782c      	ldrbeq	r4, [r5, #0]
 80142ac:	1cb5      	addeq	r5, r6, #2
 80142ae:	e7ca      	b.n	8014246 <_strtol_l.constprop.0+0x3a>
 80142b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80142b4:	f1bc 0f19 	cmp.w	ip, #25
 80142b8:	d801      	bhi.n	80142be <_strtol_l.constprop.0+0xb2>
 80142ba:	3c37      	subs	r4, #55	; 0x37
 80142bc:	e7e2      	b.n	8014284 <_strtol_l.constprop.0+0x78>
 80142be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80142c2:	f1bc 0f19 	cmp.w	ip, #25
 80142c6:	d804      	bhi.n	80142d2 <_strtol_l.constprop.0+0xc6>
 80142c8:	3c57      	subs	r4, #87	; 0x57
 80142ca:	e7db      	b.n	8014284 <_strtol_l.constprop.0+0x78>
 80142cc:	f04f 3eff 	mov.w	lr, #4294967295
 80142d0:	e7e6      	b.n	80142a0 <_strtol_l.constprop.0+0x94>
 80142d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80142d6:	d105      	bne.n	80142e4 <_strtol_l.constprop.0+0xd8>
 80142d8:	2322      	movs	r3, #34	; 0x22
 80142da:	6003      	str	r3, [r0, #0]
 80142dc:	4646      	mov	r6, r8
 80142de:	b942      	cbnz	r2, 80142f2 <_strtol_l.constprop.0+0xe6>
 80142e0:	4630      	mov	r0, r6
 80142e2:	e79e      	b.n	8014222 <_strtol_l.constprop.0+0x16>
 80142e4:	b107      	cbz	r7, 80142e8 <_strtol_l.constprop.0+0xdc>
 80142e6:	4276      	negs	r6, r6
 80142e8:	2a00      	cmp	r2, #0
 80142ea:	d0f9      	beq.n	80142e0 <_strtol_l.constprop.0+0xd4>
 80142ec:	f1be 0f00 	cmp.w	lr, #0
 80142f0:	d000      	beq.n	80142f4 <_strtol_l.constprop.0+0xe8>
 80142f2:	1e69      	subs	r1, r5, #1
 80142f4:	6011      	str	r1, [r2, #0]
 80142f6:	e7f3      	b.n	80142e0 <_strtol_l.constprop.0+0xd4>
 80142f8:	2430      	movs	r4, #48	; 0x30
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d1b1      	bne.n	8014262 <_strtol_l.constprop.0+0x56>
 80142fe:	2308      	movs	r3, #8
 8014300:	e7af      	b.n	8014262 <_strtol_l.constprop.0+0x56>
 8014302:	2c30      	cmp	r4, #48	; 0x30
 8014304:	d0a5      	beq.n	8014252 <_strtol_l.constprop.0+0x46>
 8014306:	230a      	movs	r3, #10
 8014308:	e7ab      	b.n	8014262 <_strtol_l.constprop.0+0x56>
 801430a:	bf00      	nop
 801430c:	080159b1 	.word	0x080159b1

08014310 <_strtol_r>:
 8014310:	f7ff bf7c 	b.w	801420c <_strtol_l.constprop.0>

08014314 <__ssputs_r>:
 8014314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014318:	688e      	ldr	r6, [r1, #8]
 801431a:	461f      	mov	r7, r3
 801431c:	42be      	cmp	r6, r7
 801431e:	680b      	ldr	r3, [r1, #0]
 8014320:	4682      	mov	sl, r0
 8014322:	460c      	mov	r4, r1
 8014324:	4690      	mov	r8, r2
 8014326:	d82c      	bhi.n	8014382 <__ssputs_r+0x6e>
 8014328:	898a      	ldrh	r2, [r1, #12]
 801432a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801432e:	d026      	beq.n	801437e <__ssputs_r+0x6a>
 8014330:	6965      	ldr	r5, [r4, #20]
 8014332:	6909      	ldr	r1, [r1, #16]
 8014334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014338:	eba3 0901 	sub.w	r9, r3, r1
 801433c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014340:	1c7b      	adds	r3, r7, #1
 8014342:	444b      	add	r3, r9
 8014344:	106d      	asrs	r5, r5, #1
 8014346:	429d      	cmp	r5, r3
 8014348:	bf38      	it	cc
 801434a:	461d      	movcc	r5, r3
 801434c:	0553      	lsls	r3, r2, #21
 801434e:	d527      	bpl.n	80143a0 <__ssputs_r+0x8c>
 8014350:	4629      	mov	r1, r5
 8014352:	f7fe fc0f 	bl	8012b74 <_malloc_r>
 8014356:	4606      	mov	r6, r0
 8014358:	b360      	cbz	r0, 80143b4 <__ssputs_r+0xa0>
 801435a:	6921      	ldr	r1, [r4, #16]
 801435c:	464a      	mov	r2, r9
 801435e:	f7fd fd07 	bl	8011d70 <memcpy>
 8014362:	89a3      	ldrh	r3, [r4, #12]
 8014364:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801436c:	81a3      	strh	r3, [r4, #12]
 801436e:	6126      	str	r6, [r4, #16]
 8014370:	6165      	str	r5, [r4, #20]
 8014372:	444e      	add	r6, r9
 8014374:	eba5 0509 	sub.w	r5, r5, r9
 8014378:	6026      	str	r6, [r4, #0]
 801437a:	60a5      	str	r5, [r4, #8]
 801437c:	463e      	mov	r6, r7
 801437e:	42be      	cmp	r6, r7
 8014380:	d900      	bls.n	8014384 <__ssputs_r+0x70>
 8014382:	463e      	mov	r6, r7
 8014384:	6820      	ldr	r0, [r4, #0]
 8014386:	4632      	mov	r2, r6
 8014388:	4641      	mov	r1, r8
 801438a:	f7fd fc3e 	bl	8011c0a <memmove>
 801438e:	68a3      	ldr	r3, [r4, #8]
 8014390:	1b9b      	subs	r3, r3, r6
 8014392:	60a3      	str	r3, [r4, #8]
 8014394:	6823      	ldr	r3, [r4, #0]
 8014396:	4433      	add	r3, r6
 8014398:	6023      	str	r3, [r4, #0]
 801439a:	2000      	movs	r0, #0
 801439c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143a0:	462a      	mov	r2, r5
 80143a2:	f000 fd86 	bl	8014eb2 <_realloc_r>
 80143a6:	4606      	mov	r6, r0
 80143a8:	2800      	cmp	r0, #0
 80143aa:	d1e0      	bne.n	801436e <__ssputs_r+0x5a>
 80143ac:	6921      	ldr	r1, [r4, #16]
 80143ae:	4650      	mov	r0, sl
 80143b0:	f7fe fb6c 	bl	8012a8c <_free_r>
 80143b4:	230c      	movs	r3, #12
 80143b6:	f8ca 3000 	str.w	r3, [sl]
 80143ba:	89a3      	ldrh	r3, [r4, #12]
 80143bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143c0:	81a3      	strh	r3, [r4, #12]
 80143c2:	f04f 30ff 	mov.w	r0, #4294967295
 80143c6:	e7e9      	b.n	801439c <__ssputs_r+0x88>

080143c8 <_svfiprintf_r>:
 80143c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143cc:	4698      	mov	r8, r3
 80143ce:	898b      	ldrh	r3, [r1, #12]
 80143d0:	061b      	lsls	r3, r3, #24
 80143d2:	b09d      	sub	sp, #116	; 0x74
 80143d4:	4607      	mov	r7, r0
 80143d6:	460d      	mov	r5, r1
 80143d8:	4614      	mov	r4, r2
 80143da:	d50e      	bpl.n	80143fa <_svfiprintf_r+0x32>
 80143dc:	690b      	ldr	r3, [r1, #16]
 80143de:	b963      	cbnz	r3, 80143fa <_svfiprintf_r+0x32>
 80143e0:	2140      	movs	r1, #64	; 0x40
 80143e2:	f7fe fbc7 	bl	8012b74 <_malloc_r>
 80143e6:	6028      	str	r0, [r5, #0]
 80143e8:	6128      	str	r0, [r5, #16]
 80143ea:	b920      	cbnz	r0, 80143f6 <_svfiprintf_r+0x2e>
 80143ec:	230c      	movs	r3, #12
 80143ee:	603b      	str	r3, [r7, #0]
 80143f0:	f04f 30ff 	mov.w	r0, #4294967295
 80143f4:	e0d0      	b.n	8014598 <_svfiprintf_r+0x1d0>
 80143f6:	2340      	movs	r3, #64	; 0x40
 80143f8:	616b      	str	r3, [r5, #20]
 80143fa:	2300      	movs	r3, #0
 80143fc:	9309      	str	r3, [sp, #36]	; 0x24
 80143fe:	2320      	movs	r3, #32
 8014400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014404:	f8cd 800c 	str.w	r8, [sp, #12]
 8014408:	2330      	movs	r3, #48	; 0x30
 801440a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80145b0 <_svfiprintf_r+0x1e8>
 801440e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014412:	f04f 0901 	mov.w	r9, #1
 8014416:	4623      	mov	r3, r4
 8014418:	469a      	mov	sl, r3
 801441a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801441e:	b10a      	cbz	r2, 8014424 <_svfiprintf_r+0x5c>
 8014420:	2a25      	cmp	r2, #37	; 0x25
 8014422:	d1f9      	bne.n	8014418 <_svfiprintf_r+0x50>
 8014424:	ebba 0b04 	subs.w	fp, sl, r4
 8014428:	d00b      	beq.n	8014442 <_svfiprintf_r+0x7a>
 801442a:	465b      	mov	r3, fp
 801442c:	4622      	mov	r2, r4
 801442e:	4629      	mov	r1, r5
 8014430:	4638      	mov	r0, r7
 8014432:	f7ff ff6f 	bl	8014314 <__ssputs_r>
 8014436:	3001      	adds	r0, #1
 8014438:	f000 80a9 	beq.w	801458e <_svfiprintf_r+0x1c6>
 801443c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801443e:	445a      	add	r2, fp
 8014440:	9209      	str	r2, [sp, #36]	; 0x24
 8014442:	f89a 3000 	ldrb.w	r3, [sl]
 8014446:	2b00      	cmp	r3, #0
 8014448:	f000 80a1 	beq.w	801458e <_svfiprintf_r+0x1c6>
 801444c:	2300      	movs	r3, #0
 801444e:	f04f 32ff 	mov.w	r2, #4294967295
 8014452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014456:	f10a 0a01 	add.w	sl, sl, #1
 801445a:	9304      	str	r3, [sp, #16]
 801445c:	9307      	str	r3, [sp, #28]
 801445e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014462:	931a      	str	r3, [sp, #104]	; 0x68
 8014464:	4654      	mov	r4, sl
 8014466:	2205      	movs	r2, #5
 8014468:	f814 1b01 	ldrb.w	r1, [r4], #1
 801446c:	4850      	ldr	r0, [pc, #320]	; (80145b0 <_svfiprintf_r+0x1e8>)
 801446e:	f7eb feaf 	bl	80001d0 <memchr>
 8014472:	9a04      	ldr	r2, [sp, #16]
 8014474:	b9d8      	cbnz	r0, 80144ae <_svfiprintf_r+0xe6>
 8014476:	06d0      	lsls	r0, r2, #27
 8014478:	bf44      	itt	mi
 801447a:	2320      	movmi	r3, #32
 801447c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014480:	0711      	lsls	r1, r2, #28
 8014482:	bf44      	itt	mi
 8014484:	232b      	movmi	r3, #43	; 0x2b
 8014486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801448a:	f89a 3000 	ldrb.w	r3, [sl]
 801448e:	2b2a      	cmp	r3, #42	; 0x2a
 8014490:	d015      	beq.n	80144be <_svfiprintf_r+0xf6>
 8014492:	9a07      	ldr	r2, [sp, #28]
 8014494:	4654      	mov	r4, sl
 8014496:	2000      	movs	r0, #0
 8014498:	f04f 0c0a 	mov.w	ip, #10
 801449c:	4621      	mov	r1, r4
 801449e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144a2:	3b30      	subs	r3, #48	; 0x30
 80144a4:	2b09      	cmp	r3, #9
 80144a6:	d94d      	bls.n	8014544 <_svfiprintf_r+0x17c>
 80144a8:	b1b0      	cbz	r0, 80144d8 <_svfiprintf_r+0x110>
 80144aa:	9207      	str	r2, [sp, #28]
 80144ac:	e014      	b.n	80144d8 <_svfiprintf_r+0x110>
 80144ae:	eba0 0308 	sub.w	r3, r0, r8
 80144b2:	fa09 f303 	lsl.w	r3, r9, r3
 80144b6:	4313      	orrs	r3, r2
 80144b8:	9304      	str	r3, [sp, #16]
 80144ba:	46a2      	mov	sl, r4
 80144bc:	e7d2      	b.n	8014464 <_svfiprintf_r+0x9c>
 80144be:	9b03      	ldr	r3, [sp, #12]
 80144c0:	1d19      	adds	r1, r3, #4
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	9103      	str	r1, [sp, #12]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	bfbb      	ittet	lt
 80144ca:	425b      	neglt	r3, r3
 80144cc:	f042 0202 	orrlt.w	r2, r2, #2
 80144d0:	9307      	strge	r3, [sp, #28]
 80144d2:	9307      	strlt	r3, [sp, #28]
 80144d4:	bfb8      	it	lt
 80144d6:	9204      	strlt	r2, [sp, #16]
 80144d8:	7823      	ldrb	r3, [r4, #0]
 80144da:	2b2e      	cmp	r3, #46	; 0x2e
 80144dc:	d10c      	bne.n	80144f8 <_svfiprintf_r+0x130>
 80144de:	7863      	ldrb	r3, [r4, #1]
 80144e0:	2b2a      	cmp	r3, #42	; 0x2a
 80144e2:	d134      	bne.n	801454e <_svfiprintf_r+0x186>
 80144e4:	9b03      	ldr	r3, [sp, #12]
 80144e6:	1d1a      	adds	r2, r3, #4
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	9203      	str	r2, [sp, #12]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	bfb8      	it	lt
 80144f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80144f4:	3402      	adds	r4, #2
 80144f6:	9305      	str	r3, [sp, #20]
 80144f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80145c0 <_svfiprintf_r+0x1f8>
 80144fc:	7821      	ldrb	r1, [r4, #0]
 80144fe:	2203      	movs	r2, #3
 8014500:	4650      	mov	r0, sl
 8014502:	f7eb fe65 	bl	80001d0 <memchr>
 8014506:	b138      	cbz	r0, 8014518 <_svfiprintf_r+0x150>
 8014508:	9b04      	ldr	r3, [sp, #16]
 801450a:	eba0 000a 	sub.w	r0, r0, sl
 801450e:	2240      	movs	r2, #64	; 0x40
 8014510:	4082      	lsls	r2, r0
 8014512:	4313      	orrs	r3, r2
 8014514:	3401      	adds	r4, #1
 8014516:	9304      	str	r3, [sp, #16]
 8014518:	f814 1b01 	ldrb.w	r1, [r4], #1
 801451c:	4825      	ldr	r0, [pc, #148]	; (80145b4 <_svfiprintf_r+0x1ec>)
 801451e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014522:	2206      	movs	r2, #6
 8014524:	f7eb fe54 	bl	80001d0 <memchr>
 8014528:	2800      	cmp	r0, #0
 801452a:	d038      	beq.n	801459e <_svfiprintf_r+0x1d6>
 801452c:	4b22      	ldr	r3, [pc, #136]	; (80145b8 <_svfiprintf_r+0x1f0>)
 801452e:	bb1b      	cbnz	r3, 8014578 <_svfiprintf_r+0x1b0>
 8014530:	9b03      	ldr	r3, [sp, #12]
 8014532:	3307      	adds	r3, #7
 8014534:	f023 0307 	bic.w	r3, r3, #7
 8014538:	3308      	adds	r3, #8
 801453a:	9303      	str	r3, [sp, #12]
 801453c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801453e:	4433      	add	r3, r6
 8014540:	9309      	str	r3, [sp, #36]	; 0x24
 8014542:	e768      	b.n	8014416 <_svfiprintf_r+0x4e>
 8014544:	fb0c 3202 	mla	r2, ip, r2, r3
 8014548:	460c      	mov	r4, r1
 801454a:	2001      	movs	r0, #1
 801454c:	e7a6      	b.n	801449c <_svfiprintf_r+0xd4>
 801454e:	2300      	movs	r3, #0
 8014550:	3401      	adds	r4, #1
 8014552:	9305      	str	r3, [sp, #20]
 8014554:	4619      	mov	r1, r3
 8014556:	f04f 0c0a 	mov.w	ip, #10
 801455a:	4620      	mov	r0, r4
 801455c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014560:	3a30      	subs	r2, #48	; 0x30
 8014562:	2a09      	cmp	r2, #9
 8014564:	d903      	bls.n	801456e <_svfiprintf_r+0x1a6>
 8014566:	2b00      	cmp	r3, #0
 8014568:	d0c6      	beq.n	80144f8 <_svfiprintf_r+0x130>
 801456a:	9105      	str	r1, [sp, #20]
 801456c:	e7c4      	b.n	80144f8 <_svfiprintf_r+0x130>
 801456e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014572:	4604      	mov	r4, r0
 8014574:	2301      	movs	r3, #1
 8014576:	e7f0      	b.n	801455a <_svfiprintf_r+0x192>
 8014578:	ab03      	add	r3, sp, #12
 801457a:	9300      	str	r3, [sp, #0]
 801457c:	462a      	mov	r2, r5
 801457e:	4b0f      	ldr	r3, [pc, #60]	; (80145bc <_svfiprintf_r+0x1f4>)
 8014580:	a904      	add	r1, sp, #16
 8014582:	4638      	mov	r0, r7
 8014584:	f7fc fc24 	bl	8010dd0 <_printf_float>
 8014588:	1c42      	adds	r2, r0, #1
 801458a:	4606      	mov	r6, r0
 801458c:	d1d6      	bne.n	801453c <_svfiprintf_r+0x174>
 801458e:	89ab      	ldrh	r3, [r5, #12]
 8014590:	065b      	lsls	r3, r3, #25
 8014592:	f53f af2d 	bmi.w	80143f0 <_svfiprintf_r+0x28>
 8014596:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014598:	b01d      	add	sp, #116	; 0x74
 801459a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801459e:	ab03      	add	r3, sp, #12
 80145a0:	9300      	str	r3, [sp, #0]
 80145a2:	462a      	mov	r2, r5
 80145a4:	4b05      	ldr	r3, [pc, #20]	; (80145bc <_svfiprintf_r+0x1f4>)
 80145a6:	a904      	add	r1, sp, #16
 80145a8:	4638      	mov	r0, r7
 80145aa:	f7fc feb5 	bl	8011318 <_printf_i>
 80145ae:	e7eb      	b.n	8014588 <_svfiprintf_r+0x1c0>
 80145b0:	08015ab1 	.word	0x08015ab1
 80145b4:	08015abb 	.word	0x08015abb
 80145b8:	08010dd1 	.word	0x08010dd1
 80145bc:	08014315 	.word	0x08014315
 80145c0:	08015ab7 	.word	0x08015ab7

080145c4 <__sflush_r>:
 80145c4:	898a      	ldrh	r2, [r1, #12]
 80145c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ca:	4605      	mov	r5, r0
 80145cc:	0710      	lsls	r0, r2, #28
 80145ce:	460c      	mov	r4, r1
 80145d0:	d458      	bmi.n	8014684 <__sflush_r+0xc0>
 80145d2:	684b      	ldr	r3, [r1, #4]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	dc05      	bgt.n	80145e4 <__sflush_r+0x20>
 80145d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80145da:	2b00      	cmp	r3, #0
 80145dc:	dc02      	bgt.n	80145e4 <__sflush_r+0x20>
 80145de:	2000      	movs	r0, #0
 80145e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145e6:	2e00      	cmp	r6, #0
 80145e8:	d0f9      	beq.n	80145de <__sflush_r+0x1a>
 80145ea:	2300      	movs	r3, #0
 80145ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80145f0:	682f      	ldr	r7, [r5, #0]
 80145f2:	6a21      	ldr	r1, [r4, #32]
 80145f4:	602b      	str	r3, [r5, #0]
 80145f6:	d032      	beq.n	801465e <__sflush_r+0x9a>
 80145f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80145fa:	89a3      	ldrh	r3, [r4, #12]
 80145fc:	075a      	lsls	r2, r3, #29
 80145fe:	d505      	bpl.n	801460c <__sflush_r+0x48>
 8014600:	6863      	ldr	r3, [r4, #4]
 8014602:	1ac0      	subs	r0, r0, r3
 8014604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014606:	b10b      	cbz	r3, 801460c <__sflush_r+0x48>
 8014608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801460a:	1ac0      	subs	r0, r0, r3
 801460c:	2300      	movs	r3, #0
 801460e:	4602      	mov	r2, r0
 8014610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014612:	6a21      	ldr	r1, [r4, #32]
 8014614:	4628      	mov	r0, r5
 8014616:	47b0      	blx	r6
 8014618:	1c43      	adds	r3, r0, #1
 801461a:	89a3      	ldrh	r3, [r4, #12]
 801461c:	d106      	bne.n	801462c <__sflush_r+0x68>
 801461e:	6829      	ldr	r1, [r5, #0]
 8014620:	291d      	cmp	r1, #29
 8014622:	d82b      	bhi.n	801467c <__sflush_r+0xb8>
 8014624:	4a29      	ldr	r2, [pc, #164]	; (80146cc <__sflush_r+0x108>)
 8014626:	410a      	asrs	r2, r1
 8014628:	07d6      	lsls	r6, r2, #31
 801462a:	d427      	bmi.n	801467c <__sflush_r+0xb8>
 801462c:	2200      	movs	r2, #0
 801462e:	6062      	str	r2, [r4, #4]
 8014630:	04d9      	lsls	r1, r3, #19
 8014632:	6922      	ldr	r2, [r4, #16]
 8014634:	6022      	str	r2, [r4, #0]
 8014636:	d504      	bpl.n	8014642 <__sflush_r+0x7e>
 8014638:	1c42      	adds	r2, r0, #1
 801463a:	d101      	bne.n	8014640 <__sflush_r+0x7c>
 801463c:	682b      	ldr	r3, [r5, #0]
 801463e:	b903      	cbnz	r3, 8014642 <__sflush_r+0x7e>
 8014640:	6560      	str	r0, [r4, #84]	; 0x54
 8014642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014644:	602f      	str	r7, [r5, #0]
 8014646:	2900      	cmp	r1, #0
 8014648:	d0c9      	beq.n	80145de <__sflush_r+0x1a>
 801464a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801464e:	4299      	cmp	r1, r3
 8014650:	d002      	beq.n	8014658 <__sflush_r+0x94>
 8014652:	4628      	mov	r0, r5
 8014654:	f7fe fa1a 	bl	8012a8c <_free_r>
 8014658:	2000      	movs	r0, #0
 801465a:	6360      	str	r0, [r4, #52]	; 0x34
 801465c:	e7c0      	b.n	80145e0 <__sflush_r+0x1c>
 801465e:	2301      	movs	r3, #1
 8014660:	4628      	mov	r0, r5
 8014662:	47b0      	blx	r6
 8014664:	1c41      	adds	r1, r0, #1
 8014666:	d1c8      	bne.n	80145fa <__sflush_r+0x36>
 8014668:	682b      	ldr	r3, [r5, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d0c5      	beq.n	80145fa <__sflush_r+0x36>
 801466e:	2b1d      	cmp	r3, #29
 8014670:	d001      	beq.n	8014676 <__sflush_r+0xb2>
 8014672:	2b16      	cmp	r3, #22
 8014674:	d101      	bne.n	801467a <__sflush_r+0xb6>
 8014676:	602f      	str	r7, [r5, #0]
 8014678:	e7b1      	b.n	80145de <__sflush_r+0x1a>
 801467a:	89a3      	ldrh	r3, [r4, #12]
 801467c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014680:	81a3      	strh	r3, [r4, #12]
 8014682:	e7ad      	b.n	80145e0 <__sflush_r+0x1c>
 8014684:	690f      	ldr	r7, [r1, #16]
 8014686:	2f00      	cmp	r7, #0
 8014688:	d0a9      	beq.n	80145de <__sflush_r+0x1a>
 801468a:	0793      	lsls	r3, r2, #30
 801468c:	680e      	ldr	r6, [r1, #0]
 801468e:	bf08      	it	eq
 8014690:	694b      	ldreq	r3, [r1, #20]
 8014692:	600f      	str	r7, [r1, #0]
 8014694:	bf18      	it	ne
 8014696:	2300      	movne	r3, #0
 8014698:	eba6 0807 	sub.w	r8, r6, r7
 801469c:	608b      	str	r3, [r1, #8]
 801469e:	f1b8 0f00 	cmp.w	r8, #0
 80146a2:	dd9c      	ble.n	80145de <__sflush_r+0x1a>
 80146a4:	6a21      	ldr	r1, [r4, #32]
 80146a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80146a8:	4643      	mov	r3, r8
 80146aa:	463a      	mov	r2, r7
 80146ac:	4628      	mov	r0, r5
 80146ae:	47b0      	blx	r6
 80146b0:	2800      	cmp	r0, #0
 80146b2:	dc06      	bgt.n	80146c2 <__sflush_r+0xfe>
 80146b4:	89a3      	ldrh	r3, [r4, #12]
 80146b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146ba:	81a3      	strh	r3, [r4, #12]
 80146bc:	f04f 30ff 	mov.w	r0, #4294967295
 80146c0:	e78e      	b.n	80145e0 <__sflush_r+0x1c>
 80146c2:	4407      	add	r7, r0
 80146c4:	eba8 0800 	sub.w	r8, r8, r0
 80146c8:	e7e9      	b.n	801469e <__sflush_r+0xda>
 80146ca:	bf00      	nop
 80146cc:	dfbffffe 	.word	0xdfbffffe

080146d0 <_fflush_r>:
 80146d0:	b538      	push	{r3, r4, r5, lr}
 80146d2:	690b      	ldr	r3, [r1, #16]
 80146d4:	4605      	mov	r5, r0
 80146d6:	460c      	mov	r4, r1
 80146d8:	b913      	cbnz	r3, 80146e0 <_fflush_r+0x10>
 80146da:	2500      	movs	r5, #0
 80146dc:	4628      	mov	r0, r5
 80146de:	bd38      	pop	{r3, r4, r5, pc}
 80146e0:	b118      	cbz	r0, 80146ea <_fflush_r+0x1a>
 80146e2:	6a03      	ldr	r3, [r0, #32]
 80146e4:	b90b      	cbnz	r3, 80146ea <_fflush_r+0x1a>
 80146e6:	f7fd f9c3 	bl	8011a70 <__sinit>
 80146ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d0f3      	beq.n	80146da <_fflush_r+0xa>
 80146f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80146f4:	07d0      	lsls	r0, r2, #31
 80146f6:	d404      	bmi.n	8014702 <_fflush_r+0x32>
 80146f8:	0599      	lsls	r1, r3, #22
 80146fa:	d402      	bmi.n	8014702 <_fflush_r+0x32>
 80146fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146fe:	f7fd fb35 	bl	8011d6c <__retarget_lock_acquire_recursive>
 8014702:	4628      	mov	r0, r5
 8014704:	4621      	mov	r1, r4
 8014706:	f7ff ff5d 	bl	80145c4 <__sflush_r>
 801470a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801470c:	07da      	lsls	r2, r3, #31
 801470e:	4605      	mov	r5, r0
 8014710:	d4e4      	bmi.n	80146dc <_fflush_r+0xc>
 8014712:	89a3      	ldrh	r3, [r4, #12]
 8014714:	059b      	lsls	r3, r3, #22
 8014716:	d4e1      	bmi.n	80146dc <_fflush_r+0xc>
 8014718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801471a:	f7fd fb28 	bl	8011d6e <__retarget_lock_release_recursive>
 801471e:	e7dd      	b.n	80146dc <_fflush_r+0xc>

08014720 <strncmp>:
 8014720:	b510      	push	{r4, lr}
 8014722:	b16a      	cbz	r2, 8014740 <strncmp+0x20>
 8014724:	3901      	subs	r1, #1
 8014726:	1884      	adds	r4, r0, r2
 8014728:	f810 2b01 	ldrb.w	r2, [r0], #1
 801472c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014730:	429a      	cmp	r2, r3
 8014732:	d103      	bne.n	801473c <strncmp+0x1c>
 8014734:	42a0      	cmp	r0, r4
 8014736:	d001      	beq.n	801473c <strncmp+0x1c>
 8014738:	2a00      	cmp	r2, #0
 801473a:	d1f5      	bne.n	8014728 <strncmp+0x8>
 801473c:	1ad0      	subs	r0, r2, r3
 801473e:	bd10      	pop	{r4, pc}
 8014740:	4610      	mov	r0, r2
 8014742:	e7fc      	b.n	801473e <strncmp+0x1e>

08014744 <_sbrk_r>:
 8014744:	b538      	push	{r3, r4, r5, lr}
 8014746:	4d06      	ldr	r5, [pc, #24]	; (8014760 <_sbrk_r+0x1c>)
 8014748:	2300      	movs	r3, #0
 801474a:	4604      	mov	r4, r0
 801474c:	4608      	mov	r0, r1
 801474e:	602b      	str	r3, [r5, #0]
 8014750:	f7ed fd0a 	bl	8002168 <_sbrk>
 8014754:	1c43      	adds	r3, r0, #1
 8014756:	d102      	bne.n	801475e <_sbrk_r+0x1a>
 8014758:	682b      	ldr	r3, [r5, #0]
 801475a:	b103      	cbz	r3, 801475e <_sbrk_r+0x1a>
 801475c:	6023      	str	r3, [r4, #0]
 801475e:	bd38      	pop	{r3, r4, r5, pc}
 8014760:	2000e41c 	.word	0x2000e41c
 8014764:	00000000 	.word	0x00000000

08014768 <nan>:
 8014768:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014770 <nan+0x8>
 801476c:	4770      	bx	lr
 801476e:	bf00      	nop
 8014770:	00000000 	.word	0x00000000
 8014774:	7ff80000 	.word	0x7ff80000

08014778 <__assert_func>:
 8014778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801477a:	4614      	mov	r4, r2
 801477c:	461a      	mov	r2, r3
 801477e:	4b09      	ldr	r3, [pc, #36]	; (80147a4 <__assert_func+0x2c>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	4605      	mov	r5, r0
 8014784:	68d8      	ldr	r0, [r3, #12]
 8014786:	b14c      	cbz	r4, 801479c <__assert_func+0x24>
 8014788:	4b07      	ldr	r3, [pc, #28]	; (80147a8 <__assert_func+0x30>)
 801478a:	9100      	str	r1, [sp, #0]
 801478c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014790:	4906      	ldr	r1, [pc, #24]	; (80147ac <__assert_func+0x34>)
 8014792:	462b      	mov	r3, r5
 8014794:	f000 fbca 	bl	8014f2c <fiprintf>
 8014798:	f000 fbda 	bl	8014f50 <abort>
 801479c:	4b04      	ldr	r3, [pc, #16]	; (80147b0 <__assert_func+0x38>)
 801479e:	461c      	mov	r4, r3
 80147a0:	e7f3      	b.n	801478a <__assert_func+0x12>
 80147a2:	bf00      	nop
 80147a4:	20000164 	.word	0x20000164
 80147a8:	08015aca 	.word	0x08015aca
 80147ac:	08015ad7 	.word	0x08015ad7
 80147b0:	08015b05 	.word	0x08015b05

080147b4 <_calloc_r>:
 80147b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147b6:	fba1 2402 	umull	r2, r4, r1, r2
 80147ba:	b94c      	cbnz	r4, 80147d0 <_calloc_r+0x1c>
 80147bc:	4611      	mov	r1, r2
 80147be:	9201      	str	r2, [sp, #4]
 80147c0:	f7fe f9d8 	bl	8012b74 <_malloc_r>
 80147c4:	9a01      	ldr	r2, [sp, #4]
 80147c6:	4605      	mov	r5, r0
 80147c8:	b930      	cbnz	r0, 80147d8 <_calloc_r+0x24>
 80147ca:	4628      	mov	r0, r5
 80147cc:	b003      	add	sp, #12
 80147ce:	bd30      	pop	{r4, r5, pc}
 80147d0:	220c      	movs	r2, #12
 80147d2:	6002      	str	r2, [r0, #0]
 80147d4:	2500      	movs	r5, #0
 80147d6:	e7f8      	b.n	80147ca <_calloc_r+0x16>
 80147d8:	4621      	mov	r1, r4
 80147da:	f7fd fa30 	bl	8011c3e <memset>
 80147de:	e7f4      	b.n	80147ca <_calloc_r+0x16>

080147e0 <rshift>:
 80147e0:	6903      	ldr	r3, [r0, #16]
 80147e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80147e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80147ee:	f100 0414 	add.w	r4, r0, #20
 80147f2:	dd45      	ble.n	8014880 <rshift+0xa0>
 80147f4:	f011 011f 	ands.w	r1, r1, #31
 80147f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80147fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014800:	d10c      	bne.n	801481c <rshift+0x3c>
 8014802:	f100 0710 	add.w	r7, r0, #16
 8014806:	4629      	mov	r1, r5
 8014808:	42b1      	cmp	r1, r6
 801480a:	d334      	bcc.n	8014876 <rshift+0x96>
 801480c:	1a9b      	subs	r3, r3, r2
 801480e:	009b      	lsls	r3, r3, #2
 8014810:	1eea      	subs	r2, r5, #3
 8014812:	4296      	cmp	r6, r2
 8014814:	bf38      	it	cc
 8014816:	2300      	movcc	r3, #0
 8014818:	4423      	add	r3, r4
 801481a:	e015      	b.n	8014848 <rshift+0x68>
 801481c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014820:	f1c1 0820 	rsb	r8, r1, #32
 8014824:	40cf      	lsrs	r7, r1
 8014826:	f105 0e04 	add.w	lr, r5, #4
 801482a:	46a1      	mov	r9, r4
 801482c:	4576      	cmp	r6, lr
 801482e:	46f4      	mov	ip, lr
 8014830:	d815      	bhi.n	801485e <rshift+0x7e>
 8014832:	1a9a      	subs	r2, r3, r2
 8014834:	0092      	lsls	r2, r2, #2
 8014836:	3a04      	subs	r2, #4
 8014838:	3501      	adds	r5, #1
 801483a:	42ae      	cmp	r6, r5
 801483c:	bf38      	it	cc
 801483e:	2200      	movcc	r2, #0
 8014840:	18a3      	adds	r3, r4, r2
 8014842:	50a7      	str	r7, [r4, r2]
 8014844:	b107      	cbz	r7, 8014848 <rshift+0x68>
 8014846:	3304      	adds	r3, #4
 8014848:	1b1a      	subs	r2, r3, r4
 801484a:	42a3      	cmp	r3, r4
 801484c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014850:	bf08      	it	eq
 8014852:	2300      	moveq	r3, #0
 8014854:	6102      	str	r2, [r0, #16]
 8014856:	bf08      	it	eq
 8014858:	6143      	streq	r3, [r0, #20]
 801485a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801485e:	f8dc c000 	ldr.w	ip, [ip]
 8014862:	fa0c fc08 	lsl.w	ip, ip, r8
 8014866:	ea4c 0707 	orr.w	r7, ip, r7
 801486a:	f849 7b04 	str.w	r7, [r9], #4
 801486e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014872:	40cf      	lsrs	r7, r1
 8014874:	e7da      	b.n	801482c <rshift+0x4c>
 8014876:	f851 cb04 	ldr.w	ip, [r1], #4
 801487a:	f847 cf04 	str.w	ip, [r7, #4]!
 801487e:	e7c3      	b.n	8014808 <rshift+0x28>
 8014880:	4623      	mov	r3, r4
 8014882:	e7e1      	b.n	8014848 <rshift+0x68>

08014884 <__hexdig_fun>:
 8014884:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014888:	2b09      	cmp	r3, #9
 801488a:	d802      	bhi.n	8014892 <__hexdig_fun+0xe>
 801488c:	3820      	subs	r0, #32
 801488e:	b2c0      	uxtb	r0, r0
 8014890:	4770      	bx	lr
 8014892:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014896:	2b05      	cmp	r3, #5
 8014898:	d801      	bhi.n	801489e <__hexdig_fun+0x1a>
 801489a:	3847      	subs	r0, #71	; 0x47
 801489c:	e7f7      	b.n	801488e <__hexdig_fun+0xa>
 801489e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80148a2:	2b05      	cmp	r3, #5
 80148a4:	d801      	bhi.n	80148aa <__hexdig_fun+0x26>
 80148a6:	3827      	subs	r0, #39	; 0x27
 80148a8:	e7f1      	b.n	801488e <__hexdig_fun+0xa>
 80148aa:	2000      	movs	r0, #0
 80148ac:	4770      	bx	lr
	...

080148b0 <__gethex>:
 80148b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b4:	4617      	mov	r7, r2
 80148b6:	680a      	ldr	r2, [r1, #0]
 80148b8:	b085      	sub	sp, #20
 80148ba:	f102 0b02 	add.w	fp, r2, #2
 80148be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80148c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80148c6:	4681      	mov	r9, r0
 80148c8:	468a      	mov	sl, r1
 80148ca:	9302      	str	r3, [sp, #8]
 80148cc:	32fe      	adds	r2, #254	; 0xfe
 80148ce:	eb02 030b 	add.w	r3, r2, fp
 80148d2:	46d8      	mov	r8, fp
 80148d4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80148d8:	9301      	str	r3, [sp, #4]
 80148da:	2830      	cmp	r0, #48	; 0x30
 80148dc:	d0f7      	beq.n	80148ce <__gethex+0x1e>
 80148de:	f7ff ffd1 	bl	8014884 <__hexdig_fun>
 80148e2:	4604      	mov	r4, r0
 80148e4:	2800      	cmp	r0, #0
 80148e6:	d138      	bne.n	801495a <__gethex+0xaa>
 80148e8:	49a7      	ldr	r1, [pc, #668]	; (8014b88 <__gethex+0x2d8>)
 80148ea:	2201      	movs	r2, #1
 80148ec:	4640      	mov	r0, r8
 80148ee:	f7ff ff17 	bl	8014720 <strncmp>
 80148f2:	4606      	mov	r6, r0
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d169      	bne.n	80149cc <__gethex+0x11c>
 80148f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80148fc:	465d      	mov	r5, fp
 80148fe:	f7ff ffc1 	bl	8014884 <__hexdig_fun>
 8014902:	2800      	cmp	r0, #0
 8014904:	d064      	beq.n	80149d0 <__gethex+0x120>
 8014906:	465a      	mov	r2, fp
 8014908:	7810      	ldrb	r0, [r2, #0]
 801490a:	2830      	cmp	r0, #48	; 0x30
 801490c:	4690      	mov	r8, r2
 801490e:	f102 0201 	add.w	r2, r2, #1
 8014912:	d0f9      	beq.n	8014908 <__gethex+0x58>
 8014914:	f7ff ffb6 	bl	8014884 <__hexdig_fun>
 8014918:	2301      	movs	r3, #1
 801491a:	fab0 f480 	clz	r4, r0
 801491e:	0964      	lsrs	r4, r4, #5
 8014920:	465e      	mov	r6, fp
 8014922:	9301      	str	r3, [sp, #4]
 8014924:	4642      	mov	r2, r8
 8014926:	4615      	mov	r5, r2
 8014928:	3201      	adds	r2, #1
 801492a:	7828      	ldrb	r0, [r5, #0]
 801492c:	f7ff ffaa 	bl	8014884 <__hexdig_fun>
 8014930:	2800      	cmp	r0, #0
 8014932:	d1f8      	bne.n	8014926 <__gethex+0x76>
 8014934:	4994      	ldr	r1, [pc, #592]	; (8014b88 <__gethex+0x2d8>)
 8014936:	2201      	movs	r2, #1
 8014938:	4628      	mov	r0, r5
 801493a:	f7ff fef1 	bl	8014720 <strncmp>
 801493e:	b978      	cbnz	r0, 8014960 <__gethex+0xb0>
 8014940:	b946      	cbnz	r6, 8014954 <__gethex+0xa4>
 8014942:	1c6e      	adds	r6, r5, #1
 8014944:	4632      	mov	r2, r6
 8014946:	4615      	mov	r5, r2
 8014948:	3201      	adds	r2, #1
 801494a:	7828      	ldrb	r0, [r5, #0]
 801494c:	f7ff ff9a 	bl	8014884 <__hexdig_fun>
 8014950:	2800      	cmp	r0, #0
 8014952:	d1f8      	bne.n	8014946 <__gethex+0x96>
 8014954:	1b73      	subs	r3, r6, r5
 8014956:	009e      	lsls	r6, r3, #2
 8014958:	e004      	b.n	8014964 <__gethex+0xb4>
 801495a:	2400      	movs	r4, #0
 801495c:	4626      	mov	r6, r4
 801495e:	e7e1      	b.n	8014924 <__gethex+0x74>
 8014960:	2e00      	cmp	r6, #0
 8014962:	d1f7      	bne.n	8014954 <__gethex+0xa4>
 8014964:	782b      	ldrb	r3, [r5, #0]
 8014966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801496a:	2b50      	cmp	r3, #80	; 0x50
 801496c:	d13d      	bne.n	80149ea <__gethex+0x13a>
 801496e:	786b      	ldrb	r3, [r5, #1]
 8014970:	2b2b      	cmp	r3, #43	; 0x2b
 8014972:	d02f      	beq.n	80149d4 <__gethex+0x124>
 8014974:	2b2d      	cmp	r3, #45	; 0x2d
 8014976:	d031      	beq.n	80149dc <__gethex+0x12c>
 8014978:	1c69      	adds	r1, r5, #1
 801497a:	f04f 0b00 	mov.w	fp, #0
 801497e:	7808      	ldrb	r0, [r1, #0]
 8014980:	f7ff ff80 	bl	8014884 <__hexdig_fun>
 8014984:	1e42      	subs	r2, r0, #1
 8014986:	b2d2      	uxtb	r2, r2
 8014988:	2a18      	cmp	r2, #24
 801498a:	d82e      	bhi.n	80149ea <__gethex+0x13a>
 801498c:	f1a0 0210 	sub.w	r2, r0, #16
 8014990:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014994:	f7ff ff76 	bl	8014884 <__hexdig_fun>
 8014998:	f100 3cff 	add.w	ip, r0, #4294967295
 801499c:	fa5f fc8c 	uxtb.w	ip, ip
 80149a0:	f1bc 0f18 	cmp.w	ip, #24
 80149a4:	d91d      	bls.n	80149e2 <__gethex+0x132>
 80149a6:	f1bb 0f00 	cmp.w	fp, #0
 80149aa:	d000      	beq.n	80149ae <__gethex+0xfe>
 80149ac:	4252      	negs	r2, r2
 80149ae:	4416      	add	r6, r2
 80149b0:	f8ca 1000 	str.w	r1, [sl]
 80149b4:	b1dc      	cbz	r4, 80149ee <__gethex+0x13e>
 80149b6:	9b01      	ldr	r3, [sp, #4]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	bf14      	ite	ne
 80149bc:	f04f 0800 	movne.w	r8, #0
 80149c0:	f04f 0806 	moveq.w	r8, #6
 80149c4:	4640      	mov	r0, r8
 80149c6:	b005      	add	sp, #20
 80149c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149cc:	4645      	mov	r5, r8
 80149ce:	4626      	mov	r6, r4
 80149d0:	2401      	movs	r4, #1
 80149d2:	e7c7      	b.n	8014964 <__gethex+0xb4>
 80149d4:	f04f 0b00 	mov.w	fp, #0
 80149d8:	1ca9      	adds	r1, r5, #2
 80149da:	e7d0      	b.n	801497e <__gethex+0xce>
 80149dc:	f04f 0b01 	mov.w	fp, #1
 80149e0:	e7fa      	b.n	80149d8 <__gethex+0x128>
 80149e2:	230a      	movs	r3, #10
 80149e4:	fb03 0002 	mla	r0, r3, r2, r0
 80149e8:	e7d0      	b.n	801498c <__gethex+0xdc>
 80149ea:	4629      	mov	r1, r5
 80149ec:	e7e0      	b.n	80149b0 <__gethex+0x100>
 80149ee:	eba5 0308 	sub.w	r3, r5, r8
 80149f2:	3b01      	subs	r3, #1
 80149f4:	4621      	mov	r1, r4
 80149f6:	2b07      	cmp	r3, #7
 80149f8:	dc0a      	bgt.n	8014a10 <__gethex+0x160>
 80149fa:	4648      	mov	r0, r9
 80149fc:	f7fe f946 	bl	8012c8c <_Balloc>
 8014a00:	4604      	mov	r4, r0
 8014a02:	b940      	cbnz	r0, 8014a16 <__gethex+0x166>
 8014a04:	4b61      	ldr	r3, [pc, #388]	; (8014b8c <__gethex+0x2dc>)
 8014a06:	4602      	mov	r2, r0
 8014a08:	21e4      	movs	r1, #228	; 0xe4
 8014a0a:	4861      	ldr	r0, [pc, #388]	; (8014b90 <__gethex+0x2e0>)
 8014a0c:	f7ff feb4 	bl	8014778 <__assert_func>
 8014a10:	3101      	adds	r1, #1
 8014a12:	105b      	asrs	r3, r3, #1
 8014a14:	e7ef      	b.n	80149f6 <__gethex+0x146>
 8014a16:	f100 0a14 	add.w	sl, r0, #20
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	495a      	ldr	r1, [pc, #360]	; (8014b88 <__gethex+0x2d8>)
 8014a1e:	f8cd a004 	str.w	sl, [sp, #4]
 8014a22:	469b      	mov	fp, r3
 8014a24:	45a8      	cmp	r8, r5
 8014a26:	d342      	bcc.n	8014aae <__gethex+0x1fe>
 8014a28:	9801      	ldr	r0, [sp, #4]
 8014a2a:	f840 bb04 	str.w	fp, [r0], #4
 8014a2e:	eba0 000a 	sub.w	r0, r0, sl
 8014a32:	1080      	asrs	r0, r0, #2
 8014a34:	6120      	str	r0, [r4, #16]
 8014a36:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014a3a:	4658      	mov	r0, fp
 8014a3c:	f7fe fa18 	bl	8012e70 <__hi0bits>
 8014a40:	683d      	ldr	r5, [r7, #0]
 8014a42:	eba8 0000 	sub.w	r0, r8, r0
 8014a46:	42a8      	cmp	r0, r5
 8014a48:	dd59      	ble.n	8014afe <__gethex+0x24e>
 8014a4a:	eba0 0805 	sub.w	r8, r0, r5
 8014a4e:	4641      	mov	r1, r8
 8014a50:	4620      	mov	r0, r4
 8014a52:	f7fe fda7 	bl	80135a4 <__any_on>
 8014a56:	4683      	mov	fp, r0
 8014a58:	b1b8      	cbz	r0, 8014a8a <__gethex+0x1da>
 8014a5a:	f108 33ff 	add.w	r3, r8, #4294967295
 8014a5e:	1159      	asrs	r1, r3, #5
 8014a60:	f003 021f 	and.w	r2, r3, #31
 8014a64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014a68:	f04f 0b01 	mov.w	fp, #1
 8014a6c:	fa0b f202 	lsl.w	r2, fp, r2
 8014a70:	420a      	tst	r2, r1
 8014a72:	d00a      	beq.n	8014a8a <__gethex+0x1da>
 8014a74:	455b      	cmp	r3, fp
 8014a76:	dd06      	ble.n	8014a86 <__gethex+0x1d6>
 8014a78:	f1a8 0102 	sub.w	r1, r8, #2
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	f7fe fd91 	bl	80135a4 <__any_on>
 8014a82:	2800      	cmp	r0, #0
 8014a84:	d138      	bne.n	8014af8 <__gethex+0x248>
 8014a86:	f04f 0b02 	mov.w	fp, #2
 8014a8a:	4641      	mov	r1, r8
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	f7ff fea7 	bl	80147e0 <rshift>
 8014a92:	4446      	add	r6, r8
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	42b3      	cmp	r3, r6
 8014a98:	da41      	bge.n	8014b1e <__gethex+0x26e>
 8014a9a:	4621      	mov	r1, r4
 8014a9c:	4648      	mov	r0, r9
 8014a9e:	f7fe f935 	bl	8012d0c <_Bfree>
 8014aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	6013      	str	r3, [r2, #0]
 8014aa8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014aac:	e78a      	b.n	80149c4 <__gethex+0x114>
 8014aae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014ab2:	2a2e      	cmp	r2, #46	; 0x2e
 8014ab4:	d014      	beq.n	8014ae0 <__gethex+0x230>
 8014ab6:	2b20      	cmp	r3, #32
 8014ab8:	d106      	bne.n	8014ac8 <__gethex+0x218>
 8014aba:	9b01      	ldr	r3, [sp, #4]
 8014abc:	f843 bb04 	str.w	fp, [r3], #4
 8014ac0:	f04f 0b00 	mov.w	fp, #0
 8014ac4:	9301      	str	r3, [sp, #4]
 8014ac6:	465b      	mov	r3, fp
 8014ac8:	7828      	ldrb	r0, [r5, #0]
 8014aca:	9303      	str	r3, [sp, #12]
 8014acc:	f7ff feda 	bl	8014884 <__hexdig_fun>
 8014ad0:	9b03      	ldr	r3, [sp, #12]
 8014ad2:	f000 000f 	and.w	r0, r0, #15
 8014ad6:	4098      	lsls	r0, r3
 8014ad8:	ea4b 0b00 	orr.w	fp, fp, r0
 8014adc:	3304      	adds	r3, #4
 8014ade:	e7a1      	b.n	8014a24 <__gethex+0x174>
 8014ae0:	45a8      	cmp	r8, r5
 8014ae2:	d8e8      	bhi.n	8014ab6 <__gethex+0x206>
 8014ae4:	2201      	movs	r2, #1
 8014ae6:	4628      	mov	r0, r5
 8014ae8:	9303      	str	r3, [sp, #12]
 8014aea:	f7ff fe19 	bl	8014720 <strncmp>
 8014aee:	4926      	ldr	r1, [pc, #152]	; (8014b88 <__gethex+0x2d8>)
 8014af0:	9b03      	ldr	r3, [sp, #12]
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d1df      	bne.n	8014ab6 <__gethex+0x206>
 8014af6:	e795      	b.n	8014a24 <__gethex+0x174>
 8014af8:	f04f 0b03 	mov.w	fp, #3
 8014afc:	e7c5      	b.n	8014a8a <__gethex+0x1da>
 8014afe:	da0b      	bge.n	8014b18 <__gethex+0x268>
 8014b00:	eba5 0800 	sub.w	r8, r5, r0
 8014b04:	4621      	mov	r1, r4
 8014b06:	4642      	mov	r2, r8
 8014b08:	4648      	mov	r0, r9
 8014b0a:	f7fe fb19 	bl	8013140 <__lshift>
 8014b0e:	eba6 0608 	sub.w	r6, r6, r8
 8014b12:	4604      	mov	r4, r0
 8014b14:	f100 0a14 	add.w	sl, r0, #20
 8014b18:	f04f 0b00 	mov.w	fp, #0
 8014b1c:	e7ba      	b.n	8014a94 <__gethex+0x1e4>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	42b3      	cmp	r3, r6
 8014b22:	dd73      	ble.n	8014c0c <__gethex+0x35c>
 8014b24:	1b9e      	subs	r6, r3, r6
 8014b26:	42b5      	cmp	r5, r6
 8014b28:	dc34      	bgt.n	8014b94 <__gethex+0x2e4>
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2b02      	cmp	r3, #2
 8014b2e:	d023      	beq.n	8014b78 <__gethex+0x2c8>
 8014b30:	2b03      	cmp	r3, #3
 8014b32:	d025      	beq.n	8014b80 <__gethex+0x2d0>
 8014b34:	2b01      	cmp	r3, #1
 8014b36:	d115      	bne.n	8014b64 <__gethex+0x2b4>
 8014b38:	42b5      	cmp	r5, r6
 8014b3a:	d113      	bne.n	8014b64 <__gethex+0x2b4>
 8014b3c:	2d01      	cmp	r5, #1
 8014b3e:	d10b      	bne.n	8014b58 <__gethex+0x2a8>
 8014b40:	9a02      	ldr	r2, [sp, #8]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	6013      	str	r3, [r2, #0]
 8014b46:	2301      	movs	r3, #1
 8014b48:	6123      	str	r3, [r4, #16]
 8014b4a:	f8ca 3000 	str.w	r3, [sl]
 8014b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b50:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014b54:	601c      	str	r4, [r3, #0]
 8014b56:	e735      	b.n	80149c4 <__gethex+0x114>
 8014b58:	1e69      	subs	r1, r5, #1
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f7fe fd22 	bl	80135a4 <__any_on>
 8014b60:	2800      	cmp	r0, #0
 8014b62:	d1ed      	bne.n	8014b40 <__gethex+0x290>
 8014b64:	4621      	mov	r1, r4
 8014b66:	4648      	mov	r0, r9
 8014b68:	f7fe f8d0 	bl	8012d0c <_Bfree>
 8014b6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b6e:	2300      	movs	r3, #0
 8014b70:	6013      	str	r3, [r2, #0]
 8014b72:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014b76:	e725      	b.n	80149c4 <__gethex+0x114>
 8014b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d1f2      	bne.n	8014b64 <__gethex+0x2b4>
 8014b7e:	e7df      	b.n	8014b40 <__gethex+0x290>
 8014b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d1dc      	bne.n	8014b40 <__gethex+0x290>
 8014b86:	e7ed      	b.n	8014b64 <__gethex+0x2b4>
 8014b88:	0801595c 	.word	0x0801595c
 8014b8c:	080157ef 	.word	0x080157ef
 8014b90:	08015b06 	.word	0x08015b06
 8014b94:	f106 38ff 	add.w	r8, r6, #4294967295
 8014b98:	f1bb 0f00 	cmp.w	fp, #0
 8014b9c:	d133      	bne.n	8014c06 <__gethex+0x356>
 8014b9e:	f1b8 0f00 	cmp.w	r8, #0
 8014ba2:	d004      	beq.n	8014bae <__gethex+0x2fe>
 8014ba4:	4641      	mov	r1, r8
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f7fe fcfc 	bl	80135a4 <__any_on>
 8014bac:	4683      	mov	fp, r0
 8014bae:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014bb2:	2301      	movs	r3, #1
 8014bb4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014bb8:	f008 081f 	and.w	r8, r8, #31
 8014bbc:	fa03 f308 	lsl.w	r3, r3, r8
 8014bc0:	4213      	tst	r3, r2
 8014bc2:	4631      	mov	r1, r6
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	bf18      	it	ne
 8014bc8:	f04b 0b02 	orrne.w	fp, fp, #2
 8014bcc:	1bad      	subs	r5, r5, r6
 8014bce:	f7ff fe07 	bl	80147e0 <rshift>
 8014bd2:	687e      	ldr	r6, [r7, #4]
 8014bd4:	f04f 0802 	mov.w	r8, #2
 8014bd8:	f1bb 0f00 	cmp.w	fp, #0
 8014bdc:	d04a      	beq.n	8014c74 <__gethex+0x3c4>
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2b02      	cmp	r3, #2
 8014be2:	d016      	beq.n	8014c12 <__gethex+0x362>
 8014be4:	2b03      	cmp	r3, #3
 8014be6:	d018      	beq.n	8014c1a <__gethex+0x36a>
 8014be8:	2b01      	cmp	r3, #1
 8014bea:	d109      	bne.n	8014c00 <__gethex+0x350>
 8014bec:	f01b 0f02 	tst.w	fp, #2
 8014bf0:	d006      	beq.n	8014c00 <__gethex+0x350>
 8014bf2:	f8da 3000 	ldr.w	r3, [sl]
 8014bf6:	ea4b 0b03 	orr.w	fp, fp, r3
 8014bfa:	f01b 0f01 	tst.w	fp, #1
 8014bfe:	d10f      	bne.n	8014c20 <__gethex+0x370>
 8014c00:	f048 0810 	orr.w	r8, r8, #16
 8014c04:	e036      	b.n	8014c74 <__gethex+0x3c4>
 8014c06:	f04f 0b01 	mov.w	fp, #1
 8014c0a:	e7d0      	b.n	8014bae <__gethex+0x2fe>
 8014c0c:	f04f 0801 	mov.w	r8, #1
 8014c10:	e7e2      	b.n	8014bd8 <__gethex+0x328>
 8014c12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c14:	f1c3 0301 	rsb	r3, r3, #1
 8014c18:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d0ef      	beq.n	8014c00 <__gethex+0x350>
 8014c20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014c24:	f104 0214 	add.w	r2, r4, #20
 8014c28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8014c2c:	9301      	str	r3, [sp, #4]
 8014c2e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014c32:	2300      	movs	r3, #0
 8014c34:	4694      	mov	ip, r2
 8014c36:	f852 1b04 	ldr.w	r1, [r2], #4
 8014c3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8014c3e:	d01e      	beq.n	8014c7e <__gethex+0x3ce>
 8014c40:	3101      	adds	r1, #1
 8014c42:	f8cc 1000 	str.w	r1, [ip]
 8014c46:	f1b8 0f02 	cmp.w	r8, #2
 8014c4a:	f104 0214 	add.w	r2, r4, #20
 8014c4e:	d13d      	bne.n	8014ccc <__gethex+0x41c>
 8014c50:	683b      	ldr	r3, [r7, #0]
 8014c52:	3b01      	subs	r3, #1
 8014c54:	42ab      	cmp	r3, r5
 8014c56:	d10b      	bne.n	8014c70 <__gethex+0x3c0>
 8014c58:	1169      	asrs	r1, r5, #5
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	f005 051f 	and.w	r5, r5, #31
 8014c60:	fa03 f505 	lsl.w	r5, r3, r5
 8014c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c68:	421d      	tst	r5, r3
 8014c6a:	bf18      	it	ne
 8014c6c:	f04f 0801 	movne.w	r8, #1
 8014c70:	f048 0820 	orr.w	r8, r8, #32
 8014c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c76:	601c      	str	r4, [r3, #0]
 8014c78:	9b02      	ldr	r3, [sp, #8]
 8014c7a:	601e      	str	r6, [r3, #0]
 8014c7c:	e6a2      	b.n	80149c4 <__gethex+0x114>
 8014c7e:	4290      	cmp	r0, r2
 8014c80:	f842 3c04 	str.w	r3, [r2, #-4]
 8014c84:	d8d6      	bhi.n	8014c34 <__gethex+0x384>
 8014c86:	68a2      	ldr	r2, [r4, #8]
 8014c88:	4593      	cmp	fp, r2
 8014c8a:	db17      	blt.n	8014cbc <__gethex+0x40c>
 8014c8c:	6861      	ldr	r1, [r4, #4]
 8014c8e:	4648      	mov	r0, r9
 8014c90:	3101      	adds	r1, #1
 8014c92:	f7fd fffb 	bl	8012c8c <_Balloc>
 8014c96:	4682      	mov	sl, r0
 8014c98:	b918      	cbnz	r0, 8014ca2 <__gethex+0x3f2>
 8014c9a:	4b1b      	ldr	r3, [pc, #108]	; (8014d08 <__gethex+0x458>)
 8014c9c:	4602      	mov	r2, r0
 8014c9e:	2184      	movs	r1, #132	; 0x84
 8014ca0:	e6b3      	b.n	8014a0a <__gethex+0x15a>
 8014ca2:	6922      	ldr	r2, [r4, #16]
 8014ca4:	3202      	adds	r2, #2
 8014ca6:	f104 010c 	add.w	r1, r4, #12
 8014caa:	0092      	lsls	r2, r2, #2
 8014cac:	300c      	adds	r0, #12
 8014cae:	f7fd f85f 	bl	8011d70 <memcpy>
 8014cb2:	4621      	mov	r1, r4
 8014cb4:	4648      	mov	r0, r9
 8014cb6:	f7fe f829 	bl	8012d0c <_Bfree>
 8014cba:	4654      	mov	r4, sl
 8014cbc:	6922      	ldr	r2, [r4, #16]
 8014cbe:	1c51      	adds	r1, r2, #1
 8014cc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014cc4:	6121      	str	r1, [r4, #16]
 8014cc6:	2101      	movs	r1, #1
 8014cc8:	6151      	str	r1, [r2, #20]
 8014cca:	e7bc      	b.n	8014c46 <__gethex+0x396>
 8014ccc:	6921      	ldr	r1, [r4, #16]
 8014cce:	4559      	cmp	r1, fp
 8014cd0:	dd0b      	ble.n	8014cea <__gethex+0x43a>
 8014cd2:	2101      	movs	r1, #1
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	f7ff fd83 	bl	80147e0 <rshift>
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	3601      	adds	r6, #1
 8014cde:	42b3      	cmp	r3, r6
 8014ce0:	f6ff aedb 	blt.w	8014a9a <__gethex+0x1ea>
 8014ce4:	f04f 0801 	mov.w	r8, #1
 8014ce8:	e7c2      	b.n	8014c70 <__gethex+0x3c0>
 8014cea:	f015 051f 	ands.w	r5, r5, #31
 8014cee:	d0f9      	beq.n	8014ce4 <__gethex+0x434>
 8014cf0:	9b01      	ldr	r3, [sp, #4]
 8014cf2:	441a      	add	r2, r3
 8014cf4:	f1c5 0520 	rsb	r5, r5, #32
 8014cf8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8014cfc:	f7fe f8b8 	bl	8012e70 <__hi0bits>
 8014d00:	42a8      	cmp	r0, r5
 8014d02:	dbe6      	blt.n	8014cd2 <__gethex+0x422>
 8014d04:	e7ee      	b.n	8014ce4 <__gethex+0x434>
 8014d06:	bf00      	nop
 8014d08:	080157ef 	.word	0x080157ef

08014d0c <L_shift>:
 8014d0c:	f1c2 0208 	rsb	r2, r2, #8
 8014d10:	0092      	lsls	r2, r2, #2
 8014d12:	b570      	push	{r4, r5, r6, lr}
 8014d14:	f1c2 0620 	rsb	r6, r2, #32
 8014d18:	6843      	ldr	r3, [r0, #4]
 8014d1a:	6804      	ldr	r4, [r0, #0]
 8014d1c:	fa03 f506 	lsl.w	r5, r3, r6
 8014d20:	432c      	orrs	r4, r5
 8014d22:	40d3      	lsrs	r3, r2
 8014d24:	6004      	str	r4, [r0, #0]
 8014d26:	f840 3f04 	str.w	r3, [r0, #4]!
 8014d2a:	4288      	cmp	r0, r1
 8014d2c:	d3f4      	bcc.n	8014d18 <L_shift+0xc>
 8014d2e:	bd70      	pop	{r4, r5, r6, pc}

08014d30 <__match>:
 8014d30:	b530      	push	{r4, r5, lr}
 8014d32:	6803      	ldr	r3, [r0, #0]
 8014d34:	3301      	adds	r3, #1
 8014d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d3a:	b914      	cbnz	r4, 8014d42 <__match+0x12>
 8014d3c:	6003      	str	r3, [r0, #0]
 8014d3e:	2001      	movs	r0, #1
 8014d40:	bd30      	pop	{r4, r5, pc}
 8014d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014d4a:	2d19      	cmp	r5, #25
 8014d4c:	bf98      	it	ls
 8014d4e:	3220      	addls	r2, #32
 8014d50:	42a2      	cmp	r2, r4
 8014d52:	d0f0      	beq.n	8014d36 <__match+0x6>
 8014d54:	2000      	movs	r0, #0
 8014d56:	e7f3      	b.n	8014d40 <__match+0x10>

08014d58 <__hexnan>:
 8014d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5c:	680b      	ldr	r3, [r1, #0]
 8014d5e:	6801      	ldr	r1, [r0, #0]
 8014d60:	115e      	asrs	r6, r3, #5
 8014d62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014d66:	f013 031f 	ands.w	r3, r3, #31
 8014d6a:	b087      	sub	sp, #28
 8014d6c:	bf18      	it	ne
 8014d6e:	3604      	addne	r6, #4
 8014d70:	2500      	movs	r5, #0
 8014d72:	1f37      	subs	r7, r6, #4
 8014d74:	4682      	mov	sl, r0
 8014d76:	4690      	mov	r8, r2
 8014d78:	9301      	str	r3, [sp, #4]
 8014d7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014d7e:	46b9      	mov	r9, r7
 8014d80:	463c      	mov	r4, r7
 8014d82:	9502      	str	r5, [sp, #8]
 8014d84:	46ab      	mov	fp, r5
 8014d86:	784a      	ldrb	r2, [r1, #1]
 8014d88:	1c4b      	adds	r3, r1, #1
 8014d8a:	9303      	str	r3, [sp, #12]
 8014d8c:	b342      	cbz	r2, 8014de0 <__hexnan+0x88>
 8014d8e:	4610      	mov	r0, r2
 8014d90:	9105      	str	r1, [sp, #20]
 8014d92:	9204      	str	r2, [sp, #16]
 8014d94:	f7ff fd76 	bl	8014884 <__hexdig_fun>
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	d14f      	bne.n	8014e3c <__hexnan+0xe4>
 8014d9c:	9a04      	ldr	r2, [sp, #16]
 8014d9e:	9905      	ldr	r1, [sp, #20]
 8014da0:	2a20      	cmp	r2, #32
 8014da2:	d818      	bhi.n	8014dd6 <__hexnan+0x7e>
 8014da4:	9b02      	ldr	r3, [sp, #8]
 8014da6:	459b      	cmp	fp, r3
 8014da8:	dd13      	ble.n	8014dd2 <__hexnan+0x7a>
 8014daa:	454c      	cmp	r4, r9
 8014dac:	d206      	bcs.n	8014dbc <__hexnan+0x64>
 8014dae:	2d07      	cmp	r5, #7
 8014db0:	dc04      	bgt.n	8014dbc <__hexnan+0x64>
 8014db2:	462a      	mov	r2, r5
 8014db4:	4649      	mov	r1, r9
 8014db6:	4620      	mov	r0, r4
 8014db8:	f7ff ffa8 	bl	8014d0c <L_shift>
 8014dbc:	4544      	cmp	r4, r8
 8014dbe:	d950      	bls.n	8014e62 <__hexnan+0x10a>
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	f1a4 0904 	sub.w	r9, r4, #4
 8014dc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8014dca:	f8cd b008 	str.w	fp, [sp, #8]
 8014dce:	464c      	mov	r4, r9
 8014dd0:	461d      	mov	r5, r3
 8014dd2:	9903      	ldr	r1, [sp, #12]
 8014dd4:	e7d7      	b.n	8014d86 <__hexnan+0x2e>
 8014dd6:	2a29      	cmp	r2, #41	; 0x29
 8014dd8:	d155      	bne.n	8014e86 <__hexnan+0x12e>
 8014dda:	3102      	adds	r1, #2
 8014ddc:	f8ca 1000 	str.w	r1, [sl]
 8014de0:	f1bb 0f00 	cmp.w	fp, #0
 8014de4:	d04f      	beq.n	8014e86 <__hexnan+0x12e>
 8014de6:	454c      	cmp	r4, r9
 8014de8:	d206      	bcs.n	8014df8 <__hexnan+0xa0>
 8014dea:	2d07      	cmp	r5, #7
 8014dec:	dc04      	bgt.n	8014df8 <__hexnan+0xa0>
 8014dee:	462a      	mov	r2, r5
 8014df0:	4649      	mov	r1, r9
 8014df2:	4620      	mov	r0, r4
 8014df4:	f7ff ff8a 	bl	8014d0c <L_shift>
 8014df8:	4544      	cmp	r4, r8
 8014dfa:	d934      	bls.n	8014e66 <__hexnan+0x10e>
 8014dfc:	f1a8 0204 	sub.w	r2, r8, #4
 8014e00:	4623      	mov	r3, r4
 8014e02:	f853 1b04 	ldr.w	r1, [r3], #4
 8014e06:	f842 1f04 	str.w	r1, [r2, #4]!
 8014e0a:	429f      	cmp	r7, r3
 8014e0c:	d2f9      	bcs.n	8014e02 <__hexnan+0xaa>
 8014e0e:	1b3b      	subs	r3, r7, r4
 8014e10:	f023 0303 	bic.w	r3, r3, #3
 8014e14:	3304      	adds	r3, #4
 8014e16:	3e03      	subs	r6, #3
 8014e18:	3401      	adds	r4, #1
 8014e1a:	42a6      	cmp	r6, r4
 8014e1c:	bf38      	it	cc
 8014e1e:	2304      	movcc	r3, #4
 8014e20:	4443      	add	r3, r8
 8014e22:	2200      	movs	r2, #0
 8014e24:	f843 2b04 	str.w	r2, [r3], #4
 8014e28:	429f      	cmp	r7, r3
 8014e2a:	d2fb      	bcs.n	8014e24 <__hexnan+0xcc>
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	b91b      	cbnz	r3, 8014e38 <__hexnan+0xe0>
 8014e30:	4547      	cmp	r7, r8
 8014e32:	d126      	bne.n	8014e82 <__hexnan+0x12a>
 8014e34:	2301      	movs	r3, #1
 8014e36:	603b      	str	r3, [r7, #0]
 8014e38:	2005      	movs	r0, #5
 8014e3a:	e025      	b.n	8014e88 <__hexnan+0x130>
 8014e3c:	3501      	adds	r5, #1
 8014e3e:	2d08      	cmp	r5, #8
 8014e40:	f10b 0b01 	add.w	fp, fp, #1
 8014e44:	dd06      	ble.n	8014e54 <__hexnan+0xfc>
 8014e46:	4544      	cmp	r4, r8
 8014e48:	d9c3      	bls.n	8014dd2 <__hexnan+0x7a>
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e50:	2501      	movs	r5, #1
 8014e52:	3c04      	subs	r4, #4
 8014e54:	6822      	ldr	r2, [r4, #0]
 8014e56:	f000 000f 	and.w	r0, r0, #15
 8014e5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014e5e:	6020      	str	r0, [r4, #0]
 8014e60:	e7b7      	b.n	8014dd2 <__hexnan+0x7a>
 8014e62:	2508      	movs	r5, #8
 8014e64:	e7b5      	b.n	8014dd2 <__hexnan+0x7a>
 8014e66:	9b01      	ldr	r3, [sp, #4]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d0df      	beq.n	8014e2c <__hexnan+0xd4>
 8014e6c:	f1c3 0320 	rsb	r3, r3, #32
 8014e70:	f04f 32ff 	mov.w	r2, #4294967295
 8014e74:	40da      	lsrs	r2, r3
 8014e76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014e7a:	4013      	ands	r3, r2
 8014e7c:	f846 3c04 	str.w	r3, [r6, #-4]
 8014e80:	e7d4      	b.n	8014e2c <__hexnan+0xd4>
 8014e82:	3f04      	subs	r7, #4
 8014e84:	e7d2      	b.n	8014e2c <__hexnan+0xd4>
 8014e86:	2004      	movs	r0, #4
 8014e88:	b007      	add	sp, #28
 8014e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e8e <__ascii_mbtowc>:
 8014e8e:	b082      	sub	sp, #8
 8014e90:	b901      	cbnz	r1, 8014e94 <__ascii_mbtowc+0x6>
 8014e92:	a901      	add	r1, sp, #4
 8014e94:	b142      	cbz	r2, 8014ea8 <__ascii_mbtowc+0x1a>
 8014e96:	b14b      	cbz	r3, 8014eac <__ascii_mbtowc+0x1e>
 8014e98:	7813      	ldrb	r3, [r2, #0]
 8014e9a:	600b      	str	r3, [r1, #0]
 8014e9c:	7812      	ldrb	r2, [r2, #0]
 8014e9e:	1e10      	subs	r0, r2, #0
 8014ea0:	bf18      	it	ne
 8014ea2:	2001      	movne	r0, #1
 8014ea4:	b002      	add	sp, #8
 8014ea6:	4770      	bx	lr
 8014ea8:	4610      	mov	r0, r2
 8014eaa:	e7fb      	b.n	8014ea4 <__ascii_mbtowc+0x16>
 8014eac:	f06f 0001 	mvn.w	r0, #1
 8014eb0:	e7f8      	b.n	8014ea4 <__ascii_mbtowc+0x16>

08014eb2 <_realloc_r>:
 8014eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb6:	4680      	mov	r8, r0
 8014eb8:	4614      	mov	r4, r2
 8014eba:	460e      	mov	r6, r1
 8014ebc:	b921      	cbnz	r1, 8014ec8 <_realloc_r+0x16>
 8014ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ec2:	4611      	mov	r1, r2
 8014ec4:	f7fd be56 	b.w	8012b74 <_malloc_r>
 8014ec8:	b92a      	cbnz	r2, 8014ed6 <_realloc_r+0x24>
 8014eca:	f7fd fddf 	bl	8012a8c <_free_r>
 8014ece:	4625      	mov	r5, r4
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ed6:	f000 f842 	bl	8014f5e <_malloc_usable_size_r>
 8014eda:	4284      	cmp	r4, r0
 8014edc:	4607      	mov	r7, r0
 8014ede:	d802      	bhi.n	8014ee6 <_realloc_r+0x34>
 8014ee0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014ee4:	d812      	bhi.n	8014f0c <_realloc_r+0x5a>
 8014ee6:	4621      	mov	r1, r4
 8014ee8:	4640      	mov	r0, r8
 8014eea:	f7fd fe43 	bl	8012b74 <_malloc_r>
 8014eee:	4605      	mov	r5, r0
 8014ef0:	2800      	cmp	r0, #0
 8014ef2:	d0ed      	beq.n	8014ed0 <_realloc_r+0x1e>
 8014ef4:	42bc      	cmp	r4, r7
 8014ef6:	4622      	mov	r2, r4
 8014ef8:	4631      	mov	r1, r6
 8014efa:	bf28      	it	cs
 8014efc:	463a      	movcs	r2, r7
 8014efe:	f7fc ff37 	bl	8011d70 <memcpy>
 8014f02:	4631      	mov	r1, r6
 8014f04:	4640      	mov	r0, r8
 8014f06:	f7fd fdc1 	bl	8012a8c <_free_r>
 8014f0a:	e7e1      	b.n	8014ed0 <_realloc_r+0x1e>
 8014f0c:	4635      	mov	r5, r6
 8014f0e:	e7df      	b.n	8014ed0 <_realloc_r+0x1e>

08014f10 <__ascii_wctomb>:
 8014f10:	b149      	cbz	r1, 8014f26 <__ascii_wctomb+0x16>
 8014f12:	2aff      	cmp	r2, #255	; 0xff
 8014f14:	bf85      	ittet	hi
 8014f16:	238a      	movhi	r3, #138	; 0x8a
 8014f18:	6003      	strhi	r3, [r0, #0]
 8014f1a:	700a      	strbls	r2, [r1, #0]
 8014f1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014f20:	bf98      	it	ls
 8014f22:	2001      	movls	r0, #1
 8014f24:	4770      	bx	lr
 8014f26:	4608      	mov	r0, r1
 8014f28:	4770      	bx	lr
	...

08014f2c <fiprintf>:
 8014f2c:	b40e      	push	{r1, r2, r3}
 8014f2e:	b503      	push	{r0, r1, lr}
 8014f30:	4601      	mov	r1, r0
 8014f32:	ab03      	add	r3, sp, #12
 8014f34:	4805      	ldr	r0, [pc, #20]	; (8014f4c <fiprintf+0x20>)
 8014f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f3a:	6800      	ldr	r0, [r0, #0]
 8014f3c:	9301      	str	r3, [sp, #4]
 8014f3e:	f000 f83f 	bl	8014fc0 <_vfiprintf_r>
 8014f42:	b002      	add	sp, #8
 8014f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f48:	b003      	add	sp, #12
 8014f4a:	4770      	bx	lr
 8014f4c:	20000164 	.word	0x20000164

08014f50 <abort>:
 8014f50:	b508      	push	{r3, lr}
 8014f52:	2006      	movs	r0, #6
 8014f54:	f000 fa0c 	bl	8015370 <raise>
 8014f58:	2001      	movs	r0, #1
 8014f5a:	f7ed f88d 	bl	8002078 <_exit>

08014f5e <_malloc_usable_size_r>:
 8014f5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f62:	1f18      	subs	r0, r3, #4
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	bfbc      	itt	lt
 8014f68:	580b      	ldrlt	r3, [r1, r0]
 8014f6a:	18c0      	addlt	r0, r0, r3
 8014f6c:	4770      	bx	lr

08014f6e <__sfputc_r>:
 8014f6e:	6893      	ldr	r3, [r2, #8]
 8014f70:	3b01      	subs	r3, #1
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	b410      	push	{r4}
 8014f76:	6093      	str	r3, [r2, #8]
 8014f78:	da08      	bge.n	8014f8c <__sfputc_r+0x1e>
 8014f7a:	6994      	ldr	r4, [r2, #24]
 8014f7c:	42a3      	cmp	r3, r4
 8014f7e:	db01      	blt.n	8014f84 <__sfputc_r+0x16>
 8014f80:	290a      	cmp	r1, #10
 8014f82:	d103      	bne.n	8014f8c <__sfputc_r+0x1e>
 8014f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f88:	f000 b934 	b.w	80151f4 <__swbuf_r>
 8014f8c:	6813      	ldr	r3, [r2, #0]
 8014f8e:	1c58      	adds	r0, r3, #1
 8014f90:	6010      	str	r0, [r2, #0]
 8014f92:	7019      	strb	r1, [r3, #0]
 8014f94:	4608      	mov	r0, r1
 8014f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f9a:	4770      	bx	lr

08014f9c <__sfputs_r>:
 8014f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f9e:	4606      	mov	r6, r0
 8014fa0:	460f      	mov	r7, r1
 8014fa2:	4614      	mov	r4, r2
 8014fa4:	18d5      	adds	r5, r2, r3
 8014fa6:	42ac      	cmp	r4, r5
 8014fa8:	d101      	bne.n	8014fae <__sfputs_r+0x12>
 8014faa:	2000      	movs	r0, #0
 8014fac:	e007      	b.n	8014fbe <__sfputs_r+0x22>
 8014fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fb2:	463a      	mov	r2, r7
 8014fb4:	4630      	mov	r0, r6
 8014fb6:	f7ff ffda 	bl	8014f6e <__sfputc_r>
 8014fba:	1c43      	adds	r3, r0, #1
 8014fbc:	d1f3      	bne.n	8014fa6 <__sfputs_r+0xa>
 8014fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014fc0 <_vfiprintf_r>:
 8014fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fc4:	460d      	mov	r5, r1
 8014fc6:	b09d      	sub	sp, #116	; 0x74
 8014fc8:	4614      	mov	r4, r2
 8014fca:	4698      	mov	r8, r3
 8014fcc:	4606      	mov	r6, r0
 8014fce:	b118      	cbz	r0, 8014fd8 <_vfiprintf_r+0x18>
 8014fd0:	6a03      	ldr	r3, [r0, #32]
 8014fd2:	b90b      	cbnz	r3, 8014fd8 <_vfiprintf_r+0x18>
 8014fd4:	f7fc fd4c 	bl	8011a70 <__sinit>
 8014fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014fda:	07d9      	lsls	r1, r3, #31
 8014fdc:	d405      	bmi.n	8014fea <_vfiprintf_r+0x2a>
 8014fde:	89ab      	ldrh	r3, [r5, #12]
 8014fe0:	059a      	lsls	r2, r3, #22
 8014fe2:	d402      	bmi.n	8014fea <_vfiprintf_r+0x2a>
 8014fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014fe6:	f7fc fec1 	bl	8011d6c <__retarget_lock_acquire_recursive>
 8014fea:	89ab      	ldrh	r3, [r5, #12]
 8014fec:	071b      	lsls	r3, r3, #28
 8014fee:	d501      	bpl.n	8014ff4 <_vfiprintf_r+0x34>
 8014ff0:	692b      	ldr	r3, [r5, #16]
 8014ff2:	b99b      	cbnz	r3, 801501c <_vfiprintf_r+0x5c>
 8014ff4:	4629      	mov	r1, r5
 8014ff6:	4630      	mov	r0, r6
 8014ff8:	f000 f93a 	bl	8015270 <__swsetup_r>
 8014ffc:	b170      	cbz	r0, 801501c <_vfiprintf_r+0x5c>
 8014ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015000:	07dc      	lsls	r4, r3, #31
 8015002:	d504      	bpl.n	801500e <_vfiprintf_r+0x4e>
 8015004:	f04f 30ff 	mov.w	r0, #4294967295
 8015008:	b01d      	add	sp, #116	; 0x74
 801500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801500e:	89ab      	ldrh	r3, [r5, #12]
 8015010:	0598      	lsls	r0, r3, #22
 8015012:	d4f7      	bmi.n	8015004 <_vfiprintf_r+0x44>
 8015014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015016:	f7fc feaa 	bl	8011d6e <__retarget_lock_release_recursive>
 801501a:	e7f3      	b.n	8015004 <_vfiprintf_r+0x44>
 801501c:	2300      	movs	r3, #0
 801501e:	9309      	str	r3, [sp, #36]	; 0x24
 8015020:	2320      	movs	r3, #32
 8015022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015026:	f8cd 800c 	str.w	r8, [sp, #12]
 801502a:	2330      	movs	r3, #48	; 0x30
 801502c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80151e0 <_vfiprintf_r+0x220>
 8015030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015034:	f04f 0901 	mov.w	r9, #1
 8015038:	4623      	mov	r3, r4
 801503a:	469a      	mov	sl, r3
 801503c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015040:	b10a      	cbz	r2, 8015046 <_vfiprintf_r+0x86>
 8015042:	2a25      	cmp	r2, #37	; 0x25
 8015044:	d1f9      	bne.n	801503a <_vfiprintf_r+0x7a>
 8015046:	ebba 0b04 	subs.w	fp, sl, r4
 801504a:	d00b      	beq.n	8015064 <_vfiprintf_r+0xa4>
 801504c:	465b      	mov	r3, fp
 801504e:	4622      	mov	r2, r4
 8015050:	4629      	mov	r1, r5
 8015052:	4630      	mov	r0, r6
 8015054:	f7ff ffa2 	bl	8014f9c <__sfputs_r>
 8015058:	3001      	adds	r0, #1
 801505a:	f000 80a9 	beq.w	80151b0 <_vfiprintf_r+0x1f0>
 801505e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015060:	445a      	add	r2, fp
 8015062:	9209      	str	r2, [sp, #36]	; 0x24
 8015064:	f89a 3000 	ldrb.w	r3, [sl]
 8015068:	2b00      	cmp	r3, #0
 801506a:	f000 80a1 	beq.w	80151b0 <_vfiprintf_r+0x1f0>
 801506e:	2300      	movs	r3, #0
 8015070:	f04f 32ff 	mov.w	r2, #4294967295
 8015074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015078:	f10a 0a01 	add.w	sl, sl, #1
 801507c:	9304      	str	r3, [sp, #16]
 801507e:	9307      	str	r3, [sp, #28]
 8015080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015084:	931a      	str	r3, [sp, #104]	; 0x68
 8015086:	4654      	mov	r4, sl
 8015088:	2205      	movs	r2, #5
 801508a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801508e:	4854      	ldr	r0, [pc, #336]	; (80151e0 <_vfiprintf_r+0x220>)
 8015090:	f7eb f89e 	bl	80001d0 <memchr>
 8015094:	9a04      	ldr	r2, [sp, #16]
 8015096:	b9d8      	cbnz	r0, 80150d0 <_vfiprintf_r+0x110>
 8015098:	06d1      	lsls	r1, r2, #27
 801509a:	bf44      	itt	mi
 801509c:	2320      	movmi	r3, #32
 801509e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150a2:	0713      	lsls	r3, r2, #28
 80150a4:	bf44      	itt	mi
 80150a6:	232b      	movmi	r3, #43	; 0x2b
 80150a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150ac:	f89a 3000 	ldrb.w	r3, [sl]
 80150b0:	2b2a      	cmp	r3, #42	; 0x2a
 80150b2:	d015      	beq.n	80150e0 <_vfiprintf_r+0x120>
 80150b4:	9a07      	ldr	r2, [sp, #28]
 80150b6:	4654      	mov	r4, sl
 80150b8:	2000      	movs	r0, #0
 80150ba:	f04f 0c0a 	mov.w	ip, #10
 80150be:	4621      	mov	r1, r4
 80150c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150c4:	3b30      	subs	r3, #48	; 0x30
 80150c6:	2b09      	cmp	r3, #9
 80150c8:	d94d      	bls.n	8015166 <_vfiprintf_r+0x1a6>
 80150ca:	b1b0      	cbz	r0, 80150fa <_vfiprintf_r+0x13a>
 80150cc:	9207      	str	r2, [sp, #28]
 80150ce:	e014      	b.n	80150fa <_vfiprintf_r+0x13a>
 80150d0:	eba0 0308 	sub.w	r3, r0, r8
 80150d4:	fa09 f303 	lsl.w	r3, r9, r3
 80150d8:	4313      	orrs	r3, r2
 80150da:	9304      	str	r3, [sp, #16]
 80150dc:	46a2      	mov	sl, r4
 80150de:	e7d2      	b.n	8015086 <_vfiprintf_r+0xc6>
 80150e0:	9b03      	ldr	r3, [sp, #12]
 80150e2:	1d19      	adds	r1, r3, #4
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	9103      	str	r1, [sp, #12]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	bfbb      	ittet	lt
 80150ec:	425b      	neglt	r3, r3
 80150ee:	f042 0202 	orrlt.w	r2, r2, #2
 80150f2:	9307      	strge	r3, [sp, #28]
 80150f4:	9307      	strlt	r3, [sp, #28]
 80150f6:	bfb8      	it	lt
 80150f8:	9204      	strlt	r2, [sp, #16]
 80150fa:	7823      	ldrb	r3, [r4, #0]
 80150fc:	2b2e      	cmp	r3, #46	; 0x2e
 80150fe:	d10c      	bne.n	801511a <_vfiprintf_r+0x15a>
 8015100:	7863      	ldrb	r3, [r4, #1]
 8015102:	2b2a      	cmp	r3, #42	; 0x2a
 8015104:	d134      	bne.n	8015170 <_vfiprintf_r+0x1b0>
 8015106:	9b03      	ldr	r3, [sp, #12]
 8015108:	1d1a      	adds	r2, r3, #4
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	9203      	str	r2, [sp, #12]
 801510e:	2b00      	cmp	r3, #0
 8015110:	bfb8      	it	lt
 8015112:	f04f 33ff 	movlt.w	r3, #4294967295
 8015116:	3402      	adds	r4, #2
 8015118:	9305      	str	r3, [sp, #20]
 801511a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80151f0 <_vfiprintf_r+0x230>
 801511e:	7821      	ldrb	r1, [r4, #0]
 8015120:	2203      	movs	r2, #3
 8015122:	4650      	mov	r0, sl
 8015124:	f7eb f854 	bl	80001d0 <memchr>
 8015128:	b138      	cbz	r0, 801513a <_vfiprintf_r+0x17a>
 801512a:	9b04      	ldr	r3, [sp, #16]
 801512c:	eba0 000a 	sub.w	r0, r0, sl
 8015130:	2240      	movs	r2, #64	; 0x40
 8015132:	4082      	lsls	r2, r0
 8015134:	4313      	orrs	r3, r2
 8015136:	3401      	adds	r4, #1
 8015138:	9304      	str	r3, [sp, #16]
 801513a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801513e:	4829      	ldr	r0, [pc, #164]	; (80151e4 <_vfiprintf_r+0x224>)
 8015140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015144:	2206      	movs	r2, #6
 8015146:	f7eb f843 	bl	80001d0 <memchr>
 801514a:	2800      	cmp	r0, #0
 801514c:	d03f      	beq.n	80151ce <_vfiprintf_r+0x20e>
 801514e:	4b26      	ldr	r3, [pc, #152]	; (80151e8 <_vfiprintf_r+0x228>)
 8015150:	bb1b      	cbnz	r3, 801519a <_vfiprintf_r+0x1da>
 8015152:	9b03      	ldr	r3, [sp, #12]
 8015154:	3307      	adds	r3, #7
 8015156:	f023 0307 	bic.w	r3, r3, #7
 801515a:	3308      	adds	r3, #8
 801515c:	9303      	str	r3, [sp, #12]
 801515e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015160:	443b      	add	r3, r7
 8015162:	9309      	str	r3, [sp, #36]	; 0x24
 8015164:	e768      	b.n	8015038 <_vfiprintf_r+0x78>
 8015166:	fb0c 3202 	mla	r2, ip, r2, r3
 801516a:	460c      	mov	r4, r1
 801516c:	2001      	movs	r0, #1
 801516e:	e7a6      	b.n	80150be <_vfiprintf_r+0xfe>
 8015170:	2300      	movs	r3, #0
 8015172:	3401      	adds	r4, #1
 8015174:	9305      	str	r3, [sp, #20]
 8015176:	4619      	mov	r1, r3
 8015178:	f04f 0c0a 	mov.w	ip, #10
 801517c:	4620      	mov	r0, r4
 801517e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015182:	3a30      	subs	r2, #48	; 0x30
 8015184:	2a09      	cmp	r2, #9
 8015186:	d903      	bls.n	8015190 <_vfiprintf_r+0x1d0>
 8015188:	2b00      	cmp	r3, #0
 801518a:	d0c6      	beq.n	801511a <_vfiprintf_r+0x15a>
 801518c:	9105      	str	r1, [sp, #20]
 801518e:	e7c4      	b.n	801511a <_vfiprintf_r+0x15a>
 8015190:	fb0c 2101 	mla	r1, ip, r1, r2
 8015194:	4604      	mov	r4, r0
 8015196:	2301      	movs	r3, #1
 8015198:	e7f0      	b.n	801517c <_vfiprintf_r+0x1bc>
 801519a:	ab03      	add	r3, sp, #12
 801519c:	9300      	str	r3, [sp, #0]
 801519e:	462a      	mov	r2, r5
 80151a0:	4b12      	ldr	r3, [pc, #72]	; (80151ec <_vfiprintf_r+0x22c>)
 80151a2:	a904      	add	r1, sp, #16
 80151a4:	4630      	mov	r0, r6
 80151a6:	f7fb fe13 	bl	8010dd0 <_printf_float>
 80151aa:	4607      	mov	r7, r0
 80151ac:	1c78      	adds	r0, r7, #1
 80151ae:	d1d6      	bne.n	801515e <_vfiprintf_r+0x19e>
 80151b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80151b2:	07d9      	lsls	r1, r3, #31
 80151b4:	d405      	bmi.n	80151c2 <_vfiprintf_r+0x202>
 80151b6:	89ab      	ldrh	r3, [r5, #12]
 80151b8:	059a      	lsls	r2, r3, #22
 80151ba:	d402      	bmi.n	80151c2 <_vfiprintf_r+0x202>
 80151bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80151be:	f7fc fdd6 	bl	8011d6e <__retarget_lock_release_recursive>
 80151c2:	89ab      	ldrh	r3, [r5, #12]
 80151c4:	065b      	lsls	r3, r3, #25
 80151c6:	f53f af1d 	bmi.w	8015004 <_vfiprintf_r+0x44>
 80151ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151cc:	e71c      	b.n	8015008 <_vfiprintf_r+0x48>
 80151ce:	ab03      	add	r3, sp, #12
 80151d0:	9300      	str	r3, [sp, #0]
 80151d2:	462a      	mov	r2, r5
 80151d4:	4b05      	ldr	r3, [pc, #20]	; (80151ec <_vfiprintf_r+0x22c>)
 80151d6:	a904      	add	r1, sp, #16
 80151d8:	4630      	mov	r0, r6
 80151da:	f7fc f89d 	bl	8011318 <_printf_i>
 80151de:	e7e4      	b.n	80151aa <_vfiprintf_r+0x1ea>
 80151e0:	08015ab1 	.word	0x08015ab1
 80151e4:	08015abb 	.word	0x08015abb
 80151e8:	08010dd1 	.word	0x08010dd1
 80151ec:	08014f9d 	.word	0x08014f9d
 80151f0:	08015ab7 	.word	0x08015ab7

080151f4 <__swbuf_r>:
 80151f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151f6:	460e      	mov	r6, r1
 80151f8:	4614      	mov	r4, r2
 80151fa:	4605      	mov	r5, r0
 80151fc:	b118      	cbz	r0, 8015206 <__swbuf_r+0x12>
 80151fe:	6a03      	ldr	r3, [r0, #32]
 8015200:	b90b      	cbnz	r3, 8015206 <__swbuf_r+0x12>
 8015202:	f7fc fc35 	bl	8011a70 <__sinit>
 8015206:	69a3      	ldr	r3, [r4, #24]
 8015208:	60a3      	str	r3, [r4, #8]
 801520a:	89a3      	ldrh	r3, [r4, #12]
 801520c:	071a      	lsls	r2, r3, #28
 801520e:	d525      	bpl.n	801525c <__swbuf_r+0x68>
 8015210:	6923      	ldr	r3, [r4, #16]
 8015212:	b31b      	cbz	r3, 801525c <__swbuf_r+0x68>
 8015214:	6823      	ldr	r3, [r4, #0]
 8015216:	6922      	ldr	r2, [r4, #16]
 8015218:	1a98      	subs	r0, r3, r2
 801521a:	6963      	ldr	r3, [r4, #20]
 801521c:	b2f6      	uxtb	r6, r6
 801521e:	4283      	cmp	r3, r0
 8015220:	4637      	mov	r7, r6
 8015222:	dc04      	bgt.n	801522e <__swbuf_r+0x3a>
 8015224:	4621      	mov	r1, r4
 8015226:	4628      	mov	r0, r5
 8015228:	f7ff fa52 	bl	80146d0 <_fflush_r>
 801522c:	b9e0      	cbnz	r0, 8015268 <__swbuf_r+0x74>
 801522e:	68a3      	ldr	r3, [r4, #8]
 8015230:	3b01      	subs	r3, #1
 8015232:	60a3      	str	r3, [r4, #8]
 8015234:	6823      	ldr	r3, [r4, #0]
 8015236:	1c5a      	adds	r2, r3, #1
 8015238:	6022      	str	r2, [r4, #0]
 801523a:	701e      	strb	r6, [r3, #0]
 801523c:	6962      	ldr	r2, [r4, #20]
 801523e:	1c43      	adds	r3, r0, #1
 8015240:	429a      	cmp	r2, r3
 8015242:	d004      	beq.n	801524e <__swbuf_r+0x5a>
 8015244:	89a3      	ldrh	r3, [r4, #12]
 8015246:	07db      	lsls	r3, r3, #31
 8015248:	d506      	bpl.n	8015258 <__swbuf_r+0x64>
 801524a:	2e0a      	cmp	r6, #10
 801524c:	d104      	bne.n	8015258 <__swbuf_r+0x64>
 801524e:	4621      	mov	r1, r4
 8015250:	4628      	mov	r0, r5
 8015252:	f7ff fa3d 	bl	80146d0 <_fflush_r>
 8015256:	b938      	cbnz	r0, 8015268 <__swbuf_r+0x74>
 8015258:	4638      	mov	r0, r7
 801525a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801525c:	4621      	mov	r1, r4
 801525e:	4628      	mov	r0, r5
 8015260:	f000 f806 	bl	8015270 <__swsetup_r>
 8015264:	2800      	cmp	r0, #0
 8015266:	d0d5      	beq.n	8015214 <__swbuf_r+0x20>
 8015268:	f04f 37ff 	mov.w	r7, #4294967295
 801526c:	e7f4      	b.n	8015258 <__swbuf_r+0x64>
	...

08015270 <__swsetup_r>:
 8015270:	b538      	push	{r3, r4, r5, lr}
 8015272:	4b2a      	ldr	r3, [pc, #168]	; (801531c <__swsetup_r+0xac>)
 8015274:	4605      	mov	r5, r0
 8015276:	6818      	ldr	r0, [r3, #0]
 8015278:	460c      	mov	r4, r1
 801527a:	b118      	cbz	r0, 8015284 <__swsetup_r+0x14>
 801527c:	6a03      	ldr	r3, [r0, #32]
 801527e:	b90b      	cbnz	r3, 8015284 <__swsetup_r+0x14>
 8015280:	f7fc fbf6 	bl	8011a70 <__sinit>
 8015284:	89a3      	ldrh	r3, [r4, #12]
 8015286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801528a:	0718      	lsls	r0, r3, #28
 801528c:	d422      	bmi.n	80152d4 <__swsetup_r+0x64>
 801528e:	06d9      	lsls	r1, r3, #27
 8015290:	d407      	bmi.n	80152a2 <__swsetup_r+0x32>
 8015292:	2309      	movs	r3, #9
 8015294:	602b      	str	r3, [r5, #0]
 8015296:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801529a:	81a3      	strh	r3, [r4, #12]
 801529c:	f04f 30ff 	mov.w	r0, #4294967295
 80152a0:	e034      	b.n	801530c <__swsetup_r+0x9c>
 80152a2:	0758      	lsls	r0, r3, #29
 80152a4:	d512      	bpl.n	80152cc <__swsetup_r+0x5c>
 80152a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80152a8:	b141      	cbz	r1, 80152bc <__swsetup_r+0x4c>
 80152aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80152ae:	4299      	cmp	r1, r3
 80152b0:	d002      	beq.n	80152b8 <__swsetup_r+0x48>
 80152b2:	4628      	mov	r0, r5
 80152b4:	f7fd fbea 	bl	8012a8c <_free_r>
 80152b8:	2300      	movs	r3, #0
 80152ba:	6363      	str	r3, [r4, #52]	; 0x34
 80152bc:	89a3      	ldrh	r3, [r4, #12]
 80152be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80152c2:	81a3      	strh	r3, [r4, #12]
 80152c4:	2300      	movs	r3, #0
 80152c6:	6063      	str	r3, [r4, #4]
 80152c8:	6923      	ldr	r3, [r4, #16]
 80152ca:	6023      	str	r3, [r4, #0]
 80152cc:	89a3      	ldrh	r3, [r4, #12]
 80152ce:	f043 0308 	orr.w	r3, r3, #8
 80152d2:	81a3      	strh	r3, [r4, #12]
 80152d4:	6923      	ldr	r3, [r4, #16]
 80152d6:	b94b      	cbnz	r3, 80152ec <__swsetup_r+0x7c>
 80152d8:	89a3      	ldrh	r3, [r4, #12]
 80152da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80152de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152e2:	d003      	beq.n	80152ec <__swsetup_r+0x7c>
 80152e4:	4621      	mov	r1, r4
 80152e6:	4628      	mov	r0, r5
 80152e8:	f000 f884 	bl	80153f4 <__smakebuf_r>
 80152ec:	89a0      	ldrh	r0, [r4, #12]
 80152ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80152f2:	f010 0301 	ands.w	r3, r0, #1
 80152f6:	d00a      	beq.n	801530e <__swsetup_r+0x9e>
 80152f8:	2300      	movs	r3, #0
 80152fa:	60a3      	str	r3, [r4, #8]
 80152fc:	6963      	ldr	r3, [r4, #20]
 80152fe:	425b      	negs	r3, r3
 8015300:	61a3      	str	r3, [r4, #24]
 8015302:	6923      	ldr	r3, [r4, #16]
 8015304:	b943      	cbnz	r3, 8015318 <__swsetup_r+0xa8>
 8015306:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801530a:	d1c4      	bne.n	8015296 <__swsetup_r+0x26>
 801530c:	bd38      	pop	{r3, r4, r5, pc}
 801530e:	0781      	lsls	r1, r0, #30
 8015310:	bf58      	it	pl
 8015312:	6963      	ldrpl	r3, [r4, #20]
 8015314:	60a3      	str	r3, [r4, #8]
 8015316:	e7f4      	b.n	8015302 <__swsetup_r+0x92>
 8015318:	2000      	movs	r0, #0
 801531a:	e7f7      	b.n	801530c <__swsetup_r+0x9c>
 801531c:	20000164 	.word	0x20000164

08015320 <_raise_r>:
 8015320:	291f      	cmp	r1, #31
 8015322:	b538      	push	{r3, r4, r5, lr}
 8015324:	4604      	mov	r4, r0
 8015326:	460d      	mov	r5, r1
 8015328:	d904      	bls.n	8015334 <_raise_r+0x14>
 801532a:	2316      	movs	r3, #22
 801532c:	6003      	str	r3, [r0, #0]
 801532e:	f04f 30ff 	mov.w	r0, #4294967295
 8015332:	bd38      	pop	{r3, r4, r5, pc}
 8015334:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015336:	b112      	cbz	r2, 801533e <_raise_r+0x1e>
 8015338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801533c:	b94b      	cbnz	r3, 8015352 <_raise_r+0x32>
 801533e:	4620      	mov	r0, r4
 8015340:	f000 f830 	bl	80153a4 <_getpid_r>
 8015344:	462a      	mov	r2, r5
 8015346:	4601      	mov	r1, r0
 8015348:	4620      	mov	r0, r4
 801534a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801534e:	f000 b817 	b.w	8015380 <_kill_r>
 8015352:	2b01      	cmp	r3, #1
 8015354:	d00a      	beq.n	801536c <_raise_r+0x4c>
 8015356:	1c59      	adds	r1, r3, #1
 8015358:	d103      	bne.n	8015362 <_raise_r+0x42>
 801535a:	2316      	movs	r3, #22
 801535c:	6003      	str	r3, [r0, #0]
 801535e:	2001      	movs	r0, #1
 8015360:	e7e7      	b.n	8015332 <_raise_r+0x12>
 8015362:	2400      	movs	r4, #0
 8015364:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015368:	4628      	mov	r0, r5
 801536a:	4798      	blx	r3
 801536c:	2000      	movs	r0, #0
 801536e:	e7e0      	b.n	8015332 <_raise_r+0x12>

08015370 <raise>:
 8015370:	4b02      	ldr	r3, [pc, #8]	; (801537c <raise+0xc>)
 8015372:	4601      	mov	r1, r0
 8015374:	6818      	ldr	r0, [r3, #0]
 8015376:	f7ff bfd3 	b.w	8015320 <_raise_r>
 801537a:	bf00      	nop
 801537c:	20000164 	.word	0x20000164

08015380 <_kill_r>:
 8015380:	b538      	push	{r3, r4, r5, lr}
 8015382:	4d07      	ldr	r5, [pc, #28]	; (80153a0 <_kill_r+0x20>)
 8015384:	2300      	movs	r3, #0
 8015386:	4604      	mov	r4, r0
 8015388:	4608      	mov	r0, r1
 801538a:	4611      	mov	r1, r2
 801538c:	602b      	str	r3, [r5, #0]
 801538e:	f7ec fe63 	bl	8002058 <_kill>
 8015392:	1c43      	adds	r3, r0, #1
 8015394:	d102      	bne.n	801539c <_kill_r+0x1c>
 8015396:	682b      	ldr	r3, [r5, #0]
 8015398:	b103      	cbz	r3, 801539c <_kill_r+0x1c>
 801539a:	6023      	str	r3, [r4, #0]
 801539c:	bd38      	pop	{r3, r4, r5, pc}
 801539e:	bf00      	nop
 80153a0:	2000e41c 	.word	0x2000e41c

080153a4 <_getpid_r>:
 80153a4:	f7ec be50 	b.w	8002048 <_getpid>

080153a8 <__swhatbuf_r>:
 80153a8:	b570      	push	{r4, r5, r6, lr}
 80153aa:	460c      	mov	r4, r1
 80153ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153b0:	2900      	cmp	r1, #0
 80153b2:	b096      	sub	sp, #88	; 0x58
 80153b4:	4615      	mov	r5, r2
 80153b6:	461e      	mov	r6, r3
 80153b8:	da0d      	bge.n	80153d6 <__swhatbuf_r+0x2e>
 80153ba:	89a3      	ldrh	r3, [r4, #12]
 80153bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80153c0:	f04f 0100 	mov.w	r1, #0
 80153c4:	bf0c      	ite	eq
 80153c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80153ca:	2340      	movne	r3, #64	; 0x40
 80153cc:	2000      	movs	r0, #0
 80153ce:	6031      	str	r1, [r6, #0]
 80153d0:	602b      	str	r3, [r5, #0]
 80153d2:	b016      	add	sp, #88	; 0x58
 80153d4:	bd70      	pop	{r4, r5, r6, pc}
 80153d6:	466a      	mov	r2, sp
 80153d8:	f000 f848 	bl	801546c <_fstat_r>
 80153dc:	2800      	cmp	r0, #0
 80153de:	dbec      	blt.n	80153ba <__swhatbuf_r+0x12>
 80153e0:	9901      	ldr	r1, [sp, #4]
 80153e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80153e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80153ea:	4259      	negs	r1, r3
 80153ec:	4159      	adcs	r1, r3
 80153ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153f2:	e7eb      	b.n	80153cc <__swhatbuf_r+0x24>

080153f4 <__smakebuf_r>:
 80153f4:	898b      	ldrh	r3, [r1, #12]
 80153f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80153f8:	079d      	lsls	r5, r3, #30
 80153fa:	4606      	mov	r6, r0
 80153fc:	460c      	mov	r4, r1
 80153fe:	d507      	bpl.n	8015410 <__smakebuf_r+0x1c>
 8015400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015404:	6023      	str	r3, [r4, #0]
 8015406:	6123      	str	r3, [r4, #16]
 8015408:	2301      	movs	r3, #1
 801540a:	6163      	str	r3, [r4, #20]
 801540c:	b002      	add	sp, #8
 801540e:	bd70      	pop	{r4, r5, r6, pc}
 8015410:	ab01      	add	r3, sp, #4
 8015412:	466a      	mov	r2, sp
 8015414:	f7ff ffc8 	bl	80153a8 <__swhatbuf_r>
 8015418:	9900      	ldr	r1, [sp, #0]
 801541a:	4605      	mov	r5, r0
 801541c:	4630      	mov	r0, r6
 801541e:	f7fd fba9 	bl	8012b74 <_malloc_r>
 8015422:	b948      	cbnz	r0, 8015438 <__smakebuf_r+0x44>
 8015424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015428:	059a      	lsls	r2, r3, #22
 801542a:	d4ef      	bmi.n	801540c <__smakebuf_r+0x18>
 801542c:	f023 0303 	bic.w	r3, r3, #3
 8015430:	f043 0302 	orr.w	r3, r3, #2
 8015434:	81a3      	strh	r3, [r4, #12]
 8015436:	e7e3      	b.n	8015400 <__smakebuf_r+0xc>
 8015438:	89a3      	ldrh	r3, [r4, #12]
 801543a:	6020      	str	r0, [r4, #0]
 801543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015440:	81a3      	strh	r3, [r4, #12]
 8015442:	9b00      	ldr	r3, [sp, #0]
 8015444:	6163      	str	r3, [r4, #20]
 8015446:	9b01      	ldr	r3, [sp, #4]
 8015448:	6120      	str	r0, [r4, #16]
 801544a:	b15b      	cbz	r3, 8015464 <__smakebuf_r+0x70>
 801544c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015450:	4630      	mov	r0, r6
 8015452:	f000 f81d 	bl	8015490 <_isatty_r>
 8015456:	b128      	cbz	r0, 8015464 <__smakebuf_r+0x70>
 8015458:	89a3      	ldrh	r3, [r4, #12]
 801545a:	f023 0303 	bic.w	r3, r3, #3
 801545e:	f043 0301 	orr.w	r3, r3, #1
 8015462:	81a3      	strh	r3, [r4, #12]
 8015464:	89a3      	ldrh	r3, [r4, #12]
 8015466:	431d      	orrs	r5, r3
 8015468:	81a5      	strh	r5, [r4, #12]
 801546a:	e7cf      	b.n	801540c <__smakebuf_r+0x18>

0801546c <_fstat_r>:
 801546c:	b538      	push	{r3, r4, r5, lr}
 801546e:	4d07      	ldr	r5, [pc, #28]	; (801548c <_fstat_r+0x20>)
 8015470:	2300      	movs	r3, #0
 8015472:	4604      	mov	r4, r0
 8015474:	4608      	mov	r0, r1
 8015476:	4611      	mov	r1, r2
 8015478:	602b      	str	r3, [r5, #0]
 801547a:	f7ec fe4c 	bl	8002116 <_fstat>
 801547e:	1c43      	adds	r3, r0, #1
 8015480:	d102      	bne.n	8015488 <_fstat_r+0x1c>
 8015482:	682b      	ldr	r3, [r5, #0]
 8015484:	b103      	cbz	r3, 8015488 <_fstat_r+0x1c>
 8015486:	6023      	str	r3, [r4, #0]
 8015488:	bd38      	pop	{r3, r4, r5, pc}
 801548a:	bf00      	nop
 801548c:	2000e41c 	.word	0x2000e41c

08015490 <_isatty_r>:
 8015490:	b538      	push	{r3, r4, r5, lr}
 8015492:	4d06      	ldr	r5, [pc, #24]	; (80154ac <_isatty_r+0x1c>)
 8015494:	2300      	movs	r3, #0
 8015496:	4604      	mov	r4, r0
 8015498:	4608      	mov	r0, r1
 801549a:	602b      	str	r3, [r5, #0]
 801549c:	f7ec fe4b 	bl	8002136 <_isatty>
 80154a0:	1c43      	adds	r3, r0, #1
 80154a2:	d102      	bne.n	80154aa <_isatty_r+0x1a>
 80154a4:	682b      	ldr	r3, [r5, #0]
 80154a6:	b103      	cbz	r3, 80154aa <_isatty_r+0x1a>
 80154a8:	6023      	str	r3, [r4, #0]
 80154aa:	bd38      	pop	{r3, r4, r5, pc}
 80154ac:	2000e41c 	.word	0x2000e41c

080154b0 <fmaxf>:
 80154b0:	b508      	push	{r3, lr}
 80154b2:	ed2d 8b02 	vpush	{d8}
 80154b6:	eeb0 8a40 	vmov.f32	s16, s0
 80154ba:	eef0 8a60 	vmov.f32	s17, s1
 80154be:	f000 f813 	bl	80154e8 <__fpclassifyf>
 80154c2:	b148      	cbz	r0, 80154d8 <fmaxf+0x28>
 80154c4:	eeb0 0a68 	vmov.f32	s0, s17
 80154c8:	f000 f80e 	bl	80154e8 <__fpclassifyf>
 80154cc:	b130      	cbz	r0, 80154dc <fmaxf+0x2c>
 80154ce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80154d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154d6:	dc01      	bgt.n	80154dc <fmaxf+0x2c>
 80154d8:	eeb0 8a68 	vmov.f32	s16, s17
 80154dc:	eeb0 0a48 	vmov.f32	s0, s16
 80154e0:	ecbd 8b02 	vpop	{d8}
 80154e4:	bd08      	pop	{r3, pc}
	...

080154e8 <__fpclassifyf>:
 80154e8:	ee10 3a10 	vmov	r3, s0
 80154ec:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80154f0:	d00d      	beq.n	801550e <__fpclassifyf+0x26>
 80154f2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80154f6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80154fa:	d30a      	bcc.n	8015512 <__fpclassifyf+0x2a>
 80154fc:	4b07      	ldr	r3, [pc, #28]	; (801551c <__fpclassifyf+0x34>)
 80154fe:	1e42      	subs	r2, r0, #1
 8015500:	429a      	cmp	r2, r3
 8015502:	d908      	bls.n	8015516 <__fpclassifyf+0x2e>
 8015504:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8015508:	4258      	negs	r0, r3
 801550a:	4158      	adcs	r0, r3
 801550c:	4770      	bx	lr
 801550e:	2002      	movs	r0, #2
 8015510:	4770      	bx	lr
 8015512:	2004      	movs	r0, #4
 8015514:	4770      	bx	lr
 8015516:	2003      	movs	r0, #3
 8015518:	4770      	bx	lr
 801551a:	bf00      	nop
 801551c:	007ffffe 	.word	0x007ffffe

08015520 <_init>:
 8015520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015522:	bf00      	nop
 8015524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015526:	bc08      	pop	{r3}
 8015528:	469e      	mov	lr, r3
 801552a:	4770      	bx	lr

0801552c <_fini>:
 801552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801552e:	bf00      	nop
 8015530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015532:	bc08      	pop	{r3}
 8015534:	469e      	mov	lr, r3
 8015536:	4770      	bx	lr
