
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016410  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  080165a0  080165a0  000265a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d90  08016d90  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  08016d90  08016d90  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016d90  08016d90  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d90  08016d90  00026d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d94  08016d94  00026d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08016d98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003be0  200002d4  0801706c  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20003eb4  0801706c  00033eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ec8  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005750  00000000  00000000  0005120f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00056960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c0  00000000  00000000  000584d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002edf5  00000000  00000000  00059998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026e73  00000000  00000000  0008878d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbf06  00000000  00000000  000af600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000084a0  00000000  00000000  001ab508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001b39a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016588 	.word	0x08016588

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	08016588 	.word	0x08016588

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	213d      	movs	r1, #61	; 0x3d
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f003 fea5 	bl	8004a68 <HAL_I2C_Mem_Read>
 8000d1e:	4603      	mov	r3, r0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LIS2MDL_WriteReg>:
HAL_StatusTypeDef	LIS2MDL_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LIS2MDL_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	460b      	mov	r3, r1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	213d      	movs	r1, #61	; 0x3d
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f003 fd77 	bl	8004840 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	21d7      	movs	r1, #215	; 0xd7
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f003 fe71 	bl	8004a68 <HAL_I2C_Mem_Read>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LSM6DSO_ReadRegs>:

HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21d7      	movs	r1, #215	; 0xd7
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f003 fe53 	bl	8004a68 <HAL_I2C_Mem_Read>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DSO_WriteReg>:

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21d7      	movs	r1, #215	; 0xd7
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f003 fd25 	bl	8004840 <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t inBuff[64];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
		//while(1){
		//CDC_Transmit_FS((uint8_t *) FIFOFULL, strlen(FIFOFULL));
		//HAL_Delay(1000);
		//}
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f002 feb7 	bl	8003b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f852 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 f980 	bl	8001128 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e28:	f000 f960 	bl	80010ec <MX_DMA_Init>
  MX_I2C3_Init();
 8000e2c:	f000 f89e 	bl	8000f6c <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000e30:	f000 f938 	bl	80010a4 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 8000e34:	f010 f9aa 	bl	801118c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e38:	f000 f8d8 	bl	8000fec <MX_RTC_Init>
  MX_FATFS_Init();
 8000e3c:	f00b fb14 	bl	800c468 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	4919      	ldr	r1, [pc, #100]	; (8000ea8 <main+0x90>)
 8000e44:	4819      	ldr	r0, [pc, #100]	; (8000eac <main+0x94>)
 8000e46:	f00f fa8f 	bl	8010368 <f_mount>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <main+0x98>)
 8000e50:	701a      	strb	r2, [r3, #0]
  if ( mountStatus != FR_OK){
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <main+0x98>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <main+0x46>
	  Error_Handler();
 8000e5a:	f000 f9df 	bl	800121c <Error_Handler>

  volMakeStatus = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
  if ( volMakeStatus != FR_OK){
	  Error_Handler();
  }*/
  HAL_Delay(500);
 8000e5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e62:	f002 ff09 	bl	8003c78 <HAL_Delay>

  fileCreateStatus = f_open(&SDFile, "Out.csv", FA_CREATE_ALWAYS | FA_WRITE);
 8000e66:	220a      	movs	r2, #10
 8000e68:	4912      	ldr	r1, [pc, #72]	; (8000eb4 <main+0x9c>)
 8000e6a:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <main+0xa0>)
 8000e6c:	f00f fac2 	bl	80103f4 <f_open>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <main+0xa4>)
 8000e76:	701a      	strb	r2, [r3, #0]
  if ( fileCreateStatus != FR_OK){
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <main+0xa4>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <main+0x6c>
	  Error_Handler();
 8000e80:	f000 f9cc 	bl	800121c <Error_Handler>
  }


  f_printf(&SDFile,"TimeStamp (s), Tag, Accel X, Accel Y, Accel Z, Gyro X, Gyro Y, Gyro Z, Temp (C)\n");
 8000e84:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <main+0xa8>)
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <main+0xa0>)
 8000e88:	f00f ff06 	bl	8010c98 <f_printf>

  f_close( &SDFile );
 8000e8c:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <main+0xa0>)
 8000e8e:	f00f fe62 	bl	8010b56 <f_close>
  /* Search for connection via USB */
  /* Once Received proceed to init and data collection */
  // Initialise Sensor
  pawprint_init(&hi2c3);
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <main+0xac>)
 8000e94:	f000 f9c7 	bl	8001226 <pawprint_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  pawprint_readFIFO(&hi2c3);
 8000e98:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <main+0xac>)
 8000e9a:	f000 fbdd 	bl	8001658 <pawprint_readFIFO>
	  //FIFO_out;
	  HAL_Delay(1000);
 8000e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea2:	f002 fee9 	bl	8003c78 <HAL_Delay>
	  pawprint_readFIFO(&hi2c3);
 8000ea6:	e7f7      	b.n	8000e98 <main+0x80>
 8000ea8:	20001cbc 	.word	0x20001cbc
 8000eac:	20001cc0 	.word	0x20001cc0
 8000eb0:	20000434 	.word	0x20000434
 8000eb4:	080165a0 	.word	0x080165a0
 8000eb8:	20001ef0 	.word	0x20001ef0
 8000ebc:	20000435 	.word	0x20000435
 8000ec0:	080165a8 	.word	0x080165a8
 8000ec4:	200002f0 	.word	0x200002f0

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b096      	sub	sp, #88	; 0x58
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	2244      	movs	r2, #68	; 0x44
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f011 ffd3 	bl	8012e82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	463b      	mov	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000eea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000eee:	f005 fbd9 	bl	80066a4 <HAL_PWREx_ControlVoltageScaling>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ef8:	f000 f990 	bl	800121c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000efc:	2309      	movs	r3, #9
 8000efe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f16:	2308      	movs	r3, #8
 8000f18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 fc20 	bl	8006770 <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f36:	f000 f971 	bl	800121c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2102      	movs	r1, #2
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 ffe8 	bl	8006f28 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f5e:	f000 f95d 	bl	800121c <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3758      	adds	r7, #88	; 0x58
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <MX_I2C3_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <MX_I2C3_Init+0x7c>)
 8000f7a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000fa8:	f003 fbae 	bl	8004708 <HAL_I2C_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fb2:	f000 f933 	bl	800121c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000fba:	f004 f927 	bl	800520c <HAL_I2CEx_ConfigAnalogFilter>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fc4:	f000 f92a 	bl	800121c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_I2C3_Init+0x74>)
 8000fcc:	f004 f969 	bl	80052a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000fd6:	f000 f921 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200002f0 	.word	0x200002f0
 8000fe4:	40005c00 	.word	0x40005c00
 8000fe8:	20303e5d 	.word	0x20303e5d

08000fec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_RTC_Init+0xb0>)
 8001006:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <MX_RTC_Init+0xb4>)
 8001008:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <MX_RTC_Init+0xb0>)
 800100c:	2200      	movs	r2, #0
 800100e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_RTC_Init+0xb0>)
 8001012:	227f      	movs	r2, #127	; 0x7f
 8001014:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_RTC_Init+0xb0>)
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_RTC_Init+0xb0>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_RTC_Init+0xb0>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_RTC_Init+0xb0>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_RTC_Init+0xb0>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001034:	4819      	ldr	r0, [pc, #100]	; (800109c <MX_RTC_Init+0xb0>)
 8001036:	f007 fcb5 	bl	80089a4 <HAL_RTC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001040:	f000 f8ec 	bl	800121c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	480f      	ldr	r0, [pc, #60]	; (800109c <MX_RTC_Init+0xb0>)
 8001060:	f007 fd28 	bl	8008ab4 <HAL_RTC_SetTime>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800106a:	f000 f8d7 	bl	800121c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800106e:	2301      	movs	r3, #1
 8001070:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001072:	2301      	movs	r3, #1
 8001074:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_RTC_Init+0xb0>)
 8001086:	f007 fdb2 	bl	8008bee <HAL_RTC_SetDate>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001090:	f000 f8c4 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000344 	.word	0x20000344
 80010a0:	40002800 	.word	0x40002800

080010a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_SDMMC1_SD_Init+0x40>)
 80010aa:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <MX_SDMMC1_SD_Init+0x44>)
 80010ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <MX_SDMMC1_SD_Init+0x40>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_SDMMC1_SD_Init+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_SDMMC1_SD_Init+0x40>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_SDMMC1_SD_Init+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_SDMMC1_SD_Init+0x40>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 1;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <MX_SDMMC1_SD_Init+0x40>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <MX_SDMMC1_SD_Init+0x40>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  /* USER CODE END SDMMC1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000368 	.word	0x20000368
 80010e8:	40012800 	.word	0x40012800

080010ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_DMA_Init+0x38>)
 80010f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <MX_DMA_Init+0x38>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6493      	str	r3, [r2, #72]	; 0x48
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_DMA_Init+0x38>)
 8001100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	203b      	movs	r0, #59	; 0x3b
 8001110:	f002 feb1 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001114:	203b      	movs	r0, #59	; 0x3b
 8001116:	f002 feca 	bl	8003eae <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <MX_GPIO_Init+0xec>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a34      	ldr	r2, [pc, #208]	; (8001214 <MX_GPIO_Init+0xec>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <MX_GPIO_Init+0xec>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <MX_GPIO_Init+0xec>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a2e      	ldr	r2, [pc, #184]	; (8001214 <MX_GPIO_Init+0xec>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <MX_GPIO_Init+0xec>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_GPIO_Init+0xec>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a28      	ldr	r2, [pc, #160]	; (8001214 <MX_GPIO_Init+0xec>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_GPIO_Init+0xec>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_GPIO_Init+0xec>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a22      	ldr	r2, [pc, #136]	; (8001214 <MX_GPIO_Init+0xec>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_GPIO_Init+0xec>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800119e:	2304      	movs	r3, #4
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4819      	ldr	r0, [pc, #100]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011b4:	f003 f8ce 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 80011b8:	2308      	movs	r3, #8
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011ce:	f003 f8c1 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011da:	2302      	movs	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011e6:	f003 f8b5 	bl	8004354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2008      	movs	r0, #8
 80011f0:	f002 fe41 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011f4:	2008      	movs	r0, #8
 80011f6:	f002 fe5a 	bl	8003eae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2009      	movs	r0, #9
 8001200:	f002 fe39 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001204:	2009      	movs	r0, #9
 8001206:	f002 fe52 	bl	8003eae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	48000800 	.word	0x48000800

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	e7fe      	b.n	8001224 <Error_Handler+0x8>

08001226 <pawprint_init>:
//static st_fifo_out_slot acc_slot[126];
//static st_fifo_out_slot gyr_slot[126];

/* Initialisation */

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]

	//Create required variables
	uint8_t LSM6DSO_WHO,MasterTemp, RegDat, LIS2MDL_WHO, STTS_PROD, STTS_MAN;

	// Boot Delay
	HAL_Delay(20);
 800122e:	2014      	movs	r0, #20
 8001230:	f002 fd22 	bl	8003c78 <HAL_Delay>
	/* Reset Sensor to defaults*/
	RegDat = 0x00;
 8001234:	2300      	movs	r3, #0
 8001236:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Ensure accessing correct registers
 8001238:	f107 030d 	add.w	r3, r7, #13
 800123c:	461a      	mov	r2, r3
 800123e:	2101      	movs	r1, #1
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fdc3 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x05;
 8001246:	2305      	movs	r3, #5
 8001248:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat); // Software reset
 800124a:	f107 030d 	add.w	r3, r7, #13
 800124e:	461a      	mov	r2, r3
 8001250:	2112      	movs	r1, #18
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fdba 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);
 8001258:	2064      	movs	r0, #100	; 0x64
 800125a:	f002 fd0d 	bl	8003c78 <HAL_Delay>

	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &LSM6DSO_WHO);
 800125e:	f107 030f 	add.w	r3, r7, #15
 8001262:	461a      	mov	r2, r3
 8001264:	210f      	movs	r1, #15
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fd78 	bl	8000d5c <LSM6DSO_ReadReg>

	/****** Enable PassThrough ******/
	RegDat = 0x40;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 8001270:	f107 030d 	add.w	r3, r7, #13
 8001274:	461a      	mov	r2, r3
 8001276:	2101      	movs	r1, #1
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fda7 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp);// Save Master Config to MasterTemp
 800127e:	f107 030e 	add.w	r3, r7, #14
 8001282:	461a      	mov	r2, r3
 8001284:	2114      	movs	r1, #20
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fd68 	bl	8000d5c <LSM6DSO_ReadReg>
	MasterTemp |= 0x20;
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	b2db      	uxtb	r3, r3
 8001294:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 1 - sensor hub signal disable
 8001296:	f107 030e 	add.w	r3, r7, #14
 800129a:	461a      	mov	r2, r3
 800129c:	2114      	movs	r1, #20
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fd94 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(5);																							// Delay
 80012a4:	2005      	movs	r0, #5
 80012a6:	f002 fce7 	bl	8003c78 <HAL_Delay>
	MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f023 0304 	bic.w	r3, r3, #4
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Master On bit to 0 to enable
 80012ba:	f107 030e 	add.w	r3, r7, #14
 80012be:	461a      	mov	r2, r3
 80012c0:	2114      	movs	r1, #20
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fd82 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 0 to restore trigger
 80012d2:	f107 030e 	add.w	r3, r7, #14
 80012d6:	461a      	mov	r2, r3
 80012d8:	2114      	movs	r1, #20
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fd76 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 80012e0:	7bbb      	ldrb	r3, [r7, #14]
 80012e2:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Set Pullup to 0 to disable internal pullup
 80012ea:	f107 030e 	add.w	r3, r7, #14
 80012ee:	461a      	mov	r2, r3
 80012f0:	2114      	movs	r1, #20
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fd6a 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = 0x10;
 80012f8:	2310      	movs	r3, #16
 80012fa:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 80012fc:	f107 030e 	add.w	r3, r7, #14
 8001300:	461a      	mov	r2, r3
 8001302:	2114      	movs	r1, #20
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fd61 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800130a:	2300      	movs	r3, #0
 800130c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 800130e:	f107 030d 	add.w	r3, r7, #13
 8001312:	461a      	mov	r2, r3
 8001314:	2101      	movs	r1, #1
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fd58 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** LIS2MDL Configuration ***/

	LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &LIS2MDL_WHO);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	461a      	mov	r2, r3
 8001322:	214f      	movs	r1, #79	; 0x4f
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fce5 	bl	8000cf4 <LIS2MDL_ReadReg>

	while( LIS2MDL_WHO != LIS2MDL_ID)
 800132a:	e001      	b.n	8001330 <pawprint_init+0x10a>

	/* Reset sensor to defaults */
	RegDat = 0x23;
 800132c:	2323      	movs	r3, #35	; 0x23
 800132e:	737b      	strb	r3, [r7, #13]
	while( LIS2MDL_WHO != LIS2MDL_ID)
 8001330:	7b3b      	ldrb	r3, [r7, #12]
 8001332:	2b40      	cmp	r3, #64	; 0x40
 8001334:	d1fa      	bne.n	800132c <pawprint_init+0x106>
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //Reset registers by soft rst of cfg A to 1
 8001336:	f107 030d 	add.w	r3, r7, #13
 800133a:	461a      	mov	r2, r3
 800133c:	2160      	movs	r1, #96	; 0x60
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fcf2 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(5);
 8001344:	2005      	movs	r0, #5
 8001346:	f002 fc97 	bl	8003c78 <HAL_Delay>
	RegDat = 0x43;
 800134a:	2343      	movs	r3, #67	; 0x43
 800134c:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //ReBOOT of cfg A to 1
 800134e:	f107 030d 	add.w	r3, r7, #13
 8001352:	461a      	mov	r2, r3
 8001354:	2160      	movs	r1, #96	; 0x60
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fce6 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(20);
 800135c:	2014      	movs	r0, #20
 800135e:	f002 fc8b 	bl	8003c78 <HAL_Delay>

	/* Setup */
	RegDat = 0x10;
 8001362:	2310      	movs	r3, #16
 8001364:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_C, &RegDat);// bdu set 1
 8001366:	f107 030d 	add.w	r3, r7, #13
 800136a:	461a      	mov	r2, r3
 800136c:	2162      	movs	r1, #98	; 0x62
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fcda 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x8C;
 8001374:	238c      	movs	r3, #140	; 0x8c
 8001376:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat);// offset temp on, operating mode Default, & data rate  100Hz
 8001378:	f107 030d 	add.w	r3, r7, #13
 800137c:	461a      	mov	r2, r3
 800137e:	2160      	movs	r1, #96	; 0x60
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fcd1 	bl	8000d28 <LIS2MDL_WriteReg>

	/**** Insert Calibration Code here - Requires Moving and Input trigger via USB ******/

	/*** STTS Setup ***/

	STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &STTS_PROD); // ProdID is 00 for this version of therm - therefore also use manID
 8001386:	f107 030b 	add.w	r3, r7, #11
 800138a:	461a      	mov	r2, r3
 800138c:	21fd      	movs	r1, #253	; 0xfd
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f002 fae2 	bl	8003958 <STTS751_ReadReg>
	STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &STTS_MAN);
 8001394:	f107 030a 	add.w	r3, r7, #10
 8001398:	461a      	mov	r2, r3
 800139a:	21fe      	movs	r1, #254	; 0xfe
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f002 fadb 	bl	8003958 <STTS751_ReadReg>

	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80013a2:	e001      	b.n	80013a8 <pawprint_init+0x182>

	RegDat = 0x04;
 80013a4:	2304      	movs	r3, #4
 80013a6:	737b      	strb	r3, [r7, #13]
	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <pawprint_init+0x18e>
 80013ae:	7abb      	ldrb	r3, [r7, #10]
 80013b0:	2b53      	cmp	r3, #83	; 0x53
 80013b2:	d1f7      	bne.n	80013a4 <pawprint_init+0x17e>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONV_RATE, &RegDat); // 1Hz
 80013b4:	f107 030d 	add.w	r3, r7, #13
 80013b8:	461a      	mov	r2, r3
 80013ba:	2104      	movs	r1, #4
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fcb3 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x4B;
 80013c2:	234b      	movs	r3, #75	; 0x4b
 80013c4:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_H, &RegDat); // Thermal Limit - default is 85 lowered to 75, low limit at freezing
 80013c6:	f107 030d 	add.w	r3, r7, #13
 80013ca:	461a      	mov	r2, r3
 80013cc:	2105      	movs	r1, #5
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fcaa 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_THERM_LIMIT, &RegDat); //Therm limit for THERM pin - not used in this design but set regardless for consistency
 80013d4:	f107 030d 	add.w	r3, r7, #13
 80013d8:	461a      	mov	r2, r3
 80013da:	2120      	movs	r1, #32
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fca3 	bl	8000d28 <LIS2MDL_WriteReg>

	// No reset function - for safety ensure all thermal registers are set and not assumed to be correct
	RegDat = 0x00;
 80013e2:	2300      	movs	r3, #0
 80013e4:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_L, &RegDat);
 80013e6:	f107 030d 	add.w	r3, r7, #13
 80013ea:	461a      	mov	r2, r3
 80013ec:	2106      	movs	r1, #6
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fc9a 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_H, &RegDat);
 80013f4:	f107 030d 	add.w	r3, r7, #13
 80013f8:	461a      	mov	r2, r3
 80013fa:	2107      	movs	r1, #7
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fc93 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_L, &RegDat);
 8001402:	f107 030d 	add.w	r3, r7, #13
 8001406:	461a      	mov	r2, r3
 8001408:	2108      	movs	r1, #8
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fc8c 	bl	8000d28 <LIS2MDL_WriteReg>

	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONFIG, &RegDat);// Mask1 enabled - event pin active (b7), Run/standby mode (b6)
 8001410:	f107 030d 	add.w	r3, r7, #13
 8001414:	461a      	mov	r2, r3
 8001416:	2103      	movs	r1, #3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fc85 	bl	8000d28 <LIS2MDL_WriteReg>

	/*** Disable Pass Through ***/
	RegDat = 0x40;
 800141e:	2340      	movs	r3, #64	; 0x40
 8001420:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 8001422:	f107 030d 	add.w	r3, r7, #13
 8001426:	461a      	mov	r2, r3
 8001428:	2101      	movs	r1, #1
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fcce 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);		// delay 100
 8001430:	2064      	movs	r0, #100	; 0x64
 8001432:	f002 fc21 	bl	8003c78 <HAL_Delay>
	RegDat = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);	// Disable pass through
 800143a:	f107 030d 	add.w	r3, r7, #13
 800143e:	461a      	mov	r2, r3
 8001440:	2114      	movs	r1, #20
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fcc2 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);	// Disable SHUB access
 8001448:	f107 030d 	add.w	r3, r7, #13
 800144c:	461a      	mov	r2, r3
 800144e:	2101      	movs	r1, #1
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fcbb 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Configure LSM6DSO ***/
	RegDat = 0xE2;
 8001456:	23e2      	movs	r3, #226	; 0xe2
 8001458:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL9_XL , &RegDat); // Disable I3C MIPI
 800145a:	f107 030d 	add.w	r3, r7, #13
 800145e:	461a      	mov	r2, r3
 8001460:	2118      	movs	r1, #24
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fcb2 	bl	8000dcc <LSM6DSO_WriteReg>

	RegDat = 0x00;
 8001468:	2300      	movs	r3, #0
 800146a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL , &RegDat); // Ensure Acc and Gyro Powered down
 800146c:	f107 030d 	add.w	r3, r7, #13
 8001470:	461a      	mov	r2, r3
 8001472:	2110      	movs	r1, #16
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fca9 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G , &RegDat);
 800147a:	f107 030d 	add.w	r3, r7, #13
 800147e:	461a      	mov	r2, r3
 8001480:	2111      	movs	r1, #17
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fca2 	bl	8000dcc <LSM6DSO_WriteReg>

	/**** FIFO set up ****/
	RegDat = 0x2C;
 8001488:	232c      	movs	r3, #44	; 0x2c
 800148a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL1 , &RegDat);// Set Watermark level to 300
 800148c:	f107 030d 	add.w	r3, r7, #13
 8001490:	461a      	mov	r2, r3
 8001492:	2107      	movs	r1, #7
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fc99 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x01;
 800149a:	2301      	movs	r3, #1
 800149c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL2 , &RegDat);
 800149e:	f107 030d 	add.w	r3, r7, #13
 80014a2:	461a      	mov	r2, r3
 80014a4:	2108      	movs	r1, #8
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fc90 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x44;
 80014ac:	2344      	movs	r3, #68	; 0x44
 80014ae:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL3 , &RegDat); // Set BDR for XL and Gyro (104Hz both)
 80014b0:	f107 030d 	add.w	r3, r7, #13
 80014b4:	461a      	mov	r2, r3
 80014b6:	2109      	movs	r1, #9
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff fc87 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x56;
 80014be:	2356      	movs	r3, #86	; 0x56
 80014c0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL4 , &RegDat);// Set to continuous mode & batch Temp and Timestamp
 80014c2:	f107 030d 	add.w	r3, r7, #13
 80014c6:	461a      	mov	r2, r3
 80014c8:	210a      	movs	r1, #10
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fc7e 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x41;
 80014d0:	2341      	movs	r3, #65	; 0x41
 80014d2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_TAP_CFG0 , &RegDat); // Latch interrupt & clear on read
 80014d4:	f107 030d 	add.w	r3, r7, #13
 80014d8:	461a      	mov	r2, r3
 80014da:	2156      	movs	r1, #86	; 0x56
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fc75 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x38;
 80014e2:	2338      	movs	r3, #56	; 0x38
 80014e4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_INT1_CTRL , &RegDat); // FIFO int on INT1
 80014e6:	f107 030d 	add.w	r3, r7, #13
 80014ea:	461a      	mov	r2, r3
 80014ec:	210d      	movs	r1, #13
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fc6c 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Peripheral address / subaddress config ***/
	RegDat = 0x40;
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB access
 80014f8:	f107 030d 	add.w	r3, r7, #13
 80014fc:	461a      	mov	r2, r3
 80014fe:	2101      	movs	r1, #1
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fc63 	bl	8000dcc <LSM6DSO_WriteReg>

	// LIS2MDL Peripheral enable
	RegDat = LIS2MDL_I2C_ADDR;
 8001506:	233d      	movs	r3, #61	; 0x3d
 8001508:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_ADD, &RegDat);// Set address slv0
 800150a:	f107 030d 	add.w	r3, r7, #13
 800150e:	461a      	mov	r2, r3
 8001510:	2115      	movs	r1, #21
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fc5a 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = LIS2MDL_REG_OUTX_L;
 8001518:	2368      	movs	r3, #104	; 0x68
 800151a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_SUBADD, &RegDat);// Set start register for data output
 800151c:	f107 030d 	add.w	r3, r7, #13
 8001520:	461a      	mov	r2, r3
 8001522:	2116      	movs	r1, #22
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fc51 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0E;
 800152a:	230e      	movs	r3, #14
 800152c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_CONFIG, &RegDat);// Set bytes to read
 800152e:	f107 030d 	add.w	r3, r7, #13
 8001532:	461a      	mov	r2, r3
 8001534:	2117      	movs	r1, #23
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fc48 	bl	8000dcc <LSM6DSO_WriteReg>

	// STTS751 Peripheral enable
	RegDat = STTS751_I2C_ADDR;
 800153c:	2372      	movs	r3, #114	; 0x72
 800153e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_ADD, &RegDat);// Set address slv1
 8001540:	f107 030d 	add.w	r3, r7, #13
 8001544:	461a      	mov	r2, r3
 8001546:	2118      	movs	r1, #24
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fc3f 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = STTS751_REG_TEMP_H;
 800154e:	2300      	movs	r3, #0
 8001550:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_SUBADD, &RegDat);// Set start register for data output
 8001552:	f107 030d 	add.w	r3, r7, #13
 8001556:	461a      	mov	r2, r3
 8001558:	2119      	movs	r1, #25
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fc36 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0B;
 8001560:	230b      	movs	r3, #11
 8001562:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_CONFIG, &RegDat);// Set bytes to read - status between L and H registers so need to read 3
 8001564:	f107 030d 	add.w	r3, r7, #13
 8001568:	461a      	mov	r2, r3
 800156a:	211a      	movs	r1, #26
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fc2d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Disable SHUB access
 8001576:	f107 030d 	add.w	r3, r7, #13
 800157a:	461a      	mov	r2, r3
 800157c:	2101      	movs	r1, #1
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fc24 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Configure Xl and Gyro */
	RegDat = 0x44;
 8001584:	2344      	movs	r3, #68	; 0x44
 8001586:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat);// Enable block update and auto increment registers
 8001588:	f107 030d 	add.w	r3, r7, #13
 800158c:	461a      	mov	r2, r3
 800158e:	2112      	movs	r1, #18
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fc1b 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x28;
 8001596:	2328      	movs	r3, #40	; 0x28
 8001598:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL4_C, &RegDat);	// Int 1 and mask DRDY until Filter settles
 800159a:	f107 030d 	add.w	r3, r7, #13
 800159e:	461a      	mov	r2, r3
 80015a0:	2113      	movs	r1, #19
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fc12 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 80015a8:	2310      	movs	r3, #16
 80015aa:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL6_C, &RegDat);// XL High performance disabled
 80015ac:	f107 030d 	add.w	r3, r7, #13
 80015b0:	461a      	mov	r2, r3
 80015b2:	2115      	movs	r1, #21
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fc09 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x80;
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL7_G, &RegDat);// Gyro High performance disabled
 80015be:	f107 030d 	add.w	r3, r7, #13
 80015c2:	461a      	mov	r2, r3
 80015c4:	2116      	movs	r1, #22
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fc00 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x20;
 80015cc:	2320      	movs	r3, #32
 80015ce:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL10_C, &RegDat);// enable timestamps
 80015d0:	f107 030d 	add.w	r3, r7, #13
 80015d4:	461a      	mov	r2, r3
 80015d6:	2119      	movs	r1, #25
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fbf7 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80015de:	2340      	movs	r3, #64	; 0x40
 80015e0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL, &RegDat);//Set acc scale and sample rate  - ctrl 1 xl
 80015e2:	f107 030d 	add.w	r3, r7, #13
 80015e6:	461a      	mov	r2, r3
 80015e8:	2110      	movs	r1, #16
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fbee 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G, &RegDat);// Gyro scale and sample rate - ctrl 2 g
 80015f4:	f107 030d 	add.w	r3, r7, #13
 80015f8:	461a      	mov	r2, r3
 80015fa:	2111      	movs	r1, #17
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fbe5 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Enable I2C Master to begin Data collection */
	RegDat = 0x40;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB Reg Access
 8001606:	f107 030d 	add.w	r3, r7, #13
 800160a:	461a      	mov	r2, r3
 800160c:	2101      	movs	r1, #1
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fbdc 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x09;
 8001614:	2309      	movs	r3, #9
 8001616:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable pullups & accel trigger drdy & number external sensors
 8001618:	f107 030d 	add.w	r3, r7, #13
 800161c:	461a      	mov	r2, r3
 800161e:	2114      	movs	r1, #20
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fbd3 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = (RegDat ^ 0x04);
 8001626:	7b7b      	ldrb	r3, [r7, #13]
 8001628:	f083 0304 	eor.w	r3, r3, #4
 800162c:	b2db      	uxtb	r3, r3
 800162e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable I2C Master
 8001630:	f107 030d 	add.w	r3, r7, #13
 8001634:	461a      	mov	r2, r3
 8001636:	2114      	movs	r1, #20
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fbc7 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 8001642:	f107 030d 	add.w	r3, r7, #13
 8001646:	461a      	mov	r2, r3
 8001648:	2101      	movs	r1, #1
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fbbe 	bl	8000dcc <LSM6DSO_WriteReg>

}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <pawprint_readFIFO>:

/* FIFO read and decode - uses st_fifo repo from STMicro git */

void pawprint_readFIFO( I2C_HandleTypeDef *i2cHandle ){
 8001658:	b580      	push	{r7, lr}
 800165a:	b09c      	sub	sp, #112	; 0x70
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

	st_fifo_conf FIFOconf;
	uint8_t FIFOstatus[2];
	uint16_t FIFOdepth = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	FIFOconf.device = ST_FIFO_LSM6DSO;
 8001666:	2305      	movs	r3, #5
 8001668:	753b      	strb	r3, [r7, #20]
	FIFOconf.bdr_xl = 0; // 104 - as batching timestamp can set to 0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
	FIFOconf.bdr_gy = 0;
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
	FIFOconf.bdr_vsens = 0;
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	623b      	str	r3, [r7, #32]

	st_fifo_init(&FIFOconf);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fc05 	bl	8001e90 <st_fifo_init>
	st_fifo_out_slot *out_slot;
	uint16_t out_slot_size;


	/* Confirm watermark has been met LSM6DSO_REG_FIFO_STATUS2 */
	LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, &FIFOstatus[0], 2);
 8001686:	f107 0210 	add.w	r2, r7, #16
 800168a:	2302      	movs	r3, #2
 800168c:	213a      	movs	r1, #58	; 0x3a
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fb7e 	bl	8000d90 <LSM6DSO_ReadRegs>

	if (((FIFOstatus[1] >> 7)  & 0x01)||((FIFOstatus[1] >> 6)  & 0x01)||((FIFOstatus[1] >> 5)  & 0x01)){ // Check WTM threshold bit, overrun bit and full bit
 8001694:	7c7b      	ldrb	r3, [r7, #17]
 8001696:	09db      	lsrs	r3, r3, #7
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10e      	bne.n	80016c0 <pawprint_readFIFO+0x68>
 80016a2:	7c7b      	ldrb	r3, [r7, #17]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d107      	bne.n	80016c0 <pawprint_readFIFO+0x68>
 80016b0:	7c7b      	ldrb	r3, [r7, #17]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 837f 	beq.w	8001dbe <pawprint_readFIFO+0x766>
		/* Get number of samples in FIFO*/
		//LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, &FIFOstatus[1]);
		FIFOdepth = ((((uint16_t)FIFOstatus[1] & 0x03) << 8) + (uint16_t)FIFOstatus[0]);
 80016c0:	7c7b      	ldrb	r3, [r7, #17]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	7c3b      	ldrb	r3, [r7, #16]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		raw_slot = malloc(FIFOdepth * sizeof(st_fifo_raw_slot));
 80016d6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f010 fb91 	bl	8011e08 <malloc>
 80016e6:	4603      	mov	r3, r0
 80016e8:	64fb      	str	r3, [r7, #76]	; 0x4c
		out_slot = malloc(FIFOdepth * 3 * sizeof(st_fifo_out_slot));
 80016ea:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f010 fb86 	bl	8011e08 <malloc>
 80016fc:	4603      	mov	r3, r0
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48

		int slots = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	66bb      	str	r3, [r7, #104]	; 0x68

		while(FIFOdepth--) {
 8001704:	e00e      	b.n	8001724 <pawprint_readFIFO+0xcc>
//
			LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_DATA_OUT_X_L, &raw_slot[slots].fifo_data_out[0],7 );
 8001706:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001708:	4613      	mov	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001710:	4413      	add	r3, r2
 8001712:	461a      	mov	r2, r3
 8001714:	2307      	movs	r3, #7
 8001716:	2179      	movs	r1, #121	; 0x79
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fb39 	bl	8000d90 <LSM6DSO_ReadRegs>
//
			slots++;
 800171e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001720:	3301      	adds	r3, #1
 8001722:	66bb      	str	r3, [r7, #104]	; 0x68
		while(FIFOdepth--) {
 8001724:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	f8a7 206e 	strh.w	r2, [r7, #110]	; 0x6e
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1e9      	bne.n	8001706 <pawprint_readFIFO+0xae>
		}

		st_fifo_decode(out_slot, raw_slot, &out_slot_size, FIFOdepth);
 8001732:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001736:	f107 020e 	add.w	r2, r7, #14
 800173a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800173c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800173e:	f000 fc9b 	bl	8002078 <st_fifo_decode>
		st_fifo_sort(out_slot, out_slot_size);
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	4619      	mov	r1, r3
 8001746:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001748:	f001 fc62 	bl	8003010 <st_fifo_sort>

		uint16_t acc_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_ACCELEROMETER);
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	2201      	movs	r2, #1
 8001750:	4619      	mov	r1, r3
 8001752:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001754:	f001 fcb8 	bl	80030c8 <st_fifo_get_sensor_occurrence>
 8001758:	4603      	mov	r3, r0
 800175a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t gyr_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_GYROSCOPE);
 800175e:	89fb      	ldrh	r3, [r7, #14]
 8001760:	2200      	movs	r2, #0
 8001762:	4619      	mov	r1, r3
 8001764:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001766:	f001 fcaf 	bl	80030c8 <st_fifo_get_sensor_occurrence>
 800176a:	4603      	mov	r3, r0
 800176c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		uint16_t temp_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_TEMPERATURE);
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	2202      	movs	r2, #2
 8001774:	4619      	mov	r1, r3
 8001776:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001778:	f001 fca6 	bl	80030c8 <st_fifo_get_sensor_occurrence>
 800177c:	4603      	mov	r3, r0
 800177e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		uint16_t mag_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_EXT_SENSOR0);
 8001782:	89fb      	ldrh	r3, [r7, #14]
 8001784:	2203      	movs	r2, #3
 8001786:	4619      	mov	r1, r3
 8001788:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800178a:	f001 fc9d 	bl	80030c8 <st_fifo_get_sensor_occurrence>
 800178e:	4603      	mov	r3, r0
 8001790:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		uint16_t ext_temp_samples = st_fifo_get_sensor_occurrence(out_slot, out_slot_size, ST_FIFO_EXT_SENSOR1);
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	2204      	movs	r2, #4
 8001798:	4619      	mov	r1, r3
 800179a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800179c:	f001 fc94 	bl	80030c8 <st_fifo_get_sensor_occurrence>
 80017a0:	4603      	mov	r3, r0
 80017a2:	87fb      	strh	r3, [r7, #62]	; 0x3e

		st_fifo_out_slot *acc_slot = malloc(acc_samples * sizeof(st_fifo_out_slot));
 80017a4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f010 fb29 	bl	8011e08 <malloc>
 80017b6:	4603      	mov	r3, r0
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
		st_fifo_out_slot *gyr_slot = malloc(gyr_samples * sizeof(st_fifo_out_slot));
 80017ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f010 fb1e 	bl	8011e08 <malloc>
 80017cc:	4603      	mov	r3, r0
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
		st_fifo_out_slot *temp_slot = malloc(temp_samples * sizeof(st_fifo_out_slot));
 80017d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4618      	mov	r0, r3
 80017de:	f010 fb13 	bl	8011e08 <malloc>
 80017e2:	4603      	mov	r3, r0
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
		st_fifo_out_slot *mag_slot = malloc(mag_samples * sizeof(st_fifo_out_slot));
 80017e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f010 fb08 	bl	8011e08 <malloc>
 80017f8:	4603      	mov	r3, r0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		st_fifo_out_slot *ext_temp_slot = malloc(ext_temp_samples * sizeof(st_fifo_out_slot));
 80017fc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4618      	mov	r0, r3
 8001808:	f010 fafe 	bl	8011e08 <malloc>
 800180c:	4603      	mov	r3, r0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28

		st_fifo_extract_sensor(acc_slot, out_slot, out_slot_size, ST_FIFO_ACCELEROMETER);
 8001810:	89fa      	ldrh	r2, [r7, #14]
 8001812:	2301      	movs	r3, #1
 8001814:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001816:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001818:	f001 fc80 	bl	800311c <st_fifo_extract_sensor>
		st_fifo_extract_sensor(gyr_slot, out_slot, out_slot_size, ST_FIFO_GYROSCOPE);
 800181c:	89fa      	ldrh	r2, [r7, #14]
 800181e:	2300      	movs	r3, #0
 8001820:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001822:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001824:	f001 fc7a 	bl	800311c <st_fifo_extract_sensor>
		st_fifo_extract_sensor(temp_slot, out_slot, out_slot_size, ST_FIFO_TEMPERATURE);
 8001828:	89fa      	ldrh	r2, [r7, #14]
 800182a:	2302      	movs	r3, #2
 800182c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800182e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001830:	f001 fc74 	bl	800311c <st_fifo_extract_sensor>
		st_fifo_extract_sensor(mag_slot, out_slot, out_slot_size, ST_FIFO_EXT_SENSOR0);
 8001834:	89fa      	ldrh	r2, [r7, #14]
 8001836:	2303      	movs	r3, #3
 8001838:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800183a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800183c:	f001 fc6e 	bl	800311c <st_fifo_extract_sensor>
		st_fifo_extract_sensor(ext_temp_slot, out_slot, out_slot_size, ST_FIFO_EXT_SENSOR1);
 8001840:	89fa      	ldrh	r2, [r7, #14]
 8001842:	2304      	movs	r3, #4
 8001844:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001848:	f001 fc68 	bl	800311c <st_fifo_extract_sensor>

		uint32_t row_count = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	667b      	str	r3, [r7, #100]	; 0x64

		// Convert to real units & add to formatted strings
	    for (int i = 0; i < acc_samples; i++) {
 8001850:	2300      	movs	r3, #0
 8001852:	663b      	str	r3, [r7, #96]	; 0x60
 8001854:	e08d      	b.n	8001972 <pawprint_readFIFO+0x31a>
	    	FIFO_out[row_count].timestamp = acc_slot[i].timestamp;
 8001856:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	461a      	mov	r2, r3
 8001862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001864:	4413      	add	r3, r2
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	4892      	ldr	r0, [pc, #584]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 800186a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4403      	add	r3, r0
 8001876:	6019      	str	r1, [r3, #0]
	    	FIFO_out[row_count].sensor_tag = acc_slot[i].sensor_tag;
 8001878:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	461a      	mov	r2, r3
 8001884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001886:	4413      	add	r3, r2
 8001888:	7918      	ldrb	r0, [r3, #4]
 800188a:	498a      	ldr	r1, [pc, #552]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 800188c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3304      	adds	r3, #4
 800189a:	4602      	mov	r2, r0
 800189c:	701a      	strb	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.x = lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.x);
 800189e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	461a      	mov	r2, r3
 80018aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ac:	4413      	add	r3, r2
 80018ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fa8a 	bl	8001dcc <lsm6dso_from_fs2_to_mg>
 80018b8:	eef0 7a40 	vmov.f32	s15, s0
 80018bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c0:	ee17 3a90 	vmov	r3, s15
 80018c4:	b218      	sxth	r0, r3
 80018c6:	497b      	ldr	r1, [pc, #492]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 80018c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3306      	adds	r3, #6
 80018d6:	4602      	mov	r2, r0
 80018d8:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.y = lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.y);
 80018da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	461a      	mov	r2, r3
 80018e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e8:	4413      	add	r3, r2
 80018ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fa6c 	bl	8001dcc <lsm6dso_from_fs2_to_mg>
 80018f4:	eef0 7a40 	vmov.f32	s15, s0
 80018f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fc:	ee17 3a90 	vmov	r3, s15
 8001900:	b218      	sxth	r0, r3
 8001902:	496c      	ldr	r1, [pc, #432]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 8001904:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	3308      	adds	r3, #8
 8001912:	4602      	mov	r2, r0
 8001914:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.z = lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.z);
 8001916:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	461a      	mov	r2, r3
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001924:	4413      	add	r3, r2
 8001926:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fa4e 	bl	8001dcc <lsm6dso_from_fs2_to_mg>
 8001930:	eef0 7a40 	vmov.f32	s15, s0
 8001934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001938:	ee17 3a90 	vmov	r3, s15
 800193c:	b218      	sxth	r0, r3
 800193e:	495d      	ldr	r1, [pc, #372]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 8001940:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	330a      	adds	r3, #10
 800194e:	4602      	mov	r2, r0
 8001950:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.temp = 0;
 8001952:	4958      	ldr	r1, [pc, #352]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 8001954:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3306      	adds	r3, #6
 8001962:	2200      	movs	r2, #0
 8001964:	801a      	strh	r2, [r3, #0]
	    	row_count++;
 8001966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001968:	3301      	adds	r3, #1
 800196a:	667b      	str	r3, [r7, #100]	; 0x64
	    for (int i = 0; i < acc_samples; i++) {
 800196c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800196e:	3301      	adds	r3, #1
 8001970:	663b      	str	r3, [r7, #96]	; 0x60
 8001972:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001976:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001978:	429a      	cmp	r2, r3
 800197a:	f6ff af6c 	blt.w	8001856 <pawprint_readFIFO+0x1fe>
	    }

	    for (int i = 0; i < gyr_samples; i++) {
 800197e:	2300      	movs	r3, #0
 8001980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001982:	e08d      	b.n	8001aa0 <pawprint_readFIFO+0x448>
	    	FIFO_out[row_count].timestamp = gyr_slot[i].timestamp;
 8001984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	461a      	mov	r2, r3
 8001990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001992:	4413      	add	r3, r2
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	4847      	ldr	r0, [pc, #284]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 8001998:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4403      	add	r3, r0
 80019a4:	6019      	str	r1, [r3, #0]
	    	FIFO_out[row_count].sensor_tag = gyr_slot[i].sensor_tag;
 80019a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	461a      	mov	r2, r3
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	4413      	add	r3, r2
 80019b6:	7918      	ldrb	r0, [r3, #4]
 80019b8:	493e      	ldr	r1, [pc, #248]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 80019ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3304      	adds	r3, #4
 80019c8:	4602      	mov	r2, r0
 80019ca:	701a      	strb	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.x = lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.x);
 80019cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	461a      	mov	r2, r3
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	4413      	add	r3, r2
 80019dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fa0b 	bl	8001dfc <lsm6dso_from_fs125_to_mdps>
 80019e6:	eef0 7a40 	vmov.f32	s15, s0
 80019ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ee:	ee17 3a90 	vmov	r3, s15
 80019f2:	b218      	sxth	r0, r3
 80019f4:	492f      	ldr	r1, [pc, #188]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 80019f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	3306      	adds	r3, #6
 8001a04:	4602      	mov	r2, r0
 8001a06:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.y = lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.y);
 8001a08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	461a      	mov	r2, r3
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	4413      	add	r3, r2
 8001a18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f9ed 	bl	8001dfc <lsm6dso_from_fs125_to_mdps>
 8001a22:	eef0 7a40 	vmov.f32	s15, s0
 8001a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2a:	ee17 3a90 	vmov	r3, s15
 8001a2e:	b218      	sxth	r0, r3
 8001a30:	4920      	ldr	r1, [pc, #128]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 8001a32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3308      	adds	r3, #8
 8001a40:	4602      	mov	r2, r0
 8001a42:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.z = lsm6dso_from_fs125_to_mdps(gyr_slot[i].sensor_data.z);
 8001a44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	461a      	mov	r2, r3
 8001a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a52:	4413      	add	r3, r2
 8001a54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f9cf 	bl	8001dfc <lsm6dso_from_fs125_to_mdps>
 8001a5e:	eef0 7a40 	vmov.f32	s15, s0
 8001a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a66:	ee17 3a90 	vmov	r3, s15
 8001a6a:	b218      	sxth	r0, r3
 8001a6c:	4911      	ldr	r1, [pc, #68]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 8001a6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	330a      	adds	r3, #10
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.temp = 0;
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <pawprint_readFIFO+0x45c>)
 8001a82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3306      	adds	r3, #6
 8001a90:	2200      	movs	r2, #0
 8001a92:	801a      	strh	r2, [r3, #0]
	    	row_count++;
 8001a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a96:	3301      	adds	r3, #1
 8001a98:	667b      	str	r3, [r7, #100]	; 0x64
	    for (int i = 0; i < gyr_samples; i++) {
 8001a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001aa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	f6ff af6c 	blt.w	8001984 <pawprint_readFIFO+0x32c>
	    }

	    for (int i = 0; i < mag_samples; i++) {
 8001aac:	2300      	movs	r3, #0
 8001aae:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ab0:	e090      	b.n	8001bd4 <pawprint_readFIFO+0x57c>
 8001ab2:	bf00      	nop
 8001ab4:	20000478 	.word	0x20000478
	    	FIFO_out[row_count].timestamp = mag_slot[i].timestamp;
 8001ab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac6:	4413      	add	r3, r2
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	48bf      	ldr	r0, [pc, #764]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001acc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4403      	add	r3, r0
 8001ad8:	6019      	str	r1, [r3, #0]
	    	FIFO_out[row_count].sensor_tag = mag_slot[i].sensor_tag;
 8001ada:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	4413      	add	r3, r2
 8001aea:	7918      	ldrb	r0, [r3, #4]
 8001aec:	49b6      	ldr	r1, [pc, #728]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001aee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	3304      	adds	r3, #4
 8001afc:	4602      	mov	r2, r0
 8001afe:	701a      	strb	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.x = lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.x);
 8001b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0e:	4413      	add	r3, r2
 8001b10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f989 	bl	8001e2c <lis2mdl_from_lsb_to_mgauss>
 8001b1a:	eef0 7a40 	vmov.f32	s15, s0
 8001b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b22:	ee17 3a90 	vmov	r3, s15
 8001b26:	b218      	sxth	r0, r3
 8001b28:	49a7      	ldr	r1, [pc, #668]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001b2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	3306      	adds	r3, #6
 8001b38:	4602      	mov	r2, r0
 8001b3a:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.y = lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.y);
 8001b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	461a      	mov	r2, r3
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f96b 	bl	8001e2c <lis2mdl_from_lsb_to_mgauss>
 8001b56:	eef0 7a40 	vmov.f32	s15, s0
 8001b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5e:	ee17 3a90 	vmov	r3, s15
 8001b62:	b218      	sxth	r0, r3
 8001b64:	4998      	ldr	r1, [pc, #608]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001b66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3308      	adds	r3, #8
 8001b74:	4602      	mov	r2, r0
 8001b76:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.z = lis2mdl_from_lsb_to_mgauss(mag_slot[i].sensor_data.z);
 8001b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	461a      	mov	r2, r3
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	4413      	add	r3, r2
 8001b88:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f94d 	bl	8001e2c <lis2mdl_from_lsb_to_mgauss>
 8001b92:	eef0 7a40 	vmov.f32	s15, s0
 8001b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9a:	ee17 3a90 	vmov	r3, s15
 8001b9e:	b218      	sxth	r0, r3
 8001ba0:	4989      	ldr	r1, [pc, #548]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001ba2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	330a      	adds	r3, #10
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.temp = 0;
 8001bb4:	4984      	ldr	r1, [pc, #528]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001bb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3306      	adds	r3, #6
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	801a      	strh	r2, [r3, #0]
	    	row_count++;
 8001bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bca:	3301      	adds	r3, #1
 8001bcc:	667b      	str	r3, [r7, #100]	; 0x64
	    for (int i = 0; i < mag_samples; i++) {
 8001bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	f6ff af6c 	blt.w	8001ab8 <pawprint_readFIFO+0x460>
	    }

	    for (int i = 0; i < temp_samples; i++) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	657b      	str	r3, [r7, #84]	; 0x54
 8001be4:	e065      	b.n	8001cb2 <pawprint_readFIFO+0x65a>
	    	FIFO_out[row_count].timestamp = temp_slot[i].timestamp;
 8001be6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf4:	4413      	add	r3, r2
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	4873      	ldr	r0, [pc, #460]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001bfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4403      	add	r3, r0
 8001c06:	6019      	str	r1, [r3, #0]
	    	FIFO_out[row_count].sensor_tag = temp_slot[i].sensor_tag;
 8001c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	461a      	mov	r2, r3
 8001c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c16:	4413      	add	r3, r2
 8001c18:	7918      	ldrb	r0, [r3, #4]
 8001c1a:	496b      	ldr	r1, [pc, #428]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001c1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	3304      	adds	r3, #4
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	701a      	strb	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.temp = lsm6dso_from_lsb_to_celsius(temp_slot[i].sensor_data.temp);
 8001c2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f908 	bl	8001e58 <lsm6dso_from_lsb_to_celsius>
 8001c48:	eef0 7a40 	vmov.f32	s15, s0
 8001c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c50:	ee17 3a90 	vmov	r3, s15
 8001c54:	b218      	sxth	r0, r3
 8001c56:	495c      	ldr	r1, [pc, #368]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001c58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	3306      	adds	r3, #6
 8001c66:	4602      	mov	r2, r0
 8001c68:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.x = 0;
 8001c6a:	4957      	ldr	r1, [pc, #348]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001c6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	3306      	adds	r3, #6
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.y = 0;
 8001c7e:	4952      	ldr	r1, [pc, #328]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001c80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3308      	adds	r3, #8
 8001c8e:	2200      	movs	r2, #0
 8001c90:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.z = 0;
 8001c92:	494d      	ldr	r1, [pc, #308]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001c94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	330a      	adds	r3, #10
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	801a      	strh	r2, [r3, #0]
	    	row_count++;
 8001ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ca8:	3301      	adds	r3, #1
 8001caa:	667b      	str	r3, [r7, #100]	; 0x64
	    for (int i = 0; i < temp_samples; i++) {
 8001cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cae:	3301      	adds	r3, #1
 8001cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8001cb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	db94      	blt.n	8001be6 <pawprint_readFIFO+0x58e>
	    }

	    for (int i = 0; i < ext_temp_samples; i++) {
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8001cc0:	e079      	b.n	8001db6 <pawprint_readFIFO+0x75e>
	    	FIFO_out[row_count].timestamp = ext_temp_slot[i].timestamp;
 8001cc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	4413      	add	r3, r2
 8001cd2:	6819      	ldr	r1, [r3, #0]
 8001cd4:	483c      	ldr	r0, [pc, #240]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001cd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4403      	add	r3, r0
 8001ce2:	6019      	str	r1, [r3, #0]
	    	FIFO_out[row_count].sensor_tag = ext_temp_slot[i].sensor_tag;
 8001ce4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	4413      	add	r3, r2
 8001cf4:	7918      	ldrb	r0, [r3, #4]
 8001cf6:	4934      	ldr	r1, [pc, #208]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001cf8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	3304      	adds	r3, #4
 8001d06:	4602      	mov	r2, r0
 8001d08:	701a      	strb	r2, [r3, #0]
	    	uint16_t temp_raw = (ext_temp_slot[i].sensor_data.x & 0xFF00) | (ext_temp_slot[i].sensor_data.y >> 8);
 8001d0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	461a      	mov	r2, r3
 8001d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d18:	4413      	add	r3, r2
 8001d1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d22:	b219      	sxth	r1, r3
 8001d24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d32:	4413      	add	r3, r2
 8001d34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d38:	121b      	asrs	r3, r3, #8
 8001d3a:	b21b      	sxth	r3, r3
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	84fb      	strh	r3, [r7, #38]	; 0x26
	    	FIFO_out[row_count].sensor_data.temp = lsm6dso_from_lsb_to_celsius(temp_raw);
 8001d42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f886 	bl	8001e58 <lsm6dso_from_lsb_to_celsius>
 8001d4c:	eef0 7a40 	vmov.f32	s15, s0
 8001d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d54:	ee17 3a90 	vmov	r3, s15
 8001d58:	b218      	sxth	r0, r3
 8001d5a:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001d5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	3306      	adds	r3, #6
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.x = 0;
 8001d6e:	4916      	ldr	r1, [pc, #88]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001d70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3306      	adds	r3, #6
 8001d7e:	2200      	movs	r2, #0
 8001d80:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.y = 0;
 8001d82:	4911      	ldr	r1, [pc, #68]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001d84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	3308      	adds	r3, #8
 8001d92:	2200      	movs	r2, #0
 8001d94:	801a      	strh	r2, [r3, #0]
	    	FIFO_out[row_count].sensor_data.z = 0;
 8001d96:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <pawprint_readFIFO+0x770>)
 8001d98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	330a      	adds	r3, #10
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
	    	row_count++;
 8001daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dac:	3301      	adds	r3, #1
 8001dae:	667b      	str	r3, [r7, #100]	; 0x64
	    for (int i = 0; i < ext_temp_samples; i++) {
 8001db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db2:	3301      	adds	r3, #1
 8001db4:	653b      	str	r3, [r7, #80]	; 0x50
 8001db6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001db8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	db81      	blt.n	8001cc2 <pawprint_readFIFO+0x66a>
//		                lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.z));
//		      }
//
//	}

}
 8001dbe:	bf00      	nop
 8001dc0:	3770      	adds	r7, #112	; 0x70
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000478 	.word	0x20000478

08001dcc <lsm6dso_from_fs2_to_mg>:

float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8001dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001df8 <lsm6dso_from_fs2_to_mg+0x2c>
 8001de6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001dea:	eeb0 0a67 	vmov.f32	s0, s15
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	3d79db23 	.word	0x3d79db23

08001dfc <lsm6dso_from_fs125_to_mdps>:

float_t lsm6dso_from_fs125_to_mdps(int16_t lsb)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 4.375f;
 8001e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e12:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001e28 <lsm6dso_from_fs125_to_mdps+0x2c>
 8001e16:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	408c0000 	.word	0x408c0000

08001e2c <lis2mdl_from_lsb_to_mgauss>:

float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 8001e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e42:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e46:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <lsm6dso_from_lsb_to_celsius>:

float_t lsm6dso_from_lsb_to_celsius(int16_t lsb)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001e8c <lsm6dso_from_lsb_to_celsius+0x34>
 8001e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e76:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001e7a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	43800000 	.word	0x43800000

08001e90 <st_fifo_init>:
  *
  * @retval st_fifo_status    ST_FIFO_OK / ST_FIFO_ERR
  *
  */
st_fifo_status st_fifo_init(st_fifo_conf *conf)
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  float bdr_xl, bdr_gy, bdr_vsens, bdr_max;

  if (conf->bdr_xl < 0.0f || conf->bdr_gy < 0.0f || conf->bdr_vsens < 0.0f)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	d40f      	bmi.n	8001ec8 <st_fifo_init+0x38>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	d407      	bmi.n	8001ec8 <st_fifo_init+0x38>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	d501      	bpl.n	8001ecc <st_fifo_init+0x3c>
  {
    return ST_FIFO_ERR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b3      	b.n	8002034 <st_fifo_init+0x1a4>
  }

  if (conf->device < ST_FIFO_LSM6DSV)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d803      	bhi.n	8001edc <st_fifo_init+0x4c>
  {
    fifo_ver = 0;
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <st_fifo_init+0x1ac>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e002      	b.n	8001ee2 <st_fifo_init+0x52>
  }
  else
  {
    fifo_ver = 1;
 8001edc:	4b57      	ldr	r3, [pc, #348]	; (800203c <st_fifo_init+0x1ac>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
  }

  tag_counter_old = 0;
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <st_fifo_init+0x1b0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
  bdr_xl = conf->bdr_xl;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]
  bdr_gy = conf->bdr_gy;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	617b      	str	r3, [r7, #20]
  bdr_vsens = conf->bdr_vsens;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	613b      	str	r3, [r7, #16]
  bdr_max = MAX(bdr_xl, bdr_gy);
 8001efa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001efe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	dd01      	ble.n	8001f10 <st_fifo_init+0x80>
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	e000      	b.n	8001f12 <st_fifo_init+0x82>
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	60fb      	str	r3, [r7, #12]
  bdr_max = MAX(bdr_max, bdr_vsens);
 8001f14:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f18:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	dd01      	ble.n	8001f2a <st_fifo_init+0x9a>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	e000      	b.n	8001f2c <st_fifo_init+0x9c>
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	60fb      	str	r3, [r7, #12]
  dtime_min = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_max)];
 8001f2e:	4b43      	ldr	r3, [pc, #268]	; (800203c <st_fifo_init+0x1ac>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	461c      	mov	r4, r3
 8001f34:	4b41      	ldr	r3, [pc, #260]	; (800203c <st_fifo_init+0x1ac>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4a40      	ldr	r2, [pc, #256]	; (8002044 <st_fifo_init+0x1b4>)
 8001f44:	4413      	add	r3, r2
 8001f46:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fa2e 	bl	80033ac <bdr_get_index>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4619      	mov	r1, r3
 8001f54:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <st_fifo_init+0x1b4>)
 8001f56:	4623      	mov	r3, r4
 8001f58:	019b      	lsls	r3, r3, #6
 8001f5a:	4423      	add	r3, r4
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3330      	adds	r3, #48	; 0x30
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	4a38      	ldr	r2, [pc, #224]	; (8002048 <st_fifo_init+0x1b8>)
 8001f66:	6013      	str	r3, [r2, #0]
  dtime_xl = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_xl)];
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <st_fifo_init+0x1ac>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461c      	mov	r4, r3
 8001f6e:	4b33      	ldr	r3, [pc, #204]	; (800203c <st_fifo_init+0x1ac>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	4613      	mov	r3, r2
 8001f76:	019b      	lsls	r3, r3, #6
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4a31      	ldr	r2, [pc, #196]	; (8002044 <st_fifo_init+0x1b4>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fa11 	bl	80033ac <bdr_get_index>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <st_fifo_init+0x1b4>)
 8001f90:	4623      	mov	r3, r4
 8001f92:	019b      	lsls	r3, r3, #6
 8001f94:	4423      	add	r3, r4
 8001f96:	440b      	add	r3, r1
 8001f98:	3330      	adds	r3, #48	; 0x30
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	4a2b      	ldr	r2, [pc, #172]	; (800204c <st_fifo_init+0x1bc>)
 8001fa0:	6013      	str	r3, [r2, #0]
  dtime_gy = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_gyr, bdr_gy)];
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <st_fifo_init+0x1ac>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461c      	mov	r4, r3
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <st_fifo_init+0x1ac>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4613      	mov	r3, r2
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3340      	adds	r3, #64	; 0x40
 8001fb8:	4a22      	ldr	r2, [pc, #136]	; (8002044 <st_fifo_init+0x1b4>)
 8001fba:	4413      	add	r3, r2
 8001fbc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 f9f3 	bl	80033ac <bdr_get_index>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <st_fifo_init+0x1b4>)
 8001fcc:	4623      	mov	r3, r4
 8001fce:	019b      	lsls	r3, r3, #6
 8001fd0:	4423      	add	r3, r4
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3330      	adds	r3, #48	; 0x30
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <st_fifo_init+0x1c0>)
 8001fdc:	6013      	str	r3, [r2, #0]
  dtime_xl_old = dtime_xl;
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <st_fifo_init+0x1bc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <st_fifo_init+0x1c4>)
 8001fe4:	6013      	str	r3, [r2, #0]
  dtime_gy_old = dtime_gy;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <st_fifo_init+0x1c0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <st_fifo_init+0x1c8>)
 8001fec:	6013      	str	r3, [r2, #0]
  timestamp = 0;
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <st_fifo_init+0x1cc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
  bdr_chg_xl_flag = 0;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <st_fifo_init+0x1d0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
  bdr_chg_gy_flag = 0;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <st_fifo_init+0x1d4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
  last_timestamp_xl = 0;
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <st_fifo_init+0x1d8>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
  last_timestamp_gy = 0;
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <st_fifo_init+0x1dc>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

  for (uint8_t i = 0; i < 3u; i++)
 800200c:	2300      	movs	r3, #0
 800200e:	77fb      	strb	r3, [r7, #31]
 8002010:	e00c      	b.n	800202c <st_fifo_init+0x19c>
  {
    last_data_xl[i] = 0;
 8002012:	7ffb      	ldrb	r3, [r7, #31]
 8002014:	4a16      	ldr	r2, [pc, #88]	; (8002070 <st_fifo_init+0x1e0>)
 8002016:	2100      	movs	r1, #0
 8002018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    last_data_gy[i] = 0;
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <st_fifo_init+0x1e4>)
 8002020:	2100      	movs	r1, #0
 8002022:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0; i < 3u; i++)
 8002026:	7ffb      	ldrb	r3, [r7, #31]
 8002028:	3301      	adds	r3, #1
 800202a:	77fb      	strb	r3, [r7, #31]
 800202c:	7ffb      	ldrb	r3, [r7, #31]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d9ef      	bls.n	8002012 <st_fifo_init+0x182>
  }

  return ST_FIFO_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3724      	adds	r7, #36	; 0x24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}
 800203c:	20001c78 	.word	0x20001c78
 8002040:	20001c79 	.word	0x20001c79
 8002044:	08016684 	.word	0x08016684
 8002048:	20001c84 	.word	0x20001c84
 800204c:	20001c7c 	.word	0x20001c7c
 8002050:	20001c80 	.word	0x20001c80
 8002054:	20001c88 	.word	0x20001c88
 8002058:	20001c8c 	.word	0x20001c8c
 800205c:	20001c90 	.word	0x20001c90
 8002060:	20001c9c 	.word	0x20001c9c
 8002064:	20001c9d 	.word	0x20001c9d
 8002068:	20001c94 	.word	0x20001c94
 800206c:	20001c98 	.word	0x20001c98
 8002070:	20001ca0 	.word	0x20001ca0
 8002074:	20001ca8 	.word	0x20001ca8

08002078 <st_fifo_decode>:
  * @retval st_fifo_status    ST_FIFO_OK / ST_FIFO_ERR
  *
  */
st_fifo_status st_fifo_decode(st_fifo_out_slot *fifo_out_slot,
                              st_fifo_raw_slot *fifo_raw_slot, uint16_t *out_slot_size, uint16_t stream_size)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b09b      	sub	sp, #108	; 0x6c
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	807b      	strh	r3, [r7, #2]
  uint16_t j = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

  for (uint16_t i = 0; i < stream_size; i++)
 800208c:	2300      	movs	r3, #0
 800208e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002092:	f000 bfa5 	b.w	8002fe0 <st_fifo_decode+0xf68>
  {

    uint8_t tag = (fifo_raw_slot[i].fifo_data_out[0] & TAG_SENSOR_MASK) >> TAG_SENSOR_SHIFT;
 8002096:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	08db      	lsrs	r3, r3, #3
 80020a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    uint8_t tag_counter = (fifo_raw_slot[i].fifo_data_out[0] & TAG_COUNTER_MASK) >> TAG_COUNTER_SHIFT;
 80020ac:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    if (fifo_ver == 0u && has_even_parity(fifo_raw_slot[i].fifo_data_out[0]) == 0u)
 80020c8:	4bb5      	ldr	r3, [pc, #724]	; (80023a0 <st_fifo_decode+0x328>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d110      	bne.n	80020f2 <st_fifo_decode+0x7a>
 80020d0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 f9c3 	bl	800346c <has_even_parity>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <st_fifo_decode+0x7a>
    {
      return ST_FIFO_ERR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f000 bf7e 	b.w	8002fee <st_fifo_decode+0xf76>
    }

    if (is_tag_valid(tag) == 0u)
 80020f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 f850 	bl	800319c <is_tag_valid>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <st_fifo_decode+0x90>
    {
      return ST_FIFO_ERR;
 8002102:	2301      	movs	r3, #1
 8002104:	f000 bf73 	b.w	8002fee <st_fifo_decode+0xf76>
    }

    if ((tag_counter != (tag_counter_old)) && dtime_min != 0u)
 8002108:	4ba6      	ldr	r3, [pc, #664]	; (80023a4 <st_fifo_decode+0x32c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002110:	429a      	cmp	r2, r3
 8002112:	d025      	beq.n	8002160 <st_fifo_decode+0xe8>
 8002114:	4ba4      	ldr	r3, [pc, #656]	; (80023a8 <st_fifo_decode+0x330>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d021      	beq.n	8002160 <st_fifo_decode+0xe8>
    {

      uint8_t diff_tag_counter;

      if (tag_counter < tag_counter_old)
 800211c:	4ba1      	ldr	r3, [pc, #644]	; (80023a4 <st_fifo_decode+0x32c>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002124:	429a      	cmp	r2, r3
 8002126:	d209      	bcs.n	800213c <st_fifo_decode+0xc4>
      {
        diff_tag_counter = tag_counter + 4u - tag_counter_old;
 8002128:	4b9e      	ldr	r3, [pc, #632]	; (80023a4 <st_fifo_decode+0x32c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	3304      	adds	r3, #4
 8002136:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800213a:	e006      	b.n	800214a <st_fifo_decode+0xd2>
      }
      else
      {
        diff_tag_counter = tag_counter - tag_counter_old;
 800213c:	4b99      	ldr	r3, [pc, #612]	; (80023a4 <st_fifo_decode+0x32c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      }

      timestamp += dtime_min * diff_tag_counter;
 800214a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800214e:	4a96      	ldr	r2, [pc, #600]	; (80023a8 <st_fifo_decode+0x330>)
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	fb03 f202 	mul.w	r2, r3, r2
 8002156:	4b95      	ldr	r3, [pc, #596]	; (80023ac <st_fifo_decode+0x334>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a93      	ldr	r2, [pc, #588]	; (80023ac <st_fifo_decode+0x334>)
 800215e:	6013      	str	r3, [r2, #0]
    }

    if (tag == TAG_ODRCHG)
 8002160:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002164:	2b05      	cmp	r3, #5
 8002166:	f040 80d1 	bne.w	800230c <st_fifo_decode+0x294>
    {

      uint8_t bdr_acc_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_XL_MASK) >> BDR_XL_SHIFT;
 800216a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800216e:	4613      	mov	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4413      	add	r3, r2
 8002178:	799b      	ldrb	r3, [r3, #6]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      uint8_t bdr_gyr_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_GY_MASK) >> BDR_GY_SHIFT;
 8002182:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4413      	add	r3, r2
 8002190:	799b      	ldrb	r3, [r3, #6]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      uint8_t bdr_vsens_cfg = (fifo_raw_slot[i].fifo_data_out[4] & BDR_VSENS_MASK) >> BDR_VSENS_SHIFT;
 8002198:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4413      	add	r3, r2
 80021a6:	791b      	ldrb	r3, [r3, #4]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

      float bdr_xl = device[fifo_ver].bdr_acc[bdr_acc_cfg];
 80021b0:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <st_fifo_decode+0x328>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80021ba:	497d      	ldr	r1, [pc, #500]	; (80023b0 <st_fifo_decode+0x338>)
 80021bc:	4603      	mov	r3, r0
 80021be:	019b      	lsls	r3, r3, #6
 80021c0:	4403      	add	r3, r0
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      float bdr_gy = device[fifo_ver].bdr_gyr[bdr_gyr_cfg];
 80021cc:	4b74      	ldr	r3, [pc, #464]	; (80023a0 <st_fifo_decode+0x328>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80021d6:	4976      	ldr	r1, [pc, #472]	; (80023b0 <st_fifo_decode+0x338>)
 80021d8:	4603      	mov	r3, r0
 80021da:	019b      	lsls	r3, r3, #6
 80021dc:	4403      	add	r3, r0
 80021de:	4413      	add	r3, r2
 80021e0:	3310      	adds	r3, #16
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	63bb      	str	r3, [r7, #56]	; 0x38
      float bdr_vsens = device[fifo_ver].bdr_vsens[bdr_vsens_cfg];
 80021ea:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <st_fifo_decode+0x328>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80021f4:	496e      	ldr	r1, [pc, #440]	; (80023b0 <st_fifo_decode+0x338>)
 80021f6:	4603      	mov	r3, r0
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	4403      	add	r3, r0
 80021fc:	4413      	add	r3, r2
 80021fe:	3320      	adds	r3, #32
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
      float bdr_max = MAX(bdr_xl, bdr_gy);
 8002208:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800220c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002218:	dd01      	ble.n	800221e <st_fifo_decode+0x1a6>
 800221a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221c:	e000      	b.n	8002220 <st_fifo_decode+0x1a8>
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
      bdr_max = MAX(bdr_max, bdr_vsens);
 8002222:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002226:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800222a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	dd01      	ble.n	8002238 <st_fifo_decode+0x1c0>
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	e000      	b.n	800223a <st_fifo_decode+0x1c2>
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	633b      	str	r3, [r7, #48]	; 0x30

      dtime_xl_old = dtime_xl;
 800223c:	4b5d      	ldr	r3, [pc, #372]	; (80023b4 <st_fifo_decode+0x33c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a5d      	ldr	r2, [pc, #372]	; (80023b8 <st_fifo_decode+0x340>)
 8002242:	6013      	str	r3, [r2, #0]
      dtime_gy_old = dtime_gy;
 8002244:	4b5d      	ldr	r3, [pc, #372]	; (80023bc <st_fifo_decode+0x344>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5d      	ldr	r2, [pc, #372]	; (80023c0 <st_fifo_decode+0x348>)
 800224a:	6013      	str	r3, [r2, #0]
      dtime_min = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_max)];
 800224c:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <st_fifo_decode+0x328>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461c      	mov	r4, r3
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <st_fifo_decode+0x328>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	4613      	mov	r3, r2
 800225a:	019b      	lsls	r3, r3, #6
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4a53      	ldr	r2, [pc, #332]	; (80023b0 <st_fifo_decode+0x338>)
 8002262:	4413      	add	r3, r2
 8002264:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8002268:	4618      	mov	r0, r3
 800226a:	f001 f89f 	bl	80033ac <bdr_get_index>
 800226e:	4603      	mov	r3, r0
 8002270:	4619      	mov	r1, r3
 8002272:	4a4f      	ldr	r2, [pc, #316]	; (80023b0 <st_fifo_decode+0x338>)
 8002274:	4623      	mov	r3, r4
 8002276:	019b      	lsls	r3, r3, #6
 8002278:	4423      	add	r3, r4
 800227a:	440b      	add	r3, r1
 800227c:	3330      	adds	r3, #48	; 0x30
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	4a49      	ldr	r2, [pc, #292]	; (80023a8 <st_fifo_decode+0x330>)
 8002284:	6013      	str	r3, [r2, #0]
      dtime_xl = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_xl)];
 8002286:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <st_fifo_decode+0x328>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461c      	mov	r4, r3
 800228c:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <st_fifo_decode+0x328>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4613      	mov	r3, r2
 8002294:	019b      	lsls	r3, r3, #6
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4a45      	ldr	r2, [pc, #276]	; (80023b0 <st_fifo_decode+0x338>)
 800229c:	4413      	add	r3, r2
 800229e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 f882 	bl	80033ac <bdr_get_index>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <st_fifo_decode+0x338>)
 80022ae:	4623      	mov	r3, r4
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	4423      	add	r3, r4
 80022b4:	440b      	add	r3, r1
 80022b6:	3330      	adds	r3, #48	; 0x30
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	4a3d      	ldr	r2, [pc, #244]	; (80023b4 <st_fifo_decode+0x33c>)
 80022be:	6013      	str	r3, [r2, #0]
      dtime_gy = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_gyr, bdr_gy)];
 80022c0:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <st_fifo_decode+0x328>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461c      	mov	r4, r3
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <st_fifo_decode+0x328>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	4613      	mov	r3, r2
 80022ce:	019b      	lsls	r3, r3, #6
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	3340      	adds	r3, #64	; 0x40
 80022d6:	4a36      	ldr	r2, [pc, #216]	; (80023b0 <st_fifo_decode+0x338>)
 80022d8:	4413      	add	r3, r2
 80022da:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 f864 	bl	80033ac <bdr_get_index>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4619      	mov	r1, r3
 80022e8:	4a31      	ldr	r2, [pc, #196]	; (80023b0 <st_fifo_decode+0x338>)
 80022ea:	4623      	mov	r3, r4
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	4423      	add	r3, r4
 80022f0:	440b      	add	r3, r1
 80022f2:	3330      	adds	r3, #48	; 0x30
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	4a30      	ldr	r2, [pc, #192]	; (80023bc <st_fifo_decode+0x344>)
 80022fa:	6013      	str	r3, [r2, #0]

      bdr_chg_xl_flag = 1;
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <st_fifo_decode+0x34c>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
      bdr_chg_gy_flag = 1;
 8002302:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <st_fifo_decode+0x350>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	f000 be5f 	b.w	8002fca <st_fifo_decode+0xf52>

    }
    else if (tag == TAG_TS)
 800230c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002310:	2b04      	cmp	r3, #4
 8002312:	d10d      	bne.n	8002330 <st_fifo_decode+0x2b8>
    {

      (void)memcpy(&timestamp, &fifo_raw_slot[i].fifo_data_out[1], 4);
 8002314:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	4413      	add	r3, r2
 8002322:	3301      	adds	r3, #1
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	4b20      	ldr	r3, [pc, #128]	; (80023ac <st_fifo_decode+0x334>)
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f000 be4d 	b.w	8002fca <st_fifo_decode+0xf52>

    }
    else
    {

      st_fifo_compression_type compression_type = get_compression_type(tag);
 8002330:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fffb 	bl	8003330 <get_compression_type>
 800233a:	4603      	mov	r3, r0
 800233c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
      st_fifo_sensor_type sensor_type = get_sensor_type(tag);
 8002340:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002344:	4618      	mov	r0, r3
 8002346:	f000 ff4b 	bl	80031e0 <get_sensor_type>
 800234a:	4603      	mov	r3, r0
 800234c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

      if (compression_type == ST_FIFO_COMPRESSION_NC)
 8002350:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 80a2 	bne.w	800249e <st_fifo_decode+0x426>
      {

        if (tag == TAG_EMPTY)
 800235a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8638 	beq.w	8002fd4 <st_fifo_decode+0xf5c>
        {
          continue;
        }

        if (tag == TAG_STEP_COUNTER || tag == TAG_MLC_RESULT)
 8002364:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002368:	2b12      	cmp	r3, #18
 800236a:	d003      	beq.n	8002374 <st_fifo_decode+0x2fc>
 800236c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002370:	2b1a      	cmp	r3, #26
 8002372:	d12b      	bne.n	80023cc <st_fifo_decode+0x354>
        {
          (void)memcpy(&fifo_out_slot[j].timestamp, &fifo_raw_slot[i].fifo_data_out[3],
 8002374:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	461a      	mov	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4413      	add	r3, r2
 8002386:	4619      	mov	r1, r3
 8002388:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4413      	add	r3, r2
 8002396:	3303      	adds	r3, #3
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	600b      	str	r3, [r1, #0]
 800239c:	e022      	b.n	80023e4 <st_fifo_decode+0x36c>
 800239e:	bf00      	nop
 80023a0:	20001c78 	.word	0x20001c78
 80023a4:	20001c79 	.word	0x20001c79
 80023a8:	20001c84 	.word	0x20001c84
 80023ac:	20001c90 	.word	0x20001c90
 80023b0:	08016684 	.word	0x08016684
 80023b4:	20001c7c 	.word	0x20001c7c
 80023b8:	20001c88 	.word	0x20001c88
 80023bc:	20001c80 	.word	0x20001c80
 80023c0:	20001c8c 	.word	0x20001c8c
 80023c4:	20001c9c 	.word	0x20001c9c
 80023c8:	20001c9d 	.word	0x20001c9d
                       4);
        }
        else
        {
          fifo_out_slot[j].timestamp = timestamp;
 80023cc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	461a      	mov	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4413      	add	r3, r2
 80023de:	4ab1      	ldr	r2, [pc, #708]	; (80026a4 <st_fifo_decode+0x62c>)
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	601a      	str	r2, [r3, #0]
        }

        fifo_out_slot[j].sensor_tag = sensor_type;
 80023e4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4413      	add	r3, r2
 80023f6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80023fa:	711a      	strb	r2, [r3, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 80023fc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	461a      	mov	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 8002410:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	4413      	add	r3, r2
 800241e:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8002420:	2206      	movs	r2, #6
 8002422:	4619      	mov	r1, r3
 8002424:	f010 fdbc 	bl	8012fa0 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002428:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d115      	bne.n	800245c <st_fifo_decode+0x3e4>
        {
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002430:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	461a      	mov	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4413      	add	r3, r2
 8002442:	3306      	adds	r3, #6
 8002444:	2206      	movs	r2, #6
 8002446:	4619      	mov	r1, r3
 8002448:	4897      	ldr	r0, [pc, #604]	; (80026a8 <st_fifo_decode+0x630>)
 800244a:	f010 fda9 	bl	8012fa0 <memcpy>
          last_timestamp_xl = timestamp;
 800244e:	4b95      	ldr	r3, [pc, #596]	; (80026a4 <st_fifo_decode+0x62c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a96      	ldr	r2, [pc, #600]	; (80026ac <st_fifo_decode+0x634>)
 8002454:	6013      	str	r3, [r2, #0]
          bdr_chg_xl_flag = 0;
 8002456:	4b96      	ldr	r3, [pc, #600]	; (80026b0 <st_fifo_decode+0x638>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 800245c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d115      	bne.n	8002490 <st_fifo_decode+0x418>
        {
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002464:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	461a      	mov	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	3306      	adds	r3, #6
 8002478:	2206      	movs	r2, #6
 800247a:	4619      	mov	r1, r3
 800247c:	488d      	ldr	r0, [pc, #564]	; (80026b4 <st_fifo_decode+0x63c>)
 800247e:	f010 fd8f 	bl	8012fa0 <memcpy>
          last_timestamp_gy = timestamp;
 8002482:	4b88      	ldr	r3, [pc, #544]	; (80026a4 <st_fifo_decode+0x62c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a8c      	ldr	r2, [pc, #560]	; (80026b8 <st_fifo_decode+0x640>)
 8002488:	6013      	str	r3, [r2, #0]
          bdr_chg_gy_flag = 0;
 800248a:	4b8c      	ldr	r3, [pc, #560]	; (80026bc <st_fifo_decode+0x644>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
        }

        j++;
 8002490:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002494:	3301      	adds	r3, #1
 8002496:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800249a:	f000 bd92 	b.w	8002fc2 <st_fifo_decode+0xf4a>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_1)
 800249e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	f040 8091 	bne.w	80025ca <st_fifo_decode+0x552>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 80024a8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	461a      	mov	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	189c      	adds	r4, r3, r2
 80024ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fe8e 	bl	80031e0 <get_sensor_type>
 80024c4:	4603      	mov	r3, r0
 80024c6:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 80024c8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	461a      	mov	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 80024dc:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 80024ec:	2206      	movs	r2, #6
 80024ee:	4619      	mov	r1, r3
 80024f0:	f010 fd56 	bl	8012fa0 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 80024f4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d12d      	bne.n	8002558 <st_fifo_decode+0x4e0>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 80024fc:	4b6c      	ldr	r3, [pc, #432]	; (80026b0 <st_fifo_decode+0x638>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <st_fifo_decode+0x49a>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 8002504:	4b69      	ldr	r3, [pc, #420]	; (80026ac <st_fifo_decode+0x634>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <st_fifo_decode+0x648>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4413      	add	r3, r2
 800250e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002510:	e005      	b.n	800251e <st_fifo_decode+0x4a6>
          }
          else
          {
            last_timestamp = timestamp - dtime_xl;
 8002512:	4b64      	ldr	r3, [pc, #400]	; (80026a4 <st_fifo_decode+0x62c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b6b      	ldr	r3, [pc, #428]	; (80026c4 <st_fifo_decode+0x64c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	65fb      	str	r3, [r7, #92]	; 0x5c
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 800251e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002532:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002534:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	461a      	mov	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	3306      	adds	r3, #6
 8002548:	2206      	movs	r2, #6
 800254a:	4619      	mov	r1, r3
 800254c:	4856      	ldr	r0, [pc, #344]	; (80026a8 <st_fifo_decode+0x630>)
 800254e:	f010 fd27 	bl	8012fa0 <memcpy>
          last_timestamp_xl = last_timestamp;
 8002552:	4a56      	ldr	r2, [pc, #344]	; (80026ac <st_fifo_decode+0x634>)
 8002554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002556:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002558:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d12d      	bne.n	80025bc <st_fifo_decode+0x544>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 8002560:	4b56      	ldr	r3, [pc, #344]	; (80026bc <st_fifo_decode+0x644>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d106      	bne.n	8002576 <st_fifo_decode+0x4fe>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 8002568:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <st_fifo_decode+0x640>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <st_fifo_decode+0x650>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4413      	add	r3, r2
 8002572:	65bb      	str	r3, [r7, #88]	; 0x58
 8002574:	e005      	b.n	8002582 <st_fifo_decode+0x50a>
          }
          else
          {
            last_timestamp = timestamp - dtime_gy;
 8002576:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <st_fifo_decode+0x62c>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b54      	ldr	r3, [pc, #336]	; (80026cc <st_fifo_decode+0x654>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	65bb      	str	r3, [r7, #88]	; 0x58
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8002582:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002596:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002598:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	461a      	mov	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	3306      	adds	r3, #6
 80025ac:	2206      	movs	r2, #6
 80025ae:	4619      	mov	r1, r3
 80025b0:	4840      	ldr	r0, [pc, #256]	; (80026b4 <st_fifo_decode+0x63c>)
 80025b2:	f010 fcf5 	bl	8012fa0 <memcpy>
          last_timestamp_gy = last_timestamp;
 80025b6:	4a40      	ldr	r2, [pc, #256]	; (80026b8 <st_fifo_decode+0x640>)
 80025b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ba:	6013      	str	r3, [r2, #0]
        }

        j++;
 80025bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80025c0:	3301      	adds	r3, #1
 80025c2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80025c6:	f000 bcfc 	b.w	8002fc2 <st_fifo_decode+0xf4a>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_2)
 80025ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	f040 80b2 	bne.w	8002738 <st_fifo_decode+0x6c0>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 80025d4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	461a      	mov	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	189c      	adds	r4, r3, r2
 80025e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fdf8 	bl	80031e0 <get_sensor_type>
 80025f0:	4603      	mov	r3, r0
 80025f2:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 80025f4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	461a      	mov	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4413      	add	r3, r2
 8002606:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 8002608:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	4413      	add	r3, r2
 8002616:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8002618:	2206      	movs	r2, #6
 800261a:	4619      	mov	r1, r3
 800261c:	f010 fcc0 	bl	8012fa0 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002620:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d12e      	bne.n	8002686 <st_fifo_decode+0x60e>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <st_fifo_decode+0x638>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d106      	bne.n	800263e <st_fifo_decode+0x5c6>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <st_fifo_decode+0x634>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <st_fifo_decode+0x648>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4413      	add	r3, r2
 800263a:	657b      	str	r3, [r7, #84]	; 0x54
 800263c:	e006      	b.n	800264c <st_fifo_decode+0x5d4>
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_xl;
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <st_fifo_decode+0x62c>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <st_fifo_decode+0x64c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	657b      	str	r3, [r7, #84]	; 0x54
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 800264c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002660:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002662:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	3306      	adds	r3, #6
 8002676:	2206      	movs	r2, #6
 8002678:	4619      	mov	r1, r3
 800267a:	480b      	ldr	r0, [pc, #44]	; (80026a8 <st_fifo_decode+0x630>)
 800267c:	f010 fc90 	bl	8012fa0 <memcpy>
          last_timestamp_xl = last_timestamp;
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <st_fifo_decode+0x634>)
 8002682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002684:	6013      	str	r3, [r2, #0]
        }
        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002686:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d144      	bne.n	8002718 <st_fifo_decode+0x6a0>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <st_fifo_decode+0x644>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d11c      	bne.n	80026d0 <st_fifo_decode+0x658>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <st_fifo_decode+0x640>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <st_fifo_decode+0x650>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4413      	add	r3, r2
 80026a0:	653b      	str	r3, [r7, #80]	; 0x50
 80026a2:	e01c      	b.n	80026de <st_fifo_decode+0x666>
 80026a4:	20001c90 	.word	0x20001c90
 80026a8:	20001ca0 	.word	0x20001ca0
 80026ac:	20001c94 	.word	0x20001c94
 80026b0:	20001c9c 	.word	0x20001c9c
 80026b4:	20001ca8 	.word	0x20001ca8
 80026b8:	20001c98 	.word	0x20001c98
 80026bc:	20001c9d 	.word	0x20001c9d
 80026c0:	20001c88 	.word	0x20001c88
 80026c4:	20001c7c 	.word	0x20001c7c
 80026c8:	20001c8c 	.word	0x20001c8c
 80026cc:	20001c80 	.word	0x20001c80
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_gy;
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <st_fifo_decode+0x6b0>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <st_fifo_decode+0x6b4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	653b      	str	r3, [r7, #80]	; 0x50
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 80026de:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026f2:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 80026f4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	461a      	mov	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4413      	add	r3, r2
 8002706:	3306      	adds	r3, #6
 8002708:	2206      	movs	r2, #6
 800270a:	4619      	mov	r1, r3
 800270c:	4808      	ldr	r0, [pc, #32]	; (8002730 <st_fifo_decode+0x6b8>)
 800270e:	f010 fc47 	bl	8012fa0 <memcpy>
          last_timestamp_gy = last_timestamp;
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <st_fifo_decode+0x6bc>)
 8002714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002716:	6013      	str	r3, [r2, #0]
        }

        j++;
 8002718:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800271c:	3301      	adds	r3, #1
 800271e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002722:	f000 bc4e 	b.w	8002fc2 <st_fifo_decode+0xf4a>
 8002726:	bf00      	nop
 8002728:	20001c90 	.word	0x20001c90
 800272c:	20001c80 	.word	0x20001c80
 8002730:	20001ca8 	.word	0x20001ca8
 8002734:	20001c98 	.word	0x20001c98

      }
      else if (compression_type == ST_FIFO_COMPRESSION_2X)
 8002738:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800273c:	2b03      	cmp	r3, #3
 800273e:	f040 81c7 	bne.w	8002ad0 <st_fifo_decode+0xa58>
      {

        int16_t diff[6];
        get_diff_2x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 8002742:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	4413      	add	r3, r2
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f000 feb2 	bl	80034c2 <get_diff_2x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 800275e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002774:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002776:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800277a:	2b01      	cmp	r3, #1
 800277c:	d15a      	bne.n	8002834 <st_fifo_decode+0x7bc>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 800277e:	4bbf      	ldr	r3, [pc, #764]	; (8002a7c <st_fifo_decode+0xa04>)
 8002780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002784:	b29a      	uxth	r2, r3
 8002786:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800278a:	b29b      	uxth	r3, r3
 800278c:	4413      	add	r3, r2
 800278e:	b299      	uxth	r1, r3
 8002790:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	461a      	mov	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	b20a      	sxth	r2, r1
 80027a4:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 80027a6:	4bb5      	ldr	r3, [pc, #724]	; (8002a7c <st_fifo_decode+0xa04>)
 80027a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	b299      	uxth	r1, r3
 80027b8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	461a      	mov	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4413      	add	r3, r2
 80027ca:	b20a      	sxth	r2, r1
 80027cc:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 80027ce:	4bab      	ldr	r3, [pc, #684]	; (8002a7c <st_fifo_decode+0xa04>)
 80027d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4413      	add	r3, r2
 80027de:	b299      	uxth	r1, r3
 80027e0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	461a      	mov	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4413      	add	r3, r2
 80027f2:	b20a      	sxth	r2, r1
 80027f4:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 80027f6:	4ba2      	ldr	r3, [pc, #648]	; (8002a80 <st_fifo_decode+0xa08>)
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	4ba2      	ldr	r3, [pc, #648]	; (8002a84 <st_fifo_decode+0xa0c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0059      	lsls	r1, r3, #1
 8002800:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	461a      	mov	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4413      	add	r3, r2
 8002812:	1a42      	subs	r2, r0, r1
 8002814:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002816:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	3306      	adds	r3, #6
 800282a:	2206      	movs	r2, #6
 800282c:	4619      	mov	r1, r3
 800282e:	4893      	ldr	r0, [pc, #588]	; (8002a7c <st_fifo_decode+0xa04>)
 8002830:	f010 fbb6 	bl	8012fa0 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002834:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d15a      	bne.n	80028f2 <st_fifo_decode+0x87a>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 800283c:	4b92      	ldr	r3, [pc, #584]	; (8002a88 <st_fifo_decode+0xa10>)
 800283e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002842:	b29a      	uxth	r2, r3
 8002844:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002848:	b29b      	uxth	r3, r3
 800284a:	4413      	add	r3, r2
 800284c:	b299      	uxth	r1, r3
 800284e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	b20a      	sxth	r2, r1
 8002862:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 8002864:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <st_fifo_decode+0xa10>)
 8002866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800286a:	b29a      	uxth	r2, r3
 800286c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	4413      	add	r3, r2
 8002874:	b299      	uxth	r1, r3
 8002876:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	b20a      	sxth	r2, r1
 800288a:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 800288c:	4b7e      	ldr	r3, [pc, #504]	; (8002a88 <st_fifo_decode+0xa10>)
 800288e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002892:	b29a      	uxth	r2, r3
 8002894:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002898:	b29b      	uxth	r3, r3
 800289a:	4413      	add	r3, r2
 800289c:	b299      	uxth	r1, r3
 800289e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	b20a      	sxth	r2, r1
 80028b2:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 80028b4:	4b72      	ldr	r3, [pc, #456]	; (8002a80 <st_fifo_decode+0xa08>)
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	4b74      	ldr	r3, [pc, #464]	; (8002a8c <st_fifo_decode+0xa14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0059      	lsls	r1, r3, #1
 80028be:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	1a42      	subs	r2, r0, r1
 80028d2:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 80028d4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4413      	add	r3, r2
 80028e6:	3306      	adds	r3, #6
 80028e8:	2206      	movs	r2, #6
 80028ea:	4619      	mov	r1, r3
 80028ec:	4866      	ldr	r0, [pc, #408]	; (8002a88 <st_fifo_decode+0xa10>)
 80028ee:	f010 fb57 	bl	8012fa0 <memcpy>
        }

        j++;
 80028f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80028f6:	3301      	adds	r3, #1
 80028f8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 80028fc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	461a      	mov	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4413      	add	r3, r2
 800290e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002912:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002914:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d15e      	bne.n	80029da <st_fifo_decode+0x962>
        {
          uint32_t last_timestamp = timestamp - dtime_xl;
 800291c:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <st_fifo_decode+0xa08>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b58      	ldr	r3, [pc, #352]	; (8002a84 <st_fifo_decode+0xa0c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	64bb      	str	r3, [r7, #72]	; 0x48
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 8002928:	4b54      	ldr	r3, [pc, #336]	; (8002a7c <st_fifo_decode+0xa04>)
 800292a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292e:	b29a      	uxth	r2, r3
 8002930:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	4413      	add	r3, r2
 8002938:	b299      	uxth	r1, r3
 800293a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	461a      	mov	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	b20a      	sxth	r2, r1
 800294e:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 8002950:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <st_fifo_decode+0xa04>)
 8002952:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002956:	b29a      	uxth	r2, r3
 8002958:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800295c:	b29b      	uxth	r3, r3
 800295e:	4413      	add	r3, r2
 8002960:	b299      	uxth	r1, r3
 8002962:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	b20a      	sxth	r2, r1
 8002976:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 8002978:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <st_fifo_decode+0xa04>)
 800297a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800297e:	b29a      	uxth	r2, r3
 8002980:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002984:	b29b      	uxth	r3, r3
 8002986:	4413      	add	r3, r2
 8002988:	b299      	uxth	r1, r3
 800298a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	b20a      	sxth	r2, r1
 800299e:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 80029a0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	461a      	mov	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4413      	add	r3, r2
 80029b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029b4:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80029b6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	3306      	adds	r3, #6
 80029ca:	2206      	movs	r2, #6
 80029cc:	4619      	mov	r1, r3
 80029ce:	482b      	ldr	r0, [pc, #172]	; (8002a7c <st_fifo_decode+0xa04>)
 80029d0:	f010 fae6 	bl	8012fa0 <memcpy>
          last_timestamp_xl = last_timestamp;
 80029d4:	4a2e      	ldr	r2, [pc, #184]	; (8002a90 <st_fifo_decode+0xa18>)
 80029d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029d8:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 80029da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d16c      	bne.n	8002abc <st_fifo_decode+0xa44>
        {
          uint32_t last_timestamp = timestamp - dtime_gy;
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <st_fifo_decode+0xa08>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <st_fifo_decode+0xa14>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <st_fifo_decode+0xa10>)
 80029f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	b299      	uxth	r1, r3
 8002a00:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	b20a      	sxth	r2, r1
 8002a14:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <st_fifo_decode+0xa10>)
 8002a18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	b299      	uxth	r1, r3
 8002a28:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	461a      	mov	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b20a      	sxth	r2, r1
 8002a3c:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <st_fifo_decode+0xa10>)
 8002a40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b299      	uxth	r1, r3
 8002a50:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	b20a      	sxth	r2, r1
 8002a64:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 8002a66:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	e00c      	b.n	8002a94 <st_fifo_decode+0xa1c>
 8002a7a:	bf00      	nop
 8002a7c:	20001ca0 	.word	0x20001ca0
 8002a80:	20001c90 	.word	0x20001c90
 8002a84:	20001c7c 	.word	0x20001c7c
 8002a88:	20001ca8 	.word	0x20001ca8
 8002a8c:	20001c80 	.word	0x20001c80
 8002a90:	20001c94 	.word	0x20001c94
 8002a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a96:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002a98:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3306      	adds	r3, #6
 8002aac:	2206      	movs	r2, #6
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <st_fifo_decode+0xa50>)
 8002ab2:	f010 fa75 	bl	8012fa0 <memcpy>
          last_timestamp_gy = last_timestamp;
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <st_fifo_decode+0xa54>)
 8002ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aba:	6013      	str	r3, [r2, #0]
        }

        j++;
 8002abc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002ac6:	e27c      	b.n	8002fc2 <st_fifo_decode+0xf4a>
 8002ac8:	20001ca8 	.word	0x20001ca8
 8002acc:	20001c98 	.word	0x20001c98

      }
      else /* compression_type == ST_FIFO_COMPRESSION_3X */
      {
        int16_t diff[9];
        get_diff_3x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 8002ad0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	4413      	add	r3, r2
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	f107 0310 	add.w	r3, r7, #16
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fd1b 	bl	8003522 <get_diff_3x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002aec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	461a      	mov	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4413      	add	r3, r2
 8002afe:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002b02:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002b04:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d15a      	bne.n	8002bc2 <st_fifo_decode+0xb4a>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 8002b0c:	4bc1      	ldr	r3, [pc, #772]	; (8002e14 <st_fifo_decode+0xd9c>)
 8002b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b299      	uxth	r1, r3
 8002b1e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	b20a      	sxth	r2, r1
 8002b32:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 8002b34:	4bb7      	ldr	r3, [pc, #732]	; (8002e14 <st_fifo_decode+0xd9c>)
 8002b36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	b299      	uxth	r1, r3
 8002b46:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	b20a      	sxth	r2, r1
 8002b5a:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 8002b5c:	4bad      	ldr	r3, [pc, #692]	; (8002e14 <st_fifo_decode+0xd9c>)
 8002b5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b299      	uxth	r1, r3
 8002b6e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b20a      	sxth	r2, r1
 8002b82:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 8002b84:	4ba4      	ldr	r3, [pc, #656]	; (8002e18 <st_fifo_decode+0xda0>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	4ba4      	ldr	r3, [pc, #656]	; (8002e1c <st_fifo_decode+0xda4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0059      	lsls	r1, r3, #1
 8002b8e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	1a42      	subs	r2, r0, r1
 8002ba2:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002ba4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3306      	adds	r3, #6
 8002bb8:	2206      	movs	r2, #6
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4895      	ldr	r0, [pc, #596]	; (8002e14 <st_fifo_decode+0xd9c>)
 8002bbe:	f010 f9ef 	bl	8012fa0 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002bc2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d15a      	bne.n	8002c80 <st_fifo_decode+0xc08>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 8002bca:	4b95      	ldr	r3, [pc, #596]	; (8002e20 <st_fifo_decode+0xda8>)
 8002bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	b299      	uxth	r1, r3
 8002bdc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	461a      	mov	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	b20a      	sxth	r2, r1
 8002bf0:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	; (8002e20 <st_fifo_decode+0xda8>)
 8002bf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	b299      	uxth	r1, r3
 8002c04:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4413      	add	r3, r2
 8002c16:	b20a      	sxth	r2, r1
 8002c18:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 8002c1a:	4b81      	ldr	r3, [pc, #516]	; (8002e20 <st_fifo_decode+0xda8>)
 8002c1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b20a      	sxth	r2, r1
 8002c40:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 8002c42:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <st_fifo_decode+0xda0>)
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	4b77      	ldr	r3, [pc, #476]	; (8002e24 <st_fifo_decode+0xdac>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	0059      	lsls	r1, r3, #1
 8002c4c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	1a42      	subs	r2, r0, r1
 8002c60:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002c62:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	3306      	adds	r3, #6
 8002c76:	2206      	movs	r2, #6
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4869      	ldr	r0, [pc, #420]	; (8002e20 <st_fifo_decode+0xda8>)
 8002c7c:	f010 f990 	bl	8012fa0 <memcpy>
        }

        j++;
 8002c80:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002c84:	3301      	adds	r3, #1
 8002c86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002c8a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002ca0:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002ca2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d159      	bne.n	8002d5e <st_fifo_decode+0xce6>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 8002caa:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <st_fifo_decode+0xd9c>)
 8002cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	b299      	uxth	r1, r3
 8002cbc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	b20a      	sxth	r2, r1
 8002cd0:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 8002cd2:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <st_fifo_decode+0xd9c>)
 8002cd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	b299      	uxth	r1, r3
 8002ce4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	b20a      	sxth	r2, r1
 8002cf8:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 8002cfa:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <st_fifo_decode+0xd9c>)
 8002cfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	b299      	uxth	r1, r3
 8002d0c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	b20a      	sxth	r2, r1
 8002d20:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_xl;
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <st_fifo_decode+0xda0>)
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <st_fifo_decode+0xda4>)
 8002d28:	6819      	ldr	r1, [r3, #0]
 8002d2a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	1a42      	subs	r2, r0, r1
 8002d3e:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002d40:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4413      	add	r3, r2
 8002d52:	3306      	adds	r3, #6
 8002d54:	2206      	movs	r2, #6
 8002d56:	4619      	mov	r1, r3
 8002d58:	482e      	ldr	r0, [pc, #184]	; (8002e14 <st_fifo_decode+0xd9c>)
 8002d5a:	f010 f921 	bl	8012fa0 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002d5e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d165      	bne.n	8002e32 <st_fifo_decode+0xdba>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 8002d66:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <st_fifo_decode+0xda8>)
 8002d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	b299      	uxth	r1, r3
 8002d78:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	461a      	mov	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4413      	add	r3, r2
 8002d8a:	b20a      	sxth	r2, r1
 8002d8c:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 8002d8e:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <st_fifo_decode+0xda8>)
 8002d90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	b299      	uxth	r1, r3
 8002da0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	461a      	mov	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	b20a      	sxth	r2, r1
 8002db4:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <st_fifo_decode+0xda8>)
 8002db8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	b299      	uxth	r1, r3
 8002dc8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002dcc:	4613      	mov	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b20a      	sxth	r2, r1
 8002ddc:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_gy;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <st_fifo_decode+0xda0>)
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <st_fifo_decode+0xdac>)
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	1a42      	subs	r2, r0, r1
 8002dfa:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002dfc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3306      	adds	r3, #6
 8002e10:	e00a      	b.n	8002e28 <st_fifo_decode+0xdb0>
 8002e12:	bf00      	nop
 8002e14:	20001ca0 	.word	0x20001ca0
 8002e18:	20001c90 	.word	0x20001c90
 8002e1c:	20001c7c 	.word	0x20001c7c
 8002e20:	20001ca8 	.word	0x20001ca8
 8002e24:	20001c80 	.word	0x20001c80
 8002e28:	2206      	movs	r2, #6
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4872      	ldr	r0, [pc, #456]	; (8002ff8 <st_fifo_decode+0xf80>)
 8002e2e:	f010 f8b7 	bl	8012fa0 <memcpy>
        }

        j++;
 8002e32:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e36:	3301      	adds	r3, #1
 8002e38:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].timestamp = timestamp;
 8002e3c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a6b      	ldr	r2, [pc, #428]	; (8002ffc <st_fifo_decode+0xf84>)
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	601a      	str	r2, [r3, #0]
        fifo_out_slot[j].sensor_tag = sensor_type;
 8002e54:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	461a      	mov	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002e6a:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002e6c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d14e      	bne.n	8002f12 <st_fifo_decode+0xe9a>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[6];
 8002e74:	4b62      	ldr	r3, [pc, #392]	; (8003000 <st_fifo_decode+0xf88>)
 8002e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	b299      	uxth	r1, r3
 8002e86:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	461a      	mov	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	b20a      	sxth	r2, r1
 8002e9a:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[7];
 8002e9c:	4b58      	ldr	r3, [pc, #352]	; (8003000 <st_fifo_decode+0xf88>)
 8002e9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	b299      	uxth	r1, r3
 8002eae:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	b20a      	sxth	r2, r1
 8002ec2:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[8];
 8002ec4:	4b4e      	ldr	r3, [pc, #312]	; (8003000 <st_fifo_decode+0xf88>)
 8002ec6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	b299      	uxth	r1, r3
 8002ed6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	b20a      	sxth	r2, r1
 8002eea:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002eec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	3306      	adds	r3, #6
 8002f00:	2206      	movs	r2, #6
 8002f02:	4619      	mov	r1, r3
 8002f04:	483e      	ldr	r0, [pc, #248]	; (8003000 <st_fifo_decode+0xf88>)
 8002f06:	f010 f84b 	bl	8012fa0 <memcpy>
          last_timestamp_xl = timestamp;
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <st_fifo_decode+0xf84>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a3d      	ldr	r2, [pc, #244]	; (8003004 <st_fifo_decode+0xf8c>)
 8002f10:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002f12:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d14e      	bne.n	8002fb8 <st_fifo_decode+0xf40>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[6];
 8002f1a:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <st_fifo_decode+0xf80>)
 8002f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	b299      	uxth	r1, r3
 8002f2c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b20a      	sxth	r2, r1
 8002f40:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[7];
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <st_fifo_decode+0xf80>)
 8002f44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	b299      	uxth	r1, r3
 8002f54:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	461a      	mov	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	b20a      	sxth	r2, r1
 8002f68:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[8];
 8002f6a:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <st_fifo_decode+0xf80>)
 8002f6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	b299      	uxth	r1, r3
 8002f7c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	b20a      	sxth	r2, r1
 8002f90:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002f92:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3306      	adds	r3, #6
 8002fa6:	2206      	movs	r2, #6
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4813      	ldr	r0, [pc, #76]	; (8002ff8 <st_fifo_decode+0xf80>)
 8002fac:	f00f fff8 	bl	8012fa0 <memcpy>
          last_timestamp_gy = timestamp;
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <st_fifo_decode+0xf84>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a14      	ldr	r2, [pc, #80]	; (8003008 <st_fifo_decode+0xf90>)
 8002fb6:	6013      	str	r3, [r2, #0]
        }

        j++;
 8002fb8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      }

      *out_slot_size = j;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002fc8:	801a      	strh	r2, [r3, #0]
    }

    tag_counter_old = tag_counter;
 8002fca:	4a10      	ldr	r2, [pc, #64]	; (800300c <st_fifo_decode+0xf94>)
 8002fcc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002fd0:	7013      	strb	r3, [r2, #0]
 8002fd2:	e000      	b.n	8002fd6 <st_fifo_decode+0xf5e>
          continue;
 8002fd4:	bf00      	nop
  for (uint16_t i = 0; i < stream_size; i++)
 8002fd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002fe0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	f4ff a855 	bcc.w	8002096 <st_fifo_decode+0x1e>
  }

  return ST_FIFO_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	376c      	adds	r7, #108	; 0x6c
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20001ca8 	.word	0x20001ca8
 8002ffc:	20001c90 	.word	0x20001c90
 8003000:	20001ca0 	.word	0x20001ca0
 8003004:	20001c94 	.word	0x20001c94
 8003008:	20001c98 	.word	0x20001c98
 800300c:	20001c79 	.word	0x20001c79

08003010 <st_fifo_sort>:
  * @param  fifo_out_slot     decoded output stream to sort.(ptr)
  * @param  out_slot_size     decoded stream size.
  *
  */
void st_fifo_sort(st_fifo_out_slot *fifo_out_slot, uint16_t out_slot_size)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
  int32_t i;
  int32_t j;
  st_fifo_out_slot temp;

  for (i = 1; i < (int32_t)out_slot_size; i++)
 800301c:	2301      	movs	r3, #1
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	e04a      	b.n	80030b8 <st_fifo_sort+0xa8>
  {
    (void)memcpy(&temp, &fifo_out_slot[i], sizeof(st_fifo_out_slot));
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	1899      	adds	r1, r3, r2
 8003032:	f107 030c 	add.w	r3, r7, #12
 8003036:	220c      	movs	r2, #12
 8003038:	4618      	mov	r0, r3
 800303a:	f00f ffb1 	bl	8012fa0 <memcpy>

    j = i - 1;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b01      	subs	r3, #1
 8003042:	61bb      	str	r3, [r7, #24]

    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 8003044:	e017      	b.n	8003076 <st_fifo_sort+0x66>
    {
      (void)memcpy(&fifo_out_slot[j + 1], &fifo_out_slot[j],
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	461a      	mov	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1898      	adds	r0, r3, r2
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4413      	add	r3, r2
 8003068:	220c      	movs	r2, #12
 800306a:	4619      	mov	r1, r3
 800306c:	f00f ff98 	bl	8012fa0 <memcpy>
                   sizeof(st_fifo_out_slot));
      j--;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	3b01      	subs	r3, #1
 8003074:	61bb      	str	r3, [r7, #24]
    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db0b      	blt.n	8003094 <st_fifo_sort+0x84>
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	429a      	cmp	r2, r3
 8003092:	d8d8      	bhi.n	8003046 <st_fifo_sort+0x36>
    }

    (void)memcpy(&fifo_out_slot[j + 1], &temp, sizeof(st_fifo_out_slot));
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	f107 010c 	add.w	r1, r7, #12
 80030aa:	220c      	movs	r2, #12
 80030ac:	4618      	mov	r0, r3
 80030ae:	f00f ff77 	bl	8012fa0 <memcpy>
  for (i = 1; i < (int32_t)out_slot_size; i++)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3301      	adds	r3, #1
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	429a      	cmp	r2, r3
 80030be:	dbb0      	blt.n	8003022 <st_fifo_sort+0x12>
  }

  return;
 80030c0:	bf00      	nop
}
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <st_fifo_get_sensor_occurrence>:
  *                           decoded FIFO stream.
  *
  */
uint16_t st_fifo_get_sensor_occurrence(st_fifo_out_slot *fifo_out_slot,
                                       uint16_t out_slot_size, st_fifo_sensor_type sensor_type)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  uint16_t occurrence = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	81fb      	strh	r3, [r7, #14]

  for (uint16_t i = 0; i < out_slot_size; i++)
 80030dc:	2300      	movs	r3, #0
 80030de:	81bb      	strh	r3, [r7, #12]
 80030e0:	e011      	b.n	8003106 <st_fifo_get_sensor_occurrence+0x3e>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 80030e2:	89ba      	ldrh	r2, [r7, #12]
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	461a      	mov	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	791b      	ldrb	r3, [r3, #4]
 80030f4:	787a      	ldrb	r2, [r7, #1]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d102      	bne.n	8003100 <st_fifo_get_sensor_occurrence+0x38>
    {
      occurrence++;
 80030fa:	89fb      	ldrh	r3, [r7, #14]
 80030fc:	3301      	adds	r3, #1
 80030fe:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < out_slot_size; i++)
 8003100:	89bb      	ldrh	r3, [r7, #12]
 8003102:	3301      	adds	r3, #1
 8003104:	81bb      	strh	r3, [r7, #12]
 8003106:	89ba      	ldrh	r2, [r7, #12]
 8003108:	887b      	ldrh	r3, [r7, #2]
 800310a:	429a      	cmp	r2, r3
 800310c:	d3e9      	bcc.n	80030e2 <st_fifo_get_sensor_occurrence+0x1a>
    }
  }

  return occurrence;
 800310e:	89fb      	ldrh	r3, [r7, #14]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <st_fifo_extract_sensor>:
  *
  */
void st_fifo_extract_sensor(st_fifo_out_slot *sensor_out_slot,
                            st_fifo_out_slot *fifo_out_slot, uint16_t  out_slot_size,
                            st_fifo_sensor_type sensor_type)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	460b      	mov	r3, r1
 800312c:	80fb      	strh	r3, [r7, #6]
 800312e:	4613      	mov	r3, r2
 8003130:	717b      	strb	r3, [r7, #5]
  uint16_t temp_i = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	82fb      	strh	r3, [r7, #22]

  for (uint16_t i = 0; i < out_slot_size; i++)
 8003136:	2300      	movs	r3, #0
 8003138:	82bb      	strh	r3, [r7, #20]
 800313a:	e025      	b.n	8003188 <st_fifo_extract_sensor+0x6c>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 800313c:	8aba      	ldrh	r2, [r7, #20]
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4413      	add	r3, r2
 800314c:	791b      	ldrb	r3, [r3, #4]
 800314e:	797a      	ldrb	r2, [r7, #5]
 8003150:	429a      	cmp	r2, r3
 8003152:	d116      	bne.n	8003182 <st_fifo_extract_sensor+0x66>
    {
      (void)memcpy(&sensor_out_slot[temp_i], &fifo_out_slot[i],
 8003154:	8afa      	ldrh	r2, [r7, #22]
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1898      	adds	r0, r3, r2
 8003164:	8aba      	ldrh	r2, [r7, #20]
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4413      	add	r3, r2
 8003174:	220c      	movs	r2, #12
 8003176:	4619      	mov	r1, r3
 8003178:	f00f ff12 	bl	8012fa0 <memcpy>
                   sizeof(st_fifo_out_slot));
      temp_i++;
 800317c:	8afb      	ldrh	r3, [r7, #22]
 800317e:	3301      	adds	r3, #1
 8003180:	82fb      	strh	r3, [r7, #22]
  for (uint16_t i = 0; i < out_slot_size; i++)
 8003182:	8abb      	ldrh	r3, [r7, #20]
 8003184:	3301      	adds	r3, #1
 8003186:	82bb      	strh	r3, [r7, #20]
 8003188:	8aba      	ldrh	r2, [r7, #20]
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	429a      	cmp	r2, r3
 800318e:	d3d5      	bcc.n	800313c <st_fifo_extract_sensor+0x20>
    }
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <is_tag_valid>:
  *
  * @retval uint8_t           valid (1) or invalid (0) tag.
  *
  */
static uint8_t is_tag_valid(uint8_t tag)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  if (tag > device[fifo_ver].tag_valid_limit)
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <is_tag_valid+0x3c>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	4619      	mov	r1, r3
 80031ac:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <is_tag_valid+0x40>)
 80031ae:	460b      	mov	r3, r1
 80031b0:	019b      	lsls	r3, r3, #6
 80031b2:	440b      	add	r3, r1
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	79fa      	ldrb	r2, [r7, #7]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d901      	bls.n	80031c8 <is_tag_valid+0x2c>
  {
    return 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <is_tag_valid+0x2e>
  }
  else
  {
    return 1;
 80031c8:	2301      	movs	r3, #1
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20001c78 	.word	0x20001c78
 80031dc:	08016684 	.word	0x08016684

080031e0 <get_sensor_type>:
  *
  * @retval st_fifo_sensor_type    sensor type.
  *
  */
static st_fifo_sensor_type get_sensor_type(uint8_t tag)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
  st_fifo_sensor_type type;

  switch (tag)
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	2b1d      	cmp	r3, #29
 80031f0:	f200 8094 	bhi.w	800331c <get_sensor_type+0x13c>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <get_sensor_type+0x1c>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003275 	.word	0x08003275
 8003200:	0800327b 	.word	0x0800327b
 8003204:	08003281 	.word	0x08003281
 8003208:	0800331d 	.word	0x0800331d
 800320c:	0800331d 	.word	0x0800331d
 8003210:	080032a5 	.word	0x080032a5
 8003214:	080032ab 	.word	0x080032ab
 8003218:	080032b1 	.word	0x080032b1
 800321c:	080032b7 	.word	0x080032b7
 8003220:	080032bd 	.word	0x080032bd
 8003224:	080032c3 	.word	0x080032c3
 8003228:	080032c9 	.word	0x080032c9
 800322c:	080032cf 	.word	0x080032cf
 8003230:	08003287 	.word	0x08003287
 8003234:	0800328d 	.word	0x0800328d
 8003238:	08003293 	.word	0x08003293
 800323c:	08003299 	.word	0x08003299
 8003240:	0800329f 	.word	0x0800329f
 8003244:	080032d5 	.word	0x080032d5
 8003248:	080032db 	.word	0x080032db
 800324c:	080032e1 	.word	0x080032e1
 8003250:	080032e7 	.word	0x080032e7
 8003254:	080032ed 	.word	0x080032ed
 8003258:	080032f3 	.word	0x080032f3
 800325c:	080032f9 	.word	0x080032f9
 8003260:	080032ff 	.word	0x080032ff
 8003264:	08003305 	.word	0x08003305
 8003268:	0800330b 	.word	0x0800330b
 800326c:	08003311 	.word	0x08003311
 8003270:	08003317 	.word	0x08003317
  {
    case TAG_GY:
      type = ST_FIFO_GYROSCOPE;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e053      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_XL:
      type = ST_FIFO_ACCELEROMETER;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
      break;
 800327e:	e050      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_TEMP:
      type = ST_FIFO_TEMPERATURE;
 8003280:	2302      	movs	r3, #2
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e04d      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_EXT_SENS_0:
      type = ST_FIFO_EXT_SENSOR0;
 8003286:	2303      	movs	r3, #3
 8003288:	73fb      	strb	r3, [r7, #15]
      break;
 800328a:	e04a      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_EXT_SENS_1:
      type = ST_FIFO_EXT_SENSOR1;
 800328c:	2304      	movs	r3, #4
 800328e:	73fb      	strb	r3, [r7, #15]
      break;
 8003290:	e047      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_EXT_SENS_2:
      type = ST_FIFO_EXT_SENSOR2;
 8003292:	2305      	movs	r3, #5
 8003294:	73fb      	strb	r3, [r7, #15]
      break;
 8003296:	e044      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_EXT_SENS_3:
      type = ST_FIFO_EXT_SENSOR3;
 8003298:	2306      	movs	r3, #6
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e041      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_STEP_COUNTER:
      type = ST_FIFO_STEP_COUNTER;
 800329e:	2307      	movs	r3, #7
 80032a0:	73fb      	strb	r3, [r7, #15]
      break;
 80032a2:	e03e      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_ACCELEROMETER;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e03b      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_ACCELEROMETER;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
      break;
 80032ae:	e038      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_ACCELEROMETER;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      break;
 80032b4:	e035      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_ACCELEROMETER;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ba:	e032      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_GYROSCOPE;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
      break;
 80032c0:	e02f      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_GYROSCOPE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
      break;
 80032c6:	e02c      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_GYROSCOPE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
      break;
 80032cc:	e029      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_GYROSCOPE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
      break;
 80032d2:	e026      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_GAME_RV:
      type = ST_FIFO_6X_GAME_RV;
 80032d4:	2308      	movs	r3, #8
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e023      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_GEOM_RV:
      type = ST_FIFO_6X_GEOM_RV;
 80032da:	2309      	movs	r3, #9
 80032dc:	73fb      	strb	r3, [r7, #15]
      break;
 80032de:	e020      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_NORM_RV:
      type = ST_FIFO_9X_RV;
 80032e0:	230a      	movs	r3, #10
 80032e2:	73fb      	strb	r3, [r7, #15]
      break;
 80032e4:	e01d      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_GYRO_BIAS:
      type = ST_FIFO_GYRO_BIAS;
 80032e6:	230b      	movs	r3, #11
 80032e8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ea:	e01a      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_GRAVITIY:
      type = ST_FIFO_GRAVITY;
 80032ec:	230c      	movs	r3, #12
 80032ee:	73fb      	strb	r3, [r7, #15]
      break;
 80032f0:	e017      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_MAG_CAL:
      type = ST_FIFO_MAGNETOMETER_CALIB;
 80032f2:	230d      	movs	r3, #13
 80032f4:	73fb      	strb	r3, [r7, #15]
      break;
 80032f6:	e014      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_EXT_SENS_NACK:
      type = ST_FIFO_EXT_SENSOR_NACK;
 80032f8:	230e      	movs	r3, #14
 80032fa:	73fb      	strb	r3, [r7, #15]
      break;
 80032fc:	e011      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_MLC_RESULT:
      type = ST_FIFO_MLC_RESULT;
 80032fe:	230f      	movs	r3, #15
 8003300:	73fb      	strb	r3, [r7, #15]
      break;
 8003302:	e00e      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_MLC_FILTER:
      type = ST_FIFO_MLC_FILTER;
 8003304:	2310      	movs	r3, #16
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	e00b      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_MLC_FEATURE:
      type = ST_FIFO_MLC_FEATURE;
 800330a:	2311      	movs	r3, #17
 800330c:	73fb      	strb	r3, [r7, #15]
      break;
 800330e:	e008      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_DUALC_XL:
      type = ST_FIFO_DUALC_ACCELEROMETER;
 8003310:	2312      	movs	r3, #18
 8003312:	73fb      	strb	r3, [r7, #15]
      break;
 8003314:	e005      	b.n	8003322 <get_sensor_type+0x142>
    case TAG_EIS_GY:
      type = ST_FIFO_EIS_GYROSCOPE;
 8003316:	2313      	movs	r3, #19
 8003318:	73fb      	strb	r3, [r7, #15]
      break;
 800331a:	e002      	b.n	8003322 <get_sensor_type+0x142>
    default:
      type = ST_FIFO_NONE;
 800331c:	2314      	movs	r3, #20
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	bf00      	nop
  }

  return type;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <get_compression_type>:
  *
  * @retval st_fifo_compression_type    compression type.
  *
  */
static st_fifo_compression_type get_compression_type(uint8_t tag)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  st_fifo_compression_type type;

  switch (tag)
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	3b06      	subs	r3, #6
 800333e:	2b07      	cmp	r3, #7
 8003340:	d82a      	bhi.n	8003398 <get_compression_type+0x68>
 8003342:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <get_compression_type+0x18>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	08003369 	.word	0x08003369
 800334c:	0800336f 	.word	0x0800336f
 8003350:	08003375 	.word	0x08003375
 8003354:	0800337b 	.word	0x0800337b
 8003358:	08003381 	.word	0x08003381
 800335c:	08003387 	.word	0x08003387
 8003360:	0800338d 	.word	0x0800338d
 8003364:	08003393 	.word	0x08003393
  {
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 8003368:	2302      	movs	r3, #2
 800336a:	73fb      	strb	r3, [r7, #15]
      break;
 800336c:	e017      	b.n	800339e <get_compression_type+0x6e>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      break;
 8003372:	e014      	b.n	800339e <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 8003374:	2303      	movs	r3, #3
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e011      	b.n	800339e <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 800337a:	2304      	movs	r3, #4
 800337c:	73fb      	strb	r3, [r7, #15]
      break;
 800337e:	e00e      	b.n	800339e <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 8003380:	2302      	movs	r3, #2
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e00b      	b.n	800339e <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
      break;
 800338a:	e008      	b.n	800339e <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 800338c:	2303      	movs	r3, #3
 800338e:	73fb      	strb	r3, [r7, #15]
      break;
 8003390:	e005      	b.n	800339e <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 8003392:	2304      	movs	r3, #4
 8003394:	73fb      	strb	r3, [r7, #15]
      break;
 8003396:	e002      	b.n	800339e <get_compression_type+0x6e>
    default:
      type = ST_FIFO_COMPRESSION_NC;
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	bf00      	nop
  }

  return type;
 800339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <bdr_get_index>:
  *
  * @retval uint8_t           index of the nearest BDR.
  *
  */
static uint8_t bdr_get_index(const float *bdr, float n)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b095      	sub	sp, #84	; 0x54
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	ed87 0a00 	vstr	s0, [r7]
  float diff[16], min = FLT_MAX;
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <bdr_get_index+0xbc>)
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t idx = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  for (uint8_t i = 0; i < 16u; i++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80033c8:	e019      	b.n	80033fe <bdr_get_index+0x52>
  {
    diff[i] = fabsf(bdr[i] - n);
 80033ca:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	ed93 7a00 	vldr	s14, [r3]
 80033d8:	edd7 7a00 	vldr	s15, [r7]
 80033dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80033e4:	eef0 7ae7 	vabs.f32	s15, s15
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	3350      	adds	r3, #80	; 0x50
 80033ec:	443b      	add	r3, r7
 80033ee:	3b48      	subs	r3, #72	; 0x48
 80033f0:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 16u; i++)
 80033f4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80033f8:	3301      	adds	r3, #1
 80033fa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80033fe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003402:	2b0f      	cmp	r3, #15
 8003404:	d9e1      	bls.n	80033ca <bdr_get_index+0x1e>
  }

  for (uint8_t i = 0; i < 16u; i++)
 8003406:	2300      	movs	r3, #0
 8003408:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800340c:	e01f      	b.n	800344e <bdr_get_index+0xa2>
  {
    if (diff[i] < min)
 800340e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3350      	adds	r3, #80	; 0x50
 8003416:	443b      	add	r3, r7
 8003418:	3b48      	subs	r3, #72	; 0x48
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	dd0b      	ble.n	8003444 <bdr_get_index+0x98>
    {
      min = diff[i];
 800342c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	3350      	adds	r3, #80	; 0x50
 8003434:	443b      	add	r3, r7
 8003436:	3b48      	subs	r3, #72	; 0x48
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
      idx = i;
 800343c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003440:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  for (uint8_t i = 0; i < 16u; i++)
 8003444:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003448:	3301      	adds	r3, #1
 800344a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800344e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003452:	2b0f      	cmp	r3, #15
 8003454:	d9db      	bls.n	800340e <bdr_get_index+0x62>
    }
  }

  return idx;
 8003456:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 800345a:	4618      	mov	r0, r3
 800345c:	3754      	adds	r7, #84	; 0x54
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	7f7fffff 	.word	0x7f7fffff

0800346c <has_even_parity>:
  *
  * @retval uint8_t           the byte has even parity (1) or not (0).
  *
  */
static uint8_t has_even_parity(uint8_t x)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0x00, b = 0x01;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
 800347a:	2301      	movs	r3, #1
 800347c:	737b      	strb	r3, [r7, #13]

  for (uint8_t i = 0; i < 8u; i++)
 800347e:	2300      	movs	r3, #0
 8003480:	73bb      	strb	r3, [r7, #14]
 8003482:	e00d      	b.n	80034a0 <has_even_parity+0x34>
  {
    if ((x & (b << i)) != 0x00u)
 8003484:	79fa      	ldrb	r2, [r7, #7]
 8003486:	7b79      	ldrb	r1, [r7, #13]
 8003488:	7bbb      	ldrb	r3, [r7, #14]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <has_even_parity+0x2e>
    {
      count++;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	3301      	adds	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < 8u; i++)
 800349a:	7bbb      	ldrb	r3, [r7, #14]
 800349c:	3301      	adds	r3, #1
 800349e:	73bb      	strb	r3, [r7, #14]
 80034a0:	7bbb      	ldrb	r3, [r7, #14]
 80034a2:	2b07      	cmp	r3, #7
 80034a4:	d9ee      	bls.n	8003484 <has_even_parity+0x18>
    }
  }

  if ((count & 0x01u) == 0x01u)
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <has_even_parity+0x48>
  {
    return 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <has_even_parity+0x4a>
  }

  return 1;
 80034b4:	2301      	movs	r3, #1
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <get_diff_2x>:
  * @param  diff[6]           compressed data (2x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_2x(int16_t diff[6], uint8_t input[6])
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 6u; i++)
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e01d      	b.n	800350e <get_diff_2x+0x4c>
  {
    diff[i] = input[i] < 128u ? (int16_t)input[i] : (int16_t)input[i] - 256;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	db05      	blt.n	80034ec <get_diff_2x+0x2a>
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	b21b      	sxth	r3, r3
 80034ea:	e008      	b.n	80034fe <get_diff_2x+0x3c>
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	b21b      	sxth	r3, r3
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	0052      	lsls	r2, r2, #1
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	440a      	add	r2, r1
 8003506:	8013      	strh	r3, [r2, #0]
  for (uint8_t i = 0; i < 6u; i++)
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	3301      	adds	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	2b05      	cmp	r3, #5
 8003512:	d9de      	bls.n	80034d2 <get_diff_2x+0x10>
  }
}
 8003514:	bf00      	nop
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <get_diff_3x>:
  * @param  diff[6]           compressed data (3x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_3x(int16_t diff[9], uint8_t input[6])
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
  uint16_t decode_tmp;

  for (uint8_t i = 0; i < 3u; i++)
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	e03a      	b.n	80035a8 <get_diff_3x+0x86>
  {

    (void)memcpy(&decode_tmp, &input[2u * i], 2);
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	4413      	add	r3, r2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	813b      	strh	r3, [r7, #8]

    for (uint8_t j = 0; j < 3u; j++)
 8003540:	2300      	movs	r3, #0
 8003542:	73bb      	strb	r3, [r7, #14]
 8003544:	e02a      	b.n	800359c <get_diff_3x+0x7a>
    {
      uint16_t utmp = (decode_tmp & ((uint16_t)0x1Fu << (5u * j))) >> (5u * j);
 8003546:	893b      	ldrh	r3, [r7, #8]
 8003548:	4619      	mov	r1, r3
 800354a:	7bba      	ldrb	r2, [r7, #14]
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	221f      	movs	r2, #31
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	4019      	ands	r1, r3
 800355a:	7bba      	ldrb	r2, [r7, #14]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	fa41 f303 	asr.w	r3, r1, r3
 8003566:	81bb      	strh	r3, [r7, #12]
      int16_t tmp = (int16_t)utmp;
 8003568:	89bb      	ldrh	r3, [r7, #12]
 800356a:	817b      	strh	r3, [r7, #10]
      diff[j + 3u * i] = tmp < 16 ? tmp : (tmp - 32);
 800356c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003570:	2b0f      	cmp	r3, #15
 8003572:	dd04      	ble.n	800357e <get_diff_3x+0x5c>
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	3b20      	subs	r3, #32
 8003578:	b29b      	uxth	r3, r3
 800357a:	b21a      	sxth	r2, r3
 800357c:	e001      	b.n	8003582 <get_diff_3x+0x60>
 800357e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003582:	7bb8      	ldrb	r0, [r7, #14]
 8003584:	7bf9      	ldrb	r1, [r7, #15]
 8003586:	460b      	mov	r3, r1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	440b      	add	r3, r1
 800358c:	4403      	add	r3, r0
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	440b      	add	r3, r1
 8003594:	801a      	strh	r2, [r3, #0]
    for (uint8_t j = 0; j < 3u; j++)
 8003596:	7bbb      	ldrb	r3, [r7, #14]
 8003598:	3301      	adds	r3, #1
 800359a:	73bb      	strb	r3, [r7, #14]
 800359c:	7bbb      	ldrb	r3, [r7, #14]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d9d1      	bls.n	8003546 <get_diff_3x+0x24>
  for (uint8_t i = 0; i < 3u; i++)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	3301      	adds	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d9c1      	bls.n	8003532 <get_diff_3x+0x10>
    }
  }
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <HAL_MspInit+0x44>)
 80035c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c6:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <HAL_MspInit+0x44>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6613      	str	r3, [r2, #96]	; 0x60
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_MspInit+0x44>)
 80035d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_MspInit+0x44>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	4a08      	ldr	r2, [pc, #32]	; (8003600 <HAL_MspInit+0x44>)
 80035e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e4:	6593      	str	r3, [r2, #88]	; 0x58
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_MspInit+0x44>)
 80035e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b0ac      	sub	sp, #176	; 0xb0
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	2288      	movs	r2, #136	; 0x88
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f00f fc2c 	bl	8012e82 <memset>
  if(hi2c->Instance==I2C3)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <HAL_I2C_MspInit+0xb0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d13b      	bne.n	80036ac <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003638:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800363a:	2300      	movs	r3, #0
 800363c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800363e:	f107 0314 	add.w	r3, r7, #20
 8003642:	4618      	mov	r0, r3
 8003644:	f003 fe94 	bl	8007370 <HAL_RCCEx_PeriphCLKConfig>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800364e:	f7fd fde5 	bl	800121c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_I2C_MspInit+0xb4>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	4a18      	ldr	r2, [pc, #96]	; (80036b8 <HAL_I2C_MspInit+0xb4>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800365e:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <HAL_I2C_MspInit+0xb4>)
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	f003 0304 	and.w	r3, r3, #4
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 800366a:	2303      	movs	r3, #3
 800366c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003670:	2312      	movs	r3, #18
 8003672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367c:	2303      	movs	r3, #3
 800367e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003682:	2304      	movs	r3, #4
 8003684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003688:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800368c:	4619      	mov	r1, r3
 800368e:	480b      	ldr	r0, [pc, #44]	; (80036bc <HAL_I2C_MspInit+0xb8>)
 8003690:	f000 fe60 	bl	8004354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_I2C_MspInit+0xb4>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	4a07      	ldr	r2, [pc, #28]	; (80036b8 <HAL_I2C_MspInit+0xb4>)
 800369a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800369e:	6593      	str	r3, [r2, #88]	; 0x58
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_I2C_MspInit+0xb4>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80036ac:	bf00      	nop
 80036ae:	37b0      	adds	r7, #176	; 0xb0
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40005c00 	.word	0x40005c00
 80036b8:	40021000 	.word	0x40021000
 80036bc:	48000800 	.word	0x48000800

080036c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b0a4      	sub	sp, #144	; 0x90
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036c8:	f107 0308 	add.w	r3, r7, #8
 80036cc:	2288      	movs	r2, #136	; 0x88
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f00f fbd6 	bl	8012e82 <memset>
  if(hrtc->Instance==RTC)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a10      	ldr	r2, [pc, #64]	; (800371c <HAL_RTC_MspInit+0x5c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d118      	bne.n	8003712 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036e4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80036e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 fe3c 	bl	8007370 <HAL_RCCEx_PeriphCLKConfig>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80036fe:	f7fd fd8d 	bl	800121c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_RTC_MspInit+0x60>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_RTC_MspInit+0x60>)
 800370a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003712:	bf00      	nop
 8003714:	3790      	adds	r7, #144	; 0x90
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40002800 	.word	0x40002800
 8003720:	40021000 	.word	0x40021000

08003724 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b0ac      	sub	sp, #176	; 0xb0
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	2288      	movs	r2, #136	; 0x88
 8003742:	2100      	movs	r1, #0
 8003744:	4618      	mov	r0, r3
 8003746:	f00f fb9c 	bl	8012e82 <memset>
  if(hsd->Instance==SDMMC1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a51      	ldr	r2, [pc, #324]	; (8003894 <HAL_SD_MspInit+0x170>)
 8003750:	4293      	cmp	r3, r2
 8003752:	f040 809a 	bne.w	800388a <HAL_SD_MspInit+0x166>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8003756:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800375a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 800375c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	4618      	mov	r0, r3
 800376a:	f003 fe01 	bl	8007370 <HAL_RCCEx_PeriphCLKConfig>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8003774:	f7fd fd52 	bl	800121c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003778:	4b47      	ldr	r3, [pc, #284]	; (8003898 <HAL_SD_MspInit+0x174>)
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	4a46      	ldr	r2, [pc, #280]	; (8003898 <HAL_SD_MspInit+0x174>)
 800377e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003782:	6613      	str	r3, [r2, #96]	; 0x60
 8003784:	4b44      	ldr	r3, [pc, #272]	; (8003898 <HAL_SD_MspInit+0x174>)
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003790:	4b41      	ldr	r3, [pc, #260]	; (8003898 <HAL_SD_MspInit+0x174>)
 8003792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003794:	4a40      	ldr	r2, [pc, #256]	; (8003898 <HAL_SD_MspInit+0x174>)
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800379c:	4b3e      	ldr	r3, [pc, #248]	; (8003898 <HAL_SD_MspInit+0x174>)
 800379e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037a8:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_SD_MspInit+0x174>)
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	4a3a      	ldr	r2, [pc, #232]	; (8003898 <HAL_SD_MspInit+0x174>)
 80037ae:	f043 0308 	orr.w	r3, r3, #8
 80037b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <HAL_SD_MspInit+0x174>)
 80037b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80037c0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80037c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d4:	2303      	movs	r3, #3
 80037d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80037da:	230c      	movs	r3, #12
 80037dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037e4:	4619      	mov	r1, r3
 80037e6:	482d      	ldr	r0, [pc, #180]	; (800389c <HAL_SD_MspInit+0x178>)
 80037e8:	f000 fdb4 	bl	8004354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037ec:	2304      	movs	r3, #4
 80037ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	2302      	movs	r3, #2
 80037f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fe:	2303      	movs	r3, #3
 8003800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003804:	230c      	movs	r3, #12
 8003806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800380a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800380e:	4619      	mov	r1, r3
 8003810:	4823      	ldr	r0, [pc, #140]	; (80038a0 <HAL_SD_MspInit+0x17c>)
 8003812:	f000 fd9f 	bl	8004354 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8003816:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <HAL_SD_MspInit+0x180>)
 8003818:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <HAL_SD_MspInit+0x184>)
 800381a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 800381c:	4b21      	ldr	r3, [pc, #132]	; (80038a4 <HAL_SD_MspInit+0x180>)
 800381e:	2207      	movs	r2, #7
 8003820:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_SD_MspInit+0x180>)
 8003824:	2200      	movs	r2, #0
 8003826:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <HAL_SD_MspInit+0x180>)
 800382a:	2200      	movs	r2, #0
 800382c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <HAL_SD_MspInit+0x180>)
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_SD_MspInit+0x180>)
 8003836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <HAL_SD_MspInit+0x180>)
 800383e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003842:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <HAL_SD_MspInit+0x180>)
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_HIGH;
 800384a:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <HAL_SD_MspInit+0x180>)
 800384c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003850:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8003852:	4814      	ldr	r0, [pc, #80]	; (80038a4 <HAL_SD_MspInit+0x180>)
 8003854:	f000 fb46 	bl	8003ee4 <HAL_DMA_Init>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_SD_MspInit+0x13e>
    {
      Error_Handler();
 800385e:	f7fd fcdd 	bl	800121c <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <HAL_SD_MspInit+0x180>)
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
 8003868:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <HAL_SD_MspInit+0x180>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <HAL_SD_MspInit+0x180>)
 8003872:	63da      	str	r2, [r3, #60]	; 0x3c
 8003874:	4a0b      	ldr	r2, [pc, #44]	; (80038a4 <HAL_SD_MspInit+0x180>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	2031      	movs	r0, #49	; 0x31
 8003880:	f000 faf9 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003884:	2031      	movs	r0, #49	; 0x31
 8003886:	f000 fb12 	bl	8003eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800388a:	bf00      	nop
 800388c:	37b0      	adds	r7, #176	; 0xb0
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40012800 	.word	0x40012800
 8003898:	40021000 	.word	0x40021000
 800389c:	48000800 	.word	0x48000800
 80038a0:	48000c00 	.word	0x48000c00
 80038a4:	200003ec 	.word	0x200003ec
 80038a8:	40020444 	.word	0x40020444

080038ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <NMI_Handler+0x4>

080038b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b6:	e7fe      	b.n	80038b6 <HardFault_Handler+0x4>

080038b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <MemManage_Handler+0x4>

080038be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c2:	e7fe      	b.n	80038c2 <BusFault_Handler+0x4>

080038c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c8:	e7fe      	b.n	80038c8 <UsageFault_Handler+0x4>

080038ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ca:	b480      	push	{r7}
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f8:	f000 f99e 	bl	8003c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}

08003900 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003904:	2004      	movs	r0, #4
 8003906:	f000 fee7 	bl	80046d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}

0800390e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_INT_Pin);
 8003912:	2008      	movs	r0, #8
 8003914:	f000 fee0 	bl	80046d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}

0800391c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <SDMMC1_IRQHandler+0x10>)
 8003922:	f005 fd0b 	bl	800933c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000368 	.word	0x20000368

08003930 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8003934:	4802      	ldr	r0, [pc, #8]	; (8003940 <DMA2_Channel4_IRQHandler+0x10>)
 8003936:	f000 fc2e 	bl	8004196 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200003ec 	.word	0x200003ec

08003944 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <OTG_FS_IRQHandler+0x10>)
 800394a:	f001 fe49 	bl	80055e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	2000363c 	.word	0x2000363c

08003958 <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af04      	add	r7, sp, #16
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	460b      	mov	r3, r1
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	b29a      	uxth	r2, r3
 800396a:	f04f 33ff 	mov.w	r3, #4294967295
 800396e:	9302      	str	r3, [sp, #8]
 8003970:	2301      	movs	r3, #1
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2301      	movs	r3, #1
 800397a:	2172      	movs	r1, #114	; 0x72
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f001 f873 	bl	8004a68 <HAL_I2C_Mem_Read>
 8003982:	4603      	mov	r3, r0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return 1;
 8003990:	2301      	movs	r3, #1
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_kill>:

int _kill(int pid, int sig)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039a6:	f00f facf 	bl	8012f48 <__errno>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2216      	movs	r2, #22
 80039ae:	601a      	str	r2, [r3, #0]
  return -1;
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_exit>:

void _exit (int status)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039c4:	f04f 31ff 	mov.w	r1, #4294967295
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff ffe7 	bl	800399c <_kill>
  while (1) {}    /* Make sure we hang here */
 80039ce:	e7fe      	b.n	80039ce <_exit+0x12>

080039d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	e00a      	b.n	80039f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039e2:	f3af 8000 	nop.w
 80039e6:	4601      	mov	r1, r0
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	60ba      	str	r2, [r7, #8]
 80039ee:	b2ca      	uxtb	r2, r1
 80039f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	3301      	adds	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	dbf0      	blt.n	80039e2 <_read+0x12>
  }

  return len;
 8003a00:	687b      	ldr	r3, [r7, #4]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	e009      	b.n	8003a30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	60ba      	str	r2, [r7, #8]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	dbf1      	blt.n	8003a1c <_write+0x12>
  }
  return len;
 8003a38:	687b      	ldr	r3, [r7, #4]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <_close>:

int _close(int file)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a6a:	605a      	str	r2, [r3, #4]
  return 0;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <_isatty>:

int _isatty(int file)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <_sbrk+0x5c>)
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <_sbrk+0x60>)
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ac0:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <_sbrk+0x64>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <_sbrk+0x64>)
 8003aca:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <_sbrk+0x68>)
 8003acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <_sbrk+0x64>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d207      	bcs.n	8003aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003adc:	f00f fa34 	bl	8012f48 <__errno>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	220c      	movs	r2, #12
 8003ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aea:	e009      	b.n	8003b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aec:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <_sbrk+0x64>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <_sbrk+0x64>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	4a05      	ldr	r2, [pc, #20]	; (8003b10 <_sbrk+0x64>)
 8003afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003afe:	68fb      	ldr	r3, [r7, #12]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20018000 	.word	0x20018000
 8003b0c:	00000800 	.word	0x00000800
 8003b10:	20001cb0 	.word	0x20001cb0
 8003b14:	20003eb8 	.word	0x20003eb8

08003b18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <SystemInit+0x20>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <SystemInit+0x20>)
 8003b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b40:	f7ff ffea 	bl	8003b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b44:	480c      	ldr	r0, [pc, #48]	; (8003b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b46:	490d      	ldr	r1, [pc, #52]	; (8003b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b48:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <LoopForever+0xe>)
  movs r3, #0
 8003b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b4c:	e002      	b.n	8003b54 <LoopCopyDataInit>

08003b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b52:	3304      	adds	r3, #4

08003b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b58:	d3f9      	bcc.n	8003b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b5c:	4c0a      	ldr	r4, [pc, #40]	; (8003b88 <LoopForever+0x16>)
  movs r3, #0
 8003b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b60:	e001      	b.n	8003b66 <LoopFillZerobss>

08003b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b64:	3204      	adds	r2, #4

08003b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b68:	d3fb      	bcc.n	8003b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b6a:	f00f f9f3 	bl	8012f54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b6e:	f7fd f953 	bl	8000e18 <main>

08003b72 <LoopForever>:

LoopForever:
    b LoopForever
 8003b72:	e7fe      	b.n	8003b72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b7c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003b80:	08016d98 	.word	0x08016d98
  ldr r2, =_sbss
 8003b84:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003b88:	20003eb4 	.word	0x20003eb4

08003b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b8c:	e7fe      	b.n	8003b8c <ADC1_2_IRQHandler>

08003b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b98:	2003      	movs	r0, #3
 8003b9a:	f000 f961 	bl	8003e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b9e:	200f      	movs	r0, #15
 8003ba0:	f000 f80e 	bl	8003bc0 <HAL_InitTick>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	71fb      	strb	r3, [r7, #7]
 8003bae:	e001      	b.n	8003bb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bb0:	f7ff fd04 	bl	80035bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003bcc:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <HAL_InitTick+0x6c>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d023      	beq.n	8003c1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003bd4:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_InitTick+0x70>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <HAL_InitTick+0x6c>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f96d 	bl	8003eca <HAL_SYSTICK_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b0f      	cmp	r3, #15
 8003bfa:	d809      	bhi.n	8003c10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	f000 f937 	bl	8003e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c08:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <HAL_InitTick+0x74>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e007      	b.n	8003c20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
 8003c14:	e004      	b.n	8003c20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
 8003c1a:	e001      	b.n	8003c20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000008 	.word	0x20000008
 8003c30:	20000000 	.word	0x20000000
 8003c34:	20000004 	.word	0x20000004

08003c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_IncTick+0x20>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <HAL_IncTick+0x24>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <HAL_IncTick+0x24>)
 8003c4a:	6013      	str	r3, [r2, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	20000008 	.word	0x20000008
 8003c5c:	20001cb4 	.word	0x20001cb4

08003c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return uwTick;
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <HAL_GetTick+0x14>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20001cb4 	.word	0x20001cb4

08003c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c80:	f7ff ffee 	bl	8003c60 <HAL_GetTick>
 8003c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d005      	beq.n	8003c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <HAL_Delay+0x44>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c9e:	bf00      	nop
 8003ca0:	f7ff ffde 	bl	8003c60 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d8f7      	bhi.n	8003ca0 <HAL_Delay+0x28>
  {
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000008 	.word	0x20000008

08003cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cf2:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	60d3      	str	r3, [r2, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <__NVIC_GetPriorityGrouping+0x18>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	f003 0307 	and.w	r3, r3, #7
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	db0b      	blt.n	8003d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	f003 021f 	and.w	r2, r3, #31
 8003d3c:	4907      	ldr	r1, [pc, #28]	; (8003d5c <__NVIC_EnableIRQ+0x38>)
 8003d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2001      	movs	r0, #1
 8003d46:	fa00 f202 	lsl.w	r2, r0, r2
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000e100 	.word	0xe000e100

08003d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	6039      	str	r1, [r7, #0]
 8003d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	db0a      	blt.n	8003d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	490c      	ldr	r1, [pc, #48]	; (8003dac <__NVIC_SetPriority+0x4c>)
 8003d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7e:	0112      	lsls	r2, r2, #4
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	440b      	add	r3, r1
 8003d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d88:	e00a      	b.n	8003da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4908      	ldr	r1, [pc, #32]	; (8003db0 <__NVIC_SetPriority+0x50>)
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	3b04      	subs	r3, #4
 8003d98:	0112      	lsls	r2, r2, #4
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	761a      	strb	r2, [r3, #24]
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000e100 	.word	0xe000e100
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f1c3 0307 	rsb	r3, r3, #7
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	bf28      	it	cs
 8003dd2:	2304      	movcs	r3, #4
 8003dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d902      	bls.n	8003de4 <NVIC_EncodePriority+0x30>
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3b03      	subs	r3, #3
 8003de2:	e000      	b.n	8003de6 <NVIC_EncodePriority+0x32>
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43da      	mvns	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	401a      	ands	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	43d9      	mvns	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	4313      	orrs	r3, r2
         );
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e2c:	d301      	bcc.n	8003e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e00f      	b.n	8003e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <SysTick_Config+0x40>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e3a:	210f      	movs	r1, #15
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	f7ff ff8e 	bl	8003d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <SysTick_Config+0x40>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <SysTick_Config+0x40>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010

08003e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ff29 	bl	8003cc0 <__NVIC_SetPriorityGrouping>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e88:	f7ff ff3e 	bl	8003d08 <__NVIC_GetPriorityGrouping>
 8003e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	6978      	ldr	r0, [r7, #20]
 8003e94:	f7ff ff8e 	bl	8003db4 <NVIC_EncodePriority>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff5d 	bl	8003d60 <__NVIC_SetPriority>
}
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff31 	bl	8003d24 <__NVIC_EnableIRQ>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ffa2 	bl	8003e1c <SysTick_Config>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e098      	b.n	8004028 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b4d      	ldr	r3, [pc, #308]	; (8004034 <HAL_DMA_Init+0x150>)
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d80f      	bhi.n	8003f22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <HAL_DMA_Init+0x154>)
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a4b      	ldr	r2, [pc, #300]	; (800403c <HAL_DMA_Init+0x158>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	009a      	lsls	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a48      	ldr	r2, [pc, #288]	; (8004040 <HAL_DMA_Init+0x15c>)
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40
 8003f20:	e00e      	b.n	8003f40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b46      	ldr	r3, [pc, #280]	; (8004044 <HAL_DMA_Init+0x160>)
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4a43      	ldr	r2, [pc, #268]	; (800403c <HAL_DMA_Init+0x158>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	009a      	lsls	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a42      	ldr	r2, [pc, #264]	; (8004048 <HAL_DMA_Init+0x164>)
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f9a:	d039      	beq.n	8004010 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	4a27      	ldr	r2, [pc, #156]	; (8004040 <HAL_DMA_Init+0x15c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d11a      	bne.n	8003fdc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fa6:	4b29      	ldr	r3, [pc, #164]	; (800404c <HAL_DMA_Init+0x168>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f003 031c 	and.w	r3, r3, #28
 8003fb2:	210f      	movs	r1, #15
 8003fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	4924      	ldr	r1, [pc, #144]	; (800404c <HAL_DMA_Init+0x168>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_DMA_Init+0x168>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	f003 031c 	and.w	r3, r3, #28
 8003fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd4:	491d      	ldr	r1, [pc, #116]	; (800404c <HAL_DMA_Init+0x168>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
 8003fda:	e019      	b.n	8004010 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <HAL_DMA_Init+0x16c>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	f003 031c 	and.w	r3, r3, #28
 8003fe8:	210f      	movs	r1, #15
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	4917      	ldr	r1, [pc, #92]	; (8004050 <HAL_DMA_Init+0x16c>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_DMA_Init+0x16c>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f003 031c 	and.w	r3, r3, #28
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	4911      	ldr	r1, [pc, #68]	; (8004050 <HAL_DMA_Init+0x16c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40020407 	.word	0x40020407
 8004038:	bffdfff8 	.word	0xbffdfff8
 800403c:	cccccccd 	.word	0xcccccccd
 8004040:	40020000 	.word	0x40020000
 8004044:	bffdfbf8 	.word	0xbffdfbf8
 8004048:	40020400 	.word	0x40020400
 800404c:	400200a8 	.word	0x400200a8
 8004050:	400204a8 	.word	0x400204a8

08004054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_DMA_Start_IT+0x20>
 8004070:	2302      	movs	r3, #2
 8004072:	e04b      	b.n	800410c <HAL_DMA_Start_IT+0xb8>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	d13a      	bne.n	80040fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f921 	bl	80042f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 020e 	orr.w	r2, r2, #14
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e00f      	b.n	80040ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0204 	bic.w	r2, r2, #4
 80040da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 020a 	orr.w	r2, r2, #10
 80040ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e005      	b.n	800410a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004106:	2302      	movs	r3, #2
 8004108:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d005      	beq.n	8004138 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2204      	movs	r2, #4
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
 8004136:	e029      	b.n	800418c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 020e 	bic.w	r2, r2, #14
 8004146:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	f003 021c 	and.w	r2, r3, #28
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f202 	lsl.w	r2, r1, r2
 800416a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
    }
  }
  return status;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f003 031c 	and.w	r3, r3, #28
 80041b6:	2204      	movs	r2, #4
 80041b8:	409a      	lsls	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d026      	beq.n	8004210 <HAL_DMA_IRQHandler+0x7a>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d021      	beq.n	8004210 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0204 	bic.w	r2, r2, #4
 80041e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	f003 021c 	and.w	r2, r3, #28
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2104      	movs	r1, #4
 80041f8:	fa01 f202 	lsl.w	r2, r1, r2
 80041fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	2b00      	cmp	r3, #0
 8004204:	d071      	beq.n	80042ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800420e:	e06c      	b.n	80042ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	f003 031c 	and.w	r3, r3, #28
 8004218:	2202      	movs	r2, #2
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d02e      	beq.n	8004282 <HAL_DMA_IRQHandler+0xec>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d029      	beq.n	8004282 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 020a 	bic.w	r2, r2, #10
 800424a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	f003 021c 	and.w	r2, r3, #28
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2102      	movs	r1, #2
 8004262:	fa01 f202 	lsl.w	r2, r1, r2
 8004266:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d038      	beq.n	80042ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004280:	e033      	b.n	80042ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f003 031c 	and.w	r3, r3, #28
 800428a:	2208      	movs	r2, #8
 800428c:	409a      	lsls	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02a      	beq.n	80042ec <HAL_DMA_IRQHandler+0x156>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f003 0308 	and.w	r3, r3, #8
 800429c:	2b00      	cmp	r3, #0
 800429e:	d025      	beq.n	80042ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 020e 	bic.w	r2, r2, #14
 80042ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	f003 021c 	and.w	r2, r3, #28
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f202 	lsl.w	r2, r1, r2
 80042c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
}
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	f003 021c 	and.w	r2, r3, #28
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f202 	lsl.w	r2, r1, r2
 8004314:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b10      	cmp	r3, #16
 8004324:	d108      	bne.n	8004338 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004336:	e007      	b.n	8004348 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	60da      	str	r2, [r3, #12]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004362:	e17f      	b.n	8004664 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	2101      	movs	r1, #1
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	4013      	ands	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8171 	beq.w	800465e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d005      	beq.n	8004394 <HAL_GPIO_Init+0x40>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d130      	bne.n	80043f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2203      	movs	r2, #3
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ca:	2201      	movs	r2, #1
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 0201 	and.w	r2, r3, #1
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d118      	bne.n	8004434 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004408:	2201      	movs	r2, #1
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	08db      	lsrs	r3, r3, #3
 800441e:	f003 0201 	and.w	r2, r3, #1
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b03      	cmp	r3, #3
 800443e:	d017      	beq.n	8004470 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	2203      	movs	r2, #3
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43db      	mvns	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4013      	ands	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d123      	bne.n	80044c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	08da      	lsrs	r2, r3, #3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3208      	adds	r2, #8
 8004484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	220f      	movs	r2, #15
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4013      	ands	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	08da      	lsrs	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3208      	adds	r2, #8
 80044be:	6939      	ldr	r1, [r7, #16]
 80044c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	2203      	movs	r2, #3
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43db      	mvns	r3, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0203 	and.w	r2, r3, #3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80ac 	beq.w	800465e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004506:	4b5f      	ldr	r3, [pc, #380]	; (8004684 <HAL_GPIO_Init+0x330>)
 8004508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450a:	4a5e      	ldr	r2, [pc, #376]	; (8004684 <HAL_GPIO_Init+0x330>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6613      	str	r3, [r2, #96]	; 0x60
 8004512:	4b5c      	ldr	r3, [pc, #368]	; (8004684 <HAL_GPIO_Init+0x330>)
 8004514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800451e:	4a5a      	ldr	r2, [pc, #360]	; (8004688 <HAL_GPIO_Init+0x334>)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	089b      	lsrs	r3, r3, #2
 8004524:	3302      	adds	r3, #2
 8004526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	220f      	movs	r2, #15
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004548:	d025      	beq.n	8004596 <HAL_GPIO_Init+0x242>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4f      	ldr	r2, [pc, #316]	; (800468c <HAL_GPIO_Init+0x338>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01f      	beq.n	8004592 <HAL_GPIO_Init+0x23e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a4e      	ldr	r2, [pc, #312]	; (8004690 <HAL_GPIO_Init+0x33c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d019      	beq.n	800458e <HAL_GPIO_Init+0x23a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4d      	ldr	r2, [pc, #308]	; (8004694 <HAL_GPIO_Init+0x340>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_GPIO_Init+0x236>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4c      	ldr	r2, [pc, #304]	; (8004698 <HAL_GPIO_Init+0x344>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00d      	beq.n	8004586 <HAL_GPIO_Init+0x232>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a4b      	ldr	r2, [pc, #300]	; (800469c <HAL_GPIO_Init+0x348>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <HAL_GPIO_Init+0x22e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a4a      	ldr	r2, [pc, #296]	; (80046a0 <HAL_GPIO_Init+0x34c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d101      	bne.n	800457e <HAL_GPIO_Init+0x22a>
 800457a:	2306      	movs	r3, #6
 800457c:	e00c      	b.n	8004598 <HAL_GPIO_Init+0x244>
 800457e:	2307      	movs	r3, #7
 8004580:	e00a      	b.n	8004598 <HAL_GPIO_Init+0x244>
 8004582:	2305      	movs	r3, #5
 8004584:	e008      	b.n	8004598 <HAL_GPIO_Init+0x244>
 8004586:	2304      	movs	r3, #4
 8004588:	e006      	b.n	8004598 <HAL_GPIO_Init+0x244>
 800458a:	2303      	movs	r3, #3
 800458c:	e004      	b.n	8004598 <HAL_GPIO_Init+0x244>
 800458e:	2302      	movs	r3, #2
 8004590:	e002      	b.n	8004598 <HAL_GPIO_Init+0x244>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_GPIO_Init+0x244>
 8004596:	2300      	movs	r3, #0
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	f002 0203 	and.w	r2, r2, #3
 800459e:	0092      	lsls	r2, r2, #2
 80045a0:	4093      	lsls	r3, r2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045a8:	4937      	ldr	r1, [pc, #220]	; (8004688 <HAL_GPIO_Init+0x334>)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	3302      	adds	r3, #2
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <HAL_GPIO_Init+0x350>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	43db      	mvns	r3, r3
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045da:	4a32      	ldr	r2, [pc, #200]	; (80046a4 <HAL_GPIO_Init+0x350>)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045e0:	4b30      	ldr	r3, [pc, #192]	; (80046a4 <HAL_GPIO_Init+0x350>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004604:	4a27      	ldr	r2, [pc, #156]	; (80046a4 <HAL_GPIO_Init+0x350>)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800460a:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <HAL_GPIO_Init+0x350>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	43db      	mvns	r3, r3
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4013      	ands	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_GPIO_Init+0x350>)
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_GPIO_Init+0x350>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	43db      	mvns	r3, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004658:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <HAL_GPIO_Init+0x350>)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	3301      	adds	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	fa22 f303 	lsr.w	r3, r2, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	f47f ae78 	bne.w	8004364 <HAL_GPIO_Init+0x10>
  }
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	40010000 	.word	0x40010000
 800468c:	48000400 	.word	0x48000400
 8004690:	48000800 	.word	0x48000800
 8004694:	48000c00 	.word	0x48000c00
 8004698:	48001000 	.word	0x48001000
 800469c:	48001400 	.word	0x48001400
 80046a0:	48001800 	.word	0x48001800
 80046a4:	40010400 	.word	0x40010400

080046a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e001      	b.n	80046ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046ee:	4a05      	ldr	r2, [pc, #20]	; (8004704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fc fb82 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 80046fc:	bf00      	nop
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40010400 	.word	0x40010400

08004708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e08d      	b.n	8004836 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe ff68 	bl	8003604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2224      	movs	r2, #36	; 0x24
 8004738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004758:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004768:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	e006      	b.n	8004790 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800478e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d108      	bne.n	80047aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	e007      	b.n	80047ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69d9      	ldr	r1, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	461a      	mov	r2, r3
 800484e:	4603      	mov	r3, r0
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	460b      	mov	r3, r1
 8004854:	813b      	strh	r3, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b20      	cmp	r3, #32
 8004864:	f040 80f9 	bne.w	8004a5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_I2C_Mem_Write+0x34>
 800486e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800487a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0ed      	b.n	8004a5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_I2C_Mem_Write+0x4e>
 800488a:	2302      	movs	r3, #2
 800488c:	e0e6      	b.n	8004a5c <HAL_I2C_Mem_Write+0x21c>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004896:	f7ff f9e3 	bl	8003c60 <HAL_GetTick>
 800489a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2319      	movs	r3, #25
 80048a2:	2201      	movs	r2, #1
 80048a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fac3 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0d1      	b.n	8004a5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2221      	movs	r2, #33	; 0x21
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2240      	movs	r2, #64	; 0x40
 80048c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a3a      	ldr	r2, [r7, #32]
 80048d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048e0:	88f8      	ldrh	r0, [r7, #6]
 80048e2:	893a      	ldrh	r2, [r7, #8]
 80048e4:	8979      	ldrh	r1, [r7, #10]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	9301      	str	r3, [sp, #4]
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	4603      	mov	r3, r0
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f9d3 	bl	8004c9c <I2C_RequestMemoryWrite>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0a9      	b.n	8004a5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	2bff      	cmp	r3, #255	; 0xff
 8004910:	d90e      	bls.n	8004930 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	22ff      	movs	r2, #255	; 0xff
 8004916:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	b2da      	uxtb	r2, r3
 800491e:	8979      	ldrh	r1, [r7, #10]
 8004920:	2300      	movs	r3, #0
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fc3d 	bl	80051a8 <I2C_TransferConfig>
 800492e:	e00f      	b.n	8004950 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	b2da      	uxtb	r2, r3
 8004940:	8979      	ldrh	r1, [r7, #10]
 8004942:	2300      	movs	r3, #0
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fc2c 	bl	80051a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 fabc 	bl	8004ed2 <I2C_WaitOnTXISFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e07b      	b.n	8004a5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d034      	beq.n	8004a08 <HAL_I2C_Mem_Write+0x1c8>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d130      	bne.n	8004a08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	2200      	movs	r2, #0
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fa3f 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e04d      	b.n	8004a5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2bff      	cmp	r3, #255	; 0xff
 80049c8:	d90e      	bls.n	80049e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	22ff      	movs	r2, #255	; 0xff
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	8979      	ldrh	r1, [r7, #10]
 80049d8:	2300      	movs	r3, #0
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fbe1 	bl	80051a8 <I2C_TransferConfig>
 80049e6:	e00f      	b.n	8004a08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	8979      	ldrh	r1, [r7, #10]
 80049fa:	2300      	movs	r3, #0
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fbd0 	bl	80051a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d19e      	bne.n	8004950 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 faa2 	bl	8004f60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e01a      	b.n	8004a5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <HAL_I2C_Mem_Write+0x224>)
 8004a3a:	400b      	ands	r3, r1
 8004a3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	fe00e800 	.word	0xfe00e800

08004a68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	4608      	mov	r0, r1
 8004a72:	4611      	mov	r1, r2
 8004a74:	461a      	mov	r2, r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	817b      	strh	r3, [r7, #10]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	813b      	strh	r3, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	f040 80fd 	bne.w	8004c8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_I2C_Mem_Read+0x34>
 8004a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0f1      	b.n	8004c8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_I2C_Mem_Read+0x4e>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0ea      	b.n	8004c8c <HAL_I2C_Mem_Read+0x224>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004abe:	f7ff f8cf 	bl	8003c60 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	2319      	movs	r3, #25
 8004aca:	2201      	movs	r2, #1
 8004acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f9af 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0d5      	b.n	8004c8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2222      	movs	r2, #34	; 0x22
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b08:	88f8      	ldrh	r0, [r7, #6]
 8004b0a:	893a      	ldrh	r2, [r7, #8]
 8004b0c:	8979      	ldrh	r1, [r7, #10]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4603      	mov	r3, r0
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f913 	bl	8004d44 <I2C_RequestMemoryRead>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0ad      	b.n	8004c8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2bff      	cmp	r3, #255	; 0xff
 8004b38:	d90e      	bls.n	8004b58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	22ff      	movs	r2, #255	; 0xff
 8004b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	8979      	ldrh	r1, [r7, #10]
 8004b48:	4b52      	ldr	r3, [pc, #328]	; (8004c94 <HAL_I2C_Mem_Read+0x22c>)
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 fb29 	bl	80051a8 <I2C_TransferConfig>
 8004b56:	e00f      	b.n	8004b78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	8979      	ldrh	r1, [r7, #10]
 8004b6a:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_I2C_Mem_Read+0x22c>)
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fb18 	bl	80051a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2104      	movs	r1, #4
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f956 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e07c      	b.n	8004c8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d034      	beq.n	8004c38 <HAL_I2C_Mem_Read+0x1d0>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d130      	bne.n	8004c38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2180      	movs	r1, #128	; 0x80
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f927 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e04d      	b.n	8004c8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2bff      	cmp	r3, #255	; 0xff
 8004bf8:	d90e      	bls.n	8004c18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	22ff      	movs	r2, #255	; 0xff
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	8979      	ldrh	r1, [r7, #10]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fac9 	bl	80051a8 <I2C_TransferConfig>
 8004c16:	e00f      	b.n	8004c38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	8979      	ldrh	r1, [r7, #10]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fab8 	bl	80051a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d19a      	bne.n	8004b78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f98a 	bl	8004f60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e01a      	b.n	8004c8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_I2C_Mem_Read+0x230>)
 8004c6a:	400b      	ands	r3, r1
 8004c6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
  }
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	80002400 	.word	0x80002400
 8004c98:	fe00e800 	.word	0xfe00e800

08004c9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	817b      	strh	r3, [r7, #10]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	813b      	strh	r3, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	8979      	ldrh	r1, [r7, #10]
 8004cbc:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <I2C_RequestMemoryWrite+0xa4>)
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fa6f 	bl	80051a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f8ff 	bl	8004ed2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e02c      	b.n	8004d38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d105      	bne.n	8004cf0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
 8004cee:	e015      	b.n	8004d1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cf0:	893b      	ldrh	r3, [r7, #8]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	69b9      	ldr	r1, [r7, #24]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f8e5 	bl	8004ed2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e012      	b.n	8004d38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d12:	893b      	ldrh	r3, [r7, #8]
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2200      	movs	r2, #0
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f884 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	80002000 	.word	0x80002000

08004d44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	4611      	mov	r1, r2
 8004d50:	461a      	mov	r2, r3
 8004d52:	4603      	mov	r3, r0
 8004d54:	817b      	strh	r3, [r7, #10]
 8004d56:	460b      	mov	r3, r1
 8004d58:	813b      	strh	r3, [r7, #8]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	8979      	ldrh	r1, [r7, #10]
 8004d64:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <I2C_RequestMemoryRead+0xa4>)
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fa1c 	bl	80051a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	69b9      	ldr	r1, [r7, #24]
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f8ac 	bl	8004ed2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e02c      	b.n	8004dde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d105      	bne.n	8004d96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d8a:	893b      	ldrh	r3, [r7, #8]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28
 8004d94:	e015      	b.n	8004dc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d96:	893b      	ldrh	r3, [r7, #8]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	69b9      	ldr	r1, [r7, #24]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f892 	bl	8004ed2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e012      	b.n	8004dde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004db8:	893b      	ldrh	r3, [r7, #8]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2140      	movs	r1, #64	; 0x40
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f831 	bl	8004e34 <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	80002000 	.word	0x80002000

08004dec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d103      	bne.n	8004e0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d007      	beq.n	8004e28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	619a      	str	r2, [r3, #24]
  }
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e44:	e031      	b.n	8004eaa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d02d      	beq.n	8004eaa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4e:	f7fe ff07 	bl	8003c60 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d302      	bcc.n	8004e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d122      	bne.n	8004eaa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d113      	bne.n	8004eaa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e00f      	b.n	8004eca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	bf0c      	ite	eq
 8004eba:	2301      	moveq	r3, #1
 8004ebc:	2300      	movne	r3, #0
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d0be      	beq.n	8004e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ede:	e033      	b.n	8004f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f87f 	bl	8004fe8 <I2C_IsErrorOccurred>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e031      	b.n	8004f58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d025      	beq.n	8004f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efc:	f7fe feb0 	bl	8003c60 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d302      	bcc.n	8004f12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d11a      	bne.n	8004f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d013      	beq.n	8004f48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	f043 0220 	orr.w	r2, r3, #32
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e007      	b.n	8004f58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d1c4      	bne.n	8004ee0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f6c:	e02f      	b.n	8004fce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f838 	bl	8004fe8 <I2C_IsErrorOccurred>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e02d      	b.n	8004fde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f82:	f7fe fe6d 	bl	8003c60 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d302      	bcc.n	8004f98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d11a      	bne.n	8004fce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	d013      	beq.n	8004fce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	f043 0220 	orr.w	r2, r3, #32
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e007      	b.n	8004fde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d1c8      	bne.n	8004f6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d068      	beq.n	80050e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2210      	movs	r2, #16
 800501a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800501c:	e049      	b.n	80050b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d045      	beq.n	80050b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fe fe1b 	bl	8003c60 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <I2C_IsErrorOccurred+0x54>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d13a      	bne.n	80050b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005046:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800504e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800505a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505e:	d121      	bne.n	80050a4 <I2C_IsErrorOccurred+0xbc>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005066:	d01d      	beq.n	80050a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	2b20      	cmp	r3, #32
 800506c:	d01a      	beq.n	80050a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800507c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800507e:	f7fe fdef 	bl	8003c60 <HAL_GetTick>
 8005082:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005084:	e00e      	b.n	80050a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005086:	f7fe fdeb 	bl	8003c60 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b19      	cmp	r3, #25
 8005092:	d907      	bls.n	80050a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f043 0320 	orr.w	r3, r3, #32
 800509a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80050a2:	e006      	b.n	80050b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d1e9      	bne.n	8005086 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d003      	beq.n	80050c8 <I2C_IsErrorOccurred+0xe0>
 80050c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0aa      	beq.n	800501e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d103      	bne.n	80050d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2220      	movs	r2, #32
 80050d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	f043 0304 	orr.w	r3, r3, #4
 80050de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	f043 0308 	orr.w	r3, r3, #8
 8005120:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800512a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	f043 0302 	orr.w	r3, r3, #2
 8005142:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800514c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01c      	beq.n	8005196 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f7ff fe45 	bl	8004dec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6859      	ldr	r1, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <I2C_IsErrorOccurred+0x1bc>)
 800516e:	400b      	ands	r3, r1
 8005170:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	431a      	orrs	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800519a:	4618      	mov	r0, r3
 800519c:	3728      	adds	r7, #40	; 0x28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	fe00e800 	.word	0xfe00e800

080051a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	460b      	mov	r3, r1
 80051b4:	817b      	strh	r3, [r7, #10]
 80051b6:	4613      	mov	r3, r2
 80051b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051ba:	897b      	ldrh	r3, [r7, #10]
 80051bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051c0:	7a7b      	ldrb	r3, [r7, #9]
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	0d5b      	lsrs	r3, r3, #21
 80051e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <I2C_TransferConfig+0x60>)
 80051e8:	430b      	orrs	r3, r1
 80051ea:	43db      	mvns	r3, r3
 80051ec:	ea02 0103 	and.w	r1, r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	03ff63ff 	.word	0x03ff63ff

0800520c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b20      	cmp	r3, #32
 8005220:	d138      	bne.n	8005294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800522c:	2302      	movs	r3, #2
 800522e:	e032      	b.n	8005296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	; 0x24
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800525e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6819      	ldr	r1, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	e000      	b.n	8005296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005294:	2302      	movs	r3, #2
  }
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d139      	bne.n	800532c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e033      	b.n	800532e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2224      	movs	r2, #36	; 0x24
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800533a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533c:	b08f      	sub	sp, #60	; 0x3c
 800533e:	af0a      	add	r7, sp, #40	; 0x28
 8005340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e116      	b.n	800557a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f00c f918 	bl	801159c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2203      	movs	r2, #3
 8005370:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f005 fee3 	bl	800b156 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	603b      	str	r3, [r7, #0]
 8005396:	687e      	ldr	r6, [r7, #4]
 8005398:	466d      	mov	r5, sp
 800539a:	f106 0410 	add.w	r4, r6, #16
 800539e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80053ae:	1d33      	adds	r3, r6, #4
 80053b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053b2:	6838      	ldr	r0, [r7, #0]
 80053b4:	f005 fdf6 	bl	800afa4 <USB_CoreInit>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e0d7      	b.n	800557a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2100      	movs	r1, #0
 80053d0:	4618      	mov	r0, r3
 80053d2:	f005 fed1 	bl	800b178 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]
 80053da:	e04a      	b.n	8005472 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053dc:	7bfa      	ldrb	r2, [r7, #15]
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4613      	mov	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	333d      	adds	r3, #61	; 0x3d
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053f0:	7bfa      	ldrb	r2, [r7, #15]
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	333c      	adds	r3, #60	; 0x3c
 8005400:	7bfa      	ldrb	r2, [r7, #15]
 8005402:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005404:	7bfa      	ldrb	r2, [r7, #15]
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	b298      	uxth	r0, r3
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	3356      	adds	r3, #86	; 0x56
 8005418:	4602      	mov	r2, r0
 800541a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800541c:	7bfa      	ldrb	r2, [r7, #15]
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	3340      	adds	r3, #64	; 0x40
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005430:	7bfa      	ldrb	r2, [r7, #15]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4413      	add	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	3344      	adds	r3, #68	; 0x44
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005444:	7bfa      	ldrb	r2, [r7, #15]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	3348      	adds	r3, #72	; 0x48
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005458:	7bfa      	ldrb	r2, [r7, #15]
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	334c      	adds	r3, #76	; 0x4c
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	3301      	adds	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	7bfa      	ldrb	r2, [r7, #15]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d3af      	bcc.n	80053dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
 8005480:	e044      	b.n	800550c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005482:	7bfa      	ldrb	r2, [r7, #15]
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005498:	7bfa      	ldrb	r2, [r7, #15]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054ae:	7bfa      	ldrb	r2, [r7, #15]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	4413      	add	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054c4:	7bfa      	ldrb	r2, [r7, #15]
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	4613      	mov	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054da:	7bfa      	ldrb	r2, [r7, #15]
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054f0:	7bfa      	ldrb	r2, [r7, #15]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	3301      	adds	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	7bfa      	ldrb	r2, [r7, #15]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	429a      	cmp	r2, r3
 8005514:	d3b5      	bcc.n	8005482 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	687e      	ldr	r6, [r7, #4]
 800551e:	466d      	mov	r5, sp
 8005520:	f106 0410 	add.w	r4, r6, #16
 8005524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800552a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800552c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005530:	e885 0003 	stmia.w	r5, {r0, r1}
 8005534:	1d33      	adds	r3, r6, #4
 8005536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005538:	6838      	ldr	r0, [r7, #0]
 800553a:	f005 fe69 	bl	800b210 <USB_DevInit>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e014      	b.n	800557a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	2b01      	cmp	r3, #1
 8005566:	d102      	bne.n	800556e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 f869 	bl	8006640 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f006 fe17 	bl	800c1a6 <USB_DevDisconnect>

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005582 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_PCD_Start+0x1c>
 800559a:	2302      	movs	r3, #2
 800559c:	e01c      	b.n	80055d8 <HAL_PCD_Start+0x56>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d105      	bne.n	80055ba <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f005 fdb8 	bl	800b134 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f006 fdcb 	bl	800c164 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b08d      	sub	sp, #52	; 0x34
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f006 fe89 	bl	800c30e <USB_GetMode>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f040 847e 	bne.w	8005f00 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f006 fded 	bl	800c1e8 <USB_ReadInterrupts>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8474 	beq.w	8005efe <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f006 fdda 	bl	800c1e8 <USB_ReadInterrupts>
 8005634:	4603      	mov	r3, r0
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d107      	bne.n	800564e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695a      	ldr	r2, [r3, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f002 0202 	and.w	r2, r2, #2
 800564c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f006 fdc8 	bl	800c1e8 <USB_ReadInterrupts>
 8005658:	4603      	mov	r3, r0
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b10      	cmp	r3, #16
 8005660:	d161      	bne.n	8005726 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699a      	ldr	r2, [r3, #24]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0210 	bic.w	r2, r2, #16
 8005670:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f003 020f 	and.w	r2, r3, #15
 800567e:	4613      	mov	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4413      	add	r3, r2
 800568e:	3304      	adds	r3, #4
 8005690:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	0c5b      	lsrs	r3, r3, #17
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	2b02      	cmp	r3, #2
 800569c:	d124      	bne.n	80056e8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d035      	beq.n	8005716 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	6a38      	ldr	r0, [r7, #32]
 80056be:	f006 fbff 	bl	800bec0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ce:	441a      	add	r2, r3
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056e0:	441a      	add	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	615a      	str	r2, [r3, #20]
 80056e6:	e016      	b.n	8005716 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	0c5b      	lsrs	r3, r3, #17
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	2b06      	cmp	r3, #6
 80056f2:	d110      	bne.n	8005716 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056fa:	2208      	movs	r2, #8
 80056fc:	4619      	mov	r1, r3
 80056fe:	6a38      	ldr	r0, [r7, #32]
 8005700:	f006 fbde 	bl	800bec0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	091b      	lsrs	r3, r3, #4
 800570c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005710:	441a      	add	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0210 	orr.w	r2, r2, #16
 8005724:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f006 fd5c 	bl	800c1e8 <USB_ReadInterrupts>
 8005730:	4603      	mov	r3, r0
 8005732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005736:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800573a:	f040 80a7 	bne.w	800588c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f006 fd61 	bl	800c20e <USB_ReadDevAllOutEpInterrupt>
 800574c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800574e:	e099      	b.n	8005884 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 808e 	beq.w	8005878 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f006 fd85 	bl	800c276 <USB_ReadDevOutEPInterrupt>
 800576c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	461a      	mov	r2, r3
 8005786:	2301      	movs	r3, #1
 8005788:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800578a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fe7d 	bl	800648c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00c      	beq.n	80057b6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	461a      	mov	r2, r3
 80057aa:	2308      	movs	r3, #8
 80057ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80057ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 feb9 	bl	8006528 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	461a      	mov	r2, r3
 80057ce:	2310      	movs	r3, #16
 80057d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d030      	beq.n	800583e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b80      	cmp	r3, #128	; 0x80
 80057e6:	d109      	bne.n	80057fc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057fa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80057fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fe:	4613      	mov	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	3304      	adds	r3, #4
 8005810:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	78db      	ldrb	r3, [r3, #3]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d108      	bne.n	800582c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2200      	movs	r2, #0
 800581e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	b2db      	uxtb	r3, r3
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f00b fffe 	bl	8011828 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	461a      	mov	r2, r3
 800583a:	2302      	movs	r3, #2
 800583c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f003 0320 	and.w	r3, r3, #32
 8005844:	2b00      	cmp	r3, #0
 8005846:	d008      	beq.n	800585a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	461a      	mov	r2, r3
 8005856:	2320      	movs	r3, #32
 8005858:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d009      	beq.n	8005878 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	461a      	mov	r2, r3
 8005872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005876:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	3301      	adds	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	f47f af62 	bne.w	8005750 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f006 fca9 	bl	800c1e8 <USB_ReadInterrupts>
 8005896:	4603      	mov	r3, r0
 8005898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800589c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058a0:	f040 80a4 	bne.w	80059ec <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f006 fcca 	bl	800c242 <USB_ReadDevAllInEpInterrupt>
 80058ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80058b4:	e096      	b.n	80059e4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 808b 	beq.w	80059d8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	4611      	mov	r1, r2
 80058cc:	4618      	mov	r0, r3
 80058ce:	f006 fcf0 	bl	800c2b2 <USB_ReadDevInEPInterrupt>
 80058d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d020      	beq.n	8005920 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	2201      	movs	r2, #1
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058fe:	4013      	ands	r3, r2
 8005900:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	461a      	mov	r2, r3
 8005910:	2301      	movs	r3, #1
 8005912:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	b2db      	uxtb	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f00b feef 	bl	80116fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005936:	461a      	mov	r2, r3
 8005938:	2308      	movs	r3, #8
 800593a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2b00      	cmp	r3, #0
 8005944:	d008      	beq.n	8005958 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005952:	461a      	mov	r2, r3
 8005954:	2310      	movs	r3, #16
 8005956:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d008      	beq.n	8005974 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	461a      	mov	r2, r3
 8005970:	2340      	movs	r3, #64	; 0x40
 8005972:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d023      	beq.n	80059c6 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800597e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005980:	6a38      	ldr	r0, [r7, #32]
 8005982:	f005 fd87 	bl	800b494 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005988:	4613      	mov	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	3338      	adds	r3, #56	; 0x38
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	4413      	add	r3, r2
 8005996:	3304      	adds	r3, #4
 8005998:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	78db      	ldrb	r3, [r3, #3]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d108      	bne.n	80059b4 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f00b ff4c 	bl	801184c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	461a      	mov	r2, r3
 80059c2:	2302      	movs	r3, #2
 80059c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80059d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fcd2 	bl	800637c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	3301      	adds	r3, #1
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f47f af65 	bne.w	80058b6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f006 fbf9 	bl	800c1e8 <USB_ReadInterrupts>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a00:	d122      	bne.n	8005a48 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a10:	f023 0301 	bic.w	r3, r3, #1
 8005a14:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d108      	bne.n	8005a32 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a28:	2100      	movs	r1, #0
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f00c f980 	bl	8011d30 <HAL_PCDEx_LPM_Callback>
 8005a30:	e002      	b.n	8005a38 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f00b fed0 	bl	80117d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695a      	ldr	r2, [r3, #20]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f006 fbcb 	bl	800c1e8 <USB_ReadInterrupts>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5c:	d112      	bne.n	8005a84 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d102      	bne.n	8005a74 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f00b fe8c 	bl	801178c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f006 fbad 	bl	800c1e8 <USB_ReadInterrupts>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a98:	d121      	bne.n	8005ade <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695a      	ldr	r2, [r3, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005aa8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d111      	bne.n	8005ad8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	089b      	lsrs	r3, r3, #2
 8005ac4:	f003 020f 	and.w	r2, r3, #15
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005ace:	2101      	movs	r1, #1
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f00c f92d 	bl	8011d30 <HAL_PCDEx_LPM_Callback>
 8005ad6:	e002      	b.n	8005ade <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f00b fe57 	bl	801178c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f006 fb80 	bl	800c1e8 <USB_ReadInterrupts>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af2:	f040 80b5 	bne.w	8005c60 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2110      	movs	r1, #16
 8005b10:	4618      	mov	r0, r3
 8005b12:	f005 fcbf 	bl	800b494 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1a:	e046      	b.n	8005baa <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ba2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d3b3      	bcc.n	8005b1c <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005bc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d016      	beq.n	8005bfe <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005be0:	f043 030b 	orr.w	r3, r3, #11
 8005be4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf6:	f043 030b 	orr.w	r3, r3, #11
 8005bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8005bfc:	e015      	b.n	8005c2a <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c10:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005c14:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c24:	f043 030b 	orr.w	r3, r3, #11
 8005c28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f006 fb90 	bl	800c370 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f006 fabf 	bl	800c1e8 <USB_ReadInterrupts>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c74:	d124      	bne.n	8005cc0 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f006 fb55 	bl	800c32a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f005 fc82 	bl	800b58e <USB_GetDevSpeed>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681c      	ldr	r4, [r3, #0]
 8005c96:	f001 fad3 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 8005c9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f005 f9a9 	bl	800affc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f00b fd4f 	bl	801174e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f006 fa8f 	bl	800c1e8 <USB_ReadInterrupts>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d10a      	bne.n	8005cea <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f00b fd2c 	bl	8011732 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f002 0208 	and.w	r2, r2, #8
 8005ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f006 fa7a 	bl	800c1e8 <USB_ReadInterrupts>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfa:	2b80      	cmp	r3, #128	; 0x80
 8005cfc:	d122      	bne.n	8005d44 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0e:	e014      	b.n	8005d3a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d14:	4613      	mov	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d105      	bne.n	8005d34 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 faf3 	bl	800631a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	3301      	adds	r3, #1
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d3e5      	bcc.n	8005d10 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f006 fa4d 	bl	800c1e8 <USB_ReadInterrupts>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d58:	d13b      	bne.n	8005dd2 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5e:	e02b      	b.n	8005db8 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	3340      	adds	r3, #64	; 0x40
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d115      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005d86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	da12      	bge.n	8005db2 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d90:	4613      	mov	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	333f      	adds	r3, #63	; 0x3f
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fab4 	bl	800631a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	3301      	adds	r3, #1
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d3ce      	bcc.n	8005d60 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005dd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f006 fa06 	bl	800c1e8 <USB_ReadInterrupts>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005de6:	d155      	bne.n	8005e94 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005de8:	2301      	movs	r3, #1
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
 8005dec:	e045      	b.n	8005e7a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d12e      	bne.n	8005e74 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da2b      	bge.n	8005e74 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005e28:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d121      	bne.n	8005e74 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e34:	4613      	mov	r3, r2
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e70:	6053      	str	r3, [r2, #4]
            break;
 8005e72:	e007      	b.n	8005e84 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	3301      	adds	r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d3b4      	bcc.n	8005dee <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f006 f9a5 	bl	800c1e8 <USB_ReadInterrupts>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea8:	d10a      	bne.n	8005ec0 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f00b fce0 	bl	8011870 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f006 f98f 	bl	800c1e8 <USB_ReadInterrupts>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d115      	bne.n	8005f00 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f00b fcd0 	bl	801188c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	e000      	b.n	8005f00 <HAL_PCD_IRQHandler+0x920>
      return;
 8005efe:	bf00      	nop
    }
  }
}
 8005f00:	3734      	adds	r7, #52	; 0x34
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd90      	pop	{r4, r7, pc}

08005f06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_PCD_SetAddress+0x1a>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e013      	b.n	8005f48 <HAL_PCD_SetAddress+0x42>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	4611      	mov	r1, r2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f006 f8ed 	bl	800c118 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	70fb      	strb	r3, [r7, #3]
 8005f62:	460b      	mov	r3, r1
 8005f64:	803b      	strh	r3, [r7, #0]
 8005f66:	4613      	mov	r3, r2
 8005f68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da0f      	bge.n	8005f96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	f003 020f 	and.w	r2, r3, #15
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	3338      	adds	r3, #56	; 0x38
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	705a      	strb	r2, [r3, #1]
 8005f94:	e00f      	b.n	8005fb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	f003 020f 	and.w	r2, r3, #15
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	3304      	adds	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005fc2:	883a      	ldrh	r2, [r7, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	78ba      	ldrb	r2, [r7, #2]
 8005fcc:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	785b      	ldrb	r3, [r3, #1]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d004      	beq.n	8005fe0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fe0:	78bb      	ldrb	r3, [r7, #2]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d102      	bne.n	8005fec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_PCD_EP_Open+0xaa>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e00e      	b.n	8006018 <HAL_PCD_EP_Open+0xc8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	4618      	mov	r0, r3
 800600a:	f005 fadf 	bl	800b5cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006016:	7afb      	ldrb	r3, [r7, #11]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800602c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006030:	2b00      	cmp	r3, #0
 8006032:	da0f      	bge.n	8006054 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	f003 020f 	and.w	r2, r3, #15
 800603a:	4613      	mov	r3, r2
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	3338      	adds	r3, #56	; 0x38
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	4413      	add	r3, r2
 8006048:	3304      	adds	r3, #4
 800604a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	705a      	strb	r2, [r3, #1]
 8006052:	e00f      	b.n	8006074 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	f003 020f 	and.w	r2, r3, #15
 800605a:	4613      	mov	r3, r2
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4413      	add	r3, r2
 800606a:	3304      	adds	r3, #4
 800606c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_PCD_EP_Close+0x6e>
 800608a:	2302      	movs	r3, #2
 800608c:	e00e      	b.n	80060ac <HAL_PCD_EP_Close+0x8c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	4618      	mov	r0, r3
 800609e:	f005 fb1d 	bl	800b6dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	607a      	str	r2, [r7, #4]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	460b      	mov	r3, r1
 80060c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060c4:	7afb      	ldrb	r3, [r7, #11]
 80060c6:	f003 020f 	and.w	r2, r3, #15
 80060ca:	4613      	mov	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	3304      	adds	r3, #4
 80060dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2200      	movs	r2, #0
 80060f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060f6:	7afb      	ldrb	r3, [r7, #11]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	4618      	mov	r0, r3
 800610a:	f005 fbc3 	bl	800b894 <USB_EPStartXfer>

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	f003 020f 	and.w	r2, r3, #15
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	460b      	mov	r3, r1
 8006156:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006158:	7afb      	ldrb	r3, [r7, #11]
 800615a:	f003 020f 	and.w	r2, r3, #15
 800615e:	4613      	mov	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4413      	add	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	3338      	adds	r3, #56	; 0x38
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	3304      	adds	r3, #4
 800616e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2200      	movs	r2, #0
 8006180:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2201      	movs	r2, #1
 8006186:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	b2da      	uxtb	r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6979      	ldr	r1, [r7, #20]
 800619a:	4618      	mov	r0, r3
 800619c:	f005 fb7a 	bl	800b894 <USB_EPStartXfer>

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	460b      	mov	r3, r1
 80061b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 020f 	and.w	r2, r3, #15
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d901      	bls.n	80061c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e04e      	b.n	8006266 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	da0f      	bge.n	80061f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	3338      	adds	r3, #56	; 0x38
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	3304      	adds	r3, #4
 80061e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	705a      	strb	r2, [r3, #1]
 80061ee:	e00d      	b.n	800620c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	3304      	adds	r3, #4
 8006204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	b2da      	uxtb	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_PCD_EP_SetStall+0x82>
 8006228:	2302      	movs	r3, #2
 800622a:	e01c      	b.n	8006266 <HAL_PCD_EP_SetStall+0xbc>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68f9      	ldr	r1, [r7, #12]
 800623a:	4618      	mov	r0, r3
 800623c:	f005 fe98 	bl	800bf70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	2b00      	cmp	r3, #0
 8006248:	d108      	bne.n	800625c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f006 f88a 	bl	800c370 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	f003 020f 	and.w	r2, r3, #15
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d901      	bls.n	800628c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e042      	b.n	8006312 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800628c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006290:	2b00      	cmp	r3, #0
 8006292:	da0f      	bge.n	80062b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	f003 020f 	and.w	r2, r3, #15
 800629a:	4613      	mov	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	3338      	adds	r3, #56	; 0x38
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	4413      	add	r3, r2
 80062a8:	3304      	adds	r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	705a      	strb	r2, [r3, #1]
 80062b2:	e00f      	b.n	80062d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	f003 020f 	and.w	r2, r3, #15
 80062ba:	4613      	mov	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	4413      	add	r3, r2
 80062ca:	3304      	adds	r3, #4
 80062cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_PCD_EP_ClrStall+0x86>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e00e      	b.n	8006312 <HAL_PCD_EP_ClrStall+0xa4>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	4618      	mov	r0, r3
 8006304:	f005 fea2 	bl	800c04c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800632a:	2b00      	cmp	r3, #0
 800632c:	da0c      	bge.n	8006348 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	f003 020f 	and.w	r2, r3, #15
 8006334:	4613      	mov	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	3338      	adds	r3, #56	; 0x38
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	3304      	adds	r3, #4
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	e00c      	b.n	8006362 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	f003 020f 	and.w	r2, r3, #15
 800634e:	4613      	mov	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	3304      	adds	r3, #4
 8006360:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	4618      	mov	r0, r3
 800636a:	f005 fcc5 	bl	800bcf8 <USB_EPStopXfer>
 800636e:	4603      	mov	r3, r0
 8006370:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006372:	7afb      	ldrb	r3, [r7, #11]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	4613      	mov	r3, r2
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	3338      	adds	r3, #56	; 0x38
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	4413      	add	r3, r2
 80063a0:	3304      	adds	r3, #4
 80063a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d901      	bls.n	80063b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e067      	b.n	8006484 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d902      	bls.n	80063d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	3303      	adds	r3, #3
 80063d4:	089b      	lsrs	r3, r3, #2
 80063d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063d8:	e026      	b.n	8006428 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d902      	bls.n	80063f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	3303      	adds	r3, #3
 80063fa:	089b      	lsrs	r3, r3, #2
 80063fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68d9      	ldr	r1, [r3, #12]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	b2da      	uxtb	r2, r3
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	b29b      	uxth	r3, r3
 800640a:	6978      	ldr	r0, [r7, #20]
 800640c:	f005 fd1e 	bl	800be4c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	441a      	add	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	695a      	ldr	r2, [r3, #20]
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	441a      	add	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	429a      	cmp	r2, r3
 800643c:	d809      	bhi.n	8006452 <PCD_WriteEmptyTxFifo+0xd6>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006446:	429a      	cmp	r2, r3
 8006448:	d203      	bcs.n	8006452 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1c3      	bne.n	80063da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	429a      	cmp	r2, r3
 800645c:	d811      	bhi.n	8006482 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	2201      	movs	r2, #1
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	43db      	mvns	r3, r3
 8006478:	6939      	ldr	r1, [r7, #16]
 800647a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800647e:	4013      	ands	r3, r2
 8006480:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3720      	adds	r7, #32
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	333c      	adds	r3, #60	; 0x3c
 80064a4:	3304      	adds	r3, #4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4a19      	ldr	r2, [pc, #100]	; (8006524 <PCD_EP_OutXfrComplete_int+0x98>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d124      	bne.n	800650c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00a      	beq.n	80064e2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d8:	461a      	mov	r2, r3
 80064da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064de:	6093      	str	r3, [r2, #8]
 80064e0:	e01a      	b.n	8006518 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d008      	beq.n	80064fe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f8:	461a      	mov	r2, r3
 80064fa:	2320      	movs	r3, #32
 80064fc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f00b f8df 	bl	80116c8 <HAL_PCD_DataOutStageCallback>
 800650a:	e005      	b.n	8006518 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f00b f8d8 	bl	80116c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	4f54310a 	.word	0x4f54310a

08006528 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	333c      	adds	r3, #60	; 0x3c
 8006540:	3304      	adds	r3, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a0c      	ldr	r2, [pc, #48]	; (800658c <PCD_EP_OutSetupPacket_int+0x64>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d90e      	bls.n	800657c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006574:	461a      	mov	r2, r3
 8006576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f00b f891 	bl	80116a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	4f54300a 	.word	0x4f54300a

08006590 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	70fb      	strb	r3, [r7, #3]
 800659c:	4613      	mov	r3, r2
 800659e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d107      	bne.n	80065be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065ae:	883b      	ldrh	r3, [r7, #0]
 80065b0:	0419      	lsls	r1, r3, #16
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	629a      	str	r2, [r3, #40]	; 0x28
 80065bc:	e028      	b.n	8006610 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	4413      	add	r3, r2
 80065ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065cc:	2300      	movs	r3, #0
 80065ce:	73fb      	strb	r3, [r7, #15]
 80065d0:	e00d      	b.n	80065ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	3340      	adds	r3, #64	; 0x40
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	0c1b      	lsrs	r3, r3, #16
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4413      	add	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	3301      	adds	r3, #1
 80065ec:	73fb      	strb	r3, [r7, #15]
 80065ee:	7bfa      	ldrb	r2, [r7, #15]
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d3ec      	bcc.n	80065d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80065f8:	883b      	ldrh	r3, [r7, #0]
 80065fa:	0418      	lsls	r0, r3, #16
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6819      	ldr	r1, [r3, #0]
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	3b01      	subs	r3, #1
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4302      	orrs	r2, r0
 8006608:	3340      	adds	r3, #64	; 0x40
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	887a      	ldrh	r2, [r7, #2]
 8006630:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006672:	f043 0303 	orr.w	r3, r3, #3
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800668c:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006694:	4618      	mov	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40007000 	.word	0x40007000

080066a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b2:	d130      	bne.n	8006716 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80066b4:	4b23      	ldr	r3, [pc, #140]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c0:	d038      	beq.n	8006734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066c2:	4b20      	ldr	r3, [pc, #128]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066ca:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066d2:	4b1d      	ldr	r3, [pc, #116]	; (8006748 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2232      	movs	r2, #50	; 0x32
 80066d8:	fb02 f303 	mul.w	r3, r2, r3
 80066dc:	4a1b      	ldr	r2, [pc, #108]	; (800674c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80066de:	fba2 2303 	umull	r2, r3, r2, r3
 80066e2:	0c9b      	lsrs	r3, r3, #18
 80066e4:	3301      	adds	r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066e8:	e002      	b.n	80066f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80066f0:	4b14      	ldr	r3, [pc, #80]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fc:	d102      	bne.n	8006704 <HAL_PWREx_ControlVoltageScaling+0x60>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1f2      	bne.n	80066ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006704:	4b0f      	ldr	r3, [pc, #60]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006710:	d110      	bne.n	8006734 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e00f      	b.n	8006736 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800671e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006722:	d007      	beq.n	8006734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006724:	4b07      	ldr	r3, [pc, #28]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800672c:	4a05      	ldr	r2, [pc, #20]	; (8006744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800672e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006732:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40007000 	.word	0x40007000
 8006748:	20000000 	.word	0x20000000
 800674c:	431bde83 	.word	0x431bde83

08006750 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	4a04      	ldr	r2, [pc, #16]	; (800676c <HAL_PWREx_EnableVddUSB+0x1c>)
 800675a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800675e:	6053      	str	r3, [r2, #4]
}
 8006760:	bf00      	nop
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40007000 	.word	0x40007000

08006770 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e3ca      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006782:	4b97      	ldr	r3, [pc, #604]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
 800678a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800678c:	4b94      	ldr	r3, [pc, #592]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80e4 	beq.w	800696c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d007      	beq.n	80067ba <HAL_RCC_OscConfig+0x4a>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b0c      	cmp	r3, #12
 80067ae:	f040 808b 	bne.w	80068c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	f040 8087 	bne.w	80068c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067ba:	4b89      	ldr	r3, [pc, #548]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_RCC_OscConfig+0x62>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e3a2      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1a      	ldr	r2, [r3, #32]
 80067d6:	4b82      	ldr	r3, [pc, #520]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <HAL_RCC_OscConfig+0x7c>
 80067e2:	4b7f      	ldr	r3, [pc, #508]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067ea:	e005      	b.n	80067f8 <HAL_RCC_OscConfig+0x88>
 80067ec:	4b7c      	ldr	r3, [pc, #496]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80067ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067f2:	091b      	lsrs	r3, r3, #4
 80067f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d223      	bcs.n	8006844 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fd55 	bl	80072b0 <RCC_SetFlashLatencyFromMSIRange>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e383      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006810:	4b73      	ldr	r3, [pc, #460]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a72      	ldr	r2, [pc, #456]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006816:	f043 0308 	orr.w	r3, r3, #8
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	4b70      	ldr	r3, [pc, #448]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	496d      	ldr	r1, [pc, #436]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800682e:	4b6c      	ldr	r3, [pc, #432]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	4968      	ldr	r1, [pc, #416]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800683e:	4313      	orrs	r3, r2
 8006840:	604b      	str	r3, [r1, #4]
 8006842:	e025      	b.n	8006890 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006844:	4b66      	ldr	r3, [pc, #408]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a65      	ldr	r2, [pc, #404]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800684a:	f043 0308 	orr.w	r3, r3, #8
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	4b63      	ldr	r3, [pc, #396]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	4960      	ldr	r1, [pc, #384]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800685e:	4313      	orrs	r3, r2
 8006860:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006862:	4b5f      	ldr	r3, [pc, #380]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	021b      	lsls	r3, r3, #8
 8006870:	495b      	ldr	r1, [pc, #364]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006872:	4313      	orrs	r3, r2
 8006874:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d109      	bne.n	8006890 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fd15 	bl	80072b0 <RCC_SetFlashLatencyFromMSIRange>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e343      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006890:	f000 fc4a 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 8006894:	4602      	mov	r2, r0
 8006896:	4b52      	ldr	r3, [pc, #328]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	091b      	lsrs	r3, r3, #4
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	4950      	ldr	r1, [pc, #320]	; (80069e4 <HAL_RCC_OscConfig+0x274>)
 80068a2:	5ccb      	ldrb	r3, [r1, r3]
 80068a4:	f003 031f 	and.w	r3, r3, #31
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ac:	4a4e      	ldr	r2, [pc, #312]	; (80069e8 <HAL_RCC_OscConfig+0x278>)
 80068ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80068b0:	4b4e      	ldr	r3, [pc, #312]	; (80069ec <HAL_RCC_OscConfig+0x27c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fd f983 	bl	8003bc0 <HAL_InitTick>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d052      	beq.n	800696a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	e327      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d032      	beq.n	8006936 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80068d0:	4b43      	ldr	r3, [pc, #268]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a42      	ldr	r2, [pc, #264]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068dc:	f7fd f9c0 	bl	8003c60 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068e2:	e008      	b.n	80068f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068e4:	f7fd f9bc 	bl	8003c60 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e310      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068f6:	4b3a      	ldr	r3, [pc, #232]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0f0      	beq.n	80068e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006902:	4b37      	ldr	r3, [pc, #220]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a36      	ldr	r2, [pc, #216]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006908:	f043 0308 	orr.w	r3, r3, #8
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b34      	ldr	r3, [pc, #208]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	4931      	ldr	r1, [pc, #196]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800691c:	4313      	orrs	r3, r2
 800691e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006920:	4b2f      	ldr	r3, [pc, #188]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	492c      	ldr	r1, [pc, #176]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006930:	4313      	orrs	r3, r2
 8006932:	604b      	str	r3, [r1, #4]
 8006934:	e01a      	b.n	800696c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006936:	4b2a      	ldr	r3, [pc, #168]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a29      	ldr	r2, [pc, #164]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006942:	f7fd f98d 	bl	8003c60 <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006948:	e008      	b.n	800695c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800694a:	f7fd f989 	bl	8003c60 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e2dd      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800695c:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f0      	bne.n	800694a <HAL_RCC_OscConfig+0x1da>
 8006968:	e000      	b.n	800696c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800696a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d074      	beq.n	8006a62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2b08      	cmp	r3, #8
 800697c:	d005      	beq.n	800698a <HAL_RCC_OscConfig+0x21a>
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b0c      	cmp	r3, #12
 8006982:	d10e      	bne.n	80069a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b03      	cmp	r3, #3
 8006988:	d10b      	bne.n	80069a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d064      	beq.n	8006a60 <HAL_RCC_OscConfig+0x2f0>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d160      	bne.n	8006a60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e2ba      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069aa:	d106      	bne.n	80069ba <HAL_RCC_OscConfig+0x24a>
 80069ac:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a0b      	ldr	r2, [pc, #44]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80069b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	e026      	b.n	8006a08 <HAL_RCC_OscConfig+0x298>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069c2:	d115      	bne.n	80069f0 <HAL_RCC_OscConfig+0x280>
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a05      	ldr	r2, [pc, #20]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80069ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	4b03      	ldr	r3, [pc, #12]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a02      	ldr	r2, [pc, #8]	; (80069e0 <HAL_RCC_OscConfig+0x270>)
 80069d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	e014      	b.n	8006a08 <HAL_RCC_OscConfig+0x298>
 80069de:	bf00      	nop
 80069e0:	40021000 	.word	0x40021000
 80069e4:	0801688c 	.word	0x0801688c
 80069e8:	20000000 	.word	0x20000000
 80069ec:	20000004 	.word	0x20000004
 80069f0:	4ba0      	ldr	r3, [pc, #640]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a9f      	ldr	r2, [pc, #636]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 80069f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	4b9d      	ldr	r3, [pc, #628]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a9c      	ldr	r2, [pc, #624]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d013      	beq.n	8006a38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fd f926 	bl	8003c60 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a18:	f7fd f922 	bl	8003c60 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b64      	cmp	r3, #100	; 0x64
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e276      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a2a:	4b92      	ldr	r3, [pc, #584]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0x2a8>
 8006a36:	e014      	b.n	8006a62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fd f912 	bl	8003c60 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a40:	f7fd f90e 	bl	8003c60 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b64      	cmp	r3, #100	; 0x64
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e262      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a52:	4b88      	ldr	r3, [pc, #544]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x2d0>
 8006a5e:	e000      	b.n	8006a62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d060      	beq.n	8006b30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d005      	beq.n	8006a80 <HAL_RCC_OscConfig+0x310>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b0c      	cmp	r3, #12
 8006a78:	d119      	bne.n	8006aae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d116      	bne.n	8006aae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a80:	4b7c      	ldr	r3, [pc, #496]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_RCC_OscConfig+0x328>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e23f      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a98:	4b76      	ldr	r3, [pc, #472]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	4973      	ldr	r1, [pc, #460]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aac:	e040      	b.n	8006b30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d023      	beq.n	8006afe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ab6:	4b6f      	ldr	r3, [pc, #444]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a6e      	ldr	r2, [pc, #440]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac2:	f7fd f8cd 	bl	8003c60 <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aca:	f7fd f8c9 	bl	8003c60 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e21d      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006adc:	4b65      	ldr	r3, [pc, #404]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0f0      	beq.n	8006aca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae8:	4b62      	ldr	r3, [pc, #392]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	061b      	lsls	r3, r3, #24
 8006af6:	495f      	ldr	r1, [pc, #380]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	604b      	str	r3, [r1, #4]
 8006afc:	e018      	b.n	8006b30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006afe:	4b5d      	ldr	r3, [pc, #372]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a5c      	ldr	r2, [pc, #368]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0a:	f7fd f8a9 	bl	8003c60 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b12:	f7fd f8a5 	bl	8003c60 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e1f9      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b24:	4b53      	ldr	r3, [pc, #332]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f0      	bne.n	8006b12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d03c      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01c      	beq.n	8006b7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b44:	4b4b      	ldr	r3, [pc, #300]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b4a:	4a4a      	ldr	r2, [pc, #296]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006b4c:	f043 0301 	orr.w	r3, r3, #1
 8006b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b54:	f7fd f884 	bl	8003c60 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b5c:	f7fd f880 	bl	8003c60 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e1d4      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b6e:	4b41      	ldr	r3, [pc, #260]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ef      	beq.n	8006b5c <HAL_RCC_OscConfig+0x3ec>
 8006b7c:	e01b      	b.n	8006bb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b7e:	4b3d      	ldr	r3, [pc, #244]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b84:	4a3b      	ldr	r2, [pc, #236]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006b86:	f023 0301 	bic.w	r3, r3, #1
 8006b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b8e:	f7fd f867 	bl	8003c60 <HAL_GetTick>
 8006b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b96:	f7fd f863 	bl	8003c60 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e1b7      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ba8:	4b32      	ldr	r3, [pc, #200]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1ef      	bne.n	8006b96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80a6 	beq.w	8006d10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006bc8:	4b2a      	ldr	r3, [pc, #168]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10d      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bd4:	4b27      	ldr	r3, [pc, #156]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd8:	4a26      	ldr	r2, [pc, #152]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bde:	6593      	str	r3, [r2, #88]	; 0x58
 8006be0:	4b24      	ldr	r3, [pc, #144]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bec:	2301      	movs	r3, #1
 8006bee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bf0:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <HAL_RCC_OscConfig+0x508>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d118      	bne.n	8006c2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bfc:	4b1e      	ldr	r3, [pc, #120]	; (8006c78 <HAL_RCC_OscConfig+0x508>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <HAL_RCC_OscConfig+0x508>)
 8006c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c08:	f7fd f82a 	bl	8003c60 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c10:	f7fd f826 	bl	8003c60 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e17a      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c22:	4b15      	ldr	r3, [pc, #84]	; (8006c78 <HAL_RCC_OscConfig+0x508>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d108      	bne.n	8006c48 <HAL_RCC_OscConfig+0x4d8>
 8006c36:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3c:	4a0d      	ldr	r2, [pc, #52]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c46:	e029      	b.n	8006c9c <HAL_RCC_OscConfig+0x52c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	2b05      	cmp	r3, #5
 8006c4e:	d115      	bne.n	8006c7c <HAL_RCC_OscConfig+0x50c>
 8006c50:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c56:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006c58:	f043 0304 	orr.w	r3, r3, #4
 8006c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c66:	4a03      	ldr	r2, [pc, #12]	; (8006c74 <HAL_RCC_OscConfig+0x504>)
 8006c68:	f043 0301 	orr.w	r3, r3, #1
 8006c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c70:	e014      	b.n	8006c9c <HAL_RCC_OscConfig+0x52c>
 8006c72:	bf00      	nop
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40007000 	.word	0x40007000
 8006c7c:	4b9c      	ldr	r3, [pc, #624]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c82:	4a9b      	ldr	r2, [pc, #620]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c8c:	4b98      	ldr	r3, [pc, #608]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	4a97      	ldr	r2, [pc, #604]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006c94:	f023 0304 	bic.w	r3, r3, #4
 8006c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d016      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca4:	f7fc ffdc 	bl	8003c60 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006caa:	e00a      	b.n	8006cc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cac:	f7fc ffd8 	bl	8003c60 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e12a      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cc2:	4b8b      	ldr	r3, [pc, #556]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0ed      	beq.n	8006cac <HAL_RCC_OscConfig+0x53c>
 8006cd0:	e015      	b.n	8006cfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd2:	f7fc ffc5 	bl	8003c60 <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cd8:	e00a      	b.n	8006cf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cda:	f7fc ffc1 	bl	8003c60 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e113      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cf0:	4b7f      	ldr	r3, [pc, #508]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1ed      	bne.n	8006cda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cfe:	7ffb      	ldrb	r3, [r7, #31]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d105      	bne.n	8006d10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d04:	4b7a      	ldr	r3, [pc, #488]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d08:	4a79      	ldr	r2, [pc, #484]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 80fe 	beq.w	8006f16 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	f040 80d0 	bne.w	8006ec4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d24:	4b72      	ldr	r3, [pc, #456]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f003 0203 	and.w	r2, r3, #3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d130      	bne.n	8006d9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	3b01      	subs	r3, #1
 8006d44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d127      	bne.n	8006d9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d11f      	bne.n	8006d9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d64:	2a07      	cmp	r2, #7
 8006d66:	bf14      	ite	ne
 8006d68:	2201      	movne	r2, #1
 8006d6a:	2200      	moveq	r2, #0
 8006d6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d113      	bne.n	8006d9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d109      	bne.n	8006d9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	085b      	lsrs	r3, r3, #1
 8006d92:	3b01      	subs	r3, #1
 8006d94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d06e      	beq.n	8006e78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2b0c      	cmp	r3, #12
 8006d9e:	d069      	beq.n	8006e74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006da0:	4b53      	ldr	r3, [pc, #332]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d105      	bne.n	8006db8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006dac:	4b50      	ldr	r3, [pc, #320]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0ad      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006dbc:	4b4c      	ldr	r3, [pc, #304]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a4b      	ldr	r2, [pc, #300]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006dc8:	f7fc ff4a 	bl	8003c60 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd0:	f7fc ff46 	bl	8003c60 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e09a      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de2:	4b43      	ldr	r3, [pc, #268]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dee:	4b40      	ldr	r3, [pc, #256]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	4b40      	ldr	r3, [pc, #256]	; (8006ef4 <HAL_RCC_OscConfig+0x784>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006dfe:	3a01      	subs	r2, #1
 8006e00:	0112      	lsls	r2, r2, #4
 8006e02:	4311      	orrs	r1, r2
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e08:	0212      	lsls	r2, r2, #8
 8006e0a:	4311      	orrs	r1, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e10:	0852      	lsrs	r2, r2, #1
 8006e12:	3a01      	subs	r2, #1
 8006e14:	0552      	lsls	r2, r2, #21
 8006e16:	4311      	orrs	r1, r2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e1c:	0852      	lsrs	r2, r2, #1
 8006e1e:	3a01      	subs	r2, #1
 8006e20:	0652      	lsls	r2, r2, #25
 8006e22:	4311      	orrs	r1, r2
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e28:	0912      	lsrs	r2, r2, #4
 8006e2a:	0452      	lsls	r2, r2, #17
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	4930      	ldr	r1, [pc, #192]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e34:	4b2e      	ldr	r3, [pc, #184]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a2d      	ldr	r2, [pc, #180]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e40:	4b2b      	ldr	r3, [pc, #172]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4a2a      	ldr	r2, [pc, #168]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e4c:	f7fc ff08 	bl	8003c60 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e54:	f7fc ff04 	bl	8003c60 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e058      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e66:	4b22      	ldr	r3, [pc, #136]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0f0      	beq.n	8006e54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e72:	e050      	b.n	8006f16 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e04f      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e78:	4b1d      	ldr	r3, [pc, #116]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d148      	bne.n	8006f16 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e84:	4b1a      	ldr	r3, [pc, #104]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a19      	ldr	r2, [pc, #100]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e90:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	4a16      	ldr	r2, [pc, #88]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006e9c:	f7fc fee0 	bl	8003c60 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea4:	f7fc fedc 	bl	8003c60 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e030      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eb6:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0f0      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x734>
 8006ec2:	e028      	b.n	8006f16 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b0c      	cmp	r3, #12
 8006ec8:	d023      	beq.n	8006f12 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <HAL_RCC_OscConfig+0x780>)
 8006ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed6:	f7fc fec3 	bl	8003c60 <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006edc:	e00c      	b.n	8006ef8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ede:	f7fc febf 	bl	8003c60 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d905      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e013      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ef8:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <HAL_RCC_OscConfig+0x7b0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1ec      	bne.n	8006ede <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCC_OscConfig+0x7b0>)
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	4905      	ldr	r1, [pc, #20]	; (8006f20 <HAL_RCC_OscConfig+0x7b0>)
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <HAL_RCC_OscConfig+0x7b4>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	60cb      	str	r3, [r1, #12]
 8006f10:	e001      	b.n	8006f16 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3720      	adds	r7, #32
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	40021000 	.word	0x40021000
 8006f24:	feeefffc 	.word	0xfeeefffc

08006f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e0e7      	b.n	800710c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f3c:	4b75      	ldr	r3, [pc, #468]	; (8007114 <HAL_RCC_ClockConfig+0x1ec>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d910      	bls.n	8006f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f4a:	4b72      	ldr	r3, [pc, #456]	; (8007114 <HAL_RCC_ClockConfig+0x1ec>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f023 0207 	bic.w	r2, r3, #7
 8006f52:	4970      	ldr	r1, [pc, #448]	; (8007114 <HAL_RCC_ClockConfig+0x1ec>)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5a:	4b6e      	ldr	r3, [pc, #440]	; (8007114 <HAL_RCC_ClockConfig+0x1ec>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0307 	and.w	r3, r3, #7
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d001      	beq.n	8006f6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e0cf      	b.n	800710c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d010      	beq.n	8006f9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	4b66      	ldr	r3, [pc, #408]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d908      	bls.n	8006f9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f88:	4b63      	ldr	r3, [pc, #396]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	4960      	ldr	r1, [pc, #384]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d04c      	beq.n	8007040 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d107      	bne.n	8006fbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fae:	4b5a      	ldr	r3, [pc, #360]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d121      	bne.n	8006ffe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e0a6      	b.n	800710c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d107      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fc6:	4b54      	ldr	r3, [pc, #336]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d115      	bne.n	8006ffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e09a      	b.n	800710c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d107      	bne.n	8006fee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fde:	4b4e      	ldr	r3, [pc, #312]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e08e      	b.n	800710c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fee:	4b4a      	ldr	r3, [pc, #296]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e086      	b.n	800710c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ffe:	4b46      	ldr	r3, [pc, #280]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f023 0203 	bic.w	r2, r3, #3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4943      	ldr	r1, [pc, #268]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 800700c:	4313      	orrs	r3, r2
 800700e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007010:	f7fc fe26 	bl	8003c60 <HAL_GetTick>
 8007014:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007016:	e00a      	b.n	800702e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007018:	f7fc fe22 	bl	8003c60 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	f241 3288 	movw	r2, #5000	; 0x1388
 8007026:	4293      	cmp	r3, r2
 8007028:	d901      	bls.n	800702e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e06e      	b.n	800710c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702e:	4b3a      	ldr	r3, [pc, #232]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 020c 	and.w	r2, r3, #12
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	429a      	cmp	r2, r3
 800703e:	d1eb      	bne.n	8007018 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0302 	and.w	r3, r3, #2
 8007048:	2b00      	cmp	r3, #0
 800704a:	d010      	beq.n	800706e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	4b31      	ldr	r3, [pc, #196]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007058:	429a      	cmp	r2, r3
 800705a:	d208      	bcs.n	800706e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800705c:	4b2e      	ldr	r3, [pc, #184]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	492b      	ldr	r1, [pc, #172]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 800706a:	4313      	orrs	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800706e:	4b29      	ldr	r3, [pc, #164]	; (8007114 <HAL_RCC_ClockConfig+0x1ec>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d210      	bcs.n	800709e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707c:	4b25      	ldr	r3, [pc, #148]	; (8007114 <HAL_RCC_ClockConfig+0x1ec>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f023 0207 	bic.w	r2, r3, #7
 8007084:	4923      	ldr	r1, [pc, #140]	; (8007114 <HAL_RCC_ClockConfig+0x1ec>)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	4313      	orrs	r3, r2
 800708a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708c:	4b21      	ldr	r3, [pc, #132]	; (8007114 <HAL_RCC_ClockConfig+0x1ec>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d001      	beq.n	800709e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e036      	b.n	800710c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070aa:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	4918      	ldr	r1, [pc, #96]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d009      	beq.n	80070dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070c8:	4b13      	ldr	r3, [pc, #76]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4910      	ldr	r1, [pc, #64]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070dc:	f000 f824 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 80070e0:	4602      	mov	r2, r0
 80070e2:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <HAL_RCC_ClockConfig+0x1f0>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	091b      	lsrs	r3, r3, #4
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	490b      	ldr	r1, [pc, #44]	; (800711c <HAL_RCC_ClockConfig+0x1f4>)
 80070ee:	5ccb      	ldrb	r3, [r1, r3]
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	fa22 f303 	lsr.w	r3, r2, r3
 80070f8:	4a09      	ldr	r2, [pc, #36]	; (8007120 <HAL_RCC_ClockConfig+0x1f8>)
 80070fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80070fc:	4b09      	ldr	r3, [pc, #36]	; (8007124 <HAL_RCC_ClockConfig+0x1fc>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f7fc fd5d 	bl	8003bc0 <HAL_InitTick>
 8007106:	4603      	mov	r3, r0
 8007108:	72fb      	strb	r3, [r7, #11]

  return status;
 800710a:	7afb      	ldrb	r3, [r7, #11]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	40022000 	.word	0x40022000
 8007118:	40021000 	.word	0x40021000
 800711c:	0801688c 	.word	0x0801688c
 8007120:	20000000 	.word	0x20000000
 8007124:	20000004 	.word	0x20000004

08007128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007128:	b480      	push	{r7}
 800712a:	b089      	sub	sp, #36	; 0x24
 800712c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	61fb      	str	r3, [r7, #28]
 8007132:	2300      	movs	r3, #0
 8007134:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007136:	4b3e      	ldr	r3, [pc, #248]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 030c 	and.w	r3, r3, #12
 800713e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007140:	4b3b      	ldr	r3, [pc, #236]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d005      	beq.n	800715c <HAL_RCC_GetSysClockFreq+0x34>
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	2b0c      	cmp	r3, #12
 8007154:	d121      	bne.n	800719a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d11e      	bne.n	800719a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800715c:	4b34      	ldr	r3, [pc, #208]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b00      	cmp	r3, #0
 8007166:	d107      	bne.n	8007178 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007168:	4b31      	ldr	r3, [pc, #196]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 800716a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800716e:	0a1b      	lsrs	r3, r3, #8
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	e005      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007178:	4b2d      	ldr	r3, [pc, #180]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007184:	4a2b      	ldr	r2, [pc, #172]	; (8007234 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10d      	bne.n	80071b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007198:	e00a      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b04      	cmp	r3, #4
 800719e:	d102      	bne.n	80071a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <HAL_RCC_GetSysClockFreq+0x110>)
 80071a2:	61bb      	str	r3, [r7, #24]
 80071a4:	e004      	b.n	80071b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d101      	bne.n	80071b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071ac:	4b23      	ldr	r3, [pc, #140]	; (800723c <HAL_RCC_GetSysClockFreq+0x114>)
 80071ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b0c      	cmp	r3, #12
 80071b4:	d134      	bne.n	8007220 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071b6:	4b1e      	ldr	r3, [pc, #120]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d003      	beq.n	80071ce <HAL_RCC_GetSysClockFreq+0xa6>
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d003      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0xac>
 80071cc:	e005      	b.n	80071da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80071ce:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <HAL_RCC_GetSysClockFreq+0x110>)
 80071d0:	617b      	str	r3, [r7, #20]
      break;
 80071d2:	e005      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80071d4:	4b19      	ldr	r3, [pc, #100]	; (800723c <HAL_RCC_GetSysClockFreq+0x114>)
 80071d6:	617b      	str	r3, [r7, #20]
      break;
 80071d8:	e002      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	617b      	str	r3, [r7, #20]
      break;
 80071de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071e0:	4b13      	ldr	r3, [pc, #76]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	3301      	adds	r3, #1
 80071ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80071ee:	4b10      	ldr	r3, [pc, #64]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	fb03 f202 	mul.w	r2, r3, r2
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	fbb2 f3f3 	udiv	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007206:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <HAL_RCC_GetSysClockFreq+0x108>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	0e5b      	lsrs	r3, r3, #25
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	3301      	adds	r3, #1
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	fbb2 f3f3 	udiv	r3, r2, r3
 800721e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007220:	69bb      	ldr	r3, [r7, #24]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3724      	adds	r7, #36	; 0x24
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40021000 	.word	0x40021000
 8007234:	080168a4 	.word	0x080168a4
 8007238:	00f42400 	.word	0x00f42400
 800723c:	00b71b00 	.word	0x00b71b00

08007240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007244:	4b03      	ldr	r3, [pc, #12]	; (8007254 <HAL_RCC_GetHCLKFreq+0x14>)
 8007246:	681b      	ldr	r3, [r3, #0]
}
 8007248:	4618      	mov	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000000 	.word	0x20000000

08007258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800725c:	f7ff fff0 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 8007260:	4602      	mov	r2, r0
 8007262:	4b06      	ldr	r3, [pc, #24]	; (800727c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	4904      	ldr	r1, [pc, #16]	; (8007280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800726e:	5ccb      	ldrb	r3, [r1, r3]
 8007270:	f003 031f 	and.w	r3, r3, #31
 8007274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007278:	4618      	mov	r0, r3
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40021000 	.word	0x40021000
 8007280:	0801689c 	.word	0x0801689c

08007284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007288:	f7ff ffda 	bl	8007240 <HAL_RCC_GetHCLKFreq>
 800728c:	4602      	mov	r2, r0
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	0adb      	lsrs	r3, r3, #11
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	4904      	ldr	r1, [pc, #16]	; (80072ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800729a:	5ccb      	ldrb	r3, [r1, r3]
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40021000 	.word	0x40021000
 80072ac:	0801689c 	.word	0x0801689c

080072b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80072bc:	4b2a      	ldr	r3, [pc, #168]	; (8007368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80072c8:	f7ff f9de 	bl	8006688 <HAL_PWREx_GetVoltageRange>
 80072cc:	6178      	str	r0, [r7, #20]
 80072ce:	e014      	b.n	80072fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80072d0:	4b25      	ldr	r3, [pc, #148]	; (8007368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d4:	4a24      	ldr	r2, [pc, #144]	; (8007368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072da:	6593      	str	r3, [r2, #88]	; 0x58
 80072dc:	4b22      	ldr	r3, [pc, #136]	; (8007368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80072e8:	f7ff f9ce 	bl	8006688 <HAL_PWREx_GetVoltageRange>
 80072ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80072ee:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f2:	4a1d      	ldr	r2, [pc, #116]	; (8007368 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007300:	d10b      	bne.n	800731a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b80      	cmp	r3, #128	; 0x80
 8007306:	d919      	bls.n	800733c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2ba0      	cmp	r3, #160	; 0xa0
 800730c:	d902      	bls.n	8007314 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800730e:	2302      	movs	r3, #2
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	e013      	b.n	800733c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007314:	2301      	movs	r3, #1
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	e010      	b.n	800733c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b80      	cmp	r3, #128	; 0x80
 800731e:	d902      	bls.n	8007326 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007320:	2303      	movs	r3, #3
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	e00a      	b.n	800733c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b80      	cmp	r3, #128	; 0x80
 800732a:	d102      	bne.n	8007332 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800732c:	2302      	movs	r3, #2
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	e004      	b.n	800733c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b70      	cmp	r3, #112	; 0x70
 8007336:	d101      	bne.n	800733c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007338:	2301      	movs	r3, #1
 800733a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800733c:	4b0b      	ldr	r3, [pc, #44]	; (800736c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f023 0207 	bic.w	r2, r3, #7
 8007344:	4909      	ldr	r1, [pc, #36]	; (800736c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800734c:	4b07      	ldr	r3, [pc, #28]	; (800736c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	429a      	cmp	r2, r3
 8007358:	d001      	beq.n	800735e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40021000 	.word	0x40021000
 800736c:	40022000 	.word	0x40022000

08007370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007378:	2300      	movs	r3, #0
 800737a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800737c:	2300      	movs	r3, #0
 800737e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007388:	2b00      	cmp	r3, #0
 800738a:	d041      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007390:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007394:	d02a      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007396:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800739a:	d824      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800739c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073a0:	d008      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80073a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073a6:	d81e      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80073ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073b0:	d010      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073b2:	e018      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80073b4:	4b86      	ldr	r3, [pc, #536]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4a85      	ldr	r2, [pc, #532]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073c0:	e015      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3304      	adds	r3, #4
 80073c6:	2100      	movs	r1, #0
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 f829 	bl	8008420 <RCCEx_PLLSAI1_Config>
 80073ce:	4603      	mov	r3, r0
 80073d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073d2:	e00c      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3320      	adds	r3, #32
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f001 f914 	bl	8008608 <RCCEx_PLLSAI2_Config>
 80073e0:	4603      	mov	r3, r0
 80073e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073e4:	e003      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	74fb      	strb	r3, [r7, #19]
      break;
 80073ea:	e000      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80073ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ee:	7cfb      	ldrb	r3, [r7, #19]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073f4:	4b76      	ldr	r3, [pc, #472]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007402:	4973      	ldr	r1, [pc, #460]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007404:	4313      	orrs	r3, r2
 8007406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800740a:	e001      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740c:	7cfb      	ldrb	r3, [r7, #19]
 800740e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d041      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007420:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007424:	d02a      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007426:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800742a:	d824      	bhi.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800742c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007430:	d008      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007432:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007436:	d81e      	bhi.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800743c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007440:	d010      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007442:	e018      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007444:	4b62      	ldr	r3, [pc, #392]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	4a61      	ldr	r2, [pc, #388]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800744a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800744e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007450:	e015      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3304      	adds	r3, #4
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f000 ffe1 	bl	8008420 <RCCEx_PLLSAI1_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007462:	e00c      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3320      	adds	r3, #32
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f001 f8cc 	bl	8008608 <RCCEx_PLLSAI2_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007474:	e003      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	74fb      	strb	r3, [r7, #19]
      break;
 800747a:	e000      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800747c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800747e:	7cfb      	ldrb	r3, [r7, #19]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10b      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007484:	4b52      	ldr	r3, [pc, #328]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800748a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007492:	494f      	ldr	r1, [pc, #316]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007494:	4313      	orrs	r3, r2
 8007496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800749a:	e001      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749c:	7cfb      	ldrb	r3, [r7, #19]
 800749e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 80a0 	beq.w	80075ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074ae:	2300      	movs	r3, #0
 80074b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80074b2:	4b47      	ldr	r3, [pc, #284]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80074c2:	2300      	movs	r3, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00d      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074c8:	4b41      	ldr	r3, [pc, #260]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074cc:	4a40      	ldr	r2, [pc, #256]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074d2:	6593      	str	r3, [r2, #88]	; 0x58
 80074d4:	4b3e      	ldr	r3, [pc, #248]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074dc:	60bb      	str	r3, [r7, #8]
 80074de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074e0:	2301      	movs	r3, #1
 80074e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074e4:	4b3b      	ldr	r3, [pc, #236]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a3a      	ldr	r2, [pc, #232]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80074ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074f0:	f7fc fbb6 	bl	8003c60 <HAL_GetTick>
 80074f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80074f6:	e009      	b.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f8:	f7fc fbb2 	bl	8003c60 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d902      	bls.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	74fb      	strb	r3, [r7, #19]
        break;
 800750a:	e005      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800750c:	4b31      	ldr	r3, [pc, #196]	; (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0ef      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007518:	7cfb      	ldrb	r3, [r7, #19]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d15c      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800751e:	4b2c      	ldr	r3, [pc, #176]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007528:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01f      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	429a      	cmp	r2, r3
 800753a:	d019      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800753c:	4b24      	ldr	r3, [pc, #144]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800753e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007546:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007548:	4b21      	ldr	r3, [pc, #132]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754e:	4a20      	ldr	r2, [pc, #128]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007558:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755e:	4a1c      	ldr	r2, [pc, #112]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007568:	4a19      	ldr	r2, [pc, #100]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d016      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800757a:	f7fc fb71 	bl	8003c60 <HAL_GetTick>
 800757e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007580:	e00b      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007582:	f7fc fb6d 	bl	8003c60 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007590:	4293      	cmp	r3, r2
 8007592:	d902      	bls.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	74fb      	strb	r3, [r7, #19]
            break;
 8007598:	e006      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800759a:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800759c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0ec      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80075a8:	7cfb      	ldrb	r3, [r7, #19]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10c      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075ae:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075be:	4904      	ldr	r1, [pc, #16]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80075c6:	e009      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075c8:	7cfb      	ldrb	r3, [r7, #19]
 80075ca:	74bb      	strb	r3, [r7, #18]
 80075cc:	e006      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80075ce:	bf00      	nop
 80075d0:	40021000 	.word	0x40021000
 80075d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d8:	7cfb      	ldrb	r3, [r7, #19]
 80075da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075dc:	7c7b      	ldrb	r3, [r7, #17]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d105      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075e2:	4b9e      	ldr	r3, [pc, #632]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	4a9d      	ldr	r2, [pc, #628]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075fa:	4b98      	ldr	r3, [pc, #608]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007600:	f023 0203 	bic.w	r2, r3, #3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	4994      	ldr	r1, [pc, #592]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800760a:	4313      	orrs	r3, r2
 800760c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800761c:	4b8f      	ldr	r3, [pc, #572]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800761e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007622:	f023 020c 	bic.w	r2, r3, #12
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	498c      	ldr	r1, [pc, #560]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800762c:	4313      	orrs	r3, r2
 800762e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800763e:	4b87      	ldr	r3, [pc, #540]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007644:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	4983      	ldr	r1, [pc, #524]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00a      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007660:	4b7e      	ldr	r3, [pc, #504]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007666:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	497b      	ldr	r1, [pc, #492]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007670:	4313      	orrs	r3, r2
 8007672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00a      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007682:	4b76      	ldr	r3, [pc, #472]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007688:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007690:	4972      	ldr	r1, [pc, #456]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007692:	4313      	orrs	r3, r2
 8007694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00a      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076a4:	4b6d      	ldr	r3, [pc, #436]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b2:	496a      	ldr	r1, [pc, #424]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076c6:	4b65      	ldr	r3, [pc, #404]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d4:	4961      	ldr	r1, [pc, #388]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00a      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076e8:	4b5c      	ldr	r3, [pc, #368]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f6:	4959      	ldr	r1, [pc, #356]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800770a:	4b54      	ldr	r3, [pc, #336]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800770c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007710:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007718:	4950      	ldr	r1, [pc, #320]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00a      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800772c:	4b4b      	ldr	r3, [pc, #300]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007732:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773a:	4948      	ldr	r1, [pc, #288]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800774e:	4b43      	ldr	r3, [pc, #268]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775c:	493f      	ldr	r1, [pc, #252]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800775e:	4313      	orrs	r3, r2
 8007760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d028      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007770:	4b3a      	ldr	r3, [pc, #232]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777e:	4937      	ldr	r1, [pc, #220]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800778e:	d106      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007790:	4b32      	ldr	r3, [pc, #200]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	4a31      	ldr	r2, [pc, #196]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779a:	60d3      	str	r3, [r2, #12]
 800779c:	e011      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077a6:	d10c      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3304      	adds	r3, #4
 80077ac:	2101      	movs	r1, #1
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fe36 	bl	8008420 <RCCEx_PLLSAI1_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80077b8:	7cfb      	ldrb	r3, [r7, #19]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80077be:	7cfb      	ldrb	r3, [r7, #19]
 80077c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d028      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077ce:	4b23      	ldr	r3, [pc, #140]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077dc:	491f      	ldr	r1, [pc, #124]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077ec:	d106      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077ee:	4b1b      	ldr	r3, [pc, #108]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	4a1a      	ldr	r2, [pc, #104]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077f8:	60d3      	str	r3, [r2, #12]
 80077fa:	e011      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007804:	d10c      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3304      	adds	r3, #4
 800780a:	2101      	movs	r1, #1
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fe07 	bl	8008420 <RCCEx_PLLSAI1_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007816:	7cfb      	ldrb	r3, [r7, #19]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800781c:	7cfb      	ldrb	r3, [r7, #19]
 800781e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d02b      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800782c:	4b0b      	ldr	r3, [pc, #44]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783a:	4908      	ldr	r1, [pc, #32]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800784a:	d109      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800784c:	4b03      	ldr	r3, [pc, #12]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	4a02      	ldr	r2, [pc, #8]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007856:	60d3      	str	r3, [r2, #12]
 8007858:	e014      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800785a:	bf00      	nop
 800785c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007868:	d10c      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3304      	adds	r3, #4
 800786e:	2101      	movs	r1, #1
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fdd5 	bl	8008420 <RCCEx_PLLSAI1_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800787a:	7cfb      	ldrb	r3, [r7, #19]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007880:	7cfb      	ldrb	r3, [r7, #19]
 8007882:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d02f      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007890:	4b2b      	ldr	r3, [pc, #172]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007896:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800789e:	4928      	ldr	r1, [pc, #160]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ae:	d10d      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3304      	adds	r3, #4
 80078b4:	2102      	movs	r1, #2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fdb2 	bl	8008420 <RCCEx_PLLSAI1_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078c0:	7cfb      	ldrb	r3, [r7, #19]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d014      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80078c6:	7cfb      	ldrb	r3, [r7, #19]
 80078c8:	74bb      	strb	r3, [r7, #18]
 80078ca:	e011      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d4:	d10c      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3320      	adds	r3, #32
 80078da:	2102      	movs	r1, #2
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fe93 	bl	8008608 <RCCEx_PLLSAI2_Config>
 80078e2:	4603      	mov	r3, r0
 80078e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078e6:	7cfb      	ldrb	r3, [r7, #19]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80078ec:	7cfb      	ldrb	r3, [r7, #19]
 80078ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00a      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078fc:	4b10      	ldr	r3, [pc, #64]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007902:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800790a:	490d      	ldr	r1, [pc, #52]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800790c:	4313      	orrs	r3, r2
 800790e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800791e:	4b08      	ldr	r3, [pc, #32]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007924:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800792e:	4904      	ldr	r1, [pc, #16]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007930:	4313      	orrs	r3, r2
 8007932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007936:	7cbb      	ldrb	r3, [r7, #18]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	40021000 	.word	0x40021000

08007944 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007956:	d13e      	bne.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007958:	4bb2      	ldr	r3, [pc, #712]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800795a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007962:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800796a:	d028      	beq.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007972:	f200 8542 	bhi.w	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797c:	d005      	beq.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007984:	d00e      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007986:	f000 bd38 	b.w	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800798a:	4ba6      	ldr	r3, [pc, #664]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b02      	cmp	r3, #2
 8007996:	f040 8532 	bne.w	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800799a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800799e:	61fb      	str	r3, [r7, #28]
      break;
 80079a0:	f000 bd2d 	b.w	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80079a4:	4b9f      	ldr	r3, [pc, #636]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80079a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	f040 8527 	bne.w	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80079b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80079b8:	61fb      	str	r3, [r7, #28]
      break;
 80079ba:	f000 bd22 	b.w	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80079be:	4b99      	ldr	r3, [pc, #612]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ca:	f040 851c 	bne.w	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80079ce:	4b96      	ldr	r3, [pc, #600]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80079d0:	61fb      	str	r3, [r7, #28]
      break;
 80079d2:	f000 bd18 	b.w	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079d6:	4b93      	ldr	r3, [pc, #588]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d036      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d840      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d003      	beq.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d020      	beq.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80079f8:	e039      	b.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80079fa:	4b8a      	ldr	r3, [pc, #552]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d116      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007a06:	4b87      	ldr	r3, [pc, #540]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0308 	and.w	r3, r3, #8
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007a12:	4b84      	ldr	r3, [pc, #528]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	091b      	lsrs	r3, r3, #4
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	e005      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007a1e:	4b81      	ldr	r3, [pc, #516]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a24:	0a1b      	lsrs	r3, r3, #8
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	4a80      	ldr	r2, [pc, #512]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8007a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007a32:	e01f      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	61bb      	str	r3, [r7, #24]
      break;
 8007a38:	e01c      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a3a:	4b7a      	ldr	r3, [pc, #488]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a46:	d102      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8007a48:	4b79      	ldr	r3, [pc, #484]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007a4a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007a4c:	e012      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61bb      	str	r3, [r7, #24]
      break;
 8007a52:	e00f      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a54:	4b73      	ldr	r3, [pc, #460]	; (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a60:	d102      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8007a62:	4b74      	ldr	r3, [pc, #464]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007a64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007a66:	e005      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61bb      	str	r3, [r7, #24]
      break;
 8007a6c:	e002      	b.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61bb      	str	r3, [r7, #24]
      break;
 8007a72:	bf00      	nop
    }

    switch(PeriphClk)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a7a:	f000 80dd 	beq.w	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a84:	f200 84c1 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a8e:	f000 80d3 	beq.w	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a98:	f200 84b7 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa2:	f000 835f 	beq.w	8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aac:	f200 84ad 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab6:	f000 847e 	beq.w	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac0:	f200 84a3 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aca:	f000 82cd 	beq.w	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ad4:	f200 8499 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ade:	f000 80ab 	beq.w	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae8:	f200 848f 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af2:	f000 8090 	beq.w	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afc:	f200 8485 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b06:	d07f      	beq.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b0e:	f200 847c 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b18:	f000 8403 	beq.w	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b22:	f200 8472 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b2c:	f000 83af 	beq.w	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b36:	f200 8468 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b40:	f000 8379 	beq.w	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b4a:	f200 845e 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b80      	cmp	r3, #128	; 0x80
 8007b52:	f000 8344 	beq.w	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b80      	cmp	r3, #128	; 0x80
 8007b5a:	f200 8456 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d84b      	bhi.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 844f 	beq.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	2b1f      	cmp	r3, #31
 8007b72:	f200 844a 	bhi.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007b76:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007d65 	.word	0x08007d65
 8007b80:	08007dd3 	.word	0x08007dd3
 8007b84:	0800840b 	.word	0x0800840b
 8007b88:	08007e67 	.word	0x08007e67
 8007b8c:	0800840b 	.word	0x0800840b
 8007b90:	0800840b 	.word	0x0800840b
 8007b94:	0800840b 	.word	0x0800840b
 8007b98:	08007eed 	.word	0x08007eed
 8007b9c:	0800840b 	.word	0x0800840b
 8007ba0:	0800840b 	.word	0x0800840b
 8007ba4:	0800840b 	.word	0x0800840b
 8007ba8:	0800840b 	.word	0x0800840b
 8007bac:	0800840b 	.word	0x0800840b
 8007bb0:	0800840b 	.word	0x0800840b
 8007bb4:	0800840b 	.word	0x0800840b
 8007bb8:	08007f65 	.word	0x08007f65
 8007bbc:	0800840b 	.word	0x0800840b
 8007bc0:	0800840b 	.word	0x0800840b
 8007bc4:	0800840b 	.word	0x0800840b
 8007bc8:	0800840b 	.word	0x0800840b
 8007bcc:	0800840b 	.word	0x0800840b
 8007bd0:	0800840b 	.word	0x0800840b
 8007bd4:	0800840b 	.word	0x0800840b
 8007bd8:	0800840b 	.word	0x0800840b
 8007bdc:	0800840b 	.word	0x0800840b
 8007be0:	0800840b 	.word	0x0800840b
 8007be4:	0800840b 	.word	0x0800840b
 8007be8:	0800840b 	.word	0x0800840b
 8007bec:	0800840b 	.word	0x0800840b
 8007bf0:	0800840b 	.word	0x0800840b
 8007bf4:	0800840b 	.word	0x0800840b
 8007bf8:	08007fe7 	.word	0x08007fe7
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	f000 82c1 	beq.w	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007c04:	f000 bc01 	b.w	800840a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007c08:	69b9      	ldr	r1, [r7, #24]
 8007c0a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c0e:	f000 fdd9 	bl	80087c4 <RCCEx_GetSAIxPeriphCLKFreq>
 8007c12:	61f8      	str	r0, [r7, #28]
      break;
 8007c14:	e3fa      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007c16:	69b9      	ldr	r1, [r7, #24]
 8007c18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007c1c:	f000 fdd2 	bl	80087c4 <RCCEx_GetSAIxPeriphCLKFreq>
 8007c20:	61f8      	str	r0, [r7, #28]
      break;
 8007c22:	e3f3      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007c24:	40021000 	.word	0x40021000
 8007c28:	0005b8d8 	.word	0x0005b8d8
 8007c2c:	080168a4 	.word	0x080168a4
 8007c30:	00f42400 	.word	0x00f42400
 8007c34:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007c38:	4ba9      	ldr	r3, [pc, #676]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007c42:	613b      	str	r3, [r7, #16]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c4a:	d00c      	beq.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c52:	d87f      	bhi.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c5a:	d04e      	beq.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c62:	d01d      	beq.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8007c64:	e076      	b.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007c66:	4b9e      	ldr	r3, [pc, #632]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d172      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007c72:	4b9b      	ldr	r3, [pc, #620]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0308 	and.w	r3, r3, #8
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8007c7e:	4b98      	ldr	r3, [pc, #608]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	091b      	lsrs	r3, r3, #4
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	e005      	b.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8007c8a:	4b95      	ldr	r3, [pc, #596]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c90:	0a1b      	lsrs	r3, r3, #8
 8007c92:	f003 030f 	and.w	r3, r3, #15
 8007c96:	4a93      	ldr	r2, [pc, #588]	; (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c9c:	61fb      	str	r3, [r7, #28]
          break;
 8007c9e:	e05b      	b.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007ca0:	4b8f      	ldr	r3, [pc, #572]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cac:	d156      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007cae:	4b8c      	ldr	r3, [pc, #560]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cba:	d14f      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007cbc:	4b88      	ldr	r3, [pc, #544]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	0a1b      	lsrs	r3, r3, #8
 8007cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	fb03 f202 	mul.w	r2, r3, r2
 8007cd0:	4b83      	ldr	r3, [pc, #524]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	091b      	lsrs	r3, r3, #4
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	3301      	adds	r3, #1
 8007cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007ce2:	4b7f      	ldr	r3, [pc, #508]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	0d5b      	lsrs	r3, r3, #21
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	3301      	adds	r3, #1
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf6:	61fb      	str	r3, [r7, #28]
          break;
 8007cf8:	e030      	b.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007cfa:	4b79      	ldr	r3, [pc, #484]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d06:	d12b      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007d08:	4b75      	ldr	r3, [pc, #468]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d14:	d124      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007d16:	4b72      	ldr	r3, [pc, #456]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d20:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	fb03 f202 	mul.w	r2, r3, r2
 8007d2a:	4b6d      	ldr	r3, [pc, #436]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	091b      	lsrs	r3, r3, #4
 8007d30:	f003 0307 	and.w	r3, r3, #7
 8007d34:	3301      	adds	r3, #1
 8007d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007d3c:	4b68      	ldr	r3, [pc, #416]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	0d5b      	lsrs	r3, r3, #21
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	3301      	adds	r3, #1
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d50:	61fb      	str	r3, [r7, #28]
          break;
 8007d52:	e005      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8007d54:	bf00      	nop
 8007d56:	e359      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d58:	bf00      	nop
 8007d5a:	e357      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d5c:	bf00      	nop
 8007d5e:	e355      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007d60:	bf00      	nop
        break;
 8007d62:	e353      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007d64:	4b5e      	ldr	r3, [pc, #376]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6a:	f003 0303 	and.w	r3, r3, #3
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d827      	bhi.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8007d76:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007d8d 	.word	0x08007d8d
 8007d80:	08007d95 	.word	0x08007d95
 8007d84:	08007d9d 	.word	0x08007d9d
 8007d88:	08007db1 	.word	0x08007db1
          frequency = HAL_RCC_GetPCLK2Freq();
 8007d8c:	f7ff fa7a 	bl	8007284 <HAL_RCC_GetPCLK2Freq>
 8007d90:	61f8      	str	r0, [r7, #28]
          break;
 8007d92:	e01d      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d94:	f7ff f9c8 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 8007d98:	61f8      	str	r0, [r7, #28]
          break;
 8007d9a:	e019      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d9c:	4b50      	ldr	r3, [pc, #320]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da8:	d10f      	bne.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8007daa:	4b4f      	ldr	r3, [pc, #316]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007dac:	61fb      	str	r3, [r7, #28]
          break;
 8007dae:	e00c      	b.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007db0:	4b4b      	ldr	r3, [pc, #300]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d107      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8007dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dc2:	61fb      	str	r3, [r7, #28]
          break;
 8007dc4:	e003      	b.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8007dc6:	bf00      	nop
 8007dc8:	e320      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007dca:	bf00      	nop
 8007dcc:	e31e      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007dce:	bf00      	nop
        break;
 8007dd0:	e31c      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007dd2:	4b43      	ldr	r3, [pc, #268]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	613b      	str	r3, [r7, #16]
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b0c      	cmp	r3, #12
 8007de2:	d83a      	bhi.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007de4:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e21 	.word	0x08007e21
 8007df0:	08007e5b 	.word	0x08007e5b
 8007df4:	08007e5b 	.word	0x08007e5b
 8007df8:	08007e5b 	.word	0x08007e5b
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	08007e5b 	.word	0x08007e5b
 8007e04:	08007e5b 	.word	0x08007e5b
 8007e08:	08007e5b 	.word	0x08007e5b
 8007e0c:	08007e31 	.word	0x08007e31
 8007e10:	08007e5b 	.word	0x08007e5b
 8007e14:	08007e5b 	.word	0x08007e5b
 8007e18:	08007e5b 	.word	0x08007e5b
 8007e1c:	08007e45 	.word	0x08007e45
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e20:	f7ff fa1a 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8007e24:	61f8      	str	r0, [r7, #28]
          break;
 8007e26:	e01d      	b.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8007e28:	f7ff f97e 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 8007e2c:	61f8      	str	r0, [r7, #28]
          break;
 8007e2e:	e019      	b.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e30:	4b2b      	ldr	r3, [pc, #172]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e3c:	d10f      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8007e3e:	4b2a      	ldr	r3, [pc, #168]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007e40:	61fb      	str	r3, [r7, #28]
          break;
 8007e42:	e00c      	b.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e44:	4b26      	ldr	r3, [pc, #152]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d107      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8007e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e56:	61fb      	str	r3, [r7, #28]
          break;
 8007e58:	e003      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8007e5a:	bf00      	nop
 8007e5c:	e2d6      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007e5e:	bf00      	nop
 8007e60:	e2d4      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007e62:	bf00      	nop
        break;
 8007e64:	e2d2      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007e66:	4b1e      	ldr	r3, [pc, #120]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e70:	613b      	str	r3, [r7, #16]
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2b30      	cmp	r3, #48	; 0x30
 8007e76:	d021      	beq.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b30      	cmp	r3, #48	; 0x30
 8007e7c:	d829      	bhi.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d011      	beq.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	d823      	bhi.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	2b10      	cmp	r3, #16
 8007e94:	d004      	beq.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8007e96:	e01c      	b.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e98:	f7ff f9de 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8007e9c:	61f8      	str	r0, [r7, #28]
          break;
 8007e9e:	e01d      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ea0:	f7ff f942 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 8007ea4:	61f8      	str	r0, [r7, #28]
          break;
 8007ea6:	e019      	b.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ea8:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb4:	d10f      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007eb8:	61fb      	str	r3, [r7, #28]
          break;
 8007eba:	e00c      	b.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ebc:	4b08      	ldr	r3, [pc, #32]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d107      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8007eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ece:	61fb      	str	r3, [r7, #28]
          break;
 8007ed0:	e003      	b.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8007ed2:	bf00      	nop
 8007ed4:	e29a      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007ed6:	bf00      	nop
 8007ed8:	e298      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007eda:	bf00      	nop
        break;
 8007edc:	e296      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007ede:	bf00      	nop
 8007ee0:	40021000 	.word	0x40021000
 8007ee4:	080168a4 	.word	0x080168a4
 8007ee8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007eec:	4b9b      	ldr	r3, [pc, #620]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2bc0      	cmp	r3, #192	; 0xc0
 8007efc:	d021      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	2bc0      	cmp	r3, #192	; 0xc0
 8007f02:	d829      	bhi.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2b80      	cmp	r3, #128	; 0x80
 8007f08:	d011      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b80      	cmp	r3, #128	; 0x80
 8007f0e:	d823      	bhi.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b40      	cmp	r3, #64	; 0x40
 8007f1a:	d004      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8007f1c:	e01c      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f1e:	f7ff f99b 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8007f22:	61f8      	str	r0, [r7, #28]
          break;
 8007f24:	e01d      	b.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f26:	f7ff f8ff 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 8007f2a:	61f8      	str	r0, [r7, #28]
          break;
 8007f2c:	e019      	b.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f2e:	4b8b      	ldr	r3, [pc, #556]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f3a:	d10f      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8007f3c:	4b88      	ldr	r3, [pc, #544]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007f3e:	61fb      	str	r3, [r7, #28]
          break;
 8007f40:	e00c      	b.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f42:	4b86      	ldr	r3, [pc, #536]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d107      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8007f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f54:	61fb      	str	r3, [r7, #28]
          break;
 8007f56:	e003      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8007f58:	bf00      	nop
 8007f5a:	e257      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007f5c:	bf00      	nop
 8007f5e:	e255      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007f60:	bf00      	nop
        break;
 8007f62:	e253      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007f64:	4b7d      	ldr	r3, [pc, #500]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f6e:	613b      	str	r3, [r7, #16]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f76:	d025      	beq.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f7e:	d82c      	bhi.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f86:	d013      	beq.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f8e:	d824      	bhi.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9c:	d004      	beq.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8007f9e:	e01c      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007fa0:	f7ff f95a 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8007fa4:	61f8      	str	r0, [r7, #28]
          break;
 8007fa6:	e01d      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007fa8:	f7ff f8be 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 8007fac:	61f8      	str	r0, [r7, #28]
          break;
 8007fae:	e019      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fb0:	4b6a      	ldr	r3, [pc, #424]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fbc:	d10f      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8007fbe:	4b68      	ldr	r3, [pc, #416]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007fc0:	61fb      	str	r3, [r7, #28]
          break;
 8007fc2:	e00c      	b.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007fc4:	4b65      	ldr	r3, [pc, #404]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d107      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8007fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fd6:	61fb      	str	r3, [r7, #28]
          break;
 8007fd8:	e003      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8007fda:	bf00      	nop
 8007fdc:	e216      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007fde:	bf00      	nop
 8007fe0:	e214      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007fe2:	bf00      	nop
        break;
 8007fe4:	e212      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007fe6:	4b5d      	ldr	r3, [pc, #372]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ff0:	613b      	str	r3, [r7, #16]
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff8:	d025      	beq.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008000:	d82c      	bhi.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008008:	d013      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008010:	d824      	bhi.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801e:	d004      	beq.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8008020:	e01c      	b.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008022:	f7ff f919 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8008026:	61f8      	str	r0, [r7, #28]
          break;
 8008028:	e01d      	b.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 800802a:	f7ff f87d 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 800802e:	61f8      	str	r0, [r7, #28]
          break;
 8008030:	e019      	b.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008032:	4b4a      	ldr	r3, [pc, #296]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800803a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803e:	d10f      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8008040:	4b47      	ldr	r3, [pc, #284]	; (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8008042:	61fb      	str	r3, [r7, #28]
          break;
 8008044:	e00c      	b.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008046:	4b45      	ldr	r3, [pc, #276]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b02      	cmp	r3, #2
 8008052:	d107      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8008054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008058:	61fb      	str	r3, [r7, #28]
          break;
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 800805c:	bf00      	nop
 800805e:	e1d5      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008060:	bf00      	nop
 8008062:	e1d3      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008064:	bf00      	nop
        break;
 8008066:	e1d1      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008068:	4b3c      	ldr	r3, [pc, #240]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008072:	613b      	str	r3, [r7, #16]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800807a:	d00c      	beq.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008082:	d864      	bhi.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800808a:	d008      	beq.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008092:	d030      	beq.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8008094:	e05b      	b.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008096:	f7ff f847 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 800809a:	61f8      	str	r0, [r7, #28]
          break;
 800809c:	e05c      	b.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800809e:	4b2f      	ldr	r3, [pc, #188]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080aa:	d152      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80080ac:	4b2b      	ldr	r3, [pc, #172]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d04c      	beq.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80080b8:	4b28      	ldr	r3, [pc, #160]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	fb03 f202 	mul.w	r2, r3, r2
 80080cc:	4b23      	ldr	r3, [pc, #140]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	091b      	lsrs	r3, r3, #4
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	3301      	adds	r3, #1
 80080d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080dc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80080de:	4b1f      	ldr	r3, [pc, #124]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	0e5b      	lsrs	r3, r3, #25
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	3301      	adds	r3, #1
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f2:	61fb      	str	r3, [r7, #28]
          break;
 80080f4:	e02d      	b.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80080f6:	4b19      	ldr	r3, [pc, #100]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008102:	d128      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008104:	4b15      	ldr	r3, [pc, #84]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d022      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008110:	4b12      	ldr	r3, [pc, #72]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	0a1b      	lsrs	r3, r3, #8
 8008116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800811a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	fb03 f202 	mul.w	r2, r3, r2
 8008124:	4b0d      	ldr	r3, [pc, #52]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	091b      	lsrs	r3, r3, #4
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	3301      	adds	r3, #1
 8008130:	fbb2 f3f3 	udiv	r3, r2, r3
 8008134:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8008136:	4b09      	ldr	r3, [pc, #36]	; (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	0e5b      	lsrs	r3, r3, #25
 800813c:	f003 0303 	and.w	r3, r3, #3
 8008140:	3301      	adds	r3, #1
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	69ba      	ldr	r2, [r7, #24]
 8008146:	fbb2 f3f3 	udiv	r3, r2, r3
 800814a:	61fb      	str	r3, [r7, #28]
          break;
 800814c:	e003      	b.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800814e:	bf00      	nop
 8008150:	e15c      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008152:	bf00      	nop
 8008154:	e15a      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008156:	bf00      	nop
        break;
 8008158:	e158      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800815a:	bf00      	nop
 800815c:	40021000 	.word	0x40021000
 8008160:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8008164:	4b9d      	ldr	r3, [pc, #628]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800816e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d103      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008176:	f7ff f885 	bl	8007284 <HAL_RCC_GetPCLK2Freq>
 800817a:	61f8      	str	r0, [r7, #28]
        break;
 800817c:	e146      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800817e:	f7fe ffd3 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 8008182:	61f8      	str	r0, [r7, #28]
        break;
 8008184:	e142      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008186:	4b95      	ldr	r3, [pc, #596]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008198:	d013      	beq.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081a0:	d819      	bhi.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d004      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ae:	d004      	beq.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80081b0:	e011      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80081b2:	f7ff f851 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 80081b6:	61f8      	str	r0, [r7, #28]
          break;
 80081b8:	e010      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80081ba:	f7fe ffb5 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 80081be:	61f8      	str	r0, [r7, #28]
          break;
 80081c0:	e00c      	b.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081c2:	4b86      	ldr	r3, [pc, #536]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ce:	d104      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80081d0:	4b83      	ldr	r3, [pc, #524]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80081d2:	61fb      	str	r3, [r7, #28]
          break;
 80081d4:	e001      	b.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80081d6:	bf00      	nop
 80081d8:	e118      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80081da:	bf00      	nop
        break;
 80081dc:	e116      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80081de:	4b7f      	ldr	r3, [pc, #508]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081f0:	d013      	beq.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081f8:	d819      	bhi.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008206:	d004      	beq.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8008208:	e011      	b.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800820a:	f7ff f825 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 800820e:	61f8      	str	r0, [r7, #28]
          break;
 8008210:	e010      	b.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008212:	f7fe ff89 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 8008216:	61f8      	str	r0, [r7, #28]
          break;
 8008218:	e00c      	b.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800821a:	4b70      	ldr	r3, [pc, #448]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008226:	d104      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8008228:	4b6d      	ldr	r3, [pc, #436]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800822a:	61fb      	str	r3, [r7, #28]
          break;
 800822c:	e001      	b.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800822e:	bf00      	nop
 8008230:	e0ec      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008232:	bf00      	nop
        break;
 8008234:	e0ea      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008236:	4b69      	ldr	r3, [pc, #420]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008240:	613b      	str	r3, [r7, #16]
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008248:	d013      	beq.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008250:	d819      	bhi.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d004      	beq.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825e:	d004      	beq.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8008260:	e011      	b.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008262:	f7fe fff9 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8008266:	61f8      	str	r0, [r7, #28]
          break;
 8008268:	e010      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800826a:	f7fe ff5d 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 800826e:	61f8      	str	r0, [r7, #28]
          break;
 8008270:	e00c      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008272:	4b5a      	ldr	r3, [pc, #360]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800827a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827e:	d104      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8008280:	4b57      	ldr	r3, [pc, #348]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8008282:	61fb      	str	r3, [r7, #28]
          break;
 8008284:	e001      	b.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8008286:	bf00      	nop
 8008288:	e0c0      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800828a:	bf00      	nop
        break;
 800828c:	e0be      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800828e:	4b53      	ldr	r3, [pc, #332]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008294:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80082a0:	d02c      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80082a8:	d833      	bhi.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082b0:	d01a      	beq.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80082b8:	d82b      	bhi.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d004      	beq.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082c6:	d004      	beq.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80082c8:	e023      	b.n	8008312 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80082ca:	f7fe ffc5 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 80082ce:	61f8      	str	r0, [r7, #28]
          break;
 80082d0:	e026      	b.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80082d2:	4b42      	ldr	r3, [pc, #264]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80082d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d11a      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80082e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80082e4:	61fb      	str	r3, [r7, #28]
          break;
 80082e6:	e016      	b.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082e8:	4b3c      	ldr	r3, [pc, #240]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f4:	d111      	bne.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80082f6:	4b3a      	ldr	r3, [pc, #232]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80082f8:	61fb      	str	r3, [r7, #28]
          break;
 80082fa:	e00e      	b.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082fc:	4b37      	ldr	r3, [pc, #220]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80082fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b02      	cmp	r3, #2
 8008308:	d109      	bne.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800830a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830e:	61fb      	str	r3, [r7, #28]
          break;
 8008310:	e005      	b.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8008312:	bf00      	nop
 8008314:	e07a      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8008316:	bf00      	nop
 8008318:	e078      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800831a:	bf00      	nop
 800831c:	e076      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800831e:	bf00      	nop
        break;
 8008320:	e074      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008322:	4b2e      	ldr	r3, [pc, #184]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008328:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800832c:	613b      	str	r3, [r7, #16]
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008334:	d02c      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800833c:	d833      	bhi.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008344:	d01a      	beq.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800834c:	d82b      	bhi.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800835a:	d004      	beq.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 800835c:	e023      	b.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800835e:	f7fe ff7b 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 8008362:	61f8      	str	r0, [r7, #28]
          break;
 8008364:	e026      	b.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008366:	4b1d      	ldr	r3, [pc, #116]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b02      	cmp	r3, #2
 8008372:	d11a      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8008374:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008378:	61fb      	str	r3, [r7, #28]
          break;
 800837a:	e016      	b.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800837c:	4b17      	ldr	r3, [pc, #92]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008388:	d111      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800838a:	4b15      	ldr	r3, [pc, #84]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800838c:	61fb      	str	r3, [r7, #28]
          break;
 800838e:	e00e      	b.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008390:	4b12      	ldr	r3, [pc, #72]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8008392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b02      	cmp	r3, #2
 800839c:	d109      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800839e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083a2:	61fb      	str	r3, [r7, #28]
          break;
 80083a4:	e005      	b.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80083a6:	bf00      	nop
 80083a8:	e030      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80083aa:	bf00      	nop
 80083ac:	e02e      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80083ae:	bf00      	nop
 80083b0:	e02c      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80083b2:	bf00      	nop
        break;
 80083b4:	e02a      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083c0:	613b      	str	r3, [r7, #16]
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ce:	d009      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80083d0:	e012      	b.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80083d2:	f7fe ff41 	bl	8007258 <HAL_RCC_GetPCLK1Freq>
 80083d6:	61f8      	str	r0, [r7, #28]
          break;
 80083d8:	e00e      	b.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80083da:	bf00      	nop
 80083dc:	40021000 	.word	0x40021000
 80083e0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083e4:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f0:	d101      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80083f2:	4b0a      	ldr	r3, [pc, #40]	; (800841c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80083f4:	61fb      	str	r3, [r7, #28]
          break;
 80083f6:	bf00      	nop
        break;
 80083f8:	e008      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80083fa:	bf00      	nop
 80083fc:	e006      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80083fe:	bf00      	nop
 8008400:	e004      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8008402:	bf00      	nop
 8008404:	e002      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8008406:	bf00      	nop
 8008408:	e000      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800840a:	bf00      	nop
    }
  }

  return(frequency);
 800840c:	69fb      	ldr	r3, [r7, #28]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3720      	adds	r7, #32
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	40021000 	.word	0x40021000
 800841c:	00f42400 	.word	0x00f42400

08008420 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800842e:	4b75      	ldr	r3, [pc, #468]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f003 0303 	and.w	r3, r3, #3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d018      	beq.n	800846c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800843a:	4b72      	ldr	r3, [pc, #456]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f003 0203 	and.w	r2, r3, #3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d10d      	bne.n	8008466 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
       ||
 800844e:	2b00      	cmp	r3, #0
 8008450:	d009      	beq.n	8008466 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008452:	4b6c      	ldr	r3, [pc, #432]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	091b      	lsrs	r3, r3, #4
 8008458:	f003 0307 	and.w	r3, r3, #7
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
       ||
 8008462:	429a      	cmp	r2, r3
 8008464:	d047      	beq.n	80084f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	e044      	b.n	80084f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b03      	cmp	r3, #3
 8008472:	d018      	beq.n	80084a6 <RCCEx_PLLSAI1_Config+0x86>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d825      	bhi.n	80084c4 <RCCEx_PLLSAI1_Config+0xa4>
 8008478:	2b01      	cmp	r3, #1
 800847a:	d002      	beq.n	8008482 <RCCEx_PLLSAI1_Config+0x62>
 800847c:	2b02      	cmp	r3, #2
 800847e:	d009      	beq.n	8008494 <RCCEx_PLLSAI1_Config+0x74>
 8008480:	e020      	b.n	80084c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008482:	4b60      	ldr	r3, [pc, #384]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d11d      	bne.n	80084ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008492:	e01a      	b.n	80084ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008494:	4b5b      	ldr	r3, [pc, #364]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800849c:	2b00      	cmp	r3, #0
 800849e:	d116      	bne.n	80084ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084a4:	e013      	b.n	80084ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80084a6:	4b57      	ldr	r3, [pc, #348]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10f      	bne.n	80084d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80084b2:	4b54      	ldr	r3, [pc, #336]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084c2:	e006      	b.n	80084d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
      break;
 80084c8:	e004      	b.n	80084d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80084ca:	bf00      	nop
 80084cc:	e002      	b.n	80084d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80084ce:	bf00      	nop
 80084d0:	e000      	b.n	80084d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80084d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10d      	bne.n	80084f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80084da:	4b4a      	ldr	r3, [pc, #296]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6819      	ldr	r1, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	011b      	lsls	r3, r3, #4
 80084ee:	430b      	orrs	r3, r1
 80084f0:	4944      	ldr	r1, [pc, #272]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d17d      	bne.n	80085f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80084fc:	4b41      	ldr	r3, [pc, #260]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a40      	ldr	r2, [pc, #256]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008502:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008508:	f7fb fbaa 	bl	8003c60 <HAL_GetTick>
 800850c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800850e:	e009      	b.n	8008524 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008510:	f7fb fba6 	bl	8003c60 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b02      	cmp	r3, #2
 800851c:	d902      	bls.n	8008524 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	73fb      	strb	r3, [r7, #15]
        break;
 8008522:	e005      	b.n	8008530 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008524:	4b37      	ldr	r3, [pc, #220]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1ef      	bne.n	8008510 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008530:	7bfb      	ldrb	r3, [r7, #15]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d160      	bne.n	80085f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d111      	bne.n	8008560 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800853c:	4b31      	ldr	r3, [pc, #196]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6892      	ldr	r2, [r2, #8]
 800854c:	0211      	lsls	r1, r2, #8
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	68d2      	ldr	r2, [r2, #12]
 8008552:	0912      	lsrs	r2, r2, #4
 8008554:	0452      	lsls	r2, r2, #17
 8008556:	430a      	orrs	r2, r1
 8008558:	492a      	ldr	r1, [pc, #168]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 800855a:	4313      	orrs	r3, r2
 800855c:	610b      	str	r3, [r1, #16]
 800855e:	e027      	b.n	80085b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d112      	bne.n	800858c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008566:	4b27      	ldr	r3, [pc, #156]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800856e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6892      	ldr	r2, [r2, #8]
 8008576:	0211      	lsls	r1, r2, #8
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	6912      	ldr	r2, [r2, #16]
 800857c:	0852      	lsrs	r2, r2, #1
 800857e:	3a01      	subs	r2, #1
 8008580:	0552      	lsls	r2, r2, #21
 8008582:	430a      	orrs	r2, r1
 8008584:	491f      	ldr	r1, [pc, #124]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008586:	4313      	orrs	r3, r2
 8008588:	610b      	str	r3, [r1, #16]
 800858a:	e011      	b.n	80085b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800858c:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008594:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6892      	ldr	r2, [r2, #8]
 800859c:	0211      	lsls	r1, r2, #8
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6952      	ldr	r2, [r2, #20]
 80085a2:	0852      	lsrs	r2, r2, #1
 80085a4:	3a01      	subs	r2, #1
 80085a6:	0652      	lsls	r2, r2, #25
 80085a8:	430a      	orrs	r2, r1
 80085aa:	4916      	ldr	r1, [pc, #88]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80085b0:	4b14      	ldr	r3, [pc, #80]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a13      	ldr	r2, [pc, #76]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085bc:	f7fb fb50 	bl	8003c60 <HAL_GetTick>
 80085c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085c2:	e009      	b.n	80085d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80085c4:	f7fb fb4c 	bl	8003c60 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d902      	bls.n	80085d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	73fb      	strb	r3, [r7, #15]
          break;
 80085d6:	e005      	b.n	80085e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80085d8:	4b0a      	ldr	r3, [pc, #40]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0ef      	beq.n	80085c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	4904      	ldr	r1, [pc, #16]	; (8008604 <RCCEx_PLLSAI1_Config+0x1e4>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	40021000 	.word	0x40021000

08008608 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008616:	4b6a      	ldr	r3, [pc, #424]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	f003 0303 	and.w	r3, r3, #3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d018      	beq.n	8008654 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008622:	4b67      	ldr	r3, [pc, #412]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f003 0203 	and.w	r2, r3, #3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d10d      	bne.n	800864e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
       ||
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800863a:	4b61      	ldr	r3, [pc, #388]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	091b      	lsrs	r3, r3, #4
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
       ||
 800864a:	429a      	cmp	r2, r3
 800864c:	d047      	beq.n	80086de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	73fb      	strb	r3, [r7, #15]
 8008652:	e044      	b.n	80086de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b03      	cmp	r3, #3
 800865a:	d018      	beq.n	800868e <RCCEx_PLLSAI2_Config+0x86>
 800865c:	2b03      	cmp	r3, #3
 800865e:	d825      	bhi.n	80086ac <RCCEx_PLLSAI2_Config+0xa4>
 8008660:	2b01      	cmp	r3, #1
 8008662:	d002      	beq.n	800866a <RCCEx_PLLSAI2_Config+0x62>
 8008664:	2b02      	cmp	r3, #2
 8008666:	d009      	beq.n	800867c <RCCEx_PLLSAI2_Config+0x74>
 8008668:	e020      	b.n	80086ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800866a:	4b55      	ldr	r3, [pc, #340]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d11d      	bne.n	80086b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800867a:	e01a      	b.n	80086b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800867c:	4b50      	ldr	r3, [pc, #320]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008684:	2b00      	cmp	r3, #0
 8008686:	d116      	bne.n	80086b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800868c:	e013      	b.n	80086b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800868e:	4b4c      	ldr	r3, [pc, #304]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10f      	bne.n	80086ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800869a:	4b49      	ldr	r3, [pc, #292]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d109      	bne.n	80086ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80086aa:	e006      	b.n	80086ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	73fb      	strb	r3, [r7, #15]
      break;
 80086b0:	e004      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80086b2:	bf00      	nop
 80086b4:	e002      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80086b6:	bf00      	nop
 80086b8:	e000      	b.n	80086bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80086ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10d      	bne.n	80086de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80086c2:	4b3f      	ldr	r3, [pc, #252]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6819      	ldr	r1, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	430b      	orrs	r3, r1
 80086d8:	4939      	ldr	r1, [pc, #228]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d167      	bne.n	80087b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80086e4:	4b36      	ldr	r3, [pc, #216]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a35      	ldr	r2, [pc, #212]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80086ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086f0:	f7fb fab6 	bl	8003c60 <HAL_GetTick>
 80086f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80086f6:	e009      	b.n	800870c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80086f8:	f7fb fab2 	bl	8003c60 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d902      	bls.n	800870c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	73fb      	strb	r3, [r7, #15]
        break;
 800870a:	e005      	b.n	8008718 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800870c:	4b2c      	ldr	r3, [pc, #176]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1ef      	bne.n	80086f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d14a      	bne.n	80087b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d111      	bne.n	8008748 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008724:	4b26      	ldr	r3, [pc, #152]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800872c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6892      	ldr	r2, [r2, #8]
 8008734:	0211      	lsls	r1, r2, #8
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	68d2      	ldr	r2, [r2, #12]
 800873a:	0912      	lsrs	r2, r2, #4
 800873c:	0452      	lsls	r2, r2, #17
 800873e:	430a      	orrs	r2, r1
 8008740:	491f      	ldr	r1, [pc, #124]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008742:	4313      	orrs	r3, r2
 8008744:	614b      	str	r3, [r1, #20]
 8008746:	e011      	b.n	800876c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008748:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008750:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6892      	ldr	r2, [r2, #8]
 8008758:	0211      	lsls	r1, r2, #8
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6912      	ldr	r2, [r2, #16]
 800875e:	0852      	lsrs	r2, r2, #1
 8008760:	3a01      	subs	r2, #1
 8008762:	0652      	lsls	r2, r2, #25
 8008764:	430a      	orrs	r2, r1
 8008766:	4916      	ldr	r1, [pc, #88]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008768:	4313      	orrs	r3, r2
 800876a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800876c:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a13      	ldr	r2, [pc, #76]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008776:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008778:	f7fb fa72 	bl	8003c60 <HAL_GetTick>
 800877c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800877e:	e009      	b.n	8008794 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008780:	f7fb fa6e 	bl	8003c60 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b02      	cmp	r3, #2
 800878c:	d902      	bls.n	8008794 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	73fb      	strb	r3, [r7, #15]
          break;
 8008792:	e005      	b.n	80087a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0ef      	beq.n	8008780 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d106      	bne.n	80087b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80087a6:	4b06      	ldr	r3, [pc, #24]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80087a8:	695a      	ldr	r2, [r3, #20]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	4904      	ldr	r1, [pc, #16]	; (80087c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	40021000 	.word	0x40021000

080087c4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b089      	sub	sp, #36	; 0x24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e0:	d10c      	bne.n	80087fc <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80087e2:	4b6e      	ldr	r3, [pc, #440]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80087e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80087ec:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087f4:	d112      	bne.n	800881c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80087f6:	4b6a      	ldr	r3, [pc, #424]	; (80089a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80087f8:	61fb      	str	r3, [r7, #28]
 80087fa:	e00f      	b.n	800881c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008802:	d10b      	bne.n	800881c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008804:	4b65      	ldr	r3, [pc, #404]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800880a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800880e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008816:	d101      	bne.n	800881c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008818:	4b61      	ldr	r3, [pc, #388]	; (80089a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800881a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f040 80b4 	bne.w	800898c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800882e:	d003      	beq.n	8008838 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008836:	d135      	bne.n	80088a4 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008838:	4b58      	ldr	r3, [pc, #352]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008844:	f040 80a1 	bne.w	800898a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8008848:	4b54      	ldr	r3, [pc, #336]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 809a 	beq.w	800898a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008856:	4b51      	ldr	r3, [pc, #324]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	091b      	lsrs	r3, r3, #4
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	3301      	adds	r3, #1
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	fbb2 f3f3 	udiv	r3, r2, r3
 8008868:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800886a:	4b4c      	ldr	r3, [pc, #304]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	0a1b      	lsrs	r3, r3, #8
 8008870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008874:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10a      	bne.n	8008892 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800887c:	4b47      	ldr	r3, [pc, #284]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8008888:	2311      	movs	r3, #17
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e001      	b.n	8008892 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800888e:	2307      	movs	r3, #7
 8008890:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	fb03 f202 	mul.w	r2, r3, r2
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80088a2:	e072      	b.n	800898a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d133      	bne.n	8008912 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80088aa:	4b3c      	ldr	r3, [pc, #240]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b6:	d169      	bne.n	800898c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80088b8:	4b38      	ldr	r3, [pc, #224]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d063      	beq.n	800898c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80088c4:	4b35      	ldr	r3, [pc, #212]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	091b      	lsrs	r3, r3, #4
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	3301      	adds	r3, #1
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80088d8:	4b30      	ldr	r3, [pc, #192]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	0a1b      	lsrs	r3, r3, #8
 80088de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80088ea:	4b2c      	ldr	r3, [pc, #176]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80088f6:	2311      	movs	r3, #17
 80088f8:	617b      	str	r3, [r7, #20]
 80088fa:	e001      	b.n	8008900 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80088fc:	2307      	movs	r3, #7
 80088fe:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	fb03 f202 	mul.w	r2, r3, r2
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	fbb2 f3f3 	udiv	r3, r2, r3
 800890e:	61fb      	str	r3, [r7, #28]
 8008910:	e03c      	b.n	800898c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008918:	d003      	beq.n	8008922 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008920:	d134      	bne.n	800898c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008922:	4b1e      	ldr	r3, [pc, #120]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800892a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892e:	d12d      	bne.n	800898c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008930:	4b1a      	ldr	r3, [pc, #104]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d027      	beq.n	800898c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800893c:	4b17      	ldr	r3, [pc, #92]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	091b      	lsrs	r3, r3, #4
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	3301      	adds	r3, #1
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	fbb2 f3f3 	udiv	r3, r2, r3
 800894e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008950:	4b12      	ldr	r3, [pc, #72]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	0a1b      	lsrs	r3, r3, #8
 8008956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800895a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800896e:	2311      	movs	r3, #17
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e001      	b.n	8008978 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8008974:	2307      	movs	r3, #7
 8008976:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	fb03 f202 	mul.w	r2, r3, r2
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	fbb2 f3f3 	udiv	r3, r2, r3
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	e000      	b.n	800898c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800898a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800898c:	69fb      	ldr	r3, [r7, #28]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3724      	adds	r7, #36	; 0x24
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	40021000 	.word	0x40021000
 80089a0:	001fff68 	.word	0x001fff68

080089a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d079      	beq.n	8008aaa <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fa fe78 	bl	80036c0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f003 0310 	and.w	r3, r3, #16
 80089e2:	2b10      	cmp	r3, #16
 80089e4:	d058      	beq.n	8008a98 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	22ca      	movs	r2, #202	; 0xca
 80089ec:	625a      	str	r2, [r3, #36]	; 0x24
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2253      	movs	r2, #83	; 0x53
 80089f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f9a4 	bl	8008d44 <RTC_EnterInitMode>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d127      	bne.n	8008a56 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6812      	ldr	r2, [r2, #0]
 8008a10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a18:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6899      	ldr	r1, [r3, #8]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	430a      	orrs	r2, r1
 8008a36:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	68d2      	ldr	r2, [r2, #12]
 8008a40:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6919      	ldr	r1, [r3, #16]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	041a      	lsls	r2, r3, #16
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f9a8 	bl	8008dac <RTC_ExitInitMode>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d113      	bne.n	8008a8e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0203 	bic.w	r2, r2, #3
 8008a74:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	69da      	ldr	r2, [r3, #28]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	22ff      	movs	r2, #255	; 0xff
 8008a94:	625a      	str	r2, [r3, #36]	; 0x24
 8008a96:	e001      	b.n	8008a9c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d103      	bne.n	8008aaa <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d101      	bne.n	8008ace <HAL_RTC_SetTime+0x1a>
 8008aca:	2302      	movs	r3, #2
 8008acc:	e08b      	b.n	8008be6 <HAL_RTC_SetTime+0x132>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	22ca      	movs	r2, #202	; 0xca
 8008ae4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2253      	movs	r2, #83	; 0x53
 8008aec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 f928 	bl	8008d44 <RTC_EnterInitMode>
 8008af4:	4603      	mov	r3, r0
 8008af6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008af8:	7cfb      	ldrb	r3, [r7, #19]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d163      	bne.n	8008bc6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d126      	bne.n	8008b52 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2200      	movs	r2, #0
 8008b16:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 f983 	bl	8008e28 <RTC_ByteToBcd2>
 8008b22:	4603      	mov	r3, r0
 8008b24:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	785b      	ldrb	r3, [r3, #1]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f97c 	bl	8008e28 <RTC_ByteToBcd2>
 8008b30:	4603      	mov	r3, r0
 8008b32:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b34:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	789b      	ldrb	r3, [r3, #2]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f974 	bl	8008e28 <RTC_ByteToBcd2>
 8008b40:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b42:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	78db      	ldrb	r3, [r3, #3]
 8008b4a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	e018      	b.n	8008b84 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d102      	bne.n	8008b66 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2200      	movs	r2, #0
 8008b64:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	785b      	ldrb	r3, [r3, #1]
 8008b70:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b72:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008b78:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	78db      	ldrb	r3, [r3, #3]
 8008b7e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008b80:	4313      	orrs	r3, r2
 8008b82:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008b8e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008b92:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ba2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6899      	ldr	r1, [r3, #8]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f8f5 	bl	8008dac <RTC_ExitInitMode>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	22ff      	movs	r2, #255	; 0xff
 8008bcc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008bce:	7cfb      	ldrb	r3, [r7, #19]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008be4:	7cfb      	ldrb	r3, [r7, #19]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd90      	pop	{r4, r7, pc}

08008bee <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008bee:	b590      	push	{r4, r7, lr}
 8008bf0:	b087      	sub	sp, #28
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_RTC_SetDate+0x1a>
 8008c04:	2302      	movs	r3, #2
 8008c06:	e075      	b.n	8008cf4 <HAL_RTC_SetDate+0x106>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10e      	bne.n	8008c3c <HAL_RTC_SetDate+0x4e>
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	785b      	ldrb	r3, [r3, #1]
 8008c22:	f003 0310 	and.w	r3, r3, #16
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d008      	beq.n	8008c3c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	785b      	ldrb	r3, [r3, #1]
 8008c2e:	f023 0310 	bic.w	r3, r3, #16
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	330a      	adds	r3, #10
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d11c      	bne.n	8008c7c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	78db      	ldrb	r3, [r3, #3]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 f8ee 	bl	8008e28 <RTC_ByteToBcd2>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	785b      	ldrb	r3, [r3, #1]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f8e7 	bl	8008e28 <RTC_ByteToBcd2>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008c5e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	789b      	ldrb	r3, [r3, #2]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 f8df 	bl	8008e28 <RTC_ByteToBcd2>
 8008c6a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008c6c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008c76:	4313      	orrs	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]
 8008c7a:	e00e      	b.n	8008c9a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	78db      	ldrb	r3, [r3, #3]
 8008c80:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	785b      	ldrb	r3, [r3, #1]
 8008c86:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008c88:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008c8e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	22ca      	movs	r2, #202	; 0xca
 8008ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2253      	movs	r2, #83	; 0x53
 8008ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 f84a 	bl	8008d44 <RTC_EnterInitMode>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008cb4:	7cfb      	ldrb	r3, [r7, #19]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10c      	bne.n	8008cd4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008cc4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008cc8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 f86e 	bl	8008dac <RTC_ExitInitMode>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	22ff      	movs	r2, #255	; 0xff
 8008cda:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008cdc:	7cfb      	ldrb	r3, [r7, #19]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008cf2:	7cfb      	ldrb	r3, [r7, #19]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	371c      	adds	r7, #28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd90      	pop	{r4, r7, pc}

08008cfc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a0d      	ldr	r2, [pc, #52]	; (8008d40 <HAL_RTC_WaitForSynchro+0x44>)
 8008d0a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008d0c:	f7fa ffa8 	bl	8003c60 <HAL_GetTick>
 8008d10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d12:	e009      	b.n	8008d28 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d14:	f7fa ffa4 	bl	8003c60 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d22:	d901      	bls.n	8008d28 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e007      	b.n	8008d38 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0ee      	beq.n	8008d14 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	0003ff5f 	.word	0x0003ff5f

08008d44 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d120      	bne.n	8008da0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f04f 32ff 	mov.w	r2, #4294967295
 8008d66:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008d68:	f7fa ff7a 	bl	8003c60 <HAL_GetTick>
 8008d6c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d6e:	e00d      	b.n	8008d8c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008d70:	f7fa ff76 	bl	8003c60 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d7e:	d905      	bls.n	8008d8c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2203      	movs	r2, #3
 8008d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d102      	bne.n	8008da0 <RTC_EnterInitMode+0x5c>
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d1e7      	bne.n	8008d70 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
	...

08008dac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008db8:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <RTC_ExitInitMode+0x78>)
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	4a19      	ldr	r2, [pc, #100]	; (8008e24 <RTC_ExitInitMode+0x78>)
 8008dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dc2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008dc4:	4b17      	ldr	r3, [pc, #92]	; (8008e24 <RTC_ExitInitMode+0x78>)
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f003 0320 	and.w	r3, r3, #32
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10c      	bne.n	8008dea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff ff93 	bl	8008cfc <HAL_RTC_WaitForSynchro>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01e      	beq.n	8008e1a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2203      	movs	r2, #3
 8008de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	73fb      	strb	r3, [r7, #15]
 8008de8:	e017      	b.n	8008e1a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008dea:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <RTC_ExitInitMode+0x78>)
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	4a0d      	ldr	r2, [pc, #52]	; (8008e24 <RTC_ExitInitMode+0x78>)
 8008df0:	f023 0320 	bic.w	r3, r3, #32
 8008df4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff ff80 	bl	8008cfc <HAL_RTC_WaitForSynchro>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2203      	movs	r2, #3
 8008e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <RTC_ExitInitMode+0x78>)
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	4a04      	ldr	r2, [pc, #16]	; (8008e24 <RTC_ExitInitMode+0x78>)
 8008e14:	f043 0320 	orr.w	r3, r3, #32
 8008e18:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	40002800 	.word	0x40002800

08008e28 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008e3a:	e005      	b.n	8008e48 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008e42:	7afb      	ldrb	r3, [r7, #11]
 8008e44:	3b0a      	subs	r3, #10
 8008e46:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	2b09      	cmp	r3, #9
 8008e4c:	d8f6      	bhi.n	8008e3c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	7afb      	ldrb	r3, [r7, #11]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	b2db      	uxtb	r3, r3
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e022      	b.n	8008ec0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d105      	bne.n	8008e92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7fa fc49 	bl	8003724 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2203      	movs	r2, #3
 8008e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f814 	bl	8008ec8 <HAL_SD_InitCard>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e00a      	b.n	8008ec0 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ec8:	b5b0      	push	{r4, r5, r7, lr}
 8008eca:	b08e      	sub	sp, #56	; 0x38
 8008ecc:	af04      	add	r7, sp, #16
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008ee4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008ee8:	f7fe fd2c 	bl	8007944 <HAL_RCCEx_GetPeriphCLKFreq>
 8008eec:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d109      	bne.n	8008f08 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008f02:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e07b      	b.n	8009000 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	09db      	lsrs	r3, r3, #7
 8008f0c:	4a3e      	ldr	r2, [pc, #248]	; (8009008 <HAL_SD_InitCard+0x140>)
 8008f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f12:	091b      	lsrs	r3, r3, #4
 8008f14:	3b02      	subs	r3, #2
 8008f16:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681d      	ldr	r5, [r3, #0]
 8008f1c:	466c      	mov	r4, sp
 8008f1e:	f107 0314 	add.w	r3, r7, #20
 8008f22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f2a:	f107 0308 	add.w	r3, r7, #8
 8008f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f30:	4628      	mov	r0, r5
 8008f32:	f001 fac1 	bl	800a4b8 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f44:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 faff 	bl	800a54e <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f5e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	3302      	adds	r3, #2
 8008f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008f6c:	4a27      	ldr	r2, [pc, #156]	; (800900c <HAL_SD_InitCard+0x144>)
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f74:	3301      	adds	r3, #1
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fa fe7e 	bl	8003c78 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 ffdf 	bl	8009f40 <SD_PowerON>
 8008f82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00b      	beq.n	8008fa2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e02e      	b.n	8009000 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fefe 	bl	8009da4 <SD_InitCard>
 8008fa8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e01b      	b.n	8009000 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f001 fb4f 	bl	800a674 <SDMMC_CmdBlockLength>
 8008fd6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00f      	beq.n	8008ffe <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a0b      	ldr	r2, [pc, #44]	; (8009010 <HAL_SD_InitCard+0x148>)
 8008fe4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e000      	b.n	8009000 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3728      	adds	r7, #40	; 0x28
 8009004:	46bd      	mov	sp, r7
 8009006:	bdb0      	pop	{r4, r5, r7, pc}
 8009008:	014f8b59 	.word	0x014f8b59
 800900c:	00012110 	.word	0x00012110
 8009010:	004005ff 	.word	0x004005ff

08009014 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08c      	sub	sp, #48	; 0x30
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d107      	bne.n	800903c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009030:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e0a9      	b.n	8009190 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	f040 80a2 	bne.w	800918e <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	441a      	add	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800905a:	429a      	cmp	r2, r3
 800905c:	d907      	bls.n	800906e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e090      	b.n	8009190 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2203      	movs	r2, #3
 8009072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2200      	movs	r2, #0
 800907c:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	4a45      	ldr	r2, [pc, #276]	; (8009198 <HAL_SD_ReadBlocks_DMA+0x184>)
 8009084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	4a44      	ldr	r2, [pc, #272]	; (800919c <HAL_SD_ReadBlocks_DMA+0x188>)
 800908c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	2200      	movs	r2, #0
 8009094:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3380      	adds	r3, #128	; 0x80
 80090a0:	4619      	mov	r1, r3
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	025b      	lsls	r3, r3, #9
 80090a8:	089b      	lsrs	r3, r3, #2
 80090aa:	f7fa ffd3 	bl	8004054 <HAL_DMA_Start_IT>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00f      	beq.n	80090d4 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a39      	ldr	r2, [pc, #228]	; (80091a0 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80090ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e05d      	b.n	8009190 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0208 	orr.w	r2, r2, #8
 80090e2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d002      	beq.n	80090f2 <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	025b      	lsls	r3, r3, #9
 80090f0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090f2:	f04f 33ff 	mov.w	r3, #4294967295
 80090f6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	025b      	lsls	r3, r3, #9
 80090fc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090fe:	2390      	movs	r3, #144	; 0x90
 8009100:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009102:	2302      	movs	r3, #2
 8009104:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009106:	2300      	movs	r3, #0
 8009108:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800910a:	2301      	movs	r3, #1
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f107 0210 	add.w	r2, r7, #16
 8009116:	4611      	mov	r1, r2
 8009118:	4618      	mov	r0, r3
 800911a:	f001 fa7f 	bl	800a61c <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d90a      	bls.n	800913a <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2282      	movs	r2, #130	; 0x82
 8009128:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009130:	4618      	mov	r0, r3
 8009132:	f001 fae3 	bl	800a6fc <SDMMC_CmdReadMultiBlock>
 8009136:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009138:	e009      	b.n	800914e <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2281      	movs	r2, #129	; 0x81
 800913e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009146:	4618      	mov	r0, r3
 8009148:	f001 fab6 	bl	800a6b8 <SDMMC_CmdReadSingleBlock>
 800914c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	2b00      	cmp	r3, #0
 8009152:	d012      	beq.n	800917a <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a11      	ldr	r2, [pc, #68]	; (80091a0 <HAL_SD_ReadBlocks_DMA+0x18c>)
 800915a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009162:	431a      	orrs	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e00a      	b.n	8009190 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009188:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	e000      	b.n	8009190 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800918e:	2302      	movs	r3, #2
  }
}
 8009190:	4618      	mov	r0, r3
 8009192:	3730      	adds	r7, #48	; 0x30
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	08009bbf 	.word	0x08009bbf
 800919c:	08009c31 	.word	0x08009c31
 80091a0:	004005ff 	.word	0x004005ff

080091a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08c      	sub	sp, #48	; 0x30
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d107      	bne.n	80091cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e0ac      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	f040 80a5 	bne.w	8009324 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	441a      	add	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d907      	bls.n	80091fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e093      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2203      	movs	r2, #3
 8009202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2200      	movs	r2, #0
 800920c:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	4a47      	ldr	r2, [pc, #284]	; (8009330 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8009214:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	4a46      	ldr	r2, [pc, #280]	; (8009334 <HAL_SD_WriteBlocks_DMA+0x190>)
 800921c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	2200      	movs	r2, #0
 8009224:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922a:	2b01      	cmp	r3, #1
 800922c:	d002      	beq.n	8009234 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	025b      	lsls	r3, r3, #9
 8009232:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d90a      	bls.n	8009250 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	22a0      	movs	r2, #160	; 0xa0
 800923e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009246:	4618      	mov	r0, r3
 8009248:	f001 fa9c 	bl	800a784 <SDMMC_CmdWriteMultiBlock>
 800924c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800924e:	e009      	b.n	8009264 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2290      	movs	r2, #144	; 0x90
 8009254:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fa6f 	bl	800a740 <SDMMC_CmdWriteSingleBlock>
 8009262:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d012      	beq.n	8009290 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a32      	ldr	r2, [pc, #200]	; (8009338 <HAL_SD_WriteBlocks_DMA+0x194>)
 8009270:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	431a      	orrs	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e04a      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0208 	orr.w	r2, r2, #8
 800929e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3380      	adds	r3, #128	; 0x80
 80092ac:	461a      	mov	r2, r3
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	025b      	lsls	r3, r3, #9
 80092b2:	089b      	lsrs	r3, r3, #2
 80092b4:	f7fa fece 	bl	8004054 <HAL_DMA_Start_IT>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d012      	beq.n	80092e4 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a1d      	ldr	r2, [pc, #116]	; (8009338 <HAL_SD_WriteBlocks_DMA+0x194>)
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e020      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092e4:	f04f 33ff 	mov.w	r3, #4294967295
 80092e8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	025b      	lsls	r3, r3, #9
 80092ee:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80092f0:	2390      	movs	r3, #144	; 0x90
 80092f2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80092f4:	2300      	movs	r3, #0
 80092f6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f107 0210 	add.w	r2, r7, #16
 8009308:	4611      	mov	r1, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f001 f986 	bl	800a61c <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f042 021a 	orr.w	r2, r2, #26
 800931e:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	e000      	b.n	8009326 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8009324:	2302      	movs	r3, #2
  }
}
 8009326:	4618      	mov	r0, r3
 8009328:	3730      	adds	r7, #48	; 0x30
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	08009b95 	.word	0x08009b95
 8009334:	08009c31 	.word	0x08009c31
 8009338:	004005ff 	.word	0x004005ff

0800933c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009348:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d008      	beq.n	800936a <HAL_SD_IRQHandler+0x2e>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f003 0308 	and.w	r3, r3, #8
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 f802 	bl	800a36c <SD_Read_IT>
 8009368:	e155      	b.n	8009616 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 808f 	beq.w	8009498 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009382:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6812      	ldr	r2, [r2, #0]
 800938e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009392:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009396:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0201 	bic.w	r2, r2, #1
 80093a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f003 0308 	and.w	r3, r3, #8
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d039      	beq.n	8009426 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f003 0302 	and.w	r3, r3, #2
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <HAL_SD_IRQHandler+0x8a>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d011      	beq.n	80093ea <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f001 f9fc 	bl	800a7c8 <SDMMC_CmdStopTransfer>
 80093d0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d008      	beq.n	80093ea <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	431a      	orrs	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f91f 	bl	8009628 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	d104      	bne.n	8009416 <HAL_SD_IRQHandler+0xda>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f003 f8fc 	bl	800c614 <HAL_SD_RxCpltCallback>
 800941c:	e0fb      	b.n	8009616 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f003 f8ee 	bl	800c600 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8009424:	e0f7      	b.n	8009616 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80f2 	beq.w	8009616 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f003 0320 	and.w	r3, r3, #32
 8009438:	2b00      	cmp	r3, #0
 800943a:	d011      	beq.n	8009460 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4618      	mov	r0, r3
 8009442:	f001 f9c1 	bl	800a7c8 <SDMMC_CmdStopTransfer>
 8009446:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d008      	beq.n	8009460 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	431a      	orrs	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f8e4 	bl	8009628 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	f040 80d5 	bne.w	8009616 <HAL_SD_IRQHandler+0x2da>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	f040 80cf 	bne.w	8009616 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 0208 	bic.w	r2, r2, #8
 8009486:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f003 f8b5 	bl	800c600 <HAL_SD_TxCpltCallback>
}
 8009496:	e0be      	b.n	8009616 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d008      	beq.n	80094b8 <HAL_SD_IRQHandler+0x17c>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 ffac 	bl	800a40e <SD_Write_IT>
 80094b6:	e0ae      	b.n	8009616 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094be:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 80a7 	beq.w	8009616 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094da:	f043 0202 	orr.w	r2, r3, #2
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094e8:	f003 0308 	and.w	r3, r3, #8
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	f043 0208 	orr.w	r2, r3, #8
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b00      	cmp	r3, #0
 8009508:	d005      	beq.n	8009516 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950e:	f043 0220 	orr.w	r2, r3, #32
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009528:	f043 0210 	orr.w	r2, r3, #16
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f240 523a 	movw	r2, #1338	; 0x53a
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009548:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4618      	mov	r0, r3
 8009550:	f001 f93a 	bl	800a7c8 <SDMMC_CmdStopTransfer>
 8009554:	4602      	mov	r2, r0
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955a:	431a      	orrs	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f855 	bl	8009628 <HAL_SD_ErrorCallback>
}
 800957e:	e04a      	b.n	8009616 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009586:	2b00      	cmp	r3, #0
 8009588:	d045      	beq.n	8009616 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f003 0310 	and.w	r3, r3, #16
 8009590:	2b00      	cmp	r3, #0
 8009592:	d104      	bne.n	800959e <HAL_SD_IRQHandler+0x262>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	2b00      	cmp	r3, #0
 800959c:	d011      	beq.n	80095c2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a2:	4a1f      	ldr	r2, [pc, #124]	; (8009620 <HAL_SD_IRQHandler+0x2e4>)
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fa fdb2 	bl	8004114 <HAL_DMA_Abort_IT>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d02f      	beq.n	8009616 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fb84 	bl	8009cc8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095c0:	e029      	b.n	8009616 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d104      	bne.n	80095d6 <HAL_SD_IRQHandler+0x29a>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d011      	beq.n	80095fa <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095da:	4a12      	ldr	r2, [pc, #72]	; (8009624 <HAL_SD_IRQHandler+0x2e8>)
 80095dc:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fa fd96 	bl	8004114 <HAL_DMA_Abort_IT>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d013      	beq.n	8009616 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fb9f 	bl	8009d36 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80095f8:	e00d      	b.n	8009616 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f002 ffec 	bl	800c5ec <HAL_SD_AbortCallback>
}
 8009614:	e7ff      	b.n	8009616 <HAL_SD_IRQHandler+0x2da>
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	08009cc9 	.word	0x08009cc9
 8009624:	08009d37 	.word	0x08009d37

08009628 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800964a:	0f9b      	lsrs	r3, r3, #30
 800964c:	b2da      	uxtb	r2, r3
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009656:	0e9b      	lsrs	r3, r3, #26
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 030f 	and.w	r3, r3, #15
 800965e:	b2da      	uxtb	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009668:	0e1b      	lsrs	r3, r3, #24
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f003 0303 	and.w	r3, r3, #3
 8009670:	b2da      	uxtb	r2, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800967a:	0c1b      	lsrs	r3, r3, #16
 800967c:	b2da      	uxtb	r2, r3
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009686:	0a1b      	lsrs	r3, r3, #8
 8009688:	b2da      	uxtb	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009692:	b2da      	uxtb	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800969c:	0d1b      	lsrs	r3, r3, #20
 800969e:	b29a      	uxth	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096a8:	0c1b      	lsrs	r3, r3, #16
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	f003 030f 	and.w	r3, r3, #15
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ba:	0bdb      	lsrs	r3, r3, #15
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096cc:	0b9b      	lsrs	r3, r3, #14
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096de:	0b5b      	lsrs	r3, r3, #13
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096f0:	0b1b      	lsrs	r3, r3, #12
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2200      	movs	r2, #0
 8009702:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009708:	2b00      	cmp	r3, #0
 800970a:	d163      	bne.n	80097d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009710:	009a      	lsls	r2, r3, #2
 8009712:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009716:	4013      	ands	r3, r2
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800971c:	0f92      	lsrs	r2, r2, #30
 800971e:	431a      	orrs	r2, r3
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009728:	0edb      	lsrs	r3, r3, #27
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f003 0307 	and.w	r3, r3, #7
 8009730:	b2da      	uxtb	r2, r3
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800973a:	0e1b      	lsrs	r3, r3, #24
 800973c:	b2db      	uxtb	r3, r3
 800973e:	f003 0307 	and.w	r3, r3, #7
 8009742:	b2da      	uxtb	r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800974c:	0d5b      	lsrs	r3, r3, #21
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f003 0307 	and.w	r3, r3, #7
 8009754:	b2da      	uxtb	r2, r3
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800975e:	0c9b      	lsrs	r3, r3, #18
 8009760:	b2db      	uxtb	r3, r3
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	b2da      	uxtb	r2, r3
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009770:	0bdb      	lsrs	r3, r3, #15
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0307 	and.w	r3, r3, #7
 8009778:	b2da      	uxtb	r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	1c5a      	adds	r2, r3, #1
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	7e1b      	ldrb	r3, [r3, #24]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	3302      	adds	r3, #2
 8009794:	2201      	movs	r2, #1
 8009796:	fa02 f303 	lsl.w	r3, r2, r3
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800979e:	fb03 f202 	mul.w	r2, r3, r2
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	7a1b      	ldrb	r3, [r3, #8]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	f003 030f 	and.w	r3, r3, #15
 80097b0:	2201      	movs	r2, #1
 80097b2:	409a      	lsls	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80097c0:	0a52      	lsrs	r2, r2, #9
 80097c2:	fb03 f202 	mul.w	r2, r3, r2
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097d0:	661a      	str	r2, [r3, #96]	; 0x60
 80097d2:	e031      	b.n	8009838 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d11d      	bne.n	8009818 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097e0:	041b      	lsls	r3, r3, #16
 80097e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ea:	0c1b      	lsrs	r3, r3, #16
 80097ec:	431a      	orrs	r2, r3
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	3301      	adds	r3, #1
 80097f8:	029a      	lsls	r2, r3, #10
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800980c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	661a      	str	r2, [r3, #96]	; 0x60
 8009816:	e00f      	b.n	8009838 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a58      	ldr	r2, [pc, #352]	; (8009980 <HAL_SD_GetCardCSD+0x344>)
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009824:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e09d      	b.n	8009974 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800983c:	0b9b      	lsrs	r3, r3, #14
 800983e:	b2db      	uxtb	r3, r3
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	b2da      	uxtb	r2, r3
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800984e:	09db      	lsrs	r3, r3, #7
 8009850:	b2db      	uxtb	r3, r3
 8009852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009856:	b2da      	uxtb	r2, r3
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009860:	b2db      	uxtb	r3, r3
 8009862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009866:	b2da      	uxtb	r2, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009870:	0fdb      	lsrs	r3, r3, #31
 8009872:	b2da      	uxtb	r2, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987c:	0f5b      	lsrs	r3, r3, #29
 800987e:	b2db      	uxtb	r3, r3
 8009880:	f003 0303 	and.w	r3, r3, #3
 8009884:	b2da      	uxtb	r2, r3
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988e:	0e9b      	lsrs	r3, r3, #26
 8009890:	b2db      	uxtb	r3, r3
 8009892:	f003 0307 	and.w	r3, r3, #7
 8009896:	b2da      	uxtb	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a0:	0d9b      	lsrs	r3, r3, #22
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	f003 030f 	and.w	r3, r3, #15
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b2:	0d5b      	lsrs	r3, r3, #21
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ce:	0c1b      	lsrs	r3, r3, #16
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e2:	0bdb      	lsrs	r3, r3, #15
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098f6:	0b9b      	lsrs	r3, r3, #14
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800990a:	0b5b      	lsrs	r3, r3, #13
 800990c:	b2db      	uxtb	r3, r3
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	b2da      	uxtb	r2, r3
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991e:	0b1b      	lsrs	r3, r3, #12
 8009920:	b2db      	uxtb	r3, r3
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	b2da      	uxtb	r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009932:	0a9b      	lsrs	r3, r3, #10
 8009934:	b2db      	uxtb	r3, r3
 8009936:	f003 0303 	and.w	r3, r3, #3
 800993a:	b2da      	uxtb	r2, r3
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009946:	0a1b      	lsrs	r3, r3, #8
 8009948:	b2db      	uxtb	r3, r3
 800994a:	f003 0303 	and.w	r3, r3, #3
 800994e:	b2da      	uxtb	r2, r3
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800995a:	085b      	lsrs	r3, r3, #1
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009962:	b2da      	uxtb	r2, r3
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr
 8009980:	004005ff 	.word	0x004005ff

08009984 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80099dc:	b5b0      	push	{r4, r5, r7, lr}
 80099de:	b090      	sub	sp, #64	; 0x40
 80099e0:	af04      	add	r7, sp, #16
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2203      	movs	r2, #3
 80099f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f8:	2b03      	cmp	r3, #3
 80099fa:	d02e      	beq.n	8009a5a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a02:	d106      	bne.n	8009a12 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	639a      	str	r2, [r3, #56]	; 0x38
 8009a10:	e029      	b.n	8009a66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a18:	d10a      	bne.n	8009a30 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fb46 	bl	800a0ac <SD_WideBus_Enable>
 8009a20:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	431a      	orrs	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38
 8009a2e:	e01a      	b.n	8009a66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fb83 	bl	800a142 <SD_WideBus_Disable>
 8009a3c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a44:	431a      	orrs	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	639a      	str	r2, [r3, #56]	; 0x38
 8009a4a:	e00c      	b.n	8009a66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	639a      	str	r2, [r3, #56]	; 0x38
 8009a58:	e005      	b.n	8009a66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d007      	beq.n	8009a7e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a35      	ldr	r2, [pc, #212]	; (8009b48 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8009a74:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a7c:	e042      	b.n	8009b04 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009a7e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009a82:	f7fd ff5f 	bl	8007944 <HAL_RCCEx_GetPeriphCLKFreq>
 8009a86:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d031      	beq.n	8009af2 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	3302      	adds	r3, #2
 8009ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab6:	4a25      	ldr	r2, [pc, #148]	; (8009b4c <HAL_SD_ConfigWideBusOperation+0x170>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d907      	bls.n	8009acc <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abe:	4a24      	ldr	r2, [pc, #144]	; (8009b50 <HAL_SD_ConfigWideBusOperation+0x174>)
 8009ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac4:	0ddb      	lsrs	r3, r3, #23
 8009ac6:	3b02      	subs	r3, #2
 8009ac8:	623b      	str	r3, [r7, #32]
 8009aca:	e002      	b.n	8009ad2 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681d      	ldr	r5, [r3, #0]
 8009ad6:	466c      	mov	r4, sp
 8009ad8:	f107 0318 	add.w	r3, r7, #24
 8009adc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ae4:	f107 030c 	add.w	r3, r7, #12
 8009ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009aea:	4628      	mov	r0, r5
 8009aec:	f000 fce4 	bl	800a4b8 <SDMMC_Init>
 8009af0:	e008      	b.n	8009b04 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 fdb1 	bl	800a674 <SDMMC_CmdBlockLength>
 8009b12:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00c      	beq.n	8009b34 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a0a      	ldr	r2, [pc, #40]	; (8009b48 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8009b20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	431a      	orrs	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3730      	adds	r7, #48	; 0x30
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bdb0      	pop	{r4, r5, r7, pc}
 8009b48:	004005ff 	.word	0x004005ff
 8009b4c:	017d7840 	.word	0x017d7840
 8009b50:	55e63b89 	.word	0x55e63b89

08009b54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009b60:	f107 030c 	add.w	r3, r7, #12
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa78 	bl	800a05c <SD_SendStatus>
 8009b6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	0a5b      	lsrs	r3, r3, #9
 8009b84:	f003 030f 	and.w	r3, r3, #15
 8009b88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009b8a:	693b      	ldr	r3, [r7, #16]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bb0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009bb2:	bf00      	nop
 8009bb4:	3714      	adds	r7, #20
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd0:	2b82      	cmp	r3, #130	; 0x82
 8009bd2:	d111      	bne.n	8009bf8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 fdf5 	bl	800a7c8 <SDMMC_CmdStopTransfer>
 8009bde:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d008      	beq.n	8009bf8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	431a      	orrs	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7ff fd18 	bl	8009628 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 0208 	bic.w	r2, r2, #8
 8009c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009c10:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f002 fcf7 	bl	800c614 <HAL_SD_RxCpltCallback>
#endif
}
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c44:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c4c:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d002      	beq.n	8009c5a <SD_DMAError+0x2a>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d12d      	bne.n	8009cb6 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a19      	ldr	r2, [pc, #100]	; (8009cc4 <SD_DMAError+0x94>)
 8009c60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c70:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8009c7e:	6978      	ldr	r0, [r7, #20]
 8009c80:	f7ff ff68 	bl	8009b54 <HAL_SD_GetCardState>
 8009c84:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b06      	cmp	r3, #6
 8009c8a:	d002      	beq.n	8009c92 <SD_DMAError+0x62>
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2b05      	cmp	r3, #5
 8009c90:	d10a      	bne.n	8009ca8 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fd96 	bl	800a7c8 <SDMMC_CmdStopTransfer>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8009cb6:	6978      	ldr	r0, [r7, #20]
 8009cb8:	f7ff fcb6 	bl	8009628 <HAL_SD_ErrorCallback>
#endif
}
 8009cbc:	bf00      	nop
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	004005ff 	.word	0x004005ff

08009cc8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f240 523a 	movw	r2, #1338	; 0x53a
 8009cde:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7ff ff37 	bl	8009b54 <HAL_SD_GetCardState>
 8009ce6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b06      	cmp	r3, #6
 8009cfa:	d002      	beq.n	8009d02 <SD_DMATxAbort+0x3a>
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2b05      	cmp	r3, #5
 8009d00:	d10a      	bne.n	8009d18 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fd5e 	bl	800a7c8 <SDMMC_CmdStopTransfer>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d12:	431a      	orrs	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d103      	bne.n	8009d28 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f002 fc63 	bl	800c5ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009d26:	e002      	b.n	8009d2e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7ff fc7d 	bl	8009628 <HAL_SD_ErrorCallback>
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d42:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d4c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff ff00 	bl	8009b54 <HAL_SD_GetCardState>
 8009d54:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b06      	cmp	r3, #6
 8009d68:	d002      	beq.n	8009d70 <SD_DMARxAbort+0x3a>
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2b05      	cmp	r3, #5
 8009d6e:	d10a      	bne.n	8009d86 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 fd27 	bl	800a7c8 <SDMMC_CmdStopTransfer>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d80:	431a      	orrs	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d103      	bne.n	8009d96 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f002 fc2c 	bl	800c5ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009d94:	e002      	b.n	8009d9c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f7ff fc46 	bl	8009628 <HAL_SD_ErrorCallback>
}
 8009d9c:	bf00      	nop
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009da4:	b5b0      	push	{r4, r5, r7, lr}
 8009da6:	b094      	sub	sp, #80	; 0x50
 8009da8:	af04      	add	r7, sp, #16
 8009daa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009dac:	2301      	movs	r3, #1
 8009dae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 fbd9 	bl	800a56c <SDMMC_GetPowerState>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d102      	bne.n	8009dc6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009dc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009dc4:	e0b8      	b.n	8009f38 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d02f      	beq.n	8009e2e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 fe02 	bl	800a9dc <SDMMC_CmdSendCID>
 8009dd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <SD_InitCard+0x40>
    {
      return errorstate;
 8009de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de2:	e0a9      	b.n	8009f38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2100      	movs	r1, #0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 fc03 	bl	800a5f6 <SDMMC_GetResponse>
 8009df0:	4602      	mov	r2, r0
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2104      	movs	r1, #4
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 fbfa 	bl	800a5f6 <SDMMC_GetResponse>
 8009e02:	4602      	mov	r2, r0
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2108      	movs	r1, #8
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fbf1 	bl	800a5f6 <SDMMC_GetResponse>
 8009e14:	4602      	mov	r2, r0
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	210c      	movs	r1, #12
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fbe8 	bl	800a5f6 <SDMMC_GetResponse>
 8009e26:	4602      	mov	r2, r0
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d00d      	beq.n	8009e52 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f107 020e 	add.w	r2, r7, #14
 8009e3e:	4611      	mov	r1, r2
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fe08 	bl	800aa56 <SDMMC_CmdSetRelAdd>
 8009e46:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <SD_InitCard+0xae>
    {
      return errorstate;
 8009e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e50:	e072      	b.n	8009f38 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d036      	beq.n	8009ec8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e5a:	89fb      	ldrh	r3, [r7, #14]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e6a:	041b      	lsls	r3, r3, #16
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f000 fdd2 	bl	800aa18 <SDMMC_CmdSendCSD>
 8009e74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e7e:	e05b      	b.n	8009f38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2100      	movs	r1, #0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 fbb5 	bl	800a5f6 <SDMMC_GetResponse>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2104      	movs	r1, #4
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fbac 	bl	800a5f6 <SDMMC_GetResponse>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2108      	movs	r1, #8
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fba3 	bl	800a5f6 <SDMMC_GetResponse>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	210c      	movs	r1, #12
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 fb9a 	bl	800a5f6 <SDMMC_GetResponse>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2104      	movs	r1, #4
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 fb91 	bl	800a5f6 <SDMMC_GetResponse>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	0d1a      	lsrs	r2, r3, #20
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009edc:	f107 0310 	add.w	r3, r7, #16
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7ff fbaa 	bl	800963c <HAL_SD_GetCardCSD>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ef2:	e021      	b.n	8009f38 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6819      	ldr	r1, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009efc:	041b      	lsls	r3, r3, #16
 8009efe:	2200      	movs	r2, #0
 8009f00:	461c      	mov	r4, r3
 8009f02:	4615      	mov	r5, r2
 8009f04:	4622      	mov	r2, r4
 8009f06:	462b      	mov	r3, r5
 8009f08:	4608      	mov	r0, r1
 8009f0a:	f000 fc7f 	bl	800a80c <SDMMC_CmdSelDesel>
 8009f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <SD_InitCard+0x176>
  {
    return errorstate;
 8009f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f18:	e00e      	b.n	8009f38 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681d      	ldr	r5, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	466c      	mov	r4, sp
 8009f22:	f103 0210 	add.w	r2, r3, #16
 8009f26:	ca07      	ldmia	r2, {r0, r1, r2}
 8009f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f30:	4628      	mov	r0, r5
 8009f32:	f000 fac1 	bl	800a4b8 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3740      	adds	r7, #64	; 0x40
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bdb0      	pop	{r4, r5, r7, pc}

08009f40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]
 8009f50:	2300      	movs	r3, #0
 8009f52:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 fc7a 	bl	800a852 <SDMMC_CmdGoIdleState>
 8009f5e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	e072      	b.n	800a050 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fc8d 	bl	800a88e <SDMMC_CmdOperCond>
 8009f74:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00d      	beq.n	8009f98 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 fc63 	bl	800a852 <SDMMC_CmdGoIdleState>
 8009f8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d004      	beq.n	8009f9e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	e05b      	b.n	800a050 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d137      	bne.n	800a016 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2100      	movs	r1, #0
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fc8d 	bl	800a8cc <SDMMC_CmdAppCommand>
 8009fb2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d02d      	beq.n	800a016 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fbe:	e047      	b.n	800a050 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fc80 	bl	800a8cc <SDMMC_CmdAppCommand>
 8009fcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <SD_PowerON+0x98>
    {
      return errorstate;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	e03b      	b.n	800a050 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	491e      	ldr	r1, [pc, #120]	; (800a058 <SD_PowerON+0x118>)
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fc96 	bl	800a910 <SDMMC_CmdAppOperCommand>
 8009fe4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ff0:	e02e      	b.n	800a050 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 fafc 	bl	800a5f6 <SDMMC_GetResponse>
 8009ffe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	0fdb      	lsrs	r3, r3, #31
 800a004:	2b01      	cmp	r3, #1
 800a006:	d101      	bne.n	800a00c <SD_PowerON+0xcc>
 800a008:	2301      	movs	r3, #1
 800a00a:	e000      	b.n	800a00e <SD_PowerON+0xce>
 800a00c:	2300      	movs	r3, #0
 800a00e:	613b      	str	r3, [r7, #16]

    count++;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	3301      	adds	r3, #1
 800a014:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d802      	bhi.n	800a026 <SD_PowerON+0xe6>
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0cc      	beq.n	8009fc0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d902      	bls.n	800a036 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a034:	e00c      	b.n	800a050 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d003      	beq.n	800a048 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	645a      	str	r2, [r3, #68]	; 0x44
 800a046:	e002      	b.n	800a04e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	c1100000 	.word	0xc1100000

0800a05c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d102      	bne.n	800a072 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a06c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a070:	e018      	b.n	800a0a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a07a:	041b      	lsls	r3, r3, #16
 800a07c:	4619      	mov	r1, r3
 800a07e:	4610      	mov	r0, r2
 800a080:	f000 fd0a 	bl	800aa98 <SDMMC_CmdSendStatus>
 800a084:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	e009      	b.n	800a0a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2100      	movs	r1, #0
 800a096:	4618      	mov	r0, r3
 800a098:	f000 faad 	bl	800a5f6 <SDMMC_GetResponse>
 800a09c:	4602      	mov	r2, r0
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fa97 	bl	800a5f6 <SDMMC_GetResponse>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0d2:	d102      	bne.n	800a0da <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a0d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0d8:	e02f      	b.n	800a13a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a0da:	f107 030c 	add.w	r3, r7, #12
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f879 	bl	800a1d8 <SD_FindSCR>
 800a0e6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	e023      	b.n	800a13a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01c      	beq.n	800a136 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a104:	041b      	lsls	r3, r3, #16
 800a106:	4619      	mov	r1, r3
 800a108:	4610      	mov	r0, r2
 800a10a:	f000 fbdf 	bl	800a8cc <SDMMC_CmdAppCommand>
 800a10e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	e00f      	b.n	800a13a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2102      	movs	r1, #2
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fc18 	bl	800a956 <SDMMC_CmdBusWidth>
 800a126:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	e003      	b.n	800a13a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a132:	2300      	movs	r3, #0
 800a134:	e001      	b.n	800a13a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a136:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b086      	sub	sp, #24
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a14a:	2300      	movs	r3, #0
 800a14c:	60fb      	str	r3, [r7, #12]
 800a14e:	2300      	movs	r3, #0
 800a150:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2100      	movs	r1, #0
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fa4c 	bl	800a5f6 <SDMMC_GetResponse>
 800a15e:	4603      	mov	r3, r0
 800a160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a168:	d102      	bne.n	800a170 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a16a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a16e:	e02f      	b.n	800a1d0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a170:	f107 030c 	add.w	r3, r7, #12
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f82e 	bl	800a1d8 <SD_FindSCR>
 800a17c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	e023      	b.n	800a1d0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d01c      	beq.n	800a1cc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19a:	041b      	lsls	r3, r3, #16
 800a19c:	4619      	mov	r1, r3
 800a19e:	4610      	mov	r0, r2
 800a1a0:	f000 fb94 	bl	800a8cc <SDMMC_CmdAppCommand>
 800a1a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	e00f      	b.n	800a1d0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 fbcd 	bl	800a956 <SDMMC_CmdBusWidth>
 800a1bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	e003      	b.n	800a1d0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e001      	b.n	800a1d0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a1d8:	b590      	push	{r4, r7, lr}
 800a1da:	b08f      	sub	sp, #60	; 0x3c
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a1e2:	f7f9 fd3d 	bl	8003c60 <HAL_GetTick>
 800a1e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60bb      	str	r3, [r7, #8]
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2108      	movs	r1, #8
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 fa38 	bl	800a674 <SDMMC_CmdBlockLength>
 800a204:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	e0a9      	b.n	800a364 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a218:	041b      	lsls	r3, r3, #16
 800a21a:	4619      	mov	r1, r3
 800a21c:	4610      	mov	r0, r2
 800a21e:	f000 fb55 	bl	800a8cc <SDMMC_CmdAppCommand>
 800a222:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	e09a      	b.n	800a364 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a22e:	f04f 33ff 	mov.w	r3, #4294967295
 800a232:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a234:	2308      	movs	r3, #8
 800a236:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a238:	2330      	movs	r3, #48	; 0x30
 800a23a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a23c:	2302      	movs	r3, #2
 800a23e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a240:	2300      	movs	r3, #0
 800a242:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a244:	2301      	movs	r3, #1
 800a246:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f107 0210 	add.w	r2, r7, #16
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f000 f9e2 	bl	800a61c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 fb9c 	bl	800a99a <SDMMC_CmdSendSCR>
 800a262:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a266:	2b00      	cmp	r3, #0
 800a268:	d022      	beq.n	800a2b0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26c:	e07a      	b.n	800a364 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00e      	beq.n	800a29a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6819      	ldr	r1, [r3, #0]
 800a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	f107 0208 	add.w	r2, r7, #8
 800a288:	18d4      	adds	r4, r2, r3
 800a28a:	4608      	mov	r0, r1
 800a28c:	f000 f941 	bl	800a512 <SDMMC_ReadFIFO>
 800a290:	4603      	mov	r3, r0
 800a292:	6023      	str	r3, [r4, #0]
      index++;
 800a294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a296:	3301      	adds	r3, #1
 800a298:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a29a:	f7f9 fce1 	bl	8003c60 <HAL_GetTick>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a8:	d102      	bne.n	800a2b0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a2aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2ae:	e059      	b.n	800a364 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2b6:	f240 432a 	movw	r3, #1066	; 0x42a
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0d6      	beq.n	800a26e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c6:	f003 0308 	and.w	r3, r3, #8
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d005      	beq.n	800a2da <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2208      	movs	r2, #8
 800a2d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a2d6:	2308      	movs	r3, #8
 800a2d8:	e044      	b.n	800a364 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d005      	beq.n	800a2f4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	e037      	b.n	800a364 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fa:	f003 0320 	and.w	r3, r3, #32
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d005      	beq.n	800a30e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2220      	movs	r2, #32
 800a308:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a30a:	2320      	movs	r3, #32
 800a30c:	e02a      	b.n	800a364 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f240 523a 	movw	r2, #1338	; 0x53a
 800a316:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	061a      	lsls	r2, r3, #24
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	021b      	lsls	r3, r3, #8
 800a320:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a324:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	0a1b      	lsrs	r3, r3, #8
 800a32a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a32e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	0e1b      	lsrs	r3, r3, #24
 800a334:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	601a      	str	r2, [r3, #0]
    scr++;
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	3304      	adds	r3, #4
 800a33e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	061a      	lsls	r2, r3, #24
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	021b      	lsls	r3, r3, #8
 800a348:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a34c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	0a1b      	lsrs	r3, r3, #8
 800a352:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a356:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	0e1b      	lsrs	r3, r3, #24
 800a35c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	373c      	adds	r7, #60	; 0x3c
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd90      	pop	{r4, r7, pc}

0800a36c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a378:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d03f      	beq.n	800a406 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a386:	2300      	movs	r3, #0
 800a388:	617b      	str	r3, [r7, #20]
 800a38a:	e033      	b.n	800a3f4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4618      	mov	r0, r3
 800a392:	f000 f8be 	bl	800a512 <SDMMC_ReadFIFO>
 800a396:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	0a1b      	lsrs	r3, r3, #8
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	0c1b      	lsrs	r3, r3, #16
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	0e1b      	lsrs	r3, r3, #24
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b07      	cmp	r3, #7
 800a3f8:	d9c8      	bls.n	800a38c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a406:	bf00      	nop
 800a408:	3718      	adds	r7, #24
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b086      	sub	sp, #24
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a420:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d043      	beq.n	800a4b0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a428:	2300      	movs	r3, #0
 800a42a:	617b      	str	r3, [r7, #20]
 800a42c:	e037      	b.n	800a49e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	3301      	adds	r3, #1
 800a438:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	021a      	lsls	r2, r3, #8
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4313      	orrs	r3, r2
 800a44a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	3301      	adds	r3, #1
 800a450:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	3b01      	subs	r3, #1
 800a456:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	041a      	lsls	r2, r3, #16
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4313      	orrs	r3, r2
 800a462:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3301      	adds	r3, #1
 800a468:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	061a      	lsls	r2, r3, #24
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	4313      	orrs	r3, r2
 800a47a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	3301      	adds	r3, #1
 800a480:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	3b01      	subs	r3, #1
 800a486:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f107 0208 	add.w	r2, r7, #8
 800a490:	4611      	mov	r1, r2
 800a492:	4618      	mov	r0, r3
 800a494:	f000 f84a 	bl	800a52c <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	3301      	adds	r3, #1
 800a49c:	617b      	str	r3, [r7, #20]
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b07      	cmp	r3, #7
 800a4a2:	d9c4      	bls.n	800a42e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a4b0:	bf00      	nop
 800a4b2:	3718      	adds	r7, #24
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	f107 001c 	add.w	r0, r7, #28
 800a4c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800a4ce:	6a3b      	ldr	r3, [r7, #32]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a4d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800a4da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a4de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a4e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a4e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a4f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	b004      	add	sp, #16
 800a510:	4770      	bx	lr

0800a512 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a512:	b480      	push	{r7}
 800a514:	b083      	sub	sp, #12
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2203      	movs	r2, #3
 800a55a:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a55c:	2002      	movs	r0, #2
 800a55e:	f7f9 fb8b 	bl	8003c78 <HAL_Delay>

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0303 	and.w	r3, r3, #3
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a5a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a5ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a5b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a5c2:	f023 030f 	bic.w	r3, r3, #15
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	431a      	orrs	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	b2db      	uxtb	r3, r3
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b085      	sub	sp, #20
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3314      	adds	r3, #20
 800a604:	461a      	mov	r2, r3
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	4413      	add	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a642:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a648:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a64e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	4313      	orrs	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	431a      	orrs	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a666:	2300      	movs	r3, #0

}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a682:	2310      	movs	r3, #16
 800a684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a686:	2340      	movs	r3, #64	; 0x40
 800a688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a692:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a694:	f107 0308 	add.w	r3, r7, #8
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff ff74 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a4:	2110      	movs	r1, #16
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fa18 	bl	800aadc <SDMMC_GetCmdResp1>
 800a6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ae:	69fb      	ldr	r3, [r7, #28]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3720      	adds	r7, #32
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b088      	sub	sp, #32
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a6c6:	2311      	movs	r3, #17
 800a6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ca:	2340      	movs	r3, #64	; 0x40
 800a6cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6d8:	f107 0308 	add.w	r3, r7, #8
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff ff52 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e8:	2111      	movs	r1, #17
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f9f6 	bl	800aadc <SDMMC_GetCmdResp1>
 800a6f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6f2:	69fb      	ldr	r3, [r7, #28]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3720      	adds	r7, #32
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a70a:	2312      	movs	r3, #18
 800a70c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a70e:	2340      	movs	r3, #64	; 0x40
 800a710:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a712:	2300      	movs	r3, #0
 800a714:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a71a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a71c:	f107 0308 	add.w	r3, r7, #8
 800a720:	4619      	mov	r1, r3
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7ff ff30 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a728:	f241 3288 	movw	r2, #5000	; 0x1388
 800a72c:	2112      	movs	r1, #18
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f9d4 	bl	800aadc <SDMMC_GetCmdResp1>
 800a734:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a736:	69fb      	ldr	r3, [r7, #28]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a74e:	2318      	movs	r3, #24
 800a750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a752:	2340      	movs	r3, #64	; 0x40
 800a754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a756:	2300      	movs	r3, #0
 800a758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a75a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a75e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a760:	f107 0308 	add.w	r3, r7, #8
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7ff ff0e 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a76c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a770:	2118      	movs	r1, #24
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f9b2 	bl	800aadc <SDMMC_GetCmdResp1>
 800a778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77a:	69fb      	ldr	r3, [r7, #28]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3720      	adds	r7, #32
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a792:	2319      	movs	r3, #25
 800a794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a796:	2340      	movs	r3, #64	; 0x40
 800a798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a79a:	2300      	movs	r3, #0
 800a79c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a79e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7a4:	f107 0308 	add.w	r3, r7, #8
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff feec 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a7b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7b4:	2119      	movs	r1, #25
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f990 	bl	800aadc <SDMMC_GetCmdResp1>
 800a7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7be:	69fb      	ldr	r3, [r7, #28]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3720      	adds	r7, #32
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a7d4:	230c      	movs	r3, #12
 800a7d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7d8:	2340      	movs	r3, #64	; 0x40
 800a7da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7e4:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7e6:	f107 0308 	add.w	r3, r7, #8
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff fecb 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a7f2:	4a05      	ldr	r2, [pc, #20]	; (800a808 <SDMMC_CmdStopTransfer+0x40>)
 800a7f4:	210c      	movs	r1, #12
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f970 	bl	800aadc <SDMMC_GetCmdResp1>
 800a7fc:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800a7fe:	69fb      	ldr	r3, [r7, #28]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3720      	adds	r7, #32
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	05f5e100 	.word	0x05f5e100

0800a80c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	; 0x28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a81c:	2307      	movs	r3, #7
 800a81e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a820:	2340      	movs	r3, #64	; 0x40
 800a822:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a824:	2300      	movs	r3, #0
 800a826:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a82c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a82e:	f107 0310 	add.w	r3, r7, #16
 800a832:	4619      	mov	r1, r3
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f7ff fea7 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a83a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a83e:	2107      	movs	r1, #7
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f000 f94b 	bl	800aadc <SDMMC_GetCmdResp1>
 800a846:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3728      	adds	r7, #40	; 0x28
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b088      	sub	sp, #32
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a85e:	2300      	movs	r3, #0
 800a860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a866:	2300      	movs	r3, #0
 800a868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a86a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a86e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a870:	f107 0308 	add.w	r3, r7, #8
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff fe86 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fb65 	bl	800af4c <SDMMC_GetCmdError>
 800a882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a884:	69fb      	ldr	r3, [r7, #28]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b088      	sub	sp, #32
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a896:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a89a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a89c:	2308      	movs	r3, #8
 800a89e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8a0:	2340      	movs	r3, #64	; 0x40
 800a8a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8ae:	f107 0308 	add.w	r3, r7, #8
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff fe67 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 faf8 	bl	800aeb0 <SDMMC_GetCmdResp7>
 800a8c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8c2:	69fb      	ldr	r3, [r7, #28]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3720      	adds	r7, #32
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b088      	sub	sp, #32
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a8da:	2337      	movs	r3, #55	; 0x37
 800a8dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8de:	2340      	movs	r3, #64	; 0x40
 800a8e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8ec:	f107 0308 	add.w	r3, r7, #8
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff fe48 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8fc:	2137      	movs	r1, #55	; 0x37
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f8ec 	bl	800aadc <SDMMC_GetCmdResp1>
 800a904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a906:	69fb      	ldr	r3, [r7, #28]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3720      	adds	r7, #32
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a924:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a926:	2329      	movs	r3, #41	; 0x29
 800a928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a92a:	2340      	movs	r3, #64	; 0x40
 800a92c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a92e:	2300      	movs	r3, #0
 800a930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a936:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a938:	f107 0308 	add.w	r3, r7, #8
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fe22 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f9ff 	bl	800ad48 <SDMMC_GetCmdResp3>
 800a94a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a94c:	69fb      	ldr	r3, [r7, #28]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3720      	adds	r7, #32
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b088      	sub	sp, #32
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a964:	2306      	movs	r3, #6
 800a966:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a968:	2340      	movs	r3, #64	; 0x40
 800a96a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a96c:	2300      	movs	r3, #0
 800a96e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a974:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a976:	f107 0308 	add.w	r3, r7, #8
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7ff fe03 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a982:	f241 3288 	movw	r2, #5000	; 0x1388
 800a986:	2106      	movs	r1, #6
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f8a7 	bl	800aadc <SDMMC_GetCmdResp1>
 800a98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a990:	69fb      	ldr	r3, [r7, #28]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3720      	adds	r7, #32
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b088      	sub	sp, #32
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a9a6:	2333      	movs	r3, #51	; 0x33
 800a9a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9aa:	2340      	movs	r3, #64	; 0x40
 800a9ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9b8:	f107 0308 	add.w	r3, r7, #8
 800a9bc:	4619      	mov	r1, r3
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f7ff fde2 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a9c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c8:	2133      	movs	r1, #51	; 0x33
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f886 	bl	800aadc <SDMMC_GetCmdResp1>
 800a9d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9d2:	69fb      	ldr	r3, [r7, #28]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3720      	adds	r7, #32
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a9ec:	23c0      	movs	r3, #192	; 0xc0
 800a9ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9fa:	f107 0308 	add.w	r3, r7, #8
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7ff fdc1 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f956 	bl	800acb8 <SDMMC_GetCmdResp2>
 800aa0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa0e:	69fb      	ldr	r3, [r7, #28]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3720      	adds	r7, #32
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b088      	sub	sp, #32
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aa26:	2309      	movs	r3, #9
 800aa28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa2a:	23c0      	movs	r3, #192	; 0xc0
 800aa2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa38:	f107 0308 	add.w	r3, r7, #8
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7ff fda2 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f937 	bl	800acb8 <SDMMC_GetCmdResp2>
 800aa4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa4c:	69fb      	ldr	r3, [r7, #28]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3720      	adds	r7, #32
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b088      	sub	sp, #32
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa60:	2300      	movs	r3, #0
 800aa62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa64:	2303      	movs	r3, #3
 800aa66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa68:	2340      	movs	r3, #64	; 0x40
 800aa6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa76:	f107 0308 	add.w	r3, r7, #8
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff fd83 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	2103      	movs	r1, #3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f99c 	bl	800adc4 <SDMMC_GetCmdResp6>
 800aa8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa8e:	69fb      	ldr	r3, [r7, #28]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3720      	adds	r7, #32
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b088      	sub	sp, #32
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aaa6:	230d      	movs	r3, #13
 800aaa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaaa:	2340      	movs	r3, #64	; 0x40
 800aaac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaae:	2300      	movs	r3, #0
 800aab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aab8:	f107 0308 	add.w	r3, r7, #8
 800aabc:	4619      	mov	r1, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7ff fd62 	bl	800a588 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac8:	210d      	movs	r1, #13
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f806 	bl	800aadc <SDMMC_GetCmdResp1>
 800aad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aad2:	69fb      	ldr	r3, [r7, #28]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3720      	adds	r7, #32
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	460b      	mov	r3, r1
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aaea:	4b70      	ldr	r3, [pc, #448]	; (800acac <SDMMC_GetCmdResp1+0x1d0>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a70      	ldr	r2, [pc, #448]	; (800acb0 <SDMMC_GetCmdResp1+0x1d4>)
 800aaf0:	fba2 2303 	umull	r2, r3, r2, r3
 800aaf4:	0a5a      	lsrs	r2, r3, #9
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	fb02 f303 	mul.w	r3, r2, r3
 800aafc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	1e5a      	subs	r2, r3, #1
 800ab02:	61fa      	str	r2, [r7, #28]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d102      	bne.n	800ab0e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab0c:	e0c9      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab12:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0ef      	beq.n	800aafe <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1ea      	bne.n	800aafe <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d004      	beq.n	800ab3e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2204      	movs	r2, #4
 800ab38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab3a:	2304      	movs	r3, #4
 800ab3c:	e0b1      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d004      	beq.n	800ab54 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e0a6      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	22c5      	movs	r2, #197	; 0xc5
 800ab58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7ff fd3e 	bl	800a5dc <SDMMC_GetCommandResponse>
 800ab60:	4603      	mov	r3, r0
 800ab62:	461a      	mov	r2, r3
 800ab64:	7afb      	ldrb	r3, [r7, #11]
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d001      	beq.n	800ab6e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e099      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ab6e:	2100      	movs	r1, #0
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7ff fd40 	bl	800a5f6 <SDMMC_GetResponse>
 800ab76:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	4b4e      	ldr	r3, [pc, #312]	; (800acb4 <SDMMC_GetCmdResp1+0x1d8>)
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e08d      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	da02      	bge.n	800ab92 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ab8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab90:	e087      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d001      	beq.n	800aba0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ab9c:	2340      	movs	r3, #64	; 0x40
 800ab9e:	e080      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800abaa:	2380      	movs	r3, #128	; 0x80
 800abac:	e079      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800abb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abbc:	e071      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800abc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abcc:	e069      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800abd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abdc:	e061      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800abe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800abec:	e059      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abfc:	e051      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d002      	beq.n	800ac0e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac0c:	e049      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ac18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ac1c:	e041      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d002      	beq.n	800ac2e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ac28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac2c:	e039      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d002      	beq.n	800ac3e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ac38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ac3c:	e031      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d002      	beq.n	800ac4e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ac48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ac4c:	e029      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ac58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac5c:	e021      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ac68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ac6c:	e019      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ac78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac7c:	e011      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ac88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac8c:	e009      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f003 0308 	and.w	r3, r3, #8
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ac98:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ac9c:	e001      	b.n	800aca2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3720      	adds	r7, #32
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000000 	.word	0x20000000
 800acb0:	10624dd3 	.word	0x10624dd3
 800acb4:	fdffe008 	.word	0xfdffe008

0800acb8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acc0:	4b1f      	ldr	r3, [pc, #124]	; (800ad40 <SDMMC_GetCmdResp2+0x88>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a1f      	ldr	r2, [pc, #124]	; (800ad44 <SDMMC_GetCmdResp2+0x8c>)
 800acc6:	fba2 2303 	umull	r2, r3, r2, r3
 800acca:	0a5b      	lsrs	r3, r3, #9
 800accc:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd0:	fb02 f303 	mul.w	r3, r2, r3
 800acd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	1e5a      	subs	r2, r3, #1
 800acda:	60fa      	str	r2, [r7, #12]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ace0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ace4:	e026      	b.n	800ad34 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0ef      	beq.n	800acd6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1ea      	bne.n	800acd6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d004      	beq.n	800ad16 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2204      	movs	r2, #4
 800ad10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad12:	2304      	movs	r3, #4
 800ad14:	e00e      	b.n	800ad34 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e003      	b.n	800ad34 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	22c5      	movs	r2, #197	; 0xc5
 800ad30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	20000000 	.word	0x20000000
 800ad44:	10624dd3 	.word	0x10624dd3

0800ad48 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad50:	4b1a      	ldr	r3, [pc, #104]	; (800adbc <SDMMC_GetCmdResp3+0x74>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a1a      	ldr	r2, [pc, #104]	; (800adc0 <SDMMC_GetCmdResp3+0x78>)
 800ad56:	fba2 2303 	umull	r2, r3, r2, r3
 800ad5a:	0a5b      	lsrs	r3, r3, #9
 800ad5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad60:	fb02 f303 	mul.w	r3, r2, r3
 800ad64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	1e5a      	subs	r2, r3, #1
 800ad6a:	60fa      	str	r2, [r7, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d102      	bne.n	800ad76 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad74:	e01b      	b.n	800adae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0ef      	beq.n	800ad66 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1ea      	bne.n	800ad66 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d004      	beq.n	800ada6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2204      	movs	r2, #4
 800ada0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ada2:	2304      	movs	r3, #4
 800ada4:	e003      	b.n	800adae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	22c5      	movs	r2, #197	; 0xc5
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	20000000 	.word	0x20000000
 800adc0:	10624dd3 	.word	0x10624dd3

0800adc4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b088      	sub	sp, #32
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	460b      	mov	r3, r1
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800add2:	4b35      	ldr	r3, [pc, #212]	; (800aea8 <SDMMC_GetCmdResp6+0xe4>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a35      	ldr	r2, [pc, #212]	; (800aeac <SDMMC_GetCmdResp6+0xe8>)
 800add8:	fba2 2303 	umull	r2, r3, r2, r3
 800addc:	0a5b      	lsrs	r3, r3, #9
 800adde:	f241 3288 	movw	r2, #5000	; 0x1388
 800ade2:	fb02 f303 	mul.w	r3, r2, r3
 800ade6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	1e5a      	subs	r2, r3, #1
 800adec:	61fa      	str	r2, [r7, #28]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800adf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800adf6:	e052      	b.n	800ae9e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d0ef      	beq.n	800ade8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1ea      	bne.n	800ade8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae16:	f003 0304 	and.w	r3, r3, #4
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2204      	movs	r2, #4
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae24:	2304      	movs	r3, #4
 800ae26:	e03a      	b.n	800ae9e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d004      	beq.n	800ae3e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2201      	movs	r2, #1
 800ae38:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e02f      	b.n	800ae9e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7ff fbcc 	bl	800a5dc <SDMMC_GetCommandResponse>
 800ae44:	4603      	mov	r3, r0
 800ae46:	461a      	mov	r2, r3
 800ae48:	7afb      	ldrb	r3, [r7, #11]
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d001      	beq.n	800ae52 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e025      	b.n	800ae9e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	22c5      	movs	r2, #197	; 0xc5
 800ae56:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ae58:	2100      	movs	r1, #0
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f7ff fbcb 	bl	800a5f6 <SDMMC_GetResponse>
 800ae60:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d106      	bne.n	800ae7a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	0c1b      	lsrs	r3, r3, #16
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ae76:	2300      	movs	r3, #0
 800ae78:	e011      	b.n	800ae9e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae88:	e009      	b.n	800ae9e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae98:	e001      	b.n	800ae9e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20000000 	.word	0x20000000
 800aeac:	10624dd3 	.word	0x10624dd3

0800aeb0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aeb8:	4b22      	ldr	r3, [pc, #136]	; (800af44 <SDMMC_GetCmdResp7+0x94>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a22      	ldr	r2, [pc, #136]	; (800af48 <SDMMC_GetCmdResp7+0x98>)
 800aebe:	fba2 2303 	umull	r2, r3, r2, r3
 800aec2:	0a5b      	lsrs	r3, r3, #9
 800aec4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aec8:	fb02 f303 	mul.w	r3, r2, r3
 800aecc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	1e5a      	subs	r2, r3, #1
 800aed2:	60fa      	str	r2, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aed8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aedc:	e02c      	b.n	800af38 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d0ef      	beq.n	800aece <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1ea      	bne.n	800aece <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	d004      	beq.n	800af0e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2204      	movs	r2, #4
 800af08:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af0a:	2304      	movs	r3, #4
 800af0c:	e014      	b.n	800af38 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d004      	beq.n	800af24 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2201      	movs	r2, #1
 800af1e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af20:	2301      	movs	r3, #1
 800af22:	e009      	b.n	800af38 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2240      	movs	r2, #64	; 0x40
 800af34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800af36:	2300      	movs	r3, #0

}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	20000000 	.word	0x20000000
 800af48:	10624dd3 	.word	0x10624dd3

0800af4c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af54:	4b11      	ldr	r3, [pc, #68]	; (800af9c <SDMMC_GetCmdError+0x50>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a11      	ldr	r2, [pc, #68]	; (800afa0 <SDMMC_GetCmdError+0x54>)
 800af5a:	fba2 2303 	umull	r2, r3, r2, r3
 800af5e:	0a5b      	lsrs	r3, r3, #9
 800af60:	f241 3288 	movw	r2, #5000	; 0x1388
 800af64:	fb02 f303 	mul.w	r3, r2, r3
 800af68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	1e5a      	subs	r2, r3, #1
 800af6e:	60fa      	str	r2, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d102      	bne.n	800af7a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af78:	e009      	b.n	800af8e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0f1      	beq.n	800af6a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	22c5      	movs	r2, #197	; 0xc5
 800af8a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	20000000 	.word	0x20000000
 800afa0:	10624dd3 	.word	0x10624dd3

0800afa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afa4:	b084      	sub	sp, #16
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b084      	sub	sp, #16
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	f107 001c 	add.w	r0, r7, #28
 800afb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 fa1c 	bl	800c400 <USB_CoreReset>
 800afc8:	4603      	mov	r3, r0
 800afca:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800afcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d106      	bne.n	800afe0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	639a      	str	r2, [r3, #56]	; 0x38
 800afde:	e005      	b.n	800afec <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800afec:	7bfb      	ldrb	r3, [r7, #15]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aff8:	b004      	add	sp, #16
 800affa:	4770      	bx	lr

0800affc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800affc:	b480      	push	{r7}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	4613      	mov	r3, r2
 800b008:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d165      	bne.n	800b0dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	4a3e      	ldr	r2, [pc, #248]	; (800b10c <USB_SetTurnaroundTime+0x110>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d906      	bls.n	800b026 <USB_SetTurnaroundTime+0x2a>
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	4a3d      	ldr	r2, [pc, #244]	; (800b110 <USB_SetTurnaroundTime+0x114>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d202      	bcs.n	800b026 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b020:	230f      	movs	r3, #15
 800b022:	617b      	str	r3, [r7, #20]
 800b024:	e05c      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	4a39      	ldr	r2, [pc, #228]	; (800b110 <USB_SetTurnaroundTime+0x114>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d306      	bcc.n	800b03c <USB_SetTurnaroundTime+0x40>
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	4a38      	ldr	r2, [pc, #224]	; (800b114 <USB_SetTurnaroundTime+0x118>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d202      	bcs.n	800b03c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b036:	230e      	movs	r3, #14
 800b038:	617b      	str	r3, [r7, #20]
 800b03a:	e051      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	4a35      	ldr	r2, [pc, #212]	; (800b114 <USB_SetTurnaroundTime+0x118>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d306      	bcc.n	800b052 <USB_SetTurnaroundTime+0x56>
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	4a34      	ldr	r2, [pc, #208]	; (800b118 <USB_SetTurnaroundTime+0x11c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d202      	bcs.n	800b052 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b04c:	230d      	movs	r3, #13
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e046      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	4a30      	ldr	r2, [pc, #192]	; (800b118 <USB_SetTurnaroundTime+0x11c>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d306      	bcc.n	800b068 <USB_SetTurnaroundTime+0x6c>
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	4a2f      	ldr	r2, [pc, #188]	; (800b11c <USB_SetTurnaroundTime+0x120>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d802      	bhi.n	800b068 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b062:	230c      	movs	r3, #12
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	e03b      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	4a2c      	ldr	r2, [pc, #176]	; (800b11c <USB_SetTurnaroundTime+0x120>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d906      	bls.n	800b07e <USB_SetTurnaroundTime+0x82>
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	4a2b      	ldr	r2, [pc, #172]	; (800b120 <USB_SetTurnaroundTime+0x124>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d802      	bhi.n	800b07e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b078:	230b      	movs	r3, #11
 800b07a:	617b      	str	r3, [r7, #20]
 800b07c:	e030      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	4a27      	ldr	r2, [pc, #156]	; (800b120 <USB_SetTurnaroundTime+0x124>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d906      	bls.n	800b094 <USB_SetTurnaroundTime+0x98>
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	4a26      	ldr	r2, [pc, #152]	; (800b124 <USB_SetTurnaroundTime+0x128>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d802      	bhi.n	800b094 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b08e:	230a      	movs	r3, #10
 800b090:	617b      	str	r3, [r7, #20]
 800b092:	e025      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	4a23      	ldr	r2, [pc, #140]	; (800b124 <USB_SetTurnaroundTime+0x128>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d906      	bls.n	800b0aa <USB_SetTurnaroundTime+0xae>
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	4a22      	ldr	r2, [pc, #136]	; (800b128 <USB_SetTurnaroundTime+0x12c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d202      	bcs.n	800b0aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b0a4:	2309      	movs	r3, #9
 800b0a6:	617b      	str	r3, [r7, #20]
 800b0a8:	e01a      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	4a1e      	ldr	r2, [pc, #120]	; (800b128 <USB_SetTurnaroundTime+0x12c>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d306      	bcc.n	800b0c0 <USB_SetTurnaroundTime+0xc4>
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	4a1d      	ldr	r2, [pc, #116]	; (800b12c <USB_SetTurnaroundTime+0x130>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d802      	bhi.n	800b0c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b0ba:	2308      	movs	r3, #8
 800b0bc:	617b      	str	r3, [r7, #20]
 800b0be:	e00f      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	4a1a      	ldr	r2, [pc, #104]	; (800b12c <USB_SetTurnaroundTime+0x130>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d906      	bls.n	800b0d6 <USB_SetTurnaroundTime+0xda>
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4a19      	ldr	r2, [pc, #100]	; (800b130 <USB_SetTurnaroundTime+0x134>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d202      	bcs.n	800b0d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b0d0:	2307      	movs	r3, #7
 800b0d2:	617b      	str	r3, [r7, #20]
 800b0d4:	e004      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b0d6:	2306      	movs	r3, #6
 800b0d8:	617b      	str	r3, [r7, #20]
 800b0da:	e001      	b.n	800b0e0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b0dc:	2309      	movs	r3, #9
 800b0de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	68da      	ldr	r2, [r3, #12]
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	029b      	lsls	r3, r3, #10
 800b0f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	371c      	adds	r7, #28
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	00d8acbf 	.word	0x00d8acbf
 800b110:	00e4e1c0 	.word	0x00e4e1c0
 800b114:	00f42400 	.word	0x00f42400
 800b118:	01067380 	.word	0x01067380
 800b11c:	011a499f 	.word	0x011a499f
 800b120:	01312cff 	.word	0x01312cff
 800b124:	014ca43f 	.word	0x014ca43f
 800b128:	016e3600 	.word	0x016e3600
 800b12c:	01a6ab1f 	.word	0x01a6ab1f
 800b130:	01e84800 	.word	0x01e84800

0800b134 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f043 0201 	orr.w	r2, r3, #1
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b156:	b480      	push	{r7}
 800b158:	b083      	sub	sp, #12
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f023 0201 	bic.w	r2, r3, #1
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b184:	2300      	movs	r3, #0
 800b186:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d115      	bne.n	800b1c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	f7f8 fd66 	bl	8003c78 <HAL_Delay>
      ms++;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f001 f8ab 	bl	800c30e <USB_GetMode>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d01e      	beq.n	800b1fc <USB_SetCurrentMode+0x84>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b31      	cmp	r3, #49	; 0x31
 800b1c2:	d9f0      	bls.n	800b1a6 <USB_SetCurrentMode+0x2e>
 800b1c4:	e01a      	b.n	800b1fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1c6:	78fb      	ldrb	r3, [r7, #3]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d115      	bne.n	800b1f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1d8:	2001      	movs	r0, #1
 800b1da:	f7f8 fd4d 	bl	8003c78 <HAL_Delay>
      ms++;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f001 f892 	bl	800c30e <USB_GetMode>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <USB_SetCurrentMode+0x84>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b31      	cmp	r3, #49	; 0x31
 800b1f4:	d9f0      	bls.n	800b1d8 <USB_SetCurrentMode+0x60>
 800b1f6:	e001      	b.n	800b1fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e005      	b.n	800b208 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2b32      	cmp	r3, #50	; 0x32
 800b200:	d101      	bne.n	800b206 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e000      	b.n	800b208 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b210:	b084      	sub	sp, #16
 800b212:	b580      	push	{r7, lr}
 800b214:	b086      	sub	sp, #24
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b21e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b222:	2300      	movs	r3, #0
 800b224:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b22a:	2300      	movs	r3, #0
 800b22c:	613b      	str	r3, [r7, #16]
 800b22e:	e009      	b.n	800b244 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	3340      	adds	r3, #64	; 0x40
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	2200      	movs	r2, #0
 800b23c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	3301      	adds	r3, #1
 800b242:	613b      	str	r3, [r7, #16]
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	2b0e      	cmp	r3, #14
 800b248:	d9f2      	bls.n	800b230 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d11c      	bne.n	800b28a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b25e:	f043 0302 	orr.w	r3, r3, #2
 800b262:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	e005      	b.n	800b296 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b29c:	461a      	mov	r2, r3
 800b29e:	2300      	movs	r3, #0
 800b2a0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b2a2:	2103      	movs	r1, #3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f959 	bl	800b55c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2aa:	2110      	movs	r1, #16
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f8f1 	bl	800b494 <USB_FlushTxFifo>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f91d 	bl	800b4fc <USB_FlushRxFifo>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2de:	461a      	mov	r2, r3
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	613b      	str	r3, [r7, #16]
 800b2f4:	e043      	b.n	800b37e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b30c:	d118      	bne.n	800b340 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	015a      	lsls	r2, r3, #5
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	4413      	add	r3, r2
 800b31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b320:	461a      	mov	r2, r3
 800b322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	e013      	b.n	800b352 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	015a      	lsls	r2, r3, #5
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	4413      	add	r3, r2
 800b332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b336:	461a      	mov	r2, r3
 800b338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	e008      	b.n	800b352 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34c:	461a      	mov	r2, r3
 800b34e:	2300      	movs	r3, #0
 800b350:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	015a      	lsls	r2, r3, #5
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	4413      	add	r3, r2
 800b35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35e:	461a      	mov	r2, r3
 800b360:	2300      	movs	r3, #0
 800b362:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b370:	461a      	mov	r2, r3
 800b372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b376:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	3301      	adds	r3, #1
 800b37c:	613b      	str	r3, [r7, #16]
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	429a      	cmp	r2, r3
 800b384:	d3b7      	bcc.n	800b2f6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b386:	2300      	movs	r3, #0
 800b388:	613b      	str	r3, [r7, #16]
 800b38a:	e043      	b.n	800b414 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b39e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3a2:	d118      	bne.n	800b3d6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10a      	bne.n	800b3c0 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3bc:	6013      	str	r3, [r2, #0]
 800b3be:	e013      	b.n	800b3e8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	e008      	b.n	800b3e8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	015a      	lsls	r2, r3, #5
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	015a      	lsls	r2, r3, #5
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	4413      	add	r3, r2
 800b402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b406:	461a      	mov	r2, r3
 800b408:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b40c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	3301      	adds	r3, #1
 800b412:	613b      	str	r3, [r7, #16]
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d3b7      	bcc.n	800b38c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b42a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b42e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b43c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	699b      	ldr	r3, [r3, #24]
 800b442:	f043 0210 	orr.w	r2, r3, #16
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	699a      	ldr	r2, [r3, #24]
 800b44e:	4b10      	ldr	r3, [pc, #64]	; (800b490 <USB_DevInit+0x280>)
 800b450:	4313      	orrs	r3, r2
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d005      	beq.n	800b468 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	f043 0208 	orr.w	r2, r3, #8
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d107      	bne.n	800b47e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	699b      	ldr	r3, [r3, #24]
 800b472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b476:	f043 0304 	orr.w	r3, r3, #4
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b48a:	b004      	add	sp, #16
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	803c3800 	.word	0x803c3800

0800b494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4a13      	ldr	r2, [pc, #76]	; (800b4f8 <USB_FlushTxFifo+0x64>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d901      	bls.n	800b4b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e01b      	b.n	800b4ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	daf2      	bge.n	800b4a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	019b      	lsls	r3, r3, #6
 800b4c4:	f043 0220 	orr.w	r2, r3, #32
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	4a08      	ldr	r2, [pc, #32]	; (800b4f8 <USB_FlushTxFifo+0x64>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d901      	bls.n	800b4de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	e006      	b.n	800b4ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	f003 0320 	and.w	r3, r3, #32
 800b4e6:	2b20      	cmp	r3, #32
 800b4e8:	d0f0      	beq.n	800b4cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	00030d40 	.word	0x00030d40

0800b4fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b504:	2300      	movs	r3, #0
 800b506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	3301      	adds	r3, #1
 800b50c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	4a11      	ldr	r2, [pc, #68]	; (800b558 <USB_FlushRxFifo+0x5c>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d901      	bls.n	800b51a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e018      	b.n	800b54c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	daf2      	bge.n	800b508 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b522:	2300      	movs	r3, #0
 800b524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2210      	movs	r2, #16
 800b52a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3301      	adds	r3, #1
 800b530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	4a08      	ldr	r2, [pc, #32]	; (800b558 <USB_FlushRxFifo+0x5c>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d901      	bls.n	800b53e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b53a:	2303      	movs	r3, #3
 800b53c:	e006      	b.n	800b54c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	f003 0310 	and.w	r3, r3, #16
 800b546:	2b10      	cmp	r3, #16
 800b548:	d0f0      	beq.n	800b52c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	00030d40 	.word	0x00030d40

0800b55c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	78fb      	ldrb	r3, [r7, #3]
 800b576:	68f9      	ldr	r1, [r7, #12]
 800b578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b57c:	4313      	orrs	r3, r2
 800b57e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b58e:	b480      	push	{r7}
 800b590:	b087      	sub	sp, #28
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	f003 0306 	and.w	r3, r3, #6
 800b5a6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d002      	beq.n	800b5b4 <USB_GetDevSpeed+0x26>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b06      	cmp	r3, #6
 800b5b2:	d102      	bne.n	800b5ba <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	75fb      	strb	r3, [r7, #23]
 800b5b8:	e001      	b.n	800b5be <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b5ba:	230f      	movs	r3, #15
 800b5bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	371c      	adds	r7, #28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d13a      	bne.n	800b65e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ee:	69da      	ldr	r2, [r3, #28]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	f003 030f 	and.w	r3, r3, #15
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	68f9      	ldr	r1, [r7, #12]
 800b602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b606:	4313      	orrs	r3, r2
 800b608:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	015a      	lsls	r2, r3, #5
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	4413      	add	r3, r2
 800b612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d155      	bne.n	800b6cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	015a      	lsls	r2, r3, #5
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4413      	add	r3, r2
 800b628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	791b      	ldrb	r3, [r3, #4]
 800b63a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b63c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	059b      	lsls	r3, r3, #22
 800b642:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b644:	4313      	orrs	r3, r2
 800b646:	68ba      	ldr	r2, [r7, #8]
 800b648:	0151      	lsls	r1, r2, #5
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	440a      	add	r2, r1
 800b64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b65a:	6013      	str	r3, [r2, #0]
 800b65c:	e036      	b.n	800b6cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b664:	69da      	ldr	r2, [r3, #28]
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	f003 030f 	and.w	r3, r3, #15
 800b66e:	2101      	movs	r1, #1
 800b670:	fa01 f303 	lsl.w	r3, r1, r3
 800b674:	041b      	lsls	r3, r3, #16
 800b676:	68f9      	ldr	r1, [r7, #12]
 800b678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b67c:	4313      	orrs	r3, r2
 800b67e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	015a      	lsls	r2, r3, #5
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4413      	add	r3, r2
 800b688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d11a      	bne.n	800b6cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	791b      	ldrb	r3, [r3, #4]
 800b6b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b6b2:	430b      	orrs	r3, r1
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	0151      	lsls	r1, r2, #5
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	440a      	add	r2, r1
 800b6be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3714      	adds	r7, #20
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
	...

0800b6dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	785b      	ldrb	r3, [r3, #1]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d161      	bne.n	800b7bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	015a      	lsls	r2, r3, #5
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4413      	add	r3, r2
 800b700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b70a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b70e:	d11f      	bne.n	800b750 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	0151      	lsls	r1, r2, #5
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	440a      	add	r2, r1
 800b726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b72a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b72e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	015a      	lsls	r2, r3, #5
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	4413      	add	r3, r2
 800b738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	0151      	lsls	r1, r2, #5
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	440a      	add	r2, r1
 800b746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b74a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b74e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	f003 030f 	and.w	r3, r3, #15
 800b760:	2101      	movs	r1, #1
 800b762:	fa01 f303 	lsl.w	r3, r1, r3
 800b766:	b29b      	uxth	r3, r3
 800b768:	43db      	mvns	r3, r3
 800b76a:	68f9      	ldr	r1, [r7, #12]
 800b76c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b770:	4013      	ands	r3, r2
 800b772:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b77a:	69da      	ldr	r2, [r3, #28]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	f003 030f 	and.w	r3, r3, #15
 800b784:	2101      	movs	r1, #1
 800b786:	fa01 f303 	lsl.w	r3, r1, r3
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	43db      	mvns	r3, r3
 800b78e:	68f9      	ldr	r1, [r7, #12]
 800b790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b794:	4013      	ands	r3, r2
 800b796:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	015a      	lsls	r2, r3, #5
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	4413      	add	r3, r2
 800b7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	0159      	lsls	r1, r3, #5
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	440b      	add	r3, r1
 800b7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	4b35      	ldr	r3, [pc, #212]	; (800b88c <USB_DeactivateEndpoint+0x1b0>)
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	600b      	str	r3, [r1, #0]
 800b7ba:	e060      	b.n	800b87e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7d2:	d11f      	bne.n	800b814 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	0151      	lsls	r1, r2, #5
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	440a      	add	r2, r1
 800b7ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b7f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	015a      	lsls	r2, r3, #5
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	0151      	lsls	r1, r2, #5
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	440a      	add	r2, r1
 800b80a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b80e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b812:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	f003 030f 	and.w	r3, r3, #15
 800b824:	2101      	movs	r1, #1
 800b826:	fa01 f303 	lsl.w	r3, r1, r3
 800b82a:	041b      	lsls	r3, r3, #16
 800b82c:	43db      	mvns	r3, r3
 800b82e:	68f9      	ldr	r1, [r7, #12]
 800b830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b834:	4013      	ands	r3, r2
 800b836:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b83e:	69da      	ldr	r2, [r3, #28]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	f003 030f 	and.w	r3, r3, #15
 800b848:	2101      	movs	r1, #1
 800b84a:	fa01 f303 	lsl.w	r3, r1, r3
 800b84e:	041b      	lsls	r3, r3, #16
 800b850:	43db      	mvns	r3, r3
 800b852:	68f9      	ldr	r1, [r7, #12]
 800b854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b858:	4013      	ands	r3, r2
 800b85a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	015a      	lsls	r2, r3, #5
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4413      	add	r3, r2
 800b864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	0159      	lsls	r1, r3, #5
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	440b      	add	r3, r1
 800b872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b876:	4619      	mov	r1, r3
 800b878:	4b05      	ldr	r3, [pc, #20]	; (800b890 <USB_DeactivateEndpoint+0x1b4>)
 800b87a:	4013      	ands	r3, r2
 800b87c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	ec337800 	.word	0xec337800
 800b890:	eff37800 	.word	0xeff37800

0800b894 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	785b      	ldrb	r3, [r3, #1]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	f040 8128 	bne.w	800bb02 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d132      	bne.n	800b920 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	015a      	lsls	r2, r3, #5
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	0151      	lsls	r1, r2, #5
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	440a      	add	r2, r1
 800b8d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	0151      	lsls	r1, r2, #5
 800b8f0:	697a      	ldr	r2, [r7, #20]
 800b8f2:	440a      	add	r2, r1
 800b8f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	4413      	add	r3, r2
 800b906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	0151      	lsls	r1, r2, #5
 800b910:	697a      	ldr	r2, [r7, #20]
 800b912:	440a      	add	r2, r1
 800b914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b918:	0cdb      	lsrs	r3, r3, #19
 800b91a:	04db      	lsls	r3, r3, #19
 800b91c:	6113      	str	r3, [r2, #16]
 800b91e:	e092      	b.n	800ba46 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	693a      	ldr	r2, [r7, #16]
 800b930:	0151      	lsls	r1, r2, #5
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	440a      	add	r2, r1
 800b936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b93a:	0cdb      	lsrs	r3, r3, #19
 800b93c:	04db      	lsls	r3, r3, #19
 800b93e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	693a      	ldr	r2, [r7, #16]
 800b950:	0151      	lsls	r1, r2, #5
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	440a      	add	r2, r1
 800b956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b95a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b95e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b962:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d11a      	bne.n	800b9a0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	691a      	ldr	r2, [r3, #16]
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	429a      	cmp	r2, r3
 800b974:	d903      	bls.n	800b97e <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	689a      	ldr	r2, [r3, #8]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	015a      	lsls	r2, r3, #5
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	4413      	add	r3, r2
 800b986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98a:	691b      	ldr	r3, [r3, #16]
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	0151      	lsls	r1, r2, #5
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	440a      	add	r2, r1
 800b994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b99c:	6113      	str	r3, [r2, #16]
 800b99e:	e01b      	b.n	800b9d8 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ac:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	6919      	ldr	r1, [r3, #16]
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	440b      	add	r3, r1
 800b9b8:	1e59      	subs	r1, r3, #1
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	689b      	ldr	r3, [r3, #8]
 800b9be:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9c2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b9c4:	4b8d      	ldr	r3, [pc, #564]	; (800bbfc <USB_EPStartXfer+0x368>)
 800b9c6:	400b      	ands	r3, r1
 800b9c8:	6939      	ldr	r1, [r7, #16]
 800b9ca:	0148      	lsls	r0, r1, #5
 800b9cc:	6979      	ldr	r1, [r7, #20]
 800b9ce:	4401      	add	r1, r0
 800b9d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	015a      	lsls	r2, r3, #5
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	4413      	add	r3, r2
 800b9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e4:	691a      	ldr	r2, [r3, #16]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9ee:	6939      	ldr	r1, [r7, #16]
 800b9f0:	0148      	lsls	r0, r1, #5
 800b9f2:	6979      	ldr	r1, [r7, #20]
 800b9f4:	4401      	add	r1, r0
 800b9f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	791b      	ldrb	r3, [r3, #4]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d11f      	bne.n	800ba46 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	015a      	lsls	r2, r3, #5
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	0151      	lsls	r1, r2, #5
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	440a      	add	r2, r1
 800ba1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ba24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	015a      	lsls	r2, r3, #5
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	693a      	ldr	r2, [r7, #16]
 800ba36:	0151      	lsls	r1, r2, #5
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	440a      	add	r2, r1
 800ba3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba44:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	015a      	lsls	r2, r3, #5
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	693a      	ldr	r2, [r7, #16]
 800ba56:	0151      	lsls	r1, r2, #5
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	440a      	add	r2, r1
 800ba5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba64:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	791b      	ldrb	r3, [r3, #4]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d015      	beq.n	800ba9a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 8139 	beq.w	800bcea <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	f003 030f 	and.w	r3, r3, #15
 800ba88:	2101      	movs	r1, #1
 800ba8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba8e:	6979      	ldr	r1, [r7, #20]
 800ba90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba94:	4313      	orrs	r3, r2
 800ba96:	634b      	str	r3, [r1, #52]	; 0x34
 800ba98:	e127      	b.n	800bcea <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d110      	bne.n	800bacc <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	015a      	lsls	r2, r3, #5
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	4413      	add	r3, r2
 800bab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	0151      	lsls	r1, r2, #5
 800babc:	697a      	ldr	r2, [r7, #20]
 800babe:	440a      	add	r2, r1
 800bac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bac4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bac8:	6013      	str	r3, [r2, #0]
 800baca:	e00f      	b.n	800baec <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	015a      	lsls	r2, r3, #5
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	4413      	add	r3, r2
 800bad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	0151      	lsls	r1, r2, #5
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	440a      	add	r2, r1
 800bae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baea:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	68d9      	ldr	r1, [r3, #12]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	781a      	ldrb	r2, [r3, #0]
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f9a6 	bl	800be4c <USB_WritePacket>
 800bb00:	e0f3      	b.n	800bcea <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	0151      	lsls	r1, r2, #5
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	440a      	add	r2, r1
 800bb18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb1c:	0cdb      	lsrs	r3, r3, #19
 800bb1e:	04db      	lsls	r3, r3, #19
 800bb20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	0151      	lsls	r1, r2, #5
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	440a      	add	r2, r1
 800bb38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bb40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bb44:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d12f      	bne.n	800bbac <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d003      	beq.n	800bb5c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	689a      	ldr	r2, [r3, #8]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	689a      	ldr	r2, [r3, #8]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	015a      	lsls	r2, r3, #5
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb70:	691a      	ldr	r2, [r3, #16]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb7a:	6939      	ldr	r1, [r7, #16]
 800bb7c:	0148      	lsls	r0, r1, #5
 800bb7e:	6979      	ldr	r1, [r7, #20]
 800bb80:	4401      	add	r1, r0
 800bb82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb86:	4313      	orrs	r3, r2
 800bb88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	015a      	lsls	r2, r3, #5
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	4413      	add	r3, r2
 800bb92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	0151      	lsls	r1, r2, #5
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	440a      	add	r2, r1
 800bba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bba8:	6113      	str	r3, [r2, #16]
 800bbaa:	e061      	b.n	800bc70 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d125      	bne.n	800bc00 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc0:	691a      	ldr	r2, [r3, #16]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbca:	6939      	ldr	r1, [r7, #16]
 800bbcc:	0148      	lsls	r0, r1, #5
 800bbce:	6979      	ldr	r1, [r7, #20]
 800bbd0:	4401      	add	r1, r0
 800bbd2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	015a      	lsls	r2, r3, #5
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	0151      	lsls	r1, r2, #5
 800bbec:	697a      	ldr	r2, [r7, #20]
 800bbee:	440a      	add	r2, r1
 800bbf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbf8:	6113      	str	r3, [r2, #16]
 800bbfa:	e039      	b.n	800bc70 <USB_EPStartXfer+0x3dc>
 800bbfc:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	691a      	ldr	r2, [r3, #16]
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	4413      	add	r3, r2
 800bc0a:	1e5a      	subs	r2, r3, #1
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc14:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	89fa      	ldrh	r2, [r7, #14]
 800bc1c:	fb03 f202 	mul.w	r2, r3, r2
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	015a      	lsls	r2, r3, #5
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc30:	691a      	ldr	r2, [r3, #16]
 800bc32:	89fb      	ldrh	r3, [r7, #14]
 800bc34:	04d9      	lsls	r1, r3, #19
 800bc36:	4b2f      	ldr	r3, [pc, #188]	; (800bcf4 <USB_EPStartXfer+0x460>)
 800bc38:	400b      	ands	r3, r1
 800bc3a:	6939      	ldr	r1, [r7, #16]
 800bc3c:	0148      	lsls	r0, r1, #5
 800bc3e:	6979      	ldr	r1, [r7, #20]
 800bc40:	4401      	add	r1, r0
 800bc42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc46:	4313      	orrs	r3, r2
 800bc48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	015a      	lsls	r2, r3, #5
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	4413      	add	r3, r2
 800bc52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc56:	691a      	ldr	r2, [r3, #16]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc60:	6939      	ldr	r1, [r7, #16]
 800bc62:	0148      	lsls	r0, r1, #5
 800bc64:	6979      	ldr	r1, [r7, #20]
 800bc66:	4401      	add	r1, r0
 800bc68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	791b      	ldrb	r3, [r3, #4]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d128      	bne.n	800bcca <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d110      	bne.n	800bcaa <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	015a      	lsls	r2, r3, #5
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	4413      	add	r3, r2
 800bc90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	693a      	ldr	r2, [r7, #16]
 800bc98:	0151      	lsls	r1, r2, #5
 800bc9a:	697a      	ldr	r2, [r7, #20]
 800bc9c:	440a      	add	r2, r1
 800bc9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	e00f      	b.n	800bcca <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	015a      	lsls	r2, r3, #5
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	0151      	lsls	r1, r2, #5
 800bcbc:	697a      	ldr	r2, [r7, #20]
 800bcbe:	440a      	add	r2, r1
 800bcc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcc8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	015a      	lsls	r2, r3, #5
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	693a      	ldr	r2, [r7, #16]
 800bcda:	0151      	lsls	r1, r2, #5
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	440a      	add	r2, r1
 800bce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bce4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bce8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3718      	adds	r7, #24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	1ff80000 	.word	0x1ff80000

0800bcf8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b087      	sub	sp, #28
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	785b      	ldrb	r3, [r3, #1]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d14a      	bne.n	800bdac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd2e:	f040 8086 	bne.w	800be3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	015a      	lsls	r2, r3, #5
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	7812      	ldrb	r2, [r2, #0]
 800bd46:	0151      	lsls	r1, r2, #5
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	440a      	add	r2, r1
 800bd4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	7812      	ldrb	r2, [r2, #0]
 800bd6a:	0151      	lsls	r1, r2, #5
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	440a      	add	r2, r1
 800bd70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f242 7210 	movw	r2, #10000	; 0x2710
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d902      	bls.n	800bd90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	75fb      	strb	r3, [r7, #23]
          break;
 800bd8e:	e056      	b.n	800be3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	015a      	lsls	r2, r3, #5
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	4413      	add	r3, r2
 800bd9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bda4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bda8:	d0e7      	beq.n	800bd7a <USB_EPStopXfer+0x82>
 800bdaa:	e048      	b.n	800be3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdc4:	d13b      	bne.n	800be3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	015a      	lsls	r2, r3, #5
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	7812      	ldrb	r2, [r2, #0]
 800bdda:	0151      	lsls	r1, r2, #5
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	440a      	add	r2, r1
 800bde0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bde4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bde8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	7812      	ldrb	r2, [r2, #0]
 800bdfe:	0151      	lsls	r1, r2, #5
 800be00:	693a      	ldr	r2, [r7, #16]
 800be02:	440a      	add	r2, r1
 800be04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3301      	adds	r3, #1
 800be12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f242 7210 	movw	r2, #10000	; 0x2710
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d902      	bls.n	800be24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	75fb      	strb	r3, [r7, #23]
          break;
 800be22:	e00c      	b.n	800be3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	015a      	lsls	r2, r3, #5
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	4413      	add	r3, r2
 800be2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be3c:	d0e7      	beq.n	800be0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be40:	4618      	mov	r0, r3
 800be42:	371c      	adds	r7, #28
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b089      	sub	sp, #36	; 0x24
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	4611      	mov	r1, r2
 800be58:	461a      	mov	r2, r3
 800be5a:	460b      	mov	r3, r1
 800be5c:	71fb      	strb	r3, [r7, #7]
 800be5e:	4613      	mov	r3, r2
 800be60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800be6a:	88bb      	ldrh	r3, [r7, #4]
 800be6c:	3303      	adds	r3, #3
 800be6e:	089b      	lsrs	r3, r3, #2
 800be70:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800be72:	2300      	movs	r3, #0
 800be74:	61bb      	str	r3, [r7, #24]
 800be76:	e018      	b.n	800beaa <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800be78:	79fb      	ldrb	r3, [r7, #7]
 800be7a:	031a      	lsls	r2, r3, #12
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be84:	461a      	mov	r2, r3
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	3301      	adds	r3, #1
 800be90:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	3301      	adds	r3, #1
 800be96:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	3301      	adds	r3, #1
 800be9c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	3301      	adds	r3, #1
 800bea2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	3301      	adds	r3, #1
 800bea8:	61bb      	str	r3, [r7, #24]
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d3e2      	bcc.n	800be78 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3724      	adds	r7, #36	; 0x24
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b08b      	sub	sp, #44	; 0x2c
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	4613      	mov	r3, r2
 800becc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bed6:	88fb      	ldrh	r3, [r7, #6]
 800bed8:	089b      	lsrs	r3, r3, #2
 800beda:	b29b      	uxth	r3, r3
 800bedc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bede:	88fb      	ldrh	r3, [r7, #6]
 800bee0:	f003 0303 	and.w	r3, r3, #3
 800bee4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bee6:	2300      	movs	r3, #0
 800bee8:	623b      	str	r3, [r7, #32]
 800beea:	e014      	b.n	800bf16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	601a      	str	r2, [r3, #0]
    pDest++;
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	3301      	adds	r3, #1
 800befc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800befe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf00:	3301      	adds	r3, #1
 800bf02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	3301      	adds	r3, #1
 800bf08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	3301      	adds	r3, #1
 800bf14:	623b      	str	r3, [r7, #32]
 800bf16:	6a3a      	ldr	r2, [r7, #32]
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d3e6      	bcc.n	800beec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bf1e:	8bfb      	ldrh	r3, [r7, #30]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d01e      	beq.n	800bf62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bf24:	2300      	movs	r3, #0
 800bf26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf2e:	461a      	mov	r2, r3
 800bf30:	f107 0310 	add.w	r3, r7, #16
 800bf34:	6812      	ldr	r2, [r2, #0]
 800bf36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	fa22 f303 	lsr.w	r3, r2, r3
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf48:	701a      	strb	r2, [r3, #0]
      i++;
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	623b      	str	r3, [r7, #32]
      pDest++;
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	3301      	adds	r3, #1
 800bf54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bf56:	8bfb      	ldrh	r3, [r7, #30]
 800bf58:	3b01      	subs	r3, #1
 800bf5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bf5c:	8bfb      	ldrh	r3, [r7, #30]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1ea      	bne.n	800bf38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	372c      	adds	r7, #44	; 0x2c
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	785b      	ldrb	r3, [r3, #1]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d12c      	bne.n	800bfe6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	015a      	lsls	r2, r3, #5
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4413      	add	r3, r2
 800bf94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	db12      	blt.n	800bfc4 <USB_EPSetStall+0x54>
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00f      	beq.n	800bfc4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	015a      	lsls	r2, r3, #5
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4413      	add	r3, r2
 800bfac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	0151      	lsls	r1, r2, #5
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	440a      	add	r2, r1
 800bfba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bfc2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	015a      	lsls	r2, r3, #5
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	0151      	lsls	r1, r2, #5
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	440a      	add	r2, r1
 800bfda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	e02b      	b.n	800c03e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	db12      	blt.n	800c01e <USB_EPSetStall+0xae>
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00f      	beq.n	800c01e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	015a      	lsls	r2, r3, #5
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	4413      	add	r3, r2
 800c006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	0151      	lsls	r1, r2, #5
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	440a      	add	r2, r1
 800c014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c018:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c01c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	015a      	lsls	r2, r3, #5
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	4413      	add	r3, r2
 800c026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	0151      	lsls	r1, r2, #5
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	440a      	add	r2, r1
 800c034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c03c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3714      	adds	r7, #20
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	785b      	ldrb	r3, [r3, #1]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d128      	bne.n	800c0ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	0151      	lsls	r1, r2, #5
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	440a      	add	r2, r1
 800c07e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c082:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c086:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	791b      	ldrb	r3, [r3, #4]
 800c08c:	2b03      	cmp	r3, #3
 800c08e:	d003      	beq.n	800c098 <USB_EPClearStall+0x4c>
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	791b      	ldrb	r3, [r3, #4]
 800c094:	2b02      	cmp	r3, #2
 800c096:	d138      	bne.n	800c10a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	0151      	lsls	r1, r2, #5
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	440a      	add	r2, r1
 800c0ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	e027      	b.n	800c10a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	0151      	lsls	r1, r2, #5
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	440a      	add	r2, r1
 800c0d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	791b      	ldrb	r3, [r3, #4]
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d003      	beq.n	800c0ea <USB_EPClearStall+0x9e>
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	791b      	ldrb	r3, [r3, #4]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d10f      	bne.n	800c10a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	015a      	lsls	r2, r3, #5
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	0151      	lsls	r1, r2, #5
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	440a      	add	r2, r1
 800c100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c108:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	460b      	mov	r3, r1
 800c122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c136:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c13a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	78fb      	ldrb	r3, [r7, #3]
 800c146:	011b      	lsls	r3, r3, #4
 800c148:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c14c:	68f9      	ldr	r1, [r7, #12]
 800c14e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c152:	4313      	orrs	r3, r2
 800c154:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c156:	2300      	movs	r3, #0
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3714      	adds	r7, #20
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c17e:	f023 0303 	bic.w	r3, r3, #3
 800c182:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c192:	f023 0302 	bic.w	r3, r3, #2
 800c196:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr

0800c1a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b085      	sub	sp, #20
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1c0:	f023 0303 	bic.w	r3, r3, #3
 800c1c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1d4:	f043 0302 	orr.w	r3, r3, #2
 800c1d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c200:	68fb      	ldr	r3, [r7, #12]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c20e:	b480      	push	{r7}
 800c210:	b085      	sub	sp, #20
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c22a:	69db      	ldr	r3, [r3, #28]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	4013      	ands	r3, r2
 800c230:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	0c1b      	lsrs	r3, r3, #16
}
 800c236:	4618      	mov	r0, r3
 800c238:	3714      	adds	r7, #20
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c242:	b480      	push	{r7}
 800c244:	b085      	sub	sp, #20
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25e:	69db      	ldr	r3, [r3, #28]
 800c260:	68ba      	ldr	r2, [r7, #8]
 800c262:	4013      	ands	r3, r2
 800c264:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	b29b      	uxth	r3, r3
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c276:	b480      	push	{r7}
 800c278:	b085      	sub	sp, #20
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	460b      	mov	r3, r1
 800c280:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c286:	78fb      	ldrb	r3, [r7, #3]
 800c288:	015a      	lsls	r2, r3, #5
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	4413      	add	r3, r2
 800c28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c2a4:	68bb      	ldr	r3, [r7, #8]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	b087      	sub	sp, #28
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c2d6:	78fb      	ldrb	r3, [r7, #3]
 800c2d8:	f003 030f 	and.w	r3, r3, #15
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	fa22 f303 	lsr.w	r3, r2, r3
 800c2e2:	01db      	lsls	r3, r3, #7
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c2ec:	78fb      	ldrb	r3, [r7, #3]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c300:	68bb      	ldr	r3, [r7, #8]
}
 800c302:	4618      	mov	r0, r3
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c30e:	b480      	push	{r7}
 800c310:	b083      	sub	sp, #12
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	f003 0301 	and.w	r3, r3, #1
}
 800c31e:	4618      	mov	r0, r3
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr

0800c32a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c32a:	b480      	push	{r7}
 800c32c:	b085      	sub	sp, #20
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c344:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c348:	f023 0307 	bic.w	r3, r3, #7
 800c34c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c35c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	333c      	adds	r3, #60	; 0x3c
 800c382:	3304      	adds	r3, #4
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	4a1c      	ldr	r2, [pc, #112]	; (800c3fc <USB_EP0_OutStart+0x8c>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d90a      	bls.n	800c3a6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c39c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3a0:	d101      	bne.n	800c3a6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e024      	b.n	800c3f0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3d4:	f043 0318 	orr.w	r3, r3, #24
 800c3d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c3ec:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	4f54300a 	.word	0x4f54300a

0800c400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c408:	2300      	movs	r3, #0
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	3301      	adds	r3, #1
 800c410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	4a13      	ldr	r2, [pc, #76]	; (800c464 <USB_CoreReset+0x64>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d901      	bls.n	800c41e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c41a:	2303      	movs	r3, #3
 800c41c:	e01b      	b.n	800c456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	daf2      	bge.n	800c40c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c426:	2300      	movs	r3, #0
 800c428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	f043 0201 	orr.w	r2, r3, #1
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	3301      	adds	r3, #1
 800c43a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	4a09      	ldr	r2, [pc, #36]	; (800c464 <USB_CoreReset+0x64>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d901      	bls.n	800c448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c444:	2303      	movs	r3, #3
 800c446:	e006      	b.n	800c456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	f003 0301 	and.w	r3, r3, #1
 800c450:	2b01      	cmp	r3, #1
 800c452:	d0f0      	beq.n	800c436 <USB_CoreReset+0x36>

  return HAL_OK;
 800c454:	2300      	movs	r3, #0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	00030d40 	.word	0x00030d40

0800c468 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c46c:	4904      	ldr	r1, [pc, #16]	; (800c480 <MX_FATFS_Init+0x18>)
 800c46e:	4805      	ldr	r0, [pc, #20]	; (800c484 <MX_FATFS_Init+0x1c>)
 800c470:	f004 fe7c 	bl	801116c <FATFS_LinkDriver>
 800c474:	4603      	mov	r3, r0
 800c476:	461a      	mov	r2, r3
 800c478:	4b03      	ldr	r3, [pc, #12]	; (800c488 <MX_FATFS_Init+0x20>)
 800c47a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c47c:	bf00      	nop
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	20001cbc 	.word	0x20001cbc
 800c484:	080168d4 	.word	0x080168d4
 800c488:	20001cb8 	.word	0x20001cb8

0800c48c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c48c:	b480      	push	{r7}
 800c48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c490:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c492:	4618      	mov	r0, r3
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c4a6:	f000 f8c6 	bl	800c636 <BSP_SD_IsDetected>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d001      	beq.n	800c4b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	e012      	b.n	800c4da <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c4b4:	480b      	ldr	r0, [pc, #44]	; (800c4e4 <BSP_SD_Init+0x48>)
 800c4b6:	f7fc fcd7 	bl	8008e68 <HAL_SD_Init>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c4be:	79fb      	ldrb	r3, [r7, #7]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d109      	bne.n	800c4d8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c4c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c4c8:	4806      	ldr	r0, [pc, #24]	; (800c4e4 <BSP_SD_Init+0x48>)
 800c4ca:	f7fd fa87 	bl	80099dc <HAL_SD_ConfigWideBusOperation>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c4d8:	79fb      	ldrb	r3, [r7, #7]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20000368 	.word	0x20000368

0800c4e8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmarx);
 800c4f8:	4b13      	ldr	r3, [pc, #76]	; (800c548 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	4b11      	ldr	r3, [pc, #68]	; (800c548 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f022 0201 	bic.w	r2, r2, #1
 800c50a:	601a      	str	r2, [r3, #0]

  hsd1.hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c50c:	4b0e      	ldr	r3, [pc, #56]	; (800c548 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c510:	2200      	movs	r2, #0
 800c512:	609a      	str	r2, [r3, #8]

  hsd1.hdmarx->Instance->CCR &= ~DMA_CCR_DIR;
 800c514:	4b0c      	ldr	r3, [pc, #48]	; (800c548 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	4b0a      	ldr	r3, [pc, #40]	; (800c548 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f022 0210 	bic.w	r2, r2, #16
 800c526:	601a      	str	r2, [r3, #0]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	68f9      	ldr	r1, [r7, #12]
 800c52e:	4806      	ldr	r0, [pc, #24]	; (800c548 <BSP_SD_ReadBlocks_DMA+0x60>)
 800c530:	f7fc fd70 	bl	8009014 <HAL_SD_ReadBlocks_DMA>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <BSP_SD_ReadBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	20000368 	.word	0x20000368

0800c54c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c558:	2300      	movs	r3, #0
 800c55a:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmatx);
 800c55c:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <BSP_SD_WriteBlocks_DMA+0x60>)
 800c55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	4b11      	ldr	r3, [pc, #68]	; (800c5ac <BSP_SD_WriteBlocks_DMA+0x60>)
 800c566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f022 0201 	bic.w	r2, r2, #1
 800c56e:	601a      	str	r2, [r3, #0]

  hsd1.hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c570:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <BSP_SD_WriteBlocks_DMA+0x60>)
 800c572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c574:	2210      	movs	r2, #16
 800c576:	609a      	str	r2, [r3, #8]

  hsd1.hdmatx->Instance->CCR |= (uint32_t)DMA_CCR_DIR;
 800c578:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <BSP_SD_WriteBlocks_DMA+0x60>)
 800c57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <BSP_SD_WriteBlocks_DMA+0x60>)
 800c582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f042 0210 	orr.w	r2, r2, #16
 800c58a:	601a      	str	r2, [r3, #0]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	68f9      	ldr	r1, [r7, #12]
 800c592:	4806      	ldr	r0, [pc, #24]	; (800c5ac <BSP_SD_WriteBlocks_DMA+0x60>)
 800c594:	f7fc fe06 	bl	80091a4 <HAL_SD_WriteBlocks_DMA>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <BSP_SD_WriteBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20000368 	.word	0x20000368

0800c5b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c5b4:	4805      	ldr	r0, [pc, #20]	; (800c5cc <BSP_SD_GetCardState+0x1c>)
 800c5b6:	f7fd facd 	bl	8009b54 <HAL_SD_GetCardState>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b04      	cmp	r3, #4
 800c5be:	bf14      	ite	ne
 800c5c0:	2301      	movne	r3, #1
 800c5c2:	2300      	moveq	r3, #0
 800c5c4:	b2db      	uxtb	r3, r3
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20000368 	.word	0x20000368

0800c5d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	4803      	ldr	r0, [pc, #12]	; (800c5e8 <BSP_SD_GetCardInfo+0x18>)
 800c5dc:	f7fd f9d2 	bl	8009984 <HAL_SD_GetCardInfo>
}
 800c5e0:	bf00      	nop
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	20000368 	.word	0x20000368

0800c5ec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c5f4:	f000 f818 	bl	800c628 <BSP_SD_AbortCallback>
}
 800c5f8:	bf00      	nop
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c608:	f000 f9a8 	bl	800c95c <BSP_SD_WriteCpltCallback>
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c61c:	f000 f9aa 	bl	800c974 <BSP_SD_ReadCpltCallback>
}
 800c620:	bf00      	nop
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c628:	b480      	push	{r7}
 800c62a:	af00      	add	r7, sp, #0

}
 800c62c:	bf00      	nop
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c63c:	2301      	movs	r3, #1
 800c63e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c640:	f000 f80c 	bl	800c65c <BSP_PlatformIsDetected>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c64a:	2300      	movs	r3, #0
 800c64c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c64e:	79fb      	ldrb	r3, [r7, #7]
 800c650:	b2db      	uxtb	r3, r3
}
 800c652:	4618      	mov	r0, r3
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
	...

0800c65c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c662:	2301      	movs	r3, #1
 800c664:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c666:	2180      	movs	r1, #128	; 0x80
 800c668:	4806      	ldr	r0, [pc, #24]	; (800c684 <BSP_PlatformIsDetected+0x28>)
 800c66a:	f7f8 f81d 	bl	80046a8 <HAL_GPIO_ReadPin>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c674:	2300      	movs	r3, #0
 800c676:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c678:	79fb      	ldrb	r3, [r7, #7]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	48000800 	.word	0x48000800

0800c688 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c690:	f7f7 fae6 	bl	8003c60 <HAL_GetTick>
 800c694:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c696:	e006      	b.n	800c6a6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c698:	f7ff ff8a 	bl	800c5b0 <BSP_SD_GetCardState>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d101      	bne.n	800c6a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	e009      	b.n	800c6ba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c6a6:	f7f7 fadb 	bl	8003c60 <HAL_GetTick>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d8f0      	bhi.n	800c698 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c6b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c6ce:	4b0b      	ldr	r3, [pc, #44]	; (800c6fc <SD_CheckStatus+0x38>)
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c6d4:	f7ff ff6c 	bl	800c5b0 <BSP_SD_GetCardState>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d107      	bne.n	800c6ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c6de:	4b07      	ldr	r3, [pc, #28]	; (800c6fc <SD_CheckStatus+0x38>)
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	f023 0301 	bic.w	r3, r3, #1
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	4b04      	ldr	r3, [pc, #16]	; (800c6fc <SD_CheckStatus+0x38>)
 800c6ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c6ee:	4b03      	ldr	r3, [pc, #12]	; (800c6fc <SD_CheckStatus+0x38>)
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	b2db      	uxtb	r3, r3
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20000009 	.word	0x20000009

0800c700 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	4603      	mov	r3, r0
 800c708:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c70a:	f7ff fec7 	bl	800c49c <BSP_SD_Init>
 800c70e:	4603      	mov	r3, r0
 800c710:	2b00      	cmp	r3, #0
 800c712:	d107      	bne.n	800c724 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff ffd4 	bl	800c6c4 <SD_CheckStatus>
 800c71c:	4603      	mov	r3, r0
 800c71e:	461a      	mov	r2, r3
 800c720:	4b04      	ldr	r3, [pc, #16]	; (800c734 <SD_initialize+0x34>)
 800c722:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c724:	4b03      	ldr	r3, [pc, #12]	; (800c734 <SD_initialize+0x34>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	b2db      	uxtb	r3, r3
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	20000009 	.word	0x20000009

0800c738 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	4603      	mov	r3, r0
 800c740:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c742:	79fb      	ldrb	r3, [r7, #7]
 800c744:	4618      	mov	r0, r3
 800c746:	f7ff ffbd 	bl	800c6c4 <SD_CheckStatus>
 800c74a:	4603      	mov	r3, r0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60b9      	str	r1, [r7, #8]
 800c75c:	607a      	str	r2, [r7, #4]
 800c75e:	603b      	str	r3, [r7, #0]
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c768:	f247 5030 	movw	r0, #30000	; 0x7530
 800c76c:	f7ff ff8c 	bl	800c688 <SD_CheckStatusWithTimeout>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	da01      	bge.n	800c77a <SD_read+0x26>
  {
    return res;
 800c776:	7dfb      	ldrb	r3, [r7, #23]
 800c778:	e03b      	b.n	800c7f2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c77a:	683a      	ldr	r2, [r7, #0]
 800c77c:	6879      	ldr	r1, [r7, #4]
 800c77e:	68b8      	ldr	r0, [r7, #8]
 800c780:	f7ff feb2 	bl	800c4e8 <BSP_SD_ReadBlocks_DMA>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d132      	bne.n	800c7f0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c78a:	4b1c      	ldr	r3, [pc, #112]	; (800c7fc <SD_read+0xa8>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c790:	f7f7 fa66 	bl	8003c60 <HAL_GetTick>
 800c794:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c796:	bf00      	nop
 800c798:	4b18      	ldr	r3, [pc, #96]	; (800c7fc <SD_read+0xa8>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d108      	bne.n	800c7b2 <SD_read+0x5e>
 800c7a0:	f7f7 fa5e 	bl	8003c60 <HAL_GetTick>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	f247 522f 	movw	r2, #29999	; 0x752f
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d9f2      	bls.n	800c798 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c7b2:	4b12      	ldr	r3, [pc, #72]	; (800c7fc <SD_read+0xa8>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d102      	bne.n	800c7c0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	75fb      	strb	r3, [r7, #23]
 800c7be:	e017      	b.n	800c7f0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c7c0:	4b0e      	ldr	r3, [pc, #56]	; (800c7fc <SD_read+0xa8>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c7c6:	f7f7 fa4b 	bl	8003c60 <HAL_GetTick>
 800c7ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c7cc:	e007      	b.n	800c7de <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c7ce:	f7ff feef 	bl	800c5b0 <BSP_SD_GetCardState>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d102      	bne.n	800c7de <SD_read+0x8a>
          {
            res = RES_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c7dc:	e008      	b.n	800c7f0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c7de:	f7f7 fa3f 	bl	8003c60 <HAL_GetTick>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	1ad3      	subs	r3, r2, r3
 800c7e8:	f247 522f 	movw	r2, #29999	; 0x752f
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d9ee      	bls.n	800c7ce <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3718      	adds	r7, #24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20002124 	.word	0x20002124

0800c800 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af00      	add	r7, sp, #0
 800c806:	60b9      	str	r1, [r7, #8]
 800c808:	607a      	str	r2, [r7, #4]
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	4603      	mov	r3, r0
 800c80e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c814:	4b24      	ldr	r3, [pc, #144]	; (800c8a8 <SD_write+0xa8>)
 800c816:	2200      	movs	r2, #0
 800c818:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c81a:	f247 5030 	movw	r0, #30000	; 0x7530
 800c81e:	f7ff ff33 	bl	800c688 <SD_CheckStatusWithTimeout>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	da01      	bge.n	800c82c <SD_write+0x2c>
  {
    return res;
 800c828:	7dfb      	ldrb	r3, [r7, #23]
 800c82a:	e038      	b.n	800c89e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	6879      	ldr	r1, [r7, #4]
 800c830:	68b8      	ldr	r0, [r7, #8]
 800c832:	f7ff fe8b 	bl	800c54c <BSP_SD_WriteBlocks_DMA>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d12f      	bne.n	800c89c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c83c:	f7f7 fa10 	bl	8003c60 <HAL_GetTick>
 800c840:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c842:	bf00      	nop
 800c844:	4b18      	ldr	r3, [pc, #96]	; (800c8a8 <SD_write+0xa8>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d108      	bne.n	800c85e <SD_write+0x5e>
 800c84c:	f7f7 fa08 	bl	8003c60 <HAL_GetTick>
 800c850:	4602      	mov	r2, r0
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	f247 522f 	movw	r2, #29999	; 0x752f
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d9f2      	bls.n	800c844 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c85e:	4b12      	ldr	r3, [pc, #72]	; (800c8a8 <SD_write+0xa8>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d102      	bne.n	800c86c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	75fb      	strb	r3, [r7, #23]
 800c86a:	e017      	b.n	800c89c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c86c:	4b0e      	ldr	r3, [pc, #56]	; (800c8a8 <SD_write+0xa8>)
 800c86e:	2200      	movs	r2, #0
 800c870:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c872:	f7f7 f9f5 	bl	8003c60 <HAL_GetTick>
 800c876:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c878:	e007      	b.n	800c88a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c87a:	f7ff fe99 	bl	800c5b0 <BSP_SD_GetCardState>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d102      	bne.n	800c88a <SD_write+0x8a>
          {
            res = RES_OK;
 800c884:	2300      	movs	r3, #0
 800c886:	75fb      	strb	r3, [r7, #23]
            break;
 800c888:	e008      	b.n	800c89c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c88a:	f7f7 f9e9 	bl	8003c60 <HAL_GetTick>
 800c88e:	4602      	mov	r2, r0
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	f247 522f 	movw	r2, #29999	; 0x752f
 800c898:	4293      	cmp	r3, r2
 800c89a:	d9ee      	bls.n	800c87a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20002120 	.word	0x20002120

0800c8ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08c      	sub	sp, #48	; 0x30
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	603a      	str	r2, [r7, #0]
 800c8b6:	71fb      	strb	r3, [r7, #7]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c8c2:	4b25      	ldr	r3, [pc, #148]	; (800c958 <SD_ioctl+0xac>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <SD_ioctl+0x28>
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	e03c      	b.n	800c94e <SD_ioctl+0xa2>

  switch (cmd)
 800c8d4:	79bb      	ldrb	r3, [r7, #6]
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d834      	bhi.n	800c944 <SD_ioctl+0x98>
 800c8da:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <SD_ioctl+0x34>)
 800c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e0:	0800c8f1 	.word	0x0800c8f1
 800c8e4:	0800c8f9 	.word	0x0800c8f9
 800c8e8:	0800c911 	.word	0x0800c911
 800c8ec:	0800c92b 	.word	0x0800c92b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c8f6:	e028      	b.n	800c94a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c8f8:	f107 030c 	add.w	r3, r7, #12
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7ff fe67 	bl	800c5d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c90e:	e01c      	b.n	800c94a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c910:	f107 030c 	add.w	r3, r7, #12
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff fe5b 	bl	800c5d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c922:	2300      	movs	r3, #0
 800c924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c928:	e00f      	b.n	800c94a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c92a:	f107 030c 	add.w	r3, r7, #12
 800c92e:	4618      	mov	r0, r3
 800c930:	f7ff fe4e 	bl	800c5d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c936:	0a5a      	lsrs	r2, r3, #9
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c942:	e002      	b.n	800c94a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c944:	2304      	movs	r3, #4
 800c946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c94a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3730      	adds	r7, #48	; 0x30
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	20000009 	.word	0x20000009

0800c95c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c95c:	b480      	push	{r7}
 800c95e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c960:	4b03      	ldr	r3, [pc, #12]	; (800c970 <BSP_SD_WriteCpltCallback+0x14>)
 800c962:	2201      	movs	r2, #1
 800c964:	601a      	str	r2, [r3, #0]
}
 800c966:	bf00      	nop
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr
 800c970:	20002120 	.word	0x20002120

0800c974 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c974:	b480      	push	{r7}
 800c976:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c978:	4b03      	ldr	r3, [pc, #12]	; (800c988 <BSP_SD_ReadCpltCallback+0x14>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	601a      	str	r2, [r3, #0]
}
 800c97e:	bf00      	nop
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	20002124 	.word	0x20002124

0800c98c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	460b      	mov	r3, r1
 800c996:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c998:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c99c:	f005 fa16 	bl	8011dcc <USBD_static_malloc>
 800c9a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d109      	bne.n	800c9bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	32b0      	adds	r2, #176	; 0xb0
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	e0d4      	b.n	800cb66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c9bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f006 fa5d 	bl	8012e82 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	32b0      	adds	r2, #176	; 0xb0
 800c9d2:	68f9      	ldr	r1, [r7, #12]
 800c9d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	32b0      	adds	r2, #176	; 0xb0
 800c9e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	7c1b      	ldrb	r3, [r3, #16]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d138      	bne.n	800ca66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c9f4:	4b5e      	ldr	r3, [pc, #376]	; (800cb70 <USBD_CDC_Init+0x1e4>)
 800c9f6:	7819      	ldrb	r1, [r3, #0]
 800c9f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f004 ffd0 	bl	80119a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca04:	4b5a      	ldr	r3, [pc, #360]	; (800cb70 <USBD_CDC_Init+0x1e4>)
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	f003 020f 	and.w	r2, r3, #15
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	440b      	add	r3, r1
 800ca18:	3324      	adds	r3, #36	; 0x24
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca1e:	4b55      	ldr	r3, [pc, #340]	; (800cb74 <USBD_CDC_Init+0x1e8>)
 800ca20:	7819      	ldrb	r1, [r3, #0]
 800ca22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca26:	2202      	movs	r2, #2
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f004 ffbb 	bl	80119a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca2e:	4b51      	ldr	r3, [pc, #324]	; (800cb74 <USBD_CDC_Init+0x1e8>)
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	f003 020f 	and.w	r2, r3, #15
 800ca36:	6879      	ldr	r1, [r7, #4]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	440b      	add	r3, r1
 800ca42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca46:	2201      	movs	r2, #1
 800ca48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ca4a:	4b4b      	ldr	r3, [pc, #300]	; (800cb78 <USBD_CDC_Init+0x1ec>)
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	f003 020f 	and.w	r2, r3, #15
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	4613      	mov	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	3326      	adds	r3, #38	; 0x26
 800ca60:	2210      	movs	r2, #16
 800ca62:	801a      	strh	r2, [r3, #0]
 800ca64:	e035      	b.n	800cad2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca66:	4b42      	ldr	r3, [pc, #264]	; (800cb70 <USBD_CDC_Init+0x1e4>)
 800ca68:	7819      	ldrb	r1, [r3, #0]
 800ca6a:	2340      	movs	r3, #64	; 0x40
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f004 ff98 	bl	80119a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca74:	4b3e      	ldr	r3, [pc, #248]	; (800cb70 <USBD_CDC_Init+0x1e4>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	f003 020f 	and.w	r2, r3, #15
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	4613      	mov	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	440b      	add	r3, r1
 800ca88:	3324      	adds	r3, #36	; 0x24
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca8e:	4b39      	ldr	r3, [pc, #228]	; (800cb74 <USBD_CDC_Init+0x1e8>)
 800ca90:	7819      	ldrb	r1, [r3, #0]
 800ca92:	2340      	movs	r3, #64	; 0x40
 800ca94:	2202      	movs	r2, #2
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f004 ff84 	bl	80119a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca9c:	4b35      	ldr	r3, [pc, #212]	; (800cb74 <USBD_CDC_Init+0x1e8>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	f003 020f 	and.w	r2, r3, #15
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	4613      	mov	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	440b      	add	r3, r1
 800cab0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cab4:	2201      	movs	r2, #1
 800cab6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cab8:	4b2f      	ldr	r3, [pc, #188]	; (800cb78 <USBD_CDC_Init+0x1ec>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	f003 020f 	and.w	r2, r3, #15
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4613      	mov	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	440b      	add	r3, r1
 800cacc:	3326      	adds	r3, #38	; 0x26
 800cace:	2210      	movs	r2, #16
 800cad0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cad2:	4b29      	ldr	r3, [pc, #164]	; (800cb78 <USBD_CDC_Init+0x1ec>)
 800cad4:	7819      	ldrb	r1, [r3, #0]
 800cad6:	2308      	movs	r3, #8
 800cad8:	2203      	movs	r2, #3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f004 ff62 	bl	80119a4 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cae0:	4b25      	ldr	r3, [pc, #148]	; (800cb78 <USBD_CDC_Init+0x1ec>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	f003 020f 	and.w	r2, r3, #15
 800cae8:	6879      	ldr	r1, [r7, #4]
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	440b      	add	r3, r1
 800caf4:	3324      	adds	r3, #36	; 0x24
 800caf6:	2201      	movs	r2, #1
 800caf8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	33b0      	adds	r3, #176	; 0xb0
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	4413      	add	r3, r2
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cb30:	2302      	movs	r3, #2
 800cb32:	e018      	b.n	800cb66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	7c1b      	ldrb	r3, [r3, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10a      	bne.n	800cb52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb3c:	4b0d      	ldr	r3, [pc, #52]	; (800cb74 <USBD_CDC_Init+0x1e8>)
 800cb3e:	7819      	ldrb	r1, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f005 f8a4 	bl	8011c98 <USBD_LL_PrepareReceive>
 800cb50:	e008      	b.n	800cb64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb52:	4b08      	ldr	r3, [pc, #32]	; (800cb74 <USBD_CDC_Init+0x1e8>)
 800cb54:	7819      	ldrb	r1, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb5c:	2340      	movs	r3, #64	; 0x40
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f005 f89a 	bl	8011c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20000093 	.word	0x20000093
 800cb74:	20000094 	.word	0x20000094
 800cb78:	20000095 	.word	0x20000095

0800cb7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cb88:	4b3a      	ldr	r3, [pc, #232]	; (800cc74 <USBD_CDC_DeInit+0xf8>)
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f004 ff46 	bl	8011a20 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cb94:	4b37      	ldr	r3, [pc, #220]	; (800cc74 <USBD_CDC_DeInit+0xf8>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	f003 020f 	and.w	r2, r3, #15
 800cb9c:	6879      	ldr	r1, [r7, #4]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4413      	add	r3, r2
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	440b      	add	r3, r1
 800cba8:	3324      	adds	r3, #36	; 0x24
 800cbaa:	2200      	movs	r2, #0
 800cbac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cbae:	4b32      	ldr	r3, [pc, #200]	; (800cc78 <USBD_CDC_DeInit+0xfc>)
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f004 ff33 	bl	8011a20 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cbba:	4b2f      	ldr	r3, [pc, #188]	; (800cc78 <USBD_CDC_DeInit+0xfc>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	f003 020f 	and.w	r2, r3, #15
 800cbc2:	6879      	ldr	r1, [r7, #4]
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	4413      	add	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	440b      	add	r3, r1
 800cbce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cbd6:	4b29      	ldr	r3, [pc, #164]	; (800cc7c <USBD_CDC_DeInit+0x100>)
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f004 ff1f 	bl	8011a20 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cbe2:	4b26      	ldr	r3, [pc, #152]	; (800cc7c <USBD_CDC_DeInit+0x100>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	f003 020f 	and.w	r2, r3, #15
 800cbea:	6879      	ldr	r1, [r7, #4]
 800cbec:	4613      	mov	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	440b      	add	r3, r1
 800cbf6:	3324      	adds	r3, #36	; 0x24
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cbfc:	4b1f      	ldr	r3, [pc, #124]	; (800cc7c <USBD_CDC_DeInit+0x100>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	f003 020f 	and.w	r2, r3, #15
 800cc04:	6879      	ldr	r1, [r7, #4]
 800cc06:	4613      	mov	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	440b      	add	r3, r1
 800cc10:	3326      	adds	r3, #38	; 0x26
 800cc12:	2200      	movs	r2, #0
 800cc14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	32b0      	adds	r2, #176	; 0xb0
 800cc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d01f      	beq.n	800cc68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	33b0      	adds	r3, #176	; 0xb0
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	32b0      	adds	r2, #176	; 0xb0
 800cc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f005 f8cc 	bl	8011de8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	32b0      	adds	r2, #176	; 0xb0
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20000093 	.word	0x20000093
 800cc78:	20000094 	.word	0x20000094
 800cc7c:	20000095 	.word	0x20000095

0800cc80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	32b0      	adds	r2, #176	; 0xb0
 800cc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cca2:	2300      	movs	r3, #0
 800cca4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d101      	bne.n	800ccb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ccac:	2303      	movs	r3, #3
 800ccae:	e0bf      	b.n	800ce30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d050      	beq.n	800cd5e <USBD_CDC_Setup+0xde>
 800ccbc:	2b20      	cmp	r3, #32
 800ccbe:	f040 80af 	bne.w	800ce20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	88db      	ldrh	r3, [r3, #6]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d03a      	beq.n	800cd40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	b25b      	sxtb	r3, r3
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	da1b      	bge.n	800cd0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	33b0      	adds	r3, #176	; 0xb0
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ccea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ccec:	683a      	ldr	r2, [r7, #0]
 800ccee:	88d2      	ldrh	r2, [r2, #6]
 800ccf0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	88db      	ldrh	r3, [r3, #6]
 800ccf6:	2b07      	cmp	r3, #7
 800ccf8:	bf28      	it	cs
 800ccfa:	2307      	movcs	r3, #7
 800ccfc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	89fa      	ldrh	r2, [r7, #14]
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f001 fd73 	bl	800e7f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cd0a:	e090      	b.n	800ce2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	785a      	ldrb	r2, [r3, #1]
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	88db      	ldrh	r3, [r3, #6]
 800cd1a:	2b3f      	cmp	r3, #63	; 0x3f
 800cd1c:	d803      	bhi.n	800cd26 <USBD_CDC_Setup+0xa6>
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	88db      	ldrh	r3, [r3, #6]
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	e000      	b.n	800cd28 <USBD_CDC_Setup+0xa8>
 800cd26:	2240      	movs	r2, #64	; 0x40
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cd2e:	6939      	ldr	r1, [r7, #16]
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cd36:	461a      	mov	r2, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f001 fd85 	bl	800e848 <USBD_CtlPrepareRx>
      break;
 800cd3e:	e076      	b.n	800ce2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	33b0      	adds	r3, #176	; 0xb0
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	7850      	ldrb	r0, [r2, #1]
 800cd56:	2200      	movs	r2, #0
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	4798      	blx	r3
      break;
 800cd5c:	e067      	b.n	800ce2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	785b      	ldrb	r3, [r3, #1]
 800cd62:	2b0b      	cmp	r3, #11
 800cd64:	d851      	bhi.n	800ce0a <USBD_CDC_Setup+0x18a>
 800cd66:	a201      	add	r2, pc, #4	; (adr r2, 800cd6c <USBD_CDC_Setup+0xec>)
 800cd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6c:	0800cd9d 	.word	0x0800cd9d
 800cd70:	0800ce19 	.word	0x0800ce19
 800cd74:	0800ce0b 	.word	0x0800ce0b
 800cd78:	0800ce0b 	.word	0x0800ce0b
 800cd7c:	0800ce0b 	.word	0x0800ce0b
 800cd80:	0800ce0b 	.word	0x0800ce0b
 800cd84:	0800ce0b 	.word	0x0800ce0b
 800cd88:	0800ce0b 	.word	0x0800ce0b
 800cd8c:	0800ce0b 	.word	0x0800ce0b
 800cd90:	0800ce0b 	.word	0x0800ce0b
 800cd94:	0800cdc7 	.word	0x0800cdc7
 800cd98:	0800cdf1 	.word	0x0800cdf1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	d107      	bne.n	800cdb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cda8:	f107 030a 	add.w	r3, r7, #10
 800cdac:	2202      	movs	r2, #2
 800cdae:	4619      	mov	r1, r3
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f001 fd1d 	bl	800e7f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cdb6:	e032      	b.n	800ce1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f001 fca7 	bl	800e70e <USBD_CtlError>
            ret = USBD_FAIL;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	75fb      	strb	r3, [r7, #23]
          break;
 800cdc4:	e02b      	b.n	800ce1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	2b03      	cmp	r3, #3
 800cdd0:	d107      	bne.n	800cde2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cdd2:	f107 030d 	add.w	r3, r7, #13
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f001 fd08 	bl	800e7f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cde0:	e01d      	b.n	800ce1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f001 fc92 	bl	800e70e <USBD_CtlError>
            ret = USBD_FAIL;
 800cdea:	2303      	movs	r3, #3
 800cdec:	75fb      	strb	r3, [r7, #23]
          break;
 800cdee:	e016      	b.n	800ce1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	2b03      	cmp	r3, #3
 800cdfa:	d00f      	beq.n	800ce1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cdfc:	6839      	ldr	r1, [r7, #0]
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f001 fc85 	bl	800e70e <USBD_CtlError>
            ret = USBD_FAIL;
 800ce04:	2303      	movs	r3, #3
 800ce06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ce08:	e008      	b.n	800ce1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ce0a:	6839      	ldr	r1, [r7, #0]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f001 fc7e 	bl	800e70e <USBD_CtlError>
          ret = USBD_FAIL;
 800ce12:	2303      	movs	r3, #3
 800ce14:	75fb      	strb	r3, [r7, #23]
          break;
 800ce16:	e002      	b.n	800ce1e <USBD_CDC_Setup+0x19e>
          break;
 800ce18:	bf00      	nop
 800ce1a:	e008      	b.n	800ce2e <USBD_CDC_Setup+0x1ae>
          break;
 800ce1c:	bf00      	nop
      }
      break;
 800ce1e:	e006      	b.n	800ce2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f001 fc73 	bl	800e70e <USBD_CtlError>
      ret = USBD_FAIL;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ce2c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ce2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	460b      	mov	r3, r1
 800ce42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	32b0      	adds	r2, #176	; 0xb0
 800ce56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ce5e:	2303      	movs	r3, #3
 800ce60:	e065      	b.n	800cf2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	32b0      	adds	r2, #176	; 0xb0
 800ce6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ce72:	78fb      	ldrb	r3, [r7, #3]
 800ce74:	f003 020f 	and.w	r2, r3, #15
 800ce78:	6879      	ldr	r1, [r7, #4]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	4413      	add	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	440b      	add	r3, r1
 800ce84:	3318      	adds	r3, #24
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d02f      	beq.n	800ceec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ce8c:	78fb      	ldrb	r3, [r7, #3]
 800ce8e:	f003 020f 	and.w	r2, r3, #15
 800ce92:	6879      	ldr	r1, [r7, #4]
 800ce94:	4613      	mov	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4413      	add	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	440b      	add	r3, r1
 800ce9e:	3318      	adds	r3, #24
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	78fb      	ldrb	r3, [r7, #3]
 800cea4:	f003 010f 	and.w	r1, r3, #15
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	460b      	mov	r3, r1
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	440b      	add	r3, r1
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	4403      	add	r3, r0
 800ceb4:	3344      	adds	r3, #68	; 0x44
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	fbb2 f1f3 	udiv	r1, r2, r3
 800cebc:	fb01 f303 	mul.w	r3, r1, r3
 800cec0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d112      	bne.n	800ceec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cec6:	78fb      	ldrb	r3, [r7, #3]
 800cec8:	f003 020f 	and.w	r2, r3, #15
 800cecc:	6879      	ldr	r1, [r7, #4]
 800cece:	4613      	mov	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	4413      	add	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	440b      	add	r3, r1
 800ced8:	3318      	adds	r3, #24
 800ceda:	2200      	movs	r2, #0
 800cedc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cede:	78f9      	ldrb	r1, [r7, #3]
 800cee0:	2300      	movs	r3, #0
 800cee2:	2200      	movs	r2, #0
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f004 fe9f 	bl	8011c28 <USBD_LL_Transmit>
 800ceea:	e01f      	b.n	800cf2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	33b0      	adds	r3, #176	; 0xb0
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d010      	beq.n	800cf2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	33b0      	adds	r3, #176	; 0xb0
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	4413      	add	r3, r2
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cf22:	68ba      	ldr	r2, [r7, #8]
 800cf24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cf28:	78fa      	ldrb	r2, [r7, #3]
 800cf2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b084      	sub	sp, #16
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	460b      	mov	r3, r1
 800cf40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	32b0      	adds	r2, #176	; 0xb0
 800cf4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	32b0      	adds	r2, #176	; 0xb0
 800cf5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d101      	bne.n	800cf68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cf64:	2303      	movs	r3, #3
 800cf66:	e01a      	b.n	800cf9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f004 fecb 	bl	8011d08 <USBD_LL_GetRxDataSize>
 800cf72:	4602      	mov	r2, r0
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	33b0      	adds	r3, #176	; 0xb0
 800cf84:	009b      	lsls	r3, r3, #2
 800cf86:	4413      	add	r3, r2
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cf92:	68fa      	ldr	r2, [r7, #12]
 800cf94:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cf98:	4611      	mov	r1, r2
 800cf9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b084      	sub	sp, #16
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	32b0      	adds	r2, #176	; 0xb0
 800cfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d101      	bne.n	800cfc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	e025      	b.n	800d014 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	33b0      	adds	r3, #176	; 0xb0
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4413      	add	r3, r2
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d01a      	beq.n	800d012 <USBD_CDC_EP0_RxReady+0x6c>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cfe2:	2bff      	cmp	r3, #255	; 0xff
 800cfe4:	d015      	beq.n	800d012 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	33b0      	adds	r3, #176	; 0xb0
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	4413      	add	r3, r2
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cffe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d006:	b292      	uxth	r2, r2
 800d008:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	22ff      	movs	r2, #255	; 0xff
 800d00e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b086      	sub	sp, #24
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d024:	2182      	movs	r1, #130	; 0x82
 800d026:	4818      	ldr	r0, [pc, #96]	; (800d088 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d028:	f000 fd0f 	bl	800da4a <USBD_GetEpDesc>
 800d02c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d02e:	2101      	movs	r1, #1
 800d030:	4815      	ldr	r0, [pc, #84]	; (800d088 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d032:	f000 fd0a 	bl	800da4a <USBD_GetEpDesc>
 800d036:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d038:	2181      	movs	r1, #129	; 0x81
 800d03a:	4813      	ldr	r0, [pc, #76]	; (800d088 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d03c:	f000 fd05 	bl	800da4a <USBD_GetEpDesc>
 800d040:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d002      	beq.n	800d04e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	2210      	movs	r2, #16
 800d04c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d006      	beq.n	800d062 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	2200      	movs	r2, #0
 800d058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d05c:	711a      	strb	r2, [r3, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d006      	beq.n	800d076 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2200      	movs	r2, #0
 800d06c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d070:	711a      	strb	r2, [r3, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2243      	movs	r2, #67	; 0x43
 800d07a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d07c:	4b02      	ldr	r3, [pc, #8]	; (800d088 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20000050 	.word	0x20000050

0800d08c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b086      	sub	sp, #24
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d094:	2182      	movs	r1, #130	; 0x82
 800d096:	4818      	ldr	r0, [pc, #96]	; (800d0f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d098:	f000 fcd7 	bl	800da4a <USBD_GetEpDesc>
 800d09c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d09e:	2101      	movs	r1, #1
 800d0a0:	4815      	ldr	r0, [pc, #84]	; (800d0f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0a2:	f000 fcd2 	bl	800da4a <USBD_GetEpDesc>
 800d0a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0a8:	2181      	movs	r1, #129	; 0x81
 800d0aa:	4813      	ldr	r0, [pc, #76]	; (800d0f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0ac:	f000 fccd 	bl	800da4a <USBD_GetEpDesc>
 800d0b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d002      	beq.n	800d0be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	2210      	movs	r2, #16
 800d0bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d006      	beq.n	800d0d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	711a      	strb	r2, [r3, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f042 0202 	orr.w	r2, r2, #2
 800d0d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d006      	beq.n	800d0e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	711a      	strb	r2, [r3, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f042 0202 	orr.w	r2, r2, #2
 800d0e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2243      	movs	r2, #67	; 0x43
 800d0ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d0ec:	4b02      	ldr	r3, [pc, #8]	; (800d0f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3718      	adds	r7, #24
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20000050 	.word	0x20000050

0800d0fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d104:	2182      	movs	r1, #130	; 0x82
 800d106:	4818      	ldr	r0, [pc, #96]	; (800d168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d108:	f000 fc9f 	bl	800da4a <USBD_GetEpDesc>
 800d10c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d10e:	2101      	movs	r1, #1
 800d110:	4815      	ldr	r0, [pc, #84]	; (800d168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d112:	f000 fc9a 	bl	800da4a <USBD_GetEpDesc>
 800d116:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d118:	2181      	movs	r1, #129	; 0x81
 800d11a:	4813      	ldr	r0, [pc, #76]	; (800d168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d11c:	f000 fc95 	bl	800da4a <USBD_GetEpDesc>
 800d120:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2210      	movs	r2, #16
 800d12c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d006      	beq.n	800d142 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	2200      	movs	r2, #0
 800d138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d13c:	711a      	strb	r2, [r3, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d006      	beq.n	800d156 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d150:	711a      	strb	r2, [r3, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2243      	movs	r2, #67	; 0x43
 800d15a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d15c:	4b02      	ldr	r3, [pc, #8]	; (800d168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3718      	adds	r7, #24
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20000050 	.word	0x20000050

0800d16c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	220a      	movs	r2, #10
 800d178:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d17a:	4b03      	ldr	r3, [pc, #12]	; (800d188 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	2000000c 	.word	0x2000000c

0800d18c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d101      	bne.n	800d1a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e009      	b.n	800d1b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	33b0      	adds	r3, #176	; 0xb0
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	4413      	add	r3, r2
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b087      	sub	sp, #28
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	32b0      	adds	r2, #176	; 0xb0
 800d1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d1e2:	2303      	movs	r3, #3
 800d1e4:	e008      	b.n	800d1f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	371c      	adds	r7, #28
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	32b0      	adds	r2, #176	; 0xb0
 800d218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d101      	bne.n	800d228 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d224:	2303      	movs	r3, #3
 800d226:	e004      	b.n	800d232 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	683a      	ldr	r2, [r7, #0]
 800d22c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
	...

0800d240 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	32b0      	adds	r2, #176	; 0xb0
 800d252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d256:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	32b0      	adds	r2, #176	; 0xb0
 800d262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d101      	bne.n	800d26e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d26a:	2303      	movs	r3, #3
 800d26c:	e018      	b.n	800d2a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	7c1b      	ldrb	r3, [r3, #16]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10a      	bne.n	800d28c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d276:	4b0c      	ldr	r3, [pc, #48]	; (800d2a8 <USBD_CDC_ReceivePacket+0x68>)
 800d278:	7819      	ldrb	r1, [r3, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d280:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f004 fd07 	bl	8011c98 <USBD_LL_PrepareReceive>
 800d28a:	e008      	b.n	800d29e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d28c:	4b06      	ldr	r3, [pc, #24]	; (800d2a8 <USBD_CDC_ReceivePacket+0x68>)
 800d28e:	7819      	ldrb	r1, [r3, #0]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d296:	2340      	movs	r3, #64	; 0x40
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f004 fcfd 	bl	8011c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20000094 	.word	0x20000094

0800d2ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b086      	sub	sp, #24
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	60b9      	str	r1, [r7, #8]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d101      	bne.n	800d2c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	e01f      	b.n	800d304 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d003      	beq.n	800d2ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	79fa      	ldrb	r2, [r7, #7]
 800d2f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f004 fad5 	bl	80118a8 <USBD_LL_Init>
 800d2fe:	4603      	mov	r3, r0
 800d300:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d302:	7dfb      	ldrb	r3, [r7, #23]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d316:	2300      	movs	r3, #0
 800d318:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d320:	2303      	movs	r3, #3
 800d322:	e025      	b.n	800d370 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	683a      	ldr	r2, [r7, #0]
 800d328:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	32ae      	adds	r2, #174	; 0xae
 800d336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00f      	beq.n	800d360 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	32ae      	adds	r2, #174	; 0xae
 800d34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d350:	f107 020e 	add.w	r2, r7, #14
 800d354:	4610      	mov	r0, r2
 800d356:	4798      	blx	r3
 800d358:	4602      	mov	r2, r0
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d366:	1c5a      	adds	r2, r3, #1
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f004 fadd 	bl	8011940 <USBD_LL_Start>
 800d386:	4603      	mov	r3, r0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d398:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr

0800d3a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b084      	sub	sp, #16
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d009      	beq.n	800d3d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	78fa      	ldrb	r2, [r7, #3]
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	4798      	blx	r3
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	78fa      	ldrb	r2, [r7, #3]
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	4798      	blx	r3
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d404:	2303      	movs	r3, #3
 800d406:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d408:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}

0800d412 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d412:	b580      	push	{r7, lr}
 800d414:	b084      	sub	sp, #16
 800d416:	af00      	add	r7, sp, #0
 800d418:	6078      	str	r0, [r7, #4]
 800d41a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d422:	6839      	ldr	r1, [r7, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f001 f938 	bl	800e69a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d438:	461a      	mov	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d446:	f003 031f 	and.w	r3, r3, #31
 800d44a:	2b02      	cmp	r3, #2
 800d44c:	d01a      	beq.n	800d484 <USBD_LL_SetupStage+0x72>
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d822      	bhi.n	800d498 <USBD_LL_SetupStage+0x86>
 800d452:	2b00      	cmp	r3, #0
 800d454:	d002      	beq.n	800d45c <USBD_LL_SetupStage+0x4a>
 800d456:	2b01      	cmp	r3, #1
 800d458:	d00a      	beq.n	800d470 <USBD_LL_SetupStage+0x5e>
 800d45a:	e01d      	b.n	800d498 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d462:	4619      	mov	r1, r3
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fb65 	bl	800db34 <USBD_StdDevReq>
 800d46a:	4603      	mov	r3, r0
 800d46c:	73fb      	strb	r3, [r7, #15]
      break;
 800d46e:	e020      	b.n	800d4b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d476:	4619      	mov	r1, r3
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fbcd 	bl	800dc18 <USBD_StdItfReq>
 800d47e:	4603      	mov	r3, r0
 800d480:	73fb      	strb	r3, [r7, #15]
      break;
 800d482:	e016      	b.n	800d4b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d48a:	4619      	mov	r1, r3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fc2f 	bl	800dcf0 <USBD_StdEPReq>
 800d492:	4603      	mov	r3, r0
 800d494:	73fb      	strb	r3, [r7, #15]
      break;
 800d496:	e00c      	b.n	800d4b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d49e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f004 faf0 	bl	8011a8c <USBD_LL_StallEP>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73fb      	strb	r3, [r7, #15]
      break;
 800d4b0:	bf00      	nop
  }

  return ret;
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3710      	adds	r7, #16
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b086      	sub	sp, #24
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	607a      	str	r2, [r7, #4]
 800d4c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d4ce:	7afb      	ldrb	r3, [r7, #11]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d16e      	bne.n	800d5b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d4da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d4e2:	2b03      	cmp	r3, #3
 800d4e4:	f040 8098 	bne.w	800d618 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	689a      	ldr	r2, [r3, #8]
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d913      	bls.n	800d51c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	689a      	ldr	r2, [r3, #8]
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	1ad2      	subs	r2, r2, r3
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	68da      	ldr	r2, [r3, #12]
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	4293      	cmp	r3, r2
 800d50c:	bf28      	it	cs
 800d50e:	4613      	movcs	r3, r2
 800d510:	461a      	mov	r2, r3
 800d512:	6879      	ldr	r1, [r7, #4]
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f001 f9b4 	bl	800e882 <USBD_CtlContinueRx>
 800d51a:	e07d      	b.n	800d618 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d522:	f003 031f 	and.w	r3, r3, #31
 800d526:	2b02      	cmp	r3, #2
 800d528:	d014      	beq.n	800d554 <USBD_LL_DataOutStage+0x98>
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d81d      	bhi.n	800d56a <USBD_LL_DataOutStage+0xae>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <USBD_LL_DataOutStage+0x7c>
 800d532:	2b01      	cmp	r3, #1
 800d534:	d003      	beq.n	800d53e <USBD_LL_DataOutStage+0x82>
 800d536:	e018      	b.n	800d56a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d538:	2300      	movs	r3, #0
 800d53a:	75bb      	strb	r3, [r7, #22]
            break;
 800d53c:	e018      	b.n	800d570 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d544:	b2db      	uxtb	r3, r3
 800d546:	4619      	mov	r1, r3
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f000 fa64 	bl	800da16 <USBD_CoreFindIF>
 800d54e:	4603      	mov	r3, r0
 800d550:	75bb      	strb	r3, [r7, #22]
            break;
 800d552:	e00d      	b.n	800d570 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	4619      	mov	r1, r3
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f000 fa66 	bl	800da30 <USBD_CoreFindEP>
 800d564:	4603      	mov	r3, r0
 800d566:	75bb      	strb	r3, [r7, #22]
            break;
 800d568:	e002      	b.n	800d570 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d56a:	2300      	movs	r3, #0
 800d56c:	75bb      	strb	r3, [r7, #22]
            break;
 800d56e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d570:	7dbb      	ldrb	r3, [r7, #22]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d119      	bne.n	800d5aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b03      	cmp	r3, #3
 800d580:	d113      	bne.n	800d5aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d582:	7dba      	ldrb	r2, [r7, #22]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	32ae      	adds	r2, #174	; 0xae
 800d588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00b      	beq.n	800d5aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d592:	7dba      	ldrb	r2, [r7, #22]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d59a:	7dba      	ldrb	r2, [r7, #22]
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	32ae      	adds	r2, #174	; 0xae
 800d5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f001 f97a 	bl	800e8a4 <USBD_CtlSendStatus>
 800d5b0:	e032      	b.n	800d618 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d5b2:	7afb      	ldrb	r3, [r7, #11]
 800d5b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f000 fa37 	bl	800da30 <USBD_CoreFindEP>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d5c6:	7dbb      	ldrb	r3, [r7, #22]
 800d5c8:	2bff      	cmp	r3, #255	; 0xff
 800d5ca:	d025      	beq.n	800d618 <USBD_LL_DataOutStage+0x15c>
 800d5cc:	7dbb      	ldrb	r3, [r7, #22]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d122      	bne.n	800d618 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	d117      	bne.n	800d60e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d5de:	7dba      	ldrb	r2, [r7, #22]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	32ae      	adds	r2, #174	; 0xae
 800d5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e8:	699b      	ldr	r3, [r3, #24]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00f      	beq.n	800d60e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d5ee:	7dba      	ldrb	r2, [r7, #22]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d5f6:	7dba      	ldrb	r2, [r7, #22]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	32ae      	adds	r2, #174	; 0xae
 800d5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	7afa      	ldrb	r2, [r7, #11]
 800d604:	4611      	mov	r1, r2
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	4798      	blx	r3
 800d60a:	4603      	mov	r3, r0
 800d60c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d60e:	7dfb      	ldrb	r3, [r7, #23]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d614:	7dfb      	ldrb	r3, [r7, #23]
 800d616:	e000      	b.n	800d61a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3718      	adds	r7, #24
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b086      	sub	sp, #24
 800d626:	af00      	add	r7, sp, #0
 800d628:	60f8      	str	r0, [r7, #12]
 800d62a:	460b      	mov	r3, r1
 800d62c:	607a      	str	r2, [r7, #4]
 800d62e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d630:	7afb      	ldrb	r3, [r7, #11]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d16f      	bne.n	800d716 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	3314      	adds	r3, #20
 800d63a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d642:	2b02      	cmp	r3, #2
 800d644:	d15a      	bne.n	800d6fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	689a      	ldr	r2, [r3, #8]
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d914      	bls.n	800d67c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	689a      	ldr	r2, [r3, #8]
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	1ad2      	subs	r2, r2, r3
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	461a      	mov	r2, r3
 800d666:	6879      	ldr	r1, [r7, #4]
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	f001 f8dc 	bl	800e826 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d66e:	2300      	movs	r3, #0
 800d670:	2200      	movs	r2, #0
 800d672:	2100      	movs	r1, #0
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f004 fb0f 	bl	8011c98 <USBD_LL_PrepareReceive>
 800d67a:	e03f      	b.n	800d6fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	68da      	ldr	r2, [r3, #12]
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	429a      	cmp	r2, r3
 800d686:	d11c      	bne.n	800d6c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d690:	429a      	cmp	r2, r3
 800d692:	d316      	bcc.n	800d6c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	685a      	ldr	r2, [r3, #4]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d20f      	bcs.n	800d6c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f001 f8bd 	bl	800e826 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f004 faec 	bl	8011c98 <USBD_LL_PrepareReceive>
 800d6c0:	e01c      	b.n	800d6fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	d10f      	bne.n	800d6ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d009      	beq.n	800d6ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6ee:	2180      	movs	r1, #128	; 0x80
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f004 f9cb 	bl	8011a8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f001 f8e7 	bl	800e8ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d03a      	beq.n	800d77c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f7ff fe42 	bl	800d390 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d714:	e032      	b.n	800d77c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d716:	7afb      	ldrb	r3, [r7, #11]
 800d718:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	4619      	mov	r1, r3
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f000 f985 	bl	800da30 <USBD_CoreFindEP>
 800d726:	4603      	mov	r3, r0
 800d728:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d72a:	7dfb      	ldrb	r3, [r7, #23]
 800d72c:	2bff      	cmp	r3, #255	; 0xff
 800d72e:	d025      	beq.n	800d77c <USBD_LL_DataInStage+0x15a>
 800d730:	7dfb      	ldrb	r3, [r7, #23]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d122      	bne.n	800d77c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d11c      	bne.n	800d77c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d742:	7dfa      	ldrb	r2, [r7, #23]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	32ae      	adds	r2, #174	; 0xae
 800d748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74c:	695b      	ldr	r3, [r3, #20]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d014      	beq.n	800d77c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d752:	7dfa      	ldrb	r2, [r7, #23]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d75a:	7dfa      	ldrb	r2, [r7, #23]
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	32ae      	adds	r2, #174	; 0xae
 800d760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d764:	695b      	ldr	r3, [r3, #20]
 800d766:	7afa      	ldrb	r2, [r7, #11]
 800d768:	4611      	mov	r1, r2
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	4798      	blx	r3
 800d76e:	4603      	mov	r3, r0
 800d770:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d772:	7dbb      	ldrb	r3, [r7, #22]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d778:	7dbb      	ldrb	r3, [r7, #22]
 800d77a:	e000      	b.n	800d77e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d77c:	2300      	movs	r3, #0
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2201      	movs	r2, #1
 800d796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d014      	beq.n	800d7ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00e      	beq.n	800d7ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	6852      	ldr	r2, [r2, #4]
 800d7da:	b2d2      	uxtb	r2, r2
 800d7dc:	4611      	mov	r1, r2
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	4798      	blx	r3
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d7e8:	2303      	movs	r3, #3
 800d7ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d7ec:	2340      	movs	r3, #64	; 0x40
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f004 f8d6 	bl	80119a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2240      	movs	r2, #64	; 0x40
 800d804:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d808:	2340      	movs	r3, #64	; 0x40
 800d80a:	2200      	movs	r2, #0
 800d80c:	2180      	movs	r1, #128	; 0x80
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f004 f8c8 	bl	80119a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2240      	movs	r2, #64	; 0x40
 800d81e:	621a      	str	r2, [r3, #32]

  return ret;
 800d820:	7bfb      	ldrb	r3, [r7, #15]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d82a:	b480      	push	{r7}
 800d82c:	b083      	sub	sp, #12
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	460b      	mov	r3, r1
 800d834:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	78fa      	ldrb	r2, [r7, #3]
 800d83a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b083      	sub	sp, #12
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	d006      	beq.n	800d86c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d864:	b2da      	uxtb	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2204      	movs	r2, #4
 800d870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d882:	b480      	push	{r7}
 800d884:	b083      	sub	sp, #12
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d890:	b2db      	uxtb	r3, r3
 800d892:	2b04      	cmp	r3, #4
 800d894:	d106      	bne.n	800d8a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	370c      	adds	r7, #12
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b082      	sub	sp, #8
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	d110      	bne.n	800d8e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00b      	beq.n	800d8e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8d6:	69db      	ldr	r3, [r3, #28]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d005      	beq.n	800d8e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e2:	69db      	ldr	r3, [r3, #28]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d8e8:	2300      	movs	r3, #0
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b082      	sub	sp, #8
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	32ae      	adds	r2, #174	; 0xae
 800d908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d101      	bne.n	800d914 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d910:	2303      	movs	r3, #3
 800d912:	e01c      	b.n	800d94e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	2b03      	cmp	r3, #3
 800d91e:	d115      	bne.n	800d94c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	32ae      	adds	r2, #174	; 0xae
 800d92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d92e:	6a1b      	ldr	r3, [r3, #32]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d00b      	beq.n	800d94c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	32ae      	adds	r2, #174	; 0xae
 800d93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	78fa      	ldrb	r2, [r7, #3]
 800d946:	4611      	mov	r1, r2
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b082      	sub	sp, #8
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	460b      	mov	r3, r1
 800d960:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	32ae      	adds	r2, #174	; 0xae
 800d96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d101      	bne.n	800d978 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d974:	2303      	movs	r3, #3
 800d976:	e01c      	b.n	800d9b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2b03      	cmp	r3, #3
 800d982:	d115      	bne.n	800d9b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	32ae      	adds	r2, #174	; 0xae
 800d98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00b      	beq.n	800d9b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	32ae      	adds	r2, #174	; 0xae
 800d9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a8:	78fa      	ldrb	r2, [r7, #3]
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d9ba:	b480      	push	{r7}
 800d9bc:	b083      	sub	sp, #12
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	370c      	adds	r7, #12
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00e      	beq.n	800da0c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	6852      	ldr	r2, [r2, #4]
 800d9fa:	b2d2      	uxtb	r2, r2
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	4798      	blx	r3
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d001      	beq.n	800da0c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800da08:	2303      	movs	r3, #3
 800da0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800da16:	b480      	push	{r7}
 800da18:	b083      	sub	sp, #12
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
 800da1e:	460b      	mov	r3, r1
 800da20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800da22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800da24:	4618      	mov	r0, r3
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	460b      	mov	r3, r1
 800da3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800da3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800da3e:	4618      	mov	r0, r3
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b086      	sub	sp, #24
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	460b      	mov	r3, r1
 800da54:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800da5e:	2300      	movs	r3, #0
 800da60:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	885b      	ldrh	r3, [r3, #2]
 800da66:	b29a      	uxth	r2, r3
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	429a      	cmp	r2, r3
 800da70:	d920      	bls.n	800dab4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	b29b      	uxth	r3, r3
 800da78:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800da7a:	e013      	b.n	800daa4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800da7c:	f107 030a 	add.w	r3, r7, #10
 800da80:	4619      	mov	r1, r3
 800da82:	6978      	ldr	r0, [r7, #20]
 800da84:	f000 f81b 	bl	800dabe <USBD_GetNextDesc>
 800da88:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	785b      	ldrb	r3, [r3, #1]
 800da8e:	2b05      	cmp	r3, #5
 800da90:	d108      	bne.n	800daa4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	789b      	ldrb	r3, [r3, #2]
 800da9a:	78fa      	ldrb	r2, [r7, #3]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d008      	beq.n	800dab2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800daa0:	2300      	movs	r3, #0
 800daa2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	885b      	ldrh	r3, [r3, #2]
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	897b      	ldrh	r3, [r7, #10]
 800daac:	429a      	cmp	r2, r3
 800daae:	d8e5      	bhi.n	800da7c <USBD_GetEpDesc+0x32>
 800dab0:	e000      	b.n	800dab4 <USBD_GetEpDesc+0x6a>
          break;
 800dab2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dab4:	693b      	ldr	r3, [r7, #16]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dabe:	b480      	push	{r7}
 800dac0:	b085      	sub	sp, #20
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
 800dac6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	881a      	ldrh	r2, [r3, #0]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	4413      	add	r3, r2
 800dad8:	b29a      	uxth	r2, r3
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	4413      	add	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800daea:	68fb      	ldr	r3, [r7, #12]
}
 800daec:	4618      	mov	r0, r3
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr

0800daf8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b087      	sub	sp, #28
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	3301      	adds	r3, #1
 800db0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800db16:	8a3b      	ldrh	r3, [r7, #16]
 800db18:	021b      	lsls	r3, r3, #8
 800db1a:	b21a      	sxth	r2, r3
 800db1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db20:	4313      	orrs	r3, r2
 800db22:	b21b      	sxth	r3, r3
 800db24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800db26:	89fb      	ldrh	r3, [r7, #14]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	371c      	adds	r7, #28
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db4a:	2b40      	cmp	r3, #64	; 0x40
 800db4c:	d005      	beq.n	800db5a <USBD_StdDevReq+0x26>
 800db4e:	2b40      	cmp	r3, #64	; 0x40
 800db50:	d857      	bhi.n	800dc02 <USBD_StdDevReq+0xce>
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00f      	beq.n	800db76 <USBD_StdDevReq+0x42>
 800db56:	2b20      	cmp	r3, #32
 800db58:	d153      	bne.n	800dc02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	32ae      	adds	r2, #174	; 0xae
 800db64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db68:	689b      	ldr	r3, [r3, #8]
 800db6a:	6839      	ldr	r1, [r7, #0]
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	4798      	blx	r3
 800db70:	4603      	mov	r3, r0
 800db72:	73fb      	strb	r3, [r7, #15]
      break;
 800db74:	e04a      	b.n	800dc0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	785b      	ldrb	r3, [r3, #1]
 800db7a:	2b09      	cmp	r3, #9
 800db7c:	d83b      	bhi.n	800dbf6 <USBD_StdDevReq+0xc2>
 800db7e:	a201      	add	r2, pc, #4	; (adr r2, 800db84 <USBD_StdDevReq+0x50>)
 800db80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db84:	0800dbd9 	.word	0x0800dbd9
 800db88:	0800dbed 	.word	0x0800dbed
 800db8c:	0800dbf7 	.word	0x0800dbf7
 800db90:	0800dbe3 	.word	0x0800dbe3
 800db94:	0800dbf7 	.word	0x0800dbf7
 800db98:	0800dbb7 	.word	0x0800dbb7
 800db9c:	0800dbad 	.word	0x0800dbad
 800dba0:	0800dbf7 	.word	0x0800dbf7
 800dba4:	0800dbcf 	.word	0x0800dbcf
 800dba8:	0800dbc1 	.word	0x0800dbc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dbac:	6839      	ldr	r1, [r7, #0]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 fa3c 	bl	800e02c <USBD_GetDescriptor>
          break;
 800dbb4:	e024      	b.n	800dc00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dbb6:	6839      	ldr	r1, [r7, #0]
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 fbcb 	bl	800e354 <USBD_SetAddress>
          break;
 800dbbe:	e01f      	b.n	800dc00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dbc0:	6839      	ldr	r1, [r7, #0]
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fc0a 	bl	800e3dc <USBD_SetConfig>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	73fb      	strb	r3, [r7, #15]
          break;
 800dbcc:	e018      	b.n	800dc00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dbce:	6839      	ldr	r1, [r7, #0]
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 fcad 	bl	800e530 <USBD_GetConfig>
          break;
 800dbd6:	e013      	b.n	800dc00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dbd8:	6839      	ldr	r1, [r7, #0]
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 fcde 	bl	800e59c <USBD_GetStatus>
          break;
 800dbe0:	e00e      	b.n	800dc00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dbe2:	6839      	ldr	r1, [r7, #0]
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 fd0d 	bl	800e604 <USBD_SetFeature>
          break;
 800dbea:	e009      	b.n	800dc00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fd31 	bl	800e656 <USBD_ClrFeature>
          break;
 800dbf4:	e004      	b.n	800dc00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dbf6:	6839      	ldr	r1, [r7, #0]
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 fd88 	bl	800e70e <USBD_CtlError>
          break;
 800dbfe:	bf00      	nop
      }
      break;
 800dc00:	e004      	b.n	800dc0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dc02:	6839      	ldr	r1, [r7, #0]
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 fd82 	bl	800e70e <USBD_CtlError>
      break;
 800dc0a:	bf00      	nop
  }

  return ret;
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop

0800dc18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc2e:	2b40      	cmp	r3, #64	; 0x40
 800dc30:	d005      	beq.n	800dc3e <USBD_StdItfReq+0x26>
 800dc32:	2b40      	cmp	r3, #64	; 0x40
 800dc34:	d852      	bhi.n	800dcdc <USBD_StdItfReq+0xc4>
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d001      	beq.n	800dc3e <USBD_StdItfReq+0x26>
 800dc3a:	2b20      	cmp	r3, #32
 800dc3c:	d14e      	bne.n	800dcdc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	3b01      	subs	r3, #1
 800dc48:	2b02      	cmp	r3, #2
 800dc4a:	d840      	bhi.n	800dcce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	889b      	ldrh	r3, [r3, #4]
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d836      	bhi.n	800dcc4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	889b      	ldrh	r3, [r3, #4]
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7ff fed9 	bl	800da16 <USBD_CoreFindIF>
 800dc64:	4603      	mov	r3, r0
 800dc66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc68:	7bbb      	ldrb	r3, [r7, #14]
 800dc6a:	2bff      	cmp	r3, #255	; 0xff
 800dc6c:	d01d      	beq.n	800dcaa <USBD_StdItfReq+0x92>
 800dc6e:	7bbb      	ldrb	r3, [r7, #14]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d11a      	bne.n	800dcaa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dc74:	7bba      	ldrb	r2, [r7, #14]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	32ae      	adds	r2, #174	; 0xae
 800dc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00f      	beq.n	800dca4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dc84:	7bba      	ldrb	r2, [r7, #14]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dc8c:	7bba      	ldrb	r2, [r7, #14]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	32ae      	adds	r2, #174	; 0xae
 800dc92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	4798      	blx	r3
 800dc9e:	4603      	mov	r3, r0
 800dca0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dca2:	e004      	b.n	800dcae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dca4:	2303      	movs	r3, #3
 800dca6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dca8:	e001      	b.n	800dcae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dcaa:	2303      	movs	r3, #3
 800dcac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	88db      	ldrh	r3, [r3, #6]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d110      	bne.n	800dcd8 <USBD_StdItfReq+0xc0>
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10d      	bne.n	800dcd8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fdf1 	bl	800e8a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dcc2:	e009      	b.n	800dcd8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 fd21 	bl	800e70e <USBD_CtlError>
          break;
 800dccc:	e004      	b.n	800dcd8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fd1c 	bl	800e70e <USBD_CtlError>
          break;
 800dcd6:	e000      	b.n	800dcda <USBD_StdItfReq+0xc2>
          break;
 800dcd8:	bf00      	nop
      }
      break;
 800dcda:	e004      	b.n	800dce6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 fd15 	bl	800e70e <USBD_CtlError>
      break;
 800dce4:	bf00      	nop
  }

  return ret;
 800dce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	889b      	ldrh	r3, [r3, #4]
 800dd02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd0c:	2b40      	cmp	r3, #64	; 0x40
 800dd0e:	d007      	beq.n	800dd20 <USBD_StdEPReq+0x30>
 800dd10:	2b40      	cmp	r3, #64	; 0x40
 800dd12:	f200 817f 	bhi.w	800e014 <USBD_StdEPReq+0x324>
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d02a      	beq.n	800dd70 <USBD_StdEPReq+0x80>
 800dd1a:	2b20      	cmp	r3, #32
 800dd1c:	f040 817a 	bne.w	800e014 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
 800dd22:	4619      	mov	r1, r3
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7ff fe83 	bl	800da30 <USBD_CoreFindEP>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd2e:	7b7b      	ldrb	r3, [r7, #13]
 800dd30:	2bff      	cmp	r3, #255	; 0xff
 800dd32:	f000 8174 	beq.w	800e01e <USBD_StdEPReq+0x32e>
 800dd36:	7b7b      	ldrb	r3, [r7, #13]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f040 8170 	bne.w	800e01e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dd3e:	7b7a      	ldrb	r2, [r7, #13]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dd46:	7b7a      	ldrb	r2, [r7, #13]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	32ae      	adds	r2, #174	; 0xae
 800dd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f000 8163 	beq.w	800e01e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dd58:	7b7a      	ldrb	r2, [r7, #13]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	32ae      	adds	r2, #174	; 0xae
 800dd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	6839      	ldr	r1, [r7, #0]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	4798      	blx	r3
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dd6e:	e156      	b.n	800e01e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	785b      	ldrb	r3, [r3, #1]
 800dd74:	2b03      	cmp	r3, #3
 800dd76:	d008      	beq.n	800dd8a <USBD_StdEPReq+0x9a>
 800dd78:	2b03      	cmp	r3, #3
 800dd7a:	f300 8145 	bgt.w	800e008 <USBD_StdEPReq+0x318>
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	f000 809b 	beq.w	800deba <USBD_StdEPReq+0x1ca>
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d03c      	beq.n	800de02 <USBD_StdEPReq+0x112>
 800dd88:	e13e      	b.n	800e008 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	d002      	beq.n	800dd9c <USBD_StdEPReq+0xac>
 800dd96:	2b03      	cmp	r3, #3
 800dd98:	d016      	beq.n	800ddc8 <USBD_StdEPReq+0xd8>
 800dd9a:	e02c      	b.n	800ddf6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd9c:	7bbb      	ldrb	r3, [r7, #14]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00d      	beq.n	800ddbe <USBD_StdEPReq+0xce>
 800dda2:	7bbb      	ldrb	r3, [r7, #14]
 800dda4:	2b80      	cmp	r3, #128	; 0x80
 800dda6:	d00a      	beq.n	800ddbe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dda8:	7bbb      	ldrb	r3, [r7, #14]
 800ddaa:	4619      	mov	r1, r3
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f003 fe6d 	bl	8011a8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddb2:	2180      	movs	r1, #128	; 0x80
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f003 fe69 	bl	8011a8c <USBD_LL_StallEP>
 800ddba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ddbc:	e020      	b.n	800de00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ddbe:	6839      	ldr	r1, [r7, #0]
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 fca4 	bl	800e70e <USBD_CtlError>
              break;
 800ddc6:	e01b      	b.n	800de00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	885b      	ldrh	r3, [r3, #2]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10e      	bne.n	800ddee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ddd0:	7bbb      	ldrb	r3, [r7, #14]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00b      	beq.n	800ddee <USBD_StdEPReq+0xfe>
 800ddd6:	7bbb      	ldrb	r3, [r7, #14]
 800ddd8:	2b80      	cmp	r3, #128	; 0x80
 800ddda:	d008      	beq.n	800ddee <USBD_StdEPReq+0xfe>
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	88db      	ldrh	r3, [r3, #6]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d104      	bne.n	800ddee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dde4:	7bbb      	ldrb	r3, [r7, #14]
 800dde6:	4619      	mov	r1, r3
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f003 fe4f 	bl	8011a8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fd58 	bl	800e8a4 <USBD_CtlSendStatus>

              break;
 800ddf4:	e004      	b.n	800de00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ddf6:	6839      	ldr	r1, [r7, #0]
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 fc88 	bl	800e70e <USBD_CtlError>
              break;
 800ddfe:	bf00      	nop
          }
          break;
 800de00:	e107      	b.n	800e012 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	d002      	beq.n	800de14 <USBD_StdEPReq+0x124>
 800de0e:	2b03      	cmp	r3, #3
 800de10:	d016      	beq.n	800de40 <USBD_StdEPReq+0x150>
 800de12:	e04b      	b.n	800deac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de14:	7bbb      	ldrb	r3, [r7, #14]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00d      	beq.n	800de36 <USBD_StdEPReq+0x146>
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	2b80      	cmp	r3, #128	; 0x80
 800de1e:	d00a      	beq.n	800de36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de20:	7bbb      	ldrb	r3, [r7, #14]
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f003 fe31 	bl	8011a8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de2a:	2180      	movs	r1, #128	; 0x80
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f003 fe2d 	bl	8011a8c <USBD_LL_StallEP>
 800de32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de34:	e040      	b.n	800deb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fc68 	bl	800e70e <USBD_CtlError>
              break;
 800de3e:	e03b      	b.n	800deb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	885b      	ldrh	r3, [r3, #2]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d136      	bne.n	800deb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d004      	beq.n	800de5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800de52:	7bbb      	ldrb	r3, [r7, #14]
 800de54:	4619      	mov	r1, r3
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f003 fe4e 	bl	8011af8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fd21 	bl	800e8a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800de62:	7bbb      	ldrb	r3, [r7, #14]
 800de64:	4619      	mov	r1, r3
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7ff fde2 	bl	800da30 <USBD_CoreFindEP>
 800de6c:	4603      	mov	r3, r0
 800de6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de70:	7b7b      	ldrb	r3, [r7, #13]
 800de72:	2bff      	cmp	r3, #255	; 0xff
 800de74:	d01f      	beq.n	800deb6 <USBD_StdEPReq+0x1c6>
 800de76:	7b7b      	ldrb	r3, [r7, #13]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d11c      	bne.n	800deb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800de7c:	7b7a      	ldrb	r2, [r7, #13]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800de84:	7b7a      	ldrb	r2, [r7, #13]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	32ae      	adds	r2, #174	; 0xae
 800de8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d010      	beq.n	800deb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800de94:	7b7a      	ldrb	r2, [r7, #13]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	32ae      	adds	r2, #174	; 0xae
 800de9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	6839      	ldr	r1, [r7, #0]
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	4798      	blx	r3
 800dea6:	4603      	mov	r3, r0
 800dea8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800deaa:	e004      	b.n	800deb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800deac:	6839      	ldr	r1, [r7, #0]
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 fc2d 	bl	800e70e <USBD_CtlError>
              break;
 800deb4:	e000      	b.n	800deb8 <USBD_StdEPReq+0x1c8>
              break;
 800deb6:	bf00      	nop
          }
          break;
 800deb8:	e0ab      	b.n	800e012 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	d002      	beq.n	800decc <USBD_StdEPReq+0x1dc>
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	d032      	beq.n	800df30 <USBD_StdEPReq+0x240>
 800deca:	e097      	b.n	800dffc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800decc:	7bbb      	ldrb	r3, [r7, #14]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d007      	beq.n	800dee2 <USBD_StdEPReq+0x1f2>
 800ded2:	7bbb      	ldrb	r3, [r7, #14]
 800ded4:	2b80      	cmp	r3, #128	; 0x80
 800ded6:	d004      	beq.n	800dee2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ded8:	6839      	ldr	r1, [r7, #0]
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fc17 	bl	800e70e <USBD_CtlError>
                break;
 800dee0:	e091      	b.n	800e006 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	da0b      	bge.n	800df02 <USBD_StdEPReq+0x212>
 800deea:	7bbb      	ldrb	r3, [r7, #14]
 800deec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800def0:	4613      	mov	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4413      	add	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	3310      	adds	r3, #16
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	4413      	add	r3, r2
 800defe:	3304      	adds	r3, #4
 800df00:	e00b      	b.n	800df1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df02:	7bbb      	ldrb	r3, [r7, #14]
 800df04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df08:	4613      	mov	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4413      	add	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	4413      	add	r3, r2
 800df18:	3304      	adds	r3, #4
 800df1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	2200      	movs	r2, #0
 800df20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2202      	movs	r2, #2
 800df26:	4619      	mov	r1, r3
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 fc61 	bl	800e7f0 <USBD_CtlSendData>
              break;
 800df2e:	e06a      	b.n	800e006 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800df30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df34:	2b00      	cmp	r3, #0
 800df36:	da11      	bge.n	800df5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df38:	7bbb      	ldrb	r3, [r7, #14]
 800df3a:	f003 020f 	and.w	r2, r3, #15
 800df3e:	6879      	ldr	r1, [r7, #4]
 800df40:	4613      	mov	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	440b      	add	r3, r1
 800df4a:	3324      	adds	r3, #36	; 0x24
 800df4c:	881b      	ldrh	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d117      	bne.n	800df82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800df52:	6839      	ldr	r1, [r7, #0]
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 fbda 	bl	800e70e <USBD_CtlError>
                  break;
 800df5a:	e054      	b.n	800e006 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	f003 020f 	and.w	r2, r3, #15
 800df62:	6879      	ldr	r1, [r7, #4]
 800df64:	4613      	mov	r3, r2
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	4413      	add	r3, r2
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	440b      	add	r3, r1
 800df6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d104      	bne.n	800df82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 fbc7 	bl	800e70e <USBD_CtlError>
                  break;
 800df80:	e041      	b.n	800e006 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df86:	2b00      	cmp	r3, #0
 800df88:	da0b      	bge.n	800dfa2 <USBD_StdEPReq+0x2b2>
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
 800df8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df90:	4613      	mov	r3, r2
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	4413      	add	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	3310      	adds	r3, #16
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	4413      	add	r3, r2
 800df9e:	3304      	adds	r3, #4
 800dfa0:	e00b      	b.n	800dfba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
 800dfa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	3304      	adds	r3, #4
 800dfba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dfbc:	7bbb      	ldrb	r3, [r7, #14]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d002      	beq.n	800dfc8 <USBD_StdEPReq+0x2d8>
 800dfc2:	7bbb      	ldrb	r3, [r7, #14]
 800dfc4:	2b80      	cmp	r3, #128	; 0x80
 800dfc6:	d103      	bne.n	800dfd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	e00e      	b.n	800dfee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dfd0:	7bbb      	ldrb	r3, [r7, #14]
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f003 fdc5 	bl	8011b64 <USBD_LL_IsStallEP>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d003      	beq.n	800dfe8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	2201      	movs	r2, #1
 800dfe4:	601a      	str	r2, [r3, #0]
 800dfe6:	e002      	b.n	800dfee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2200      	movs	r2, #0
 800dfec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	2202      	movs	r2, #2
 800dff2:	4619      	mov	r1, r3
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 fbfb 	bl	800e7f0 <USBD_CtlSendData>
              break;
 800dffa:	e004      	b.n	800e006 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dffc:	6839      	ldr	r1, [r7, #0]
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fb85 	bl	800e70e <USBD_CtlError>
              break;
 800e004:	bf00      	nop
          }
          break;
 800e006:	e004      	b.n	800e012 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 fb7f 	bl	800e70e <USBD_CtlError>
          break;
 800e010:	bf00      	nop
      }
      break;
 800e012:	e005      	b.n	800e020 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e014:	6839      	ldr	r1, [r7, #0]
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fb79 	bl	800e70e <USBD_CtlError>
      break;
 800e01c:	e000      	b.n	800e020 <USBD_StdEPReq+0x330>
      break;
 800e01e:	bf00      	nop
  }

  return ret;
 800e020:	7bfb      	ldrb	r3, [r7, #15]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
	...

0800e02c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e036:	2300      	movs	r3, #0
 800e038:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e03a:	2300      	movs	r3, #0
 800e03c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e03e:	2300      	movs	r3, #0
 800e040:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	885b      	ldrh	r3, [r3, #2]
 800e046:	0a1b      	lsrs	r3, r3, #8
 800e048:	b29b      	uxth	r3, r3
 800e04a:	3b01      	subs	r3, #1
 800e04c:	2b0e      	cmp	r3, #14
 800e04e:	f200 8152 	bhi.w	800e2f6 <USBD_GetDescriptor+0x2ca>
 800e052:	a201      	add	r2, pc, #4	; (adr r2, 800e058 <USBD_GetDescriptor+0x2c>)
 800e054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e058:	0800e0c9 	.word	0x0800e0c9
 800e05c:	0800e0e1 	.word	0x0800e0e1
 800e060:	0800e121 	.word	0x0800e121
 800e064:	0800e2f7 	.word	0x0800e2f7
 800e068:	0800e2f7 	.word	0x0800e2f7
 800e06c:	0800e297 	.word	0x0800e297
 800e070:	0800e2c3 	.word	0x0800e2c3
 800e074:	0800e2f7 	.word	0x0800e2f7
 800e078:	0800e2f7 	.word	0x0800e2f7
 800e07c:	0800e2f7 	.word	0x0800e2f7
 800e080:	0800e2f7 	.word	0x0800e2f7
 800e084:	0800e2f7 	.word	0x0800e2f7
 800e088:	0800e2f7 	.word	0x0800e2f7
 800e08c:	0800e2f7 	.word	0x0800e2f7
 800e090:	0800e095 	.word	0x0800e095
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e09a:	69db      	ldr	r3, [r3, #28]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00b      	beq.n	800e0b8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0a6:	69db      	ldr	r3, [r3, #28]
 800e0a8:	687a      	ldr	r2, [r7, #4]
 800e0aa:	7c12      	ldrb	r2, [r2, #16]
 800e0ac:	f107 0108 	add.w	r1, r7, #8
 800e0b0:	4610      	mov	r0, r2
 800e0b2:	4798      	blx	r3
 800e0b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0b6:	e126      	b.n	800e306 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e0b8:	6839      	ldr	r1, [r7, #0]
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 fb27 	bl	800e70e <USBD_CtlError>
        err++;
 800e0c0:	7afb      	ldrb	r3, [r7, #11]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	72fb      	strb	r3, [r7, #11]
      break;
 800e0c6:	e11e      	b.n	800e306 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	7c12      	ldrb	r2, [r2, #16]
 800e0d4:	f107 0108 	add.w	r1, r7, #8
 800e0d8:	4610      	mov	r0, r2
 800e0da:	4798      	blx	r3
 800e0dc:	60f8      	str	r0, [r7, #12]
      break;
 800e0de:	e112      	b.n	800e306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	7c1b      	ldrb	r3, [r3, #16]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10d      	bne.n	800e104 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0f0:	f107 0208 	add.w	r2, r7, #8
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4798      	blx	r3
 800e0f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	2202      	movs	r2, #2
 800e100:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e102:	e100      	b.n	800e306 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e10c:	f107 0208 	add.w	r2, r7, #8
 800e110:	4610      	mov	r0, r2
 800e112:	4798      	blx	r3
 800e114:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3301      	adds	r3, #1
 800e11a:	2202      	movs	r2, #2
 800e11c:	701a      	strb	r2, [r3, #0]
      break;
 800e11e:	e0f2      	b.n	800e306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	885b      	ldrh	r3, [r3, #2]
 800e124:	b2db      	uxtb	r3, r3
 800e126:	2b05      	cmp	r3, #5
 800e128:	f200 80ac 	bhi.w	800e284 <USBD_GetDescriptor+0x258>
 800e12c:	a201      	add	r2, pc, #4	; (adr r2, 800e134 <USBD_GetDescriptor+0x108>)
 800e12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e132:	bf00      	nop
 800e134:	0800e14d 	.word	0x0800e14d
 800e138:	0800e181 	.word	0x0800e181
 800e13c:	0800e1b5 	.word	0x0800e1b5
 800e140:	0800e1e9 	.word	0x0800e1e9
 800e144:	0800e21d 	.word	0x0800e21d
 800e148:	0800e251 	.word	0x0800e251
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00b      	beq.n	800e170 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	7c12      	ldrb	r2, [r2, #16]
 800e164:	f107 0108 	add.w	r1, r7, #8
 800e168:	4610      	mov	r0, r2
 800e16a:	4798      	blx	r3
 800e16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e16e:	e091      	b.n	800e294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 facb 	bl	800e70e <USBD_CtlError>
            err++;
 800e178:	7afb      	ldrb	r3, [r7, #11]
 800e17a:	3301      	adds	r3, #1
 800e17c:	72fb      	strb	r3, [r7, #11]
          break;
 800e17e:	e089      	b.n	800e294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00b      	beq.n	800e1a4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e192:	689b      	ldr	r3, [r3, #8]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	7c12      	ldrb	r2, [r2, #16]
 800e198:	f107 0108 	add.w	r1, r7, #8
 800e19c:	4610      	mov	r0, r2
 800e19e:	4798      	blx	r3
 800e1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1a2:	e077      	b.n	800e294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 fab1 	bl	800e70e <USBD_CtlError>
            err++;
 800e1ac:	7afb      	ldrb	r3, [r7, #11]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e1b2:	e06f      	b.n	800e294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00b      	beq.n	800e1d8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	7c12      	ldrb	r2, [r2, #16]
 800e1cc:	f107 0108 	add.w	r1, r7, #8
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	4798      	blx	r3
 800e1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1d6:	e05d      	b.n	800e294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fa97 	bl	800e70e <USBD_CtlError>
            err++;
 800e1e0:	7afb      	ldrb	r3, [r7, #11]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e1e6:	e055      	b.n	800e294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00b      	beq.n	800e20c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	7c12      	ldrb	r2, [r2, #16]
 800e200:	f107 0108 	add.w	r1, r7, #8
 800e204:	4610      	mov	r0, r2
 800e206:	4798      	blx	r3
 800e208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e20a:	e043      	b.n	800e294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 fa7d 	bl	800e70e <USBD_CtlError>
            err++;
 800e214:	7afb      	ldrb	r3, [r7, #11]
 800e216:	3301      	adds	r3, #1
 800e218:	72fb      	strb	r3, [r7, #11]
          break;
 800e21a:	e03b      	b.n	800e294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e222:	695b      	ldr	r3, [r3, #20]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00b      	beq.n	800e240 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e22e:	695b      	ldr	r3, [r3, #20]
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	7c12      	ldrb	r2, [r2, #16]
 800e234:	f107 0108 	add.w	r1, r7, #8
 800e238:	4610      	mov	r0, r2
 800e23a:	4798      	blx	r3
 800e23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e23e:	e029      	b.n	800e294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e240:	6839      	ldr	r1, [r7, #0]
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 fa63 	bl	800e70e <USBD_CtlError>
            err++;
 800e248:	7afb      	ldrb	r3, [r7, #11]
 800e24a:	3301      	adds	r3, #1
 800e24c:	72fb      	strb	r3, [r7, #11]
          break;
 800e24e:	e021      	b.n	800e294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00b      	beq.n	800e274 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	7c12      	ldrb	r2, [r2, #16]
 800e268:	f107 0108 	add.w	r1, r7, #8
 800e26c:	4610      	mov	r0, r2
 800e26e:	4798      	blx	r3
 800e270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e272:	e00f      	b.n	800e294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fa49 	bl	800e70e <USBD_CtlError>
            err++;
 800e27c:	7afb      	ldrb	r3, [r7, #11]
 800e27e:	3301      	adds	r3, #1
 800e280:	72fb      	strb	r3, [r7, #11]
          break;
 800e282:	e007      	b.n	800e294 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e284:	6839      	ldr	r1, [r7, #0]
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 fa41 	bl	800e70e <USBD_CtlError>
          err++;
 800e28c:	7afb      	ldrb	r3, [r7, #11]
 800e28e:	3301      	adds	r3, #1
 800e290:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e292:	bf00      	nop
      }
      break;
 800e294:	e037      	b.n	800e306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	7c1b      	ldrb	r3, [r3, #16]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d109      	bne.n	800e2b2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a6:	f107 0208 	add.w	r2, r7, #8
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	4798      	blx	r3
 800e2ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e2b0:	e029      	b.n	800e306 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fa2a 	bl	800e70e <USBD_CtlError>
        err++;
 800e2ba:	7afb      	ldrb	r3, [r7, #11]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	72fb      	strb	r3, [r7, #11]
      break;
 800e2c0:	e021      	b.n	800e306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7c1b      	ldrb	r3, [r3, #16]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d10d      	bne.n	800e2e6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2d2:	f107 0208 	add.w	r2, r7, #8
 800e2d6:	4610      	mov	r0, r2
 800e2d8:	4798      	blx	r3
 800e2da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	2207      	movs	r2, #7
 800e2e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e2e4:	e00f      	b.n	800e306 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e2e6:	6839      	ldr	r1, [r7, #0]
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 fa10 	bl	800e70e <USBD_CtlError>
        err++;
 800e2ee:	7afb      	ldrb	r3, [r7, #11]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	72fb      	strb	r3, [r7, #11]
      break;
 800e2f4:	e007      	b.n	800e306 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e2f6:	6839      	ldr	r1, [r7, #0]
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fa08 	bl	800e70e <USBD_CtlError>
      err++;
 800e2fe:	7afb      	ldrb	r3, [r7, #11]
 800e300:	3301      	adds	r3, #1
 800e302:	72fb      	strb	r3, [r7, #11]
      break;
 800e304:	bf00      	nop
  }

  if (err != 0U)
 800e306:	7afb      	ldrb	r3, [r7, #11]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d11e      	bne.n	800e34a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	88db      	ldrh	r3, [r3, #6]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d016      	beq.n	800e342 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e314:	893b      	ldrh	r3, [r7, #8]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00e      	beq.n	800e338 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	88da      	ldrh	r2, [r3, #6]
 800e31e:	893b      	ldrh	r3, [r7, #8]
 800e320:	4293      	cmp	r3, r2
 800e322:	bf28      	it	cs
 800e324:	4613      	movcs	r3, r2
 800e326:	b29b      	uxth	r3, r3
 800e328:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e32a:	893b      	ldrh	r3, [r7, #8]
 800e32c:	461a      	mov	r2, r3
 800e32e:	68f9      	ldr	r1, [r7, #12]
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fa5d 	bl	800e7f0 <USBD_CtlSendData>
 800e336:	e009      	b.n	800e34c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e338:	6839      	ldr	r1, [r7, #0]
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f9e7 	bl	800e70e <USBD_CtlError>
 800e340:	e004      	b.n	800e34c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 faae 	bl	800e8a4 <USBD_CtlSendStatus>
 800e348:	e000      	b.n	800e34c <USBD_GetDescriptor+0x320>
    return;
 800e34a:	bf00      	nop
  }
}
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop

0800e354 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	889b      	ldrh	r3, [r3, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d131      	bne.n	800e3ca <USBD_SetAddress+0x76>
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	88db      	ldrh	r3, [r3, #6]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d12d      	bne.n	800e3ca <USBD_SetAddress+0x76>
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	885b      	ldrh	r3, [r3, #2]
 800e372:	2b7f      	cmp	r3, #127	; 0x7f
 800e374:	d829      	bhi.n	800e3ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	885b      	ldrh	r3, [r3, #2]
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	2b03      	cmp	r3, #3
 800e38c:	d104      	bne.n	800e398 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e38e:	6839      	ldr	r1, [r7, #0]
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 f9bc 	bl	800e70e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e396:	e01d      	b.n	800e3d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	7bfa      	ldrb	r2, [r7, #15]
 800e39c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e3a0:	7bfb      	ldrb	r3, [r7, #15]
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f003 fc09 	bl	8011bbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 fa7a 	bl	800e8a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d004      	beq.n	800e3c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2202      	movs	r2, #2
 800e3ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3be:	e009      	b.n	800e3d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3c8:	e004      	b.n	800e3d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f99e 	bl	800e70e <USBD_CtlError>
  }
}
 800e3d2:	bf00      	nop
 800e3d4:	bf00      	nop
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	885b      	ldrh	r3, [r3, #2]
 800e3ee:	b2da      	uxtb	r2, r3
 800e3f0:	4b4e      	ldr	r3, [pc, #312]	; (800e52c <USBD_SetConfig+0x150>)
 800e3f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e3f4:	4b4d      	ldr	r3, [pc, #308]	; (800e52c <USBD_SetConfig+0x150>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d905      	bls.n	800e408 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e3fc:	6839      	ldr	r1, [r7, #0]
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 f985 	bl	800e70e <USBD_CtlError>
    return USBD_FAIL;
 800e404:	2303      	movs	r3, #3
 800e406:	e08c      	b.n	800e522 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	2b02      	cmp	r3, #2
 800e412:	d002      	beq.n	800e41a <USBD_SetConfig+0x3e>
 800e414:	2b03      	cmp	r3, #3
 800e416:	d029      	beq.n	800e46c <USBD_SetConfig+0x90>
 800e418:	e075      	b.n	800e506 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e41a:	4b44      	ldr	r3, [pc, #272]	; (800e52c <USBD_SetConfig+0x150>)
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d020      	beq.n	800e464 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e422:	4b42      	ldr	r3, [pc, #264]	; (800e52c <USBD_SetConfig+0x150>)
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e42c:	4b3f      	ldr	r3, [pc, #252]	; (800e52c <USBD_SetConfig+0x150>)
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	4619      	mov	r1, r3
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7fe ffb7 	bl	800d3a6 <USBD_SetClassConfig>
 800e438:	4603      	mov	r3, r0
 800e43a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e43c:	7bfb      	ldrb	r3, [r7, #15]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d008      	beq.n	800e454 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e442:	6839      	ldr	r1, [r7, #0]
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 f962 	bl	800e70e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2202      	movs	r2, #2
 800e44e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e452:	e065      	b.n	800e520 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fa25 	bl	800e8a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2203      	movs	r2, #3
 800e45e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e462:	e05d      	b.n	800e520 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 fa1d 	bl	800e8a4 <USBD_CtlSendStatus>
      break;
 800e46a:	e059      	b.n	800e520 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e46c:	4b2f      	ldr	r3, [pc, #188]	; (800e52c <USBD_SetConfig+0x150>)
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d112      	bne.n	800e49a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2202      	movs	r2, #2
 800e478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e47c:	4b2b      	ldr	r3, [pc, #172]	; (800e52c <USBD_SetConfig+0x150>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	461a      	mov	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e486:	4b29      	ldr	r3, [pc, #164]	; (800e52c <USBD_SetConfig+0x150>)
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	4619      	mov	r1, r3
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7fe ffa6 	bl	800d3de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 fa06 	bl	800e8a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e498:	e042      	b.n	800e520 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e49a:	4b24      	ldr	r3, [pc, #144]	; (800e52c <USBD_SetConfig+0x150>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d02a      	beq.n	800e4fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7fe ff94 	bl	800d3de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e4b6:	4b1d      	ldr	r3, [pc, #116]	; (800e52c <USBD_SetConfig+0x150>)
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4c0:	4b1a      	ldr	r3, [pc, #104]	; (800e52c <USBD_SetConfig+0x150>)
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f7fe ff6d 	bl	800d3a6 <USBD_SetClassConfig>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00f      	beq.n	800e4f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e4d6:	6839      	ldr	r1, [r7, #0]
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f918 	bl	800e70e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7fe ff79 	bl	800d3de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e4f4:	e014      	b.n	800e520 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f9d4 	bl	800e8a4 <USBD_CtlSendStatus>
      break;
 800e4fc:	e010      	b.n	800e520 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 f9d0 	bl	800e8a4 <USBD_CtlSendStatus>
      break;
 800e504:	e00c      	b.n	800e520 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e506:	6839      	ldr	r1, [r7, #0]
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f000 f900 	bl	800e70e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e50e:	4b07      	ldr	r3, [pc, #28]	; (800e52c <USBD_SetConfig+0x150>)
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	4619      	mov	r1, r3
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7fe ff62 	bl	800d3de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e51a:	2303      	movs	r3, #3
 800e51c:	73fb      	strb	r3, [r7, #15]
      break;
 800e51e:	bf00      	nop
  }

  return ret;
 800e520:	7bfb      	ldrb	r3, [r7, #15]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	20002128 	.word	0x20002128

0800e530 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	88db      	ldrh	r3, [r3, #6]
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d004      	beq.n	800e54c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e542:	6839      	ldr	r1, [r7, #0]
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 f8e2 	bl	800e70e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e54a:	e023      	b.n	800e594 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e552:	b2db      	uxtb	r3, r3
 800e554:	2b02      	cmp	r3, #2
 800e556:	dc02      	bgt.n	800e55e <USBD_GetConfig+0x2e>
 800e558:	2b00      	cmp	r3, #0
 800e55a:	dc03      	bgt.n	800e564 <USBD_GetConfig+0x34>
 800e55c:	e015      	b.n	800e58a <USBD_GetConfig+0x5a>
 800e55e:	2b03      	cmp	r3, #3
 800e560:	d00b      	beq.n	800e57a <USBD_GetConfig+0x4a>
 800e562:	e012      	b.n	800e58a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	3308      	adds	r3, #8
 800e56e:	2201      	movs	r2, #1
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 f93c 	bl	800e7f0 <USBD_CtlSendData>
        break;
 800e578:	e00c      	b.n	800e594 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	3304      	adds	r3, #4
 800e57e:	2201      	movs	r2, #1
 800e580:	4619      	mov	r1, r3
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 f934 	bl	800e7f0 <USBD_CtlSendData>
        break;
 800e588:	e004      	b.n	800e594 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 f8be 	bl	800e70e <USBD_CtlError>
        break;
 800e592:	bf00      	nop
}
 800e594:	bf00      	nop
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
 800e5a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	3b01      	subs	r3, #1
 800e5b0:	2b02      	cmp	r3, #2
 800e5b2:	d81e      	bhi.n	800e5f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	88db      	ldrh	r3, [r3, #6]
 800e5b8:	2b02      	cmp	r3, #2
 800e5ba:	d004      	beq.n	800e5c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e5bc:	6839      	ldr	r1, [r7, #0]
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f8a5 	bl	800e70e <USBD_CtlError>
        break;
 800e5c4:	e01a      	b.n	800e5fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d005      	beq.n	800e5e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	f043 0202 	orr.w	r2, r3, #2
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	330c      	adds	r3, #12
 800e5e6:	2202      	movs	r2, #2
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 f900 	bl	800e7f0 <USBD_CtlSendData>
      break;
 800e5f0:	e004      	b.n	800e5fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f88a 	bl	800e70e <USBD_CtlError>
      break;
 800e5fa:	bf00      	nop
  }
}
 800e5fc:	bf00      	nop
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	885b      	ldrh	r3, [r3, #2]
 800e612:	2b01      	cmp	r3, #1
 800e614:	d107      	bne.n	800e626 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 f940 	bl	800e8a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e624:	e013      	b.n	800e64e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	885b      	ldrh	r3, [r3, #2]
 800e62a:	2b02      	cmp	r3, #2
 800e62c:	d10b      	bne.n	800e646 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	889b      	ldrh	r3, [r3, #4]
 800e632:	0a1b      	lsrs	r3, r3, #8
 800e634:	b29b      	uxth	r3, r3
 800e636:	b2da      	uxtb	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f930 	bl	800e8a4 <USBD_CtlSendStatus>
}
 800e644:	e003      	b.n	800e64e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e646:	6839      	ldr	r1, [r7, #0]
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f860 	bl	800e70e <USBD_CtlError>
}
 800e64e:	bf00      	nop
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b082      	sub	sp, #8
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
 800e65e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e666:	b2db      	uxtb	r3, r3
 800e668:	3b01      	subs	r3, #1
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d80b      	bhi.n	800e686 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	885b      	ldrh	r3, [r3, #2]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d10c      	bne.n	800e690 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f910 	bl	800e8a4 <USBD_CtlSendStatus>
      }
      break;
 800e684:	e004      	b.n	800e690 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e686:	6839      	ldr	r1, [r7, #0]
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f000 f840 	bl	800e70e <USBD_CtlError>
      break;
 800e68e:	e000      	b.n	800e692 <USBD_ClrFeature+0x3c>
      break;
 800e690:	bf00      	nop
  }
}
 800e692:	bf00      	nop
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b084      	sub	sp, #16
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	781a      	ldrb	r2, [r3, #0]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	781a      	ldrb	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	f7ff fa17 	bl	800daf8 <SWAPBYTE>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f7ff fa0a 	bl	800daf8 <SWAPBYTE>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f7ff f9fd 	bl	800daf8 <SWAPBYTE>
 800e6fe:	4603      	mov	r3, r0
 800e700:	461a      	mov	r2, r3
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	80da      	strh	r2, [r3, #6]
}
 800e706:	bf00      	nop
 800e708:	3710      	adds	r7, #16
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e70e:	b580      	push	{r7, lr}
 800e710:	b082      	sub	sp, #8
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
 800e716:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e718:	2180      	movs	r1, #128	; 0x80
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f003 f9b6 	bl	8011a8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e720:	2100      	movs	r1, #0
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f003 f9b2 	bl	8011a8c <USBD_LL_StallEP>
}
 800e728:	bf00      	nop
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e73c:	2300      	movs	r3, #0
 800e73e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d036      	beq.n	800e7b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e74a:	6938      	ldr	r0, [r7, #16]
 800e74c:	f000 f836 	bl	800e7bc <USBD_GetLen>
 800e750:	4603      	mov	r3, r0
 800e752:	3301      	adds	r3, #1
 800e754:	b29b      	uxth	r3, r3
 800e756:	005b      	lsls	r3, r3, #1
 800e758:	b29a      	uxth	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	4413      	add	r3, r2
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	7812      	ldrb	r2, [r2, #0]
 800e768:	701a      	strb	r2, [r3, #0]
  idx++;
 800e76a:	7dfb      	ldrb	r3, [r7, #23]
 800e76c:	3301      	adds	r3, #1
 800e76e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e770:	7dfb      	ldrb	r3, [r7, #23]
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	4413      	add	r3, r2
 800e776:	2203      	movs	r2, #3
 800e778:	701a      	strb	r2, [r3, #0]
  idx++;
 800e77a:	7dfb      	ldrb	r3, [r7, #23]
 800e77c:	3301      	adds	r3, #1
 800e77e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e780:	e013      	b.n	800e7aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e782:	7dfb      	ldrb	r3, [r7, #23]
 800e784:	68ba      	ldr	r2, [r7, #8]
 800e786:	4413      	add	r3, r2
 800e788:	693a      	ldr	r2, [r7, #16]
 800e78a:	7812      	ldrb	r2, [r2, #0]
 800e78c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	3301      	adds	r3, #1
 800e792:	613b      	str	r3, [r7, #16]
    idx++;
 800e794:	7dfb      	ldrb	r3, [r7, #23]
 800e796:	3301      	adds	r3, #1
 800e798:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e79a:	7dfb      	ldrb	r3, [r7, #23]
 800e79c:	68ba      	ldr	r2, [r7, #8]
 800e79e:	4413      	add	r3, r2
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800e7a4:	7dfb      	ldrb	r3, [r7, #23]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1e7      	bne.n	800e782 <USBD_GetString+0x52>
 800e7b2:	e000      	b.n	800e7b6 <USBD_GetString+0x86>
    return;
 800e7b4:	bf00      	nop
  }
}
 800e7b6:	3718      	adds	r7, #24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e7cc:	e005      	b.n	800e7da <USBD_GetLen+0x1e>
  {
    len++;
 800e7ce:	7bfb      	ldrb	r3, [r7, #15]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1f5      	bne.n	800e7ce <USBD_GetLen+0x12>
  }

  return len;
 800e7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3714      	adds	r7, #20
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2202      	movs	r2, #2
 800e800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	68ba      	ldr	r2, [r7, #8]
 800e814:	2100      	movs	r1, #0
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f003 fa06 	bl	8011c28 <USBD_LL_Transmit>

  return USBD_OK;
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	60f8      	str	r0, [r7, #12]
 800e82e:	60b9      	str	r1, [r7, #8]
 800e830:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	2100      	movs	r1, #0
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f003 f9f5 	bl	8011c28 <USBD_LL_Transmit>

  return USBD_OK;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3710      	adds	r7, #16
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2203      	movs	r2, #3
 800e858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	2100      	movs	r1, #0
 800e872:	68f8      	ldr	r0, [r7, #12]
 800e874:	f003 fa10 	bl	8011c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e878:	2300      	movs	r3, #0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b084      	sub	sp, #16
 800e886:	af00      	add	r7, sp, #0
 800e888:	60f8      	str	r0, [r7, #12]
 800e88a:	60b9      	str	r1, [r7, #8]
 800e88c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	2100      	movs	r1, #0
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f003 f9ff 	bl	8011c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3710      	adds	r7, #16
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2204      	movs	r2, #4
 800e8b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f003 f9b4 	bl	8011c28 <USBD_LL_Transmit>

  return USBD_OK;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3708      	adds	r7, #8
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e8ca:	b580      	push	{r7, lr}
 800e8cc:	b082      	sub	sp, #8
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2205      	movs	r2, #5
 800e8d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8da:	2300      	movs	r3, #0
 800e8dc:	2200      	movs	r2, #0
 800e8de:	2100      	movs	r1, #0
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f003 f9d9 	bl	8011c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8e6:	2300      	movs	r3, #0
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3708      	adds	r7, #8
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}

0800e8f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e8fa:	79fb      	ldrb	r3, [r7, #7]
 800e8fc:	4a08      	ldr	r2, [pc, #32]	; (800e920 <disk_status+0x30>)
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4413      	add	r3, r2
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	79fa      	ldrb	r2, [r7, #7]
 800e908:	4905      	ldr	r1, [pc, #20]	; (800e920 <disk_status+0x30>)
 800e90a:	440a      	add	r2, r1
 800e90c:	7a12      	ldrb	r2, [r2, #8]
 800e90e:	4610      	mov	r0, r2
 800e910:	4798      	blx	r3
 800e912:	4603      	mov	r3, r0
 800e914:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e916:	7bfb      	ldrb	r3, [r7, #15]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	20002154 	.word	0x20002154

0800e924 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	4603      	mov	r3, r0
 800e92c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e92e:	2300      	movs	r3, #0
 800e930:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e932:	79fb      	ldrb	r3, [r7, #7]
 800e934:	4a0d      	ldr	r2, [pc, #52]	; (800e96c <disk_initialize+0x48>)
 800e936:	5cd3      	ldrb	r3, [r2, r3]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d111      	bne.n	800e960 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e93c:	79fb      	ldrb	r3, [r7, #7]
 800e93e:	4a0b      	ldr	r2, [pc, #44]	; (800e96c <disk_initialize+0x48>)
 800e940:	2101      	movs	r1, #1
 800e942:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e944:	79fb      	ldrb	r3, [r7, #7]
 800e946:	4a09      	ldr	r2, [pc, #36]	; (800e96c <disk_initialize+0x48>)
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	79fa      	ldrb	r2, [r7, #7]
 800e952:	4906      	ldr	r1, [pc, #24]	; (800e96c <disk_initialize+0x48>)
 800e954:	440a      	add	r2, r1
 800e956:	7a12      	ldrb	r2, [r2, #8]
 800e958:	4610      	mov	r0, r2
 800e95a:	4798      	blx	r3
 800e95c:	4603      	mov	r3, r0
 800e95e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e960:	7bfb      	ldrb	r3, [r7, #15]
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	20002154 	.word	0x20002154

0800e970 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e970:	b590      	push	{r4, r7, lr}
 800e972:	b087      	sub	sp, #28
 800e974:	af00      	add	r7, sp, #0
 800e976:	60b9      	str	r1, [r7, #8]
 800e978:	607a      	str	r2, [r7, #4]
 800e97a:	603b      	str	r3, [r7, #0]
 800e97c:	4603      	mov	r3, r0
 800e97e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e980:	7bfb      	ldrb	r3, [r7, #15]
 800e982:	4a0a      	ldr	r2, [pc, #40]	; (800e9ac <disk_read+0x3c>)
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	4413      	add	r3, r2
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	689c      	ldr	r4, [r3, #8]
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	4a07      	ldr	r2, [pc, #28]	; (800e9ac <disk_read+0x3c>)
 800e990:	4413      	add	r3, r2
 800e992:	7a18      	ldrb	r0, [r3, #8]
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	68b9      	ldr	r1, [r7, #8]
 800e99a:	47a0      	blx	r4
 800e99c:	4603      	mov	r3, r0
 800e99e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	371c      	adds	r7, #28
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd90      	pop	{r4, r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	20002154 	.word	0x20002154

0800e9b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e9b0:	b590      	push	{r4, r7, lr}
 800e9b2:	b087      	sub	sp, #28
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60b9      	str	r1, [r7, #8]
 800e9b8:	607a      	str	r2, [r7, #4]
 800e9ba:	603b      	str	r3, [r7, #0]
 800e9bc:	4603      	mov	r3, r0
 800e9be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e9c0:	7bfb      	ldrb	r3, [r7, #15]
 800e9c2:	4a0a      	ldr	r2, [pc, #40]	; (800e9ec <disk_write+0x3c>)
 800e9c4:	009b      	lsls	r3, r3, #2
 800e9c6:	4413      	add	r3, r2
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	68dc      	ldr	r4, [r3, #12]
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
 800e9ce:	4a07      	ldr	r2, [pc, #28]	; (800e9ec <disk_write+0x3c>)
 800e9d0:	4413      	add	r3, r2
 800e9d2:	7a18      	ldrb	r0, [r3, #8]
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	68b9      	ldr	r1, [r7, #8]
 800e9da:	47a0      	blx	r4
 800e9dc:	4603      	mov	r3, r0
 800e9de:	75fb      	strb	r3, [r7, #23]
  return res;
 800e9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	371c      	adds	r7, #28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd90      	pop	{r4, r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	20002154 	.word	0x20002154

0800e9f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	603a      	str	r2, [r7, #0]
 800e9fa:	71fb      	strb	r3, [r7, #7]
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ea00:	79fb      	ldrb	r3, [r7, #7]
 800ea02:	4a09      	ldr	r2, [pc, #36]	; (800ea28 <disk_ioctl+0x38>)
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	4413      	add	r3, r2
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	691b      	ldr	r3, [r3, #16]
 800ea0c:	79fa      	ldrb	r2, [r7, #7]
 800ea0e:	4906      	ldr	r1, [pc, #24]	; (800ea28 <disk_ioctl+0x38>)
 800ea10:	440a      	add	r2, r1
 800ea12:	7a10      	ldrb	r0, [r2, #8]
 800ea14:	79b9      	ldrb	r1, [r7, #6]
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	4798      	blx	r3
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ea1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20002154 	.word	0x20002154

0800ea2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b085      	sub	sp, #20
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	3301      	adds	r3, #1
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ea3c:	89fb      	ldrh	r3, [r7, #14]
 800ea3e:	021b      	lsls	r3, r3, #8
 800ea40:	b21a      	sxth	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	b21b      	sxth	r3, r3
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	b21b      	sxth	r3, r3
 800ea4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ea4e:	89fb      	ldrh	r3, [r7, #14]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3714      	adds	r7, #20
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	3303      	adds	r3, #3
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	021b      	lsls	r3, r3, #8
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	3202      	adds	r2, #2
 800ea74:	7812      	ldrb	r2, [r2, #0]
 800ea76:	4313      	orrs	r3, r2
 800ea78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	021b      	lsls	r3, r3, #8
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	3201      	adds	r2, #1
 800ea82:	7812      	ldrb	r2, [r2, #0]
 800ea84:	4313      	orrs	r3, r2
 800ea86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	021b      	lsls	r3, r3, #8
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	7812      	ldrb	r2, [r2, #0]
 800ea90:	4313      	orrs	r3, r2
 800ea92:	60fb      	str	r3, [r7, #12]
	return rv;
 800ea94:	68fb      	ldr	r3, [r7, #12]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3714      	adds	r7, #20
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b083      	sub	sp, #12
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	460b      	mov	r3, r1
 800eaac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	1c5a      	adds	r2, r3, #1
 800eab2:	607a      	str	r2, [r7, #4]
 800eab4:	887a      	ldrh	r2, [r7, #2]
 800eab6:	b2d2      	uxtb	r2, r2
 800eab8:	701a      	strb	r2, [r3, #0]
 800eaba:	887b      	ldrh	r3, [r7, #2]
 800eabc:	0a1b      	lsrs	r3, r3, #8
 800eabe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	1c5a      	adds	r2, r3, #1
 800eac4:	607a      	str	r2, [r7, #4]
 800eac6:	887a      	ldrh	r2, [r7, #2]
 800eac8:	b2d2      	uxtb	r2, r2
 800eaca:	701a      	strb	r2, [r3, #0]
}
 800eacc:	bf00      	nop
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	1c5a      	adds	r2, r3, #1
 800eae6:	607a      	str	r2, [r7, #4]
 800eae8:	683a      	ldr	r2, [r7, #0]
 800eaea:	b2d2      	uxtb	r2, r2
 800eaec:	701a      	strb	r2, [r3, #0]
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	0a1b      	lsrs	r3, r3, #8
 800eaf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	1c5a      	adds	r2, r3, #1
 800eaf8:	607a      	str	r2, [r7, #4]
 800eafa:	683a      	ldr	r2, [r7, #0]
 800eafc:	b2d2      	uxtb	r2, r2
 800eafe:	701a      	strb	r2, [r3, #0]
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	0a1b      	lsrs	r3, r3, #8
 800eb04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	1c5a      	adds	r2, r3, #1
 800eb0a:	607a      	str	r2, [r7, #4]
 800eb0c:	683a      	ldr	r2, [r7, #0]
 800eb0e:	b2d2      	uxtb	r2, r2
 800eb10:	701a      	strb	r2, [r3, #0]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	0a1b      	lsrs	r3, r3, #8
 800eb16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	1c5a      	adds	r2, r3, #1
 800eb1c:	607a      	str	r2, [r7, #4]
 800eb1e:	683a      	ldr	r2, [r7, #0]
 800eb20:	b2d2      	uxtb	r2, r2
 800eb22:	701a      	strb	r2, [r3, #0]
}
 800eb24:	bf00      	nop
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eb30:	b480      	push	{r7}
 800eb32:	b087      	sub	sp, #28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00d      	beq.n	800eb66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eb4a:	693a      	ldr	r2, [r7, #16]
 800eb4c:	1c53      	adds	r3, r2, #1
 800eb4e:	613b      	str	r3, [r7, #16]
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	1c59      	adds	r1, r3, #1
 800eb54:	6179      	str	r1, [r7, #20]
 800eb56:	7812      	ldrb	r2, [r2, #0]
 800eb58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	3b01      	subs	r3, #1
 800eb5e:	607b      	str	r3, [r7, #4]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1f1      	bne.n	800eb4a <mem_cpy+0x1a>
	}
}
 800eb66:	bf00      	nop
 800eb68:	371c      	adds	r7, #28
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eb72:	b480      	push	{r7}
 800eb74:	b087      	sub	sp, #28
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	60f8      	str	r0, [r7, #12]
 800eb7a:	60b9      	str	r1, [r7, #8]
 800eb7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	617a      	str	r2, [r7, #20]
 800eb88:	68ba      	ldr	r2, [r7, #8]
 800eb8a:	b2d2      	uxtb	r2, r2
 800eb8c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	607b      	str	r3, [r7, #4]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d1f3      	bne.n	800eb82 <mem_set+0x10>
}
 800eb9a:	bf00      	nop
 800eb9c:	bf00      	nop
 800eb9e:	371c      	adds	r7, #28
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eba8:	b480      	push	{r7}
 800ebaa:	b089      	sub	sp, #36	; 0x24
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	61fb      	str	r3, [r7, #28]
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	1c5a      	adds	r2, r3, #1
 800ebc4:	61fa      	str	r2, [r7, #28]
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	4619      	mov	r1, r3
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	1c5a      	adds	r2, r3, #1
 800ebce:	61ba      	str	r2, [r7, #24]
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	1acb      	subs	r3, r1, r3
 800ebd4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	607b      	str	r3, [r7, #4]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d002      	beq.n	800ebe8 <mem_cmp+0x40>
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d0eb      	beq.n	800ebc0 <mem_cmp+0x18>

	return r;
 800ebe8:	697b      	ldr	r3, [r7, #20]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3724      	adds	r7, #36	; 0x24
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr

0800ebf6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ebf6:	b480      	push	{r7}
 800ebf8:	b083      	sub	sp, #12
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
 800ebfe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ec00:	e002      	b.n	800ec08 <chk_chr+0x12>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	3301      	adds	r3, #1
 800ec06:	607b      	str	r3, [r7, #4]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d005      	beq.n	800ec1c <chk_chr+0x26>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	461a      	mov	r2, r3
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	4293      	cmp	r3, r2
 800ec1a:	d1f2      	bne.n	800ec02 <chk_chr+0xc>
	return *str;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec36:	2300      	movs	r3, #0
 800ec38:	60bb      	str	r3, [r7, #8]
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	60fb      	str	r3, [r7, #12]
 800ec3e:	e029      	b.n	800ec94 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ec40:	4a27      	ldr	r2, [pc, #156]	; (800ece0 <chk_lock+0xb4>)
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	011b      	lsls	r3, r3, #4
 800ec46:	4413      	add	r3, r2
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d01d      	beq.n	800ec8a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec4e:	4a24      	ldr	r2, [pc, #144]	; (800ece0 <chk_lock+0xb4>)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	011b      	lsls	r3, r3, #4
 800ec54:	4413      	add	r3, r2
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d116      	bne.n	800ec8e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ec60:	4a1f      	ldr	r2, [pc, #124]	; (800ece0 <chk_lock+0xb4>)
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	011b      	lsls	r3, r3, #4
 800ec66:	4413      	add	r3, r2
 800ec68:	3304      	adds	r3, #4
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d10c      	bne.n	800ec8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec74:	4a1a      	ldr	r2, [pc, #104]	; (800ece0 <chk_lock+0xb4>)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	011b      	lsls	r3, r3, #4
 800ec7a:	4413      	add	r3, r2
 800ec7c:	3308      	adds	r3, #8
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d102      	bne.n	800ec8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec88:	e007      	b.n	800ec9a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	3301      	adds	r3, #1
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d9d2      	bls.n	800ec40 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d109      	bne.n	800ecb4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d102      	bne.n	800ecac <chk_lock+0x80>
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	2b02      	cmp	r3, #2
 800ecaa:	d101      	bne.n	800ecb0 <chk_lock+0x84>
 800ecac:	2300      	movs	r3, #0
 800ecae:	e010      	b.n	800ecd2 <chk_lock+0xa6>
 800ecb0:	2312      	movs	r3, #18
 800ecb2:	e00e      	b.n	800ecd2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d108      	bne.n	800eccc <chk_lock+0xa0>
 800ecba:	4a09      	ldr	r2, [pc, #36]	; (800ece0 <chk_lock+0xb4>)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	011b      	lsls	r3, r3, #4
 800ecc0:	4413      	add	r3, r2
 800ecc2:	330c      	adds	r3, #12
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecca:	d101      	bne.n	800ecd0 <chk_lock+0xa4>
 800eccc:	2310      	movs	r3, #16
 800ecce:	e000      	b.n	800ecd2 <chk_lock+0xa6>
 800ecd0:	2300      	movs	r3, #0
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3714      	adds	r7, #20
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecdc:	4770      	bx	lr
 800ecde:	bf00      	nop
 800ece0:	20002134 	.word	0x20002134

0800ece4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ecea:	2300      	movs	r3, #0
 800ecec:	607b      	str	r3, [r7, #4]
 800ecee:	e002      	b.n	800ecf6 <enq_lock+0x12>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	607b      	str	r3, [r7, #4]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d806      	bhi.n	800ed0a <enq_lock+0x26>
 800ecfc:	4a09      	ldr	r2, [pc, #36]	; (800ed24 <enq_lock+0x40>)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	011b      	lsls	r3, r3, #4
 800ed02:	4413      	add	r3, r2
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1f2      	bne.n	800ecf0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2b02      	cmp	r3, #2
 800ed0e:	bf14      	ite	ne
 800ed10:	2301      	movne	r3, #1
 800ed12:	2300      	moveq	r3, #0
 800ed14:	b2db      	uxtb	r3, r3
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	370c      	adds	r7, #12
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	20002134 	.word	0x20002134

0800ed28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b085      	sub	sp, #20
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed32:	2300      	movs	r3, #0
 800ed34:	60fb      	str	r3, [r7, #12]
 800ed36:	e01f      	b.n	800ed78 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ed38:	4a41      	ldr	r2, [pc, #260]	; (800ee40 <inc_lock+0x118>)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	011b      	lsls	r3, r3, #4
 800ed3e:	4413      	add	r3, r2
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d113      	bne.n	800ed72 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ed4a:	4a3d      	ldr	r2, [pc, #244]	; (800ee40 <inc_lock+0x118>)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	011b      	lsls	r3, r3, #4
 800ed50:	4413      	add	r3, r2
 800ed52:	3304      	adds	r3, #4
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d109      	bne.n	800ed72 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ed5e:	4a38      	ldr	r2, [pc, #224]	; (800ee40 <inc_lock+0x118>)
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	011b      	lsls	r3, r3, #4
 800ed64:	4413      	add	r3, r2
 800ed66:	3308      	adds	r3, #8
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d006      	beq.n	800ed80 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	3301      	adds	r3, #1
 800ed76:	60fb      	str	r3, [r7, #12]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d9dc      	bls.n	800ed38 <inc_lock+0x10>
 800ed7e:	e000      	b.n	800ed82 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ed80:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d132      	bne.n	800edee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	60fb      	str	r3, [r7, #12]
 800ed8c:	e002      	b.n	800ed94 <inc_lock+0x6c>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	3301      	adds	r3, #1
 800ed92:	60fb      	str	r3, [r7, #12]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d806      	bhi.n	800eda8 <inc_lock+0x80>
 800ed9a:	4a29      	ldr	r2, [pc, #164]	; (800ee40 <inc_lock+0x118>)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	011b      	lsls	r3, r3, #4
 800eda0:	4413      	add	r3, r2
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d1f2      	bne.n	800ed8e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2b02      	cmp	r3, #2
 800edac:	d101      	bne.n	800edb2 <inc_lock+0x8a>
 800edae:	2300      	movs	r3, #0
 800edb0:	e040      	b.n	800ee34 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	4922      	ldr	r1, [pc, #136]	; (800ee40 <inc_lock+0x118>)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	011b      	lsls	r3, r3, #4
 800edbc:	440b      	add	r3, r1
 800edbe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	689a      	ldr	r2, [r3, #8]
 800edc4:	491e      	ldr	r1, [pc, #120]	; (800ee40 <inc_lock+0x118>)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	011b      	lsls	r3, r3, #4
 800edca:	440b      	add	r3, r1
 800edcc:	3304      	adds	r3, #4
 800edce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	695a      	ldr	r2, [r3, #20]
 800edd4:	491a      	ldr	r1, [pc, #104]	; (800ee40 <inc_lock+0x118>)
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	011b      	lsls	r3, r3, #4
 800edda:	440b      	add	r3, r1
 800eddc:	3308      	adds	r3, #8
 800edde:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ede0:	4a17      	ldr	r2, [pc, #92]	; (800ee40 <inc_lock+0x118>)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	011b      	lsls	r3, r3, #4
 800ede6:	4413      	add	r3, r2
 800ede8:	330c      	adds	r3, #12
 800edea:	2200      	movs	r2, #0
 800edec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d009      	beq.n	800ee08 <inc_lock+0xe0>
 800edf4:	4a12      	ldr	r2, [pc, #72]	; (800ee40 <inc_lock+0x118>)
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	011b      	lsls	r3, r3, #4
 800edfa:	4413      	add	r3, r2
 800edfc:	330c      	adds	r3, #12
 800edfe:	881b      	ldrh	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d001      	beq.n	800ee08 <inc_lock+0xe0>
 800ee04:	2300      	movs	r3, #0
 800ee06:	e015      	b.n	800ee34 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d108      	bne.n	800ee20 <inc_lock+0xf8>
 800ee0e:	4a0c      	ldr	r2, [pc, #48]	; (800ee40 <inc_lock+0x118>)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	011b      	lsls	r3, r3, #4
 800ee14:	4413      	add	r3, r2
 800ee16:	330c      	adds	r3, #12
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	e001      	b.n	800ee24 <inc_lock+0xfc>
 800ee20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee24:	4906      	ldr	r1, [pc, #24]	; (800ee40 <inc_lock+0x118>)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	011b      	lsls	r3, r3, #4
 800ee2a:	440b      	add	r3, r1
 800ee2c:	330c      	adds	r3, #12
 800ee2e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	3301      	adds	r3, #1
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3714      	adds	r7, #20
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr
 800ee40:	20002134 	.word	0x20002134

0800ee44 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b085      	sub	sp, #20
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	3b01      	subs	r3, #1
 800ee50:	607b      	str	r3, [r7, #4]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d825      	bhi.n	800eea4 <dec_lock+0x60>
		n = Files[i].ctr;
 800ee58:	4a17      	ldr	r2, [pc, #92]	; (800eeb8 <dec_lock+0x74>)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	011b      	lsls	r3, r3, #4
 800ee5e:	4413      	add	r3, r2
 800ee60:	330c      	adds	r3, #12
 800ee62:	881b      	ldrh	r3, [r3, #0]
 800ee64:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ee66:	89fb      	ldrh	r3, [r7, #14]
 800ee68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee6c:	d101      	bne.n	800ee72 <dec_lock+0x2e>
 800ee6e:	2300      	movs	r3, #0
 800ee70:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ee72:	89fb      	ldrh	r3, [r7, #14]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d002      	beq.n	800ee7e <dec_lock+0x3a>
 800ee78:	89fb      	ldrh	r3, [r7, #14]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ee7e:	4a0e      	ldr	r2, [pc, #56]	; (800eeb8 <dec_lock+0x74>)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	011b      	lsls	r3, r3, #4
 800ee84:	4413      	add	r3, r2
 800ee86:	330c      	adds	r3, #12
 800ee88:	89fa      	ldrh	r2, [r7, #14]
 800ee8a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ee8c:	89fb      	ldrh	r3, [r7, #14]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d105      	bne.n	800ee9e <dec_lock+0x5a>
 800ee92:	4a09      	ldr	r2, [pc, #36]	; (800eeb8 <dec_lock+0x74>)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	011b      	lsls	r3, r3, #4
 800ee98:	4413      	add	r3, r2
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	737b      	strb	r3, [r7, #13]
 800eea2:	e001      	b.n	800eea8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800eea4:	2302      	movs	r3, #2
 800eea6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800eea8:	7b7b      	ldrb	r3, [r7, #13]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3714      	adds	r7, #20
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	20002134 	.word	0x20002134

0800eebc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800eec4:	2300      	movs	r3, #0
 800eec6:	60fb      	str	r3, [r7, #12]
 800eec8:	e010      	b.n	800eeec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800eeca:	4a0d      	ldr	r2, [pc, #52]	; (800ef00 <clear_lock+0x44>)
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	011b      	lsls	r3, r3, #4
 800eed0:	4413      	add	r3, r2
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d105      	bne.n	800eee6 <clear_lock+0x2a>
 800eeda:	4a09      	ldr	r2, [pc, #36]	; (800ef00 <clear_lock+0x44>)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	011b      	lsls	r3, r3, #4
 800eee0:	4413      	add	r3, r2
 800eee2:	2200      	movs	r2, #0
 800eee4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	3301      	adds	r3, #1
 800eeea:	60fb      	str	r3, [r7, #12]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d9eb      	bls.n	800eeca <clear_lock+0xe>
	}
}
 800eef2:	bf00      	nop
 800eef4:	bf00      	nop
 800eef6:	3714      	adds	r7, #20
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	20002134 	.word	0x20002134

0800ef04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b086      	sub	sp, #24
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	78db      	ldrb	r3, [r3, #3]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d034      	beq.n	800ef82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	7858      	ldrb	r0, [r3, #1]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef28:	2301      	movs	r3, #1
 800ef2a:	697a      	ldr	r2, [r7, #20]
 800ef2c:	f7ff fd40 	bl	800e9b0 <disk_write>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d002      	beq.n	800ef3c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ef36:	2301      	movs	r3, #1
 800ef38:	73fb      	strb	r3, [r7, #15]
 800ef3a:	e022      	b.n	800ef82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6a1b      	ldr	r3, [r3, #32]
 800ef46:	697a      	ldr	r2, [r7, #20]
 800ef48:	1ad2      	subs	r2, r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	699b      	ldr	r3, [r3, #24]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d217      	bcs.n	800ef82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	789b      	ldrb	r3, [r3, #2]
 800ef56:	613b      	str	r3, [r7, #16]
 800ef58:	e010      	b.n	800ef7c <sync_window+0x78>
					wsect += fs->fsize;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	699b      	ldr	r3, [r3, #24]
 800ef5e:	697a      	ldr	r2, [r7, #20]
 800ef60:	4413      	add	r3, r2
 800ef62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	7858      	ldrb	r0, [r3, #1]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef6e:	2301      	movs	r3, #1
 800ef70:	697a      	ldr	r2, [r7, #20]
 800ef72:	f7ff fd1d 	bl	800e9b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	613b      	str	r3, [r7, #16]
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d8eb      	bhi.n	800ef5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ef82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3718      	adds	r7, #24
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ef96:	2300      	movs	r3, #0
 800ef98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef9e:	683a      	ldr	r2, [r7, #0]
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d01b      	beq.n	800efdc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f7ff ffad 	bl	800ef04 <sync_window>
 800efaa:	4603      	mov	r3, r0
 800efac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800efae:	7bfb      	ldrb	r3, [r7, #15]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d113      	bne.n	800efdc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	7858      	ldrb	r0, [r3, #1]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efbe:	2301      	movs	r3, #1
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	f7ff fcd5 	bl	800e970 <disk_read>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d004      	beq.n	800efd6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800efcc:	f04f 33ff 	mov.w	r3, #4294967295
 800efd0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800efd2:	2301      	movs	r3, #1
 800efd4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	683a      	ldr	r2, [r7, #0]
 800efda:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800efdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
	...

0800efe8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7ff ff87 	bl	800ef04 <sync_window>
 800eff6:	4603      	mov	r3, r0
 800eff8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800effa:	7bfb      	ldrb	r3, [r7, #15]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d158      	bne.n	800f0b2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	2b03      	cmp	r3, #3
 800f006:	d148      	bne.n	800f09a <sync_fs+0xb2>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	791b      	ldrb	r3, [r3, #4]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d144      	bne.n	800f09a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	3330      	adds	r3, #48	; 0x30
 800f014:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f018:	2100      	movs	r1, #0
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff fda9 	bl	800eb72 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	3330      	adds	r3, #48	; 0x30
 800f024:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f028:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7ff fd38 	bl	800eaa2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	3330      	adds	r3, #48	; 0x30
 800f036:	4921      	ldr	r1, [pc, #132]	; (800f0bc <sync_fs+0xd4>)
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff fd4d 	bl	800ead8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	3330      	adds	r3, #48	; 0x30
 800f042:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f046:	491e      	ldr	r1, [pc, #120]	; (800f0c0 <sync_fs+0xd8>)
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff fd45 	bl	800ead8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	3330      	adds	r3, #48	; 0x30
 800f052:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	691b      	ldr	r3, [r3, #16]
 800f05a:	4619      	mov	r1, r3
 800f05c:	4610      	mov	r0, r2
 800f05e:	f7ff fd3b 	bl	800ead8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	3330      	adds	r3, #48	; 0x30
 800f066:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	4619      	mov	r1, r3
 800f070:	4610      	mov	r0, r2
 800f072:	f7ff fd31 	bl	800ead8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	69db      	ldr	r3, [r3, #28]
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	7858      	ldrb	r0, [r3, #1]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f08e:	2301      	movs	r3, #1
 800f090:	f7ff fc8e 	bl	800e9b0 <disk_write>
			fs->fsi_flag = 0;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	785b      	ldrb	r3, [r3, #1]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7ff fca4 	bl	800e9f0 <disk_ioctl>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d001      	beq.n	800f0b2 <sync_fs+0xca>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3710      	adds	r7, #16
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	41615252 	.word	0x41615252
 800f0c0:	61417272 	.word	0x61417272

0800f0c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	3b02      	subs	r3, #2
 800f0d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	695b      	ldr	r3, [r3, #20]
 800f0d8:	3b02      	subs	r3, #2
 800f0da:	683a      	ldr	r2, [r7, #0]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d301      	bcc.n	800f0e4 <clust2sect+0x20>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e008      	b.n	800f0f6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	895b      	ldrh	r3, [r3, #10]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	fb03 f202 	mul.w	r2, r3, r2
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f4:	4413      	add	r3, r2
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	370c      	adds	r7, #12
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr

0800f102 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f102:	b580      	push	{r7, lr}
 800f104:	b086      	sub	sp, #24
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	2b01      	cmp	r3, #1
 800f116:	d904      	bls.n	800f122 <get_fat+0x20>
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	683a      	ldr	r2, [r7, #0]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d302      	bcc.n	800f128 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f122:	2301      	movs	r3, #1
 800f124:	617b      	str	r3, [r7, #20]
 800f126:	e08f      	b.n	800f248 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f128:	f04f 33ff 	mov.w	r3, #4294967295
 800f12c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	2b03      	cmp	r3, #3
 800f134:	d062      	beq.n	800f1fc <get_fat+0xfa>
 800f136:	2b03      	cmp	r3, #3
 800f138:	dc7c      	bgt.n	800f234 <get_fat+0x132>
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d002      	beq.n	800f144 <get_fat+0x42>
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d042      	beq.n	800f1c8 <get_fat+0xc6>
 800f142:	e077      	b.n	800f234 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	085b      	lsrs	r3, r3, #1
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	4413      	add	r3, r2
 800f150:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	6a1a      	ldr	r2, [r3, #32]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	0a5b      	lsrs	r3, r3, #9
 800f15a:	4413      	add	r3, r2
 800f15c:	4619      	mov	r1, r3
 800f15e:	6938      	ldr	r0, [r7, #16]
 800f160:	f7ff ff14 	bl	800ef8c <move_window>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d167      	bne.n	800f23a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	1c5a      	adds	r2, r3, #1
 800f16e:	60fa      	str	r2, [r7, #12]
 800f170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f174:	693a      	ldr	r2, [r7, #16]
 800f176:	4413      	add	r3, r2
 800f178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f17c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	6a1a      	ldr	r2, [r3, #32]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	0a5b      	lsrs	r3, r3, #9
 800f186:	4413      	add	r3, r2
 800f188:	4619      	mov	r1, r3
 800f18a:	6938      	ldr	r0, [r7, #16]
 800f18c:	f7ff fefe 	bl	800ef8c <move_window>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d153      	bne.n	800f23e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f19c:	693a      	ldr	r2, [r7, #16]
 800f19e:	4413      	add	r3, r2
 800f1a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1a4:	021b      	lsls	r3, r3, #8
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	f003 0301 	and.w	r3, r3, #1
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d002      	beq.n	800f1be <get_fat+0xbc>
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	091b      	lsrs	r3, r3, #4
 800f1bc:	e002      	b.n	800f1c4 <get_fat+0xc2>
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f1c4:	617b      	str	r3, [r7, #20]
			break;
 800f1c6:	e03f      	b.n	800f248 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	6a1a      	ldr	r2, [r3, #32]
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	0a1b      	lsrs	r3, r3, #8
 800f1d0:	4413      	add	r3, r2
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	6938      	ldr	r0, [r7, #16]
 800f1d6:	f7ff fed9 	bl	800ef8c <move_window>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d130      	bne.n	800f242 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	005b      	lsls	r3, r3, #1
 800f1ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f1ee:	4413      	add	r3, r2
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7ff fc1b 	bl	800ea2c <ld_word>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	617b      	str	r3, [r7, #20]
			break;
 800f1fa:	e025      	b.n	800f248 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	6a1a      	ldr	r2, [r3, #32]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	09db      	lsrs	r3, r3, #7
 800f204:	4413      	add	r3, r2
 800f206:	4619      	mov	r1, r3
 800f208:	6938      	ldr	r0, [r7, #16]
 800f20a:	f7ff febf 	bl	800ef8c <move_window>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d118      	bne.n	800f246 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	009b      	lsls	r3, r3, #2
 800f21e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f222:	4413      	add	r3, r2
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff fc19 	bl	800ea5c <ld_dword>
 800f22a:	4603      	mov	r3, r0
 800f22c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f230:	617b      	str	r3, [r7, #20]
			break;
 800f232:	e009      	b.n	800f248 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f234:	2301      	movs	r3, #1
 800f236:	617b      	str	r3, [r7, #20]
 800f238:	e006      	b.n	800f248 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f23a:	bf00      	nop
 800f23c:	e004      	b.n	800f248 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f23e:	bf00      	nop
 800f240:	e002      	b.n	800f248 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f242:	bf00      	nop
 800f244:	e000      	b.n	800f248 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f246:	bf00      	nop
		}
	}

	return val;
 800f248:	697b      	ldr	r3, [r7, #20]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3718      	adds	r7, #24
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f252:	b590      	push	{r4, r7, lr}
 800f254:	b089      	sub	sp, #36	; 0x24
 800f256:	af00      	add	r7, sp, #0
 800f258:	60f8      	str	r0, [r7, #12]
 800f25a:	60b9      	str	r1, [r7, #8]
 800f25c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f25e:	2302      	movs	r3, #2
 800f260:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2b01      	cmp	r3, #1
 800f266:	f240 80d9 	bls.w	800f41c <put_fat+0x1ca>
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	695b      	ldr	r3, [r3, #20]
 800f26e:	68ba      	ldr	r2, [r7, #8]
 800f270:	429a      	cmp	r2, r3
 800f272:	f080 80d3 	bcs.w	800f41c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	2b03      	cmp	r3, #3
 800f27c:	f000 8096 	beq.w	800f3ac <put_fat+0x15a>
 800f280:	2b03      	cmp	r3, #3
 800f282:	f300 80cb 	bgt.w	800f41c <put_fat+0x1ca>
 800f286:	2b01      	cmp	r3, #1
 800f288:	d002      	beq.n	800f290 <put_fat+0x3e>
 800f28a:	2b02      	cmp	r3, #2
 800f28c:	d06e      	beq.n	800f36c <put_fat+0x11a>
 800f28e:	e0c5      	b.n	800f41c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	61bb      	str	r3, [r7, #24]
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	085b      	lsrs	r3, r3, #1
 800f298:	69ba      	ldr	r2, [r7, #24]
 800f29a:	4413      	add	r3, r2
 800f29c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	6a1a      	ldr	r2, [r3, #32]
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	0a5b      	lsrs	r3, r3, #9
 800f2a6:	4413      	add	r3, r2
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7ff fe6e 	bl	800ef8c <move_window>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2b4:	7ffb      	ldrb	r3, [r7, #31]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	f040 80a9 	bne.w	800f40e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	1c59      	adds	r1, r3, #1
 800f2c6:	61b9      	str	r1, [r7, #24]
 800f2c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2cc:	4413      	add	r3, r2
 800f2ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	f003 0301 	and.w	r3, r3, #1
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00d      	beq.n	800f2f6 <put_fat+0xa4>
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	b25b      	sxtb	r3, r3
 800f2e0:	f003 030f 	and.w	r3, r3, #15
 800f2e4:	b25a      	sxtb	r2, r3
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	011b      	lsls	r3, r3, #4
 800f2ec:	b25b      	sxtb	r3, r3
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	b25b      	sxtb	r3, r3
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	e001      	b.n	800f2fa <put_fat+0xa8>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	697a      	ldr	r2, [r7, #20]
 800f2fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2201      	movs	r2, #1
 800f302:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6a1a      	ldr	r2, [r3, #32]
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	0a5b      	lsrs	r3, r3, #9
 800f30c:	4413      	add	r3, r2
 800f30e:	4619      	mov	r1, r3
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f7ff fe3b 	bl	800ef8c <move_window>
 800f316:	4603      	mov	r3, r0
 800f318:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f31a:	7ffb      	ldrb	r3, [r7, #31]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d178      	bne.n	800f412 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f32c:	4413      	add	r3, r2
 800f32e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	f003 0301 	and.w	r3, r3, #1
 800f336:	2b00      	cmp	r3, #0
 800f338:	d003      	beq.n	800f342 <put_fat+0xf0>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	091b      	lsrs	r3, r3, #4
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	e00e      	b.n	800f360 <put_fat+0x10e>
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	b25b      	sxtb	r3, r3
 800f348:	f023 030f 	bic.w	r3, r3, #15
 800f34c:	b25a      	sxtb	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	0a1b      	lsrs	r3, r3, #8
 800f352:	b25b      	sxtb	r3, r3
 800f354:	f003 030f 	and.w	r3, r3, #15
 800f358:	b25b      	sxtb	r3, r3
 800f35a:	4313      	orrs	r3, r2
 800f35c:	b25b      	sxtb	r3, r3
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	697a      	ldr	r2, [r7, #20]
 800f362:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2201      	movs	r2, #1
 800f368:	70da      	strb	r2, [r3, #3]
			break;
 800f36a:	e057      	b.n	800f41c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6a1a      	ldr	r2, [r3, #32]
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	0a1b      	lsrs	r3, r3, #8
 800f374:	4413      	add	r3, r2
 800f376:	4619      	mov	r1, r3
 800f378:	68f8      	ldr	r0, [r7, #12]
 800f37a:	f7ff fe07 	bl	800ef8c <move_window>
 800f37e:	4603      	mov	r3, r0
 800f380:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f382:	7ffb      	ldrb	r3, [r7, #31]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d146      	bne.n	800f416 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f396:	4413      	add	r3, r2
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	b292      	uxth	r2, r2
 800f39c:	4611      	mov	r1, r2
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff fb7f 	bl	800eaa2 <st_word>
			fs->wflag = 1;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	70da      	strb	r2, [r3, #3]
			break;
 800f3aa:	e037      	b.n	800f41c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	6a1a      	ldr	r2, [r3, #32]
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	09db      	lsrs	r3, r3, #7
 800f3b4:	4413      	add	r3, r2
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	68f8      	ldr	r0, [r7, #12]
 800f3ba:	f7ff fde7 	bl	800ef8c <move_window>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f3c2:	7ffb      	ldrb	r3, [r7, #31]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d128      	bne.n	800f41a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f3dc:	4413      	add	r3, r2
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7ff fb3c 	bl	800ea5c <ld_dword>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f3ea:	4323      	orrs	r3, r4
 800f3ec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f3fc:	4413      	add	r3, r2
 800f3fe:	6879      	ldr	r1, [r7, #4]
 800f400:	4618      	mov	r0, r3
 800f402:	f7ff fb69 	bl	800ead8 <st_dword>
			fs->wflag = 1;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2201      	movs	r2, #1
 800f40a:	70da      	strb	r2, [r3, #3]
			break;
 800f40c:	e006      	b.n	800f41c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f40e:	bf00      	nop
 800f410:	e004      	b.n	800f41c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f412:	bf00      	nop
 800f414:	e002      	b.n	800f41c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f416:	bf00      	nop
 800f418:	e000      	b.n	800f41c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f41a:	bf00      	nop
		}
	}
	return res;
 800f41c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3724      	adds	r7, #36	; 0x24
 800f422:	46bd      	mov	sp, r7
 800f424:	bd90      	pop	{r4, r7, pc}

0800f426 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f426:	b580      	push	{r7, lr}
 800f428:	b088      	sub	sp, #32
 800f42a:	af00      	add	r7, sp, #0
 800f42c:	60f8      	str	r0, [r7, #12]
 800f42e:	60b9      	str	r1, [r7, #8]
 800f430:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f432:	2300      	movs	r3, #0
 800f434:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	2b01      	cmp	r3, #1
 800f440:	d904      	bls.n	800f44c <remove_chain+0x26>
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	695b      	ldr	r3, [r3, #20]
 800f446:	68ba      	ldr	r2, [r7, #8]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d301      	bcc.n	800f450 <remove_chain+0x2a>
 800f44c:	2302      	movs	r3, #2
 800f44e:	e04b      	b.n	800f4e8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d00c      	beq.n	800f470 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f456:	f04f 32ff 	mov.w	r2, #4294967295
 800f45a:	6879      	ldr	r1, [r7, #4]
 800f45c:	69b8      	ldr	r0, [r7, #24]
 800f45e:	f7ff fef8 	bl	800f252 <put_fat>
 800f462:	4603      	mov	r3, r0
 800f464:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f466:	7ffb      	ldrb	r3, [r7, #31]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d001      	beq.n	800f470 <remove_chain+0x4a>
 800f46c:	7ffb      	ldrb	r3, [r7, #31]
 800f46e:	e03b      	b.n	800f4e8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f470:	68b9      	ldr	r1, [r7, #8]
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f7ff fe45 	bl	800f102 <get_fat>
 800f478:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d031      	beq.n	800f4e4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	2b01      	cmp	r3, #1
 800f484:	d101      	bne.n	800f48a <remove_chain+0x64>
 800f486:	2302      	movs	r3, #2
 800f488:	e02e      	b.n	800f4e8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f490:	d101      	bne.n	800f496 <remove_chain+0x70>
 800f492:	2301      	movs	r3, #1
 800f494:	e028      	b.n	800f4e8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f496:	2200      	movs	r2, #0
 800f498:	68b9      	ldr	r1, [r7, #8]
 800f49a:	69b8      	ldr	r0, [r7, #24]
 800f49c:	f7ff fed9 	bl	800f252 <put_fat>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f4a4:	7ffb      	ldrb	r3, [r7, #31]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <remove_chain+0x88>
 800f4aa:	7ffb      	ldrb	r3, [r7, #31]
 800f4ac:	e01c      	b.n	800f4e8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	691a      	ldr	r2, [r3, #16]
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	3b02      	subs	r3, #2
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d20b      	bcs.n	800f4d4 <remove_chain+0xae>
			fs->free_clst++;
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	691b      	ldr	r3, [r3, #16]
 800f4c0:	1c5a      	adds	r2, r3, #1
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	791b      	ldrb	r3, [r3, #4]
 800f4ca:	f043 0301 	orr.w	r3, r3, #1
 800f4ce:	b2da      	uxtb	r2, r3
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	695b      	ldr	r3, [r3, #20]
 800f4dc:	68ba      	ldr	r2, [r7, #8]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d3c6      	bcc.n	800f470 <remove_chain+0x4a>
 800f4e2:	e000      	b.n	800f4e6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f4e4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f4e6:	2300      	movs	r3, #0
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3720      	adds	r7, #32
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b088      	sub	sp, #32
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d10d      	bne.n	800f522 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d004      	beq.n	800f51c <create_chain+0x2c>
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	695b      	ldr	r3, [r3, #20]
 800f516:	69ba      	ldr	r2, [r7, #24]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d31b      	bcc.n	800f554 <create_chain+0x64>
 800f51c:	2301      	movs	r3, #1
 800f51e:	61bb      	str	r3, [r7, #24]
 800f520:	e018      	b.n	800f554 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f522:	6839      	ldr	r1, [r7, #0]
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff fdec 	bl	800f102 <get_fat>
 800f52a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d801      	bhi.n	800f536 <create_chain+0x46>
 800f532:	2301      	movs	r3, #1
 800f534:	e070      	b.n	800f618 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f53c:	d101      	bne.n	800f542 <create_chain+0x52>
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	e06a      	b.n	800f618 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	695b      	ldr	r3, [r3, #20]
 800f546:	68fa      	ldr	r2, [r7, #12]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d201      	bcs.n	800f550 <create_chain+0x60>
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	e063      	b.n	800f618 <create_chain+0x128>
		scl = clst;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	3301      	adds	r3, #1
 800f55c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	695b      	ldr	r3, [r3, #20]
 800f562:	69fa      	ldr	r2, [r7, #28]
 800f564:	429a      	cmp	r2, r3
 800f566:	d307      	bcc.n	800f578 <create_chain+0x88>
				ncl = 2;
 800f568:	2302      	movs	r3, #2
 800f56a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f56c:	69fa      	ldr	r2, [r7, #28]
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	429a      	cmp	r2, r3
 800f572:	d901      	bls.n	800f578 <create_chain+0x88>
 800f574:	2300      	movs	r3, #0
 800f576:	e04f      	b.n	800f618 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f578:	69f9      	ldr	r1, [r7, #28]
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7ff fdc1 	bl	800f102 <get_fat>
 800f580:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00e      	beq.n	800f5a6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d003      	beq.n	800f596 <create_chain+0xa6>
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f594:	d101      	bne.n	800f59a <create_chain+0xaa>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	e03e      	b.n	800f618 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f59a:	69fa      	ldr	r2, [r7, #28]
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d1da      	bne.n	800f558 <create_chain+0x68>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	e038      	b.n	800f618 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f5a6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ac:	69f9      	ldr	r1, [r7, #28]
 800f5ae:	6938      	ldr	r0, [r7, #16]
 800f5b0:	f7ff fe4f 	bl	800f252 <put_fat>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f5b8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d109      	bne.n	800f5d2 <create_chain+0xe2>
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d006      	beq.n	800f5d2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f5c4:	69fa      	ldr	r2, [r7, #28]
 800f5c6:	6839      	ldr	r1, [r7, #0]
 800f5c8:	6938      	ldr	r0, [r7, #16]
 800f5ca:	f7ff fe42 	bl	800f252 <put_fat>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f5d2:	7dfb      	ldrb	r3, [r7, #23]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d116      	bne.n	800f606 <create_chain+0x116>
		fs->last_clst = ncl;
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	69fa      	ldr	r2, [r7, #28]
 800f5dc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	691a      	ldr	r2, [r3, #16]
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	695b      	ldr	r3, [r3, #20]
 800f5e6:	3b02      	subs	r3, #2
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d804      	bhi.n	800f5f6 <create_chain+0x106>
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	1e5a      	subs	r2, r3, #1
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	791b      	ldrb	r3, [r3, #4]
 800f5fa:	f043 0301 	orr.w	r3, r3, #1
 800f5fe:	b2da      	uxtb	r2, r3
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	711a      	strb	r2, [r3, #4]
 800f604:	e007      	b.n	800f616 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f606:	7dfb      	ldrb	r3, [r7, #23]
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d102      	bne.n	800f612 <create_chain+0x122>
 800f60c:	f04f 33ff 	mov.w	r3, #4294967295
 800f610:	e000      	b.n	800f614 <create_chain+0x124>
 800f612:	2301      	movs	r3, #1
 800f614:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f616:	69fb      	ldr	r3, [r7, #28]
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3720      	adds	r7, #32
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f620:	b480      	push	{r7}
 800f622:	b087      	sub	sp, #28
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f634:	3304      	adds	r3, #4
 800f636:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	0a5b      	lsrs	r3, r3, #9
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	8952      	ldrh	r2, [r2, #10]
 800f640:	fbb3 f3f2 	udiv	r3, r3, r2
 800f644:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	1d1a      	adds	r2, r3, #4
 800f64a:	613a      	str	r2, [r7, #16]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d101      	bne.n	800f65a <clmt_clust+0x3a>
 800f656:	2300      	movs	r3, #0
 800f658:	e010      	b.n	800f67c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d307      	bcc.n	800f672 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f662:	697a      	ldr	r2, [r7, #20]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	1ad3      	subs	r3, r2, r3
 800f668:	617b      	str	r3, [r7, #20]
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	3304      	adds	r3, #4
 800f66e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f670:	e7e9      	b.n	800f646 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f672:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	4413      	add	r3, r2
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	371c      	adds	r7, #28
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f69e:	d204      	bcs.n	800f6aa <dir_sdi+0x22>
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	f003 031f 	and.w	r3, r3, #31
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d001      	beq.n	800f6ae <dir_sdi+0x26>
		return FR_INT_ERR;
 800f6aa:	2302      	movs	r3, #2
 800f6ac:	e063      	b.n	800f776 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	683a      	ldr	r2, [r7, #0]
 800f6b2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d106      	bne.n	800f6ce <dir_sdi+0x46>
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	2b02      	cmp	r3, #2
 800f6c6:	d902      	bls.n	800f6ce <dir_sdi+0x46>
		clst = fs->dirbase;
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6cc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d10c      	bne.n	800f6ee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	095b      	lsrs	r3, r3, #5
 800f6d8:	693a      	ldr	r2, [r7, #16]
 800f6da:	8912      	ldrh	r2, [r2, #8]
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d301      	bcc.n	800f6e4 <dir_sdi+0x5c>
 800f6e0:	2302      	movs	r3, #2
 800f6e2:	e048      	b.n	800f776 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	61da      	str	r2, [r3, #28]
 800f6ec:	e029      	b.n	800f742 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	895b      	ldrh	r3, [r3, #10]
 800f6f2:	025b      	lsls	r3, r3, #9
 800f6f4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f6f6:	e019      	b.n	800f72c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6979      	ldr	r1, [r7, #20]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7ff fd00 	bl	800f102 <get_fat>
 800f702:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f70a:	d101      	bne.n	800f710 <dir_sdi+0x88>
 800f70c:	2301      	movs	r3, #1
 800f70e:	e032      	b.n	800f776 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d904      	bls.n	800f720 <dir_sdi+0x98>
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	695b      	ldr	r3, [r3, #20]
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d301      	bcc.n	800f724 <dir_sdi+0x9c>
 800f720:	2302      	movs	r3, #2
 800f722:	e028      	b.n	800f776 <dir_sdi+0xee>
			ofs -= csz;
 800f724:	683a      	ldr	r2, [r7, #0]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	1ad3      	subs	r3, r2, r3
 800f72a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f72c:	683a      	ldr	r2, [r7, #0]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	429a      	cmp	r2, r3
 800f732:	d2e1      	bcs.n	800f6f8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f734:	6979      	ldr	r1, [r7, #20]
 800f736:	6938      	ldr	r0, [r7, #16]
 800f738:	f7ff fcc4 	bl	800f0c4 <clust2sect>
 800f73c:	4602      	mov	r2, r0
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	697a      	ldr	r2, [r7, #20]
 800f746:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	69db      	ldr	r3, [r3, #28]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d101      	bne.n	800f754 <dir_sdi+0xcc>
 800f750:	2302      	movs	r3, #2
 800f752:	e010      	b.n	800f776 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	69da      	ldr	r2, [r3, #28]
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	0a5b      	lsrs	r3, r3, #9
 800f75c:	441a      	add	r2, r3
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f76e:	441a      	add	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3718      	adds	r7, #24
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b086      	sub	sp, #24
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	3320      	adds	r3, #32
 800f794:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	69db      	ldr	r3, [r3, #28]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d003      	beq.n	800f7a6 <dir_next+0x28>
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f7a4:	d301      	bcc.n	800f7aa <dir_next+0x2c>
 800f7a6:	2304      	movs	r3, #4
 800f7a8:	e0aa      	b.n	800f900 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f040 8098 	bne.w	800f8e6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	69db      	ldr	r3, [r3, #28]
 800f7ba:	1c5a      	adds	r2, r3, #1
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	699b      	ldr	r3, [r3, #24]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d10b      	bne.n	800f7e0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	095b      	lsrs	r3, r3, #5
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	8912      	ldrh	r2, [r2, #8]
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	f0c0 8088 	bcc.w	800f8e6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	61da      	str	r2, [r3, #28]
 800f7dc:	2304      	movs	r3, #4
 800f7de:	e08f      	b.n	800f900 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	0a5b      	lsrs	r3, r3, #9
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	8952      	ldrh	r2, [r2, #10]
 800f7e8:	3a01      	subs	r2, #1
 800f7ea:	4013      	ands	r3, r2
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d17a      	bne.n	800f8e6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	699b      	ldr	r3, [r3, #24]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	f7ff fc82 	bl	800f102 <get_fat>
 800f7fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d801      	bhi.n	800f80a <dir_next+0x8c>
 800f806:	2302      	movs	r3, #2
 800f808:	e07a      	b.n	800f900 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f810:	d101      	bne.n	800f816 <dir_next+0x98>
 800f812:	2301      	movs	r3, #1
 800f814:	e074      	b.n	800f900 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	695b      	ldr	r3, [r3, #20]
 800f81a:	697a      	ldr	r2, [r7, #20]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d358      	bcc.n	800f8d2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d104      	bne.n	800f830 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2200      	movs	r2, #0
 800f82a:	61da      	str	r2, [r3, #28]
 800f82c:	2304      	movs	r3, #4
 800f82e:	e067      	b.n	800f900 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	699b      	ldr	r3, [r3, #24]
 800f836:	4619      	mov	r1, r3
 800f838:	4610      	mov	r0, r2
 800f83a:	f7ff fe59 	bl	800f4f0 <create_chain>
 800f83e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d101      	bne.n	800f84a <dir_next+0xcc>
 800f846:	2307      	movs	r3, #7
 800f848:	e05a      	b.n	800f900 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d101      	bne.n	800f854 <dir_next+0xd6>
 800f850:	2302      	movs	r3, #2
 800f852:	e055      	b.n	800f900 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f85a:	d101      	bne.n	800f860 <dir_next+0xe2>
 800f85c:	2301      	movs	r3, #1
 800f85e:	e04f      	b.n	800f900 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f7ff fb4f 	bl	800ef04 <sync_window>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d001      	beq.n	800f870 <dir_next+0xf2>
 800f86c:	2301      	movs	r3, #1
 800f86e:	e047      	b.n	800f900 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	3330      	adds	r3, #48	; 0x30
 800f874:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f878:	2100      	movs	r1, #0
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7ff f979 	bl	800eb72 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f880:	2300      	movs	r3, #0
 800f882:	613b      	str	r3, [r7, #16]
 800f884:	6979      	ldr	r1, [r7, #20]
 800f886:	68f8      	ldr	r0, [r7, #12]
 800f888:	f7ff fc1c 	bl	800f0c4 <clust2sect>
 800f88c:	4602      	mov	r2, r0
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	62da      	str	r2, [r3, #44]	; 0x2c
 800f892:	e012      	b.n	800f8ba <dir_next+0x13c>
						fs->wflag = 1;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2201      	movs	r2, #1
 800f898:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f7ff fb32 	bl	800ef04 <sync_window>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d001      	beq.n	800f8aa <dir_next+0x12c>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e02a      	b.n	800f900 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	613b      	str	r3, [r7, #16]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b4:	1c5a      	adds	r2, r3, #1
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	62da      	str	r2, [r3, #44]	; 0x2c
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	895b      	ldrh	r3, [r3, #10]
 800f8be:	461a      	mov	r2, r3
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d3e6      	bcc.n	800f894 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	1ad2      	subs	r2, r2, r3
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	697a      	ldr	r2, [r7, #20]
 800f8d6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f8d8:	6979      	ldr	r1, [r7, #20]
 800f8da:	68f8      	ldr	r0, [r7, #12]
 800f8dc:	f7ff fbf2 	bl	800f0c4 <clust2sect>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	68ba      	ldr	r2, [r7, #8]
 800f8ea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8f8:	441a      	add	r2, r3
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3718      	adds	r7, #24
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b086      	sub	sp, #24
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f918:	2100      	movs	r1, #0
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7ff feb4 	bl	800f688 <dir_sdi>
 800f920:	4603      	mov	r3, r0
 800f922:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f924:	7dfb      	ldrb	r3, [r7, #23]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d12b      	bne.n	800f982 <dir_alloc+0x7a>
		n = 0;
 800f92a:	2300      	movs	r3, #0
 800f92c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	69db      	ldr	r3, [r3, #28]
 800f932:	4619      	mov	r1, r3
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f7ff fb29 	bl	800ef8c <move_window>
 800f93a:	4603      	mov	r3, r0
 800f93c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f93e:	7dfb      	ldrb	r3, [r7, #23]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d11d      	bne.n	800f980 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6a1b      	ldr	r3, [r3, #32]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2be5      	cmp	r3, #229	; 0xe5
 800f94c:	d004      	beq.n	800f958 <dir_alloc+0x50>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d107      	bne.n	800f968 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	3301      	adds	r3, #1
 800f95c:	613b      	str	r3, [r7, #16]
 800f95e:	693a      	ldr	r2, [r7, #16]
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	429a      	cmp	r2, r3
 800f964:	d102      	bne.n	800f96c <dir_alloc+0x64>
 800f966:	e00c      	b.n	800f982 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f968:	2300      	movs	r3, #0
 800f96a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f96c:	2101      	movs	r1, #1
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f7ff ff05 	bl	800f77e <dir_next>
 800f974:	4603      	mov	r3, r0
 800f976:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f978:	7dfb      	ldrb	r3, [r7, #23]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d0d7      	beq.n	800f92e <dir_alloc+0x26>
 800f97e:	e000      	b.n	800f982 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f980:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f982:	7dfb      	ldrb	r3, [r7, #23]
 800f984:	2b04      	cmp	r3, #4
 800f986:	d101      	bne.n	800f98c <dir_alloc+0x84>
 800f988:	2307      	movs	r3, #7
 800f98a:	75fb      	strb	r3, [r7, #23]
	return res;
 800f98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3718      	adds	r7, #24
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}

0800f996 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b084      	sub	sp, #16
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
 800f99e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	331a      	adds	r3, #26
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7ff f841 	bl	800ea2c <ld_word>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	d109      	bne.n	800f9ca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	3314      	adds	r3, #20
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7ff f836 	bl	800ea2c <ld_word>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	041b      	lsls	r3, r3, #16
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3710      	adds	r7, #16
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	331a      	adds	r3, #26
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	b292      	uxth	r2, r2
 800f9e8:	4611      	mov	r1, r2
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7ff f859 	bl	800eaa2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	2b03      	cmp	r3, #3
 800f9f6:	d109      	bne.n	800fa0c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	f103 0214 	add.w	r2, r3, #20
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	0c1b      	lsrs	r3, r3, #16
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	4619      	mov	r1, r3
 800fa06:	4610      	mov	r0, r2
 800fa08:	f7ff f84b 	bl	800eaa2 <st_word>
	}
}
 800fa0c:	bf00      	nop
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b086      	sub	sp, #24
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fa22:	2100      	movs	r1, #0
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f7ff fe2f 	bl	800f688 <dir_sdi>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fa2e:	7dfb      	ldrb	r3, [r7, #23]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <dir_find+0x24>
 800fa34:	7dfb      	ldrb	r3, [r7, #23]
 800fa36:	e03e      	b.n	800fab6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	69db      	ldr	r3, [r3, #28]
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6938      	ldr	r0, [r7, #16]
 800fa40:	f7ff faa4 	bl	800ef8c <move_window>
 800fa44:	4603      	mov	r3, r0
 800fa46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa48:	7dfb      	ldrb	r3, [r7, #23]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d12f      	bne.n	800faae <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6a1b      	ldr	r3, [r3, #32]
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fa56:	7bfb      	ldrb	r3, [r7, #15]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d102      	bne.n	800fa62 <dir_find+0x4e>
 800fa5c:	2304      	movs	r3, #4
 800fa5e:	75fb      	strb	r3, [r7, #23]
 800fa60:	e028      	b.n	800fab4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6a1b      	ldr	r3, [r3, #32]
 800fa66:	330b      	adds	r3, #11
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6a1b      	ldr	r3, [r3, #32]
 800fa78:	330b      	adds	r3, #11
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	f003 0308 	and.w	r3, r3, #8
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d10a      	bne.n	800fa9a <dir_find+0x86>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6a18      	ldr	r0, [r3, #32]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	3324      	adds	r3, #36	; 0x24
 800fa8c:	220b      	movs	r2, #11
 800fa8e:	4619      	mov	r1, r3
 800fa90:	f7ff f88a 	bl	800eba8 <mem_cmp>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00b      	beq.n	800fab2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7ff fe6e 	bl	800f77e <dir_next>
 800faa2:	4603      	mov	r3, r0
 800faa4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800faa6:	7dfb      	ldrb	r3, [r7, #23]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d0c5      	beq.n	800fa38 <dir_find+0x24>
 800faac:	e002      	b.n	800fab4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800faae:	bf00      	nop
 800fab0:	e000      	b.n	800fab4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fab2:	bf00      	nop

	return res;
 800fab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3718      	adds	r7, #24
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b084      	sub	sp, #16
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800facc:	2101      	movs	r1, #1
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f7ff ff1a 	bl	800f908 <dir_alloc>
 800fad4:	4603      	mov	r3, r0
 800fad6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fad8:	7bfb      	ldrb	r3, [r7, #15]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d11c      	bne.n	800fb18 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	69db      	ldr	r3, [r3, #28]
 800fae2:	4619      	mov	r1, r3
 800fae4:	68b8      	ldr	r0, [r7, #8]
 800fae6:	f7ff fa51 	bl	800ef8c <move_window>
 800faea:	4603      	mov	r3, r0
 800faec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800faee:	7bfb      	ldrb	r3, [r7, #15]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d111      	bne.n	800fb18 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6a1b      	ldr	r3, [r3, #32]
 800faf8:	2220      	movs	r2, #32
 800fafa:	2100      	movs	r1, #0
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7ff f838 	bl	800eb72 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6a18      	ldr	r0, [r3, #32]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3324      	adds	r3, #36	; 0x24
 800fb0a:	220b      	movs	r2, #11
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	f7ff f80f 	bl	800eb30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	2201      	movs	r2, #1
 800fb16:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3710      	adds	r7, #16
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
	...

0800fb24 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b088      	sub	sp, #32
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	60fb      	str	r3, [r7, #12]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3324      	adds	r3, #36	; 0x24
 800fb38:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fb3a:	220b      	movs	r2, #11
 800fb3c:	2120      	movs	r1, #32
 800fb3e:	68b8      	ldr	r0, [r7, #8]
 800fb40:	f7ff f817 	bl	800eb72 <mem_set>
	si = i = 0; ni = 8;
 800fb44:	2300      	movs	r3, #0
 800fb46:	613b      	str	r3, [r7, #16]
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	61fb      	str	r3, [r7, #28]
 800fb4c:	2308      	movs	r3, #8
 800fb4e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	1c5a      	adds	r2, r3, #1
 800fb54:	61fa      	str	r2, [r7, #28]
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	4413      	add	r3, r2
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fb5e:	7efb      	ldrb	r3, [r7, #27]
 800fb60:	2b20      	cmp	r3, #32
 800fb62:	d94e      	bls.n	800fc02 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fb64:	7efb      	ldrb	r3, [r7, #27]
 800fb66:	2b2f      	cmp	r3, #47	; 0x2f
 800fb68:	d006      	beq.n	800fb78 <create_name+0x54>
 800fb6a:	7efb      	ldrb	r3, [r7, #27]
 800fb6c:	2b5c      	cmp	r3, #92	; 0x5c
 800fb6e:	d110      	bne.n	800fb92 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fb70:	e002      	b.n	800fb78 <create_name+0x54>
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	3301      	adds	r3, #1
 800fb76:	61fb      	str	r3, [r7, #28]
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	2b2f      	cmp	r3, #47	; 0x2f
 800fb82:	d0f6      	beq.n	800fb72 <create_name+0x4e>
 800fb84:	68fa      	ldr	r2, [r7, #12]
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	4413      	add	r3, r2
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	2b5c      	cmp	r3, #92	; 0x5c
 800fb8e:	d0f0      	beq.n	800fb72 <create_name+0x4e>
			break;
 800fb90:	e038      	b.n	800fc04 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fb92:	7efb      	ldrb	r3, [r7, #27]
 800fb94:	2b2e      	cmp	r3, #46	; 0x2e
 800fb96:	d003      	beq.n	800fba0 <create_name+0x7c>
 800fb98:	693a      	ldr	r2, [r7, #16]
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d30c      	bcc.n	800fbba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	2b0b      	cmp	r3, #11
 800fba4:	d002      	beq.n	800fbac <create_name+0x88>
 800fba6:	7efb      	ldrb	r3, [r7, #27]
 800fba8:	2b2e      	cmp	r3, #46	; 0x2e
 800fbaa:	d001      	beq.n	800fbb0 <create_name+0x8c>
 800fbac:	2306      	movs	r3, #6
 800fbae:	e044      	b.n	800fc3a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	613b      	str	r3, [r7, #16]
 800fbb4:	230b      	movs	r3, #11
 800fbb6:	617b      	str	r3, [r7, #20]
			continue;
 800fbb8:	e022      	b.n	800fc00 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fbba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	da04      	bge.n	800fbcc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fbc2:	7efb      	ldrb	r3, [r7, #27]
 800fbc4:	3b80      	subs	r3, #128	; 0x80
 800fbc6:	4a1f      	ldr	r2, [pc, #124]	; (800fc44 <create_name+0x120>)
 800fbc8:	5cd3      	ldrb	r3, [r2, r3]
 800fbca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fbcc:	7efb      	ldrb	r3, [r7, #27]
 800fbce:	4619      	mov	r1, r3
 800fbd0:	481d      	ldr	r0, [pc, #116]	; (800fc48 <create_name+0x124>)
 800fbd2:	f7ff f810 	bl	800ebf6 <chk_chr>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <create_name+0xbc>
 800fbdc:	2306      	movs	r3, #6
 800fbde:	e02c      	b.n	800fc3a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fbe0:	7efb      	ldrb	r3, [r7, #27]
 800fbe2:	2b60      	cmp	r3, #96	; 0x60
 800fbe4:	d905      	bls.n	800fbf2 <create_name+0xce>
 800fbe6:	7efb      	ldrb	r3, [r7, #27]
 800fbe8:	2b7a      	cmp	r3, #122	; 0x7a
 800fbea:	d802      	bhi.n	800fbf2 <create_name+0xce>
 800fbec:	7efb      	ldrb	r3, [r7, #27]
 800fbee:	3b20      	subs	r3, #32
 800fbf0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	1c5a      	adds	r2, r3, #1
 800fbf6:	613a      	str	r2, [r7, #16]
 800fbf8:	68ba      	ldr	r2, [r7, #8]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	7efa      	ldrb	r2, [r7, #27]
 800fbfe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fc00:	e7a6      	b.n	800fb50 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fc02:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	441a      	add	r2, r3
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <create_name+0xf4>
 800fc14:	2306      	movs	r3, #6
 800fc16:	e010      	b.n	800fc3a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	2be5      	cmp	r3, #229	; 0xe5
 800fc1e:	d102      	bne.n	800fc26 <create_name+0x102>
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	2205      	movs	r2, #5
 800fc24:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fc26:	7efb      	ldrb	r3, [r7, #27]
 800fc28:	2b20      	cmp	r3, #32
 800fc2a:	d801      	bhi.n	800fc30 <create_name+0x10c>
 800fc2c:	2204      	movs	r2, #4
 800fc2e:	e000      	b.n	800fc32 <create_name+0x10e>
 800fc30:	2200      	movs	r2, #0
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	330b      	adds	r3, #11
 800fc36:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fc38:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3720      	adds	r7, #32
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	080168e8 	.word	0x080168e8
 800fc48:	08016600 	.word	0x08016600

0800fc4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b086      	sub	sp, #24
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fc60:	e002      	b.n	800fc68 <follow_path+0x1c>
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	3301      	adds	r3, #1
 800fc66:	603b      	str	r3, [r7, #0]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	2b2f      	cmp	r3, #47	; 0x2f
 800fc6e:	d0f8      	beq.n	800fc62 <follow_path+0x16>
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	2b5c      	cmp	r3, #92	; 0x5c
 800fc76:	d0f4      	beq.n	800fc62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	2b1f      	cmp	r3, #31
 800fc84:	d80a      	bhi.n	800fc9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2280      	movs	r2, #128	; 0x80
 800fc8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fc8e:	2100      	movs	r1, #0
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7ff fcf9 	bl	800f688 <dir_sdi>
 800fc96:	4603      	mov	r3, r0
 800fc98:	75fb      	strb	r3, [r7, #23]
 800fc9a:	e043      	b.n	800fd24 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc9c:	463b      	mov	r3, r7
 800fc9e:	4619      	mov	r1, r3
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7ff ff3f 	bl	800fb24 <create_name>
 800fca6:	4603      	mov	r3, r0
 800fca8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fcaa:	7dfb      	ldrb	r3, [r7, #23]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d134      	bne.n	800fd1a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f7ff feaf 	bl	800fa14 <dir_find>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fcc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fcc2:	7dfb      	ldrb	r3, [r7, #23]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00a      	beq.n	800fcde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fcc8:	7dfb      	ldrb	r3, [r7, #23]
 800fcca:	2b04      	cmp	r3, #4
 800fccc:	d127      	bne.n	800fd1e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fcce:	7afb      	ldrb	r3, [r7, #11]
 800fcd0:	f003 0304 	and.w	r3, r3, #4
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d122      	bne.n	800fd1e <follow_path+0xd2>
 800fcd8:	2305      	movs	r3, #5
 800fcda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fcdc:	e01f      	b.n	800fd1e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fcde:	7afb      	ldrb	r3, [r7, #11]
 800fce0:	f003 0304 	and.w	r3, r3, #4
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d11c      	bne.n	800fd22 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	799b      	ldrb	r3, [r3, #6]
 800fcec:	f003 0310 	and.w	r3, r3, #16
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d102      	bne.n	800fcfa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fcf4:	2305      	movs	r3, #5
 800fcf6:	75fb      	strb	r3, [r7, #23]
 800fcf8:	e014      	b.n	800fd24 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd08:	4413      	add	r3, r2
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f7ff fe42 	bl	800f996 <ld_clust>
 800fd12:	4602      	mov	r2, r0
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fd18:	e7c0      	b.n	800fc9c <follow_path+0x50>
			if (res != FR_OK) break;
 800fd1a:	bf00      	nop
 800fd1c:	e002      	b.n	800fd24 <follow_path+0xd8>
				break;
 800fd1e:	bf00      	nop
 800fd20:	e000      	b.n	800fd24 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fd22:	bf00      	nop
			}
		}
	}

	return res;
 800fd24:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3718      	adds	r7, #24
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fd2e:	b480      	push	{r7}
 800fd30:	b087      	sub	sp, #28
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fd36:	f04f 33ff 	mov.w	r3, #4294967295
 800fd3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d031      	beq.n	800fda8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	617b      	str	r3, [r7, #20]
 800fd4a:	e002      	b.n	800fd52 <get_ldnumber+0x24>
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	3301      	adds	r3, #1
 800fd50:	617b      	str	r3, [r7, #20]
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	2b20      	cmp	r3, #32
 800fd58:	d903      	bls.n	800fd62 <get_ldnumber+0x34>
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	2b3a      	cmp	r3, #58	; 0x3a
 800fd60:	d1f4      	bne.n	800fd4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	2b3a      	cmp	r3, #58	; 0x3a
 800fd68:	d11c      	bne.n	800fda4 <get_ldnumber+0x76>
			tp = *path;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	1c5a      	adds	r2, r3, #1
 800fd74:	60fa      	str	r2, [r7, #12]
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	3b30      	subs	r3, #48	; 0x30
 800fd7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	2b09      	cmp	r3, #9
 800fd80:	d80e      	bhi.n	800fda0 <get_ldnumber+0x72>
 800fd82:	68fa      	ldr	r2, [r7, #12]
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d10a      	bne.n	800fda0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d107      	bne.n	800fda0 <get_ldnumber+0x72>
					vol = (int)i;
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	3301      	adds	r3, #1
 800fd98:	617b      	str	r3, [r7, #20]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	697a      	ldr	r2, [r7, #20]
 800fd9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	e002      	b.n	800fdaa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fda4:	2300      	movs	r3, #0
 800fda6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fda8:	693b      	ldr	r3, [r7, #16]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	371c      	adds	r7, #28
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr
	...

0800fdb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	70da      	strb	r2, [r3, #3]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f04f 32ff 	mov.w	r2, #4294967295
 800fdce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fdd0:	6839      	ldr	r1, [r7, #0]
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f7ff f8da 	bl	800ef8c <move_window>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d001      	beq.n	800fde2 <check_fs+0x2a>
 800fdde:	2304      	movs	r3, #4
 800fde0:	e038      	b.n	800fe54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3330      	adds	r3, #48	; 0x30
 800fde6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe fe1e 	bl	800ea2c <ld_word>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d001      	beq.n	800fe00 <check_fs+0x48>
 800fdfc:	2303      	movs	r3, #3
 800fdfe:	e029      	b.n	800fe54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe06:	2be9      	cmp	r3, #233	; 0xe9
 800fe08:	d009      	beq.n	800fe1e <check_fs+0x66>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe10:	2beb      	cmp	r3, #235	; 0xeb
 800fe12:	d11e      	bne.n	800fe52 <check_fs+0x9a>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fe1a:	2b90      	cmp	r3, #144	; 0x90
 800fe1c:	d119      	bne.n	800fe52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	3330      	adds	r3, #48	; 0x30
 800fe22:	3336      	adds	r3, #54	; 0x36
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7fe fe19 	bl	800ea5c <ld_dword>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fe30:	4a0a      	ldr	r2, [pc, #40]	; (800fe5c <check_fs+0xa4>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d101      	bne.n	800fe3a <check_fs+0x82>
 800fe36:	2300      	movs	r3, #0
 800fe38:	e00c      	b.n	800fe54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	3330      	adds	r3, #48	; 0x30
 800fe3e:	3352      	adds	r3, #82	; 0x52
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7fe fe0b 	bl	800ea5c <ld_dword>
 800fe46:	4603      	mov	r3, r0
 800fe48:	4a05      	ldr	r2, [pc, #20]	; (800fe60 <check_fs+0xa8>)
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d101      	bne.n	800fe52 <check_fs+0x9a>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	e000      	b.n	800fe54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fe52:	2302      	movs	r3, #2
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	00544146 	.word	0x00544146
 800fe60:	33544146 	.word	0x33544146

0800fe64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b096      	sub	sp, #88	; 0x58
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	4613      	mov	r3, r2
 800fe70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	2200      	movs	r2, #0
 800fe76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fe78:	68f8      	ldr	r0, [r7, #12]
 800fe7a:	f7ff ff58 	bl	800fd2e <get_ldnumber>
 800fe7e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	da01      	bge.n	800fe8a <find_volume+0x26>
 800fe86:	230b      	movs	r3, #11
 800fe88:	e22d      	b.n	80102e6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fe8a:	4aa1      	ldr	r2, [pc, #644]	; (8010110 <find_volume+0x2ac>)
 800fe8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fe94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d101      	bne.n	800fe9e <find_volume+0x3a>
 800fe9a:	230c      	movs	r3, #12
 800fe9c:	e223      	b.n	80102e6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fea2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fea4:	79fb      	ldrb	r3, [r7, #7]
 800fea6:	f023 0301 	bic.w	r3, r3, #1
 800feaa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800feac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d01a      	beq.n	800feea <find_volume+0x86>
		stat = disk_status(fs->drv);
 800feb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb6:	785b      	ldrb	r3, [r3, #1]
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe fd19 	bl	800e8f0 <disk_status>
 800febe:	4603      	mov	r3, r0
 800fec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fec4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fec8:	f003 0301 	and.w	r3, r3, #1
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d10c      	bne.n	800feea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fed0:	79fb      	ldrb	r3, [r7, #7]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d007      	beq.n	800fee6 <find_volume+0x82>
 800fed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800feda:	f003 0304 	and.w	r3, r3, #4
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d001      	beq.n	800fee6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fee2:	230a      	movs	r3, #10
 800fee4:	e1ff      	b.n	80102e6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fee6:	2300      	movs	r3, #0
 800fee8:	e1fd      	b.n	80102e6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800feea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feec:	2200      	movs	r2, #0
 800feee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef2:	b2da      	uxtb	r2, r3
 800fef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	785b      	ldrb	r3, [r3, #1]
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7fe fd11 	bl	800e924 <disk_initialize>
 800ff02:	4603      	mov	r3, r0
 800ff04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ff08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff0c:	f003 0301 	and.w	r3, r3, #1
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d001      	beq.n	800ff18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ff14:	2303      	movs	r3, #3
 800ff16:	e1e6      	b.n	80102e6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ff18:	79fb      	ldrb	r3, [r7, #7]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d007      	beq.n	800ff2e <find_volume+0xca>
 800ff1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff22:	f003 0304 	and.w	r3, r3, #4
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d001      	beq.n	800ff2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ff2a:	230a      	movs	r3, #10
 800ff2c:	e1db      	b.n	80102e6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ff32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff36:	f7ff ff3f 	bl	800fdb8 <check_fs>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ff40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	d149      	bne.n	800ffdc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff48:	2300      	movs	r3, #0
 800ff4a:	643b      	str	r3, [r7, #64]	; 0x40
 800ff4c:	e01e      	b.n	800ff8c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ff4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ff54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff56:	011b      	lsls	r3, r3, #4
 800ff58:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ff5c:	4413      	add	r3, r2
 800ff5e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ff60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff62:	3304      	adds	r3, #4
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d006      	beq.n	800ff78 <find_volume+0x114>
 800ff6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff6c:	3308      	adds	r3, #8
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fe fd74 	bl	800ea5c <ld_dword>
 800ff74:	4602      	mov	r2, r0
 800ff76:	e000      	b.n	800ff7a <find_volume+0x116>
 800ff78:	2200      	movs	r2, #0
 800ff7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	3358      	adds	r3, #88	; 0x58
 800ff80:	443b      	add	r3, r7
 800ff82:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff88:	3301      	adds	r3, #1
 800ff8a:	643b      	str	r3, [r7, #64]	; 0x40
 800ff8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff8e:	2b03      	cmp	r3, #3
 800ff90:	d9dd      	bls.n	800ff4e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ff92:	2300      	movs	r3, #0
 800ff94:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ff96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d002      	beq.n	800ffa2 <find_volume+0x13e>
 800ff9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ffa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	3358      	adds	r3, #88	; 0x58
 800ffa8:	443b      	add	r3, r7
 800ffaa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ffae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ffb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d005      	beq.n	800ffc2 <find_volume+0x15e>
 800ffb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ffba:	f7ff fefd 	bl	800fdb8 <check_fs>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	e000      	b.n	800ffc4 <find_volume+0x160>
 800ffc2:	2303      	movs	r3, #3
 800ffc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ffc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d905      	bls.n	800ffdc <find_volume+0x178>
 800ffd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	643b      	str	r3, [r7, #64]	; 0x40
 800ffd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffd8:	2b03      	cmp	r3, #3
 800ffda:	d9e2      	bls.n	800ffa2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ffdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffe0:	2b04      	cmp	r3, #4
 800ffe2:	d101      	bne.n	800ffe8 <find_volume+0x184>
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e17e      	b.n	80102e6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ffe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d901      	bls.n	800fff4 <find_volume+0x190>
 800fff0:	230d      	movs	r3, #13
 800fff2:	e178      	b.n	80102e6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff6:	3330      	adds	r3, #48	; 0x30
 800fff8:	330b      	adds	r3, #11
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fe fd16 	bl	800ea2c <ld_word>
 8010000:	4603      	mov	r3, r0
 8010002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010006:	d001      	beq.n	801000c <find_volume+0x1a8>
 8010008:	230d      	movs	r3, #13
 801000a:	e16c      	b.n	80102e6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801000c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000e:	3330      	adds	r3, #48	; 0x30
 8010010:	3316      	adds	r3, #22
 8010012:	4618      	mov	r0, r3
 8010014:	f7fe fd0a 	bl	800ea2c <ld_word>
 8010018:	4603      	mov	r3, r0
 801001a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801001c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801001e:	2b00      	cmp	r3, #0
 8010020:	d106      	bne.n	8010030 <find_volume+0x1cc>
 8010022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010024:	3330      	adds	r3, #48	; 0x30
 8010026:	3324      	adds	r3, #36	; 0x24
 8010028:	4618      	mov	r0, r3
 801002a:	f7fe fd17 	bl	800ea5c <ld_dword>
 801002e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010034:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010038:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801003c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	789b      	ldrb	r3, [r3, #2]
 8010044:	2b01      	cmp	r3, #1
 8010046:	d005      	beq.n	8010054 <find_volume+0x1f0>
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	789b      	ldrb	r3, [r3, #2]
 801004c:	2b02      	cmp	r3, #2
 801004e:	d001      	beq.n	8010054 <find_volume+0x1f0>
 8010050:	230d      	movs	r3, #13
 8010052:	e148      	b.n	80102e6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010056:	789b      	ldrb	r3, [r3, #2]
 8010058:	461a      	mov	r2, r3
 801005a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801005c:	fb02 f303 	mul.w	r3, r2, r3
 8010060:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010068:	b29a      	uxth	r2, r3
 801006a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801006e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010070:	895b      	ldrh	r3, [r3, #10]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d008      	beq.n	8010088 <find_volume+0x224>
 8010076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010078:	895b      	ldrh	r3, [r3, #10]
 801007a:	461a      	mov	r2, r3
 801007c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007e:	895b      	ldrh	r3, [r3, #10]
 8010080:	3b01      	subs	r3, #1
 8010082:	4013      	ands	r3, r2
 8010084:	2b00      	cmp	r3, #0
 8010086:	d001      	beq.n	801008c <find_volume+0x228>
 8010088:	230d      	movs	r3, #13
 801008a:	e12c      	b.n	80102e6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801008c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008e:	3330      	adds	r3, #48	; 0x30
 8010090:	3311      	adds	r3, #17
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe fcca 	bl	800ea2c <ld_word>
 8010098:	4603      	mov	r3, r0
 801009a:	461a      	mov	r2, r3
 801009c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80100a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a2:	891b      	ldrh	r3, [r3, #8]
 80100a4:	f003 030f 	and.w	r3, r3, #15
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d001      	beq.n	80100b2 <find_volume+0x24e>
 80100ae:	230d      	movs	r3, #13
 80100b0:	e119      	b.n	80102e6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80100b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b4:	3330      	adds	r3, #48	; 0x30
 80100b6:	3313      	adds	r3, #19
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fe fcb7 	bl	800ea2c <ld_word>
 80100be:	4603      	mov	r3, r0
 80100c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80100c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d106      	bne.n	80100d6 <find_volume+0x272>
 80100c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ca:	3330      	adds	r3, #48	; 0x30
 80100cc:	3320      	adds	r3, #32
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fe fcc4 	bl	800ea5c <ld_dword>
 80100d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80100d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d8:	3330      	adds	r3, #48	; 0x30
 80100da:	330e      	adds	r3, #14
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fe fca5 	bl	800ea2c <ld_word>
 80100e2:	4603      	mov	r3, r0
 80100e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80100e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d101      	bne.n	80100f0 <find_volume+0x28c>
 80100ec:	230d      	movs	r3, #13
 80100ee:	e0fa      	b.n	80102e6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80100f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80100f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100f4:	4413      	add	r3, r2
 80100f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100f8:	8912      	ldrh	r2, [r2, #8]
 80100fa:	0912      	lsrs	r2, r2, #4
 80100fc:	b292      	uxth	r2, r2
 80100fe:	4413      	add	r3, r2
 8010100:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010106:	429a      	cmp	r2, r3
 8010108:	d204      	bcs.n	8010114 <find_volume+0x2b0>
 801010a:	230d      	movs	r3, #13
 801010c:	e0eb      	b.n	80102e6 <find_volume+0x482>
 801010e:	bf00      	nop
 8010110:	2000212c 	.word	0x2000212c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801011c:	8952      	ldrh	r2, [r2, #10]
 801011e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010122:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010126:	2b00      	cmp	r3, #0
 8010128:	d101      	bne.n	801012e <find_volume+0x2ca>
 801012a:	230d      	movs	r3, #13
 801012c:	e0db      	b.n	80102e6 <find_volume+0x482>
		fmt = FS_FAT32;
 801012e:	2303      	movs	r3, #3
 8010130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010136:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801013a:	4293      	cmp	r3, r2
 801013c:	d802      	bhi.n	8010144 <find_volume+0x2e0>
 801013e:	2302      	movs	r3, #2
 8010140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010146:	f640 72f5 	movw	r2, #4085	; 0xff5
 801014a:	4293      	cmp	r3, r2
 801014c:	d802      	bhi.n	8010154 <find_volume+0x2f0>
 801014e:	2301      	movs	r3, #1
 8010150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010156:	1c9a      	adds	r2, r3, #2
 8010158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801015c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010160:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010162:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010166:	441a      	add	r2, r3
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801016c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801016e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010170:	441a      	add	r2, r3
 8010172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010174:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8010176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801017a:	2b03      	cmp	r3, #3
 801017c:	d11e      	bne.n	80101bc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801017e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010180:	3330      	adds	r3, #48	; 0x30
 8010182:	332a      	adds	r3, #42	; 0x2a
 8010184:	4618      	mov	r0, r3
 8010186:	f7fe fc51 	bl	800ea2c <ld_word>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <find_volume+0x330>
 8010190:	230d      	movs	r3, #13
 8010192:	e0a8      	b.n	80102e6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010196:	891b      	ldrh	r3, [r3, #8]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d001      	beq.n	80101a0 <find_volume+0x33c>
 801019c:	230d      	movs	r3, #13
 801019e:	e0a2      	b.n	80102e6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80101a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a2:	3330      	adds	r3, #48	; 0x30
 80101a4:	332c      	adds	r3, #44	; 0x2c
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fe fc58 	bl	800ea5c <ld_dword>
 80101ac:	4602      	mov	r2, r0
 80101ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80101b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b4:	695b      	ldr	r3, [r3, #20]
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	647b      	str	r3, [r7, #68]	; 0x44
 80101ba:	e01f      	b.n	80101fc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80101bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101be:	891b      	ldrh	r3, [r3, #8]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d101      	bne.n	80101c8 <find_volume+0x364>
 80101c4:	230d      	movs	r3, #13
 80101c6:	e08e      	b.n	80102e6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80101c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ca:	6a1a      	ldr	r2, [r3, #32]
 80101cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101ce:	441a      	add	r2, r3
 80101d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80101d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101d8:	2b02      	cmp	r3, #2
 80101da:	d103      	bne.n	80101e4 <find_volume+0x380>
 80101dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101de:	695b      	ldr	r3, [r3, #20]
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	e00a      	b.n	80101fa <find_volume+0x396>
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	695a      	ldr	r2, [r3, #20]
 80101e8:	4613      	mov	r3, r2
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	4413      	add	r3, r2
 80101ee:	085a      	lsrs	r2, r3, #1
 80101f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f2:	695b      	ldr	r3, [r3, #20]
 80101f4:	f003 0301 	and.w	r3, r3, #1
 80101f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80101fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80101fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fe:	699a      	ldr	r2, [r3, #24]
 8010200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010202:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010206:	0a5b      	lsrs	r3, r3, #9
 8010208:	429a      	cmp	r2, r3
 801020a:	d201      	bcs.n	8010210 <find_volume+0x3ac>
 801020c:	230d      	movs	r3, #13
 801020e:	e06a      	b.n	80102e6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010212:	f04f 32ff 	mov.w	r2, #4294967295
 8010216:	611a      	str	r2, [r3, #16]
 8010218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021a:	691a      	ldr	r2, [r3, #16]
 801021c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8010220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010222:	2280      	movs	r2, #128	; 0x80
 8010224:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010226:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801022a:	2b03      	cmp	r3, #3
 801022c:	d149      	bne.n	80102c2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801022e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010230:	3330      	adds	r3, #48	; 0x30
 8010232:	3330      	adds	r3, #48	; 0x30
 8010234:	4618      	mov	r0, r3
 8010236:	f7fe fbf9 	bl	800ea2c <ld_word>
 801023a:	4603      	mov	r3, r0
 801023c:	2b01      	cmp	r3, #1
 801023e:	d140      	bne.n	80102c2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010242:	3301      	adds	r3, #1
 8010244:	4619      	mov	r1, r3
 8010246:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010248:	f7fe fea0 	bl	800ef8c <move_window>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d137      	bne.n	80102c2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010254:	2200      	movs	r2, #0
 8010256:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025a:	3330      	adds	r3, #48	; 0x30
 801025c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010260:	4618      	mov	r0, r3
 8010262:	f7fe fbe3 	bl	800ea2c <ld_word>
 8010266:	4603      	mov	r3, r0
 8010268:	461a      	mov	r2, r3
 801026a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801026e:	429a      	cmp	r2, r3
 8010270:	d127      	bne.n	80102c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010274:	3330      	adds	r3, #48	; 0x30
 8010276:	4618      	mov	r0, r3
 8010278:	f7fe fbf0 	bl	800ea5c <ld_dword>
 801027c:	4603      	mov	r3, r0
 801027e:	4a1c      	ldr	r2, [pc, #112]	; (80102f0 <find_volume+0x48c>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d11e      	bne.n	80102c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010286:	3330      	adds	r3, #48	; 0x30
 8010288:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801028c:	4618      	mov	r0, r3
 801028e:	f7fe fbe5 	bl	800ea5c <ld_dword>
 8010292:	4603      	mov	r3, r0
 8010294:	4a17      	ldr	r2, [pc, #92]	; (80102f4 <find_volume+0x490>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d113      	bne.n	80102c2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801029a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029c:	3330      	adds	r3, #48	; 0x30
 801029e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fe fbda 	bl	800ea5c <ld_dword>
 80102a8:	4602      	mov	r2, r0
 80102aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ac:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80102ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b0:	3330      	adds	r3, #48	; 0x30
 80102b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7fe fbd0 	bl	800ea5c <ld_dword>
 80102bc:	4602      	mov	r2, r0
 80102be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80102c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80102c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80102ca:	4b0b      	ldr	r3, [pc, #44]	; (80102f8 <find_volume+0x494>)
 80102cc:	881b      	ldrh	r3, [r3, #0]
 80102ce:	3301      	adds	r3, #1
 80102d0:	b29a      	uxth	r2, r3
 80102d2:	4b09      	ldr	r3, [pc, #36]	; (80102f8 <find_volume+0x494>)
 80102d4:	801a      	strh	r2, [r3, #0]
 80102d6:	4b08      	ldr	r3, [pc, #32]	; (80102f8 <find_volume+0x494>)
 80102d8:	881a      	ldrh	r2, [r3, #0]
 80102da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80102de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102e0:	f7fe fdec 	bl	800eebc <clear_lock>
#endif
	return FR_OK;
 80102e4:	2300      	movs	r3, #0
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3758      	adds	r7, #88	; 0x58
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	41615252 	.word	0x41615252
 80102f4:	61417272 	.word	0x61417272
 80102f8:	20002130 	.word	0x20002130

080102fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b084      	sub	sp, #16
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010306:	2309      	movs	r3, #9
 8010308:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d01c      	beq.n	801034a <validate+0x4e>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d018      	beq.n	801034a <validate+0x4e>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d013      	beq.n	801034a <validate+0x4e>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	889a      	ldrh	r2, [r3, #4]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	88db      	ldrh	r3, [r3, #6]
 801032c:	429a      	cmp	r2, r3
 801032e:	d10c      	bne.n	801034a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	785b      	ldrb	r3, [r3, #1]
 8010336:	4618      	mov	r0, r3
 8010338:	f7fe fada 	bl	800e8f0 <disk_status>
 801033c:	4603      	mov	r3, r0
 801033e:	f003 0301 	and.w	r3, r3, #1
 8010342:	2b00      	cmp	r3, #0
 8010344:	d101      	bne.n	801034a <validate+0x4e>
			res = FR_OK;
 8010346:	2300      	movs	r3, #0
 8010348:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801034a:	7bfb      	ldrb	r3, [r7, #15]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d102      	bne.n	8010356 <validate+0x5a>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	e000      	b.n	8010358 <validate+0x5c>
 8010356:	2300      	movs	r3, #0
 8010358:	683a      	ldr	r2, [r7, #0]
 801035a:	6013      	str	r3, [r2, #0]
	return res;
 801035c:	7bfb      	ldrb	r3, [r7, #15]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
	...

08010368 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b088      	sub	sp, #32
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	4613      	mov	r3, r2
 8010374:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801037a:	f107 0310 	add.w	r3, r7, #16
 801037e:	4618      	mov	r0, r3
 8010380:	f7ff fcd5 	bl	800fd2e <get_ldnumber>
 8010384:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	2b00      	cmp	r3, #0
 801038a:	da01      	bge.n	8010390 <f_mount+0x28>
 801038c:	230b      	movs	r3, #11
 801038e:	e02b      	b.n	80103e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010390:	4a17      	ldr	r2, [pc, #92]	; (80103f0 <f_mount+0x88>)
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010398:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801039a:	69bb      	ldr	r3, [r7, #24]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d005      	beq.n	80103ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80103a0:	69b8      	ldr	r0, [r7, #24]
 80103a2:	f7fe fd8b 	bl	800eebc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	2200      	movs	r2, #0
 80103aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d002      	beq.n	80103b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	490d      	ldr	r1, [pc, #52]	; (80103f0 <f_mount+0x88>)
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d002      	beq.n	80103ce <f_mount+0x66>
 80103c8:	79fb      	ldrb	r3, [r7, #7]
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d001      	beq.n	80103d2 <f_mount+0x6a>
 80103ce:	2300      	movs	r3, #0
 80103d0:	e00a      	b.n	80103e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80103d2:	f107 010c 	add.w	r1, r7, #12
 80103d6:	f107 0308 	add.w	r3, r7, #8
 80103da:	2200      	movs	r2, #0
 80103dc:	4618      	mov	r0, r3
 80103de:	f7ff fd41 	bl	800fe64 <find_volume>
 80103e2:	4603      	mov	r3, r0
 80103e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80103e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3720      	adds	r7, #32
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	2000212c 	.word	0x2000212c

080103f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b098      	sub	sp, #96	; 0x60
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	4613      	mov	r3, r2
 8010400:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d101      	bne.n	801040c <f_open+0x18>
 8010408:	2309      	movs	r3, #9
 801040a:	e1ad      	b.n	8010768 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801040c:	79fb      	ldrb	r3, [r7, #7]
 801040e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010412:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010414:	79fa      	ldrb	r2, [r7, #7]
 8010416:	f107 0110 	add.w	r1, r7, #16
 801041a:	f107 0308 	add.w	r3, r7, #8
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff fd20 	bl	800fe64 <find_volume>
 8010424:	4603      	mov	r3, r0
 8010426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801042a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801042e:	2b00      	cmp	r3, #0
 8010430:	f040 8191 	bne.w	8010756 <f_open+0x362>
		dj.obj.fs = fs;
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010438:	68ba      	ldr	r2, [r7, #8]
 801043a:	f107 0314 	add.w	r3, r7, #20
 801043e:	4611      	mov	r1, r2
 8010440:	4618      	mov	r0, r3
 8010442:	f7ff fc03 	bl	800fc4c <follow_path>
 8010446:	4603      	mov	r3, r0
 8010448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801044c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010450:	2b00      	cmp	r3, #0
 8010452:	d11a      	bne.n	801048a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010454:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010458:	b25b      	sxtb	r3, r3
 801045a:	2b00      	cmp	r3, #0
 801045c:	da03      	bge.n	8010466 <f_open+0x72>
				res = FR_INVALID_NAME;
 801045e:	2306      	movs	r3, #6
 8010460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010464:	e011      	b.n	801048a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010466:	79fb      	ldrb	r3, [r7, #7]
 8010468:	f023 0301 	bic.w	r3, r3, #1
 801046c:	2b00      	cmp	r3, #0
 801046e:	bf14      	ite	ne
 8010470:	2301      	movne	r3, #1
 8010472:	2300      	moveq	r3, #0
 8010474:	b2db      	uxtb	r3, r3
 8010476:	461a      	mov	r2, r3
 8010478:	f107 0314 	add.w	r3, r7, #20
 801047c:	4611      	mov	r1, r2
 801047e:	4618      	mov	r0, r3
 8010480:	f7fe fbd4 	bl	800ec2c <chk_lock>
 8010484:	4603      	mov	r3, r0
 8010486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801048a:	79fb      	ldrb	r3, [r7, #7]
 801048c:	f003 031c 	and.w	r3, r3, #28
 8010490:	2b00      	cmp	r3, #0
 8010492:	d07f      	beq.n	8010594 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010498:	2b00      	cmp	r3, #0
 801049a:	d017      	beq.n	80104cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801049c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104a0:	2b04      	cmp	r3, #4
 80104a2:	d10e      	bne.n	80104c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80104a4:	f7fe fc1e 	bl	800ece4 <enq_lock>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d006      	beq.n	80104bc <f_open+0xc8>
 80104ae:	f107 0314 	add.w	r3, r7, #20
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7ff fb03 	bl	800fabe <dir_register>
 80104b8:	4603      	mov	r3, r0
 80104ba:	e000      	b.n	80104be <f_open+0xca>
 80104bc:	2312      	movs	r3, #18
 80104be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80104c2:	79fb      	ldrb	r3, [r7, #7]
 80104c4:	f043 0308 	orr.w	r3, r3, #8
 80104c8:	71fb      	strb	r3, [r7, #7]
 80104ca:	e010      	b.n	80104ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80104cc:	7ebb      	ldrb	r3, [r7, #26]
 80104ce:	f003 0311 	and.w	r3, r3, #17
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d003      	beq.n	80104de <f_open+0xea>
					res = FR_DENIED;
 80104d6:	2307      	movs	r3, #7
 80104d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80104dc:	e007      	b.n	80104ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80104de:	79fb      	ldrb	r3, [r7, #7]
 80104e0:	f003 0304 	and.w	r3, r3, #4
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d002      	beq.n	80104ee <f_open+0xfa>
 80104e8:	2308      	movs	r3, #8
 80104ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80104ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d168      	bne.n	80105c8 <f_open+0x1d4>
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	f003 0308 	and.w	r3, r3, #8
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d063      	beq.n	80105c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010500:	f7fb ffc4 	bl	800c48c <get_fattime>
 8010504:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010508:	330e      	adds	r3, #14
 801050a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801050c:	4618      	mov	r0, r3
 801050e:	f7fe fae3 	bl	800ead8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010514:	3316      	adds	r3, #22
 8010516:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010518:	4618      	mov	r0, r3
 801051a:	f7fe fadd 	bl	800ead8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801051e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010520:	330b      	adds	r3, #11
 8010522:	2220      	movs	r2, #32
 8010524:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801052a:	4611      	mov	r1, r2
 801052c:	4618      	mov	r0, r3
 801052e:	f7ff fa32 	bl	800f996 <ld_clust>
 8010532:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010538:	2200      	movs	r2, #0
 801053a:	4618      	mov	r0, r3
 801053c:	f7ff fa4a 	bl	800f9d4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010542:	331c      	adds	r3, #28
 8010544:	2100      	movs	r1, #0
 8010546:	4618      	mov	r0, r3
 8010548:	f7fe fac6 	bl	800ead8 <st_dword>
					fs->wflag = 1;
 801054c:	693b      	ldr	r3, [r7, #16]
 801054e:	2201      	movs	r2, #1
 8010550:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010554:	2b00      	cmp	r3, #0
 8010556:	d037      	beq.n	80105c8 <f_open+0x1d4>
						dw = fs->winsect;
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801055c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801055e:	f107 0314 	add.w	r3, r7, #20
 8010562:	2200      	movs	r2, #0
 8010564:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010566:	4618      	mov	r0, r3
 8010568:	f7fe ff5d 	bl	800f426 <remove_chain>
 801056c:	4603      	mov	r3, r0
 801056e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010576:	2b00      	cmp	r3, #0
 8010578:	d126      	bne.n	80105c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe fd04 	bl	800ef8c <move_window>
 8010584:	4603      	mov	r3, r0
 8010586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801058e:	3a01      	subs	r2, #1
 8010590:	60da      	str	r2, [r3, #12]
 8010592:	e019      	b.n	80105c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010598:	2b00      	cmp	r3, #0
 801059a:	d115      	bne.n	80105c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801059c:	7ebb      	ldrb	r3, [r7, #26]
 801059e:	f003 0310 	and.w	r3, r3, #16
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d003      	beq.n	80105ae <f_open+0x1ba>
					res = FR_NO_FILE;
 80105a6:	2304      	movs	r3, #4
 80105a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80105ac:	e00c      	b.n	80105c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80105ae:	79fb      	ldrb	r3, [r7, #7]
 80105b0:	f003 0302 	and.w	r3, r3, #2
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d007      	beq.n	80105c8 <f_open+0x1d4>
 80105b8:	7ebb      	ldrb	r3, [r7, #26]
 80105ba:	f003 0301 	and.w	r3, r3, #1
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d002      	beq.n	80105c8 <f_open+0x1d4>
						res = FR_DENIED;
 80105c2:	2307      	movs	r3, #7
 80105c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80105c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d128      	bne.n	8010622 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80105d0:	79fb      	ldrb	r3, [r7, #7]
 80105d2:	f003 0308 	and.w	r3, r3, #8
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d003      	beq.n	80105e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80105da:	79fb      	ldrb	r3, [r7, #7]
 80105dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80105ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80105f0:	79fb      	ldrb	r3, [r7, #7]
 80105f2:	f023 0301 	bic.w	r3, r3, #1
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	bf14      	ite	ne
 80105fa:	2301      	movne	r3, #1
 80105fc:	2300      	moveq	r3, #0
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	461a      	mov	r2, r3
 8010602:	f107 0314 	add.w	r3, r7, #20
 8010606:	4611      	mov	r1, r2
 8010608:	4618      	mov	r0, r3
 801060a:	f7fe fb8d 	bl	800ed28 <inc_lock>
 801060e:	4602      	mov	r2, r0
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	691b      	ldr	r3, [r3, #16]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d102      	bne.n	8010622 <f_open+0x22e>
 801061c:	2302      	movs	r3, #2
 801061e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010626:	2b00      	cmp	r3, #0
 8010628:	f040 8095 	bne.w	8010756 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010630:	4611      	mov	r1, r2
 8010632:	4618      	mov	r0, r3
 8010634:	f7ff f9af 	bl	800f996 <ld_clust>
 8010638:	4602      	mov	r2, r0
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801063e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010640:	331c      	adds	r3, #28
 8010642:	4618      	mov	r0, r3
 8010644:	f7fe fa0a 	bl	800ea5c <ld_dword>
 8010648:	4602      	mov	r2, r0
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2200      	movs	r2, #0
 8010652:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010654:	693a      	ldr	r2, [r7, #16]
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	88da      	ldrh	r2, [r3, #6]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	79fa      	ldrb	r2, [r7, #7]
 8010666:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2200      	movs	r2, #0
 801066c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	2200      	movs	r2, #0
 8010672:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	2200      	movs	r2, #0
 8010678:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	3330      	adds	r3, #48	; 0x30
 801067e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010682:	2100      	movs	r1, #0
 8010684:	4618      	mov	r0, r3
 8010686:	f7fe fa74 	bl	800eb72 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801068a:	79fb      	ldrb	r3, [r7, #7]
 801068c:	f003 0320 	and.w	r3, r3, #32
 8010690:	2b00      	cmp	r3, #0
 8010692:	d060      	beq.n	8010756 <f_open+0x362>
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d05c      	beq.n	8010756 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	68da      	ldr	r2, [r3, #12]
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	895b      	ldrh	r3, [r3, #10]
 80106a8:	025b      	lsls	r3, r3, #9
 80106aa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	689b      	ldr	r3, [r3, #8]
 80106b0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	68db      	ldr	r3, [r3, #12]
 80106b6:	657b      	str	r3, [r7, #84]	; 0x54
 80106b8:	e016      	b.n	80106e8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fe fd1f 	bl	800f102 <get_fat>
 80106c4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80106c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d802      	bhi.n	80106d2 <f_open+0x2de>
 80106cc:	2302      	movs	r3, #2
 80106ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80106d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80106d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d8:	d102      	bne.n	80106e0 <f_open+0x2ec>
 80106da:	2301      	movs	r3, #1
 80106dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80106e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	657b      	str	r3, [r7, #84]	; 0x54
 80106e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d103      	bne.n	80106f8 <f_open+0x304>
 80106f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d8e0      	bhi.n	80106ba <f_open+0x2c6>
				}
				fp->clust = clst;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80106fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010702:	2b00      	cmp	r3, #0
 8010704:	d127      	bne.n	8010756 <f_open+0x362>
 8010706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801070c:	2b00      	cmp	r3, #0
 801070e:	d022      	beq.n	8010756 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010714:	4618      	mov	r0, r3
 8010716:	f7fe fcd5 	bl	800f0c4 <clust2sect>
 801071a:	6478      	str	r0, [r7, #68]	; 0x44
 801071c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801071e:	2b00      	cmp	r3, #0
 8010720:	d103      	bne.n	801072a <f_open+0x336>
						res = FR_INT_ERR;
 8010722:	2302      	movs	r3, #2
 8010724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010728:	e015      	b.n	8010756 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801072a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801072c:	0a5a      	lsrs	r2, r3, #9
 801072e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010730:	441a      	add	r2, r3
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	7858      	ldrb	r0, [r3, #1]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	6a1a      	ldr	r2, [r3, #32]
 8010744:	2301      	movs	r3, #1
 8010746:	f7fe f913 	bl	800e970 <disk_read>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d002      	beq.n	8010756 <f_open+0x362>
 8010750:	2301      	movs	r3, #1
 8010752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801075a:	2b00      	cmp	r3, #0
 801075c:	d002      	beq.n	8010764 <f_open+0x370>
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2200      	movs	r2, #0
 8010762:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010764:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010768:	4618      	mov	r0, r3
 801076a:	3760      	adds	r7, #96	; 0x60
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b08c      	sub	sp, #48	; 0x30
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]
 801077c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	2200      	movs	r2, #0
 8010786:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f107 0210 	add.w	r2, r7, #16
 801078e:	4611      	mov	r1, r2
 8010790:	4618      	mov	r0, r3
 8010792:	f7ff fdb3 	bl	80102fc <validate>
 8010796:	4603      	mov	r3, r0
 8010798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801079c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d107      	bne.n	80107b4 <f_write+0x44>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	7d5b      	ldrb	r3, [r3, #21]
 80107a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80107ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d002      	beq.n	80107ba <f_write+0x4a>
 80107b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107b8:	e14b      	b.n	8010a52 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	7d1b      	ldrb	r3, [r3, #20]
 80107be:	f003 0302 	and.w	r3, r3, #2
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d101      	bne.n	80107ca <f_write+0x5a>
 80107c6:	2307      	movs	r3, #7
 80107c8:	e143      	b.n	8010a52 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	699a      	ldr	r2, [r3, #24]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	441a      	add	r2, r3
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	f080 812d 	bcs.w	8010a36 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	699b      	ldr	r3, [r3, #24]
 80107e0:	43db      	mvns	r3, r3
 80107e2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80107e4:	e127      	b.n	8010a36 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	699b      	ldr	r3, [r3, #24]
 80107ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	f040 80e3 	bne.w	80109ba <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	699b      	ldr	r3, [r3, #24]
 80107f8:	0a5b      	lsrs	r3, r3, #9
 80107fa:	693a      	ldr	r2, [r7, #16]
 80107fc:	8952      	ldrh	r2, [r2, #10]
 80107fe:	3a01      	subs	r2, #1
 8010800:	4013      	ands	r3, r2
 8010802:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010804:	69bb      	ldr	r3, [r7, #24]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d143      	bne.n	8010892 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	699b      	ldr	r3, [r3, #24]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d10c      	bne.n	801082c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	689b      	ldr	r3, [r3, #8]
 8010816:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081a:	2b00      	cmp	r3, #0
 801081c:	d11a      	bne.n	8010854 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2100      	movs	r1, #0
 8010822:	4618      	mov	r0, r3
 8010824:	f7fe fe64 	bl	800f4f0 <create_chain>
 8010828:	62b8      	str	r0, [r7, #40]	; 0x28
 801082a:	e013      	b.n	8010854 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010830:	2b00      	cmp	r3, #0
 8010832:	d007      	beq.n	8010844 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	699b      	ldr	r3, [r3, #24]
 8010838:	4619      	mov	r1, r3
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f7fe fef0 	bl	800f620 <clmt_clust>
 8010840:	62b8      	str	r0, [r7, #40]	; 0x28
 8010842:	e007      	b.n	8010854 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	69db      	ldr	r3, [r3, #28]
 801084a:	4619      	mov	r1, r3
 801084c:	4610      	mov	r0, r2
 801084e:	f7fe fe4f 	bl	800f4f0 <create_chain>
 8010852:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 80f2 	beq.w	8010a40 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801085e:	2b01      	cmp	r3, #1
 8010860:	d104      	bne.n	801086c <f_write+0xfc>
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2202      	movs	r2, #2
 8010866:	755a      	strb	r2, [r3, #21]
 8010868:	2302      	movs	r3, #2
 801086a:	e0f2      	b.n	8010a52 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010872:	d104      	bne.n	801087e <f_write+0x10e>
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	2201      	movs	r2, #1
 8010878:	755a      	strb	r2, [r3, #21]
 801087a:	2301      	movs	r3, #1
 801087c:	e0e9      	b.n	8010a52 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010882:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	689b      	ldr	r3, [r3, #8]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d102      	bne.n	8010892 <f_write+0x122>
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010890:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	7d1b      	ldrb	r3, [r3, #20]
 8010896:	b25b      	sxtb	r3, r3
 8010898:	2b00      	cmp	r3, #0
 801089a:	da18      	bge.n	80108ce <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	7858      	ldrb	r0, [r3, #1]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	6a1a      	ldr	r2, [r3, #32]
 80108aa:	2301      	movs	r3, #1
 80108ac:	f7fe f880 	bl	800e9b0 <disk_write>
 80108b0:	4603      	mov	r3, r0
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d004      	beq.n	80108c0 <f_write+0x150>
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2201      	movs	r2, #1
 80108ba:	755a      	strb	r2, [r3, #21]
 80108bc:	2301      	movs	r3, #1
 80108be:	e0c8      	b.n	8010a52 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	7d1b      	ldrb	r3, [r3, #20]
 80108c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108c8:	b2da      	uxtb	r2, r3
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80108ce:	693a      	ldr	r2, [r7, #16]
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	69db      	ldr	r3, [r3, #28]
 80108d4:	4619      	mov	r1, r3
 80108d6:	4610      	mov	r0, r2
 80108d8:	f7fe fbf4 	bl	800f0c4 <clust2sect>
 80108dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d104      	bne.n	80108ee <f_write+0x17e>
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	2202      	movs	r2, #2
 80108e8:	755a      	strb	r2, [r3, #21]
 80108ea:	2302      	movs	r3, #2
 80108ec:	e0b1      	b.n	8010a52 <f_write+0x2e2>
			sect += csect;
 80108ee:	697a      	ldr	r2, [r7, #20]
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	4413      	add	r3, r2
 80108f4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	0a5b      	lsrs	r3, r3, #9
 80108fa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d03c      	beq.n	801097c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010902:	69ba      	ldr	r2, [r7, #24]
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	4413      	add	r3, r2
 8010908:	693a      	ldr	r2, [r7, #16]
 801090a:	8952      	ldrh	r2, [r2, #10]
 801090c:	4293      	cmp	r3, r2
 801090e:	d905      	bls.n	801091c <f_write+0x1ac>
					cc = fs->csize - csect;
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	895b      	ldrh	r3, [r3, #10]
 8010914:	461a      	mov	r2, r3
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	7858      	ldrb	r0, [r3, #1]
 8010920:	6a3b      	ldr	r3, [r7, #32]
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	69f9      	ldr	r1, [r7, #28]
 8010926:	f7fe f843 	bl	800e9b0 <disk_write>
 801092a:	4603      	mov	r3, r0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d004      	beq.n	801093a <f_write+0x1ca>
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2201      	movs	r2, #1
 8010934:	755a      	strb	r2, [r3, #21]
 8010936:	2301      	movs	r3, #1
 8010938:	e08b      	b.n	8010a52 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6a1a      	ldr	r2, [r3, #32]
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	1ad3      	subs	r3, r2, r3
 8010942:	6a3a      	ldr	r2, [r7, #32]
 8010944:	429a      	cmp	r2, r3
 8010946:	d915      	bls.n	8010974 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	6a1a      	ldr	r2, [r3, #32]
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	025b      	lsls	r3, r3, #9
 8010958:	69fa      	ldr	r2, [r7, #28]
 801095a:	4413      	add	r3, r2
 801095c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010960:	4619      	mov	r1, r3
 8010962:	f7fe f8e5 	bl	800eb30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	7d1b      	ldrb	r3, [r3, #20]
 801096a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801096e:	b2da      	uxtb	r2, r3
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010974:	6a3b      	ldr	r3, [r7, #32]
 8010976:	025b      	lsls	r3, r3, #9
 8010978:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801097a:	e03f      	b.n	80109fc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	6a1b      	ldr	r3, [r3, #32]
 8010980:	697a      	ldr	r2, [r7, #20]
 8010982:	429a      	cmp	r2, r3
 8010984:	d016      	beq.n	80109b4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	699a      	ldr	r2, [r3, #24]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801098e:	429a      	cmp	r2, r3
 8010990:	d210      	bcs.n	80109b4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	7858      	ldrb	r0, [r3, #1]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801099c:	2301      	movs	r3, #1
 801099e:	697a      	ldr	r2, [r7, #20]
 80109a0:	f7fd ffe6 	bl	800e970 <disk_read>
 80109a4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d004      	beq.n	80109b4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2201      	movs	r2, #1
 80109ae:	755a      	strb	r2, [r3, #21]
 80109b0:	2301      	movs	r3, #1
 80109b2:	e04e      	b.n	8010a52 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	697a      	ldr	r2, [r7, #20]
 80109b8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	699b      	ldr	r3, [r3, #24]
 80109be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80109c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80109c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d901      	bls.n	80109d4 <f_write+0x264>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	699b      	ldr	r3, [r3, #24]
 80109de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109e2:	4413      	add	r3, r2
 80109e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109e6:	69f9      	ldr	r1, [r7, #28]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fe f8a1 	bl	800eb30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	7d1b      	ldrb	r3, [r3, #20]
 80109f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80109f6:	b2da      	uxtb	r2, r3
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80109fc:	69fa      	ldr	r2, [r7, #28]
 80109fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a00:	4413      	add	r3, r2
 8010a02:	61fb      	str	r3, [r7, #28]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	699a      	ldr	r2, [r3, #24]
 8010a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0a:	441a      	add	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	619a      	str	r2, [r3, #24]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	68da      	ldr	r2, [r3, #12]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	699b      	ldr	r3, [r3, #24]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	bf38      	it	cc
 8010a1c:	461a      	movcc	r2, r3
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	60da      	str	r2, [r3, #12]
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	681a      	ldr	r2, [r3, #0]
 8010a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a28:	441a      	add	r2, r3
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	601a      	str	r2, [r3, #0]
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a32:	1ad3      	subs	r3, r2, r3
 8010a34:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	f47f aed4 	bne.w	80107e6 <f_write+0x76>
 8010a3e:	e000      	b.n	8010a42 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010a40:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	7d1b      	ldrb	r3, [r3, #20]
 8010a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a4a:	b2da      	uxtb	r2, r3
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010a50:	2300      	movs	r3, #0
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3730      	adds	r7, #48	; 0x30
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b086      	sub	sp, #24
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f107 0208 	add.w	r2, r7, #8
 8010a68:	4611      	mov	r1, r2
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7ff fc46 	bl	80102fc <validate>
 8010a70:	4603      	mov	r3, r0
 8010a72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010a74:	7dfb      	ldrb	r3, [r7, #23]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d168      	bne.n	8010b4c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	7d1b      	ldrb	r3, [r3, #20]
 8010a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d062      	beq.n	8010b4c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	7d1b      	ldrb	r3, [r3, #20]
 8010a8a:	b25b      	sxtb	r3, r3
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	da15      	bge.n	8010abc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	7858      	ldrb	r0, [r3, #1]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a1a      	ldr	r2, [r3, #32]
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	f7fd ff86 	bl	800e9b0 <disk_write>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d001      	beq.n	8010aae <f_sync+0x54>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e04f      	b.n	8010b4e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	7d1b      	ldrb	r3, [r3, #20]
 8010ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ab6:	b2da      	uxtb	r2, r3
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010abc:	f7fb fce6 	bl	800c48c <get_fattime>
 8010ac0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010ac2:	68ba      	ldr	r2, [r7, #8]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac8:	4619      	mov	r1, r3
 8010aca:	4610      	mov	r0, r2
 8010acc:	f7fe fa5e 	bl	800ef8c <move_window>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010ad4:	7dfb      	ldrb	r3, [r7, #23]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d138      	bne.n	8010b4c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ade:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	330b      	adds	r3, #11
 8010ae4:	781a      	ldrb	r2, [r3, #0]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	330b      	adds	r3, #11
 8010aea:	f042 0220 	orr.w	r2, r2, #32
 8010aee:	b2d2      	uxtb	r2, r2
 8010af0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6818      	ldr	r0, [r3, #0]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	689b      	ldr	r3, [r3, #8]
 8010afa:	461a      	mov	r2, r3
 8010afc:	68f9      	ldr	r1, [r7, #12]
 8010afe:	f7fe ff69 	bl	800f9d4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f103 021c 	add.w	r2, r3, #28
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	68db      	ldr	r3, [r3, #12]
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	4610      	mov	r0, r2
 8010b10:	f7fd ffe2 	bl	800ead8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	3316      	adds	r3, #22
 8010b18:	6939      	ldr	r1, [r7, #16]
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7fd ffdc 	bl	800ead8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	3312      	adds	r3, #18
 8010b24:	2100      	movs	r1, #0
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fd ffbb 	bl	800eaa2 <st_word>
					fs->wflag = 1;
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7fe fa57 	bl	800efe8 <sync_fs>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	7d1b      	ldrb	r3, [r3, #20]
 8010b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b46:	b2da      	uxtb	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3718      	adds	r7, #24
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b084      	sub	sp, #16
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7ff ff7b 	bl	8010a5a <f_sync>
 8010b64:	4603      	mov	r3, r0
 8010b66:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010b68:	7bfb      	ldrb	r3, [r7, #15]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d118      	bne.n	8010ba0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f107 0208 	add.w	r2, r7, #8
 8010b74:	4611      	mov	r1, r2
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7ff fbc0 	bl	80102fc <validate>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d10c      	bne.n	8010ba0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	691b      	ldr	r3, [r3, #16]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7fe f95a 	bl	800ee44 <dec_lock>
 8010b90:	4603      	mov	r3, r0
 8010b92:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010b94:	7bfb      	ldrb	r3, [r7, #15]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d102      	bne.n	8010ba0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b084      	sub	sp, #16
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8010bb6:	78fb      	ldrb	r3, [r7, #3]
 8010bb8:	2b0a      	cmp	r3, #10
 8010bba:	d103      	bne.n	8010bc4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010bbc:	210d      	movs	r1, #13
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f7ff fff3 	bl	8010baa <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	db25      	blt.n	8010c1c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	1c5a      	adds	r2, r3, #1
 8010bd4:	60fa      	str	r2, [r7, #12]
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	4413      	add	r3, r2
 8010bda:	78fa      	ldrb	r2, [r7, #3]
 8010bdc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2b3c      	cmp	r3, #60	; 0x3c
 8010be2:	dd12      	ble.n	8010c0a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6818      	ldr	r0, [r3, #0]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f103 010c 	add.w	r1, r3, #12
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	f107 0308 	add.w	r3, r7, #8
 8010bf4:	f7ff fdbc 	bl	8010770 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010bf8:	68ba      	ldr	r2, [r7, #8]
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d101      	bne.n	8010c04 <putc_bfd+0x5a>
 8010c00:	2300      	movs	r3, #0
 8010c02:	e001      	b.n	8010c08 <putc_bfd+0x5e>
 8010c04:	f04f 33ff 	mov.w	r3, #4294967295
 8010c08:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	68fa      	ldr	r2, [r7, #12]
 8010c0e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	689b      	ldr	r3, [r3, #8]
 8010c14:	1c5a      	adds	r2, r3, #1
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	609a      	str	r2, [r3, #8]
 8010c1a:	e000      	b.n	8010c1e <putc_bfd+0x74>
	if (i < 0) return;
 8010c1c:	bf00      	nop
}
 8010c1e:	3710      	adds	r7, #16
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	db16      	blt.n	8010c62 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6818      	ldr	r0, [r3, #0]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f103 010c 	add.w	r1, r3, #12
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	461a      	mov	r2, r3
 8010c44:	f107 030c 	add.w	r3, r7, #12
 8010c48:	f7ff fd92 	bl	8010770 <f_write>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d107      	bne.n	8010c62 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	68fa      	ldr	r2, [r7, #12]
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d102      	bne.n	8010c62 <putc_flush+0x3e>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	689b      	ldr	r3, [r3, #8]
 8010c60:	e001      	b.n	8010c66 <putc_flush+0x42>
	return EOF;
 8010c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3710      	adds	r7, #16
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010c6e:	b480      	push	{r7}
 8010c70:	b083      	sub	sp, #12
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
 8010c76:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	683a      	ldr	r2, [r7, #0]
 8010c7c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2200      	movs	r2, #0
 8010c82:	605a      	str	r2, [r3, #4]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	685a      	ldr	r2, [r3, #4]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	609a      	str	r2, [r3, #8]
}
 8010c8c:	bf00      	nop
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8010c98:	b40e      	push	{r1, r2, r3}
 8010c9a:	b580      	push	{r7, lr}
 8010c9c:	b0a7      	sub	sp, #156	; 0x9c
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8010ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ca6:	6879      	ldr	r1, [r7, #4]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7ff ffe0 	bl	8010c6e <putc_init>

	va_start(arp, fmt);
 8010cae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010cb2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8010cb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cb8:	1c5a      	adds	r2, r3, #1
 8010cba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8010cc4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f000 81f2 	beq.w	80110b2 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 8010cce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010cd2:	2b25      	cmp	r3, #37	; 0x25
 8010cd4:	d008      	beq.n	8010ce8 <f_printf+0x50>
			putc_bfd(&pb, c);
 8010cd6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8010cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010cde:	4611      	mov	r1, r2
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7ff ff62 	bl	8010baa <putc_bfd>
			continue;
 8010ce6:	e1e3      	b.n	80110b0 <f_printf+0x418>
		}
		w = f = 0;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010cee:	2300      	movs	r3, #0
 8010cf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8010cf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cf8:	1c5a      	adds	r2, r3, #1
 8010cfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8010d04:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d08:	2b30      	cmp	r3, #48	; 0x30
 8010d0a:	d10b      	bne.n	8010d24 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010d12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010d16:	1c5a      	adds	r2, r3, #1
 8010d18:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8010d22:	e024      	b.n	8010d6e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8010d24:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d28:	2b2d      	cmp	r3, #45	; 0x2d
 8010d2a:	d120      	bne.n	8010d6e <f_printf+0xd6>
				f = 2; c = *fmt++;
 8010d2c:	2302      	movs	r3, #2
 8010d2e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010d32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010d36:	1c5a      	adds	r2, r3, #1
 8010d38:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8010d42:	e014      	b.n	8010d6e <f_printf+0xd6>
			w = w * 10 + c - '0';
 8010d44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010d48:	4613      	mov	r3, r2
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	4413      	add	r3, r2
 8010d4e:	005b      	lsls	r3, r3, #1
 8010d50:	461a      	mov	r2, r3
 8010d52:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d56:	4413      	add	r3, r2
 8010d58:	3b30      	subs	r3, #48	; 0x30
 8010d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8010d5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010d62:	1c5a      	adds	r2, r3, #1
 8010d64:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8010d6e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d72:	2b2f      	cmp	r3, #47	; 0x2f
 8010d74:	d903      	bls.n	8010d7e <f_printf+0xe6>
 8010d76:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d7a:	2b39      	cmp	r3, #57	; 0x39
 8010d7c:	d9e2      	bls.n	8010d44 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8010d7e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d82:	2b6c      	cmp	r3, #108	; 0x6c
 8010d84:	d003      	beq.n	8010d8e <f_printf+0xf6>
 8010d86:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010d8a:	2b4c      	cmp	r3, #76	; 0x4c
 8010d8c:	d10d      	bne.n	8010daa <f_printf+0x112>
			f |= 4; c = *fmt++;
 8010d8e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010d92:	f043 0304 	orr.w	r3, r3, #4
 8010d96:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010d9e:	1c5a      	adds	r2, r3, #1
 8010da0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8010daa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f000 8181 	beq.w	80110b6 <f_printf+0x41e>
		d = c;
 8010db4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010db8:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8010dbc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010dc0:	2b60      	cmp	r3, #96	; 0x60
 8010dc2:	d908      	bls.n	8010dd6 <f_printf+0x13e>
 8010dc4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010dc8:	2b7a      	cmp	r3, #122	; 0x7a
 8010dca:	d804      	bhi.n	8010dd6 <f_printf+0x13e>
 8010dcc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010dd0:	3b20      	subs	r3, #32
 8010dd2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8010dd6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010dda:	3b42      	subs	r3, #66	; 0x42
 8010ddc:	2b16      	cmp	r3, #22
 8010dde:	f200 8098 	bhi.w	8010f12 <f_printf+0x27a>
 8010de2:	a201      	add	r2, pc, #4	; (adr r2, 8010de8 <f_printf+0x150>)
 8010de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de8:	08010ef3 	.word	0x08010ef3
 8010dec:	08010edb 	.word	0x08010edb
 8010df0:	08010f03 	.word	0x08010f03
 8010df4:	08010f13 	.word	0x08010f13
 8010df8:	08010f13 	.word	0x08010f13
 8010dfc:	08010f13 	.word	0x08010f13
 8010e00:	08010f13 	.word	0x08010f13
 8010e04:	08010f13 	.word	0x08010f13
 8010e08:	08010f13 	.word	0x08010f13
 8010e0c:	08010f13 	.word	0x08010f13
 8010e10:	08010f13 	.word	0x08010f13
 8010e14:	08010f13 	.word	0x08010f13
 8010e18:	08010f13 	.word	0x08010f13
 8010e1c:	08010efb 	.word	0x08010efb
 8010e20:	08010f13 	.word	0x08010f13
 8010e24:	08010f13 	.word	0x08010f13
 8010e28:	08010f13 	.word	0x08010f13
 8010e2c:	08010e45 	.word	0x08010e45
 8010e30:	08010f13 	.word	0x08010f13
 8010e34:	08010f03 	.word	0x08010f03
 8010e38:	08010f13 	.word	0x08010f13
 8010e3c:	08010f13 	.word	0x08010f13
 8010e40:	08010f0b 	.word	0x08010f0b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8010e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e46:	1d1a      	adds	r2, r3, #4
 8010e48:	67ba      	str	r2, [r7, #120]	; 0x78
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010e54:	e004      	b.n	8010e60 <f_printf+0x1c8>
 8010e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010e60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e66:	4413      	add	r3, r2
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d1f3      	bne.n	8010e56 <f_printf+0x1be>
			if (!(f & 2)) {
 8010e6e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010e72:	f003 0302 	and.w	r3, r3, #2
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d11a      	bne.n	8010eb0 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8010e7a:	e005      	b.n	8010e88 <f_printf+0x1f0>
 8010e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e80:	2120      	movs	r1, #32
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7ff fe91 	bl	8010baa <putc_bfd>
 8010e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e8c:	1c5a      	adds	r2, r3, #1
 8010e8e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010e92:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d8f0      	bhi.n	8010e7c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8010e9a:	e009      	b.n	8010eb0 <f_printf+0x218>
 8010e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010e9e:	1c5a      	adds	r2, r3, #1
 8010ea0:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010ea2:	781a      	ldrb	r2, [r3, #0]
 8010ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7ff fe7d 	bl	8010baa <putc_bfd>
 8010eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d1f1      	bne.n	8010e9c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8010eb8:	e005      	b.n	8010ec6 <f_printf+0x22e>
 8010eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ebe:	2120      	movs	r1, #32
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7ff fe72 	bl	8010baa <putc_bfd>
 8010ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010eca:	1c5a      	adds	r2, r3, #1
 8010ecc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8010ed0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d8f0      	bhi.n	8010eba <f_printf+0x222>
			continue;
 8010ed8:	e0ea      	b.n	80110b0 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8010eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010edc:	1d1a      	adds	r2, r3, #4
 8010ede:	67ba      	str	r2, [r7, #120]	; 0x78
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	b2da      	uxtb	r2, r3
 8010ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ee8:	4611      	mov	r1, r2
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7ff fe5d 	bl	8010baa <putc_bfd>
 8010ef0:	e0de      	b.n	80110b0 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 8010ef2:	2302      	movs	r3, #2
 8010ef4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010ef8:	e014      	b.n	8010f24 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8010efa:	2308      	movs	r3, #8
 8010efc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010f00:	e010      	b.n	8010f24 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8010f02:	230a      	movs	r3, #10
 8010f04:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010f08:	e00c      	b.n	8010f24 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8010f0a:	2310      	movs	r3, #16
 8010f0c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8010f10:	e008      	b.n	8010f24 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8010f12:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8010f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f1a:	4611      	mov	r1, r2
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff fe44 	bl	8010baa <putc_bfd>
 8010f22:	e0c5      	b.n	80110b0 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8010f24:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010f28:	f003 0304 	and.w	r3, r3, #4
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d004      	beq.n	8010f3a <f_printf+0x2a2>
 8010f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f32:	1d1a      	adds	r2, r3, #4
 8010f34:	67ba      	str	r2, [r7, #120]	; 0x78
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	e00c      	b.n	8010f54 <f_printf+0x2bc>
 8010f3a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010f3e:	2b44      	cmp	r3, #68	; 0x44
 8010f40:	d104      	bne.n	8010f4c <f_printf+0x2b4>
 8010f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f44:	1d1a      	adds	r2, r3, #4
 8010f46:	67ba      	str	r2, [r7, #120]	; 0x78
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	e003      	b.n	8010f54 <f_printf+0x2bc>
 8010f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f4e:	1d1a      	adds	r2, r3, #4
 8010f50:	67ba      	str	r2, [r7, #120]	; 0x78
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8010f58:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010f5c:	2b44      	cmp	r3, #68	; 0x44
 8010f5e:	d10e      	bne.n	8010f7e <f_printf+0x2e6>
 8010f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	da0a      	bge.n	8010f7e <f_printf+0x2e6>
			v = 0 - v;
 8010f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f6c:	425b      	negs	r3, r3
 8010f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8010f72:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010f76:	f043 0308 	orr.w	r3, r3, #8
 8010f7a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8010f84:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8010f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f90:	fb01 f202 	mul.w	r2, r1, r2
 8010f94:	1a9b      	subs	r3, r3, r2
 8010f96:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8010f9a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8010f9e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8010faa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010fae:	2b09      	cmp	r3, #9
 8010fb0:	d90b      	bls.n	8010fca <f_printf+0x332>
 8010fb2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010fb6:	2b78      	cmp	r3, #120	; 0x78
 8010fb8:	d101      	bne.n	8010fbe <f_printf+0x326>
 8010fba:	2227      	movs	r2, #39	; 0x27
 8010fbc:	e000      	b.n	8010fc0 <f_printf+0x328>
 8010fbe:	2207      	movs	r2, #7
 8010fc0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8010fc4:	4413      	add	r3, r2
 8010fc6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8010fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010fce:	1c5a      	adds	r2, r3, #1
 8010fd0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8010fd4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8010fd8:	3230      	adds	r2, #48	; 0x30
 8010fda:	b2d2      	uxtb	r2, r2
 8010fdc:	3398      	adds	r3, #152	; 0x98
 8010fde:	443b      	add	r3, r7
 8010fe0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8010fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d003      	beq.n	8010ff4 <f_printf+0x35c>
 8010fec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ff0:	2b1f      	cmp	r3, #31
 8010ff2:	d9c7      	bls.n	8010f84 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8010ff4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010ff8:	f003 0308 	and.w	r3, r3, #8
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d009      	beq.n	8011014 <f_printf+0x37c>
 8011000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011004:	1c5a      	adds	r2, r3, #1
 8011006:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801100a:	3398      	adds	r3, #152	; 0x98
 801100c:	443b      	add	r3, r7
 801100e:	222d      	movs	r2, #45	; 0x2d
 8011010:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8011014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801101c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011020:	f003 0301 	and.w	r3, r3, #1
 8011024:	2b00      	cmp	r3, #0
 8011026:	d001      	beq.n	801102c <f_printf+0x394>
 8011028:	2330      	movs	r3, #48	; 0x30
 801102a:	e000      	b.n	801102e <f_printf+0x396>
 801102c:	2320      	movs	r3, #32
 801102e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8011032:	e007      	b.n	8011044 <f_printf+0x3ac>
 8011034:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8011038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801103c:	4611      	mov	r1, r2
 801103e:	4618      	mov	r0, r3
 8011040:	f7ff fdb3 	bl	8010baa <putc_bfd>
 8011044:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011048:	f003 0302 	and.w	r3, r3, #2
 801104c:	2b00      	cmp	r3, #0
 801104e:	d108      	bne.n	8011062 <f_printf+0x3ca>
 8011050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011054:	1c5a      	adds	r2, r3, #1
 8011056:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801105a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801105e:	429a      	cmp	r2, r3
 8011060:	d8e8      	bhi.n	8011034 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 8011062:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011066:	3b01      	subs	r3, #1
 8011068:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801106c:	f107 020c 	add.w	r2, r7, #12
 8011070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011074:	4413      	add	r3, r2
 8011076:	781a      	ldrb	r2, [r3, #0]
 8011078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801107c:	4611      	mov	r1, r2
 801107e:	4618      	mov	r0, r3
 8011080:	f7ff fd93 	bl	8010baa <putc_bfd>
		} while (i);
 8011084:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011088:	2b00      	cmp	r3, #0
 801108a:	d1ea      	bne.n	8011062 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 801108c:	e007      	b.n	801109e <f_printf+0x406>
 801108e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8011092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011096:	4611      	mov	r1, r2
 8011098:	4618      	mov	r0, r3
 801109a:	f7ff fd86 	bl	8010baa <putc_bfd>
 801109e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110a2:	1c5a      	adds	r2, r3, #1
 80110a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80110a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d8ee      	bhi.n	801108e <f_printf+0x3f6>
		c = *fmt++;
 80110b0:	e600      	b.n	8010cb4 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 80110b2:	bf00      	nop
 80110b4:	e000      	b.n	80110b8 <f_printf+0x420>
		if (!c) break;
 80110b6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 80110b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80110bc:	4618      	mov	r0, r3
 80110be:	f7ff fdb1 	bl	8010c24 <putc_flush>
 80110c2:	4603      	mov	r3, r0
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	379c      	adds	r7, #156	; 0x9c
 80110c8:	46bd      	mov	sp, r7
 80110ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80110ce:	b003      	add	sp, #12
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop

080110d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b087      	sub	sp, #28
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	4613      	mov	r3, r2
 80110e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80110e2:	2301      	movs	r3, #1
 80110e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80110ea:	4b1f      	ldr	r3, [pc, #124]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 80110ec:	7a5b      	ldrb	r3, [r3, #9]
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d131      	bne.n	8011158 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80110f4:	4b1c      	ldr	r3, [pc, #112]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 80110f6:	7a5b      	ldrb	r3, [r3, #9]
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	461a      	mov	r2, r3
 80110fc:	4b1a      	ldr	r3, [pc, #104]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 80110fe:	2100      	movs	r1, #0
 8011100:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011102:	4b19      	ldr	r3, [pc, #100]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 8011104:	7a5b      	ldrb	r3, [r3, #9]
 8011106:	b2db      	uxtb	r3, r3
 8011108:	4a17      	ldr	r2, [pc, #92]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	4413      	add	r3, r2
 801110e:	68fa      	ldr	r2, [r7, #12]
 8011110:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011112:	4b15      	ldr	r3, [pc, #84]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 8011114:	7a5b      	ldrb	r3, [r3, #9]
 8011116:	b2db      	uxtb	r3, r3
 8011118:	461a      	mov	r2, r3
 801111a:	4b13      	ldr	r3, [pc, #76]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 801111c:	4413      	add	r3, r2
 801111e:	79fa      	ldrb	r2, [r7, #7]
 8011120:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011122:	4b11      	ldr	r3, [pc, #68]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 8011124:	7a5b      	ldrb	r3, [r3, #9]
 8011126:	b2db      	uxtb	r3, r3
 8011128:	1c5a      	adds	r2, r3, #1
 801112a:	b2d1      	uxtb	r1, r2
 801112c:	4a0e      	ldr	r2, [pc, #56]	; (8011168 <FATFS_LinkDriverEx+0x94>)
 801112e:	7251      	strb	r1, [r2, #9]
 8011130:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011132:	7dbb      	ldrb	r3, [r7, #22]
 8011134:	3330      	adds	r3, #48	; 0x30
 8011136:	b2da      	uxtb	r2, r3
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	3301      	adds	r3, #1
 8011140:	223a      	movs	r2, #58	; 0x3a
 8011142:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	3302      	adds	r3, #2
 8011148:	222f      	movs	r2, #47	; 0x2f
 801114a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	3303      	adds	r3, #3
 8011150:	2200      	movs	r2, #0
 8011152:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011154:	2300      	movs	r3, #0
 8011156:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011158:	7dfb      	ldrb	r3, [r7, #23]
}
 801115a:	4618      	mov	r0, r3
 801115c:	371c      	adds	r7, #28
 801115e:	46bd      	mov	sp, r7
 8011160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	20002154 	.word	0x20002154

0801116c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011176:	2200      	movs	r2, #0
 8011178:	6839      	ldr	r1, [r7, #0]
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7ff ffaa 	bl	80110d4 <FATFS_LinkDriverEx>
 8011180:	4603      	mov	r3, r0
}
 8011182:	4618      	mov	r0, r3
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
	...

0801118c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011190:	2200      	movs	r2, #0
 8011192:	4912      	ldr	r1, [pc, #72]	; (80111dc <MX_USB_DEVICE_Init+0x50>)
 8011194:	4812      	ldr	r0, [pc, #72]	; (80111e0 <MX_USB_DEVICE_Init+0x54>)
 8011196:	f7fc f889 	bl	800d2ac <USBD_Init>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d001      	beq.n	80111a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80111a0:	f7f0 f83c 	bl	800121c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80111a4:	490f      	ldr	r1, [pc, #60]	; (80111e4 <MX_USB_DEVICE_Init+0x58>)
 80111a6:	480e      	ldr	r0, [pc, #56]	; (80111e0 <MX_USB_DEVICE_Init+0x54>)
 80111a8:	f7fc f8b0 	bl	800d30c <USBD_RegisterClass>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d001      	beq.n	80111b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80111b2:	f7f0 f833 	bl	800121c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80111b6:	490c      	ldr	r1, [pc, #48]	; (80111e8 <MX_USB_DEVICE_Init+0x5c>)
 80111b8:	4809      	ldr	r0, [pc, #36]	; (80111e0 <MX_USB_DEVICE_Init+0x54>)
 80111ba:	f7fb ffe7 	bl	800d18c <USBD_CDC_RegisterInterface>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d001      	beq.n	80111c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80111c4:	f7f0 f82a 	bl	800121c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80111c8:	4805      	ldr	r0, [pc, #20]	; (80111e0 <MX_USB_DEVICE_Init+0x54>)
 80111ca:	f7fc f8d5 	bl	800d378 <USBD_Start>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80111d4:	f7f0 f822 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80111d8:	bf00      	nop
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	200000ac 	.word	0x200000ac
 80111e0:	20002160 	.word	0x20002160
 80111e4:	20000018 	.word	0x20000018
 80111e8:	20000098 	.word	0x20000098

080111ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80111f0:	2200      	movs	r2, #0
 80111f2:	4905      	ldr	r1, [pc, #20]	; (8011208 <CDC_Init_FS+0x1c>)
 80111f4:	4805      	ldr	r0, [pc, #20]	; (801120c <CDC_Init_FS+0x20>)
 80111f6:	f7fb ffe3 	bl	800d1c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80111fa:	4905      	ldr	r1, [pc, #20]	; (8011210 <CDC_Init_FS+0x24>)
 80111fc:	4803      	ldr	r0, [pc, #12]	; (801120c <CDC_Init_FS+0x20>)
 80111fe:	f7fc f801 	bl	800d204 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011202:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011204:	4618      	mov	r0, r3
 8011206:	bd80      	pop	{r7, pc}
 8011208:	20002c3c 	.word	0x20002c3c
 801120c:	20002160 	.word	0x20002160
 8011210:	2000243c 	.word	0x2000243c

08011214 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011214:	b480      	push	{r7}
 8011216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011218:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801121a:	4618      	mov	r0, r3
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr

08011224 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	4603      	mov	r3, r0
 801122c:	6039      	str	r1, [r7, #0]
 801122e:	71fb      	strb	r3, [r7, #7]
 8011230:	4613      	mov	r3, r2
 8011232:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011234:	79fb      	ldrb	r3, [r7, #7]
 8011236:	2b23      	cmp	r3, #35	; 0x23
 8011238:	d84a      	bhi.n	80112d0 <CDC_Control_FS+0xac>
 801123a:	a201      	add	r2, pc, #4	; (adr r2, 8011240 <CDC_Control_FS+0x1c>)
 801123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011240:	080112d1 	.word	0x080112d1
 8011244:	080112d1 	.word	0x080112d1
 8011248:	080112d1 	.word	0x080112d1
 801124c:	080112d1 	.word	0x080112d1
 8011250:	080112d1 	.word	0x080112d1
 8011254:	080112d1 	.word	0x080112d1
 8011258:	080112d1 	.word	0x080112d1
 801125c:	080112d1 	.word	0x080112d1
 8011260:	080112d1 	.word	0x080112d1
 8011264:	080112d1 	.word	0x080112d1
 8011268:	080112d1 	.word	0x080112d1
 801126c:	080112d1 	.word	0x080112d1
 8011270:	080112d1 	.word	0x080112d1
 8011274:	080112d1 	.word	0x080112d1
 8011278:	080112d1 	.word	0x080112d1
 801127c:	080112d1 	.word	0x080112d1
 8011280:	080112d1 	.word	0x080112d1
 8011284:	080112d1 	.word	0x080112d1
 8011288:	080112d1 	.word	0x080112d1
 801128c:	080112d1 	.word	0x080112d1
 8011290:	080112d1 	.word	0x080112d1
 8011294:	080112d1 	.word	0x080112d1
 8011298:	080112d1 	.word	0x080112d1
 801129c:	080112d1 	.word	0x080112d1
 80112a0:	080112d1 	.word	0x080112d1
 80112a4:	080112d1 	.word	0x080112d1
 80112a8:	080112d1 	.word	0x080112d1
 80112ac:	080112d1 	.word	0x080112d1
 80112b0:	080112d1 	.word	0x080112d1
 80112b4:	080112d1 	.word	0x080112d1
 80112b8:	080112d1 	.word	0x080112d1
 80112bc:	080112d1 	.word	0x080112d1
 80112c0:	080112d1 	.word	0x080112d1
 80112c4:	080112d1 	.word	0x080112d1
 80112c8:	080112d1 	.word	0x080112d1
 80112cc:	080112d1 	.word	0x080112d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80112d0:	bf00      	nop
  }

  return (USBD_OK);
 80112d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr

080112e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80112ea:	6879      	ldr	r1, [r7, #4]
 80112ec:	480f      	ldr	r0, [pc, #60]	; (801132c <CDC_Receive_FS+0x4c>)
 80112ee:	f7fb ff89 	bl	800d204 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80112f2:	480e      	ldr	r0, [pc, #56]	; (801132c <CDC_Receive_FS+0x4c>)
 80112f4:	f7fb ffa4 	bl	800d240 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	73fb      	strb	r3, [r7, #15]
  memset(inBuff, '\0', 64);
 80112fe:	2240      	movs	r2, #64	; 0x40
 8011300:	2100      	movs	r1, #0
 8011302:	480b      	ldr	r0, [pc, #44]	; (8011330 <CDC_Receive_FS+0x50>)
 8011304:	f001 fdbd 	bl	8012e82 <memset>
  memcpy(inBuff, Buf, len);
 8011308:	7bfb      	ldrb	r3, [r7, #15]
 801130a:	461a      	mov	r2, r3
 801130c:	6879      	ldr	r1, [r7, #4]
 801130e:	4808      	ldr	r0, [pc, #32]	; (8011330 <CDC_Receive_FS+0x50>)
 8011310:	f001 fe46 	bl	8012fa0 <memcpy>
  memset(Buf, '\0', len);
 8011314:	7bfb      	ldrb	r3, [r7, #15]
 8011316:	461a      	mov	r2, r3
 8011318:	2100      	movs	r1, #0
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f001 fdb1 	bl	8012e82 <memset>
  return (USBD_OK);
 8011320:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011322:	4618      	mov	r0, r3
 8011324:	3710      	adds	r7, #16
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	20002160 	.word	0x20002160
 8011330:	20000438 	.word	0x20000438

08011334 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011334:	b480      	push	{r7}
 8011336:	b087      	sub	sp, #28
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	4613      	mov	r3, r2
 8011340:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011342:	2300      	movs	r3, #0
 8011344:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011346:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801134a:	4618      	mov	r0, r3
 801134c:	371c      	adds	r7, #28
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr
	...

08011358 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	4603      	mov	r3, r0
 8011360:	6039      	str	r1, [r7, #0]
 8011362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	2212      	movs	r2, #18
 8011368:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801136a:	4b03      	ldr	r3, [pc, #12]	; (8011378 <USBD_FS_DeviceDescriptor+0x20>)
}
 801136c:	4618      	mov	r0, r3
 801136e:	370c      	adds	r7, #12
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr
 8011378:	200000cc 	.word	0x200000cc

0801137c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801137c:	b480      	push	{r7}
 801137e:	b083      	sub	sp, #12
 8011380:	af00      	add	r7, sp, #0
 8011382:	4603      	mov	r3, r0
 8011384:	6039      	str	r1, [r7, #0]
 8011386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	2204      	movs	r2, #4
 801138c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801138e:	4b03      	ldr	r3, [pc, #12]	; (801139c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011390:	4618      	mov	r0, r3
 8011392:	370c      	adds	r7, #12
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr
 801139c:	200000ec 	.word	0x200000ec

080113a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	4603      	mov	r3, r0
 80113a8:	6039      	str	r1, [r7, #0]
 80113aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113ac:	79fb      	ldrb	r3, [r7, #7]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d105      	bne.n	80113be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80113b2:	683a      	ldr	r2, [r7, #0]
 80113b4:	4907      	ldr	r1, [pc, #28]	; (80113d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80113b6:	4808      	ldr	r0, [pc, #32]	; (80113d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80113b8:	f7fd f9ba 	bl	800e730 <USBD_GetString>
 80113bc:	e004      	b.n	80113c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80113be:	683a      	ldr	r2, [r7, #0]
 80113c0:	4904      	ldr	r1, [pc, #16]	; (80113d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80113c2:	4805      	ldr	r0, [pc, #20]	; (80113d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80113c4:	f7fd f9b4 	bl	800e730 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113c8:	4b02      	ldr	r3, [pc, #8]	; (80113d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3708      	adds	r7, #8
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	2000343c 	.word	0x2000343c
 80113d8:	08016644 	.word	0x08016644

080113dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	4603      	mov	r3, r0
 80113e4:	6039      	str	r1, [r7, #0]
 80113e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80113e8:	683a      	ldr	r2, [r7, #0]
 80113ea:	4904      	ldr	r1, [pc, #16]	; (80113fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80113ec:	4804      	ldr	r0, [pc, #16]	; (8011400 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80113ee:	f7fd f99f 	bl	800e730 <USBD_GetString>
  return USBD_StrDesc;
 80113f2:	4b02      	ldr	r3, [pc, #8]	; (80113fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	2000343c 	.word	0x2000343c
 8011400:	08016654 	.word	0x08016654

08011404 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
 801140a:	4603      	mov	r3, r0
 801140c:	6039      	str	r1, [r7, #0]
 801140e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	221a      	movs	r2, #26
 8011414:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011416:	f000 f855 	bl	80114c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801141a:	4b02      	ldr	r3, [pc, #8]	; (8011424 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801141c:	4618      	mov	r0, r3
 801141e:	3708      	adds	r7, #8
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	200000f0 	.word	0x200000f0

08011428 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	4603      	mov	r3, r0
 8011430:	6039      	str	r1, [r7, #0]
 8011432:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011434:	79fb      	ldrb	r3, [r7, #7]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d105      	bne.n	8011446 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801143a:	683a      	ldr	r2, [r7, #0]
 801143c:	4907      	ldr	r1, [pc, #28]	; (801145c <USBD_FS_ConfigStrDescriptor+0x34>)
 801143e:	4808      	ldr	r0, [pc, #32]	; (8011460 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011440:	f7fd f976 	bl	800e730 <USBD_GetString>
 8011444:	e004      	b.n	8011450 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011446:	683a      	ldr	r2, [r7, #0]
 8011448:	4904      	ldr	r1, [pc, #16]	; (801145c <USBD_FS_ConfigStrDescriptor+0x34>)
 801144a:	4805      	ldr	r0, [pc, #20]	; (8011460 <USBD_FS_ConfigStrDescriptor+0x38>)
 801144c:	f7fd f970 	bl	800e730 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011450:	4b02      	ldr	r3, [pc, #8]	; (801145c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011452:	4618      	mov	r0, r3
 8011454:	3708      	adds	r7, #8
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	2000343c 	.word	0x2000343c
 8011460:	08016668 	.word	0x08016668

08011464 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b082      	sub	sp, #8
 8011468:	af00      	add	r7, sp, #0
 801146a:	4603      	mov	r3, r0
 801146c:	6039      	str	r1, [r7, #0]
 801146e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011470:	79fb      	ldrb	r3, [r7, #7]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d105      	bne.n	8011482 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011476:	683a      	ldr	r2, [r7, #0]
 8011478:	4907      	ldr	r1, [pc, #28]	; (8011498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801147a:	4808      	ldr	r0, [pc, #32]	; (801149c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801147c:	f7fd f958 	bl	800e730 <USBD_GetString>
 8011480:	e004      	b.n	801148c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011482:	683a      	ldr	r2, [r7, #0]
 8011484:	4904      	ldr	r1, [pc, #16]	; (8011498 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011486:	4805      	ldr	r0, [pc, #20]	; (801149c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011488:	f7fd f952 	bl	800e730 <USBD_GetString>
  }
  return USBD_StrDesc;
 801148c:	4b02      	ldr	r3, [pc, #8]	; (8011498 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801148e:	4618      	mov	r0, r3
 8011490:	3708      	adds	r7, #8
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	2000343c 	.word	0x2000343c
 801149c:	08016674 	.word	0x08016674

080114a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	4603      	mov	r3, r0
 80114a8:	6039      	str	r1, [r7, #0]
 80114aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	220c      	movs	r2, #12
 80114b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80114b2:	4b03      	ldr	r3, [pc, #12]	; (80114c0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	370c      	adds	r7, #12
 80114b8:	46bd      	mov	sp, r7
 80114ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114be:	4770      	bx	lr
 80114c0:	200000e0 	.word	0x200000e0

080114c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80114ca:	4b0f      	ldr	r3, [pc, #60]	; (8011508 <Get_SerialNum+0x44>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80114d0:	4b0e      	ldr	r3, [pc, #56]	; (801150c <Get_SerialNum+0x48>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80114d6:	4b0e      	ldr	r3, [pc, #56]	; (8011510 <Get_SerialNum+0x4c>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80114dc:	68fa      	ldr	r2, [r7, #12]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4413      	add	r3, r2
 80114e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d009      	beq.n	80114fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80114ea:	2208      	movs	r2, #8
 80114ec:	4909      	ldr	r1, [pc, #36]	; (8011514 <Get_SerialNum+0x50>)
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f000 f814 	bl	801151c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80114f4:	2204      	movs	r2, #4
 80114f6:	4908      	ldr	r1, [pc, #32]	; (8011518 <Get_SerialNum+0x54>)
 80114f8:	68b8      	ldr	r0, [r7, #8]
 80114fa:	f000 f80f 	bl	801151c <IntToUnicode>
  }
}
 80114fe:	bf00      	nop
 8011500:	3710      	adds	r7, #16
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	1fff7590 	.word	0x1fff7590
 801150c:	1fff7594 	.word	0x1fff7594
 8011510:	1fff7598 	.word	0x1fff7598
 8011514:	200000f2 	.word	0x200000f2
 8011518:	20000102 	.word	0x20000102

0801151c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801151c:	b480      	push	{r7}
 801151e:	b087      	sub	sp, #28
 8011520:	af00      	add	r7, sp, #0
 8011522:	60f8      	str	r0, [r7, #12]
 8011524:	60b9      	str	r1, [r7, #8]
 8011526:	4613      	mov	r3, r2
 8011528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801152a:	2300      	movs	r3, #0
 801152c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801152e:	2300      	movs	r3, #0
 8011530:	75fb      	strb	r3, [r7, #23]
 8011532:	e027      	b.n	8011584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	0f1b      	lsrs	r3, r3, #28
 8011538:	2b09      	cmp	r3, #9
 801153a:	d80b      	bhi.n	8011554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	0f1b      	lsrs	r3, r3, #28
 8011540:	b2da      	uxtb	r2, r3
 8011542:	7dfb      	ldrb	r3, [r7, #23]
 8011544:	005b      	lsls	r3, r3, #1
 8011546:	4619      	mov	r1, r3
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	440b      	add	r3, r1
 801154c:	3230      	adds	r2, #48	; 0x30
 801154e:	b2d2      	uxtb	r2, r2
 8011550:	701a      	strb	r2, [r3, #0]
 8011552:	e00a      	b.n	801156a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	0f1b      	lsrs	r3, r3, #28
 8011558:	b2da      	uxtb	r2, r3
 801155a:	7dfb      	ldrb	r3, [r7, #23]
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	4619      	mov	r1, r3
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	440b      	add	r3, r1
 8011564:	3237      	adds	r2, #55	; 0x37
 8011566:	b2d2      	uxtb	r2, r2
 8011568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	011b      	lsls	r3, r3, #4
 801156e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011570:	7dfb      	ldrb	r3, [r7, #23]
 8011572:	005b      	lsls	r3, r3, #1
 8011574:	3301      	adds	r3, #1
 8011576:	68ba      	ldr	r2, [r7, #8]
 8011578:	4413      	add	r3, r2
 801157a:	2200      	movs	r2, #0
 801157c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801157e:	7dfb      	ldrb	r3, [r7, #23]
 8011580:	3301      	adds	r3, #1
 8011582:	75fb      	strb	r3, [r7, #23]
 8011584:	7dfa      	ldrb	r2, [r7, #23]
 8011586:	79fb      	ldrb	r3, [r7, #7]
 8011588:	429a      	cmp	r2, r3
 801158a:	d3d3      	bcc.n	8011534 <IntToUnicode+0x18>
  }
}
 801158c:	bf00      	nop
 801158e:	bf00      	nop
 8011590:	371c      	adds	r7, #28
 8011592:	46bd      	mov	sp, r7
 8011594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011598:	4770      	bx	lr
	...

0801159c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b0ac      	sub	sp, #176	; 0xb0
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80115a8:	2200      	movs	r2, #0
 80115aa:	601a      	str	r2, [r3, #0]
 80115ac:	605a      	str	r2, [r3, #4]
 80115ae:	609a      	str	r2, [r3, #8]
 80115b0:	60da      	str	r2, [r3, #12]
 80115b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80115b4:	f107 0314 	add.w	r3, r7, #20
 80115b8:	2288      	movs	r2, #136	; 0x88
 80115ba:	2100      	movs	r1, #0
 80115bc:	4618      	mov	r0, r3
 80115be:	f001 fc60 	bl	8012e82 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80115ca:	d164      	bne.n	8011696 <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80115cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80115d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80115d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80115d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80115da:	f107 0314 	add.w	r3, r7, #20
 80115de:	4618      	mov	r0, r3
 80115e0:	f7f5 fec6 	bl	8007370 <HAL_RCCEx_PeriphCLKConfig>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d001      	beq.n	80115ee <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80115ea:	f7ef fe17 	bl	800121c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ee:	4b2c      	ldr	r3, [pc, #176]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 80115f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115f2:	4a2b      	ldr	r2, [pc, #172]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 80115f4:	f043 0301 	orr.w	r3, r3, #1
 80115f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80115fa:	4b29      	ldr	r3, [pc, #164]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 80115fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115fe:	f003 0301 	and.w	r3, r3, #1
 8011602:	613b      	str	r3, [r7, #16]
 8011604:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011606:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801160a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801160e:	2302      	movs	r3, #2
 8011610:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011614:	2300      	movs	r3, #0
 8011616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801161a:	2303      	movs	r3, #3
 801161c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011620:	230a      	movs	r3, #10
 8011622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011626:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801162a:	4619      	mov	r1, r3
 801162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011630:	f7f2 fe90 	bl	8004354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011634:	4b1a      	ldr	r3, [pc, #104]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 8011636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011638:	4a19      	ldr	r2, [pc, #100]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 801163a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801163e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011640:	4b17      	ldr	r3, [pc, #92]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 8011642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011648:	60fb      	str	r3, [r7, #12]
 801164a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801164c:	4b14      	ldr	r3, [pc, #80]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 801164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011654:	2b00      	cmp	r3, #0
 8011656:	d114      	bne.n	8011682 <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011658:	4b11      	ldr	r3, [pc, #68]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 801165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801165c:	4a10      	ldr	r2, [pc, #64]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 801165e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011662:	6593      	str	r3, [r2, #88]	; 0x58
 8011664:	4b0e      	ldr	r3, [pc, #56]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 8011666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801166c:	60bb      	str	r3, [r7, #8]
 801166e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8011670:	f7f5 f86e 	bl	8006750 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8011674:	4b0a      	ldr	r3, [pc, #40]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 8011676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011678:	4a09      	ldr	r2, [pc, #36]	; (80116a0 <HAL_PCD_MspInit+0x104>)
 801167a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801167e:	6593      	str	r3, [r2, #88]	; 0x58
 8011680:	e001      	b.n	8011686 <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8011682:	f7f5 f865 	bl	8006750 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011686:	2200      	movs	r2, #0
 8011688:	2100      	movs	r1, #0
 801168a:	2043      	movs	r0, #67	; 0x43
 801168c:	f7f2 fbf3 	bl	8003e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011690:	2043      	movs	r0, #67	; 0x43
 8011692:	f7f2 fc0c 	bl	8003eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011696:	bf00      	nop
 8011698:	37b0      	adds	r7, #176	; 0xb0
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	40021000 	.word	0x40021000

080116a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80116b8:	4619      	mov	r1, r3
 80116ba:	4610      	mov	r0, r2
 80116bc:	f7fb fea9 	bl	800d412 <USBD_LL_SetupStage>
}
 80116c0:	bf00      	nop
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	460b      	mov	r3, r1
 80116d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80116da:	78fa      	ldrb	r2, [r7, #3]
 80116dc:	6879      	ldr	r1, [r7, #4]
 80116de:	4613      	mov	r3, r2
 80116e0:	00db      	lsls	r3, r3, #3
 80116e2:	4413      	add	r3, r2
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	440b      	add	r3, r1
 80116e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	78fb      	ldrb	r3, [r7, #3]
 80116f0:	4619      	mov	r1, r3
 80116f2:	f7fb fee3 	bl	800d4bc <USBD_LL_DataOutStage>
}
 80116f6:	bf00      	nop
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b082      	sub	sp, #8
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	460b      	mov	r3, r1
 8011708:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011710:	78fa      	ldrb	r2, [r7, #3]
 8011712:	6879      	ldr	r1, [r7, #4]
 8011714:	4613      	mov	r3, r2
 8011716:	00db      	lsls	r3, r3, #3
 8011718:	4413      	add	r3, r2
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	440b      	add	r3, r1
 801171e:	3348      	adds	r3, #72	; 0x48
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	78fb      	ldrb	r3, [r7, #3]
 8011724:	4619      	mov	r1, r3
 8011726:	f7fb ff7c 	bl	800d622 <USBD_LL_DataInStage>
}
 801172a:	bf00      	nop
 801172c:	3708      	adds	r7, #8
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}

08011732 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011732:	b580      	push	{r7, lr}
 8011734:	b082      	sub	sp, #8
 8011736:	af00      	add	r7, sp, #0
 8011738:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011740:	4618      	mov	r0, r3
 8011742:	f7fc f8b6 	bl	800d8b2 <USBD_LL_SOF>
}
 8011746:	bf00      	nop
 8011748:	3708      	adds	r7, #8
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}

0801174e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801174e:	b580      	push	{r7, lr}
 8011750:	b084      	sub	sp, #16
 8011752:	af00      	add	r7, sp, #0
 8011754:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011756:	2301      	movs	r3, #1
 8011758:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	691b      	ldr	r3, [r3, #16]
 801175e:	2b02      	cmp	r3, #2
 8011760:	d001      	beq.n	8011766 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011762:	f7ef fd5b 	bl	800121c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801176c:	7bfa      	ldrb	r2, [r7, #15]
 801176e:	4611      	mov	r1, r2
 8011770:	4618      	mov	r0, r3
 8011772:	f7fc f85a 	bl	800d82a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801177c:	4618      	mov	r0, r3
 801177e:	f7fc f802 	bl	800d786 <USBD_LL_Reset>
}
 8011782:	bf00      	nop
 8011784:	3710      	adds	r7, #16
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
	...

0801178c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b082      	sub	sp, #8
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	6812      	ldr	r2, [r2, #0]
 80117a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80117a6:	f043 0301 	orr.w	r3, r3, #1
 80117aa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fc f849 	bl	800d84a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6a1b      	ldr	r3, [r3, #32]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d005      	beq.n	80117cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80117c0:	4b04      	ldr	r3, [pc, #16]	; (80117d4 <HAL_PCD_SuspendCallback+0x48>)
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	4a03      	ldr	r2, [pc, #12]	; (80117d4 <HAL_PCD_SuspendCallback+0x48>)
 80117c6:	f043 0306 	orr.w	r3, r3, #6
 80117ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80117cc:	bf00      	nop
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	e000ed00 	.word	0xe000ed00

080117d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	6812      	ldr	r2, [r2, #0]
 80117ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80117f2:	f023 0301 	bic.w	r3, r3, #1
 80117f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6a1b      	ldr	r3, [r3, #32]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d007      	beq.n	8011810 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011800:	4b08      	ldr	r3, [pc, #32]	; (8011824 <HAL_PCD_ResumeCallback+0x4c>)
 8011802:	691b      	ldr	r3, [r3, #16]
 8011804:	4a07      	ldr	r2, [pc, #28]	; (8011824 <HAL_PCD_ResumeCallback+0x4c>)
 8011806:	f023 0306 	bic.w	r3, r3, #6
 801180a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801180c:	f000 faf6 	bl	8011dfc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011816:	4618      	mov	r0, r3
 8011818:	f7fc f833 	bl	800d882 <USBD_LL_Resume>
}
 801181c:	bf00      	nop
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	e000ed00 	.word	0xe000ed00

08011828 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	460b      	mov	r3, r1
 8011832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801183a:	78fa      	ldrb	r2, [r7, #3]
 801183c:	4611      	mov	r1, r2
 801183e:	4618      	mov	r0, r3
 8011840:	f7fc f889 	bl	800d956 <USBD_LL_IsoOUTIncomplete>
}
 8011844:	bf00      	nop
 8011846:	3708      	adds	r7, #8
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	460b      	mov	r3, r1
 8011856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801185e:	78fa      	ldrb	r2, [r7, #3]
 8011860:	4611      	mov	r1, r2
 8011862:	4618      	mov	r0, r3
 8011864:	f7fc f845 	bl	800d8f2 <USBD_LL_IsoINIncomplete>
}
 8011868:	bf00      	nop
 801186a:	3708      	adds	r7, #8
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801187e:	4618      	mov	r0, r3
 8011880:	f7fc f89b 	bl	800d9ba <USBD_LL_DevConnected>
}
 8011884:	bf00      	nop
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801189a:	4618      	mov	r0, r3
 801189c:	f7fc f898 	bl	800d9d0 <USBD_LL_DevDisconnected>
}
 80118a0:	bf00      	nop
 80118a2:	3708      	adds	r7, #8
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d13c      	bne.n	8011932 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80118b8:	4a20      	ldr	r2, [pc, #128]	; (801193c <USBD_LL_Init+0x94>)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	4a1e      	ldr	r2, [pc, #120]	; (801193c <USBD_LL_Init+0x94>)
 80118c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80118c8:	4b1c      	ldr	r3, [pc, #112]	; (801193c <USBD_LL_Init+0x94>)
 80118ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80118ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80118d0:	4b1a      	ldr	r3, [pc, #104]	; (801193c <USBD_LL_Init+0x94>)
 80118d2:	2206      	movs	r2, #6
 80118d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80118d6:	4b19      	ldr	r3, [pc, #100]	; (801193c <USBD_LL_Init+0x94>)
 80118d8:	2202      	movs	r2, #2
 80118da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80118dc:	4b17      	ldr	r3, [pc, #92]	; (801193c <USBD_LL_Init+0x94>)
 80118de:	2202      	movs	r2, #2
 80118e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80118e2:	4b16      	ldr	r3, [pc, #88]	; (801193c <USBD_LL_Init+0x94>)
 80118e4:	2200      	movs	r2, #0
 80118e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80118e8:	4b14      	ldr	r3, [pc, #80]	; (801193c <USBD_LL_Init+0x94>)
 80118ea:	2200      	movs	r2, #0
 80118ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80118ee:	4b13      	ldr	r3, [pc, #76]	; (801193c <USBD_LL_Init+0x94>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80118f4:	4b11      	ldr	r3, [pc, #68]	; (801193c <USBD_LL_Init+0x94>)
 80118f6:	2200      	movs	r2, #0
 80118f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80118fa:	4b10      	ldr	r3, [pc, #64]	; (801193c <USBD_LL_Init+0x94>)
 80118fc:	2200      	movs	r2, #0
 80118fe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011900:	4b0e      	ldr	r3, [pc, #56]	; (801193c <USBD_LL_Init+0x94>)
 8011902:	2200      	movs	r2, #0
 8011904:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011906:	480d      	ldr	r0, [pc, #52]	; (801193c <USBD_LL_Init+0x94>)
 8011908:	f7f3 fd17 	bl	800533a <HAL_PCD_Init>
 801190c:	4603      	mov	r3, r0
 801190e:	2b00      	cmp	r3, #0
 8011910:	d001      	beq.n	8011916 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011912:	f7ef fc83 	bl	800121c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011916:	2180      	movs	r1, #128	; 0x80
 8011918:	4808      	ldr	r0, [pc, #32]	; (801193c <USBD_LL_Init+0x94>)
 801191a:	f7f4 fe80 	bl	800661e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801191e:	2240      	movs	r2, #64	; 0x40
 8011920:	2100      	movs	r1, #0
 8011922:	4806      	ldr	r0, [pc, #24]	; (801193c <USBD_LL_Init+0x94>)
 8011924:	f7f4 fe34 	bl	8006590 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011928:	2280      	movs	r2, #128	; 0x80
 801192a:	2101      	movs	r1, #1
 801192c:	4803      	ldr	r0, [pc, #12]	; (801193c <USBD_LL_Init+0x94>)
 801192e:	f7f4 fe2f 	bl	8006590 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011932:	2300      	movs	r3, #0
}
 8011934:	4618      	mov	r0, r3
 8011936:	3708      	adds	r7, #8
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}
 801193c:	2000363c 	.word	0x2000363c

08011940 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b084      	sub	sp, #16
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011948:	2300      	movs	r3, #0
 801194a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801194c:	2300      	movs	r3, #0
 801194e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011956:	4618      	mov	r0, r3
 8011958:	f7f3 fe13 	bl	8005582 <HAL_PCD_Start>
 801195c:	4603      	mov	r3, r0
 801195e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011960:	7bbb      	ldrb	r3, [r7, #14]
 8011962:	2b03      	cmp	r3, #3
 8011964:	d816      	bhi.n	8011994 <USBD_LL_Start+0x54>
 8011966:	a201      	add	r2, pc, #4	; (adr r2, 801196c <USBD_LL_Start+0x2c>)
 8011968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801196c:	0801197d 	.word	0x0801197d
 8011970:	08011983 	.word	0x08011983
 8011974:	08011989 	.word	0x08011989
 8011978:	0801198f 	.word	0x0801198f
    case HAL_OK :
      usb_status = USBD_OK;
 801197c:	2300      	movs	r3, #0
 801197e:	73fb      	strb	r3, [r7, #15]
    break;
 8011980:	e00b      	b.n	801199a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011982:	2303      	movs	r3, #3
 8011984:	73fb      	strb	r3, [r7, #15]
    break;
 8011986:	e008      	b.n	801199a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011988:	2301      	movs	r3, #1
 801198a:	73fb      	strb	r3, [r7, #15]
    break;
 801198c:	e005      	b.n	801199a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801198e:	2303      	movs	r3, #3
 8011990:	73fb      	strb	r3, [r7, #15]
    break;
 8011992:	e002      	b.n	801199a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8011994:	2303      	movs	r3, #3
 8011996:	73fb      	strb	r3, [r7, #15]
    break;
 8011998:	bf00      	nop
  }
  return usb_status;
 801199a:	7bfb      	ldrb	r3, [r7, #15]
}
 801199c:	4618      	mov	r0, r3
 801199e:	3710      	adds	r7, #16
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b084      	sub	sp, #16
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	4608      	mov	r0, r1
 80119ae:	4611      	mov	r1, r2
 80119b0:	461a      	mov	r2, r3
 80119b2:	4603      	mov	r3, r0
 80119b4:	70fb      	strb	r3, [r7, #3]
 80119b6:	460b      	mov	r3, r1
 80119b8:	70bb      	strb	r3, [r7, #2]
 80119ba:	4613      	mov	r3, r2
 80119bc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119be:	2300      	movs	r3, #0
 80119c0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119c2:	2300      	movs	r3, #0
 80119c4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80119cc:	78bb      	ldrb	r3, [r7, #2]
 80119ce:	883a      	ldrh	r2, [r7, #0]
 80119d0:	78f9      	ldrb	r1, [r7, #3]
 80119d2:	f7f4 fabd 	bl	8005f50 <HAL_PCD_EP_Open>
 80119d6:	4603      	mov	r3, r0
 80119d8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80119da:	7bbb      	ldrb	r3, [r7, #14]
 80119dc:	2b03      	cmp	r3, #3
 80119de:	d817      	bhi.n	8011a10 <USBD_LL_OpenEP+0x6c>
 80119e0:	a201      	add	r2, pc, #4	; (adr r2, 80119e8 <USBD_LL_OpenEP+0x44>)
 80119e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e6:	bf00      	nop
 80119e8:	080119f9 	.word	0x080119f9
 80119ec:	080119ff 	.word	0x080119ff
 80119f0:	08011a05 	.word	0x08011a05
 80119f4:	08011a0b 	.word	0x08011a0b
    case HAL_OK :
      usb_status = USBD_OK;
 80119f8:	2300      	movs	r3, #0
 80119fa:	73fb      	strb	r3, [r7, #15]
    break;
 80119fc:	e00b      	b.n	8011a16 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80119fe:	2303      	movs	r3, #3
 8011a00:	73fb      	strb	r3, [r7, #15]
    break;
 8011a02:	e008      	b.n	8011a16 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011a04:	2301      	movs	r3, #1
 8011a06:	73fb      	strb	r3, [r7, #15]
    break;
 8011a08:	e005      	b.n	8011a16 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011a0a:	2303      	movs	r3, #3
 8011a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8011a0e:	e002      	b.n	8011a16 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8011a10:	2303      	movs	r3, #3
 8011a12:	73fb      	strb	r3, [r7, #15]
    break;
 8011a14:	bf00      	nop
  }
  return usb_status;
 8011a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3710      	adds	r7, #16
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a30:	2300      	movs	r3, #0
 8011a32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a3a:	78fa      	ldrb	r2, [r7, #3]
 8011a3c:	4611      	mov	r1, r2
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7f4 faee 	bl	8006020 <HAL_PCD_EP_Close>
 8011a44:	4603      	mov	r3, r0
 8011a46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011a48:	7bbb      	ldrb	r3, [r7, #14]
 8011a4a:	2b03      	cmp	r3, #3
 8011a4c:	d816      	bhi.n	8011a7c <USBD_LL_CloseEP+0x5c>
 8011a4e:	a201      	add	r2, pc, #4	; (adr r2, 8011a54 <USBD_LL_CloseEP+0x34>)
 8011a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a54:	08011a65 	.word	0x08011a65
 8011a58:	08011a6b 	.word	0x08011a6b
 8011a5c:	08011a71 	.word	0x08011a71
 8011a60:	08011a77 	.word	0x08011a77
    case HAL_OK :
      usb_status = USBD_OK;
 8011a64:	2300      	movs	r3, #0
 8011a66:	73fb      	strb	r3, [r7, #15]
    break;
 8011a68:	e00b      	b.n	8011a82 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a6a:	2303      	movs	r3, #3
 8011a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8011a6e:	e008      	b.n	8011a82 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011a70:	2301      	movs	r3, #1
 8011a72:	73fb      	strb	r3, [r7, #15]
    break;
 8011a74:	e005      	b.n	8011a82 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011a76:	2303      	movs	r3, #3
 8011a78:	73fb      	strb	r3, [r7, #15]
    break;
 8011a7a:	e002      	b.n	8011a82 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011a7c:	2303      	movs	r3, #3
 8011a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8011a80:	bf00      	nop
  }
  return usb_status;
 8011a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3710      	adds	r7, #16
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b084      	sub	sp, #16
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	460b      	mov	r3, r1
 8011a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011aa6:	78fa      	ldrb	r2, [r7, #3]
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7f4 fb7d 	bl	80061aa <HAL_PCD_EP_SetStall>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011ab4:	7bbb      	ldrb	r3, [r7, #14]
 8011ab6:	2b03      	cmp	r3, #3
 8011ab8:	d816      	bhi.n	8011ae8 <USBD_LL_StallEP+0x5c>
 8011aba:	a201      	add	r2, pc, #4	; (adr r2, 8011ac0 <USBD_LL_StallEP+0x34>)
 8011abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ac0:	08011ad1 	.word	0x08011ad1
 8011ac4:	08011ad7 	.word	0x08011ad7
 8011ac8:	08011add 	.word	0x08011add
 8011acc:	08011ae3 	.word	0x08011ae3
    case HAL_OK :
      usb_status = USBD_OK;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ad4:	e00b      	b.n	8011aee <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011ad6:	2303      	movs	r3, #3
 8011ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8011ada:	e008      	b.n	8011aee <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011adc:	2301      	movs	r3, #1
 8011ade:	73fb      	strb	r3, [r7, #15]
    break;
 8011ae0:	e005      	b.n	8011aee <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011ae2:	2303      	movs	r3, #3
 8011ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8011ae6:	e002      	b.n	8011aee <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011ae8:	2303      	movs	r3, #3
 8011aea:	73fb      	strb	r3, [r7, #15]
    break;
 8011aec:	bf00      	nop
  }
  return usb_status;
 8011aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	460b      	mov	r3, r1
 8011b02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b04:	2300      	movs	r3, #0
 8011b06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b12:	78fa      	ldrb	r2, [r7, #3]
 8011b14:	4611      	mov	r1, r2
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7f4 fba9 	bl	800626e <HAL_PCD_EP_ClrStall>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011b20:	7bbb      	ldrb	r3, [r7, #14]
 8011b22:	2b03      	cmp	r3, #3
 8011b24:	d816      	bhi.n	8011b54 <USBD_LL_ClearStallEP+0x5c>
 8011b26:	a201      	add	r2, pc, #4	; (adr r2, 8011b2c <USBD_LL_ClearStallEP+0x34>)
 8011b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b2c:	08011b3d 	.word	0x08011b3d
 8011b30:	08011b43 	.word	0x08011b43
 8011b34:	08011b49 	.word	0x08011b49
 8011b38:	08011b4f 	.word	0x08011b4f
    case HAL_OK :
      usb_status = USBD_OK;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8011b40:	e00b      	b.n	8011b5a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b42:	2303      	movs	r3, #3
 8011b44:	73fb      	strb	r3, [r7, #15]
    break;
 8011b46:	e008      	b.n	8011b5a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8011b4c:	e005      	b.n	8011b5a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011b4e:	2303      	movs	r3, #3
 8011b50:	73fb      	strb	r3, [r7, #15]
    break;
 8011b52:	e002      	b.n	8011b5a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011b54:	2303      	movs	r3, #3
 8011b56:	73fb      	strb	r3, [r7, #15]
    break;
 8011b58:	bf00      	nop
  }
  return usb_status;
 8011b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3710      	adds	r7, #16
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011b78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	da0b      	bge.n	8011b98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011b80:	78fb      	ldrb	r3, [r7, #3]
 8011b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b86:	68f9      	ldr	r1, [r7, #12]
 8011b88:	4613      	mov	r3, r2
 8011b8a:	00db      	lsls	r3, r3, #3
 8011b8c:	4413      	add	r3, r2
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	440b      	add	r3, r1
 8011b92:	333e      	adds	r3, #62	; 0x3e
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	e00b      	b.n	8011bb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011b98:	78fb      	ldrb	r3, [r7, #3]
 8011b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b9e:	68f9      	ldr	r1, [r7, #12]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	00db      	lsls	r3, r3, #3
 8011ba4:	4413      	add	r3, r2
 8011ba6:	009b      	lsls	r3, r3, #2
 8011ba8:	440b      	add	r3, r1
 8011baa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011bae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3714      	adds	r7, #20
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr

08011bbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011bd6:	78fa      	ldrb	r2, [r7, #3]
 8011bd8:	4611      	mov	r1, r2
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7f4 f993 	bl	8005f06 <HAL_PCD_SetAddress>
 8011be0:	4603      	mov	r3, r0
 8011be2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011be4:	7bbb      	ldrb	r3, [r7, #14]
 8011be6:	2b03      	cmp	r3, #3
 8011be8:	d816      	bhi.n	8011c18 <USBD_LL_SetUSBAddress+0x5c>
 8011bea:	a201      	add	r2, pc, #4	; (adr r2, 8011bf0 <USBD_LL_SetUSBAddress+0x34>)
 8011bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bf0:	08011c01 	.word	0x08011c01
 8011bf4:	08011c07 	.word	0x08011c07
 8011bf8:	08011c0d 	.word	0x08011c0d
 8011bfc:	08011c13 	.word	0x08011c13
    case HAL_OK :
      usb_status = USBD_OK;
 8011c00:	2300      	movs	r3, #0
 8011c02:	73fb      	strb	r3, [r7, #15]
    break;
 8011c04:	e00b      	b.n	8011c1e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c06:	2303      	movs	r3, #3
 8011c08:	73fb      	strb	r3, [r7, #15]
    break;
 8011c0a:	e008      	b.n	8011c1e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8011c10:	e005      	b.n	8011c1e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c12:	2303      	movs	r3, #3
 8011c14:	73fb      	strb	r3, [r7, #15]
    break;
 8011c16:	e002      	b.n	8011c1e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8011c18:	2303      	movs	r3, #3
 8011c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c1c:	bf00      	nop
  }
  return usb_status;
 8011c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3710      	adds	r7, #16
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b086      	sub	sp, #24
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	60f8      	str	r0, [r7, #12]
 8011c30:	607a      	str	r2, [r7, #4]
 8011c32:	603b      	str	r3, [r7, #0]
 8011c34:	460b      	mov	r3, r1
 8011c36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011c46:	7af9      	ldrb	r1, [r7, #11]
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	f7f4 fa7c 	bl	8006148 <HAL_PCD_EP_Transmit>
 8011c50:	4603      	mov	r3, r0
 8011c52:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011c54:	7dbb      	ldrb	r3, [r7, #22]
 8011c56:	2b03      	cmp	r3, #3
 8011c58:	d816      	bhi.n	8011c88 <USBD_LL_Transmit+0x60>
 8011c5a:	a201      	add	r2, pc, #4	; (adr r2, 8011c60 <USBD_LL_Transmit+0x38>)
 8011c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c60:	08011c71 	.word	0x08011c71
 8011c64:	08011c77 	.word	0x08011c77
 8011c68:	08011c7d 	.word	0x08011c7d
 8011c6c:	08011c83 	.word	0x08011c83
    case HAL_OK :
      usb_status = USBD_OK;
 8011c70:	2300      	movs	r3, #0
 8011c72:	75fb      	strb	r3, [r7, #23]
    break;
 8011c74:	e00b      	b.n	8011c8e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c76:	2303      	movs	r3, #3
 8011c78:	75fb      	strb	r3, [r7, #23]
    break;
 8011c7a:	e008      	b.n	8011c8e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	75fb      	strb	r3, [r7, #23]
    break;
 8011c80:	e005      	b.n	8011c8e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c82:	2303      	movs	r3, #3
 8011c84:	75fb      	strb	r3, [r7, #23]
    break;
 8011c86:	e002      	b.n	8011c8e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8011c88:	2303      	movs	r3, #3
 8011c8a:	75fb      	strb	r3, [r7, #23]
    break;
 8011c8c:	bf00      	nop
  }
  return usb_status;
 8011c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3718      	adds	r7, #24
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b086      	sub	sp, #24
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	607a      	str	r2, [r7, #4]
 8011ca2:	603b      	str	r3, [r7, #0]
 8011ca4:	460b      	mov	r3, r1
 8011ca6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cac:	2300      	movs	r3, #0
 8011cae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011cb6:	7af9      	ldrb	r1, [r7, #11]
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	f7f4 f9fa 	bl	80060b4 <HAL_PCD_EP_Receive>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011cc4:	7dbb      	ldrb	r3, [r7, #22]
 8011cc6:	2b03      	cmp	r3, #3
 8011cc8:	d816      	bhi.n	8011cf8 <USBD_LL_PrepareReceive+0x60>
 8011cca:	a201      	add	r2, pc, #4	; (adr r2, 8011cd0 <USBD_LL_PrepareReceive+0x38>)
 8011ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cd0:	08011ce1 	.word	0x08011ce1
 8011cd4:	08011ce7 	.word	0x08011ce7
 8011cd8:	08011ced 	.word	0x08011ced
 8011cdc:	08011cf3 	.word	0x08011cf3
    case HAL_OK :
      usb_status = USBD_OK;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	75fb      	strb	r3, [r7, #23]
    break;
 8011ce4:	e00b      	b.n	8011cfe <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011ce6:	2303      	movs	r3, #3
 8011ce8:	75fb      	strb	r3, [r7, #23]
    break;
 8011cea:	e008      	b.n	8011cfe <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011cec:	2301      	movs	r3, #1
 8011cee:	75fb      	strb	r3, [r7, #23]
    break;
 8011cf0:	e005      	b.n	8011cfe <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011cf2:	2303      	movs	r3, #3
 8011cf4:	75fb      	strb	r3, [r7, #23]
    break;
 8011cf6:	e002      	b.n	8011cfe <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8011cf8:	2303      	movs	r3, #3
 8011cfa:	75fb      	strb	r3, [r7, #23]
    break;
 8011cfc:	bf00      	nop
  }
  return usb_status;
 8011cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	3718      	adds	r7, #24
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	460b      	mov	r3, r1
 8011d12:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d1a:	78fa      	ldrb	r2, [r7, #3]
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7f4 f9fa 	bl	8006118 <HAL_PCD_EP_GetRxCount>
 8011d24:	4603      	mov	r3, r0
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3708      	adds	r7, #8
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
	...

08011d30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b082      	sub	sp, #8
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	460b      	mov	r3, r1
 8011d3a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011d3c:	78fb      	ldrb	r3, [r7, #3]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d002      	beq.n	8011d48 <HAL_PCDEx_LPM_Callback+0x18>
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d01f      	beq.n	8011d86 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011d46:	e03b      	b.n	8011dc0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6a1b      	ldr	r3, [r3, #32]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d007      	beq.n	8011d60 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011d50:	f000 f854 	bl	8011dfc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d54:	4b1c      	ldr	r3, [pc, #112]	; (8011dc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8011d56:	691b      	ldr	r3, [r3, #16]
 8011d58:	4a1b      	ldr	r2, [pc, #108]	; (8011dc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8011d5a:	f023 0306 	bic.w	r3, r3, #6
 8011d5e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	6812      	ldr	r2, [r2, #0]
 8011d6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d72:	f023 0301 	bic.w	r3, r3, #1
 8011d76:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fb fd7f 	bl	800d882 <USBD_LL_Resume>
    break;
 8011d84:	e01c      	b.n	8011dc0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	6812      	ldr	r2, [r2, #0]
 8011d94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011d98:	f043 0301 	orr.w	r3, r3, #1
 8011d9c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fb fd50 	bl	800d84a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6a1b      	ldr	r3, [r3, #32]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d005      	beq.n	8011dbe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011db2:	4b05      	ldr	r3, [pc, #20]	; (8011dc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8011db4:	691b      	ldr	r3, [r3, #16]
 8011db6:	4a04      	ldr	r2, [pc, #16]	; (8011dc8 <HAL_PCDEx_LPM_Callback+0x98>)
 8011db8:	f043 0306 	orr.w	r3, r3, #6
 8011dbc:	6113      	str	r3, [r2, #16]
    break;
 8011dbe:	bf00      	nop
}
 8011dc0:	bf00      	nop
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	e000ed00 	.word	0xe000ed00

08011dcc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011dd4:	4b03      	ldr	r3, [pc, #12]	; (8011de4 <USBD_static_malloc+0x18>)
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	370c      	adds	r7, #12
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr
 8011de2:	bf00      	nop
 8011de4:	20003b48 	.word	0x20003b48

08011de8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]

}
 8011df0:	bf00      	nop
 8011df2:	370c      	adds	r7, #12
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr

08011dfc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011e00:	f7ef f862 	bl	8000ec8 <SystemClock_Config>
}
 8011e04:	bf00      	nop
 8011e06:	bd80      	pop	{r7, pc}

08011e08 <malloc>:
 8011e08:	4b02      	ldr	r3, [pc, #8]	; (8011e14 <malloc+0xc>)
 8011e0a:	4601      	mov	r1, r0
 8011e0c:	6818      	ldr	r0, [r3, #0]
 8011e0e:	f000 b823 	b.w	8011e58 <_malloc_r>
 8011e12:	bf00      	nop
 8011e14:	20000164 	.word	0x20000164

08011e18 <sbrk_aligned>:
 8011e18:	b570      	push	{r4, r5, r6, lr}
 8011e1a:	4e0e      	ldr	r6, [pc, #56]	; (8011e54 <sbrk_aligned+0x3c>)
 8011e1c:	460c      	mov	r4, r1
 8011e1e:	6831      	ldr	r1, [r6, #0]
 8011e20:	4605      	mov	r5, r0
 8011e22:	b911      	cbnz	r1, 8011e2a <sbrk_aligned+0x12>
 8011e24:	f001 f86e 	bl	8012f04 <_sbrk_r>
 8011e28:	6030      	str	r0, [r6, #0]
 8011e2a:	4621      	mov	r1, r4
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	f001 f869 	bl	8012f04 <_sbrk_r>
 8011e32:	1c43      	adds	r3, r0, #1
 8011e34:	d00a      	beq.n	8011e4c <sbrk_aligned+0x34>
 8011e36:	1cc4      	adds	r4, r0, #3
 8011e38:	f024 0403 	bic.w	r4, r4, #3
 8011e3c:	42a0      	cmp	r0, r4
 8011e3e:	d007      	beq.n	8011e50 <sbrk_aligned+0x38>
 8011e40:	1a21      	subs	r1, r4, r0
 8011e42:	4628      	mov	r0, r5
 8011e44:	f001 f85e 	bl	8012f04 <_sbrk_r>
 8011e48:	3001      	adds	r0, #1
 8011e4a:	d101      	bne.n	8011e50 <sbrk_aligned+0x38>
 8011e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8011e50:	4620      	mov	r0, r4
 8011e52:	bd70      	pop	{r4, r5, r6, pc}
 8011e54:	20003d6c 	.word	0x20003d6c

08011e58 <_malloc_r>:
 8011e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e5c:	1ccd      	adds	r5, r1, #3
 8011e5e:	f025 0503 	bic.w	r5, r5, #3
 8011e62:	3508      	adds	r5, #8
 8011e64:	2d0c      	cmp	r5, #12
 8011e66:	bf38      	it	cc
 8011e68:	250c      	movcc	r5, #12
 8011e6a:	2d00      	cmp	r5, #0
 8011e6c:	4607      	mov	r7, r0
 8011e6e:	db01      	blt.n	8011e74 <_malloc_r+0x1c>
 8011e70:	42a9      	cmp	r1, r5
 8011e72:	d905      	bls.n	8011e80 <_malloc_r+0x28>
 8011e74:	230c      	movs	r3, #12
 8011e76:	603b      	str	r3, [r7, #0]
 8011e78:	2600      	movs	r6, #0
 8011e7a:	4630      	mov	r0, r6
 8011e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011f54 <_malloc_r+0xfc>
 8011e84:	f000 f868 	bl	8011f58 <__malloc_lock>
 8011e88:	f8d8 3000 	ldr.w	r3, [r8]
 8011e8c:	461c      	mov	r4, r3
 8011e8e:	bb5c      	cbnz	r4, 8011ee8 <_malloc_r+0x90>
 8011e90:	4629      	mov	r1, r5
 8011e92:	4638      	mov	r0, r7
 8011e94:	f7ff ffc0 	bl	8011e18 <sbrk_aligned>
 8011e98:	1c43      	adds	r3, r0, #1
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	d155      	bne.n	8011f4a <_malloc_r+0xf2>
 8011e9e:	f8d8 4000 	ldr.w	r4, [r8]
 8011ea2:	4626      	mov	r6, r4
 8011ea4:	2e00      	cmp	r6, #0
 8011ea6:	d145      	bne.n	8011f34 <_malloc_r+0xdc>
 8011ea8:	2c00      	cmp	r4, #0
 8011eaa:	d048      	beq.n	8011f3e <_malloc_r+0xe6>
 8011eac:	6823      	ldr	r3, [r4, #0]
 8011eae:	4631      	mov	r1, r6
 8011eb0:	4638      	mov	r0, r7
 8011eb2:	eb04 0903 	add.w	r9, r4, r3
 8011eb6:	f001 f825 	bl	8012f04 <_sbrk_r>
 8011eba:	4581      	cmp	r9, r0
 8011ebc:	d13f      	bne.n	8011f3e <_malloc_r+0xe6>
 8011ebe:	6821      	ldr	r1, [r4, #0]
 8011ec0:	1a6d      	subs	r5, r5, r1
 8011ec2:	4629      	mov	r1, r5
 8011ec4:	4638      	mov	r0, r7
 8011ec6:	f7ff ffa7 	bl	8011e18 <sbrk_aligned>
 8011eca:	3001      	adds	r0, #1
 8011ecc:	d037      	beq.n	8011f3e <_malloc_r+0xe6>
 8011ece:	6823      	ldr	r3, [r4, #0]
 8011ed0:	442b      	add	r3, r5
 8011ed2:	6023      	str	r3, [r4, #0]
 8011ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d038      	beq.n	8011f4e <_malloc_r+0xf6>
 8011edc:	685a      	ldr	r2, [r3, #4]
 8011ede:	42a2      	cmp	r2, r4
 8011ee0:	d12b      	bne.n	8011f3a <_malloc_r+0xe2>
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	605a      	str	r2, [r3, #4]
 8011ee6:	e00f      	b.n	8011f08 <_malloc_r+0xb0>
 8011ee8:	6822      	ldr	r2, [r4, #0]
 8011eea:	1b52      	subs	r2, r2, r5
 8011eec:	d41f      	bmi.n	8011f2e <_malloc_r+0xd6>
 8011eee:	2a0b      	cmp	r2, #11
 8011ef0:	d917      	bls.n	8011f22 <_malloc_r+0xca>
 8011ef2:	1961      	adds	r1, r4, r5
 8011ef4:	42a3      	cmp	r3, r4
 8011ef6:	6025      	str	r5, [r4, #0]
 8011ef8:	bf18      	it	ne
 8011efa:	6059      	strne	r1, [r3, #4]
 8011efc:	6863      	ldr	r3, [r4, #4]
 8011efe:	bf08      	it	eq
 8011f00:	f8c8 1000 	streq.w	r1, [r8]
 8011f04:	5162      	str	r2, [r4, r5]
 8011f06:	604b      	str	r3, [r1, #4]
 8011f08:	4638      	mov	r0, r7
 8011f0a:	f104 060b 	add.w	r6, r4, #11
 8011f0e:	f000 f829 	bl	8011f64 <__malloc_unlock>
 8011f12:	f026 0607 	bic.w	r6, r6, #7
 8011f16:	1d23      	adds	r3, r4, #4
 8011f18:	1af2      	subs	r2, r6, r3
 8011f1a:	d0ae      	beq.n	8011e7a <_malloc_r+0x22>
 8011f1c:	1b9b      	subs	r3, r3, r6
 8011f1e:	50a3      	str	r3, [r4, r2]
 8011f20:	e7ab      	b.n	8011e7a <_malloc_r+0x22>
 8011f22:	42a3      	cmp	r3, r4
 8011f24:	6862      	ldr	r2, [r4, #4]
 8011f26:	d1dd      	bne.n	8011ee4 <_malloc_r+0x8c>
 8011f28:	f8c8 2000 	str.w	r2, [r8]
 8011f2c:	e7ec      	b.n	8011f08 <_malloc_r+0xb0>
 8011f2e:	4623      	mov	r3, r4
 8011f30:	6864      	ldr	r4, [r4, #4]
 8011f32:	e7ac      	b.n	8011e8e <_malloc_r+0x36>
 8011f34:	4634      	mov	r4, r6
 8011f36:	6876      	ldr	r6, [r6, #4]
 8011f38:	e7b4      	b.n	8011ea4 <_malloc_r+0x4c>
 8011f3a:	4613      	mov	r3, r2
 8011f3c:	e7cc      	b.n	8011ed8 <_malloc_r+0x80>
 8011f3e:	230c      	movs	r3, #12
 8011f40:	603b      	str	r3, [r7, #0]
 8011f42:	4638      	mov	r0, r7
 8011f44:	f000 f80e 	bl	8011f64 <__malloc_unlock>
 8011f48:	e797      	b.n	8011e7a <_malloc_r+0x22>
 8011f4a:	6025      	str	r5, [r4, #0]
 8011f4c:	e7dc      	b.n	8011f08 <_malloc_r+0xb0>
 8011f4e:	605b      	str	r3, [r3, #4]
 8011f50:	deff      	udf	#255	; 0xff
 8011f52:	bf00      	nop
 8011f54:	20003d68 	.word	0x20003d68

08011f58 <__malloc_lock>:
 8011f58:	4801      	ldr	r0, [pc, #4]	; (8011f60 <__malloc_lock+0x8>)
 8011f5a:	f001 b81f 	b.w	8012f9c <__retarget_lock_acquire_recursive>
 8011f5e:	bf00      	nop
 8011f60:	20003eb0 	.word	0x20003eb0

08011f64 <__malloc_unlock>:
 8011f64:	4801      	ldr	r0, [pc, #4]	; (8011f6c <__malloc_unlock+0x8>)
 8011f66:	f001 b81a 	b.w	8012f9e <__retarget_lock_release_recursive>
 8011f6a:	bf00      	nop
 8011f6c:	20003eb0 	.word	0x20003eb0

08011f70 <__cvt>:
 8011f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f74:	ec55 4b10 	vmov	r4, r5, d0
 8011f78:	2d00      	cmp	r5, #0
 8011f7a:	460e      	mov	r6, r1
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	462b      	mov	r3, r5
 8011f80:	bfbb      	ittet	lt
 8011f82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f86:	461d      	movlt	r5, r3
 8011f88:	2300      	movge	r3, #0
 8011f8a:	232d      	movlt	r3, #45	; 0x2d
 8011f8c:	700b      	strb	r3, [r1, #0]
 8011f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011f94:	4691      	mov	r9, r2
 8011f96:	f023 0820 	bic.w	r8, r3, #32
 8011f9a:	bfbc      	itt	lt
 8011f9c:	4622      	movlt	r2, r4
 8011f9e:	4614      	movlt	r4, r2
 8011fa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011fa4:	d005      	beq.n	8011fb2 <__cvt+0x42>
 8011fa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011faa:	d100      	bne.n	8011fae <__cvt+0x3e>
 8011fac:	3601      	adds	r6, #1
 8011fae:	2102      	movs	r1, #2
 8011fb0:	e000      	b.n	8011fb4 <__cvt+0x44>
 8011fb2:	2103      	movs	r1, #3
 8011fb4:	ab03      	add	r3, sp, #12
 8011fb6:	9301      	str	r3, [sp, #4]
 8011fb8:	ab02      	add	r3, sp, #8
 8011fba:	9300      	str	r3, [sp, #0]
 8011fbc:	ec45 4b10 	vmov	d0, r4, r5
 8011fc0:	4653      	mov	r3, sl
 8011fc2:	4632      	mov	r2, r6
 8011fc4:	f001 f888 	bl	80130d8 <_dtoa_r>
 8011fc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011fcc:	4607      	mov	r7, r0
 8011fce:	d102      	bne.n	8011fd6 <__cvt+0x66>
 8011fd0:	f019 0f01 	tst.w	r9, #1
 8011fd4:	d022      	beq.n	801201c <__cvt+0xac>
 8011fd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011fda:	eb07 0906 	add.w	r9, r7, r6
 8011fde:	d110      	bne.n	8012002 <__cvt+0x92>
 8011fe0:	783b      	ldrb	r3, [r7, #0]
 8011fe2:	2b30      	cmp	r3, #48	; 0x30
 8011fe4:	d10a      	bne.n	8011ffc <__cvt+0x8c>
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	2300      	movs	r3, #0
 8011fea:	4620      	mov	r0, r4
 8011fec:	4629      	mov	r1, r5
 8011fee:	f7ee fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ff2:	b918      	cbnz	r0, 8011ffc <__cvt+0x8c>
 8011ff4:	f1c6 0601 	rsb	r6, r6, #1
 8011ff8:	f8ca 6000 	str.w	r6, [sl]
 8011ffc:	f8da 3000 	ldr.w	r3, [sl]
 8012000:	4499      	add	r9, r3
 8012002:	2200      	movs	r2, #0
 8012004:	2300      	movs	r3, #0
 8012006:	4620      	mov	r0, r4
 8012008:	4629      	mov	r1, r5
 801200a:	f7ee fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 801200e:	b108      	cbz	r0, 8012014 <__cvt+0xa4>
 8012010:	f8cd 900c 	str.w	r9, [sp, #12]
 8012014:	2230      	movs	r2, #48	; 0x30
 8012016:	9b03      	ldr	r3, [sp, #12]
 8012018:	454b      	cmp	r3, r9
 801201a:	d307      	bcc.n	801202c <__cvt+0xbc>
 801201c:	9b03      	ldr	r3, [sp, #12]
 801201e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012020:	1bdb      	subs	r3, r3, r7
 8012022:	4638      	mov	r0, r7
 8012024:	6013      	str	r3, [r2, #0]
 8012026:	b004      	add	sp, #16
 8012028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801202c:	1c59      	adds	r1, r3, #1
 801202e:	9103      	str	r1, [sp, #12]
 8012030:	701a      	strb	r2, [r3, #0]
 8012032:	e7f0      	b.n	8012016 <__cvt+0xa6>

08012034 <__exponent>:
 8012034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012036:	4603      	mov	r3, r0
 8012038:	2900      	cmp	r1, #0
 801203a:	bfb8      	it	lt
 801203c:	4249      	neglt	r1, r1
 801203e:	f803 2b02 	strb.w	r2, [r3], #2
 8012042:	bfb4      	ite	lt
 8012044:	222d      	movlt	r2, #45	; 0x2d
 8012046:	222b      	movge	r2, #43	; 0x2b
 8012048:	2909      	cmp	r1, #9
 801204a:	7042      	strb	r2, [r0, #1]
 801204c:	dd2a      	ble.n	80120a4 <__exponent+0x70>
 801204e:	f10d 0207 	add.w	r2, sp, #7
 8012052:	4617      	mov	r7, r2
 8012054:	260a      	movs	r6, #10
 8012056:	4694      	mov	ip, r2
 8012058:	fb91 f5f6 	sdiv	r5, r1, r6
 801205c:	fb06 1415 	mls	r4, r6, r5, r1
 8012060:	3430      	adds	r4, #48	; 0x30
 8012062:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8012066:	460c      	mov	r4, r1
 8012068:	2c63      	cmp	r4, #99	; 0x63
 801206a:	f102 32ff 	add.w	r2, r2, #4294967295
 801206e:	4629      	mov	r1, r5
 8012070:	dcf1      	bgt.n	8012056 <__exponent+0x22>
 8012072:	3130      	adds	r1, #48	; 0x30
 8012074:	f1ac 0402 	sub.w	r4, ip, #2
 8012078:	f802 1c01 	strb.w	r1, [r2, #-1]
 801207c:	1c41      	adds	r1, r0, #1
 801207e:	4622      	mov	r2, r4
 8012080:	42ba      	cmp	r2, r7
 8012082:	d30a      	bcc.n	801209a <__exponent+0x66>
 8012084:	f10d 0209 	add.w	r2, sp, #9
 8012088:	eba2 020c 	sub.w	r2, r2, ip
 801208c:	42bc      	cmp	r4, r7
 801208e:	bf88      	it	hi
 8012090:	2200      	movhi	r2, #0
 8012092:	4413      	add	r3, r2
 8012094:	1a18      	subs	r0, r3, r0
 8012096:	b003      	add	sp, #12
 8012098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801209a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801209e:	f801 5f01 	strb.w	r5, [r1, #1]!
 80120a2:	e7ed      	b.n	8012080 <__exponent+0x4c>
 80120a4:	2330      	movs	r3, #48	; 0x30
 80120a6:	3130      	adds	r1, #48	; 0x30
 80120a8:	7083      	strb	r3, [r0, #2]
 80120aa:	70c1      	strb	r1, [r0, #3]
 80120ac:	1d03      	adds	r3, r0, #4
 80120ae:	e7f1      	b.n	8012094 <__exponent+0x60>

080120b0 <_printf_float>:
 80120b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b4:	ed2d 8b02 	vpush	{d8}
 80120b8:	b08d      	sub	sp, #52	; 0x34
 80120ba:	460c      	mov	r4, r1
 80120bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80120c0:	4616      	mov	r6, r2
 80120c2:	461f      	mov	r7, r3
 80120c4:	4605      	mov	r5, r0
 80120c6:	f000 fee5 	bl	8012e94 <_localeconv_r>
 80120ca:	f8d0 a000 	ldr.w	sl, [r0]
 80120ce:	4650      	mov	r0, sl
 80120d0:	f7ee f8ce 	bl	8000270 <strlen>
 80120d4:	2300      	movs	r3, #0
 80120d6:	930a      	str	r3, [sp, #40]	; 0x28
 80120d8:	6823      	ldr	r3, [r4, #0]
 80120da:	9305      	str	r3, [sp, #20]
 80120dc:	f8d8 3000 	ldr.w	r3, [r8]
 80120e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80120e4:	3307      	adds	r3, #7
 80120e6:	f023 0307 	bic.w	r3, r3, #7
 80120ea:	f103 0208 	add.w	r2, r3, #8
 80120ee:	f8c8 2000 	str.w	r2, [r8]
 80120f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80120f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120fa:	9307      	str	r3, [sp, #28]
 80120fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8012100:	ee08 0a10 	vmov	s16, r0
 8012104:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801210c:	4b9e      	ldr	r3, [pc, #632]	; (8012388 <_printf_float+0x2d8>)
 801210e:	f04f 32ff 	mov.w	r2, #4294967295
 8012112:	f7ee fd0b 	bl	8000b2c <__aeabi_dcmpun>
 8012116:	bb88      	cbnz	r0, 801217c <_printf_float+0xcc>
 8012118:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801211c:	4b9a      	ldr	r3, [pc, #616]	; (8012388 <_printf_float+0x2d8>)
 801211e:	f04f 32ff 	mov.w	r2, #4294967295
 8012122:	f7ee fce5 	bl	8000af0 <__aeabi_dcmple>
 8012126:	bb48      	cbnz	r0, 801217c <_printf_float+0xcc>
 8012128:	2200      	movs	r2, #0
 801212a:	2300      	movs	r3, #0
 801212c:	4640      	mov	r0, r8
 801212e:	4649      	mov	r1, r9
 8012130:	f7ee fcd4 	bl	8000adc <__aeabi_dcmplt>
 8012134:	b110      	cbz	r0, 801213c <_printf_float+0x8c>
 8012136:	232d      	movs	r3, #45	; 0x2d
 8012138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801213c:	4a93      	ldr	r2, [pc, #588]	; (801238c <_printf_float+0x2dc>)
 801213e:	4b94      	ldr	r3, [pc, #592]	; (8012390 <_printf_float+0x2e0>)
 8012140:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012144:	bf94      	ite	ls
 8012146:	4690      	movls	r8, r2
 8012148:	4698      	movhi	r8, r3
 801214a:	2303      	movs	r3, #3
 801214c:	6123      	str	r3, [r4, #16]
 801214e:	9b05      	ldr	r3, [sp, #20]
 8012150:	f023 0304 	bic.w	r3, r3, #4
 8012154:	6023      	str	r3, [r4, #0]
 8012156:	f04f 0900 	mov.w	r9, #0
 801215a:	9700      	str	r7, [sp, #0]
 801215c:	4633      	mov	r3, r6
 801215e:	aa0b      	add	r2, sp, #44	; 0x2c
 8012160:	4621      	mov	r1, r4
 8012162:	4628      	mov	r0, r5
 8012164:	f000 f9da 	bl	801251c <_printf_common>
 8012168:	3001      	adds	r0, #1
 801216a:	f040 8090 	bne.w	801228e <_printf_float+0x1de>
 801216e:	f04f 30ff 	mov.w	r0, #4294967295
 8012172:	b00d      	add	sp, #52	; 0x34
 8012174:	ecbd 8b02 	vpop	{d8}
 8012178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801217c:	4642      	mov	r2, r8
 801217e:	464b      	mov	r3, r9
 8012180:	4640      	mov	r0, r8
 8012182:	4649      	mov	r1, r9
 8012184:	f7ee fcd2 	bl	8000b2c <__aeabi_dcmpun>
 8012188:	b140      	cbz	r0, 801219c <_printf_float+0xec>
 801218a:	464b      	mov	r3, r9
 801218c:	2b00      	cmp	r3, #0
 801218e:	bfbc      	itt	lt
 8012190:	232d      	movlt	r3, #45	; 0x2d
 8012192:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012196:	4a7f      	ldr	r2, [pc, #508]	; (8012394 <_printf_float+0x2e4>)
 8012198:	4b7f      	ldr	r3, [pc, #508]	; (8012398 <_printf_float+0x2e8>)
 801219a:	e7d1      	b.n	8012140 <_printf_float+0x90>
 801219c:	6863      	ldr	r3, [r4, #4]
 801219e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80121a2:	9206      	str	r2, [sp, #24]
 80121a4:	1c5a      	adds	r2, r3, #1
 80121a6:	d13f      	bne.n	8012228 <_printf_float+0x178>
 80121a8:	2306      	movs	r3, #6
 80121aa:	6063      	str	r3, [r4, #4]
 80121ac:	9b05      	ldr	r3, [sp, #20]
 80121ae:	6861      	ldr	r1, [r4, #4]
 80121b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80121b4:	2300      	movs	r3, #0
 80121b6:	9303      	str	r3, [sp, #12]
 80121b8:	ab0a      	add	r3, sp, #40	; 0x28
 80121ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80121be:	ab09      	add	r3, sp, #36	; 0x24
 80121c0:	ec49 8b10 	vmov	d0, r8, r9
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	6022      	str	r2, [r4, #0]
 80121c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80121cc:	4628      	mov	r0, r5
 80121ce:	f7ff fecf 	bl	8011f70 <__cvt>
 80121d2:	9b06      	ldr	r3, [sp, #24]
 80121d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121d6:	2b47      	cmp	r3, #71	; 0x47
 80121d8:	4680      	mov	r8, r0
 80121da:	d108      	bne.n	80121ee <_printf_float+0x13e>
 80121dc:	1cc8      	adds	r0, r1, #3
 80121de:	db02      	blt.n	80121e6 <_printf_float+0x136>
 80121e0:	6863      	ldr	r3, [r4, #4]
 80121e2:	4299      	cmp	r1, r3
 80121e4:	dd41      	ble.n	801226a <_printf_float+0x1ba>
 80121e6:	f1ab 0302 	sub.w	r3, fp, #2
 80121ea:	fa5f fb83 	uxtb.w	fp, r3
 80121ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80121f2:	d820      	bhi.n	8012236 <_printf_float+0x186>
 80121f4:	3901      	subs	r1, #1
 80121f6:	465a      	mov	r2, fp
 80121f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80121fc:	9109      	str	r1, [sp, #36]	; 0x24
 80121fe:	f7ff ff19 	bl	8012034 <__exponent>
 8012202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012204:	1813      	adds	r3, r2, r0
 8012206:	2a01      	cmp	r2, #1
 8012208:	4681      	mov	r9, r0
 801220a:	6123      	str	r3, [r4, #16]
 801220c:	dc02      	bgt.n	8012214 <_printf_float+0x164>
 801220e:	6822      	ldr	r2, [r4, #0]
 8012210:	07d2      	lsls	r2, r2, #31
 8012212:	d501      	bpl.n	8012218 <_printf_float+0x168>
 8012214:	3301      	adds	r3, #1
 8012216:	6123      	str	r3, [r4, #16]
 8012218:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801221c:	2b00      	cmp	r3, #0
 801221e:	d09c      	beq.n	801215a <_printf_float+0xaa>
 8012220:	232d      	movs	r3, #45	; 0x2d
 8012222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012226:	e798      	b.n	801215a <_printf_float+0xaa>
 8012228:	9a06      	ldr	r2, [sp, #24]
 801222a:	2a47      	cmp	r2, #71	; 0x47
 801222c:	d1be      	bne.n	80121ac <_printf_float+0xfc>
 801222e:	2b00      	cmp	r3, #0
 8012230:	d1bc      	bne.n	80121ac <_printf_float+0xfc>
 8012232:	2301      	movs	r3, #1
 8012234:	e7b9      	b.n	80121aa <_printf_float+0xfa>
 8012236:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801223a:	d118      	bne.n	801226e <_printf_float+0x1be>
 801223c:	2900      	cmp	r1, #0
 801223e:	6863      	ldr	r3, [r4, #4]
 8012240:	dd0b      	ble.n	801225a <_printf_float+0x1aa>
 8012242:	6121      	str	r1, [r4, #16]
 8012244:	b913      	cbnz	r3, 801224c <_printf_float+0x19c>
 8012246:	6822      	ldr	r2, [r4, #0]
 8012248:	07d0      	lsls	r0, r2, #31
 801224a:	d502      	bpl.n	8012252 <_printf_float+0x1a2>
 801224c:	3301      	adds	r3, #1
 801224e:	440b      	add	r3, r1
 8012250:	6123      	str	r3, [r4, #16]
 8012252:	65a1      	str	r1, [r4, #88]	; 0x58
 8012254:	f04f 0900 	mov.w	r9, #0
 8012258:	e7de      	b.n	8012218 <_printf_float+0x168>
 801225a:	b913      	cbnz	r3, 8012262 <_printf_float+0x1b2>
 801225c:	6822      	ldr	r2, [r4, #0]
 801225e:	07d2      	lsls	r2, r2, #31
 8012260:	d501      	bpl.n	8012266 <_printf_float+0x1b6>
 8012262:	3302      	adds	r3, #2
 8012264:	e7f4      	b.n	8012250 <_printf_float+0x1a0>
 8012266:	2301      	movs	r3, #1
 8012268:	e7f2      	b.n	8012250 <_printf_float+0x1a0>
 801226a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801226e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012270:	4299      	cmp	r1, r3
 8012272:	db05      	blt.n	8012280 <_printf_float+0x1d0>
 8012274:	6823      	ldr	r3, [r4, #0]
 8012276:	6121      	str	r1, [r4, #16]
 8012278:	07d8      	lsls	r0, r3, #31
 801227a:	d5ea      	bpl.n	8012252 <_printf_float+0x1a2>
 801227c:	1c4b      	adds	r3, r1, #1
 801227e:	e7e7      	b.n	8012250 <_printf_float+0x1a0>
 8012280:	2900      	cmp	r1, #0
 8012282:	bfd4      	ite	le
 8012284:	f1c1 0202 	rsble	r2, r1, #2
 8012288:	2201      	movgt	r2, #1
 801228a:	4413      	add	r3, r2
 801228c:	e7e0      	b.n	8012250 <_printf_float+0x1a0>
 801228e:	6823      	ldr	r3, [r4, #0]
 8012290:	055a      	lsls	r2, r3, #21
 8012292:	d407      	bmi.n	80122a4 <_printf_float+0x1f4>
 8012294:	6923      	ldr	r3, [r4, #16]
 8012296:	4642      	mov	r2, r8
 8012298:	4631      	mov	r1, r6
 801229a:	4628      	mov	r0, r5
 801229c:	47b8      	blx	r7
 801229e:	3001      	adds	r0, #1
 80122a0:	d12c      	bne.n	80122fc <_printf_float+0x24c>
 80122a2:	e764      	b.n	801216e <_printf_float+0xbe>
 80122a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80122a8:	f240 80e0 	bls.w	801246c <_printf_float+0x3bc>
 80122ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80122b0:	2200      	movs	r2, #0
 80122b2:	2300      	movs	r3, #0
 80122b4:	f7ee fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	d034      	beq.n	8012326 <_printf_float+0x276>
 80122bc:	4a37      	ldr	r2, [pc, #220]	; (801239c <_printf_float+0x2ec>)
 80122be:	2301      	movs	r3, #1
 80122c0:	4631      	mov	r1, r6
 80122c2:	4628      	mov	r0, r5
 80122c4:	47b8      	blx	r7
 80122c6:	3001      	adds	r0, #1
 80122c8:	f43f af51 	beq.w	801216e <_printf_float+0xbe>
 80122cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80122d0:	429a      	cmp	r2, r3
 80122d2:	db02      	blt.n	80122da <_printf_float+0x22a>
 80122d4:	6823      	ldr	r3, [r4, #0]
 80122d6:	07d8      	lsls	r0, r3, #31
 80122d8:	d510      	bpl.n	80122fc <_printf_float+0x24c>
 80122da:	ee18 3a10 	vmov	r3, s16
 80122de:	4652      	mov	r2, sl
 80122e0:	4631      	mov	r1, r6
 80122e2:	4628      	mov	r0, r5
 80122e4:	47b8      	blx	r7
 80122e6:	3001      	adds	r0, #1
 80122e8:	f43f af41 	beq.w	801216e <_printf_float+0xbe>
 80122ec:	f04f 0800 	mov.w	r8, #0
 80122f0:	f104 091a 	add.w	r9, r4, #26
 80122f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f6:	3b01      	subs	r3, #1
 80122f8:	4543      	cmp	r3, r8
 80122fa:	dc09      	bgt.n	8012310 <_printf_float+0x260>
 80122fc:	6823      	ldr	r3, [r4, #0]
 80122fe:	079b      	lsls	r3, r3, #30
 8012300:	f100 8107 	bmi.w	8012512 <_printf_float+0x462>
 8012304:	68e0      	ldr	r0, [r4, #12]
 8012306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012308:	4298      	cmp	r0, r3
 801230a:	bfb8      	it	lt
 801230c:	4618      	movlt	r0, r3
 801230e:	e730      	b.n	8012172 <_printf_float+0xc2>
 8012310:	2301      	movs	r3, #1
 8012312:	464a      	mov	r2, r9
 8012314:	4631      	mov	r1, r6
 8012316:	4628      	mov	r0, r5
 8012318:	47b8      	blx	r7
 801231a:	3001      	adds	r0, #1
 801231c:	f43f af27 	beq.w	801216e <_printf_float+0xbe>
 8012320:	f108 0801 	add.w	r8, r8, #1
 8012324:	e7e6      	b.n	80122f4 <_printf_float+0x244>
 8012326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012328:	2b00      	cmp	r3, #0
 801232a:	dc39      	bgt.n	80123a0 <_printf_float+0x2f0>
 801232c:	4a1b      	ldr	r2, [pc, #108]	; (801239c <_printf_float+0x2ec>)
 801232e:	2301      	movs	r3, #1
 8012330:	4631      	mov	r1, r6
 8012332:	4628      	mov	r0, r5
 8012334:	47b8      	blx	r7
 8012336:	3001      	adds	r0, #1
 8012338:	f43f af19 	beq.w	801216e <_printf_float+0xbe>
 801233c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012340:	4313      	orrs	r3, r2
 8012342:	d102      	bne.n	801234a <_printf_float+0x29a>
 8012344:	6823      	ldr	r3, [r4, #0]
 8012346:	07d9      	lsls	r1, r3, #31
 8012348:	d5d8      	bpl.n	80122fc <_printf_float+0x24c>
 801234a:	ee18 3a10 	vmov	r3, s16
 801234e:	4652      	mov	r2, sl
 8012350:	4631      	mov	r1, r6
 8012352:	4628      	mov	r0, r5
 8012354:	47b8      	blx	r7
 8012356:	3001      	adds	r0, #1
 8012358:	f43f af09 	beq.w	801216e <_printf_float+0xbe>
 801235c:	f04f 0900 	mov.w	r9, #0
 8012360:	f104 0a1a 	add.w	sl, r4, #26
 8012364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012366:	425b      	negs	r3, r3
 8012368:	454b      	cmp	r3, r9
 801236a:	dc01      	bgt.n	8012370 <_printf_float+0x2c0>
 801236c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801236e:	e792      	b.n	8012296 <_printf_float+0x1e6>
 8012370:	2301      	movs	r3, #1
 8012372:	4652      	mov	r2, sl
 8012374:	4631      	mov	r1, r6
 8012376:	4628      	mov	r0, r5
 8012378:	47b8      	blx	r7
 801237a:	3001      	adds	r0, #1
 801237c:	f43f aef7 	beq.w	801216e <_printf_float+0xbe>
 8012380:	f109 0901 	add.w	r9, r9, #1
 8012384:	e7ee      	b.n	8012364 <_printf_float+0x2b4>
 8012386:	bf00      	nop
 8012388:	7fefffff 	.word	0x7fefffff
 801238c:	08016968 	.word	0x08016968
 8012390:	0801696c 	.word	0x0801696c
 8012394:	08016970 	.word	0x08016970
 8012398:	08016974 	.word	0x08016974
 801239c:	08016978 	.word	0x08016978
 80123a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80123a4:	429a      	cmp	r2, r3
 80123a6:	bfa8      	it	ge
 80123a8:	461a      	movge	r2, r3
 80123aa:	2a00      	cmp	r2, #0
 80123ac:	4691      	mov	r9, r2
 80123ae:	dc37      	bgt.n	8012420 <_printf_float+0x370>
 80123b0:	f04f 0b00 	mov.w	fp, #0
 80123b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123b8:	f104 021a 	add.w	r2, r4, #26
 80123bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80123be:	9305      	str	r3, [sp, #20]
 80123c0:	eba3 0309 	sub.w	r3, r3, r9
 80123c4:	455b      	cmp	r3, fp
 80123c6:	dc33      	bgt.n	8012430 <_printf_float+0x380>
 80123c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123cc:	429a      	cmp	r2, r3
 80123ce:	db3b      	blt.n	8012448 <_printf_float+0x398>
 80123d0:	6823      	ldr	r3, [r4, #0]
 80123d2:	07da      	lsls	r2, r3, #31
 80123d4:	d438      	bmi.n	8012448 <_printf_float+0x398>
 80123d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80123da:	eba2 0903 	sub.w	r9, r2, r3
 80123de:	9b05      	ldr	r3, [sp, #20]
 80123e0:	1ad2      	subs	r2, r2, r3
 80123e2:	4591      	cmp	r9, r2
 80123e4:	bfa8      	it	ge
 80123e6:	4691      	movge	r9, r2
 80123e8:	f1b9 0f00 	cmp.w	r9, #0
 80123ec:	dc35      	bgt.n	801245a <_printf_float+0x3aa>
 80123ee:	f04f 0800 	mov.w	r8, #0
 80123f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123f6:	f104 0a1a 	add.w	sl, r4, #26
 80123fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123fe:	1a9b      	subs	r3, r3, r2
 8012400:	eba3 0309 	sub.w	r3, r3, r9
 8012404:	4543      	cmp	r3, r8
 8012406:	f77f af79 	ble.w	80122fc <_printf_float+0x24c>
 801240a:	2301      	movs	r3, #1
 801240c:	4652      	mov	r2, sl
 801240e:	4631      	mov	r1, r6
 8012410:	4628      	mov	r0, r5
 8012412:	47b8      	blx	r7
 8012414:	3001      	adds	r0, #1
 8012416:	f43f aeaa 	beq.w	801216e <_printf_float+0xbe>
 801241a:	f108 0801 	add.w	r8, r8, #1
 801241e:	e7ec      	b.n	80123fa <_printf_float+0x34a>
 8012420:	4613      	mov	r3, r2
 8012422:	4631      	mov	r1, r6
 8012424:	4642      	mov	r2, r8
 8012426:	4628      	mov	r0, r5
 8012428:	47b8      	blx	r7
 801242a:	3001      	adds	r0, #1
 801242c:	d1c0      	bne.n	80123b0 <_printf_float+0x300>
 801242e:	e69e      	b.n	801216e <_printf_float+0xbe>
 8012430:	2301      	movs	r3, #1
 8012432:	4631      	mov	r1, r6
 8012434:	4628      	mov	r0, r5
 8012436:	9205      	str	r2, [sp, #20]
 8012438:	47b8      	blx	r7
 801243a:	3001      	adds	r0, #1
 801243c:	f43f ae97 	beq.w	801216e <_printf_float+0xbe>
 8012440:	9a05      	ldr	r2, [sp, #20]
 8012442:	f10b 0b01 	add.w	fp, fp, #1
 8012446:	e7b9      	b.n	80123bc <_printf_float+0x30c>
 8012448:	ee18 3a10 	vmov	r3, s16
 801244c:	4652      	mov	r2, sl
 801244e:	4631      	mov	r1, r6
 8012450:	4628      	mov	r0, r5
 8012452:	47b8      	blx	r7
 8012454:	3001      	adds	r0, #1
 8012456:	d1be      	bne.n	80123d6 <_printf_float+0x326>
 8012458:	e689      	b.n	801216e <_printf_float+0xbe>
 801245a:	9a05      	ldr	r2, [sp, #20]
 801245c:	464b      	mov	r3, r9
 801245e:	4442      	add	r2, r8
 8012460:	4631      	mov	r1, r6
 8012462:	4628      	mov	r0, r5
 8012464:	47b8      	blx	r7
 8012466:	3001      	adds	r0, #1
 8012468:	d1c1      	bne.n	80123ee <_printf_float+0x33e>
 801246a:	e680      	b.n	801216e <_printf_float+0xbe>
 801246c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801246e:	2a01      	cmp	r2, #1
 8012470:	dc01      	bgt.n	8012476 <_printf_float+0x3c6>
 8012472:	07db      	lsls	r3, r3, #31
 8012474:	d53a      	bpl.n	80124ec <_printf_float+0x43c>
 8012476:	2301      	movs	r3, #1
 8012478:	4642      	mov	r2, r8
 801247a:	4631      	mov	r1, r6
 801247c:	4628      	mov	r0, r5
 801247e:	47b8      	blx	r7
 8012480:	3001      	adds	r0, #1
 8012482:	f43f ae74 	beq.w	801216e <_printf_float+0xbe>
 8012486:	ee18 3a10 	vmov	r3, s16
 801248a:	4652      	mov	r2, sl
 801248c:	4631      	mov	r1, r6
 801248e:	4628      	mov	r0, r5
 8012490:	47b8      	blx	r7
 8012492:	3001      	adds	r0, #1
 8012494:	f43f ae6b 	beq.w	801216e <_printf_float+0xbe>
 8012498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801249c:	2200      	movs	r2, #0
 801249e:	2300      	movs	r3, #0
 80124a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80124a4:	f7ee fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 80124a8:	b9d8      	cbnz	r0, 80124e2 <_printf_float+0x432>
 80124aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80124ae:	f108 0201 	add.w	r2, r8, #1
 80124b2:	4631      	mov	r1, r6
 80124b4:	4628      	mov	r0, r5
 80124b6:	47b8      	blx	r7
 80124b8:	3001      	adds	r0, #1
 80124ba:	d10e      	bne.n	80124da <_printf_float+0x42a>
 80124bc:	e657      	b.n	801216e <_printf_float+0xbe>
 80124be:	2301      	movs	r3, #1
 80124c0:	4652      	mov	r2, sl
 80124c2:	4631      	mov	r1, r6
 80124c4:	4628      	mov	r0, r5
 80124c6:	47b8      	blx	r7
 80124c8:	3001      	adds	r0, #1
 80124ca:	f43f ae50 	beq.w	801216e <_printf_float+0xbe>
 80124ce:	f108 0801 	add.w	r8, r8, #1
 80124d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124d4:	3b01      	subs	r3, #1
 80124d6:	4543      	cmp	r3, r8
 80124d8:	dcf1      	bgt.n	80124be <_printf_float+0x40e>
 80124da:	464b      	mov	r3, r9
 80124dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80124e0:	e6da      	b.n	8012298 <_printf_float+0x1e8>
 80124e2:	f04f 0800 	mov.w	r8, #0
 80124e6:	f104 0a1a 	add.w	sl, r4, #26
 80124ea:	e7f2      	b.n	80124d2 <_printf_float+0x422>
 80124ec:	2301      	movs	r3, #1
 80124ee:	4642      	mov	r2, r8
 80124f0:	e7df      	b.n	80124b2 <_printf_float+0x402>
 80124f2:	2301      	movs	r3, #1
 80124f4:	464a      	mov	r2, r9
 80124f6:	4631      	mov	r1, r6
 80124f8:	4628      	mov	r0, r5
 80124fa:	47b8      	blx	r7
 80124fc:	3001      	adds	r0, #1
 80124fe:	f43f ae36 	beq.w	801216e <_printf_float+0xbe>
 8012502:	f108 0801 	add.w	r8, r8, #1
 8012506:	68e3      	ldr	r3, [r4, #12]
 8012508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801250a:	1a5b      	subs	r3, r3, r1
 801250c:	4543      	cmp	r3, r8
 801250e:	dcf0      	bgt.n	80124f2 <_printf_float+0x442>
 8012510:	e6f8      	b.n	8012304 <_printf_float+0x254>
 8012512:	f04f 0800 	mov.w	r8, #0
 8012516:	f104 0919 	add.w	r9, r4, #25
 801251a:	e7f4      	b.n	8012506 <_printf_float+0x456>

0801251c <_printf_common>:
 801251c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012520:	4616      	mov	r6, r2
 8012522:	4699      	mov	r9, r3
 8012524:	688a      	ldr	r2, [r1, #8]
 8012526:	690b      	ldr	r3, [r1, #16]
 8012528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801252c:	4293      	cmp	r3, r2
 801252e:	bfb8      	it	lt
 8012530:	4613      	movlt	r3, r2
 8012532:	6033      	str	r3, [r6, #0]
 8012534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012538:	4607      	mov	r7, r0
 801253a:	460c      	mov	r4, r1
 801253c:	b10a      	cbz	r2, 8012542 <_printf_common+0x26>
 801253e:	3301      	adds	r3, #1
 8012540:	6033      	str	r3, [r6, #0]
 8012542:	6823      	ldr	r3, [r4, #0]
 8012544:	0699      	lsls	r1, r3, #26
 8012546:	bf42      	ittt	mi
 8012548:	6833      	ldrmi	r3, [r6, #0]
 801254a:	3302      	addmi	r3, #2
 801254c:	6033      	strmi	r3, [r6, #0]
 801254e:	6825      	ldr	r5, [r4, #0]
 8012550:	f015 0506 	ands.w	r5, r5, #6
 8012554:	d106      	bne.n	8012564 <_printf_common+0x48>
 8012556:	f104 0a19 	add.w	sl, r4, #25
 801255a:	68e3      	ldr	r3, [r4, #12]
 801255c:	6832      	ldr	r2, [r6, #0]
 801255e:	1a9b      	subs	r3, r3, r2
 8012560:	42ab      	cmp	r3, r5
 8012562:	dc26      	bgt.n	80125b2 <_printf_common+0x96>
 8012564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012568:	1e13      	subs	r3, r2, #0
 801256a:	6822      	ldr	r2, [r4, #0]
 801256c:	bf18      	it	ne
 801256e:	2301      	movne	r3, #1
 8012570:	0692      	lsls	r2, r2, #26
 8012572:	d42b      	bmi.n	80125cc <_printf_common+0xb0>
 8012574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012578:	4649      	mov	r1, r9
 801257a:	4638      	mov	r0, r7
 801257c:	47c0      	blx	r8
 801257e:	3001      	adds	r0, #1
 8012580:	d01e      	beq.n	80125c0 <_printf_common+0xa4>
 8012582:	6823      	ldr	r3, [r4, #0]
 8012584:	6922      	ldr	r2, [r4, #16]
 8012586:	f003 0306 	and.w	r3, r3, #6
 801258a:	2b04      	cmp	r3, #4
 801258c:	bf02      	ittt	eq
 801258e:	68e5      	ldreq	r5, [r4, #12]
 8012590:	6833      	ldreq	r3, [r6, #0]
 8012592:	1aed      	subeq	r5, r5, r3
 8012594:	68a3      	ldr	r3, [r4, #8]
 8012596:	bf0c      	ite	eq
 8012598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801259c:	2500      	movne	r5, #0
 801259e:	4293      	cmp	r3, r2
 80125a0:	bfc4      	itt	gt
 80125a2:	1a9b      	subgt	r3, r3, r2
 80125a4:	18ed      	addgt	r5, r5, r3
 80125a6:	2600      	movs	r6, #0
 80125a8:	341a      	adds	r4, #26
 80125aa:	42b5      	cmp	r5, r6
 80125ac:	d11a      	bne.n	80125e4 <_printf_common+0xc8>
 80125ae:	2000      	movs	r0, #0
 80125b0:	e008      	b.n	80125c4 <_printf_common+0xa8>
 80125b2:	2301      	movs	r3, #1
 80125b4:	4652      	mov	r2, sl
 80125b6:	4649      	mov	r1, r9
 80125b8:	4638      	mov	r0, r7
 80125ba:	47c0      	blx	r8
 80125bc:	3001      	adds	r0, #1
 80125be:	d103      	bne.n	80125c8 <_printf_common+0xac>
 80125c0:	f04f 30ff 	mov.w	r0, #4294967295
 80125c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c8:	3501      	adds	r5, #1
 80125ca:	e7c6      	b.n	801255a <_printf_common+0x3e>
 80125cc:	18e1      	adds	r1, r4, r3
 80125ce:	1c5a      	adds	r2, r3, #1
 80125d0:	2030      	movs	r0, #48	; 0x30
 80125d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80125d6:	4422      	add	r2, r4
 80125d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80125dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80125e0:	3302      	adds	r3, #2
 80125e2:	e7c7      	b.n	8012574 <_printf_common+0x58>
 80125e4:	2301      	movs	r3, #1
 80125e6:	4622      	mov	r2, r4
 80125e8:	4649      	mov	r1, r9
 80125ea:	4638      	mov	r0, r7
 80125ec:	47c0      	blx	r8
 80125ee:	3001      	adds	r0, #1
 80125f0:	d0e6      	beq.n	80125c0 <_printf_common+0xa4>
 80125f2:	3601      	adds	r6, #1
 80125f4:	e7d9      	b.n	80125aa <_printf_common+0x8e>
	...

080125f8 <_printf_i>:
 80125f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125fc:	7e0f      	ldrb	r7, [r1, #24]
 80125fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012600:	2f78      	cmp	r7, #120	; 0x78
 8012602:	4691      	mov	r9, r2
 8012604:	4680      	mov	r8, r0
 8012606:	460c      	mov	r4, r1
 8012608:	469a      	mov	sl, r3
 801260a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801260e:	d807      	bhi.n	8012620 <_printf_i+0x28>
 8012610:	2f62      	cmp	r7, #98	; 0x62
 8012612:	d80a      	bhi.n	801262a <_printf_i+0x32>
 8012614:	2f00      	cmp	r7, #0
 8012616:	f000 80d4 	beq.w	80127c2 <_printf_i+0x1ca>
 801261a:	2f58      	cmp	r7, #88	; 0x58
 801261c:	f000 80c0 	beq.w	80127a0 <_printf_i+0x1a8>
 8012620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012628:	e03a      	b.n	80126a0 <_printf_i+0xa8>
 801262a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801262e:	2b15      	cmp	r3, #21
 8012630:	d8f6      	bhi.n	8012620 <_printf_i+0x28>
 8012632:	a101      	add	r1, pc, #4	; (adr r1, 8012638 <_printf_i+0x40>)
 8012634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012638:	08012691 	.word	0x08012691
 801263c:	080126a5 	.word	0x080126a5
 8012640:	08012621 	.word	0x08012621
 8012644:	08012621 	.word	0x08012621
 8012648:	08012621 	.word	0x08012621
 801264c:	08012621 	.word	0x08012621
 8012650:	080126a5 	.word	0x080126a5
 8012654:	08012621 	.word	0x08012621
 8012658:	08012621 	.word	0x08012621
 801265c:	08012621 	.word	0x08012621
 8012660:	08012621 	.word	0x08012621
 8012664:	080127a9 	.word	0x080127a9
 8012668:	080126d1 	.word	0x080126d1
 801266c:	08012763 	.word	0x08012763
 8012670:	08012621 	.word	0x08012621
 8012674:	08012621 	.word	0x08012621
 8012678:	080127cb 	.word	0x080127cb
 801267c:	08012621 	.word	0x08012621
 8012680:	080126d1 	.word	0x080126d1
 8012684:	08012621 	.word	0x08012621
 8012688:	08012621 	.word	0x08012621
 801268c:	0801276b 	.word	0x0801276b
 8012690:	682b      	ldr	r3, [r5, #0]
 8012692:	1d1a      	adds	r2, r3, #4
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	602a      	str	r2, [r5, #0]
 8012698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801269c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80126a0:	2301      	movs	r3, #1
 80126a2:	e09f      	b.n	80127e4 <_printf_i+0x1ec>
 80126a4:	6820      	ldr	r0, [r4, #0]
 80126a6:	682b      	ldr	r3, [r5, #0]
 80126a8:	0607      	lsls	r7, r0, #24
 80126aa:	f103 0104 	add.w	r1, r3, #4
 80126ae:	6029      	str	r1, [r5, #0]
 80126b0:	d501      	bpl.n	80126b6 <_printf_i+0xbe>
 80126b2:	681e      	ldr	r6, [r3, #0]
 80126b4:	e003      	b.n	80126be <_printf_i+0xc6>
 80126b6:	0646      	lsls	r6, r0, #25
 80126b8:	d5fb      	bpl.n	80126b2 <_printf_i+0xba>
 80126ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80126be:	2e00      	cmp	r6, #0
 80126c0:	da03      	bge.n	80126ca <_printf_i+0xd2>
 80126c2:	232d      	movs	r3, #45	; 0x2d
 80126c4:	4276      	negs	r6, r6
 80126c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126ca:	485a      	ldr	r0, [pc, #360]	; (8012834 <_printf_i+0x23c>)
 80126cc:	230a      	movs	r3, #10
 80126ce:	e012      	b.n	80126f6 <_printf_i+0xfe>
 80126d0:	682b      	ldr	r3, [r5, #0]
 80126d2:	6820      	ldr	r0, [r4, #0]
 80126d4:	1d19      	adds	r1, r3, #4
 80126d6:	6029      	str	r1, [r5, #0]
 80126d8:	0605      	lsls	r5, r0, #24
 80126da:	d501      	bpl.n	80126e0 <_printf_i+0xe8>
 80126dc:	681e      	ldr	r6, [r3, #0]
 80126de:	e002      	b.n	80126e6 <_printf_i+0xee>
 80126e0:	0641      	lsls	r1, r0, #25
 80126e2:	d5fb      	bpl.n	80126dc <_printf_i+0xe4>
 80126e4:	881e      	ldrh	r6, [r3, #0]
 80126e6:	4853      	ldr	r0, [pc, #332]	; (8012834 <_printf_i+0x23c>)
 80126e8:	2f6f      	cmp	r7, #111	; 0x6f
 80126ea:	bf0c      	ite	eq
 80126ec:	2308      	moveq	r3, #8
 80126ee:	230a      	movne	r3, #10
 80126f0:	2100      	movs	r1, #0
 80126f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80126f6:	6865      	ldr	r5, [r4, #4]
 80126f8:	60a5      	str	r5, [r4, #8]
 80126fa:	2d00      	cmp	r5, #0
 80126fc:	bfa2      	ittt	ge
 80126fe:	6821      	ldrge	r1, [r4, #0]
 8012700:	f021 0104 	bicge.w	r1, r1, #4
 8012704:	6021      	strge	r1, [r4, #0]
 8012706:	b90e      	cbnz	r6, 801270c <_printf_i+0x114>
 8012708:	2d00      	cmp	r5, #0
 801270a:	d04b      	beq.n	80127a4 <_printf_i+0x1ac>
 801270c:	4615      	mov	r5, r2
 801270e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012712:	fb03 6711 	mls	r7, r3, r1, r6
 8012716:	5dc7      	ldrb	r7, [r0, r7]
 8012718:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801271c:	4637      	mov	r7, r6
 801271e:	42bb      	cmp	r3, r7
 8012720:	460e      	mov	r6, r1
 8012722:	d9f4      	bls.n	801270e <_printf_i+0x116>
 8012724:	2b08      	cmp	r3, #8
 8012726:	d10b      	bne.n	8012740 <_printf_i+0x148>
 8012728:	6823      	ldr	r3, [r4, #0]
 801272a:	07de      	lsls	r6, r3, #31
 801272c:	d508      	bpl.n	8012740 <_printf_i+0x148>
 801272e:	6923      	ldr	r3, [r4, #16]
 8012730:	6861      	ldr	r1, [r4, #4]
 8012732:	4299      	cmp	r1, r3
 8012734:	bfde      	ittt	le
 8012736:	2330      	movle	r3, #48	; 0x30
 8012738:	f805 3c01 	strble.w	r3, [r5, #-1]
 801273c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012740:	1b52      	subs	r2, r2, r5
 8012742:	6122      	str	r2, [r4, #16]
 8012744:	f8cd a000 	str.w	sl, [sp]
 8012748:	464b      	mov	r3, r9
 801274a:	aa03      	add	r2, sp, #12
 801274c:	4621      	mov	r1, r4
 801274e:	4640      	mov	r0, r8
 8012750:	f7ff fee4 	bl	801251c <_printf_common>
 8012754:	3001      	adds	r0, #1
 8012756:	d14a      	bne.n	80127ee <_printf_i+0x1f6>
 8012758:	f04f 30ff 	mov.w	r0, #4294967295
 801275c:	b004      	add	sp, #16
 801275e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012762:	6823      	ldr	r3, [r4, #0]
 8012764:	f043 0320 	orr.w	r3, r3, #32
 8012768:	6023      	str	r3, [r4, #0]
 801276a:	4833      	ldr	r0, [pc, #204]	; (8012838 <_printf_i+0x240>)
 801276c:	2778      	movs	r7, #120	; 0x78
 801276e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	6829      	ldr	r1, [r5, #0]
 8012776:	061f      	lsls	r7, r3, #24
 8012778:	f851 6b04 	ldr.w	r6, [r1], #4
 801277c:	d402      	bmi.n	8012784 <_printf_i+0x18c>
 801277e:	065f      	lsls	r7, r3, #25
 8012780:	bf48      	it	mi
 8012782:	b2b6      	uxthmi	r6, r6
 8012784:	07df      	lsls	r7, r3, #31
 8012786:	bf48      	it	mi
 8012788:	f043 0320 	orrmi.w	r3, r3, #32
 801278c:	6029      	str	r1, [r5, #0]
 801278e:	bf48      	it	mi
 8012790:	6023      	strmi	r3, [r4, #0]
 8012792:	b91e      	cbnz	r6, 801279c <_printf_i+0x1a4>
 8012794:	6823      	ldr	r3, [r4, #0]
 8012796:	f023 0320 	bic.w	r3, r3, #32
 801279a:	6023      	str	r3, [r4, #0]
 801279c:	2310      	movs	r3, #16
 801279e:	e7a7      	b.n	80126f0 <_printf_i+0xf8>
 80127a0:	4824      	ldr	r0, [pc, #144]	; (8012834 <_printf_i+0x23c>)
 80127a2:	e7e4      	b.n	801276e <_printf_i+0x176>
 80127a4:	4615      	mov	r5, r2
 80127a6:	e7bd      	b.n	8012724 <_printf_i+0x12c>
 80127a8:	682b      	ldr	r3, [r5, #0]
 80127aa:	6826      	ldr	r6, [r4, #0]
 80127ac:	6961      	ldr	r1, [r4, #20]
 80127ae:	1d18      	adds	r0, r3, #4
 80127b0:	6028      	str	r0, [r5, #0]
 80127b2:	0635      	lsls	r5, r6, #24
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	d501      	bpl.n	80127bc <_printf_i+0x1c4>
 80127b8:	6019      	str	r1, [r3, #0]
 80127ba:	e002      	b.n	80127c2 <_printf_i+0x1ca>
 80127bc:	0670      	lsls	r0, r6, #25
 80127be:	d5fb      	bpl.n	80127b8 <_printf_i+0x1c0>
 80127c0:	8019      	strh	r1, [r3, #0]
 80127c2:	2300      	movs	r3, #0
 80127c4:	6123      	str	r3, [r4, #16]
 80127c6:	4615      	mov	r5, r2
 80127c8:	e7bc      	b.n	8012744 <_printf_i+0x14c>
 80127ca:	682b      	ldr	r3, [r5, #0]
 80127cc:	1d1a      	adds	r2, r3, #4
 80127ce:	602a      	str	r2, [r5, #0]
 80127d0:	681d      	ldr	r5, [r3, #0]
 80127d2:	6862      	ldr	r2, [r4, #4]
 80127d4:	2100      	movs	r1, #0
 80127d6:	4628      	mov	r0, r5
 80127d8:	f7ed fcfa 	bl	80001d0 <memchr>
 80127dc:	b108      	cbz	r0, 80127e2 <_printf_i+0x1ea>
 80127de:	1b40      	subs	r0, r0, r5
 80127e0:	6060      	str	r0, [r4, #4]
 80127e2:	6863      	ldr	r3, [r4, #4]
 80127e4:	6123      	str	r3, [r4, #16]
 80127e6:	2300      	movs	r3, #0
 80127e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127ec:	e7aa      	b.n	8012744 <_printf_i+0x14c>
 80127ee:	6923      	ldr	r3, [r4, #16]
 80127f0:	462a      	mov	r2, r5
 80127f2:	4649      	mov	r1, r9
 80127f4:	4640      	mov	r0, r8
 80127f6:	47d0      	blx	sl
 80127f8:	3001      	adds	r0, #1
 80127fa:	d0ad      	beq.n	8012758 <_printf_i+0x160>
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	079b      	lsls	r3, r3, #30
 8012800:	d413      	bmi.n	801282a <_printf_i+0x232>
 8012802:	68e0      	ldr	r0, [r4, #12]
 8012804:	9b03      	ldr	r3, [sp, #12]
 8012806:	4298      	cmp	r0, r3
 8012808:	bfb8      	it	lt
 801280a:	4618      	movlt	r0, r3
 801280c:	e7a6      	b.n	801275c <_printf_i+0x164>
 801280e:	2301      	movs	r3, #1
 8012810:	4632      	mov	r2, r6
 8012812:	4649      	mov	r1, r9
 8012814:	4640      	mov	r0, r8
 8012816:	47d0      	blx	sl
 8012818:	3001      	adds	r0, #1
 801281a:	d09d      	beq.n	8012758 <_printf_i+0x160>
 801281c:	3501      	adds	r5, #1
 801281e:	68e3      	ldr	r3, [r4, #12]
 8012820:	9903      	ldr	r1, [sp, #12]
 8012822:	1a5b      	subs	r3, r3, r1
 8012824:	42ab      	cmp	r3, r5
 8012826:	dcf2      	bgt.n	801280e <_printf_i+0x216>
 8012828:	e7eb      	b.n	8012802 <_printf_i+0x20a>
 801282a:	2500      	movs	r5, #0
 801282c:	f104 0619 	add.w	r6, r4, #25
 8012830:	e7f5      	b.n	801281e <_printf_i+0x226>
 8012832:	bf00      	nop
 8012834:	0801697a 	.word	0x0801697a
 8012838:	0801698b 	.word	0x0801698b

0801283c <_scanf_float>:
 801283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012840:	b087      	sub	sp, #28
 8012842:	4617      	mov	r7, r2
 8012844:	9303      	str	r3, [sp, #12]
 8012846:	688b      	ldr	r3, [r1, #8]
 8012848:	1e5a      	subs	r2, r3, #1
 801284a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801284e:	bf83      	ittte	hi
 8012850:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012854:	195b      	addhi	r3, r3, r5
 8012856:	9302      	strhi	r3, [sp, #8]
 8012858:	2300      	movls	r3, #0
 801285a:	bf86      	itte	hi
 801285c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012860:	608b      	strhi	r3, [r1, #8]
 8012862:	9302      	strls	r3, [sp, #8]
 8012864:	680b      	ldr	r3, [r1, #0]
 8012866:	468b      	mov	fp, r1
 8012868:	2500      	movs	r5, #0
 801286a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801286e:	f84b 3b1c 	str.w	r3, [fp], #28
 8012872:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012876:	4680      	mov	r8, r0
 8012878:	460c      	mov	r4, r1
 801287a:	465e      	mov	r6, fp
 801287c:	46aa      	mov	sl, r5
 801287e:	46a9      	mov	r9, r5
 8012880:	9501      	str	r5, [sp, #4]
 8012882:	68a2      	ldr	r2, [r4, #8]
 8012884:	b152      	cbz	r2, 801289c <_scanf_float+0x60>
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	2b4e      	cmp	r3, #78	; 0x4e
 801288c:	d864      	bhi.n	8012958 <_scanf_float+0x11c>
 801288e:	2b40      	cmp	r3, #64	; 0x40
 8012890:	d83c      	bhi.n	801290c <_scanf_float+0xd0>
 8012892:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012896:	b2c8      	uxtb	r0, r1
 8012898:	280e      	cmp	r0, #14
 801289a:	d93a      	bls.n	8012912 <_scanf_float+0xd6>
 801289c:	f1b9 0f00 	cmp.w	r9, #0
 80128a0:	d003      	beq.n	80128aa <_scanf_float+0x6e>
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128ae:	f1ba 0f01 	cmp.w	sl, #1
 80128b2:	f200 8113 	bhi.w	8012adc <_scanf_float+0x2a0>
 80128b6:	455e      	cmp	r6, fp
 80128b8:	f200 8105 	bhi.w	8012ac6 <_scanf_float+0x28a>
 80128bc:	2501      	movs	r5, #1
 80128be:	4628      	mov	r0, r5
 80128c0:	b007      	add	sp, #28
 80128c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80128ca:	2a0d      	cmp	r2, #13
 80128cc:	d8e6      	bhi.n	801289c <_scanf_float+0x60>
 80128ce:	a101      	add	r1, pc, #4	; (adr r1, 80128d4 <_scanf_float+0x98>)
 80128d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80128d4:	08012a13 	.word	0x08012a13
 80128d8:	0801289d 	.word	0x0801289d
 80128dc:	0801289d 	.word	0x0801289d
 80128e0:	0801289d 	.word	0x0801289d
 80128e4:	08012a73 	.word	0x08012a73
 80128e8:	08012a4b 	.word	0x08012a4b
 80128ec:	0801289d 	.word	0x0801289d
 80128f0:	0801289d 	.word	0x0801289d
 80128f4:	08012a21 	.word	0x08012a21
 80128f8:	0801289d 	.word	0x0801289d
 80128fc:	0801289d 	.word	0x0801289d
 8012900:	0801289d 	.word	0x0801289d
 8012904:	0801289d 	.word	0x0801289d
 8012908:	080129d9 	.word	0x080129d9
 801290c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012910:	e7db      	b.n	80128ca <_scanf_float+0x8e>
 8012912:	290e      	cmp	r1, #14
 8012914:	d8c2      	bhi.n	801289c <_scanf_float+0x60>
 8012916:	a001      	add	r0, pc, #4	; (adr r0, 801291c <_scanf_float+0xe0>)
 8012918:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801291c:	080129cb 	.word	0x080129cb
 8012920:	0801289d 	.word	0x0801289d
 8012924:	080129cb 	.word	0x080129cb
 8012928:	08012a5f 	.word	0x08012a5f
 801292c:	0801289d 	.word	0x0801289d
 8012930:	08012979 	.word	0x08012979
 8012934:	080129b5 	.word	0x080129b5
 8012938:	080129b5 	.word	0x080129b5
 801293c:	080129b5 	.word	0x080129b5
 8012940:	080129b5 	.word	0x080129b5
 8012944:	080129b5 	.word	0x080129b5
 8012948:	080129b5 	.word	0x080129b5
 801294c:	080129b5 	.word	0x080129b5
 8012950:	080129b5 	.word	0x080129b5
 8012954:	080129b5 	.word	0x080129b5
 8012958:	2b6e      	cmp	r3, #110	; 0x6e
 801295a:	d809      	bhi.n	8012970 <_scanf_float+0x134>
 801295c:	2b60      	cmp	r3, #96	; 0x60
 801295e:	d8b2      	bhi.n	80128c6 <_scanf_float+0x8a>
 8012960:	2b54      	cmp	r3, #84	; 0x54
 8012962:	d077      	beq.n	8012a54 <_scanf_float+0x218>
 8012964:	2b59      	cmp	r3, #89	; 0x59
 8012966:	d199      	bne.n	801289c <_scanf_float+0x60>
 8012968:	2d07      	cmp	r5, #7
 801296a:	d197      	bne.n	801289c <_scanf_float+0x60>
 801296c:	2508      	movs	r5, #8
 801296e:	e029      	b.n	80129c4 <_scanf_float+0x188>
 8012970:	2b74      	cmp	r3, #116	; 0x74
 8012972:	d06f      	beq.n	8012a54 <_scanf_float+0x218>
 8012974:	2b79      	cmp	r3, #121	; 0x79
 8012976:	e7f6      	b.n	8012966 <_scanf_float+0x12a>
 8012978:	6821      	ldr	r1, [r4, #0]
 801297a:	05c8      	lsls	r0, r1, #23
 801297c:	d51a      	bpl.n	80129b4 <_scanf_float+0x178>
 801297e:	9b02      	ldr	r3, [sp, #8]
 8012980:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012984:	6021      	str	r1, [r4, #0]
 8012986:	f109 0901 	add.w	r9, r9, #1
 801298a:	b11b      	cbz	r3, 8012994 <_scanf_float+0x158>
 801298c:	3b01      	subs	r3, #1
 801298e:	3201      	adds	r2, #1
 8012990:	9302      	str	r3, [sp, #8]
 8012992:	60a2      	str	r2, [r4, #8]
 8012994:	68a3      	ldr	r3, [r4, #8]
 8012996:	3b01      	subs	r3, #1
 8012998:	60a3      	str	r3, [r4, #8]
 801299a:	6923      	ldr	r3, [r4, #16]
 801299c:	3301      	adds	r3, #1
 801299e:	6123      	str	r3, [r4, #16]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	3b01      	subs	r3, #1
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	607b      	str	r3, [r7, #4]
 80129a8:	f340 8084 	ble.w	8012ab4 <_scanf_float+0x278>
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	3301      	adds	r3, #1
 80129b0:	603b      	str	r3, [r7, #0]
 80129b2:	e766      	b.n	8012882 <_scanf_float+0x46>
 80129b4:	eb1a 0f05 	cmn.w	sl, r5
 80129b8:	f47f af70 	bne.w	801289c <_scanf_float+0x60>
 80129bc:	6822      	ldr	r2, [r4, #0]
 80129be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80129c2:	6022      	str	r2, [r4, #0]
 80129c4:	f806 3b01 	strb.w	r3, [r6], #1
 80129c8:	e7e4      	b.n	8012994 <_scanf_float+0x158>
 80129ca:	6822      	ldr	r2, [r4, #0]
 80129cc:	0610      	lsls	r0, r2, #24
 80129ce:	f57f af65 	bpl.w	801289c <_scanf_float+0x60>
 80129d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80129d6:	e7f4      	b.n	80129c2 <_scanf_float+0x186>
 80129d8:	f1ba 0f00 	cmp.w	sl, #0
 80129dc:	d10e      	bne.n	80129fc <_scanf_float+0x1c0>
 80129de:	f1b9 0f00 	cmp.w	r9, #0
 80129e2:	d10e      	bne.n	8012a02 <_scanf_float+0x1c6>
 80129e4:	6822      	ldr	r2, [r4, #0]
 80129e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80129ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80129ee:	d108      	bne.n	8012a02 <_scanf_float+0x1c6>
 80129f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80129f4:	6022      	str	r2, [r4, #0]
 80129f6:	f04f 0a01 	mov.w	sl, #1
 80129fa:	e7e3      	b.n	80129c4 <_scanf_float+0x188>
 80129fc:	f1ba 0f02 	cmp.w	sl, #2
 8012a00:	d055      	beq.n	8012aae <_scanf_float+0x272>
 8012a02:	2d01      	cmp	r5, #1
 8012a04:	d002      	beq.n	8012a0c <_scanf_float+0x1d0>
 8012a06:	2d04      	cmp	r5, #4
 8012a08:	f47f af48 	bne.w	801289c <_scanf_float+0x60>
 8012a0c:	3501      	adds	r5, #1
 8012a0e:	b2ed      	uxtb	r5, r5
 8012a10:	e7d8      	b.n	80129c4 <_scanf_float+0x188>
 8012a12:	f1ba 0f01 	cmp.w	sl, #1
 8012a16:	f47f af41 	bne.w	801289c <_scanf_float+0x60>
 8012a1a:	f04f 0a02 	mov.w	sl, #2
 8012a1e:	e7d1      	b.n	80129c4 <_scanf_float+0x188>
 8012a20:	b97d      	cbnz	r5, 8012a42 <_scanf_float+0x206>
 8012a22:	f1b9 0f00 	cmp.w	r9, #0
 8012a26:	f47f af3c 	bne.w	80128a2 <_scanf_float+0x66>
 8012a2a:	6822      	ldr	r2, [r4, #0]
 8012a2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012a30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012a34:	f47f af39 	bne.w	80128aa <_scanf_float+0x6e>
 8012a38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012a3c:	6022      	str	r2, [r4, #0]
 8012a3e:	2501      	movs	r5, #1
 8012a40:	e7c0      	b.n	80129c4 <_scanf_float+0x188>
 8012a42:	2d03      	cmp	r5, #3
 8012a44:	d0e2      	beq.n	8012a0c <_scanf_float+0x1d0>
 8012a46:	2d05      	cmp	r5, #5
 8012a48:	e7de      	b.n	8012a08 <_scanf_float+0x1cc>
 8012a4a:	2d02      	cmp	r5, #2
 8012a4c:	f47f af26 	bne.w	801289c <_scanf_float+0x60>
 8012a50:	2503      	movs	r5, #3
 8012a52:	e7b7      	b.n	80129c4 <_scanf_float+0x188>
 8012a54:	2d06      	cmp	r5, #6
 8012a56:	f47f af21 	bne.w	801289c <_scanf_float+0x60>
 8012a5a:	2507      	movs	r5, #7
 8012a5c:	e7b2      	b.n	80129c4 <_scanf_float+0x188>
 8012a5e:	6822      	ldr	r2, [r4, #0]
 8012a60:	0591      	lsls	r1, r2, #22
 8012a62:	f57f af1b 	bpl.w	801289c <_scanf_float+0x60>
 8012a66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012a6a:	6022      	str	r2, [r4, #0]
 8012a6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012a70:	e7a8      	b.n	80129c4 <_scanf_float+0x188>
 8012a72:	6822      	ldr	r2, [r4, #0]
 8012a74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012a78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012a7c:	d006      	beq.n	8012a8c <_scanf_float+0x250>
 8012a7e:	0550      	lsls	r0, r2, #21
 8012a80:	f57f af0c 	bpl.w	801289c <_scanf_float+0x60>
 8012a84:	f1b9 0f00 	cmp.w	r9, #0
 8012a88:	f43f af0f 	beq.w	80128aa <_scanf_float+0x6e>
 8012a8c:	0591      	lsls	r1, r2, #22
 8012a8e:	bf58      	it	pl
 8012a90:	9901      	ldrpl	r1, [sp, #4]
 8012a92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012a96:	bf58      	it	pl
 8012a98:	eba9 0101 	subpl.w	r1, r9, r1
 8012a9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012aa0:	bf58      	it	pl
 8012aa2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012aa6:	6022      	str	r2, [r4, #0]
 8012aa8:	f04f 0900 	mov.w	r9, #0
 8012aac:	e78a      	b.n	80129c4 <_scanf_float+0x188>
 8012aae:	f04f 0a03 	mov.w	sl, #3
 8012ab2:	e787      	b.n	80129c4 <_scanf_float+0x188>
 8012ab4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012ab8:	4639      	mov	r1, r7
 8012aba:	4640      	mov	r0, r8
 8012abc:	4798      	blx	r3
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	f43f aedf 	beq.w	8012882 <_scanf_float+0x46>
 8012ac4:	e6ea      	b.n	801289c <_scanf_float+0x60>
 8012ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012aca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012ace:	463a      	mov	r2, r7
 8012ad0:	4640      	mov	r0, r8
 8012ad2:	4798      	blx	r3
 8012ad4:	6923      	ldr	r3, [r4, #16]
 8012ad6:	3b01      	subs	r3, #1
 8012ad8:	6123      	str	r3, [r4, #16]
 8012ada:	e6ec      	b.n	80128b6 <_scanf_float+0x7a>
 8012adc:	1e6b      	subs	r3, r5, #1
 8012ade:	2b06      	cmp	r3, #6
 8012ae0:	d825      	bhi.n	8012b2e <_scanf_float+0x2f2>
 8012ae2:	2d02      	cmp	r5, #2
 8012ae4:	d836      	bhi.n	8012b54 <_scanf_float+0x318>
 8012ae6:	455e      	cmp	r6, fp
 8012ae8:	f67f aee8 	bls.w	80128bc <_scanf_float+0x80>
 8012aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012af0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012af4:	463a      	mov	r2, r7
 8012af6:	4640      	mov	r0, r8
 8012af8:	4798      	blx	r3
 8012afa:	6923      	ldr	r3, [r4, #16]
 8012afc:	3b01      	subs	r3, #1
 8012afe:	6123      	str	r3, [r4, #16]
 8012b00:	e7f1      	b.n	8012ae6 <_scanf_float+0x2aa>
 8012b02:	9802      	ldr	r0, [sp, #8]
 8012b04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012b0c:	9002      	str	r0, [sp, #8]
 8012b0e:	463a      	mov	r2, r7
 8012b10:	4640      	mov	r0, r8
 8012b12:	4798      	blx	r3
 8012b14:	6923      	ldr	r3, [r4, #16]
 8012b16:	3b01      	subs	r3, #1
 8012b18:	6123      	str	r3, [r4, #16]
 8012b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b1e:	fa5f fa8a 	uxtb.w	sl, sl
 8012b22:	f1ba 0f02 	cmp.w	sl, #2
 8012b26:	d1ec      	bne.n	8012b02 <_scanf_float+0x2c6>
 8012b28:	3d03      	subs	r5, #3
 8012b2a:	b2ed      	uxtb	r5, r5
 8012b2c:	1b76      	subs	r6, r6, r5
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	05da      	lsls	r2, r3, #23
 8012b32:	d52f      	bpl.n	8012b94 <_scanf_float+0x358>
 8012b34:	055b      	lsls	r3, r3, #21
 8012b36:	d510      	bpl.n	8012b5a <_scanf_float+0x31e>
 8012b38:	455e      	cmp	r6, fp
 8012b3a:	f67f aebf 	bls.w	80128bc <_scanf_float+0x80>
 8012b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012b46:	463a      	mov	r2, r7
 8012b48:	4640      	mov	r0, r8
 8012b4a:	4798      	blx	r3
 8012b4c:	6923      	ldr	r3, [r4, #16]
 8012b4e:	3b01      	subs	r3, #1
 8012b50:	6123      	str	r3, [r4, #16]
 8012b52:	e7f1      	b.n	8012b38 <_scanf_float+0x2fc>
 8012b54:	46aa      	mov	sl, r5
 8012b56:	9602      	str	r6, [sp, #8]
 8012b58:	e7df      	b.n	8012b1a <_scanf_float+0x2de>
 8012b5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012b5e:	6923      	ldr	r3, [r4, #16]
 8012b60:	2965      	cmp	r1, #101	; 0x65
 8012b62:	f103 33ff 	add.w	r3, r3, #4294967295
 8012b66:	f106 35ff 	add.w	r5, r6, #4294967295
 8012b6a:	6123      	str	r3, [r4, #16]
 8012b6c:	d00c      	beq.n	8012b88 <_scanf_float+0x34c>
 8012b6e:	2945      	cmp	r1, #69	; 0x45
 8012b70:	d00a      	beq.n	8012b88 <_scanf_float+0x34c>
 8012b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b76:	463a      	mov	r2, r7
 8012b78:	4640      	mov	r0, r8
 8012b7a:	4798      	blx	r3
 8012b7c:	6923      	ldr	r3, [r4, #16]
 8012b7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012b82:	3b01      	subs	r3, #1
 8012b84:	1eb5      	subs	r5, r6, #2
 8012b86:	6123      	str	r3, [r4, #16]
 8012b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012b8c:	463a      	mov	r2, r7
 8012b8e:	4640      	mov	r0, r8
 8012b90:	4798      	blx	r3
 8012b92:	462e      	mov	r6, r5
 8012b94:	6825      	ldr	r5, [r4, #0]
 8012b96:	f015 0510 	ands.w	r5, r5, #16
 8012b9a:	d158      	bne.n	8012c4e <_scanf_float+0x412>
 8012b9c:	7035      	strb	r5, [r6, #0]
 8012b9e:	6823      	ldr	r3, [r4, #0]
 8012ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ba8:	d11c      	bne.n	8012be4 <_scanf_float+0x3a8>
 8012baa:	9b01      	ldr	r3, [sp, #4]
 8012bac:	454b      	cmp	r3, r9
 8012bae:	eba3 0209 	sub.w	r2, r3, r9
 8012bb2:	d124      	bne.n	8012bfe <_scanf_float+0x3c2>
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	4659      	mov	r1, fp
 8012bb8:	4640      	mov	r0, r8
 8012bba:	f002 fb85 	bl	80152c8 <_strtod_r>
 8012bbe:	9b03      	ldr	r3, [sp, #12]
 8012bc0:	6821      	ldr	r1, [r4, #0]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	f011 0f02 	tst.w	r1, #2
 8012bc8:	ec57 6b10 	vmov	r6, r7, d0
 8012bcc:	f103 0204 	add.w	r2, r3, #4
 8012bd0:	d020      	beq.n	8012c14 <_scanf_float+0x3d8>
 8012bd2:	9903      	ldr	r1, [sp, #12]
 8012bd4:	600a      	str	r2, [r1, #0]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	e9c3 6700 	strd	r6, r7, [r3]
 8012bdc:	68e3      	ldr	r3, [r4, #12]
 8012bde:	3301      	adds	r3, #1
 8012be0:	60e3      	str	r3, [r4, #12]
 8012be2:	e66c      	b.n	80128be <_scanf_float+0x82>
 8012be4:	9b04      	ldr	r3, [sp, #16]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d0e4      	beq.n	8012bb4 <_scanf_float+0x378>
 8012bea:	9905      	ldr	r1, [sp, #20]
 8012bec:	230a      	movs	r3, #10
 8012bee:	462a      	mov	r2, r5
 8012bf0:	3101      	adds	r1, #1
 8012bf2:	4640      	mov	r0, r8
 8012bf4:	f002 fbf0 	bl	80153d8 <_strtol_r>
 8012bf8:	9b04      	ldr	r3, [sp, #16]
 8012bfa:	9e05      	ldr	r6, [sp, #20]
 8012bfc:	1ac2      	subs	r2, r0, r3
 8012bfe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012c02:	429e      	cmp	r6, r3
 8012c04:	bf28      	it	cs
 8012c06:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012c0a:	4912      	ldr	r1, [pc, #72]	; (8012c54 <_scanf_float+0x418>)
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	f000 f8d5 	bl	8012dbc <siprintf>
 8012c12:	e7cf      	b.n	8012bb4 <_scanf_float+0x378>
 8012c14:	f011 0f04 	tst.w	r1, #4
 8012c18:	9903      	ldr	r1, [sp, #12]
 8012c1a:	600a      	str	r2, [r1, #0]
 8012c1c:	d1db      	bne.n	8012bd6 <_scanf_float+0x39a>
 8012c1e:	f8d3 8000 	ldr.w	r8, [r3]
 8012c22:	ee10 2a10 	vmov	r2, s0
 8012c26:	ee10 0a10 	vmov	r0, s0
 8012c2a:	463b      	mov	r3, r7
 8012c2c:	4639      	mov	r1, r7
 8012c2e:	f7ed ff7d 	bl	8000b2c <__aeabi_dcmpun>
 8012c32:	b128      	cbz	r0, 8012c40 <_scanf_float+0x404>
 8012c34:	4808      	ldr	r0, [pc, #32]	; (8012c58 <_scanf_float+0x41c>)
 8012c36:	f000 f9c1 	bl	8012fbc <nanf>
 8012c3a:	ed88 0a00 	vstr	s0, [r8]
 8012c3e:	e7cd      	b.n	8012bdc <_scanf_float+0x3a0>
 8012c40:	4630      	mov	r0, r6
 8012c42:	4639      	mov	r1, r7
 8012c44:	f7ed ffd0 	bl	8000be8 <__aeabi_d2f>
 8012c48:	f8c8 0000 	str.w	r0, [r8]
 8012c4c:	e7c6      	b.n	8012bdc <_scanf_float+0x3a0>
 8012c4e:	2500      	movs	r5, #0
 8012c50:	e635      	b.n	80128be <_scanf_float+0x82>
 8012c52:	bf00      	nop
 8012c54:	0801699c 	.word	0x0801699c
 8012c58:	08016d2d 	.word	0x08016d2d

08012c5c <std>:
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	b510      	push	{r4, lr}
 8012c60:	4604      	mov	r4, r0
 8012c62:	e9c0 3300 	strd	r3, r3, [r0]
 8012c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c6a:	6083      	str	r3, [r0, #8]
 8012c6c:	8181      	strh	r1, [r0, #12]
 8012c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8012c70:	81c2      	strh	r2, [r0, #14]
 8012c72:	6183      	str	r3, [r0, #24]
 8012c74:	4619      	mov	r1, r3
 8012c76:	2208      	movs	r2, #8
 8012c78:	305c      	adds	r0, #92	; 0x5c
 8012c7a:	f000 f902 	bl	8012e82 <memset>
 8012c7e:	4b05      	ldr	r3, [pc, #20]	; (8012c94 <std+0x38>)
 8012c80:	6263      	str	r3, [r4, #36]	; 0x24
 8012c82:	4b05      	ldr	r3, [pc, #20]	; (8012c98 <std+0x3c>)
 8012c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c86:	4b05      	ldr	r3, [pc, #20]	; (8012c9c <std+0x40>)
 8012c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c8a:	4b05      	ldr	r3, [pc, #20]	; (8012ca0 <std+0x44>)
 8012c8c:	6224      	str	r4, [r4, #32]
 8012c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8012c90:	bd10      	pop	{r4, pc}
 8012c92:	bf00      	nop
 8012c94:	08012dfd 	.word	0x08012dfd
 8012c98:	08012e1f 	.word	0x08012e1f
 8012c9c:	08012e57 	.word	0x08012e57
 8012ca0:	08012e7b 	.word	0x08012e7b

08012ca4 <stdio_exit_handler>:
 8012ca4:	4a02      	ldr	r2, [pc, #8]	; (8012cb0 <stdio_exit_handler+0xc>)
 8012ca6:	4903      	ldr	r1, [pc, #12]	; (8012cb4 <stdio_exit_handler+0x10>)
 8012ca8:	4803      	ldr	r0, [pc, #12]	; (8012cb8 <stdio_exit_handler+0x14>)
 8012caa:	f000 b869 	b.w	8012d80 <_fwalk_sglue>
 8012cae:	bf00      	nop
 8012cb0:	2000010c 	.word	0x2000010c
 8012cb4:	08015799 	.word	0x08015799
 8012cb8:	20000118 	.word	0x20000118

08012cbc <cleanup_stdio>:
 8012cbc:	6841      	ldr	r1, [r0, #4]
 8012cbe:	4b0c      	ldr	r3, [pc, #48]	; (8012cf0 <cleanup_stdio+0x34>)
 8012cc0:	4299      	cmp	r1, r3
 8012cc2:	b510      	push	{r4, lr}
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	d001      	beq.n	8012ccc <cleanup_stdio+0x10>
 8012cc8:	f002 fd66 	bl	8015798 <_fflush_r>
 8012ccc:	68a1      	ldr	r1, [r4, #8]
 8012cce:	4b09      	ldr	r3, [pc, #36]	; (8012cf4 <cleanup_stdio+0x38>)
 8012cd0:	4299      	cmp	r1, r3
 8012cd2:	d002      	beq.n	8012cda <cleanup_stdio+0x1e>
 8012cd4:	4620      	mov	r0, r4
 8012cd6:	f002 fd5f 	bl	8015798 <_fflush_r>
 8012cda:	68e1      	ldr	r1, [r4, #12]
 8012cdc:	4b06      	ldr	r3, [pc, #24]	; (8012cf8 <cleanup_stdio+0x3c>)
 8012cde:	4299      	cmp	r1, r3
 8012ce0:	d004      	beq.n	8012cec <cleanup_stdio+0x30>
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ce8:	f002 bd56 	b.w	8015798 <_fflush_r>
 8012cec:	bd10      	pop	{r4, pc}
 8012cee:	bf00      	nop
 8012cf0:	20003d70 	.word	0x20003d70
 8012cf4:	20003dd8 	.word	0x20003dd8
 8012cf8:	20003e40 	.word	0x20003e40

08012cfc <global_stdio_init.part.0>:
 8012cfc:	b510      	push	{r4, lr}
 8012cfe:	4b0b      	ldr	r3, [pc, #44]	; (8012d2c <global_stdio_init.part.0+0x30>)
 8012d00:	4c0b      	ldr	r4, [pc, #44]	; (8012d30 <global_stdio_init.part.0+0x34>)
 8012d02:	4a0c      	ldr	r2, [pc, #48]	; (8012d34 <global_stdio_init.part.0+0x38>)
 8012d04:	601a      	str	r2, [r3, #0]
 8012d06:	4620      	mov	r0, r4
 8012d08:	2200      	movs	r2, #0
 8012d0a:	2104      	movs	r1, #4
 8012d0c:	f7ff ffa6 	bl	8012c5c <std>
 8012d10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012d14:	2201      	movs	r2, #1
 8012d16:	2109      	movs	r1, #9
 8012d18:	f7ff ffa0 	bl	8012c5c <std>
 8012d1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012d20:	2202      	movs	r2, #2
 8012d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d26:	2112      	movs	r1, #18
 8012d28:	f7ff bf98 	b.w	8012c5c <std>
 8012d2c:	20003ea8 	.word	0x20003ea8
 8012d30:	20003d70 	.word	0x20003d70
 8012d34:	08012ca5 	.word	0x08012ca5

08012d38 <__sfp_lock_acquire>:
 8012d38:	4801      	ldr	r0, [pc, #4]	; (8012d40 <__sfp_lock_acquire+0x8>)
 8012d3a:	f000 b92f 	b.w	8012f9c <__retarget_lock_acquire_recursive>
 8012d3e:	bf00      	nop
 8012d40:	20003eb1 	.word	0x20003eb1

08012d44 <__sfp_lock_release>:
 8012d44:	4801      	ldr	r0, [pc, #4]	; (8012d4c <__sfp_lock_release+0x8>)
 8012d46:	f000 b92a 	b.w	8012f9e <__retarget_lock_release_recursive>
 8012d4a:	bf00      	nop
 8012d4c:	20003eb1 	.word	0x20003eb1

08012d50 <__sinit>:
 8012d50:	b510      	push	{r4, lr}
 8012d52:	4604      	mov	r4, r0
 8012d54:	f7ff fff0 	bl	8012d38 <__sfp_lock_acquire>
 8012d58:	6a23      	ldr	r3, [r4, #32]
 8012d5a:	b11b      	cbz	r3, 8012d64 <__sinit+0x14>
 8012d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d60:	f7ff bff0 	b.w	8012d44 <__sfp_lock_release>
 8012d64:	4b04      	ldr	r3, [pc, #16]	; (8012d78 <__sinit+0x28>)
 8012d66:	6223      	str	r3, [r4, #32]
 8012d68:	4b04      	ldr	r3, [pc, #16]	; (8012d7c <__sinit+0x2c>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d1f5      	bne.n	8012d5c <__sinit+0xc>
 8012d70:	f7ff ffc4 	bl	8012cfc <global_stdio_init.part.0>
 8012d74:	e7f2      	b.n	8012d5c <__sinit+0xc>
 8012d76:	bf00      	nop
 8012d78:	08012cbd 	.word	0x08012cbd
 8012d7c:	20003ea8 	.word	0x20003ea8

08012d80 <_fwalk_sglue>:
 8012d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d84:	4607      	mov	r7, r0
 8012d86:	4688      	mov	r8, r1
 8012d88:	4614      	mov	r4, r2
 8012d8a:	2600      	movs	r6, #0
 8012d8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d90:	f1b9 0901 	subs.w	r9, r9, #1
 8012d94:	d505      	bpl.n	8012da2 <_fwalk_sglue+0x22>
 8012d96:	6824      	ldr	r4, [r4, #0]
 8012d98:	2c00      	cmp	r4, #0
 8012d9a:	d1f7      	bne.n	8012d8c <_fwalk_sglue+0xc>
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012da2:	89ab      	ldrh	r3, [r5, #12]
 8012da4:	2b01      	cmp	r3, #1
 8012da6:	d907      	bls.n	8012db8 <_fwalk_sglue+0x38>
 8012da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012dac:	3301      	adds	r3, #1
 8012dae:	d003      	beq.n	8012db8 <_fwalk_sglue+0x38>
 8012db0:	4629      	mov	r1, r5
 8012db2:	4638      	mov	r0, r7
 8012db4:	47c0      	blx	r8
 8012db6:	4306      	orrs	r6, r0
 8012db8:	3568      	adds	r5, #104	; 0x68
 8012dba:	e7e9      	b.n	8012d90 <_fwalk_sglue+0x10>

08012dbc <siprintf>:
 8012dbc:	b40e      	push	{r1, r2, r3}
 8012dbe:	b500      	push	{lr}
 8012dc0:	b09c      	sub	sp, #112	; 0x70
 8012dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8012dc4:	9002      	str	r0, [sp, #8]
 8012dc6:	9006      	str	r0, [sp, #24]
 8012dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012dcc:	4809      	ldr	r0, [pc, #36]	; (8012df4 <siprintf+0x38>)
 8012dce:	9107      	str	r1, [sp, #28]
 8012dd0:	9104      	str	r1, [sp, #16]
 8012dd2:	4909      	ldr	r1, [pc, #36]	; (8012df8 <siprintf+0x3c>)
 8012dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dd8:	9105      	str	r1, [sp, #20]
 8012dda:	6800      	ldr	r0, [r0, #0]
 8012ddc:	9301      	str	r3, [sp, #4]
 8012dde:	a902      	add	r1, sp, #8
 8012de0:	f002 fb56 	bl	8015490 <_svfiprintf_r>
 8012de4:	9b02      	ldr	r3, [sp, #8]
 8012de6:	2200      	movs	r2, #0
 8012de8:	701a      	strb	r2, [r3, #0]
 8012dea:	b01c      	add	sp, #112	; 0x70
 8012dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8012df0:	b003      	add	sp, #12
 8012df2:	4770      	bx	lr
 8012df4:	20000164 	.word	0x20000164
 8012df8:	ffff0208 	.word	0xffff0208

08012dfc <__sread>:
 8012dfc:	b510      	push	{r4, lr}
 8012dfe:	460c      	mov	r4, r1
 8012e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e04:	f000 f86c 	bl	8012ee0 <_read_r>
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	bfab      	itete	ge
 8012e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8012e10:	181b      	addge	r3, r3, r0
 8012e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e16:	bfac      	ite	ge
 8012e18:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e1a:	81a3      	strhlt	r3, [r4, #12]
 8012e1c:	bd10      	pop	{r4, pc}

08012e1e <__swrite>:
 8012e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e22:	461f      	mov	r7, r3
 8012e24:	898b      	ldrh	r3, [r1, #12]
 8012e26:	05db      	lsls	r3, r3, #23
 8012e28:	4605      	mov	r5, r0
 8012e2a:	460c      	mov	r4, r1
 8012e2c:	4616      	mov	r6, r2
 8012e2e:	d505      	bpl.n	8012e3c <__swrite+0x1e>
 8012e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e34:	2302      	movs	r3, #2
 8012e36:	2200      	movs	r2, #0
 8012e38:	f000 f840 	bl	8012ebc <_lseek_r>
 8012e3c:	89a3      	ldrh	r3, [r4, #12]
 8012e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e46:	81a3      	strh	r3, [r4, #12]
 8012e48:	4632      	mov	r2, r6
 8012e4a:	463b      	mov	r3, r7
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e52:	f000 b867 	b.w	8012f24 <_write_r>

08012e56 <__sseek>:
 8012e56:	b510      	push	{r4, lr}
 8012e58:	460c      	mov	r4, r1
 8012e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e5e:	f000 f82d 	bl	8012ebc <_lseek_r>
 8012e62:	1c43      	adds	r3, r0, #1
 8012e64:	89a3      	ldrh	r3, [r4, #12]
 8012e66:	bf15      	itete	ne
 8012e68:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012e72:	81a3      	strheq	r3, [r4, #12]
 8012e74:	bf18      	it	ne
 8012e76:	81a3      	strhne	r3, [r4, #12]
 8012e78:	bd10      	pop	{r4, pc}

08012e7a <__sclose>:
 8012e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e7e:	f000 b80d 	b.w	8012e9c <_close_r>

08012e82 <memset>:
 8012e82:	4402      	add	r2, r0
 8012e84:	4603      	mov	r3, r0
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d100      	bne.n	8012e8c <memset+0xa>
 8012e8a:	4770      	bx	lr
 8012e8c:	f803 1b01 	strb.w	r1, [r3], #1
 8012e90:	e7f9      	b.n	8012e86 <memset+0x4>
	...

08012e94 <_localeconv_r>:
 8012e94:	4800      	ldr	r0, [pc, #0]	; (8012e98 <_localeconv_r+0x4>)
 8012e96:	4770      	bx	lr
 8012e98:	20000258 	.word	0x20000258

08012e9c <_close_r>:
 8012e9c:	b538      	push	{r3, r4, r5, lr}
 8012e9e:	4d06      	ldr	r5, [pc, #24]	; (8012eb8 <_close_r+0x1c>)
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	4608      	mov	r0, r1
 8012ea6:	602b      	str	r3, [r5, #0]
 8012ea8:	f7f0 fdcb 	bl	8003a42 <_close>
 8012eac:	1c43      	adds	r3, r0, #1
 8012eae:	d102      	bne.n	8012eb6 <_close_r+0x1a>
 8012eb0:	682b      	ldr	r3, [r5, #0]
 8012eb2:	b103      	cbz	r3, 8012eb6 <_close_r+0x1a>
 8012eb4:	6023      	str	r3, [r4, #0]
 8012eb6:	bd38      	pop	{r3, r4, r5, pc}
 8012eb8:	20003eac 	.word	0x20003eac

08012ebc <_lseek_r>:
 8012ebc:	b538      	push	{r3, r4, r5, lr}
 8012ebe:	4d07      	ldr	r5, [pc, #28]	; (8012edc <_lseek_r+0x20>)
 8012ec0:	4604      	mov	r4, r0
 8012ec2:	4608      	mov	r0, r1
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	602a      	str	r2, [r5, #0]
 8012eca:	461a      	mov	r2, r3
 8012ecc:	f7f0 fde0 	bl	8003a90 <_lseek>
 8012ed0:	1c43      	adds	r3, r0, #1
 8012ed2:	d102      	bne.n	8012eda <_lseek_r+0x1e>
 8012ed4:	682b      	ldr	r3, [r5, #0]
 8012ed6:	b103      	cbz	r3, 8012eda <_lseek_r+0x1e>
 8012ed8:	6023      	str	r3, [r4, #0]
 8012eda:	bd38      	pop	{r3, r4, r5, pc}
 8012edc:	20003eac 	.word	0x20003eac

08012ee0 <_read_r>:
 8012ee0:	b538      	push	{r3, r4, r5, lr}
 8012ee2:	4d07      	ldr	r5, [pc, #28]	; (8012f00 <_read_r+0x20>)
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	4608      	mov	r0, r1
 8012ee8:	4611      	mov	r1, r2
 8012eea:	2200      	movs	r2, #0
 8012eec:	602a      	str	r2, [r5, #0]
 8012eee:	461a      	mov	r2, r3
 8012ef0:	f7f0 fd6e 	bl	80039d0 <_read>
 8012ef4:	1c43      	adds	r3, r0, #1
 8012ef6:	d102      	bne.n	8012efe <_read_r+0x1e>
 8012ef8:	682b      	ldr	r3, [r5, #0]
 8012efa:	b103      	cbz	r3, 8012efe <_read_r+0x1e>
 8012efc:	6023      	str	r3, [r4, #0]
 8012efe:	bd38      	pop	{r3, r4, r5, pc}
 8012f00:	20003eac 	.word	0x20003eac

08012f04 <_sbrk_r>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	4d06      	ldr	r5, [pc, #24]	; (8012f20 <_sbrk_r+0x1c>)
 8012f08:	2300      	movs	r3, #0
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	4608      	mov	r0, r1
 8012f0e:	602b      	str	r3, [r5, #0]
 8012f10:	f7f0 fdcc 	bl	8003aac <_sbrk>
 8012f14:	1c43      	adds	r3, r0, #1
 8012f16:	d102      	bne.n	8012f1e <_sbrk_r+0x1a>
 8012f18:	682b      	ldr	r3, [r5, #0]
 8012f1a:	b103      	cbz	r3, 8012f1e <_sbrk_r+0x1a>
 8012f1c:	6023      	str	r3, [r4, #0]
 8012f1e:	bd38      	pop	{r3, r4, r5, pc}
 8012f20:	20003eac 	.word	0x20003eac

08012f24 <_write_r>:
 8012f24:	b538      	push	{r3, r4, r5, lr}
 8012f26:	4d07      	ldr	r5, [pc, #28]	; (8012f44 <_write_r+0x20>)
 8012f28:	4604      	mov	r4, r0
 8012f2a:	4608      	mov	r0, r1
 8012f2c:	4611      	mov	r1, r2
 8012f2e:	2200      	movs	r2, #0
 8012f30:	602a      	str	r2, [r5, #0]
 8012f32:	461a      	mov	r2, r3
 8012f34:	f7f0 fd69 	bl	8003a0a <_write>
 8012f38:	1c43      	adds	r3, r0, #1
 8012f3a:	d102      	bne.n	8012f42 <_write_r+0x1e>
 8012f3c:	682b      	ldr	r3, [r5, #0]
 8012f3e:	b103      	cbz	r3, 8012f42 <_write_r+0x1e>
 8012f40:	6023      	str	r3, [r4, #0]
 8012f42:	bd38      	pop	{r3, r4, r5, pc}
 8012f44:	20003eac 	.word	0x20003eac

08012f48 <__errno>:
 8012f48:	4b01      	ldr	r3, [pc, #4]	; (8012f50 <__errno+0x8>)
 8012f4a:	6818      	ldr	r0, [r3, #0]
 8012f4c:	4770      	bx	lr
 8012f4e:	bf00      	nop
 8012f50:	20000164 	.word	0x20000164

08012f54 <__libc_init_array>:
 8012f54:	b570      	push	{r4, r5, r6, lr}
 8012f56:	4d0d      	ldr	r5, [pc, #52]	; (8012f8c <__libc_init_array+0x38>)
 8012f58:	4c0d      	ldr	r4, [pc, #52]	; (8012f90 <__libc_init_array+0x3c>)
 8012f5a:	1b64      	subs	r4, r4, r5
 8012f5c:	10a4      	asrs	r4, r4, #2
 8012f5e:	2600      	movs	r6, #0
 8012f60:	42a6      	cmp	r6, r4
 8012f62:	d109      	bne.n	8012f78 <__libc_init_array+0x24>
 8012f64:	4d0b      	ldr	r5, [pc, #44]	; (8012f94 <__libc_init_array+0x40>)
 8012f66:	4c0c      	ldr	r4, [pc, #48]	; (8012f98 <__libc_init_array+0x44>)
 8012f68:	f003 fb0e 	bl	8016588 <_init>
 8012f6c:	1b64      	subs	r4, r4, r5
 8012f6e:	10a4      	asrs	r4, r4, #2
 8012f70:	2600      	movs	r6, #0
 8012f72:	42a6      	cmp	r6, r4
 8012f74:	d105      	bne.n	8012f82 <__libc_init_array+0x2e>
 8012f76:	bd70      	pop	{r4, r5, r6, pc}
 8012f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f7c:	4798      	blx	r3
 8012f7e:	3601      	adds	r6, #1
 8012f80:	e7ee      	b.n	8012f60 <__libc_init_array+0xc>
 8012f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f86:	4798      	blx	r3
 8012f88:	3601      	adds	r6, #1
 8012f8a:	e7f2      	b.n	8012f72 <__libc_init_array+0x1e>
 8012f8c:	08016d90 	.word	0x08016d90
 8012f90:	08016d90 	.word	0x08016d90
 8012f94:	08016d90 	.word	0x08016d90
 8012f98:	08016d94 	.word	0x08016d94

08012f9c <__retarget_lock_acquire_recursive>:
 8012f9c:	4770      	bx	lr

08012f9e <__retarget_lock_release_recursive>:
 8012f9e:	4770      	bx	lr

08012fa0 <memcpy>:
 8012fa0:	440a      	add	r2, r1
 8012fa2:	4291      	cmp	r1, r2
 8012fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fa8:	d100      	bne.n	8012fac <memcpy+0xc>
 8012faa:	4770      	bx	lr
 8012fac:	b510      	push	{r4, lr}
 8012fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fb6:	4291      	cmp	r1, r2
 8012fb8:	d1f9      	bne.n	8012fae <memcpy+0xe>
 8012fba:	bd10      	pop	{r4, pc}

08012fbc <nanf>:
 8012fbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012fc4 <nanf+0x8>
 8012fc0:	4770      	bx	lr
 8012fc2:	bf00      	nop
 8012fc4:	7fc00000 	.word	0x7fc00000

08012fc8 <quorem>:
 8012fc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fcc:	6903      	ldr	r3, [r0, #16]
 8012fce:	690c      	ldr	r4, [r1, #16]
 8012fd0:	42a3      	cmp	r3, r4
 8012fd2:	4607      	mov	r7, r0
 8012fd4:	db7e      	blt.n	80130d4 <quorem+0x10c>
 8012fd6:	3c01      	subs	r4, #1
 8012fd8:	f101 0814 	add.w	r8, r1, #20
 8012fdc:	f100 0514 	add.w	r5, r0, #20
 8012fe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012fe4:	9301      	str	r3, [sp, #4]
 8012fe6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012fea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012fee:	3301      	adds	r3, #1
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012ff6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012ffa:	fbb2 f6f3 	udiv	r6, r2, r3
 8012ffe:	d331      	bcc.n	8013064 <quorem+0x9c>
 8013000:	f04f 0e00 	mov.w	lr, #0
 8013004:	4640      	mov	r0, r8
 8013006:	46ac      	mov	ip, r5
 8013008:	46f2      	mov	sl, lr
 801300a:	f850 2b04 	ldr.w	r2, [r0], #4
 801300e:	b293      	uxth	r3, r2
 8013010:	fb06 e303 	mla	r3, r6, r3, lr
 8013014:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013018:	0c1a      	lsrs	r2, r3, #16
 801301a:	b29b      	uxth	r3, r3
 801301c:	ebaa 0303 	sub.w	r3, sl, r3
 8013020:	f8dc a000 	ldr.w	sl, [ip]
 8013024:	fa13 f38a 	uxtah	r3, r3, sl
 8013028:	fb06 220e 	mla	r2, r6, lr, r2
 801302c:	9300      	str	r3, [sp, #0]
 801302e:	9b00      	ldr	r3, [sp, #0]
 8013030:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013034:	b292      	uxth	r2, r2
 8013036:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801303a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801303e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013042:	4581      	cmp	r9, r0
 8013044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013048:	f84c 3b04 	str.w	r3, [ip], #4
 801304c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013050:	d2db      	bcs.n	801300a <quorem+0x42>
 8013052:	f855 300b 	ldr.w	r3, [r5, fp]
 8013056:	b92b      	cbnz	r3, 8013064 <quorem+0x9c>
 8013058:	9b01      	ldr	r3, [sp, #4]
 801305a:	3b04      	subs	r3, #4
 801305c:	429d      	cmp	r5, r3
 801305e:	461a      	mov	r2, r3
 8013060:	d32c      	bcc.n	80130bc <quorem+0xf4>
 8013062:	613c      	str	r4, [r7, #16]
 8013064:	4638      	mov	r0, r7
 8013066:	f001 f93b 	bl	80142e0 <__mcmp>
 801306a:	2800      	cmp	r0, #0
 801306c:	db22      	blt.n	80130b4 <quorem+0xec>
 801306e:	3601      	adds	r6, #1
 8013070:	4629      	mov	r1, r5
 8013072:	2000      	movs	r0, #0
 8013074:	f858 2b04 	ldr.w	r2, [r8], #4
 8013078:	f8d1 c000 	ldr.w	ip, [r1]
 801307c:	b293      	uxth	r3, r2
 801307e:	1ac3      	subs	r3, r0, r3
 8013080:	0c12      	lsrs	r2, r2, #16
 8013082:	fa13 f38c 	uxtah	r3, r3, ip
 8013086:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801308a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801308e:	b29b      	uxth	r3, r3
 8013090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013094:	45c1      	cmp	r9, r8
 8013096:	f841 3b04 	str.w	r3, [r1], #4
 801309a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801309e:	d2e9      	bcs.n	8013074 <quorem+0xac>
 80130a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80130a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80130a8:	b922      	cbnz	r2, 80130b4 <quorem+0xec>
 80130aa:	3b04      	subs	r3, #4
 80130ac:	429d      	cmp	r5, r3
 80130ae:	461a      	mov	r2, r3
 80130b0:	d30a      	bcc.n	80130c8 <quorem+0x100>
 80130b2:	613c      	str	r4, [r7, #16]
 80130b4:	4630      	mov	r0, r6
 80130b6:	b003      	add	sp, #12
 80130b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130bc:	6812      	ldr	r2, [r2, #0]
 80130be:	3b04      	subs	r3, #4
 80130c0:	2a00      	cmp	r2, #0
 80130c2:	d1ce      	bne.n	8013062 <quorem+0x9a>
 80130c4:	3c01      	subs	r4, #1
 80130c6:	e7c9      	b.n	801305c <quorem+0x94>
 80130c8:	6812      	ldr	r2, [r2, #0]
 80130ca:	3b04      	subs	r3, #4
 80130cc:	2a00      	cmp	r2, #0
 80130ce:	d1f0      	bne.n	80130b2 <quorem+0xea>
 80130d0:	3c01      	subs	r4, #1
 80130d2:	e7eb      	b.n	80130ac <quorem+0xe4>
 80130d4:	2000      	movs	r0, #0
 80130d6:	e7ee      	b.n	80130b6 <quorem+0xee>

080130d8 <_dtoa_r>:
 80130d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130dc:	ed2d 8b04 	vpush	{d8-d9}
 80130e0:	69c5      	ldr	r5, [r0, #28]
 80130e2:	b093      	sub	sp, #76	; 0x4c
 80130e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80130e8:	ec57 6b10 	vmov	r6, r7, d0
 80130ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80130f0:	9107      	str	r1, [sp, #28]
 80130f2:	4604      	mov	r4, r0
 80130f4:	920a      	str	r2, [sp, #40]	; 0x28
 80130f6:	930d      	str	r3, [sp, #52]	; 0x34
 80130f8:	b975      	cbnz	r5, 8013118 <_dtoa_r+0x40>
 80130fa:	2010      	movs	r0, #16
 80130fc:	f7fe fe84 	bl	8011e08 <malloc>
 8013100:	4602      	mov	r2, r0
 8013102:	61e0      	str	r0, [r4, #28]
 8013104:	b920      	cbnz	r0, 8013110 <_dtoa_r+0x38>
 8013106:	4bae      	ldr	r3, [pc, #696]	; (80133c0 <_dtoa_r+0x2e8>)
 8013108:	21ef      	movs	r1, #239	; 0xef
 801310a:	48ae      	ldr	r0, [pc, #696]	; (80133c4 <_dtoa_r+0x2ec>)
 801310c:	f002 fba0 	bl	8015850 <__assert_func>
 8013110:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013114:	6005      	str	r5, [r0, #0]
 8013116:	60c5      	str	r5, [r0, #12]
 8013118:	69e3      	ldr	r3, [r4, #28]
 801311a:	6819      	ldr	r1, [r3, #0]
 801311c:	b151      	cbz	r1, 8013134 <_dtoa_r+0x5c>
 801311e:	685a      	ldr	r2, [r3, #4]
 8013120:	604a      	str	r2, [r1, #4]
 8013122:	2301      	movs	r3, #1
 8013124:	4093      	lsls	r3, r2
 8013126:	608b      	str	r3, [r1, #8]
 8013128:	4620      	mov	r0, r4
 801312a:	f000 fe53 	bl	8013dd4 <_Bfree>
 801312e:	69e3      	ldr	r3, [r4, #28]
 8013130:	2200      	movs	r2, #0
 8013132:	601a      	str	r2, [r3, #0]
 8013134:	1e3b      	subs	r3, r7, #0
 8013136:	bfbb      	ittet	lt
 8013138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801313c:	9303      	strlt	r3, [sp, #12]
 801313e:	2300      	movge	r3, #0
 8013140:	2201      	movlt	r2, #1
 8013142:	bfac      	ite	ge
 8013144:	f8c8 3000 	strge.w	r3, [r8]
 8013148:	f8c8 2000 	strlt.w	r2, [r8]
 801314c:	4b9e      	ldr	r3, [pc, #632]	; (80133c8 <_dtoa_r+0x2f0>)
 801314e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013152:	ea33 0308 	bics.w	r3, r3, r8
 8013156:	d11b      	bne.n	8013190 <_dtoa_r+0xb8>
 8013158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801315a:	f242 730f 	movw	r3, #9999	; 0x270f
 801315e:	6013      	str	r3, [r2, #0]
 8013160:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8013164:	4333      	orrs	r3, r6
 8013166:	f000 8593 	beq.w	8013c90 <_dtoa_r+0xbb8>
 801316a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801316c:	b963      	cbnz	r3, 8013188 <_dtoa_r+0xb0>
 801316e:	4b97      	ldr	r3, [pc, #604]	; (80133cc <_dtoa_r+0x2f4>)
 8013170:	e027      	b.n	80131c2 <_dtoa_r+0xea>
 8013172:	4b97      	ldr	r3, [pc, #604]	; (80133d0 <_dtoa_r+0x2f8>)
 8013174:	9300      	str	r3, [sp, #0]
 8013176:	3308      	adds	r3, #8
 8013178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801317a:	6013      	str	r3, [r2, #0]
 801317c:	9800      	ldr	r0, [sp, #0]
 801317e:	b013      	add	sp, #76	; 0x4c
 8013180:	ecbd 8b04 	vpop	{d8-d9}
 8013184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013188:	4b90      	ldr	r3, [pc, #576]	; (80133cc <_dtoa_r+0x2f4>)
 801318a:	9300      	str	r3, [sp, #0]
 801318c:	3303      	adds	r3, #3
 801318e:	e7f3      	b.n	8013178 <_dtoa_r+0xa0>
 8013190:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013194:	2200      	movs	r2, #0
 8013196:	ec51 0b17 	vmov	r0, r1, d7
 801319a:	eeb0 8a47 	vmov.f32	s16, s14
 801319e:	eef0 8a67 	vmov.f32	s17, s15
 80131a2:	2300      	movs	r3, #0
 80131a4:	f7ed fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 80131a8:	4681      	mov	r9, r0
 80131aa:	b160      	cbz	r0, 80131c6 <_dtoa_r+0xee>
 80131ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80131ae:	2301      	movs	r3, #1
 80131b0:	6013      	str	r3, [r2, #0]
 80131b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	f000 8568 	beq.w	8013c8a <_dtoa_r+0xbb2>
 80131ba:	4b86      	ldr	r3, [pc, #536]	; (80133d4 <_dtoa_r+0x2fc>)
 80131bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80131be:	6013      	str	r3, [r2, #0]
 80131c0:	3b01      	subs	r3, #1
 80131c2:	9300      	str	r3, [sp, #0]
 80131c4:	e7da      	b.n	801317c <_dtoa_r+0xa4>
 80131c6:	aa10      	add	r2, sp, #64	; 0x40
 80131c8:	a911      	add	r1, sp, #68	; 0x44
 80131ca:	4620      	mov	r0, r4
 80131cc:	eeb0 0a48 	vmov.f32	s0, s16
 80131d0:	eef0 0a68 	vmov.f32	s1, s17
 80131d4:	f001 f99a 	bl	801450c <__d2b>
 80131d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80131dc:	4682      	mov	sl, r0
 80131de:	2d00      	cmp	r5, #0
 80131e0:	d07f      	beq.n	80132e2 <_dtoa_r+0x20a>
 80131e2:	ee18 3a90 	vmov	r3, s17
 80131e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80131ee:	ec51 0b18 	vmov	r0, r1, d8
 80131f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80131f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80131fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80131fe:	4619      	mov	r1, r3
 8013200:	2200      	movs	r2, #0
 8013202:	4b75      	ldr	r3, [pc, #468]	; (80133d8 <_dtoa_r+0x300>)
 8013204:	f7ed f840 	bl	8000288 <__aeabi_dsub>
 8013208:	a367      	add	r3, pc, #412	; (adr r3, 80133a8 <_dtoa_r+0x2d0>)
 801320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320e:	f7ed f9f3 	bl	80005f8 <__aeabi_dmul>
 8013212:	a367      	add	r3, pc, #412	; (adr r3, 80133b0 <_dtoa_r+0x2d8>)
 8013214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013218:	f7ed f838 	bl	800028c <__adddf3>
 801321c:	4606      	mov	r6, r0
 801321e:	4628      	mov	r0, r5
 8013220:	460f      	mov	r7, r1
 8013222:	f7ed f97f 	bl	8000524 <__aeabi_i2d>
 8013226:	a364      	add	r3, pc, #400	; (adr r3, 80133b8 <_dtoa_r+0x2e0>)
 8013228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322c:	f7ed f9e4 	bl	80005f8 <__aeabi_dmul>
 8013230:	4602      	mov	r2, r0
 8013232:	460b      	mov	r3, r1
 8013234:	4630      	mov	r0, r6
 8013236:	4639      	mov	r1, r7
 8013238:	f7ed f828 	bl	800028c <__adddf3>
 801323c:	4606      	mov	r6, r0
 801323e:	460f      	mov	r7, r1
 8013240:	f7ed fc8a 	bl	8000b58 <__aeabi_d2iz>
 8013244:	2200      	movs	r2, #0
 8013246:	4683      	mov	fp, r0
 8013248:	2300      	movs	r3, #0
 801324a:	4630      	mov	r0, r6
 801324c:	4639      	mov	r1, r7
 801324e:	f7ed fc45 	bl	8000adc <__aeabi_dcmplt>
 8013252:	b148      	cbz	r0, 8013268 <_dtoa_r+0x190>
 8013254:	4658      	mov	r0, fp
 8013256:	f7ed f965 	bl	8000524 <__aeabi_i2d>
 801325a:	4632      	mov	r2, r6
 801325c:	463b      	mov	r3, r7
 801325e:	f7ed fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 8013262:	b908      	cbnz	r0, 8013268 <_dtoa_r+0x190>
 8013264:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013268:	f1bb 0f16 	cmp.w	fp, #22
 801326c:	d857      	bhi.n	801331e <_dtoa_r+0x246>
 801326e:	4b5b      	ldr	r3, [pc, #364]	; (80133dc <_dtoa_r+0x304>)
 8013270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013278:	ec51 0b18 	vmov	r0, r1, d8
 801327c:	f7ed fc2e 	bl	8000adc <__aeabi_dcmplt>
 8013280:	2800      	cmp	r0, #0
 8013282:	d04e      	beq.n	8013322 <_dtoa_r+0x24a>
 8013284:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013288:	2300      	movs	r3, #0
 801328a:	930c      	str	r3, [sp, #48]	; 0x30
 801328c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801328e:	1b5b      	subs	r3, r3, r5
 8013290:	1e5a      	subs	r2, r3, #1
 8013292:	bf45      	ittet	mi
 8013294:	f1c3 0301 	rsbmi	r3, r3, #1
 8013298:	9305      	strmi	r3, [sp, #20]
 801329a:	2300      	movpl	r3, #0
 801329c:	2300      	movmi	r3, #0
 801329e:	9206      	str	r2, [sp, #24]
 80132a0:	bf54      	ite	pl
 80132a2:	9305      	strpl	r3, [sp, #20]
 80132a4:	9306      	strmi	r3, [sp, #24]
 80132a6:	f1bb 0f00 	cmp.w	fp, #0
 80132aa:	db3c      	blt.n	8013326 <_dtoa_r+0x24e>
 80132ac:	9b06      	ldr	r3, [sp, #24]
 80132ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80132b2:	445b      	add	r3, fp
 80132b4:	9306      	str	r3, [sp, #24]
 80132b6:	2300      	movs	r3, #0
 80132b8:	9308      	str	r3, [sp, #32]
 80132ba:	9b07      	ldr	r3, [sp, #28]
 80132bc:	2b09      	cmp	r3, #9
 80132be:	d868      	bhi.n	8013392 <_dtoa_r+0x2ba>
 80132c0:	2b05      	cmp	r3, #5
 80132c2:	bfc4      	itt	gt
 80132c4:	3b04      	subgt	r3, #4
 80132c6:	9307      	strgt	r3, [sp, #28]
 80132c8:	9b07      	ldr	r3, [sp, #28]
 80132ca:	f1a3 0302 	sub.w	r3, r3, #2
 80132ce:	bfcc      	ite	gt
 80132d0:	2500      	movgt	r5, #0
 80132d2:	2501      	movle	r5, #1
 80132d4:	2b03      	cmp	r3, #3
 80132d6:	f200 8085 	bhi.w	80133e4 <_dtoa_r+0x30c>
 80132da:	e8df f003 	tbb	[pc, r3]
 80132de:	3b2e      	.short	0x3b2e
 80132e0:	5839      	.short	0x5839
 80132e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80132e6:	441d      	add	r5, r3
 80132e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80132ec:	2b20      	cmp	r3, #32
 80132ee:	bfc1      	itttt	gt
 80132f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80132f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80132f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80132fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013300:	bfd6      	itet	le
 8013302:	f1c3 0320 	rsble	r3, r3, #32
 8013306:	ea48 0003 	orrgt.w	r0, r8, r3
 801330a:	fa06 f003 	lslle.w	r0, r6, r3
 801330e:	f7ed f8f9 	bl	8000504 <__aeabi_ui2d>
 8013312:	2201      	movs	r2, #1
 8013314:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013318:	3d01      	subs	r5, #1
 801331a:	920e      	str	r2, [sp, #56]	; 0x38
 801331c:	e76f      	b.n	80131fe <_dtoa_r+0x126>
 801331e:	2301      	movs	r3, #1
 8013320:	e7b3      	b.n	801328a <_dtoa_r+0x1b2>
 8013322:	900c      	str	r0, [sp, #48]	; 0x30
 8013324:	e7b2      	b.n	801328c <_dtoa_r+0x1b4>
 8013326:	9b05      	ldr	r3, [sp, #20]
 8013328:	eba3 030b 	sub.w	r3, r3, fp
 801332c:	9305      	str	r3, [sp, #20]
 801332e:	f1cb 0300 	rsb	r3, fp, #0
 8013332:	9308      	str	r3, [sp, #32]
 8013334:	2300      	movs	r3, #0
 8013336:	930b      	str	r3, [sp, #44]	; 0x2c
 8013338:	e7bf      	b.n	80132ba <_dtoa_r+0x1e2>
 801333a:	2300      	movs	r3, #0
 801333c:	9309      	str	r3, [sp, #36]	; 0x24
 801333e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013340:	2b00      	cmp	r3, #0
 8013342:	dc52      	bgt.n	80133ea <_dtoa_r+0x312>
 8013344:	2301      	movs	r3, #1
 8013346:	9301      	str	r3, [sp, #4]
 8013348:	9304      	str	r3, [sp, #16]
 801334a:	461a      	mov	r2, r3
 801334c:	920a      	str	r2, [sp, #40]	; 0x28
 801334e:	e00b      	b.n	8013368 <_dtoa_r+0x290>
 8013350:	2301      	movs	r3, #1
 8013352:	e7f3      	b.n	801333c <_dtoa_r+0x264>
 8013354:	2300      	movs	r3, #0
 8013356:	9309      	str	r3, [sp, #36]	; 0x24
 8013358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801335a:	445b      	add	r3, fp
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	3301      	adds	r3, #1
 8013360:	2b01      	cmp	r3, #1
 8013362:	9304      	str	r3, [sp, #16]
 8013364:	bfb8      	it	lt
 8013366:	2301      	movlt	r3, #1
 8013368:	69e0      	ldr	r0, [r4, #28]
 801336a:	2100      	movs	r1, #0
 801336c:	2204      	movs	r2, #4
 801336e:	f102 0614 	add.w	r6, r2, #20
 8013372:	429e      	cmp	r6, r3
 8013374:	d93d      	bls.n	80133f2 <_dtoa_r+0x31a>
 8013376:	6041      	str	r1, [r0, #4]
 8013378:	4620      	mov	r0, r4
 801337a:	f000 fceb 	bl	8013d54 <_Balloc>
 801337e:	9000      	str	r0, [sp, #0]
 8013380:	2800      	cmp	r0, #0
 8013382:	d139      	bne.n	80133f8 <_dtoa_r+0x320>
 8013384:	4b16      	ldr	r3, [pc, #88]	; (80133e0 <_dtoa_r+0x308>)
 8013386:	4602      	mov	r2, r0
 8013388:	f240 11af 	movw	r1, #431	; 0x1af
 801338c:	e6bd      	b.n	801310a <_dtoa_r+0x32>
 801338e:	2301      	movs	r3, #1
 8013390:	e7e1      	b.n	8013356 <_dtoa_r+0x27e>
 8013392:	2501      	movs	r5, #1
 8013394:	2300      	movs	r3, #0
 8013396:	9307      	str	r3, [sp, #28]
 8013398:	9509      	str	r5, [sp, #36]	; 0x24
 801339a:	f04f 33ff 	mov.w	r3, #4294967295
 801339e:	9301      	str	r3, [sp, #4]
 80133a0:	9304      	str	r3, [sp, #16]
 80133a2:	2200      	movs	r2, #0
 80133a4:	2312      	movs	r3, #18
 80133a6:	e7d1      	b.n	801334c <_dtoa_r+0x274>
 80133a8:	636f4361 	.word	0x636f4361
 80133ac:	3fd287a7 	.word	0x3fd287a7
 80133b0:	8b60c8b3 	.word	0x8b60c8b3
 80133b4:	3fc68a28 	.word	0x3fc68a28
 80133b8:	509f79fb 	.word	0x509f79fb
 80133bc:	3fd34413 	.word	0x3fd34413
 80133c0:	080169ae 	.word	0x080169ae
 80133c4:	080169c5 	.word	0x080169c5
 80133c8:	7ff00000 	.word	0x7ff00000
 80133cc:	080169aa 	.word	0x080169aa
 80133d0:	080169a1 	.word	0x080169a1
 80133d4:	08016979 	.word	0x08016979
 80133d8:	3ff80000 	.word	0x3ff80000
 80133dc:	08016ab0 	.word	0x08016ab0
 80133e0:	08016a1d 	.word	0x08016a1d
 80133e4:	2301      	movs	r3, #1
 80133e6:	9309      	str	r3, [sp, #36]	; 0x24
 80133e8:	e7d7      	b.n	801339a <_dtoa_r+0x2c2>
 80133ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ec:	9301      	str	r3, [sp, #4]
 80133ee:	9304      	str	r3, [sp, #16]
 80133f0:	e7ba      	b.n	8013368 <_dtoa_r+0x290>
 80133f2:	3101      	adds	r1, #1
 80133f4:	0052      	lsls	r2, r2, #1
 80133f6:	e7ba      	b.n	801336e <_dtoa_r+0x296>
 80133f8:	69e3      	ldr	r3, [r4, #28]
 80133fa:	9a00      	ldr	r2, [sp, #0]
 80133fc:	601a      	str	r2, [r3, #0]
 80133fe:	9b04      	ldr	r3, [sp, #16]
 8013400:	2b0e      	cmp	r3, #14
 8013402:	f200 80a8 	bhi.w	8013556 <_dtoa_r+0x47e>
 8013406:	2d00      	cmp	r5, #0
 8013408:	f000 80a5 	beq.w	8013556 <_dtoa_r+0x47e>
 801340c:	f1bb 0f00 	cmp.w	fp, #0
 8013410:	dd38      	ble.n	8013484 <_dtoa_r+0x3ac>
 8013412:	4bc0      	ldr	r3, [pc, #768]	; (8013714 <_dtoa_r+0x63c>)
 8013414:	f00b 020f 	and.w	r2, fp, #15
 8013418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801341c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013420:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013424:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013428:	d019      	beq.n	801345e <_dtoa_r+0x386>
 801342a:	4bbb      	ldr	r3, [pc, #748]	; (8013718 <_dtoa_r+0x640>)
 801342c:	ec51 0b18 	vmov	r0, r1, d8
 8013430:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013434:	f7ed fa0a 	bl	800084c <__aeabi_ddiv>
 8013438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801343c:	f008 080f 	and.w	r8, r8, #15
 8013440:	2503      	movs	r5, #3
 8013442:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013718 <_dtoa_r+0x640>
 8013446:	f1b8 0f00 	cmp.w	r8, #0
 801344a:	d10a      	bne.n	8013462 <_dtoa_r+0x38a>
 801344c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013450:	4632      	mov	r2, r6
 8013452:	463b      	mov	r3, r7
 8013454:	f7ed f9fa 	bl	800084c <__aeabi_ddiv>
 8013458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801345c:	e02b      	b.n	80134b6 <_dtoa_r+0x3de>
 801345e:	2502      	movs	r5, #2
 8013460:	e7ef      	b.n	8013442 <_dtoa_r+0x36a>
 8013462:	f018 0f01 	tst.w	r8, #1
 8013466:	d008      	beq.n	801347a <_dtoa_r+0x3a2>
 8013468:	4630      	mov	r0, r6
 801346a:	4639      	mov	r1, r7
 801346c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013470:	f7ed f8c2 	bl	80005f8 <__aeabi_dmul>
 8013474:	3501      	adds	r5, #1
 8013476:	4606      	mov	r6, r0
 8013478:	460f      	mov	r7, r1
 801347a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801347e:	f109 0908 	add.w	r9, r9, #8
 8013482:	e7e0      	b.n	8013446 <_dtoa_r+0x36e>
 8013484:	f000 809f 	beq.w	80135c6 <_dtoa_r+0x4ee>
 8013488:	f1cb 0600 	rsb	r6, fp, #0
 801348c:	4ba1      	ldr	r3, [pc, #644]	; (8013714 <_dtoa_r+0x63c>)
 801348e:	4fa2      	ldr	r7, [pc, #648]	; (8013718 <_dtoa_r+0x640>)
 8013490:	f006 020f 	and.w	r2, r6, #15
 8013494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801349c:	ec51 0b18 	vmov	r0, r1, d8
 80134a0:	f7ed f8aa 	bl	80005f8 <__aeabi_dmul>
 80134a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134a8:	1136      	asrs	r6, r6, #4
 80134aa:	2300      	movs	r3, #0
 80134ac:	2502      	movs	r5, #2
 80134ae:	2e00      	cmp	r6, #0
 80134b0:	d17e      	bne.n	80135b0 <_dtoa_r+0x4d8>
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d1d0      	bne.n	8013458 <_dtoa_r+0x380>
 80134b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	f000 8084 	beq.w	80135ca <_dtoa_r+0x4f2>
 80134c2:	4b96      	ldr	r3, [pc, #600]	; (801371c <_dtoa_r+0x644>)
 80134c4:	2200      	movs	r2, #0
 80134c6:	4640      	mov	r0, r8
 80134c8:	4649      	mov	r1, r9
 80134ca:	f7ed fb07 	bl	8000adc <__aeabi_dcmplt>
 80134ce:	2800      	cmp	r0, #0
 80134d0:	d07b      	beq.n	80135ca <_dtoa_r+0x4f2>
 80134d2:	9b04      	ldr	r3, [sp, #16]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d078      	beq.n	80135ca <_dtoa_r+0x4f2>
 80134d8:	9b01      	ldr	r3, [sp, #4]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	dd39      	ble.n	8013552 <_dtoa_r+0x47a>
 80134de:	4b90      	ldr	r3, [pc, #576]	; (8013720 <_dtoa_r+0x648>)
 80134e0:	2200      	movs	r2, #0
 80134e2:	4640      	mov	r0, r8
 80134e4:	4649      	mov	r1, r9
 80134e6:	f7ed f887 	bl	80005f8 <__aeabi_dmul>
 80134ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134ee:	9e01      	ldr	r6, [sp, #4]
 80134f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80134f4:	3501      	adds	r5, #1
 80134f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80134fa:	4628      	mov	r0, r5
 80134fc:	f7ed f812 	bl	8000524 <__aeabi_i2d>
 8013500:	4642      	mov	r2, r8
 8013502:	464b      	mov	r3, r9
 8013504:	f7ed f878 	bl	80005f8 <__aeabi_dmul>
 8013508:	4b86      	ldr	r3, [pc, #536]	; (8013724 <_dtoa_r+0x64c>)
 801350a:	2200      	movs	r2, #0
 801350c:	f7ec febe 	bl	800028c <__adddf3>
 8013510:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013518:	9303      	str	r3, [sp, #12]
 801351a:	2e00      	cmp	r6, #0
 801351c:	d158      	bne.n	80135d0 <_dtoa_r+0x4f8>
 801351e:	4b82      	ldr	r3, [pc, #520]	; (8013728 <_dtoa_r+0x650>)
 8013520:	2200      	movs	r2, #0
 8013522:	4640      	mov	r0, r8
 8013524:	4649      	mov	r1, r9
 8013526:	f7ec feaf 	bl	8000288 <__aeabi_dsub>
 801352a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801352e:	4680      	mov	r8, r0
 8013530:	4689      	mov	r9, r1
 8013532:	f7ed faf1 	bl	8000b18 <__aeabi_dcmpgt>
 8013536:	2800      	cmp	r0, #0
 8013538:	f040 8296 	bne.w	8013a68 <_dtoa_r+0x990>
 801353c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013540:	4640      	mov	r0, r8
 8013542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013546:	4649      	mov	r1, r9
 8013548:	f7ed fac8 	bl	8000adc <__aeabi_dcmplt>
 801354c:	2800      	cmp	r0, #0
 801354e:	f040 8289 	bne.w	8013a64 <_dtoa_r+0x98c>
 8013552:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013558:	2b00      	cmp	r3, #0
 801355a:	f2c0 814e 	blt.w	80137fa <_dtoa_r+0x722>
 801355e:	f1bb 0f0e 	cmp.w	fp, #14
 8013562:	f300 814a 	bgt.w	80137fa <_dtoa_r+0x722>
 8013566:	4b6b      	ldr	r3, [pc, #428]	; (8013714 <_dtoa_r+0x63c>)
 8013568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801356c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013572:	2b00      	cmp	r3, #0
 8013574:	f280 80dc 	bge.w	8013730 <_dtoa_r+0x658>
 8013578:	9b04      	ldr	r3, [sp, #16]
 801357a:	2b00      	cmp	r3, #0
 801357c:	f300 80d8 	bgt.w	8013730 <_dtoa_r+0x658>
 8013580:	f040 826f 	bne.w	8013a62 <_dtoa_r+0x98a>
 8013584:	4b68      	ldr	r3, [pc, #416]	; (8013728 <_dtoa_r+0x650>)
 8013586:	2200      	movs	r2, #0
 8013588:	4640      	mov	r0, r8
 801358a:	4649      	mov	r1, r9
 801358c:	f7ed f834 	bl	80005f8 <__aeabi_dmul>
 8013590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013594:	f7ed fab6 	bl	8000b04 <__aeabi_dcmpge>
 8013598:	9e04      	ldr	r6, [sp, #16]
 801359a:	4637      	mov	r7, r6
 801359c:	2800      	cmp	r0, #0
 801359e:	f040 8245 	bne.w	8013a2c <_dtoa_r+0x954>
 80135a2:	9d00      	ldr	r5, [sp, #0]
 80135a4:	2331      	movs	r3, #49	; 0x31
 80135a6:	f805 3b01 	strb.w	r3, [r5], #1
 80135aa:	f10b 0b01 	add.w	fp, fp, #1
 80135ae:	e241      	b.n	8013a34 <_dtoa_r+0x95c>
 80135b0:	07f2      	lsls	r2, r6, #31
 80135b2:	d505      	bpl.n	80135c0 <_dtoa_r+0x4e8>
 80135b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135b8:	f7ed f81e 	bl	80005f8 <__aeabi_dmul>
 80135bc:	3501      	adds	r5, #1
 80135be:	2301      	movs	r3, #1
 80135c0:	1076      	asrs	r6, r6, #1
 80135c2:	3708      	adds	r7, #8
 80135c4:	e773      	b.n	80134ae <_dtoa_r+0x3d6>
 80135c6:	2502      	movs	r5, #2
 80135c8:	e775      	b.n	80134b6 <_dtoa_r+0x3de>
 80135ca:	9e04      	ldr	r6, [sp, #16]
 80135cc:	465f      	mov	r7, fp
 80135ce:	e792      	b.n	80134f6 <_dtoa_r+0x41e>
 80135d0:	9900      	ldr	r1, [sp, #0]
 80135d2:	4b50      	ldr	r3, [pc, #320]	; (8013714 <_dtoa_r+0x63c>)
 80135d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80135d8:	4431      	add	r1, r6
 80135da:	9102      	str	r1, [sp, #8]
 80135dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135de:	eeb0 9a47 	vmov.f32	s18, s14
 80135e2:	eef0 9a67 	vmov.f32	s19, s15
 80135e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80135ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80135ee:	2900      	cmp	r1, #0
 80135f0:	d044      	beq.n	801367c <_dtoa_r+0x5a4>
 80135f2:	494e      	ldr	r1, [pc, #312]	; (801372c <_dtoa_r+0x654>)
 80135f4:	2000      	movs	r0, #0
 80135f6:	f7ed f929 	bl	800084c <__aeabi_ddiv>
 80135fa:	ec53 2b19 	vmov	r2, r3, d9
 80135fe:	f7ec fe43 	bl	8000288 <__aeabi_dsub>
 8013602:	9d00      	ldr	r5, [sp, #0]
 8013604:	ec41 0b19 	vmov	d9, r0, r1
 8013608:	4649      	mov	r1, r9
 801360a:	4640      	mov	r0, r8
 801360c:	f7ed faa4 	bl	8000b58 <__aeabi_d2iz>
 8013610:	4606      	mov	r6, r0
 8013612:	f7ec ff87 	bl	8000524 <__aeabi_i2d>
 8013616:	4602      	mov	r2, r0
 8013618:	460b      	mov	r3, r1
 801361a:	4640      	mov	r0, r8
 801361c:	4649      	mov	r1, r9
 801361e:	f7ec fe33 	bl	8000288 <__aeabi_dsub>
 8013622:	3630      	adds	r6, #48	; 0x30
 8013624:	f805 6b01 	strb.w	r6, [r5], #1
 8013628:	ec53 2b19 	vmov	r2, r3, d9
 801362c:	4680      	mov	r8, r0
 801362e:	4689      	mov	r9, r1
 8013630:	f7ed fa54 	bl	8000adc <__aeabi_dcmplt>
 8013634:	2800      	cmp	r0, #0
 8013636:	d164      	bne.n	8013702 <_dtoa_r+0x62a>
 8013638:	4642      	mov	r2, r8
 801363a:	464b      	mov	r3, r9
 801363c:	4937      	ldr	r1, [pc, #220]	; (801371c <_dtoa_r+0x644>)
 801363e:	2000      	movs	r0, #0
 8013640:	f7ec fe22 	bl	8000288 <__aeabi_dsub>
 8013644:	ec53 2b19 	vmov	r2, r3, d9
 8013648:	f7ed fa48 	bl	8000adc <__aeabi_dcmplt>
 801364c:	2800      	cmp	r0, #0
 801364e:	f040 80b6 	bne.w	80137be <_dtoa_r+0x6e6>
 8013652:	9b02      	ldr	r3, [sp, #8]
 8013654:	429d      	cmp	r5, r3
 8013656:	f43f af7c 	beq.w	8013552 <_dtoa_r+0x47a>
 801365a:	4b31      	ldr	r3, [pc, #196]	; (8013720 <_dtoa_r+0x648>)
 801365c:	ec51 0b19 	vmov	r0, r1, d9
 8013660:	2200      	movs	r2, #0
 8013662:	f7ec ffc9 	bl	80005f8 <__aeabi_dmul>
 8013666:	4b2e      	ldr	r3, [pc, #184]	; (8013720 <_dtoa_r+0x648>)
 8013668:	ec41 0b19 	vmov	d9, r0, r1
 801366c:	2200      	movs	r2, #0
 801366e:	4640      	mov	r0, r8
 8013670:	4649      	mov	r1, r9
 8013672:	f7ec ffc1 	bl	80005f8 <__aeabi_dmul>
 8013676:	4680      	mov	r8, r0
 8013678:	4689      	mov	r9, r1
 801367a:	e7c5      	b.n	8013608 <_dtoa_r+0x530>
 801367c:	ec51 0b17 	vmov	r0, r1, d7
 8013680:	f7ec ffba 	bl	80005f8 <__aeabi_dmul>
 8013684:	9b02      	ldr	r3, [sp, #8]
 8013686:	9d00      	ldr	r5, [sp, #0]
 8013688:	930f      	str	r3, [sp, #60]	; 0x3c
 801368a:	ec41 0b19 	vmov	d9, r0, r1
 801368e:	4649      	mov	r1, r9
 8013690:	4640      	mov	r0, r8
 8013692:	f7ed fa61 	bl	8000b58 <__aeabi_d2iz>
 8013696:	4606      	mov	r6, r0
 8013698:	f7ec ff44 	bl	8000524 <__aeabi_i2d>
 801369c:	3630      	adds	r6, #48	; 0x30
 801369e:	4602      	mov	r2, r0
 80136a0:	460b      	mov	r3, r1
 80136a2:	4640      	mov	r0, r8
 80136a4:	4649      	mov	r1, r9
 80136a6:	f7ec fdef 	bl	8000288 <__aeabi_dsub>
 80136aa:	f805 6b01 	strb.w	r6, [r5], #1
 80136ae:	9b02      	ldr	r3, [sp, #8]
 80136b0:	429d      	cmp	r5, r3
 80136b2:	4680      	mov	r8, r0
 80136b4:	4689      	mov	r9, r1
 80136b6:	f04f 0200 	mov.w	r2, #0
 80136ba:	d124      	bne.n	8013706 <_dtoa_r+0x62e>
 80136bc:	4b1b      	ldr	r3, [pc, #108]	; (801372c <_dtoa_r+0x654>)
 80136be:	ec51 0b19 	vmov	r0, r1, d9
 80136c2:	f7ec fde3 	bl	800028c <__adddf3>
 80136c6:	4602      	mov	r2, r0
 80136c8:	460b      	mov	r3, r1
 80136ca:	4640      	mov	r0, r8
 80136cc:	4649      	mov	r1, r9
 80136ce:	f7ed fa23 	bl	8000b18 <__aeabi_dcmpgt>
 80136d2:	2800      	cmp	r0, #0
 80136d4:	d173      	bne.n	80137be <_dtoa_r+0x6e6>
 80136d6:	ec53 2b19 	vmov	r2, r3, d9
 80136da:	4914      	ldr	r1, [pc, #80]	; (801372c <_dtoa_r+0x654>)
 80136dc:	2000      	movs	r0, #0
 80136de:	f7ec fdd3 	bl	8000288 <__aeabi_dsub>
 80136e2:	4602      	mov	r2, r0
 80136e4:	460b      	mov	r3, r1
 80136e6:	4640      	mov	r0, r8
 80136e8:	4649      	mov	r1, r9
 80136ea:	f7ed f9f7 	bl	8000adc <__aeabi_dcmplt>
 80136ee:	2800      	cmp	r0, #0
 80136f0:	f43f af2f 	beq.w	8013552 <_dtoa_r+0x47a>
 80136f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80136f6:	1e6b      	subs	r3, r5, #1
 80136f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80136fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80136fe:	2b30      	cmp	r3, #48	; 0x30
 8013700:	d0f8      	beq.n	80136f4 <_dtoa_r+0x61c>
 8013702:	46bb      	mov	fp, r7
 8013704:	e04a      	b.n	801379c <_dtoa_r+0x6c4>
 8013706:	4b06      	ldr	r3, [pc, #24]	; (8013720 <_dtoa_r+0x648>)
 8013708:	f7ec ff76 	bl	80005f8 <__aeabi_dmul>
 801370c:	4680      	mov	r8, r0
 801370e:	4689      	mov	r9, r1
 8013710:	e7bd      	b.n	801368e <_dtoa_r+0x5b6>
 8013712:	bf00      	nop
 8013714:	08016ab0 	.word	0x08016ab0
 8013718:	08016a88 	.word	0x08016a88
 801371c:	3ff00000 	.word	0x3ff00000
 8013720:	40240000 	.word	0x40240000
 8013724:	401c0000 	.word	0x401c0000
 8013728:	40140000 	.word	0x40140000
 801372c:	3fe00000 	.word	0x3fe00000
 8013730:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013734:	9d00      	ldr	r5, [sp, #0]
 8013736:	4642      	mov	r2, r8
 8013738:	464b      	mov	r3, r9
 801373a:	4630      	mov	r0, r6
 801373c:	4639      	mov	r1, r7
 801373e:	f7ed f885 	bl	800084c <__aeabi_ddiv>
 8013742:	f7ed fa09 	bl	8000b58 <__aeabi_d2iz>
 8013746:	9001      	str	r0, [sp, #4]
 8013748:	f7ec feec 	bl	8000524 <__aeabi_i2d>
 801374c:	4642      	mov	r2, r8
 801374e:	464b      	mov	r3, r9
 8013750:	f7ec ff52 	bl	80005f8 <__aeabi_dmul>
 8013754:	4602      	mov	r2, r0
 8013756:	460b      	mov	r3, r1
 8013758:	4630      	mov	r0, r6
 801375a:	4639      	mov	r1, r7
 801375c:	f7ec fd94 	bl	8000288 <__aeabi_dsub>
 8013760:	9e01      	ldr	r6, [sp, #4]
 8013762:	9f04      	ldr	r7, [sp, #16]
 8013764:	3630      	adds	r6, #48	; 0x30
 8013766:	f805 6b01 	strb.w	r6, [r5], #1
 801376a:	9e00      	ldr	r6, [sp, #0]
 801376c:	1bae      	subs	r6, r5, r6
 801376e:	42b7      	cmp	r7, r6
 8013770:	4602      	mov	r2, r0
 8013772:	460b      	mov	r3, r1
 8013774:	d134      	bne.n	80137e0 <_dtoa_r+0x708>
 8013776:	f7ec fd89 	bl	800028c <__adddf3>
 801377a:	4642      	mov	r2, r8
 801377c:	464b      	mov	r3, r9
 801377e:	4606      	mov	r6, r0
 8013780:	460f      	mov	r7, r1
 8013782:	f7ed f9c9 	bl	8000b18 <__aeabi_dcmpgt>
 8013786:	b9c8      	cbnz	r0, 80137bc <_dtoa_r+0x6e4>
 8013788:	4642      	mov	r2, r8
 801378a:	464b      	mov	r3, r9
 801378c:	4630      	mov	r0, r6
 801378e:	4639      	mov	r1, r7
 8013790:	f7ed f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013794:	b110      	cbz	r0, 801379c <_dtoa_r+0x6c4>
 8013796:	9b01      	ldr	r3, [sp, #4]
 8013798:	07db      	lsls	r3, r3, #31
 801379a:	d40f      	bmi.n	80137bc <_dtoa_r+0x6e4>
 801379c:	4651      	mov	r1, sl
 801379e:	4620      	mov	r0, r4
 80137a0:	f000 fb18 	bl	8013dd4 <_Bfree>
 80137a4:	2300      	movs	r3, #0
 80137a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80137a8:	702b      	strb	r3, [r5, #0]
 80137aa:	f10b 0301 	add.w	r3, fp, #1
 80137ae:	6013      	str	r3, [r2, #0]
 80137b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f43f ace2 	beq.w	801317c <_dtoa_r+0xa4>
 80137b8:	601d      	str	r5, [r3, #0]
 80137ba:	e4df      	b.n	801317c <_dtoa_r+0xa4>
 80137bc:	465f      	mov	r7, fp
 80137be:	462b      	mov	r3, r5
 80137c0:	461d      	mov	r5, r3
 80137c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137c6:	2a39      	cmp	r2, #57	; 0x39
 80137c8:	d106      	bne.n	80137d8 <_dtoa_r+0x700>
 80137ca:	9a00      	ldr	r2, [sp, #0]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d1f7      	bne.n	80137c0 <_dtoa_r+0x6e8>
 80137d0:	9900      	ldr	r1, [sp, #0]
 80137d2:	2230      	movs	r2, #48	; 0x30
 80137d4:	3701      	adds	r7, #1
 80137d6:	700a      	strb	r2, [r1, #0]
 80137d8:	781a      	ldrb	r2, [r3, #0]
 80137da:	3201      	adds	r2, #1
 80137dc:	701a      	strb	r2, [r3, #0]
 80137de:	e790      	b.n	8013702 <_dtoa_r+0x62a>
 80137e0:	4ba3      	ldr	r3, [pc, #652]	; (8013a70 <_dtoa_r+0x998>)
 80137e2:	2200      	movs	r2, #0
 80137e4:	f7ec ff08 	bl	80005f8 <__aeabi_dmul>
 80137e8:	2200      	movs	r2, #0
 80137ea:	2300      	movs	r3, #0
 80137ec:	4606      	mov	r6, r0
 80137ee:	460f      	mov	r7, r1
 80137f0:	f7ed f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 80137f4:	2800      	cmp	r0, #0
 80137f6:	d09e      	beq.n	8013736 <_dtoa_r+0x65e>
 80137f8:	e7d0      	b.n	801379c <_dtoa_r+0x6c4>
 80137fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137fc:	2a00      	cmp	r2, #0
 80137fe:	f000 80ca 	beq.w	8013996 <_dtoa_r+0x8be>
 8013802:	9a07      	ldr	r2, [sp, #28]
 8013804:	2a01      	cmp	r2, #1
 8013806:	f300 80ad 	bgt.w	8013964 <_dtoa_r+0x88c>
 801380a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801380c:	2a00      	cmp	r2, #0
 801380e:	f000 80a5 	beq.w	801395c <_dtoa_r+0x884>
 8013812:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013816:	9e08      	ldr	r6, [sp, #32]
 8013818:	9d05      	ldr	r5, [sp, #20]
 801381a:	9a05      	ldr	r2, [sp, #20]
 801381c:	441a      	add	r2, r3
 801381e:	9205      	str	r2, [sp, #20]
 8013820:	9a06      	ldr	r2, [sp, #24]
 8013822:	2101      	movs	r1, #1
 8013824:	441a      	add	r2, r3
 8013826:	4620      	mov	r0, r4
 8013828:	9206      	str	r2, [sp, #24]
 801382a:	f000 fbd3 	bl	8013fd4 <__i2b>
 801382e:	4607      	mov	r7, r0
 8013830:	b165      	cbz	r5, 801384c <_dtoa_r+0x774>
 8013832:	9b06      	ldr	r3, [sp, #24]
 8013834:	2b00      	cmp	r3, #0
 8013836:	dd09      	ble.n	801384c <_dtoa_r+0x774>
 8013838:	42ab      	cmp	r3, r5
 801383a:	9a05      	ldr	r2, [sp, #20]
 801383c:	bfa8      	it	ge
 801383e:	462b      	movge	r3, r5
 8013840:	1ad2      	subs	r2, r2, r3
 8013842:	9205      	str	r2, [sp, #20]
 8013844:	9a06      	ldr	r2, [sp, #24]
 8013846:	1aed      	subs	r5, r5, r3
 8013848:	1ad3      	subs	r3, r2, r3
 801384a:	9306      	str	r3, [sp, #24]
 801384c:	9b08      	ldr	r3, [sp, #32]
 801384e:	b1f3      	cbz	r3, 801388e <_dtoa_r+0x7b6>
 8013850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013852:	2b00      	cmp	r3, #0
 8013854:	f000 80a3 	beq.w	801399e <_dtoa_r+0x8c6>
 8013858:	2e00      	cmp	r6, #0
 801385a:	dd10      	ble.n	801387e <_dtoa_r+0x7a6>
 801385c:	4639      	mov	r1, r7
 801385e:	4632      	mov	r2, r6
 8013860:	4620      	mov	r0, r4
 8013862:	f000 fc77 	bl	8014154 <__pow5mult>
 8013866:	4652      	mov	r2, sl
 8013868:	4601      	mov	r1, r0
 801386a:	4607      	mov	r7, r0
 801386c:	4620      	mov	r0, r4
 801386e:	f000 fbc7 	bl	8014000 <__multiply>
 8013872:	4651      	mov	r1, sl
 8013874:	4680      	mov	r8, r0
 8013876:	4620      	mov	r0, r4
 8013878:	f000 faac 	bl	8013dd4 <_Bfree>
 801387c:	46c2      	mov	sl, r8
 801387e:	9b08      	ldr	r3, [sp, #32]
 8013880:	1b9a      	subs	r2, r3, r6
 8013882:	d004      	beq.n	801388e <_dtoa_r+0x7b6>
 8013884:	4651      	mov	r1, sl
 8013886:	4620      	mov	r0, r4
 8013888:	f000 fc64 	bl	8014154 <__pow5mult>
 801388c:	4682      	mov	sl, r0
 801388e:	2101      	movs	r1, #1
 8013890:	4620      	mov	r0, r4
 8013892:	f000 fb9f 	bl	8013fd4 <__i2b>
 8013896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013898:	2b00      	cmp	r3, #0
 801389a:	4606      	mov	r6, r0
 801389c:	f340 8081 	ble.w	80139a2 <_dtoa_r+0x8ca>
 80138a0:	461a      	mov	r2, r3
 80138a2:	4601      	mov	r1, r0
 80138a4:	4620      	mov	r0, r4
 80138a6:	f000 fc55 	bl	8014154 <__pow5mult>
 80138aa:	9b07      	ldr	r3, [sp, #28]
 80138ac:	2b01      	cmp	r3, #1
 80138ae:	4606      	mov	r6, r0
 80138b0:	dd7a      	ble.n	80139a8 <_dtoa_r+0x8d0>
 80138b2:	f04f 0800 	mov.w	r8, #0
 80138b6:	6933      	ldr	r3, [r6, #16]
 80138b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80138bc:	6918      	ldr	r0, [r3, #16]
 80138be:	f000 fb3b 	bl	8013f38 <__hi0bits>
 80138c2:	f1c0 0020 	rsb	r0, r0, #32
 80138c6:	9b06      	ldr	r3, [sp, #24]
 80138c8:	4418      	add	r0, r3
 80138ca:	f010 001f 	ands.w	r0, r0, #31
 80138ce:	f000 8094 	beq.w	80139fa <_dtoa_r+0x922>
 80138d2:	f1c0 0320 	rsb	r3, r0, #32
 80138d6:	2b04      	cmp	r3, #4
 80138d8:	f340 8085 	ble.w	80139e6 <_dtoa_r+0x90e>
 80138dc:	9b05      	ldr	r3, [sp, #20]
 80138de:	f1c0 001c 	rsb	r0, r0, #28
 80138e2:	4403      	add	r3, r0
 80138e4:	9305      	str	r3, [sp, #20]
 80138e6:	9b06      	ldr	r3, [sp, #24]
 80138e8:	4403      	add	r3, r0
 80138ea:	4405      	add	r5, r0
 80138ec:	9306      	str	r3, [sp, #24]
 80138ee:	9b05      	ldr	r3, [sp, #20]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	dd05      	ble.n	8013900 <_dtoa_r+0x828>
 80138f4:	4651      	mov	r1, sl
 80138f6:	461a      	mov	r2, r3
 80138f8:	4620      	mov	r0, r4
 80138fa:	f000 fc85 	bl	8014208 <__lshift>
 80138fe:	4682      	mov	sl, r0
 8013900:	9b06      	ldr	r3, [sp, #24]
 8013902:	2b00      	cmp	r3, #0
 8013904:	dd05      	ble.n	8013912 <_dtoa_r+0x83a>
 8013906:	4631      	mov	r1, r6
 8013908:	461a      	mov	r2, r3
 801390a:	4620      	mov	r0, r4
 801390c:	f000 fc7c 	bl	8014208 <__lshift>
 8013910:	4606      	mov	r6, r0
 8013912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013914:	2b00      	cmp	r3, #0
 8013916:	d072      	beq.n	80139fe <_dtoa_r+0x926>
 8013918:	4631      	mov	r1, r6
 801391a:	4650      	mov	r0, sl
 801391c:	f000 fce0 	bl	80142e0 <__mcmp>
 8013920:	2800      	cmp	r0, #0
 8013922:	da6c      	bge.n	80139fe <_dtoa_r+0x926>
 8013924:	2300      	movs	r3, #0
 8013926:	4651      	mov	r1, sl
 8013928:	220a      	movs	r2, #10
 801392a:	4620      	mov	r0, r4
 801392c:	f000 fa74 	bl	8013e18 <__multadd>
 8013930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013932:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013936:	4682      	mov	sl, r0
 8013938:	2b00      	cmp	r3, #0
 801393a:	f000 81b0 	beq.w	8013c9e <_dtoa_r+0xbc6>
 801393e:	2300      	movs	r3, #0
 8013940:	4639      	mov	r1, r7
 8013942:	220a      	movs	r2, #10
 8013944:	4620      	mov	r0, r4
 8013946:	f000 fa67 	bl	8013e18 <__multadd>
 801394a:	9b01      	ldr	r3, [sp, #4]
 801394c:	2b00      	cmp	r3, #0
 801394e:	4607      	mov	r7, r0
 8013950:	f300 8096 	bgt.w	8013a80 <_dtoa_r+0x9a8>
 8013954:	9b07      	ldr	r3, [sp, #28]
 8013956:	2b02      	cmp	r3, #2
 8013958:	dc59      	bgt.n	8013a0e <_dtoa_r+0x936>
 801395a:	e091      	b.n	8013a80 <_dtoa_r+0x9a8>
 801395c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801395e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013962:	e758      	b.n	8013816 <_dtoa_r+0x73e>
 8013964:	9b04      	ldr	r3, [sp, #16]
 8013966:	1e5e      	subs	r6, r3, #1
 8013968:	9b08      	ldr	r3, [sp, #32]
 801396a:	42b3      	cmp	r3, r6
 801396c:	bfbf      	itttt	lt
 801396e:	9b08      	ldrlt	r3, [sp, #32]
 8013970:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013972:	9608      	strlt	r6, [sp, #32]
 8013974:	1af3      	sublt	r3, r6, r3
 8013976:	bfb4      	ite	lt
 8013978:	18d2      	addlt	r2, r2, r3
 801397a:	1b9e      	subge	r6, r3, r6
 801397c:	9b04      	ldr	r3, [sp, #16]
 801397e:	bfbc      	itt	lt
 8013980:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013982:	2600      	movlt	r6, #0
 8013984:	2b00      	cmp	r3, #0
 8013986:	bfb7      	itett	lt
 8013988:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801398c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013990:	1a9d      	sublt	r5, r3, r2
 8013992:	2300      	movlt	r3, #0
 8013994:	e741      	b.n	801381a <_dtoa_r+0x742>
 8013996:	9e08      	ldr	r6, [sp, #32]
 8013998:	9d05      	ldr	r5, [sp, #20]
 801399a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801399c:	e748      	b.n	8013830 <_dtoa_r+0x758>
 801399e:	9a08      	ldr	r2, [sp, #32]
 80139a0:	e770      	b.n	8013884 <_dtoa_r+0x7ac>
 80139a2:	9b07      	ldr	r3, [sp, #28]
 80139a4:	2b01      	cmp	r3, #1
 80139a6:	dc19      	bgt.n	80139dc <_dtoa_r+0x904>
 80139a8:	9b02      	ldr	r3, [sp, #8]
 80139aa:	b9bb      	cbnz	r3, 80139dc <_dtoa_r+0x904>
 80139ac:	9b03      	ldr	r3, [sp, #12]
 80139ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80139b2:	b99b      	cbnz	r3, 80139dc <_dtoa_r+0x904>
 80139b4:	9b03      	ldr	r3, [sp, #12]
 80139b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80139ba:	0d1b      	lsrs	r3, r3, #20
 80139bc:	051b      	lsls	r3, r3, #20
 80139be:	b183      	cbz	r3, 80139e2 <_dtoa_r+0x90a>
 80139c0:	9b05      	ldr	r3, [sp, #20]
 80139c2:	3301      	adds	r3, #1
 80139c4:	9305      	str	r3, [sp, #20]
 80139c6:	9b06      	ldr	r3, [sp, #24]
 80139c8:	3301      	adds	r3, #1
 80139ca:	9306      	str	r3, [sp, #24]
 80139cc:	f04f 0801 	mov.w	r8, #1
 80139d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	f47f af6f 	bne.w	80138b6 <_dtoa_r+0x7de>
 80139d8:	2001      	movs	r0, #1
 80139da:	e774      	b.n	80138c6 <_dtoa_r+0x7ee>
 80139dc:	f04f 0800 	mov.w	r8, #0
 80139e0:	e7f6      	b.n	80139d0 <_dtoa_r+0x8f8>
 80139e2:	4698      	mov	r8, r3
 80139e4:	e7f4      	b.n	80139d0 <_dtoa_r+0x8f8>
 80139e6:	d082      	beq.n	80138ee <_dtoa_r+0x816>
 80139e8:	9a05      	ldr	r2, [sp, #20]
 80139ea:	331c      	adds	r3, #28
 80139ec:	441a      	add	r2, r3
 80139ee:	9205      	str	r2, [sp, #20]
 80139f0:	9a06      	ldr	r2, [sp, #24]
 80139f2:	441a      	add	r2, r3
 80139f4:	441d      	add	r5, r3
 80139f6:	9206      	str	r2, [sp, #24]
 80139f8:	e779      	b.n	80138ee <_dtoa_r+0x816>
 80139fa:	4603      	mov	r3, r0
 80139fc:	e7f4      	b.n	80139e8 <_dtoa_r+0x910>
 80139fe:	9b04      	ldr	r3, [sp, #16]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	dc37      	bgt.n	8013a74 <_dtoa_r+0x99c>
 8013a04:	9b07      	ldr	r3, [sp, #28]
 8013a06:	2b02      	cmp	r3, #2
 8013a08:	dd34      	ble.n	8013a74 <_dtoa_r+0x99c>
 8013a0a:	9b04      	ldr	r3, [sp, #16]
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	9b01      	ldr	r3, [sp, #4]
 8013a10:	b963      	cbnz	r3, 8013a2c <_dtoa_r+0x954>
 8013a12:	4631      	mov	r1, r6
 8013a14:	2205      	movs	r2, #5
 8013a16:	4620      	mov	r0, r4
 8013a18:	f000 f9fe 	bl	8013e18 <__multadd>
 8013a1c:	4601      	mov	r1, r0
 8013a1e:	4606      	mov	r6, r0
 8013a20:	4650      	mov	r0, sl
 8013a22:	f000 fc5d 	bl	80142e0 <__mcmp>
 8013a26:	2800      	cmp	r0, #0
 8013a28:	f73f adbb 	bgt.w	80135a2 <_dtoa_r+0x4ca>
 8013a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a2e:	9d00      	ldr	r5, [sp, #0]
 8013a30:	ea6f 0b03 	mvn.w	fp, r3
 8013a34:	f04f 0800 	mov.w	r8, #0
 8013a38:	4631      	mov	r1, r6
 8013a3a:	4620      	mov	r0, r4
 8013a3c:	f000 f9ca 	bl	8013dd4 <_Bfree>
 8013a40:	2f00      	cmp	r7, #0
 8013a42:	f43f aeab 	beq.w	801379c <_dtoa_r+0x6c4>
 8013a46:	f1b8 0f00 	cmp.w	r8, #0
 8013a4a:	d005      	beq.n	8013a58 <_dtoa_r+0x980>
 8013a4c:	45b8      	cmp	r8, r7
 8013a4e:	d003      	beq.n	8013a58 <_dtoa_r+0x980>
 8013a50:	4641      	mov	r1, r8
 8013a52:	4620      	mov	r0, r4
 8013a54:	f000 f9be 	bl	8013dd4 <_Bfree>
 8013a58:	4639      	mov	r1, r7
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	f000 f9ba 	bl	8013dd4 <_Bfree>
 8013a60:	e69c      	b.n	801379c <_dtoa_r+0x6c4>
 8013a62:	2600      	movs	r6, #0
 8013a64:	4637      	mov	r7, r6
 8013a66:	e7e1      	b.n	8013a2c <_dtoa_r+0x954>
 8013a68:	46bb      	mov	fp, r7
 8013a6a:	4637      	mov	r7, r6
 8013a6c:	e599      	b.n	80135a2 <_dtoa_r+0x4ca>
 8013a6e:	bf00      	nop
 8013a70:	40240000 	.word	0x40240000
 8013a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f000 80c8 	beq.w	8013c0c <_dtoa_r+0xb34>
 8013a7c:	9b04      	ldr	r3, [sp, #16]
 8013a7e:	9301      	str	r3, [sp, #4]
 8013a80:	2d00      	cmp	r5, #0
 8013a82:	dd05      	ble.n	8013a90 <_dtoa_r+0x9b8>
 8013a84:	4639      	mov	r1, r7
 8013a86:	462a      	mov	r2, r5
 8013a88:	4620      	mov	r0, r4
 8013a8a:	f000 fbbd 	bl	8014208 <__lshift>
 8013a8e:	4607      	mov	r7, r0
 8013a90:	f1b8 0f00 	cmp.w	r8, #0
 8013a94:	d05b      	beq.n	8013b4e <_dtoa_r+0xa76>
 8013a96:	6879      	ldr	r1, [r7, #4]
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f000 f95b 	bl	8013d54 <_Balloc>
 8013a9e:	4605      	mov	r5, r0
 8013aa0:	b928      	cbnz	r0, 8013aae <_dtoa_r+0x9d6>
 8013aa2:	4b83      	ldr	r3, [pc, #524]	; (8013cb0 <_dtoa_r+0xbd8>)
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013aaa:	f7ff bb2e 	b.w	801310a <_dtoa_r+0x32>
 8013aae:	693a      	ldr	r2, [r7, #16]
 8013ab0:	3202      	adds	r2, #2
 8013ab2:	0092      	lsls	r2, r2, #2
 8013ab4:	f107 010c 	add.w	r1, r7, #12
 8013ab8:	300c      	adds	r0, #12
 8013aba:	f7ff fa71 	bl	8012fa0 <memcpy>
 8013abe:	2201      	movs	r2, #1
 8013ac0:	4629      	mov	r1, r5
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	f000 fba0 	bl	8014208 <__lshift>
 8013ac8:	9b00      	ldr	r3, [sp, #0]
 8013aca:	3301      	adds	r3, #1
 8013acc:	9304      	str	r3, [sp, #16]
 8013ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	9308      	str	r3, [sp, #32]
 8013ad6:	9b02      	ldr	r3, [sp, #8]
 8013ad8:	f003 0301 	and.w	r3, r3, #1
 8013adc:	46b8      	mov	r8, r7
 8013ade:	9306      	str	r3, [sp, #24]
 8013ae0:	4607      	mov	r7, r0
 8013ae2:	9b04      	ldr	r3, [sp, #16]
 8013ae4:	4631      	mov	r1, r6
 8013ae6:	3b01      	subs	r3, #1
 8013ae8:	4650      	mov	r0, sl
 8013aea:	9301      	str	r3, [sp, #4]
 8013aec:	f7ff fa6c 	bl	8012fc8 <quorem>
 8013af0:	4641      	mov	r1, r8
 8013af2:	9002      	str	r0, [sp, #8]
 8013af4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013af8:	4650      	mov	r0, sl
 8013afa:	f000 fbf1 	bl	80142e0 <__mcmp>
 8013afe:	463a      	mov	r2, r7
 8013b00:	9005      	str	r0, [sp, #20]
 8013b02:	4631      	mov	r1, r6
 8013b04:	4620      	mov	r0, r4
 8013b06:	f000 fc07 	bl	8014318 <__mdiff>
 8013b0a:	68c2      	ldr	r2, [r0, #12]
 8013b0c:	4605      	mov	r5, r0
 8013b0e:	bb02      	cbnz	r2, 8013b52 <_dtoa_r+0xa7a>
 8013b10:	4601      	mov	r1, r0
 8013b12:	4650      	mov	r0, sl
 8013b14:	f000 fbe4 	bl	80142e0 <__mcmp>
 8013b18:	4602      	mov	r2, r0
 8013b1a:	4629      	mov	r1, r5
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8013b20:	f000 f958 	bl	8013dd4 <_Bfree>
 8013b24:	9b07      	ldr	r3, [sp, #28]
 8013b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b28:	9d04      	ldr	r5, [sp, #16]
 8013b2a:	ea43 0102 	orr.w	r1, r3, r2
 8013b2e:	9b06      	ldr	r3, [sp, #24]
 8013b30:	4319      	orrs	r1, r3
 8013b32:	d110      	bne.n	8013b56 <_dtoa_r+0xa7e>
 8013b34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013b38:	d029      	beq.n	8013b8e <_dtoa_r+0xab6>
 8013b3a:	9b05      	ldr	r3, [sp, #20]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	dd02      	ble.n	8013b46 <_dtoa_r+0xa6e>
 8013b40:	9b02      	ldr	r3, [sp, #8]
 8013b42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013b46:	9b01      	ldr	r3, [sp, #4]
 8013b48:	f883 9000 	strb.w	r9, [r3]
 8013b4c:	e774      	b.n	8013a38 <_dtoa_r+0x960>
 8013b4e:	4638      	mov	r0, r7
 8013b50:	e7ba      	b.n	8013ac8 <_dtoa_r+0x9f0>
 8013b52:	2201      	movs	r2, #1
 8013b54:	e7e1      	b.n	8013b1a <_dtoa_r+0xa42>
 8013b56:	9b05      	ldr	r3, [sp, #20]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	db04      	blt.n	8013b66 <_dtoa_r+0xa8e>
 8013b5c:	9907      	ldr	r1, [sp, #28]
 8013b5e:	430b      	orrs	r3, r1
 8013b60:	9906      	ldr	r1, [sp, #24]
 8013b62:	430b      	orrs	r3, r1
 8013b64:	d120      	bne.n	8013ba8 <_dtoa_r+0xad0>
 8013b66:	2a00      	cmp	r2, #0
 8013b68:	dded      	ble.n	8013b46 <_dtoa_r+0xa6e>
 8013b6a:	4651      	mov	r1, sl
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f000 fb4a 	bl	8014208 <__lshift>
 8013b74:	4631      	mov	r1, r6
 8013b76:	4682      	mov	sl, r0
 8013b78:	f000 fbb2 	bl	80142e0 <__mcmp>
 8013b7c:	2800      	cmp	r0, #0
 8013b7e:	dc03      	bgt.n	8013b88 <_dtoa_r+0xab0>
 8013b80:	d1e1      	bne.n	8013b46 <_dtoa_r+0xa6e>
 8013b82:	f019 0f01 	tst.w	r9, #1
 8013b86:	d0de      	beq.n	8013b46 <_dtoa_r+0xa6e>
 8013b88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013b8c:	d1d8      	bne.n	8013b40 <_dtoa_r+0xa68>
 8013b8e:	9a01      	ldr	r2, [sp, #4]
 8013b90:	2339      	movs	r3, #57	; 0x39
 8013b92:	7013      	strb	r3, [r2, #0]
 8013b94:	462b      	mov	r3, r5
 8013b96:	461d      	mov	r5, r3
 8013b98:	3b01      	subs	r3, #1
 8013b9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013b9e:	2a39      	cmp	r2, #57	; 0x39
 8013ba0:	d06c      	beq.n	8013c7c <_dtoa_r+0xba4>
 8013ba2:	3201      	adds	r2, #1
 8013ba4:	701a      	strb	r2, [r3, #0]
 8013ba6:	e747      	b.n	8013a38 <_dtoa_r+0x960>
 8013ba8:	2a00      	cmp	r2, #0
 8013baa:	dd07      	ble.n	8013bbc <_dtoa_r+0xae4>
 8013bac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013bb0:	d0ed      	beq.n	8013b8e <_dtoa_r+0xab6>
 8013bb2:	9a01      	ldr	r2, [sp, #4]
 8013bb4:	f109 0301 	add.w	r3, r9, #1
 8013bb8:	7013      	strb	r3, [r2, #0]
 8013bba:	e73d      	b.n	8013a38 <_dtoa_r+0x960>
 8013bbc:	9b04      	ldr	r3, [sp, #16]
 8013bbe:	9a08      	ldr	r2, [sp, #32]
 8013bc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	d043      	beq.n	8013c50 <_dtoa_r+0xb78>
 8013bc8:	4651      	mov	r1, sl
 8013bca:	2300      	movs	r3, #0
 8013bcc:	220a      	movs	r2, #10
 8013bce:	4620      	mov	r0, r4
 8013bd0:	f000 f922 	bl	8013e18 <__multadd>
 8013bd4:	45b8      	cmp	r8, r7
 8013bd6:	4682      	mov	sl, r0
 8013bd8:	f04f 0300 	mov.w	r3, #0
 8013bdc:	f04f 020a 	mov.w	r2, #10
 8013be0:	4641      	mov	r1, r8
 8013be2:	4620      	mov	r0, r4
 8013be4:	d107      	bne.n	8013bf6 <_dtoa_r+0xb1e>
 8013be6:	f000 f917 	bl	8013e18 <__multadd>
 8013bea:	4680      	mov	r8, r0
 8013bec:	4607      	mov	r7, r0
 8013bee:	9b04      	ldr	r3, [sp, #16]
 8013bf0:	3301      	adds	r3, #1
 8013bf2:	9304      	str	r3, [sp, #16]
 8013bf4:	e775      	b.n	8013ae2 <_dtoa_r+0xa0a>
 8013bf6:	f000 f90f 	bl	8013e18 <__multadd>
 8013bfa:	4639      	mov	r1, r7
 8013bfc:	4680      	mov	r8, r0
 8013bfe:	2300      	movs	r3, #0
 8013c00:	220a      	movs	r2, #10
 8013c02:	4620      	mov	r0, r4
 8013c04:	f000 f908 	bl	8013e18 <__multadd>
 8013c08:	4607      	mov	r7, r0
 8013c0a:	e7f0      	b.n	8013bee <_dtoa_r+0xb16>
 8013c0c:	9b04      	ldr	r3, [sp, #16]
 8013c0e:	9301      	str	r3, [sp, #4]
 8013c10:	9d00      	ldr	r5, [sp, #0]
 8013c12:	4631      	mov	r1, r6
 8013c14:	4650      	mov	r0, sl
 8013c16:	f7ff f9d7 	bl	8012fc8 <quorem>
 8013c1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013c1e:	9b00      	ldr	r3, [sp, #0]
 8013c20:	f805 9b01 	strb.w	r9, [r5], #1
 8013c24:	1aea      	subs	r2, r5, r3
 8013c26:	9b01      	ldr	r3, [sp, #4]
 8013c28:	4293      	cmp	r3, r2
 8013c2a:	dd07      	ble.n	8013c3c <_dtoa_r+0xb64>
 8013c2c:	4651      	mov	r1, sl
 8013c2e:	2300      	movs	r3, #0
 8013c30:	220a      	movs	r2, #10
 8013c32:	4620      	mov	r0, r4
 8013c34:	f000 f8f0 	bl	8013e18 <__multadd>
 8013c38:	4682      	mov	sl, r0
 8013c3a:	e7ea      	b.n	8013c12 <_dtoa_r+0xb3a>
 8013c3c:	9b01      	ldr	r3, [sp, #4]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	bfc8      	it	gt
 8013c42:	461d      	movgt	r5, r3
 8013c44:	9b00      	ldr	r3, [sp, #0]
 8013c46:	bfd8      	it	le
 8013c48:	2501      	movle	r5, #1
 8013c4a:	441d      	add	r5, r3
 8013c4c:	f04f 0800 	mov.w	r8, #0
 8013c50:	4651      	mov	r1, sl
 8013c52:	2201      	movs	r2, #1
 8013c54:	4620      	mov	r0, r4
 8013c56:	f000 fad7 	bl	8014208 <__lshift>
 8013c5a:	4631      	mov	r1, r6
 8013c5c:	4682      	mov	sl, r0
 8013c5e:	f000 fb3f 	bl	80142e0 <__mcmp>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	dc96      	bgt.n	8013b94 <_dtoa_r+0xabc>
 8013c66:	d102      	bne.n	8013c6e <_dtoa_r+0xb96>
 8013c68:	f019 0f01 	tst.w	r9, #1
 8013c6c:	d192      	bne.n	8013b94 <_dtoa_r+0xabc>
 8013c6e:	462b      	mov	r3, r5
 8013c70:	461d      	mov	r5, r3
 8013c72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c76:	2a30      	cmp	r2, #48	; 0x30
 8013c78:	d0fa      	beq.n	8013c70 <_dtoa_r+0xb98>
 8013c7a:	e6dd      	b.n	8013a38 <_dtoa_r+0x960>
 8013c7c:	9a00      	ldr	r2, [sp, #0]
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d189      	bne.n	8013b96 <_dtoa_r+0xabe>
 8013c82:	f10b 0b01 	add.w	fp, fp, #1
 8013c86:	2331      	movs	r3, #49	; 0x31
 8013c88:	e796      	b.n	8013bb8 <_dtoa_r+0xae0>
 8013c8a:	4b0a      	ldr	r3, [pc, #40]	; (8013cb4 <_dtoa_r+0xbdc>)
 8013c8c:	f7ff ba99 	b.w	80131c2 <_dtoa_r+0xea>
 8013c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	f47f aa6d 	bne.w	8013172 <_dtoa_r+0x9a>
 8013c98:	4b07      	ldr	r3, [pc, #28]	; (8013cb8 <_dtoa_r+0xbe0>)
 8013c9a:	f7ff ba92 	b.w	80131c2 <_dtoa_r+0xea>
 8013c9e:	9b01      	ldr	r3, [sp, #4]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	dcb5      	bgt.n	8013c10 <_dtoa_r+0xb38>
 8013ca4:	9b07      	ldr	r3, [sp, #28]
 8013ca6:	2b02      	cmp	r3, #2
 8013ca8:	f73f aeb1 	bgt.w	8013a0e <_dtoa_r+0x936>
 8013cac:	e7b0      	b.n	8013c10 <_dtoa_r+0xb38>
 8013cae:	bf00      	nop
 8013cb0:	08016a1d 	.word	0x08016a1d
 8013cb4:	08016978 	.word	0x08016978
 8013cb8:	080169a1 	.word	0x080169a1

08013cbc <_free_r>:
 8013cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013cbe:	2900      	cmp	r1, #0
 8013cc0:	d044      	beq.n	8013d4c <_free_r+0x90>
 8013cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cc6:	9001      	str	r0, [sp, #4]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f1a1 0404 	sub.w	r4, r1, #4
 8013cce:	bfb8      	it	lt
 8013cd0:	18e4      	addlt	r4, r4, r3
 8013cd2:	f7fe f941 	bl	8011f58 <__malloc_lock>
 8013cd6:	4a1e      	ldr	r2, [pc, #120]	; (8013d50 <_free_r+0x94>)
 8013cd8:	9801      	ldr	r0, [sp, #4]
 8013cda:	6813      	ldr	r3, [r2, #0]
 8013cdc:	b933      	cbnz	r3, 8013cec <_free_r+0x30>
 8013cde:	6063      	str	r3, [r4, #4]
 8013ce0:	6014      	str	r4, [r2, #0]
 8013ce2:	b003      	add	sp, #12
 8013ce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ce8:	f7fe b93c 	b.w	8011f64 <__malloc_unlock>
 8013cec:	42a3      	cmp	r3, r4
 8013cee:	d908      	bls.n	8013d02 <_free_r+0x46>
 8013cf0:	6825      	ldr	r5, [r4, #0]
 8013cf2:	1961      	adds	r1, r4, r5
 8013cf4:	428b      	cmp	r3, r1
 8013cf6:	bf01      	itttt	eq
 8013cf8:	6819      	ldreq	r1, [r3, #0]
 8013cfa:	685b      	ldreq	r3, [r3, #4]
 8013cfc:	1949      	addeq	r1, r1, r5
 8013cfe:	6021      	streq	r1, [r4, #0]
 8013d00:	e7ed      	b.n	8013cde <_free_r+0x22>
 8013d02:	461a      	mov	r2, r3
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	b10b      	cbz	r3, 8013d0c <_free_r+0x50>
 8013d08:	42a3      	cmp	r3, r4
 8013d0a:	d9fa      	bls.n	8013d02 <_free_r+0x46>
 8013d0c:	6811      	ldr	r1, [r2, #0]
 8013d0e:	1855      	adds	r5, r2, r1
 8013d10:	42a5      	cmp	r5, r4
 8013d12:	d10b      	bne.n	8013d2c <_free_r+0x70>
 8013d14:	6824      	ldr	r4, [r4, #0]
 8013d16:	4421      	add	r1, r4
 8013d18:	1854      	adds	r4, r2, r1
 8013d1a:	42a3      	cmp	r3, r4
 8013d1c:	6011      	str	r1, [r2, #0]
 8013d1e:	d1e0      	bne.n	8013ce2 <_free_r+0x26>
 8013d20:	681c      	ldr	r4, [r3, #0]
 8013d22:	685b      	ldr	r3, [r3, #4]
 8013d24:	6053      	str	r3, [r2, #4]
 8013d26:	440c      	add	r4, r1
 8013d28:	6014      	str	r4, [r2, #0]
 8013d2a:	e7da      	b.n	8013ce2 <_free_r+0x26>
 8013d2c:	d902      	bls.n	8013d34 <_free_r+0x78>
 8013d2e:	230c      	movs	r3, #12
 8013d30:	6003      	str	r3, [r0, #0]
 8013d32:	e7d6      	b.n	8013ce2 <_free_r+0x26>
 8013d34:	6825      	ldr	r5, [r4, #0]
 8013d36:	1961      	adds	r1, r4, r5
 8013d38:	428b      	cmp	r3, r1
 8013d3a:	bf04      	itt	eq
 8013d3c:	6819      	ldreq	r1, [r3, #0]
 8013d3e:	685b      	ldreq	r3, [r3, #4]
 8013d40:	6063      	str	r3, [r4, #4]
 8013d42:	bf04      	itt	eq
 8013d44:	1949      	addeq	r1, r1, r5
 8013d46:	6021      	streq	r1, [r4, #0]
 8013d48:	6054      	str	r4, [r2, #4]
 8013d4a:	e7ca      	b.n	8013ce2 <_free_r+0x26>
 8013d4c:	b003      	add	sp, #12
 8013d4e:	bd30      	pop	{r4, r5, pc}
 8013d50:	20003d68 	.word	0x20003d68

08013d54 <_Balloc>:
 8013d54:	b570      	push	{r4, r5, r6, lr}
 8013d56:	69c6      	ldr	r6, [r0, #28]
 8013d58:	4604      	mov	r4, r0
 8013d5a:	460d      	mov	r5, r1
 8013d5c:	b976      	cbnz	r6, 8013d7c <_Balloc+0x28>
 8013d5e:	2010      	movs	r0, #16
 8013d60:	f7fe f852 	bl	8011e08 <malloc>
 8013d64:	4602      	mov	r2, r0
 8013d66:	61e0      	str	r0, [r4, #28]
 8013d68:	b920      	cbnz	r0, 8013d74 <_Balloc+0x20>
 8013d6a:	4b18      	ldr	r3, [pc, #96]	; (8013dcc <_Balloc+0x78>)
 8013d6c:	4818      	ldr	r0, [pc, #96]	; (8013dd0 <_Balloc+0x7c>)
 8013d6e:	216b      	movs	r1, #107	; 0x6b
 8013d70:	f001 fd6e 	bl	8015850 <__assert_func>
 8013d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d78:	6006      	str	r6, [r0, #0]
 8013d7a:	60c6      	str	r6, [r0, #12]
 8013d7c:	69e6      	ldr	r6, [r4, #28]
 8013d7e:	68f3      	ldr	r3, [r6, #12]
 8013d80:	b183      	cbz	r3, 8013da4 <_Balloc+0x50>
 8013d82:	69e3      	ldr	r3, [r4, #28]
 8013d84:	68db      	ldr	r3, [r3, #12]
 8013d86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d8a:	b9b8      	cbnz	r0, 8013dbc <_Balloc+0x68>
 8013d8c:	2101      	movs	r1, #1
 8013d8e:	fa01 f605 	lsl.w	r6, r1, r5
 8013d92:	1d72      	adds	r2, r6, #5
 8013d94:	0092      	lsls	r2, r2, #2
 8013d96:	4620      	mov	r0, r4
 8013d98:	f001 fd78 	bl	801588c <_calloc_r>
 8013d9c:	b160      	cbz	r0, 8013db8 <_Balloc+0x64>
 8013d9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013da2:	e00e      	b.n	8013dc2 <_Balloc+0x6e>
 8013da4:	2221      	movs	r2, #33	; 0x21
 8013da6:	2104      	movs	r1, #4
 8013da8:	4620      	mov	r0, r4
 8013daa:	f001 fd6f 	bl	801588c <_calloc_r>
 8013dae:	69e3      	ldr	r3, [r4, #28]
 8013db0:	60f0      	str	r0, [r6, #12]
 8013db2:	68db      	ldr	r3, [r3, #12]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d1e4      	bne.n	8013d82 <_Balloc+0x2e>
 8013db8:	2000      	movs	r0, #0
 8013dba:	bd70      	pop	{r4, r5, r6, pc}
 8013dbc:	6802      	ldr	r2, [r0, #0]
 8013dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013dc8:	e7f7      	b.n	8013dba <_Balloc+0x66>
 8013dca:	bf00      	nop
 8013dcc:	080169ae 	.word	0x080169ae
 8013dd0:	08016a2e 	.word	0x08016a2e

08013dd4 <_Bfree>:
 8013dd4:	b570      	push	{r4, r5, r6, lr}
 8013dd6:	69c6      	ldr	r6, [r0, #28]
 8013dd8:	4605      	mov	r5, r0
 8013dda:	460c      	mov	r4, r1
 8013ddc:	b976      	cbnz	r6, 8013dfc <_Bfree+0x28>
 8013dde:	2010      	movs	r0, #16
 8013de0:	f7fe f812 	bl	8011e08 <malloc>
 8013de4:	4602      	mov	r2, r0
 8013de6:	61e8      	str	r0, [r5, #28]
 8013de8:	b920      	cbnz	r0, 8013df4 <_Bfree+0x20>
 8013dea:	4b09      	ldr	r3, [pc, #36]	; (8013e10 <_Bfree+0x3c>)
 8013dec:	4809      	ldr	r0, [pc, #36]	; (8013e14 <_Bfree+0x40>)
 8013dee:	218f      	movs	r1, #143	; 0x8f
 8013df0:	f001 fd2e 	bl	8015850 <__assert_func>
 8013df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013df8:	6006      	str	r6, [r0, #0]
 8013dfa:	60c6      	str	r6, [r0, #12]
 8013dfc:	b13c      	cbz	r4, 8013e0e <_Bfree+0x3a>
 8013dfe:	69eb      	ldr	r3, [r5, #28]
 8013e00:	6862      	ldr	r2, [r4, #4]
 8013e02:	68db      	ldr	r3, [r3, #12]
 8013e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e08:	6021      	str	r1, [r4, #0]
 8013e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e0e:	bd70      	pop	{r4, r5, r6, pc}
 8013e10:	080169ae 	.word	0x080169ae
 8013e14:	08016a2e 	.word	0x08016a2e

08013e18 <__multadd>:
 8013e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e1c:	690d      	ldr	r5, [r1, #16]
 8013e1e:	4607      	mov	r7, r0
 8013e20:	460c      	mov	r4, r1
 8013e22:	461e      	mov	r6, r3
 8013e24:	f101 0c14 	add.w	ip, r1, #20
 8013e28:	2000      	movs	r0, #0
 8013e2a:	f8dc 3000 	ldr.w	r3, [ip]
 8013e2e:	b299      	uxth	r1, r3
 8013e30:	fb02 6101 	mla	r1, r2, r1, r6
 8013e34:	0c1e      	lsrs	r6, r3, #16
 8013e36:	0c0b      	lsrs	r3, r1, #16
 8013e38:	fb02 3306 	mla	r3, r2, r6, r3
 8013e3c:	b289      	uxth	r1, r1
 8013e3e:	3001      	adds	r0, #1
 8013e40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013e44:	4285      	cmp	r5, r0
 8013e46:	f84c 1b04 	str.w	r1, [ip], #4
 8013e4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013e4e:	dcec      	bgt.n	8013e2a <__multadd+0x12>
 8013e50:	b30e      	cbz	r6, 8013e96 <__multadd+0x7e>
 8013e52:	68a3      	ldr	r3, [r4, #8]
 8013e54:	42ab      	cmp	r3, r5
 8013e56:	dc19      	bgt.n	8013e8c <__multadd+0x74>
 8013e58:	6861      	ldr	r1, [r4, #4]
 8013e5a:	4638      	mov	r0, r7
 8013e5c:	3101      	adds	r1, #1
 8013e5e:	f7ff ff79 	bl	8013d54 <_Balloc>
 8013e62:	4680      	mov	r8, r0
 8013e64:	b928      	cbnz	r0, 8013e72 <__multadd+0x5a>
 8013e66:	4602      	mov	r2, r0
 8013e68:	4b0c      	ldr	r3, [pc, #48]	; (8013e9c <__multadd+0x84>)
 8013e6a:	480d      	ldr	r0, [pc, #52]	; (8013ea0 <__multadd+0x88>)
 8013e6c:	21ba      	movs	r1, #186	; 0xba
 8013e6e:	f001 fcef 	bl	8015850 <__assert_func>
 8013e72:	6922      	ldr	r2, [r4, #16]
 8013e74:	3202      	adds	r2, #2
 8013e76:	f104 010c 	add.w	r1, r4, #12
 8013e7a:	0092      	lsls	r2, r2, #2
 8013e7c:	300c      	adds	r0, #12
 8013e7e:	f7ff f88f 	bl	8012fa0 <memcpy>
 8013e82:	4621      	mov	r1, r4
 8013e84:	4638      	mov	r0, r7
 8013e86:	f7ff ffa5 	bl	8013dd4 <_Bfree>
 8013e8a:	4644      	mov	r4, r8
 8013e8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e90:	3501      	adds	r5, #1
 8013e92:	615e      	str	r6, [r3, #20]
 8013e94:	6125      	str	r5, [r4, #16]
 8013e96:	4620      	mov	r0, r4
 8013e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e9c:	08016a1d 	.word	0x08016a1d
 8013ea0:	08016a2e 	.word	0x08016a2e

08013ea4 <__s2b>:
 8013ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ea8:	460c      	mov	r4, r1
 8013eaa:	4615      	mov	r5, r2
 8013eac:	461f      	mov	r7, r3
 8013eae:	2209      	movs	r2, #9
 8013eb0:	3308      	adds	r3, #8
 8013eb2:	4606      	mov	r6, r0
 8013eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8013eb8:	2100      	movs	r1, #0
 8013eba:	2201      	movs	r2, #1
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	db09      	blt.n	8013ed4 <__s2b+0x30>
 8013ec0:	4630      	mov	r0, r6
 8013ec2:	f7ff ff47 	bl	8013d54 <_Balloc>
 8013ec6:	b940      	cbnz	r0, 8013eda <__s2b+0x36>
 8013ec8:	4602      	mov	r2, r0
 8013eca:	4b19      	ldr	r3, [pc, #100]	; (8013f30 <__s2b+0x8c>)
 8013ecc:	4819      	ldr	r0, [pc, #100]	; (8013f34 <__s2b+0x90>)
 8013ece:	21d3      	movs	r1, #211	; 0xd3
 8013ed0:	f001 fcbe 	bl	8015850 <__assert_func>
 8013ed4:	0052      	lsls	r2, r2, #1
 8013ed6:	3101      	adds	r1, #1
 8013ed8:	e7f0      	b.n	8013ebc <__s2b+0x18>
 8013eda:	9b08      	ldr	r3, [sp, #32]
 8013edc:	6143      	str	r3, [r0, #20]
 8013ede:	2d09      	cmp	r5, #9
 8013ee0:	f04f 0301 	mov.w	r3, #1
 8013ee4:	6103      	str	r3, [r0, #16]
 8013ee6:	dd16      	ble.n	8013f16 <__s2b+0x72>
 8013ee8:	f104 0909 	add.w	r9, r4, #9
 8013eec:	46c8      	mov	r8, r9
 8013eee:	442c      	add	r4, r5
 8013ef0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013ef4:	4601      	mov	r1, r0
 8013ef6:	3b30      	subs	r3, #48	; 0x30
 8013ef8:	220a      	movs	r2, #10
 8013efa:	4630      	mov	r0, r6
 8013efc:	f7ff ff8c 	bl	8013e18 <__multadd>
 8013f00:	45a0      	cmp	r8, r4
 8013f02:	d1f5      	bne.n	8013ef0 <__s2b+0x4c>
 8013f04:	f1a5 0408 	sub.w	r4, r5, #8
 8013f08:	444c      	add	r4, r9
 8013f0a:	1b2d      	subs	r5, r5, r4
 8013f0c:	1963      	adds	r3, r4, r5
 8013f0e:	42bb      	cmp	r3, r7
 8013f10:	db04      	blt.n	8013f1c <__s2b+0x78>
 8013f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f16:	340a      	adds	r4, #10
 8013f18:	2509      	movs	r5, #9
 8013f1a:	e7f6      	b.n	8013f0a <__s2b+0x66>
 8013f1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013f20:	4601      	mov	r1, r0
 8013f22:	3b30      	subs	r3, #48	; 0x30
 8013f24:	220a      	movs	r2, #10
 8013f26:	4630      	mov	r0, r6
 8013f28:	f7ff ff76 	bl	8013e18 <__multadd>
 8013f2c:	e7ee      	b.n	8013f0c <__s2b+0x68>
 8013f2e:	bf00      	nop
 8013f30:	08016a1d 	.word	0x08016a1d
 8013f34:	08016a2e 	.word	0x08016a2e

08013f38 <__hi0bits>:
 8013f38:	0c03      	lsrs	r3, r0, #16
 8013f3a:	041b      	lsls	r3, r3, #16
 8013f3c:	b9d3      	cbnz	r3, 8013f74 <__hi0bits+0x3c>
 8013f3e:	0400      	lsls	r0, r0, #16
 8013f40:	2310      	movs	r3, #16
 8013f42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013f46:	bf04      	itt	eq
 8013f48:	0200      	lsleq	r0, r0, #8
 8013f4a:	3308      	addeq	r3, #8
 8013f4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013f50:	bf04      	itt	eq
 8013f52:	0100      	lsleq	r0, r0, #4
 8013f54:	3304      	addeq	r3, #4
 8013f56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013f5a:	bf04      	itt	eq
 8013f5c:	0080      	lsleq	r0, r0, #2
 8013f5e:	3302      	addeq	r3, #2
 8013f60:	2800      	cmp	r0, #0
 8013f62:	db05      	blt.n	8013f70 <__hi0bits+0x38>
 8013f64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013f68:	f103 0301 	add.w	r3, r3, #1
 8013f6c:	bf08      	it	eq
 8013f6e:	2320      	moveq	r3, #32
 8013f70:	4618      	mov	r0, r3
 8013f72:	4770      	bx	lr
 8013f74:	2300      	movs	r3, #0
 8013f76:	e7e4      	b.n	8013f42 <__hi0bits+0xa>

08013f78 <__lo0bits>:
 8013f78:	6803      	ldr	r3, [r0, #0]
 8013f7a:	f013 0207 	ands.w	r2, r3, #7
 8013f7e:	d00c      	beq.n	8013f9a <__lo0bits+0x22>
 8013f80:	07d9      	lsls	r1, r3, #31
 8013f82:	d422      	bmi.n	8013fca <__lo0bits+0x52>
 8013f84:	079a      	lsls	r2, r3, #30
 8013f86:	bf49      	itett	mi
 8013f88:	085b      	lsrmi	r3, r3, #1
 8013f8a:	089b      	lsrpl	r3, r3, #2
 8013f8c:	6003      	strmi	r3, [r0, #0]
 8013f8e:	2201      	movmi	r2, #1
 8013f90:	bf5c      	itt	pl
 8013f92:	6003      	strpl	r3, [r0, #0]
 8013f94:	2202      	movpl	r2, #2
 8013f96:	4610      	mov	r0, r2
 8013f98:	4770      	bx	lr
 8013f9a:	b299      	uxth	r1, r3
 8013f9c:	b909      	cbnz	r1, 8013fa2 <__lo0bits+0x2a>
 8013f9e:	0c1b      	lsrs	r3, r3, #16
 8013fa0:	2210      	movs	r2, #16
 8013fa2:	b2d9      	uxtb	r1, r3
 8013fa4:	b909      	cbnz	r1, 8013faa <__lo0bits+0x32>
 8013fa6:	3208      	adds	r2, #8
 8013fa8:	0a1b      	lsrs	r3, r3, #8
 8013faa:	0719      	lsls	r1, r3, #28
 8013fac:	bf04      	itt	eq
 8013fae:	091b      	lsreq	r3, r3, #4
 8013fb0:	3204      	addeq	r2, #4
 8013fb2:	0799      	lsls	r1, r3, #30
 8013fb4:	bf04      	itt	eq
 8013fb6:	089b      	lsreq	r3, r3, #2
 8013fb8:	3202      	addeq	r2, #2
 8013fba:	07d9      	lsls	r1, r3, #31
 8013fbc:	d403      	bmi.n	8013fc6 <__lo0bits+0x4e>
 8013fbe:	085b      	lsrs	r3, r3, #1
 8013fc0:	f102 0201 	add.w	r2, r2, #1
 8013fc4:	d003      	beq.n	8013fce <__lo0bits+0x56>
 8013fc6:	6003      	str	r3, [r0, #0]
 8013fc8:	e7e5      	b.n	8013f96 <__lo0bits+0x1e>
 8013fca:	2200      	movs	r2, #0
 8013fcc:	e7e3      	b.n	8013f96 <__lo0bits+0x1e>
 8013fce:	2220      	movs	r2, #32
 8013fd0:	e7e1      	b.n	8013f96 <__lo0bits+0x1e>
	...

08013fd4 <__i2b>:
 8013fd4:	b510      	push	{r4, lr}
 8013fd6:	460c      	mov	r4, r1
 8013fd8:	2101      	movs	r1, #1
 8013fda:	f7ff febb 	bl	8013d54 <_Balloc>
 8013fde:	4602      	mov	r2, r0
 8013fe0:	b928      	cbnz	r0, 8013fee <__i2b+0x1a>
 8013fe2:	4b05      	ldr	r3, [pc, #20]	; (8013ff8 <__i2b+0x24>)
 8013fe4:	4805      	ldr	r0, [pc, #20]	; (8013ffc <__i2b+0x28>)
 8013fe6:	f240 1145 	movw	r1, #325	; 0x145
 8013fea:	f001 fc31 	bl	8015850 <__assert_func>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	6144      	str	r4, [r0, #20]
 8013ff2:	6103      	str	r3, [r0, #16]
 8013ff4:	bd10      	pop	{r4, pc}
 8013ff6:	bf00      	nop
 8013ff8:	08016a1d 	.word	0x08016a1d
 8013ffc:	08016a2e 	.word	0x08016a2e

08014000 <__multiply>:
 8014000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014004:	4691      	mov	r9, r2
 8014006:	690a      	ldr	r2, [r1, #16]
 8014008:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801400c:	429a      	cmp	r2, r3
 801400e:	bfb8      	it	lt
 8014010:	460b      	movlt	r3, r1
 8014012:	460c      	mov	r4, r1
 8014014:	bfbc      	itt	lt
 8014016:	464c      	movlt	r4, r9
 8014018:	4699      	movlt	r9, r3
 801401a:	6927      	ldr	r7, [r4, #16]
 801401c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014020:	68a3      	ldr	r3, [r4, #8]
 8014022:	6861      	ldr	r1, [r4, #4]
 8014024:	eb07 060a 	add.w	r6, r7, sl
 8014028:	42b3      	cmp	r3, r6
 801402a:	b085      	sub	sp, #20
 801402c:	bfb8      	it	lt
 801402e:	3101      	addlt	r1, #1
 8014030:	f7ff fe90 	bl	8013d54 <_Balloc>
 8014034:	b930      	cbnz	r0, 8014044 <__multiply+0x44>
 8014036:	4602      	mov	r2, r0
 8014038:	4b44      	ldr	r3, [pc, #272]	; (801414c <__multiply+0x14c>)
 801403a:	4845      	ldr	r0, [pc, #276]	; (8014150 <__multiply+0x150>)
 801403c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014040:	f001 fc06 	bl	8015850 <__assert_func>
 8014044:	f100 0514 	add.w	r5, r0, #20
 8014048:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801404c:	462b      	mov	r3, r5
 801404e:	2200      	movs	r2, #0
 8014050:	4543      	cmp	r3, r8
 8014052:	d321      	bcc.n	8014098 <__multiply+0x98>
 8014054:	f104 0314 	add.w	r3, r4, #20
 8014058:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801405c:	f109 0314 	add.w	r3, r9, #20
 8014060:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014064:	9202      	str	r2, [sp, #8]
 8014066:	1b3a      	subs	r2, r7, r4
 8014068:	3a15      	subs	r2, #21
 801406a:	f022 0203 	bic.w	r2, r2, #3
 801406e:	3204      	adds	r2, #4
 8014070:	f104 0115 	add.w	r1, r4, #21
 8014074:	428f      	cmp	r7, r1
 8014076:	bf38      	it	cc
 8014078:	2204      	movcc	r2, #4
 801407a:	9201      	str	r2, [sp, #4]
 801407c:	9a02      	ldr	r2, [sp, #8]
 801407e:	9303      	str	r3, [sp, #12]
 8014080:	429a      	cmp	r2, r3
 8014082:	d80c      	bhi.n	801409e <__multiply+0x9e>
 8014084:	2e00      	cmp	r6, #0
 8014086:	dd03      	ble.n	8014090 <__multiply+0x90>
 8014088:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801408c:	2b00      	cmp	r3, #0
 801408e:	d05b      	beq.n	8014148 <__multiply+0x148>
 8014090:	6106      	str	r6, [r0, #16]
 8014092:	b005      	add	sp, #20
 8014094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014098:	f843 2b04 	str.w	r2, [r3], #4
 801409c:	e7d8      	b.n	8014050 <__multiply+0x50>
 801409e:	f8b3 a000 	ldrh.w	sl, [r3]
 80140a2:	f1ba 0f00 	cmp.w	sl, #0
 80140a6:	d024      	beq.n	80140f2 <__multiply+0xf2>
 80140a8:	f104 0e14 	add.w	lr, r4, #20
 80140ac:	46a9      	mov	r9, r5
 80140ae:	f04f 0c00 	mov.w	ip, #0
 80140b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80140b6:	f8d9 1000 	ldr.w	r1, [r9]
 80140ba:	fa1f fb82 	uxth.w	fp, r2
 80140be:	b289      	uxth	r1, r1
 80140c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80140c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80140c8:	f8d9 2000 	ldr.w	r2, [r9]
 80140cc:	4461      	add	r1, ip
 80140ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80140d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80140d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80140da:	b289      	uxth	r1, r1
 80140dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80140e0:	4577      	cmp	r7, lr
 80140e2:	f849 1b04 	str.w	r1, [r9], #4
 80140e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80140ea:	d8e2      	bhi.n	80140b2 <__multiply+0xb2>
 80140ec:	9a01      	ldr	r2, [sp, #4]
 80140ee:	f845 c002 	str.w	ip, [r5, r2]
 80140f2:	9a03      	ldr	r2, [sp, #12]
 80140f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80140f8:	3304      	adds	r3, #4
 80140fa:	f1b9 0f00 	cmp.w	r9, #0
 80140fe:	d021      	beq.n	8014144 <__multiply+0x144>
 8014100:	6829      	ldr	r1, [r5, #0]
 8014102:	f104 0c14 	add.w	ip, r4, #20
 8014106:	46ae      	mov	lr, r5
 8014108:	f04f 0a00 	mov.w	sl, #0
 801410c:	f8bc b000 	ldrh.w	fp, [ip]
 8014110:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014114:	fb09 220b 	mla	r2, r9, fp, r2
 8014118:	4452      	add	r2, sl
 801411a:	b289      	uxth	r1, r1
 801411c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014120:	f84e 1b04 	str.w	r1, [lr], #4
 8014124:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014128:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801412c:	f8be 1000 	ldrh.w	r1, [lr]
 8014130:	fb09 110a 	mla	r1, r9, sl, r1
 8014134:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014138:	4567      	cmp	r7, ip
 801413a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801413e:	d8e5      	bhi.n	801410c <__multiply+0x10c>
 8014140:	9a01      	ldr	r2, [sp, #4]
 8014142:	50a9      	str	r1, [r5, r2]
 8014144:	3504      	adds	r5, #4
 8014146:	e799      	b.n	801407c <__multiply+0x7c>
 8014148:	3e01      	subs	r6, #1
 801414a:	e79b      	b.n	8014084 <__multiply+0x84>
 801414c:	08016a1d 	.word	0x08016a1d
 8014150:	08016a2e 	.word	0x08016a2e

08014154 <__pow5mult>:
 8014154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014158:	4615      	mov	r5, r2
 801415a:	f012 0203 	ands.w	r2, r2, #3
 801415e:	4606      	mov	r6, r0
 8014160:	460f      	mov	r7, r1
 8014162:	d007      	beq.n	8014174 <__pow5mult+0x20>
 8014164:	4c25      	ldr	r4, [pc, #148]	; (80141fc <__pow5mult+0xa8>)
 8014166:	3a01      	subs	r2, #1
 8014168:	2300      	movs	r3, #0
 801416a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801416e:	f7ff fe53 	bl	8013e18 <__multadd>
 8014172:	4607      	mov	r7, r0
 8014174:	10ad      	asrs	r5, r5, #2
 8014176:	d03d      	beq.n	80141f4 <__pow5mult+0xa0>
 8014178:	69f4      	ldr	r4, [r6, #28]
 801417a:	b97c      	cbnz	r4, 801419c <__pow5mult+0x48>
 801417c:	2010      	movs	r0, #16
 801417e:	f7fd fe43 	bl	8011e08 <malloc>
 8014182:	4602      	mov	r2, r0
 8014184:	61f0      	str	r0, [r6, #28]
 8014186:	b928      	cbnz	r0, 8014194 <__pow5mult+0x40>
 8014188:	4b1d      	ldr	r3, [pc, #116]	; (8014200 <__pow5mult+0xac>)
 801418a:	481e      	ldr	r0, [pc, #120]	; (8014204 <__pow5mult+0xb0>)
 801418c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014190:	f001 fb5e 	bl	8015850 <__assert_func>
 8014194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014198:	6004      	str	r4, [r0, #0]
 801419a:	60c4      	str	r4, [r0, #12]
 801419c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80141a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80141a4:	b94c      	cbnz	r4, 80141ba <__pow5mult+0x66>
 80141a6:	f240 2171 	movw	r1, #625	; 0x271
 80141aa:	4630      	mov	r0, r6
 80141ac:	f7ff ff12 	bl	8013fd4 <__i2b>
 80141b0:	2300      	movs	r3, #0
 80141b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80141b6:	4604      	mov	r4, r0
 80141b8:	6003      	str	r3, [r0, #0]
 80141ba:	f04f 0900 	mov.w	r9, #0
 80141be:	07eb      	lsls	r3, r5, #31
 80141c0:	d50a      	bpl.n	80141d8 <__pow5mult+0x84>
 80141c2:	4639      	mov	r1, r7
 80141c4:	4622      	mov	r2, r4
 80141c6:	4630      	mov	r0, r6
 80141c8:	f7ff ff1a 	bl	8014000 <__multiply>
 80141cc:	4639      	mov	r1, r7
 80141ce:	4680      	mov	r8, r0
 80141d0:	4630      	mov	r0, r6
 80141d2:	f7ff fdff 	bl	8013dd4 <_Bfree>
 80141d6:	4647      	mov	r7, r8
 80141d8:	106d      	asrs	r5, r5, #1
 80141da:	d00b      	beq.n	80141f4 <__pow5mult+0xa0>
 80141dc:	6820      	ldr	r0, [r4, #0]
 80141de:	b938      	cbnz	r0, 80141f0 <__pow5mult+0x9c>
 80141e0:	4622      	mov	r2, r4
 80141e2:	4621      	mov	r1, r4
 80141e4:	4630      	mov	r0, r6
 80141e6:	f7ff ff0b 	bl	8014000 <__multiply>
 80141ea:	6020      	str	r0, [r4, #0]
 80141ec:	f8c0 9000 	str.w	r9, [r0]
 80141f0:	4604      	mov	r4, r0
 80141f2:	e7e4      	b.n	80141be <__pow5mult+0x6a>
 80141f4:	4638      	mov	r0, r7
 80141f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141fa:	bf00      	nop
 80141fc:	08016b78 	.word	0x08016b78
 8014200:	080169ae 	.word	0x080169ae
 8014204:	08016a2e 	.word	0x08016a2e

08014208 <__lshift>:
 8014208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801420c:	460c      	mov	r4, r1
 801420e:	6849      	ldr	r1, [r1, #4]
 8014210:	6923      	ldr	r3, [r4, #16]
 8014212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014216:	68a3      	ldr	r3, [r4, #8]
 8014218:	4607      	mov	r7, r0
 801421a:	4691      	mov	r9, r2
 801421c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014220:	f108 0601 	add.w	r6, r8, #1
 8014224:	42b3      	cmp	r3, r6
 8014226:	db0b      	blt.n	8014240 <__lshift+0x38>
 8014228:	4638      	mov	r0, r7
 801422a:	f7ff fd93 	bl	8013d54 <_Balloc>
 801422e:	4605      	mov	r5, r0
 8014230:	b948      	cbnz	r0, 8014246 <__lshift+0x3e>
 8014232:	4602      	mov	r2, r0
 8014234:	4b28      	ldr	r3, [pc, #160]	; (80142d8 <__lshift+0xd0>)
 8014236:	4829      	ldr	r0, [pc, #164]	; (80142dc <__lshift+0xd4>)
 8014238:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801423c:	f001 fb08 	bl	8015850 <__assert_func>
 8014240:	3101      	adds	r1, #1
 8014242:	005b      	lsls	r3, r3, #1
 8014244:	e7ee      	b.n	8014224 <__lshift+0x1c>
 8014246:	2300      	movs	r3, #0
 8014248:	f100 0114 	add.w	r1, r0, #20
 801424c:	f100 0210 	add.w	r2, r0, #16
 8014250:	4618      	mov	r0, r3
 8014252:	4553      	cmp	r3, sl
 8014254:	db33      	blt.n	80142be <__lshift+0xb6>
 8014256:	6920      	ldr	r0, [r4, #16]
 8014258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801425c:	f104 0314 	add.w	r3, r4, #20
 8014260:	f019 091f 	ands.w	r9, r9, #31
 8014264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014268:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801426c:	d02b      	beq.n	80142c6 <__lshift+0xbe>
 801426e:	f1c9 0e20 	rsb	lr, r9, #32
 8014272:	468a      	mov	sl, r1
 8014274:	2200      	movs	r2, #0
 8014276:	6818      	ldr	r0, [r3, #0]
 8014278:	fa00 f009 	lsl.w	r0, r0, r9
 801427c:	4310      	orrs	r0, r2
 801427e:	f84a 0b04 	str.w	r0, [sl], #4
 8014282:	f853 2b04 	ldr.w	r2, [r3], #4
 8014286:	459c      	cmp	ip, r3
 8014288:	fa22 f20e 	lsr.w	r2, r2, lr
 801428c:	d8f3      	bhi.n	8014276 <__lshift+0x6e>
 801428e:	ebac 0304 	sub.w	r3, ip, r4
 8014292:	3b15      	subs	r3, #21
 8014294:	f023 0303 	bic.w	r3, r3, #3
 8014298:	3304      	adds	r3, #4
 801429a:	f104 0015 	add.w	r0, r4, #21
 801429e:	4584      	cmp	ip, r0
 80142a0:	bf38      	it	cc
 80142a2:	2304      	movcc	r3, #4
 80142a4:	50ca      	str	r2, [r1, r3]
 80142a6:	b10a      	cbz	r2, 80142ac <__lshift+0xa4>
 80142a8:	f108 0602 	add.w	r6, r8, #2
 80142ac:	3e01      	subs	r6, #1
 80142ae:	4638      	mov	r0, r7
 80142b0:	612e      	str	r6, [r5, #16]
 80142b2:	4621      	mov	r1, r4
 80142b4:	f7ff fd8e 	bl	8013dd4 <_Bfree>
 80142b8:	4628      	mov	r0, r5
 80142ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142be:	f842 0f04 	str.w	r0, [r2, #4]!
 80142c2:	3301      	adds	r3, #1
 80142c4:	e7c5      	b.n	8014252 <__lshift+0x4a>
 80142c6:	3904      	subs	r1, #4
 80142c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80142cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80142d0:	459c      	cmp	ip, r3
 80142d2:	d8f9      	bhi.n	80142c8 <__lshift+0xc0>
 80142d4:	e7ea      	b.n	80142ac <__lshift+0xa4>
 80142d6:	bf00      	nop
 80142d8:	08016a1d 	.word	0x08016a1d
 80142dc:	08016a2e 	.word	0x08016a2e

080142e0 <__mcmp>:
 80142e0:	b530      	push	{r4, r5, lr}
 80142e2:	6902      	ldr	r2, [r0, #16]
 80142e4:	690c      	ldr	r4, [r1, #16]
 80142e6:	1b12      	subs	r2, r2, r4
 80142e8:	d10e      	bne.n	8014308 <__mcmp+0x28>
 80142ea:	f100 0314 	add.w	r3, r0, #20
 80142ee:	3114      	adds	r1, #20
 80142f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80142f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80142f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80142fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014300:	42a5      	cmp	r5, r4
 8014302:	d003      	beq.n	801430c <__mcmp+0x2c>
 8014304:	d305      	bcc.n	8014312 <__mcmp+0x32>
 8014306:	2201      	movs	r2, #1
 8014308:	4610      	mov	r0, r2
 801430a:	bd30      	pop	{r4, r5, pc}
 801430c:	4283      	cmp	r3, r0
 801430e:	d3f3      	bcc.n	80142f8 <__mcmp+0x18>
 8014310:	e7fa      	b.n	8014308 <__mcmp+0x28>
 8014312:	f04f 32ff 	mov.w	r2, #4294967295
 8014316:	e7f7      	b.n	8014308 <__mcmp+0x28>

08014318 <__mdiff>:
 8014318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801431c:	460c      	mov	r4, r1
 801431e:	4606      	mov	r6, r0
 8014320:	4611      	mov	r1, r2
 8014322:	4620      	mov	r0, r4
 8014324:	4690      	mov	r8, r2
 8014326:	f7ff ffdb 	bl	80142e0 <__mcmp>
 801432a:	1e05      	subs	r5, r0, #0
 801432c:	d110      	bne.n	8014350 <__mdiff+0x38>
 801432e:	4629      	mov	r1, r5
 8014330:	4630      	mov	r0, r6
 8014332:	f7ff fd0f 	bl	8013d54 <_Balloc>
 8014336:	b930      	cbnz	r0, 8014346 <__mdiff+0x2e>
 8014338:	4b3a      	ldr	r3, [pc, #232]	; (8014424 <__mdiff+0x10c>)
 801433a:	4602      	mov	r2, r0
 801433c:	f240 2137 	movw	r1, #567	; 0x237
 8014340:	4839      	ldr	r0, [pc, #228]	; (8014428 <__mdiff+0x110>)
 8014342:	f001 fa85 	bl	8015850 <__assert_func>
 8014346:	2301      	movs	r3, #1
 8014348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801434c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014350:	bfa4      	itt	ge
 8014352:	4643      	movge	r3, r8
 8014354:	46a0      	movge	r8, r4
 8014356:	4630      	mov	r0, r6
 8014358:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801435c:	bfa6      	itte	ge
 801435e:	461c      	movge	r4, r3
 8014360:	2500      	movge	r5, #0
 8014362:	2501      	movlt	r5, #1
 8014364:	f7ff fcf6 	bl	8013d54 <_Balloc>
 8014368:	b920      	cbnz	r0, 8014374 <__mdiff+0x5c>
 801436a:	4b2e      	ldr	r3, [pc, #184]	; (8014424 <__mdiff+0x10c>)
 801436c:	4602      	mov	r2, r0
 801436e:	f240 2145 	movw	r1, #581	; 0x245
 8014372:	e7e5      	b.n	8014340 <__mdiff+0x28>
 8014374:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014378:	6926      	ldr	r6, [r4, #16]
 801437a:	60c5      	str	r5, [r0, #12]
 801437c:	f104 0914 	add.w	r9, r4, #20
 8014380:	f108 0514 	add.w	r5, r8, #20
 8014384:	f100 0e14 	add.w	lr, r0, #20
 8014388:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801438c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014390:	f108 0210 	add.w	r2, r8, #16
 8014394:	46f2      	mov	sl, lr
 8014396:	2100      	movs	r1, #0
 8014398:	f859 3b04 	ldr.w	r3, [r9], #4
 801439c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80143a0:	fa11 f88b 	uxtah	r8, r1, fp
 80143a4:	b299      	uxth	r1, r3
 80143a6:	0c1b      	lsrs	r3, r3, #16
 80143a8:	eba8 0801 	sub.w	r8, r8, r1
 80143ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80143b0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80143b4:	fa1f f888 	uxth.w	r8, r8
 80143b8:	1419      	asrs	r1, r3, #16
 80143ba:	454e      	cmp	r6, r9
 80143bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80143c0:	f84a 3b04 	str.w	r3, [sl], #4
 80143c4:	d8e8      	bhi.n	8014398 <__mdiff+0x80>
 80143c6:	1b33      	subs	r3, r6, r4
 80143c8:	3b15      	subs	r3, #21
 80143ca:	f023 0303 	bic.w	r3, r3, #3
 80143ce:	3304      	adds	r3, #4
 80143d0:	3415      	adds	r4, #21
 80143d2:	42a6      	cmp	r6, r4
 80143d4:	bf38      	it	cc
 80143d6:	2304      	movcc	r3, #4
 80143d8:	441d      	add	r5, r3
 80143da:	4473      	add	r3, lr
 80143dc:	469e      	mov	lr, r3
 80143de:	462e      	mov	r6, r5
 80143e0:	4566      	cmp	r6, ip
 80143e2:	d30e      	bcc.n	8014402 <__mdiff+0xea>
 80143e4:	f10c 0203 	add.w	r2, ip, #3
 80143e8:	1b52      	subs	r2, r2, r5
 80143ea:	f022 0203 	bic.w	r2, r2, #3
 80143ee:	3d03      	subs	r5, #3
 80143f0:	45ac      	cmp	ip, r5
 80143f2:	bf38      	it	cc
 80143f4:	2200      	movcc	r2, #0
 80143f6:	4413      	add	r3, r2
 80143f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80143fc:	b17a      	cbz	r2, 801441e <__mdiff+0x106>
 80143fe:	6107      	str	r7, [r0, #16]
 8014400:	e7a4      	b.n	801434c <__mdiff+0x34>
 8014402:	f856 8b04 	ldr.w	r8, [r6], #4
 8014406:	fa11 f288 	uxtah	r2, r1, r8
 801440a:	1414      	asrs	r4, r2, #16
 801440c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014410:	b292      	uxth	r2, r2
 8014412:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014416:	f84e 2b04 	str.w	r2, [lr], #4
 801441a:	1421      	asrs	r1, r4, #16
 801441c:	e7e0      	b.n	80143e0 <__mdiff+0xc8>
 801441e:	3f01      	subs	r7, #1
 8014420:	e7ea      	b.n	80143f8 <__mdiff+0xe0>
 8014422:	bf00      	nop
 8014424:	08016a1d 	.word	0x08016a1d
 8014428:	08016a2e 	.word	0x08016a2e

0801442c <__ulp>:
 801442c:	b082      	sub	sp, #8
 801442e:	ed8d 0b00 	vstr	d0, [sp]
 8014432:	9a01      	ldr	r2, [sp, #4]
 8014434:	4b0f      	ldr	r3, [pc, #60]	; (8014474 <__ulp+0x48>)
 8014436:	4013      	ands	r3, r2
 8014438:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801443c:	2b00      	cmp	r3, #0
 801443e:	dc08      	bgt.n	8014452 <__ulp+0x26>
 8014440:	425b      	negs	r3, r3
 8014442:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014446:	ea4f 5223 	mov.w	r2, r3, asr #20
 801444a:	da04      	bge.n	8014456 <__ulp+0x2a>
 801444c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014450:	4113      	asrs	r3, r2
 8014452:	2200      	movs	r2, #0
 8014454:	e008      	b.n	8014468 <__ulp+0x3c>
 8014456:	f1a2 0314 	sub.w	r3, r2, #20
 801445a:	2b1e      	cmp	r3, #30
 801445c:	bfda      	itte	le
 801445e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014462:	40da      	lsrle	r2, r3
 8014464:	2201      	movgt	r2, #1
 8014466:	2300      	movs	r3, #0
 8014468:	4619      	mov	r1, r3
 801446a:	4610      	mov	r0, r2
 801446c:	ec41 0b10 	vmov	d0, r0, r1
 8014470:	b002      	add	sp, #8
 8014472:	4770      	bx	lr
 8014474:	7ff00000 	.word	0x7ff00000

08014478 <__b2d>:
 8014478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801447c:	6906      	ldr	r6, [r0, #16]
 801447e:	f100 0814 	add.w	r8, r0, #20
 8014482:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014486:	1f37      	subs	r7, r6, #4
 8014488:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801448c:	4610      	mov	r0, r2
 801448e:	f7ff fd53 	bl	8013f38 <__hi0bits>
 8014492:	f1c0 0320 	rsb	r3, r0, #32
 8014496:	280a      	cmp	r0, #10
 8014498:	600b      	str	r3, [r1, #0]
 801449a:	491b      	ldr	r1, [pc, #108]	; (8014508 <__b2d+0x90>)
 801449c:	dc15      	bgt.n	80144ca <__b2d+0x52>
 801449e:	f1c0 0c0b 	rsb	ip, r0, #11
 80144a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80144a6:	45b8      	cmp	r8, r7
 80144a8:	ea43 0501 	orr.w	r5, r3, r1
 80144ac:	bf34      	ite	cc
 80144ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80144b2:	2300      	movcs	r3, #0
 80144b4:	3015      	adds	r0, #21
 80144b6:	fa02 f000 	lsl.w	r0, r2, r0
 80144ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80144be:	4303      	orrs	r3, r0
 80144c0:	461c      	mov	r4, r3
 80144c2:	ec45 4b10 	vmov	d0, r4, r5
 80144c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144ca:	45b8      	cmp	r8, r7
 80144cc:	bf3a      	itte	cc
 80144ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80144d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80144d6:	2300      	movcs	r3, #0
 80144d8:	380b      	subs	r0, #11
 80144da:	d012      	beq.n	8014502 <__b2d+0x8a>
 80144dc:	f1c0 0120 	rsb	r1, r0, #32
 80144e0:	fa23 f401 	lsr.w	r4, r3, r1
 80144e4:	4082      	lsls	r2, r0
 80144e6:	4322      	orrs	r2, r4
 80144e8:	4547      	cmp	r7, r8
 80144ea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80144ee:	bf8c      	ite	hi
 80144f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80144f4:	2200      	movls	r2, #0
 80144f6:	4083      	lsls	r3, r0
 80144f8:	40ca      	lsrs	r2, r1
 80144fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80144fe:	4313      	orrs	r3, r2
 8014500:	e7de      	b.n	80144c0 <__b2d+0x48>
 8014502:	ea42 0501 	orr.w	r5, r2, r1
 8014506:	e7db      	b.n	80144c0 <__b2d+0x48>
 8014508:	3ff00000 	.word	0x3ff00000

0801450c <__d2b>:
 801450c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014510:	460f      	mov	r7, r1
 8014512:	2101      	movs	r1, #1
 8014514:	ec59 8b10 	vmov	r8, r9, d0
 8014518:	4616      	mov	r6, r2
 801451a:	f7ff fc1b 	bl	8013d54 <_Balloc>
 801451e:	4604      	mov	r4, r0
 8014520:	b930      	cbnz	r0, 8014530 <__d2b+0x24>
 8014522:	4602      	mov	r2, r0
 8014524:	4b24      	ldr	r3, [pc, #144]	; (80145b8 <__d2b+0xac>)
 8014526:	4825      	ldr	r0, [pc, #148]	; (80145bc <__d2b+0xb0>)
 8014528:	f240 310f 	movw	r1, #783	; 0x30f
 801452c:	f001 f990 	bl	8015850 <__assert_func>
 8014530:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014534:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014538:	bb2d      	cbnz	r5, 8014586 <__d2b+0x7a>
 801453a:	9301      	str	r3, [sp, #4]
 801453c:	f1b8 0300 	subs.w	r3, r8, #0
 8014540:	d026      	beq.n	8014590 <__d2b+0x84>
 8014542:	4668      	mov	r0, sp
 8014544:	9300      	str	r3, [sp, #0]
 8014546:	f7ff fd17 	bl	8013f78 <__lo0bits>
 801454a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801454e:	b1e8      	cbz	r0, 801458c <__d2b+0x80>
 8014550:	f1c0 0320 	rsb	r3, r0, #32
 8014554:	fa02 f303 	lsl.w	r3, r2, r3
 8014558:	430b      	orrs	r3, r1
 801455a:	40c2      	lsrs	r2, r0
 801455c:	6163      	str	r3, [r4, #20]
 801455e:	9201      	str	r2, [sp, #4]
 8014560:	9b01      	ldr	r3, [sp, #4]
 8014562:	61a3      	str	r3, [r4, #24]
 8014564:	2b00      	cmp	r3, #0
 8014566:	bf14      	ite	ne
 8014568:	2202      	movne	r2, #2
 801456a:	2201      	moveq	r2, #1
 801456c:	6122      	str	r2, [r4, #16]
 801456e:	b1bd      	cbz	r5, 80145a0 <__d2b+0x94>
 8014570:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014574:	4405      	add	r5, r0
 8014576:	603d      	str	r5, [r7, #0]
 8014578:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801457c:	6030      	str	r0, [r6, #0]
 801457e:	4620      	mov	r0, r4
 8014580:	b003      	add	sp, #12
 8014582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801458a:	e7d6      	b.n	801453a <__d2b+0x2e>
 801458c:	6161      	str	r1, [r4, #20]
 801458e:	e7e7      	b.n	8014560 <__d2b+0x54>
 8014590:	a801      	add	r0, sp, #4
 8014592:	f7ff fcf1 	bl	8013f78 <__lo0bits>
 8014596:	9b01      	ldr	r3, [sp, #4]
 8014598:	6163      	str	r3, [r4, #20]
 801459a:	3020      	adds	r0, #32
 801459c:	2201      	movs	r2, #1
 801459e:	e7e5      	b.n	801456c <__d2b+0x60>
 80145a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80145a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80145a8:	6038      	str	r0, [r7, #0]
 80145aa:	6918      	ldr	r0, [r3, #16]
 80145ac:	f7ff fcc4 	bl	8013f38 <__hi0bits>
 80145b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80145b4:	e7e2      	b.n	801457c <__d2b+0x70>
 80145b6:	bf00      	nop
 80145b8:	08016a1d 	.word	0x08016a1d
 80145bc:	08016a2e 	.word	0x08016a2e

080145c0 <__ratio>:
 80145c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145c4:	4688      	mov	r8, r1
 80145c6:	4669      	mov	r1, sp
 80145c8:	4681      	mov	r9, r0
 80145ca:	f7ff ff55 	bl	8014478 <__b2d>
 80145ce:	a901      	add	r1, sp, #4
 80145d0:	4640      	mov	r0, r8
 80145d2:	ec55 4b10 	vmov	r4, r5, d0
 80145d6:	f7ff ff4f 	bl	8014478 <__b2d>
 80145da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80145de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80145e2:	eba3 0c02 	sub.w	ip, r3, r2
 80145e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80145ea:	1a9b      	subs	r3, r3, r2
 80145ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80145f0:	ec51 0b10 	vmov	r0, r1, d0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	bfd6      	itet	le
 80145f8:	460a      	movle	r2, r1
 80145fa:	462a      	movgt	r2, r5
 80145fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014600:	468b      	mov	fp, r1
 8014602:	462f      	mov	r7, r5
 8014604:	bfd4      	ite	le
 8014606:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801460a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801460e:	4620      	mov	r0, r4
 8014610:	ee10 2a10 	vmov	r2, s0
 8014614:	465b      	mov	r3, fp
 8014616:	4639      	mov	r1, r7
 8014618:	f7ec f918 	bl	800084c <__aeabi_ddiv>
 801461c:	ec41 0b10 	vmov	d0, r0, r1
 8014620:	b003      	add	sp, #12
 8014622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014626 <__copybits>:
 8014626:	3901      	subs	r1, #1
 8014628:	b570      	push	{r4, r5, r6, lr}
 801462a:	1149      	asrs	r1, r1, #5
 801462c:	6914      	ldr	r4, [r2, #16]
 801462e:	3101      	adds	r1, #1
 8014630:	f102 0314 	add.w	r3, r2, #20
 8014634:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014638:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801463c:	1f05      	subs	r5, r0, #4
 801463e:	42a3      	cmp	r3, r4
 8014640:	d30c      	bcc.n	801465c <__copybits+0x36>
 8014642:	1aa3      	subs	r3, r4, r2
 8014644:	3b11      	subs	r3, #17
 8014646:	f023 0303 	bic.w	r3, r3, #3
 801464a:	3211      	adds	r2, #17
 801464c:	42a2      	cmp	r2, r4
 801464e:	bf88      	it	hi
 8014650:	2300      	movhi	r3, #0
 8014652:	4418      	add	r0, r3
 8014654:	2300      	movs	r3, #0
 8014656:	4288      	cmp	r0, r1
 8014658:	d305      	bcc.n	8014666 <__copybits+0x40>
 801465a:	bd70      	pop	{r4, r5, r6, pc}
 801465c:	f853 6b04 	ldr.w	r6, [r3], #4
 8014660:	f845 6f04 	str.w	r6, [r5, #4]!
 8014664:	e7eb      	b.n	801463e <__copybits+0x18>
 8014666:	f840 3b04 	str.w	r3, [r0], #4
 801466a:	e7f4      	b.n	8014656 <__copybits+0x30>

0801466c <__any_on>:
 801466c:	f100 0214 	add.w	r2, r0, #20
 8014670:	6900      	ldr	r0, [r0, #16]
 8014672:	114b      	asrs	r3, r1, #5
 8014674:	4298      	cmp	r0, r3
 8014676:	b510      	push	{r4, lr}
 8014678:	db11      	blt.n	801469e <__any_on+0x32>
 801467a:	dd0a      	ble.n	8014692 <__any_on+0x26>
 801467c:	f011 011f 	ands.w	r1, r1, #31
 8014680:	d007      	beq.n	8014692 <__any_on+0x26>
 8014682:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014686:	fa24 f001 	lsr.w	r0, r4, r1
 801468a:	fa00 f101 	lsl.w	r1, r0, r1
 801468e:	428c      	cmp	r4, r1
 8014690:	d10b      	bne.n	80146aa <__any_on+0x3e>
 8014692:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014696:	4293      	cmp	r3, r2
 8014698:	d803      	bhi.n	80146a2 <__any_on+0x36>
 801469a:	2000      	movs	r0, #0
 801469c:	bd10      	pop	{r4, pc}
 801469e:	4603      	mov	r3, r0
 80146a0:	e7f7      	b.n	8014692 <__any_on+0x26>
 80146a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80146a6:	2900      	cmp	r1, #0
 80146a8:	d0f5      	beq.n	8014696 <__any_on+0x2a>
 80146aa:	2001      	movs	r0, #1
 80146ac:	e7f6      	b.n	801469c <__any_on+0x30>

080146ae <sulp>:
 80146ae:	b570      	push	{r4, r5, r6, lr}
 80146b0:	4604      	mov	r4, r0
 80146b2:	460d      	mov	r5, r1
 80146b4:	ec45 4b10 	vmov	d0, r4, r5
 80146b8:	4616      	mov	r6, r2
 80146ba:	f7ff feb7 	bl	801442c <__ulp>
 80146be:	ec51 0b10 	vmov	r0, r1, d0
 80146c2:	b17e      	cbz	r6, 80146e4 <sulp+0x36>
 80146c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80146c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	dd09      	ble.n	80146e4 <sulp+0x36>
 80146d0:	051b      	lsls	r3, r3, #20
 80146d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80146d6:	2400      	movs	r4, #0
 80146d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80146dc:	4622      	mov	r2, r4
 80146de:	462b      	mov	r3, r5
 80146e0:	f7eb ff8a 	bl	80005f8 <__aeabi_dmul>
 80146e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080146e8 <_strtod_l>:
 80146e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146ec:	ed2d 8b02 	vpush	{d8}
 80146f0:	b09b      	sub	sp, #108	; 0x6c
 80146f2:	4604      	mov	r4, r0
 80146f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80146f6:	2200      	movs	r2, #0
 80146f8:	9216      	str	r2, [sp, #88]	; 0x58
 80146fa:	460d      	mov	r5, r1
 80146fc:	f04f 0800 	mov.w	r8, #0
 8014700:	f04f 0900 	mov.w	r9, #0
 8014704:	460a      	mov	r2, r1
 8014706:	9215      	str	r2, [sp, #84]	; 0x54
 8014708:	7811      	ldrb	r1, [r2, #0]
 801470a:	292b      	cmp	r1, #43	; 0x2b
 801470c:	d04c      	beq.n	80147a8 <_strtod_l+0xc0>
 801470e:	d83a      	bhi.n	8014786 <_strtod_l+0x9e>
 8014710:	290d      	cmp	r1, #13
 8014712:	d834      	bhi.n	801477e <_strtod_l+0x96>
 8014714:	2908      	cmp	r1, #8
 8014716:	d834      	bhi.n	8014782 <_strtod_l+0x9a>
 8014718:	2900      	cmp	r1, #0
 801471a:	d03d      	beq.n	8014798 <_strtod_l+0xb0>
 801471c:	2200      	movs	r2, #0
 801471e:	920a      	str	r2, [sp, #40]	; 0x28
 8014720:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014722:	7832      	ldrb	r2, [r6, #0]
 8014724:	2a30      	cmp	r2, #48	; 0x30
 8014726:	f040 80b4 	bne.w	8014892 <_strtod_l+0x1aa>
 801472a:	7872      	ldrb	r2, [r6, #1]
 801472c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014730:	2a58      	cmp	r2, #88	; 0x58
 8014732:	d170      	bne.n	8014816 <_strtod_l+0x12e>
 8014734:	9302      	str	r3, [sp, #8]
 8014736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014738:	9301      	str	r3, [sp, #4]
 801473a:	ab16      	add	r3, sp, #88	; 0x58
 801473c:	9300      	str	r3, [sp, #0]
 801473e:	4a8e      	ldr	r2, [pc, #568]	; (8014978 <_strtod_l+0x290>)
 8014740:	ab17      	add	r3, sp, #92	; 0x5c
 8014742:	a915      	add	r1, sp, #84	; 0x54
 8014744:	4620      	mov	r0, r4
 8014746:	f001 f91f 	bl	8015988 <__gethex>
 801474a:	f010 070f 	ands.w	r7, r0, #15
 801474e:	4605      	mov	r5, r0
 8014750:	d005      	beq.n	801475e <_strtod_l+0x76>
 8014752:	2f06      	cmp	r7, #6
 8014754:	d12a      	bne.n	80147ac <_strtod_l+0xc4>
 8014756:	3601      	adds	r6, #1
 8014758:	2300      	movs	r3, #0
 801475a:	9615      	str	r6, [sp, #84]	; 0x54
 801475c:	930a      	str	r3, [sp, #40]	; 0x28
 801475e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014760:	2b00      	cmp	r3, #0
 8014762:	f040 857f 	bne.w	8015264 <_strtod_l+0xb7c>
 8014766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014768:	b1db      	cbz	r3, 80147a2 <_strtod_l+0xba>
 801476a:	4642      	mov	r2, r8
 801476c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014770:	ec43 2b10 	vmov	d0, r2, r3
 8014774:	b01b      	add	sp, #108	; 0x6c
 8014776:	ecbd 8b02 	vpop	{d8}
 801477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801477e:	2920      	cmp	r1, #32
 8014780:	d1cc      	bne.n	801471c <_strtod_l+0x34>
 8014782:	3201      	adds	r2, #1
 8014784:	e7bf      	b.n	8014706 <_strtod_l+0x1e>
 8014786:	292d      	cmp	r1, #45	; 0x2d
 8014788:	d1c8      	bne.n	801471c <_strtod_l+0x34>
 801478a:	2101      	movs	r1, #1
 801478c:	910a      	str	r1, [sp, #40]	; 0x28
 801478e:	1c51      	adds	r1, r2, #1
 8014790:	9115      	str	r1, [sp, #84]	; 0x54
 8014792:	7852      	ldrb	r2, [r2, #1]
 8014794:	2a00      	cmp	r2, #0
 8014796:	d1c3      	bne.n	8014720 <_strtod_l+0x38>
 8014798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801479a:	9515      	str	r5, [sp, #84]	; 0x54
 801479c:	2b00      	cmp	r3, #0
 801479e:	f040 855f 	bne.w	8015260 <_strtod_l+0xb78>
 80147a2:	4642      	mov	r2, r8
 80147a4:	464b      	mov	r3, r9
 80147a6:	e7e3      	b.n	8014770 <_strtod_l+0x88>
 80147a8:	2100      	movs	r1, #0
 80147aa:	e7ef      	b.n	801478c <_strtod_l+0xa4>
 80147ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80147ae:	b13a      	cbz	r2, 80147c0 <_strtod_l+0xd8>
 80147b0:	2135      	movs	r1, #53	; 0x35
 80147b2:	a818      	add	r0, sp, #96	; 0x60
 80147b4:	f7ff ff37 	bl	8014626 <__copybits>
 80147b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80147ba:	4620      	mov	r0, r4
 80147bc:	f7ff fb0a 	bl	8013dd4 <_Bfree>
 80147c0:	3f01      	subs	r7, #1
 80147c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80147c4:	2f04      	cmp	r7, #4
 80147c6:	d806      	bhi.n	80147d6 <_strtod_l+0xee>
 80147c8:	e8df f007 	tbb	[pc, r7]
 80147cc:	201d0314 	.word	0x201d0314
 80147d0:	14          	.byte	0x14
 80147d1:	00          	.byte	0x00
 80147d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80147d6:	05e9      	lsls	r1, r5, #23
 80147d8:	bf48      	it	mi
 80147da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80147de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80147e2:	0d1b      	lsrs	r3, r3, #20
 80147e4:	051b      	lsls	r3, r3, #20
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d1b9      	bne.n	801475e <_strtod_l+0x76>
 80147ea:	f7fe fbad 	bl	8012f48 <__errno>
 80147ee:	2322      	movs	r3, #34	; 0x22
 80147f0:	6003      	str	r3, [r0, #0]
 80147f2:	e7b4      	b.n	801475e <_strtod_l+0x76>
 80147f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80147f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80147fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014800:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014804:	e7e7      	b.n	80147d6 <_strtod_l+0xee>
 8014806:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014980 <_strtod_l+0x298>
 801480a:	e7e4      	b.n	80147d6 <_strtod_l+0xee>
 801480c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014810:	f04f 38ff 	mov.w	r8, #4294967295
 8014814:	e7df      	b.n	80147d6 <_strtod_l+0xee>
 8014816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014818:	1c5a      	adds	r2, r3, #1
 801481a:	9215      	str	r2, [sp, #84]	; 0x54
 801481c:	785b      	ldrb	r3, [r3, #1]
 801481e:	2b30      	cmp	r3, #48	; 0x30
 8014820:	d0f9      	beq.n	8014816 <_strtod_l+0x12e>
 8014822:	2b00      	cmp	r3, #0
 8014824:	d09b      	beq.n	801475e <_strtod_l+0x76>
 8014826:	2301      	movs	r3, #1
 8014828:	f04f 0a00 	mov.w	sl, #0
 801482c:	9304      	str	r3, [sp, #16]
 801482e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014830:	930b      	str	r3, [sp, #44]	; 0x2c
 8014832:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014836:	46d3      	mov	fp, sl
 8014838:	220a      	movs	r2, #10
 801483a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801483c:	7806      	ldrb	r6, [r0, #0]
 801483e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014842:	b2d9      	uxtb	r1, r3
 8014844:	2909      	cmp	r1, #9
 8014846:	d926      	bls.n	8014896 <_strtod_l+0x1ae>
 8014848:	494c      	ldr	r1, [pc, #304]	; (801497c <_strtod_l+0x294>)
 801484a:	2201      	movs	r2, #1
 801484c:	f000 ffe6 	bl	801581c <strncmp>
 8014850:	2800      	cmp	r0, #0
 8014852:	d030      	beq.n	80148b6 <_strtod_l+0x1ce>
 8014854:	2000      	movs	r0, #0
 8014856:	4632      	mov	r2, r6
 8014858:	9005      	str	r0, [sp, #20]
 801485a:	465e      	mov	r6, fp
 801485c:	4603      	mov	r3, r0
 801485e:	2a65      	cmp	r2, #101	; 0x65
 8014860:	d001      	beq.n	8014866 <_strtod_l+0x17e>
 8014862:	2a45      	cmp	r2, #69	; 0x45
 8014864:	d113      	bne.n	801488e <_strtod_l+0x1a6>
 8014866:	b91e      	cbnz	r6, 8014870 <_strtod_l+0x188>
 8014868:	9a04      	ldr	r2, [sp, #16]
 801486a:	4302      	orrs	r2, r0
 801486c:	d094      	beq.n	8014798 <_strtod_l+0xb0>
 801486e:	2600      	movs	r6, #0
 8014870:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014872:	1c6a      	adds	r2, r5, #1
 8014874:	9215      	str	r2, [sp, #84]	; 0x54
 8014876:	786a      	ldrb	r2, [r5, #1]
 8014878:	2a2b      	cmp	r2, #43	; 0x2b
 801487a:	d074      	beq.n	8014966 <_strtod_l+0x27e>
 801487c:	2a2d      	cmp	r2, #45	; 0x2d
 801487e:	d078      	beq.n	8014972 <_strtod_l+0x28a>
 8014880:	f04f 0c00 	mov.w	ip, #0
 8014884:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014888:	2909      	cmp	r1, #9
 801488a:	d97f      	bls.n	801498c <_strtod_l+0x2a4>
 801488c:	9515      	str	r5, [sp, #84]	; 0x54
 801488e:	2700      	movs	r7, #0
 8014890:	e09e      	b.n	80149d0 <_strtod_l+0x2e8>
 8014892:	2300      	movs	r3, #0
 8014894:	e7c8      	b.n	8014828 <_strtod_l+0x140>
 8014896:	f1bb 0f08 	cmp.w	fp, #8
 801489a:	bfd8      	it	le
 801489c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801489e:	f100 0001 	add.w	r0, r0, #1
 80148a2:	bfda      	itte	le
 80148a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80148a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80148aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80148ae:	f10b 0b01 	add.w	fp, fp, #1
 80148b2:	9015      	str	r0, [sp, #84]	; 0x54
 80148b4:	e7c1      	b.n	801483a <_strtod_l+0x152>
 80148b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148b8:	1c5a      	adds	r2, r3, #1
 80148ba:	9215      	str	r2, [sp, #84]	; 0x54
 80148bc:	785a      	ldrb	r2, [r3, #1]
 80148be:	f1bb 0f00 	cmp.w	fp, #0
 80148c2:	d037      	beq.n	8014934 <_strtod_l+0x24c>
 80148c4:	9005      	str	r0, [sp, #20]
 80148c6:	465e      	mov	r6, fp
 80148c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80148cc:	2b09      	cmp	r3, #9
 80148ce:	d912      	bls.n	80148f6 <_strtod_l+0x20e>
 80148d0:	2301      	movs	r3, #1
 80148d2:	e7c4      	b.n	801485e <_strtod_l+0x176>
 80148d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148d6:	1c5a      	adds	r2, r3, #1
 80148d8:	9215      	str	r2, [sp, #84]	; 0x54
 80148da:	785a      	ldrb	r2, [r3, #1]
 80148dc:	3001      	adds	r0, #1
 80148de:	2a30      	cmp	r2, #48	; 0x30
 80148e0:	d0f8      	beq.n	80148d4 <_strtod_l+0x1ec>
 80148e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80148e6:	2b08      	cmp	r3, #8
 80148e8:	f200 84c1 	bhi.w	801526e <_strtod_l+0xb86>
 80148ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80148ee:	9005      	str	r0, [sp, #20]
 80148f0:	2000      	movs	r0, #0
 80148f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80148f4:	4606      	mov	r6, r0
 80148f6:	3a30      	subs	r2, #48	; 0x30
 80148f8:	f100 0301 	add.w	r3, r0, #1
 80148fc:	d014      	beq.n	8014928 <_strtod_l+0x240>
 80148fe:	9905      	ldr	r1, [sp, #20]
 8014900:	4419      	add	r1, r3
 8014902:	9105      	str	r1, [sp, #20]
 8014904:	4633      	mov	r3, r6
 8014906:	eb00 0c06 	add.w	ip, r0, r6
 801490a:	210a      	movs	r1, #10
 801490c:	4563      	cmp	r3, ip
 801490e:	d113      	bne.n	8014938 <_strtod_l+0x250>
 8014910:	1833      	adds	r3, r6, r0
 8014912:	2b08      	cmp	r3, #8
 8014914:	f106 0601 	add.w	r6, r6, #1
 8014918:	4406      	add	r6, r0
 801491a:	dc1a      	bgt.n	8014952 <_strtod_l+0x26a>
 801491c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801491e:	230a      	movs	r3, #10
 8014920:	fb03 2301 	mla	r3, r3, r1, r2
 8014924:	9309      	str	r3, [sp, #36]	; 0x24
 8014926:	2300      	movs	r3, #0
 8014928:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801492a:	1c51      	adds	r1, r2, #1
 801492c:	9115      	str	r1, [sp, #84]	; 0x54
 801492e:	7852      	ldrb	r2, [r2, #1]
 8014930:	4618      	mov	r0, r3
 8014932:	e7c9      	b.n	80148c8 <_strtod_l+0x1e0>
 8014934:	4658      	mov	r0, fp
 8014936:	e7d2      	b.n	80148de <_strtod_l+0x1f6>
 8014938:	2b08      	cmp	r3, #8
 801493a:	f103 0301 	add.w	r3, r3, #1
 801493e:	dc03      	bgt.n	8014948 <_strtod_l+0x260>
 8014940:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014942:	434f      	muls	r7, r1
 8014944:	9709      	str	r7, [sp, #36]	; 0x24
 8014946:	e7e1      	b.n	801490c <_strtod_l+0x224>
 8014948:	2b10      	cmp	r3, #16
 801494a:	bfd8      	it	le
 801494c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014950:	e7dc      	b.n	801490c <_strtod_l+0x224>
 8014952:	2e10      	cmp	r6, #16
 8014954:	bfdc      	itt	le
 8014956:	230a      	movle	r3, #10
 8014958:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801495c:	e7e3      	b.n	8014926 <_strtod_l+0x23e>
 801495e:	2300      	movs	r3, #0
 8014960:	9305      	str	r3, [sp, #20]
 8014962:	2301      	movs	r3, #1
 8014964:	e780      	b.n	8014868 <_strtod_l+0x180>
 8014966:	f04f 0c00 	mov.w	ip, #0
 801496a:	1caa      	adds	r2, r5, #2
 801496c:	9215      	str	r2, [sp, #84]	; 0x54
 801496e:	78aa      	ldrb	r2, [r5, #2]
 8014970:	e788      	b.n	8014884 <_strtod_l+0x19c>
 8014972:	f04f 0c01 	mov.w	ip, #1
 8014976:	e7f8      	b.n	801496a <_strtod_l+0x282>
 8014978:	08016b88 	.word	0x08016b88
 801497c:	08016b84 	.word	0x08016b84
 8014980:	7ff00000 	.word	0x7ff00000
 8014984:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014986:	1c51      	adds	r1, r2, #1
 8014988:	9115      	str	r1, [sp, #84]	; 0x54
 801498a:	7852      	ldrb	r2, [r2, #1]
 801498c:	2a30      	cmp	r2, #48	; 0x30
 801498e:	d0f9      	beq.n	8014984 <_strtod_l+0x29c>
 8014990:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014994:	2908      	cmp	r1, #8
 8014996:	f63f af7a 	bhi.w	801488e <_strtod_l+0x1a6>
 801499a:	3a30      	subs	r2, #48	; 0x30
 801499c:	9208      	str	r2, [sp, #32]
 801499e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80149a0:	920c      	str	r2, [sp, #48]	; 0x30
 80149a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80149a4:	1c57      	adds	r7, r2, #1
 80149a6:	9715      	str	r7, [sp, #84]	; 0x54
 80149a8:	7852      	ldrb	r2, [r2, #1]
 80149aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80149ae:	f1be 0f09 	cmp.w	lr, #9
 80149b2:	d938      	bls.n	8014a26 <_strtod_l+0x33e>
 80149b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80149b6:	1a7f      	subs	r7, r7, r1
 80149b8:	2f08      	cmp	r7, #8
 80149ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80149be:	dc03      	bgt.n	80149c8 <_strtod_l+0x2e0>
 80149c0:	9908      	ldr	r1, [sp, #32]
 80149c2:	428f      	cmp	r7, r1
 80149c4:	bfa8      	it	ge
 80149c6:	460f      	movge	r7, r1
 80149c8:	f1bc 0f00 	cmp.w	ip, #0
 80149cc:	d000      	beq.n	80149d0 <_strtod_l+0x2e8>
 80149ce:	427f      	negs	r7, r7
 80149d0:	2e00      	cmp	r6, #0
 80149d2:	d14f      	bne.n	8014a74 <_strtod_l+0x38c>
 80149d4:	9904      	ldr	r1, [sp, #16]
 80149d6:	4301      	orrs	r1, r0
 80149d8:	f47f aec1 	bne.w	801475e <_strtod_l+0x76>
 80149dc:	2b00      	cmp	r3, #0
 80149de:	f47f aedb 	bne.w	8014798 <_strtod_l+0xb0>
 80149e2:	2a69      	cmp	r2, #105	; 0x69
 80149e4:	d029      	beq.n	8014a3a <_strtod_l+0x352>
 80149e6:	dc26      	bgt.n	8014a36 <_strtod_l+0x34e>
 80149e8:	2a49      	cmp	r2, #73	; 0x49
 80149ea:	d026      	beq.n	8014a3a <_strtod_l+0x352>
 80149ec:	2a4e      	cmp	r2, #78	; 0x4e
 80149ee:	f47f aed3 	bne.w	8014798 <_strtod_l+0xb0>
 80149f2:	499b      	ldr	r1, [pc, #620]	; (8014c60 <_strtod_l+0x578>)
 80149f4:	a815      	add	r0, sp, #84	; 0x54
 80149f6:	f001 fa07 	bl	8015e08 <__match>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	f43f aecc 	beq.w	8014798 <_strtod_l+0xb0>
 8014a00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	2b28      	cmp	r3, #40	; 0x28
 8014a06:	d12f      	bne.n	8014a68 <_strtod_l+0x380>
 8014a08:	4996      	ldr	r1, [pc, #600]	; (8014c64 <_strtod_l+0x57c>)
 8014a0a:	aa18      	add	r2, sp, #96	; 0x60
 8014a0c:	a815      	add	r0, sp, #84	; 0x54
 8014a0e:	f001 fa0f 	bl	8015e30 <__hexnan>
 8014a12:	2805      	cmp	r0, #5
 8014a14:	d128      	bne.n	8014a68 <_strtod_l+0x380>
 8014a16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014a1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014a20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014a24:	e69b      	b.n	801475e <_strtod_l+0x76>
 8014a26:	9f08      	ldr	r7, [sp, #32]
 8014a28:	210a      	movs	r1, #10
 8014a2a:	fb01 2107 	mla	r1, r1, r7, r2
 8014a2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014a32:	9208      	str	r2, [sp, #32]
 8014a34:	e7b5      	b.n	80149a2 <_strtod_l+0x2ba>
 8014a36:	2a6e      	cmp	r2, #110	; 0x6e
 8014a38:	e7d9      	b.n	80149ee <_strtod_l+0x306>
 8014a3a:	498b      	ldr	r1, [pc, #556]	; (8014c68 <_strtod_l+0x580>)
 8014a3c:	a815      	add	r0, sp, #84	; 0x54
 8014a3e:	f001 f9e3 	bl	8015e08 <__match>
 8014a42:	2800      	cmp	r0, #0
 8014a44:	f43f aea8 	beq.w	8014798 <_strtod_l+0xb0>
 8014a48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a4a:	4988      	ldr	r1, [pc, #544]	; (8014c6c <_strtod_l+0x584>)
 8014a4c:	3b01      	subs	r3, #1
 8014a4e:	a815      	add	r0, sp, #84	; 0x54
 8014a50:	9315      	str	r3, [sp, #84]	; 0x54
 8014a52:	f001 f9d9 	bl	8015e08 <__match>
 8014a56:	b910      	cbnz	r0, 8014a5e <_strtod_l+0x376>
 8014a58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	9315      	str	r3, [sp, #84]	; 0x54
 8014a5e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014c7c <_strtod_l+0x594>
 8014a62:	f04f 0800 	mov.w	r8, #0
 8014a66:	e67a      	b.n	801475e <_strtod_l+0x76>
 8014a68:	4881      	ldr	r0, [pc, #516]	; (8014c70 <_strtod_l+0x588>)
 8014a6a:	f000 fee9 	bl	8015840 <nan>
 8014a6e:	ec59 8b10 	vmov	r8, r9, d0
 8014a72:	e674      	b.n	801475e <_strtod_l+0x76>
 8014a74:	9b05      	ldr	r3, [sp, #20]
 8014a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a78:	1afb      	subs	r3, r7, r3
 8014a7a:	f1bb 0f00 	cmp.w	fp, #0
 8014a7e:	bf08      	it	eq
 8014a80:	46b3      	moveq	fp, r6
 8014a82:	2e10      	cmp	r6, #16
 8014a84:	9308      	str	r3, [sp, #32]
 8014a86:	4635      	mov	r5, r6
 8014a88:	bfa8      	it	ge
 8014a8a:	2510      	movge	r5, #16
 8014a8c:	f7eb fd3a 	bl	8000504 <__aeabi_ui2d>
 8014a90:	2e09      	cmp	r6, #9
 8014a92:	4680      	mov	r8, r0
 8014a94:	4689      	mov	r9, r1
 8014a96:	dd13      	ble.n	8014ac0 <_strtod_l+0x3d8>
 8014a98:	4b76      	ldr	r3, [pc, #472]	; (8014c74 <_strtod_l+0x58c>)
 8014a9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014a9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014aa2:	f7eb fda9 	bl	80005f8 <__aeabi_dmul>
 8014aa6:	4680      	mov	r8, r0
 8014aa8:	4650      	mov	r0, sl
 8014aaa:	4689      	mov	r9, r1
 8014aac:	f7eb fd2a 	bl	8000504 <__aeabi_ui2d>
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	460b      	mov	r3, r1
 8014ab4:	4640      	mov	r0, r8
 8014ab6:	4649      	mov	r1, r9
 8014ab8:	f7eb fbe8 	bl	800028c <__adddf3>
 8014abc:	4680      	mov	r8, r0
 8014abe:	4689      	mov	r9, r1
 8014ac0:	2e0f      	cmp	r6, #15
 8014ac2:	dc38      	bgt.n	8014b36 <_strtod_l+0x44e>
 8014ac4:	9b08      	ldr	r3, [sp, #32]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	f43f ae49 	beq.w	801475e <_strtod_l+0x76>
 8014acc:	dd24      	ble.n	8014b18 <_strtod_l+0x430>
 8014ace:	2b16      	cmp	r3, #22
 8014ad0:	dc0b      	bgt.n	8014aea <_strtod_l+0x402>
 8014ad2:	4968      	ldr	r1, [pc, #416]	; (8014c74 <_strtod_l+0x58c>)
 8014ad4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014adc:	4642      	mov	r2, r8
 8014ade:	464b      	mov	r3, r9
 8014ae0:	f7eb fd8a 	bl	80005f8 <__aeabi_dmul>
 8014ae4:	4680      	mov	r8, r0
 8014ae6:	4689      	mov	r9, r1
 8014ae8:	e639      	b.n	801475e <_strtod_l+0x76>
 8014aea:	9a08      	ldr	r2, [sp, #32]
 8014aec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014af0:	4293      	cmp	r3, r2
 8014af2:	db20      	blt.n	8014b36 <_strtod_l+0x44e>
 8014af4:	4c5f      	ldr	r4, [pc, #380]	; (8014c74 <_strtod_l+0x58c>)
 8014af6:	f1c6 060f 	rsb	r6, r6, #15
 8014afa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014afe:	4642      	mov	r2, r8
 8014b00:	464b      	mov	r3, r9
 8014b02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b06:	f7eb fd77 	bl	80005f8 <__aeabi_dmul>
 8014b0a:	9b08      	ldr	r3, [sp, #32]
 8014b0c:	1b9e      	subs	r6, r3, r6
 8014b0e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014b12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014b16:	e7e3      	b.n	8014ae0 <_strtod_l+0x3f8>
 8014b18:	9b08      	ldr	r3, [sp, #32]
 8014b1a:	3316      	adds	r3, #22
 8014b1c:	db0b      	blt.n	8014b36 <_strtod_l+0x44e>
 8014b1e:	9b05      	ldr	r3, [sp, #20]
 8014b20:	1bdf      	subs	r7, r3, r7
 8014b22:	4b54      	ldr	r3, [pc, #336]	; (8014c74 <_strtod_l+0x58c>)
 8014b24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b2c:	4640      	mov	r0, r8
 8014b2e:	4649      	mov	r1, r9
 8014b30:	f7eb fe8c 	bl	800084c <__aeabi_ddiv>
 8014b34:	e7d6      	b.n	8014ae4 <_strtod_l+0x3fc>
 8014b36:	9b08      	ldr	r3, [sp, #32]
 8014b38:	1b75      	subs	r5, r6, r5
 8014b3a:	441d      	add	r5, r3
 8014b3c:	2d00      	cmp	r5, #0
 8014b3e:	dd70      	ble.n	8014c22 <_strtod_l+0x53a>
 8014b40:	f015 030f 	ands.w	r3, r5, #15
 8014b44:	d00a      	beq.n	8014b5c <_strtod_l+0x474>
 8014b46:	494b      	ldr	r1, [pc, #300]	; (8014c74 <_strtod_l+0x58c>)
 8014b48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014b4c:	4642      	mov	r2, r8
 8014b4e:	464b      	mov	r3, r9
 8014b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b54:	f7eb fd50 	bl	80005f8 <__aeabi_dmul>
 8014b58:	4680      	mov	r8, r0
 8014b5a:	4689      	mov	r9, r1
 8014b5c:	f035 050f 	bics.w	r5, r5, #15
 8014b60:	d04d      	beq.n	8014bfe <_strtod_l+0x516>
 8014b62:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014b66:	dd22      	ble.n	8014bae <_strtod_l+0x4c6>
 8014b68:	2500      	movs	r5, #0
 8014b6a:	46ab      	mov	fp, r5
 8014b6c:	9509      	str	r5, [sp, #36]	; 0x24
 8014b6e:	9505      	str	r5, [sp, #20]
 8014b70:	2322      	movs	r3, #34	; 0x22
 8014b72:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014c7c <_strtod_l+0x594>
 8014b76:	6023      	str	r3, [r4, #0]
 8014b78:	f04f 0800 	mov.w	r8, #0
 8014b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f43f aded 	beq.w	801475e <_strtod_l+0x76>
 8014b84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014b86:	4620      	mov	r0, r4
 8014b88:	f7ff f924 	bl	8013dd4 <_Bfree>
 8014b8c:	9905      	ldr	r1, [sp, #20]
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f7ff f920 	bl	8013dd4 <_Bfree>
 8014b94:	4659      	mov	r1, fp
 8014b96:	4620      	mov	r0, r4
 8014b98:	f7ff f91c 	bl	8013dd4 <_Bfree>
 8014b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f7ff f918 	bl	8013dd4 <_Bfree>
 8014ba4:	4629      	mov	r1, r5
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	f7ff f914 	bl	8013dd4 <_Bfree>
 8014bac:	e5d7      	b.n	801475e <_strtod_l+0x76>
 8014bae:	4b32      	ldr	r3, [pc, #200]	; (8014c78 <_strtod_l+0x590>)
 8014bb0:	9304      	str	r3, [sp, #16]
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	112d      	asrs	r5, r5, #4
 8014bb6:	4640      	mov	r0, r8
 8014bb8:	4649      	mov	r1, r9
 8014bba:	469a      	mov	sl, r3
 8014bbc:	2d01      	cmp	r5, #1
 8014bbe:	dc21      	bgt.n	8014c04 <_strtod_l+0x51c>
 8014bc0:	b10b      	cbz	r3, 8014bc6 <_strtod_l+0x4de>
 8014bc2:	4680      	mov	r8, r0
 8014bc4:	4689      	mov	r9, r1
 8014bc6:	492c      	ldr	r1, [pc, #176]	; (8014c78 <_strtod_l+0x590>)
 8014bc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014bcc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014bd0:	4642      	mov	r2, r8
 8014bd2:	464b      	mov	r3, r9
 8014bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bd8:	f7eb fd0e 	bl	80005f8 <__aeabi_dmul>
 8014bdc:	4b27      	ldr	r3, [pc, #156]	; (8014c7c <_strtod_l+0x594>)
 8014bde:	460a      	mov	r2, r1
 8014be0:	400b      	ands	r3, r1
 8014be2:	4927      	ldr	r1, [pc, #156]	; (8014c80 <_strtod_l+0x598>)
 8014be4:	428b      	cmp	r3, r1
 8014be6:	4680      	mov	r8, r0
 8014be8:	d8be      	bhi.n	8014b68 <_strtod_l+0x480>
 8014bea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014bee:	428b      	cmp	r3, r1
 8014bf0:	bf86      	itte	hi
 8014bf2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8014c84 <_strtod_l+0x59c>
 8014bf6:	f04f 38ff 	movhi.w	r8, #4294967295
 8014bfa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014bfe:	2300      	movs	r3, #0
 8014c00:	9304      	str	r3, [sp, #16]
 8014c02:	e07b      	b.n	8014cfc <_strtod_l+0x614>
 8014c04:	07ea      	lsls	r2, r5, #31
 8014c06:	d505      	bpl.n	8014c14 <_strtod_l+0x52c>
 8014c08:	9b04      	ldr	r3, [sp, #16]
 8014c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0e:	f7eb fcf3 	bl	80005f8 <__aeabi_dmul>
 8014c12:	2301      	movs	r3, #1
 8014c14:	9a04      	ldr	r2, [sp, #16]
 8014c16:	3208      	adds	r2, #8
 8014c18:	f10a 0a01 	add.w	sl, sl, #1
 8014c1c:	106d      	asrs	r5, r5, #1
 8014c1e:	9204      	str	r2, [sp, #16]
 8014c20:	e7cc      	b.n	8014bbc <_strtod_l+0x4d4>
 8014c22:	d0ec      	beq.n	8014bfe <_strtod_l+0x516>
 8014c24:	426d      	negs	r5, r5
 8014c26:	f015 020f 	ands.w	r2, r5, #15
 8014c2a:	d00a      	beq.n	8014c42 <_strtod_l+0x55a>
 8014c2c:	4b11      	ldr	r3, [pc, #68]	; (8014c74 <_strtod_l+0x58c>)
 8014c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c32:	4640      	mov	r0, r8
 8014c34:	4649      	mov	r1, r9
 8014c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3a:	f7eb fe07 	bl	800084c <__aeabi_ddiv>
 8014c3e:	4680      	mov	r8, r0
 8014c40:	4689      	mov	r9, r1
 8014c42:	112d      	asrs	r5, r5, #4
 8014c44:	d0db      	beq.n	8014bfe <_strtod_l+0x516>
 8014c46:	2d1f      	cmp	r5, #31
 8014c48:	dd1e      	ble.n	8014c88 <_strtod_l+0x5a0>
 8014c4a:	2500      	movs	r5, #0
 8014c4c:	46ab      	mov	fp, r5
 8014c4e:	9509      	str	r5, [sp, #36]	; 0x24
 8014c50:	9505      	str	r5, [sp, #20]
 8014c52:	2322      	movs	r3, #34	; 0x22
 8014c54:	f04f 0800 	mov.w	r8, #0
 8014c58:	f04f 0900 	mov.w	r9, #0
 8014c5c:	6023      	str	r3, [r4, #0]
 8014c5e:	e78d      	b.n	8014b7c <_strtod_l+0x494>
 8014c60:	08016975 	.word	0x08016975
 8014c64:	08016b9c 	.word	0x08016b9c
 8014c68:	0801696d 	.word	0x0801696d
 8014c6c:	080169a4 	.word	0x080169a4
 8014c70:	08016d2d 	.word	0x08016d2d
 8014c74:	08016ab0 	.word	0x08016ab0
 8014c78:	08016a88 	.word	0x08016a88
 8014c7c:	7ff00000 	.word	0x7ff00000
 8014c80:	7ca00000 	.word	0x7ca00000
 8014c84:	7fefffff 	.word	0x7fefffff
 8014c88:	f015 0310 	ands.w	r3, r5, #16
 8014c8c:	bf18      	it	ne
 8014c8e:	236a      	movne	r3, #106	; 0x6a
 8014c90:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8015034 <_strtod_l+0x94c>
 8014c94:	9304      	str	r3, [sp, #16]
 8014c96:	4640      	mov	r0, r8
 8014c98:	4649      	mov	r1, r9
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	07ea      	lsls	r2, r5, #31
 8014c9e:	d504      	bpl.n	8014caa <_strtod_l+0x5c2>
 8014ca0:	e9da 2300 	ldrd	r2, r3, [sl]
 8014ca4:	f7eb fca8 	bl	80005f8 <__aeabi_dmul>
 8014ca8:	2301      	movs	r3, #1
 8014caa:	106d      	asrs	r5, r5, #1
 8014cac:	f10a 0a08 	add.w	sl, sl, #8
 8014cb0:	d1f4      	bne.n	8014c9c <_strtod_l+0x5b4>
 8014cb2:	b10b      	cbz	r3, 8014cb8 <_strtod_l+0x5d0>
 8014cb4:	4680      	mov	r8, r0
 8014cb6:	4689      	mov	r9, r1
 8014cb8:	9b04      	ldr	r3, [sp, #16]
 8014cba:	b1bb      	cbz	r3, 8014cec <_strtod_l+0x604>
 8014cbc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8014cc0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	4649      	mov	r1, r9
 8014cc8:	dd10      	ble.n	8014cec <_strtod_l+0x604>
 8014cca:	2b1f      	cmp	r3, #31
 8014ccc:	f340 811e 	ble.w	8014f0c <_strtod_l+0x824>
 8014cd0:	2b34      	cmp	r3, #52	; 0x34
 8014cd2:	bfde      	ittt	le
 8014cd4:	f04f 33ff 	movle.w	r3, #4294967295
 8014cd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8014cdc:	4093      	lslle	r3, r2
 8014cde:	f04f 0800 	mov.w	r8, #0
 8014ce2:	bfcc      	ite	gt
 8014ce4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014ce8:	ea03 0901 	andle.w	r9, r3, r1
 8014cec:	2200      	movs	r2, #0
 8014cee:	2300      	movs	r3, #0
 8014cf0:	4640      	mov	r0, r8
 8014cf2:	4649      	mov	r1, r9
 8014cf4:	f7eb fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8014cf8:	2800      	cmp	r0, #0
 8014cfa:	d1a6      	bne.n	8014c4a <_strtod_l+0x562>
 8014cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cfe:	9300      	str	r3, [sp, #0]
 8014d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d02:	4633      	mov	r3, r6
 8014d04:	465a      	mov	r2, fp
 8014d06:	4620      	mov	r0, r4
 8014d08:	f7ff f8cc 	bl	8013ea4 <__s2b>
 8014d0c:	9009      	str	r0, [sp, #36]	; 0x24
 8014d0e:	2800      	cmp	r0, #0
 8014d10:	f43f af2a 	beq.w	8014b68 <_strtod_l+0x480>
 8014d14:	9a08      	ldr	r2, [sp, #32]
 8014d16:	9b05      	ldr	r3, [sp, #20]
 8014d18:	2a00      	cmp	r2, #0
 8014d1a:	eba3 0307 	sub.w	r3, r3, r7
 8014d1e:	bfa8      	it	ge
 8014d20:	2300      	movge	r3, #0
 8014d22:	930c      	str	r3, [sp, #48]	; 0x30
 8014d24:	2500      	movs	r5, #0
 8014d26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014d2a:	9312      	str	r3, [sp, #72]	; 0x48
 8014d2c:	46ab      	mov	fp, r5
 8014d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d30:	4620      	mov	r0, r4
 8014d32:	6859      	ldr	r1, [r3, #4]
 8014d34:	f7ff f80e 	bl	8013d54 <_Balloc>
 8014d38:	9005      	str	r0, [sp, #20]
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	f43f af18 	beq.w	8014b70 <_strtod_l+0x488>
 8014d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d42:	691a      	ldr	r2, [r3, #16]
 8014d44:	3202      	adds	r2, #2
 8014d46:	f103 010c 	add.w	r1, r3, #12
 8014d4a:	0092      	lsls	r2, r2, #2
 8014d4c:	300c      	adds	r0, #12
 8014d4e:	f7fe f927 	bl	8012fa0 <memcpy>
 8014d52:	ec49 8b10 	vmov	d0, r8, r9
 8014d56:	aa18      	add	r2, sp, #96	; 0x60
 8014d58:	a917      	add	r1, sp, #92	; 0x5c
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	f7ff fbd6 	bl	801450c <__d2b>
 8014d60:	ec49 8b18 	vmov	d8, r8, r9
 8014d64:	9016      	str	r0, [sp, #88]	; 0x58
 8014d66:	2800      	cmp	r0, #0
 8014d68:	f43f af02 	beq.w	8014b70 <_strtod_l+0x488>
 8014d6c:	2101      	movs	r1, #1
 8014d6e:	4620      	mov	r0, r4
 8014d70:	f7ff f930 	bl	8013fd4 <__i2b>
 8014d74:	4683      	mov	fp, r0
 8014d76:	2800      	cmp	r0, #0
 8014d78:	f43f aefa 	beq.w	8014b70 <_strtod_l+0x488>
 8014d7c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8014d7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014d80:	2e00      	cmp	r6, #0
 8014d82:	bfab      	itete	ge
 8014d84:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8014d86:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8014d88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8014d8a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8014d8e:	bfac      	ite	ge
 8014d90:	eb06 0a03 	addge.w	sl, r6, r3
 8014d94:	1b9f      	sublt	r7, r3, r6
 8014d96:	9b04      	ldr	r3, [sp, #16]
 8014d98:	1af6      	subs	r6, r6, r3
 8014d9a:	4416      	add	r6, r2
 8014d9c:	4ba0      	ldr	r3, [pc, #640]	; (8015020 <_strtod_l+0x938>)
 8014d9e:	3e01      	subs	r6, #1
 8014da0:	429e      	cmp	r6, r3
 8014da2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014da6:	f280 80c4 	bge.w	8014f32 <_strtod_l+0x84a>
 8014daa:	1b9b      	subs	r3, r3, r6
 8014dac:	2b1f      	cmp	r3, #31
 8014dae:	eba2 0203 	sub.w	r2, r2, r3
 8014db2:	f04f 0101 	mov.w	r1, #1
 8014db6:	f300 80b0 	bgt.w	8014f1a <_strtod_l+0x832>
 8014dba:	fa01 f303 	lsl.w	r3, r1, r3
 8014dbe:	930e      	str	r3, [sp, #56]	; 0x38
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8014dc4:	eb0a 0602 	add.w	r6, sl, r2
 8014dc8:	9b04      	ldr	r3, [sp, #16]
 8014dca:	45b2      	cmp	sl, r6
 8014dcc:	4417      	add	r7, r2
 8014dce:	441f      	add	r7, r3
 8014dd0:	4653      	mov	r3, sl
 8014dd2:	bfa8      	it	ge
 8014dd4:	4633      	movge	r3, r6
 8014dd6:	42bb      	cmp	r3, r7
 8014dd8:	bfa8      	it	ge
 8014dda:	463b      	movge	r3, r7
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	bfc2      	ittt	gt
 8014de0:	1af6      	subgt	r6, r6, r3
 8014de2:	1aff      	subgt	r7, r7, r3
 8014de4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8014de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	dd17      	ble.n	8014e1e <_strtod_l+0x736>
 8014dee:	4659      	mov	r1, fp
 8014df0:	461a      	mov	r2, r3
 8014df2:	4620      	mov	r0, r4
 8014df4:	f7ff f9ae 	bl	8014154 <__pow5mult>
 8014df8:	4683      	mov	fp, r0
 8014dfa:	2800      	cmp	r0, #0
 8014dfc:	f43f aeb8 	beq.w	8014b70 <_strtod_l+0x488>
 8014e00:	4601      	mov	r1, r0
 8014e02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014e04:	4620      	mov	r0, r4
 8014e06:	f7ff f8fb 	bl	8014000 <__multiply>
 8014e0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8014e0c:	2800      	cmp	r0, #0
 8014e0e:	f43f aeaf 	beq.w	8014b70 <_strtod_l+0x488>
 8014e12:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014e14:	4620      	mov	r0, r4
 8014e16:	f7fe ffdd 	bl	8013dd4 <_Bfree>
 8014e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e1c:	9316      	str	r3, [sp, #88]	; 0x58
 8014e1e:	2e00      	cmp	r6, #0
 8014e20:	f300 808c 	bgt.w	8014f3c <_strtod_l+0x854>
 8014e24:	9b08      	ldr	r3, [sp, #32]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	dd08      	ble.n	8014e3c <_strtod_l+0x754>
 8014e2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e2c:	9905      	ldr	r1, [sp, #20]
 8014e2e:	4620      	mov	r0, r4
 8014e30:	f7ff f990 	bl	8014154 <__pow5mult>
 8014e34:	9005      	str	r0, [sp, #20]
 8014e36:	2800      	cmp	r0, #0
 8014e38:	f43f ae9a 	beq.w	8014b70 <_strtod_l+0x488>
 8014e3c:	2f00      	cmp	r7, #0
 8014e3e:	dd08      	ble.n	8014e52 <_strtod_l+0x76a>
 8014e40:	9905      	ldr	r1, [sp, #20]
 8014e42:	463a      	mov	r2, r7
 8014e44:	4620      	mov	r0, r4
 8014e46:	f7ff f9df 	bl	8014208 <__lshift>
 8014e4a:	9005      	str	r0, [sp, #20]
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	f43f ae8f 	beq.w	8014b70 <_strtod_l+0x488>
 8014e52:	f1ba 0f00 	cmp.w	sl, #0
 8014e56:	dd08      	ble.n	8014e6a <_strtod_l+0x782>
 8014e58:	4659      	mov	r1, fp
 8014e5a:	4652      	mov	r2, sl
 8014e5c:	4620      	mov	r0, r4
 8014e5e:	f7ff f9d3 	bl	8014208 <__lshift>
 8014e62:	4683      	mov	fp, r0
 8014e64:	2800      	cmp	r0, #0
 8014e66:	f43f ae83 	beq.w	8014b70 <_strtod_l+0x488>
 8014e6a:	9a05      	ldr	r2, [sp, #20]
 8014e6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014e6e:	4620      	mov	r0, r4
 8014e70:	f7ff fa52 	bl	8014318 <__mdiff>
 8014e74:	4605      	mov	r5, r0
 8014e76:	2800      	cmp	r0, #0
 8014e78:	f43f ae7a 	beq.w	8014b70 <_strtod_l+0x488>
 8014e7c:	68c3      	ldr	r3, [r0, #12]
 8014e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e80:	2300      	movs	r3, #0
 8014e82:	60c3      	str	r3, [r0, #12]
 8014e84:	4659      	mov	r1, fp
 8014e86:	f7ff fa2b 	bl	80142e0 <__mcmp>
 8014e8a:	2800      	cmp	r0, #0
 8014e8c:	da60      	bge.n	8014f50 <_strtod_l+0x868>
 8014e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e90:	ea53 0308 	orrs.w	r3, r3, r8
 8014e94:	f040 8084 	bne.w	8014fa0 <_strtod_l+0x8b8>
 8014e98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d17f      	bne.n	8014fa0 <_strtod_l+0x8b8>
 8014ea0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014ea4:	0d1b      	lsrs	r3, r3, #20
 8014ea6:	051b      	lsls	r3, r3, #20
 8014ea8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014eac:	d978      	bls.n	8014fa0 <_strtod_l+0x8b8>
 8014eae:	696b      	ldr	r3, [r5, #20]
 8014eb0:	b913      	cbnz	r3, 8014eb8 <_strtod_l+0x7d0>
 8014eb2:	692b      	ldr	r3, [r5, #16]
 8014eb4:	2b01      	cmp	r3, #1
 8014eb6:	dd73      	ble.n	8014fa0 <_strtod_l+0x8b8>
 8014eb8:	4629      	mov	r1, r5
 8014eba:	2201      	movs	r2, #1
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	f7ff f9a3 	bl	8014208 <__lshift>
 8014ec2:	4659      	mov	r1, fp
 8014ec4:	4605      	mov	r5, r0
 8014ec6:	f7ff fa0b 	bl	80142e0 <__mcmp>
 8014eca:	2800      	cmp	r0, #0
 8014ecc:	dd68      	ble.n	8014fa0 <_strtod_l+0x8b8>
 8014ece:	9904      	ldr	r1, [sp, #16]
 8014ed0:	4a54      	ldr	r2, [pc, #336]	; (8015024 <_strtod_l+0x93c>)
 8014ed2:	464b      	mov	r3, r9
 8014ed4:	2900      	cmp	r1, #0
 8014ed6:	f000 8084 	beq.w	8014fe2 <_strtod_l+0x8fa>
 8014eda:	ea02 0109 	and.w	r1, r2, r9
 8014ede:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014ee2:	dc7e      	bgt.n	8014fe2 <_strtod_l+0x8fa>
 8014ee4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014ee8:	f77f aeb3 	ble.w	8014c52 <_strtod_l+0x56a>
 8014eec:	4b4e      	ldr	r3, [pc, #312]	; (8015028 <_strtod_l+0x940>)
 8014eee:	4640      	mov	r0, r8
 8014ef0:	4649      	mov	r1, r9
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	f7eb fb80 	bl	80005f8 <__aeabi_dmul>
 8014ef8:	4b4a      	ldr	r3, [pc, #296]	; (8015024 <_strtod_l+0x93c>)
 8014efa:	400b      	ands	r3, r1
 8014efc:	4680      	mov	r8, r0
 8014efe:	4689      	mov	r9, r1
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	f47f ae3f 	bne.w	8014b84 <_strtod_l+0x49c>
 8014f06:	2322      	movs	r3, #34	; 0x22
 8014f08:	6023      	str	r3, [r4, #0]
 8014f0a:	e63b      	b.n	8014b84 <_strtod_l+0x49c>
 8014f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8014f10:	fa02 f303 	lsl.w	r3, r2, r3
 8014f14:	ea03 0808 	and.w	r8, r3, r8
 8014f18:	e6e8      	b.n	8014cec <_strtod_l+0x604>
 8014f1a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014f1e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014f22:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014f26:	36e2      	adds	r6, #226	; 0xe2
 8014f28:	fa01 f306 	lsl.w	r3, r1, r6
 8014f2c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8014f30:	e748      	b.n	8014dc4 <_strtod_l+0x6dc>
 8014f32:	2100      	movs	r1, #0
 8014f34:	2301      	movs	r3, #1
 8014f36:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8014f3a:	e743      	b.n	8014dc4 <_strtod_l+0x6dc>
 8014f3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f3e:	4632      	mov	r2, r6
 8014f40:	4620      	mov	r0, r4
 8014f42:	f7ff f961 	bl	8014208 <__lshift>
 8014f46:	9016      	str	r0, [sp, #88]	; 0x58
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	f47f af6b 	bne.w	8014e24 <_strtod_l+0x73c>
 8014f4e:	e60f      	b.n	8014b70 <_strtod_l+0x488>
 8014f50:	46ca      	mov	sl, r9
 8014f52:	d171      	bne.n	8015038 <_strtod_l+0x950>
 8014f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014f5a:	b352      	cbz	r2, 8014fb2 <_strtod_l+0x8ca>
 8014f5c:	4a33      	ldr	r2, [pc, #204]	; (801502c <_strtod_l+0x944>)
 8014f5e:	4293      	cmp	r3, r2
 8014f60:	d12a      	bne.n	8014fb8 <_strtod_l+0x8d0>
 8014f62:	9b04      	ldr	r3, [sp, #16]
 8014f64:	4641      	mov	r1, r8
 8014f66:	b1fb      	cbz	r3, 8014fa8 <_strtod_l+0x8c0>
 8014f68:	4b2e      	ldr	r3, [pc, #184]	; (8015024 <_strtod_l+0x93c>)
 8014f6a:	ea09 0303 	and.w	r3, r9, r3
 8014f6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014f72:	f04f 32ff 	mov.w	r2, #4294967295
 8014f76:	d81a      	bhi.n	8014fae <_strtod_l+0x8c6>
 8014f78:	0d1b      	lsrs	r3, r3, #20
 8014f7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f82:	4299      	cmp	r1, r3
 8014f84:	d118      	bne.n	8014fb8 <_strtod_l+0x8d0>
 8014f86:	4b2a      	ldr	r3, [pc, #168]	; (8015030 <_strtod_l+0x948>)
 8014f88:	459a      	cmp	sl, r3
 8014f8a:	d102      	bne.n	8014f92 <_strtod_l+0x8aa>
 8014f8c:	3101      	adds	r1, #1
 8014f8e:	f43f adef 	beq.w	8014b70 <_strtod_l+0x488>
 8014f92:	4b24      	ldr	r3, [pc, #144]	; (8015024 <_strtod_l+0x93c>)
 8014f94:	ea0a 0303 	and.w	r3, sl, r3
 8014f98:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014f9c:	f04f 0800 	mov.w	r8, #0
 8014fa0:	9b04      	ldr	r3, [sp, #16]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d1a2      	bne.n	8014eec <_strtod_l+0x804>
 8014fa6:	e5ed      	b.n	8014b84 <_strtod_l+0x49c>
 8014fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fac:	e7e9      	b.n	8014f82 <_strtod_l+0x89a>
 8014fae:	4613      	mov	r3, r2
 8014fb0:	e7e7      	b.n	8014f82 <_strtod_l+0x89a>
 8014fb2:	ea53 0308 	orrs.w	r3, r3, r8
 8014fb6:	d08a      	beq.n	8014ece <_strtod_l+0x7e6>
 8014fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fba:	b1e3      	cbz	r3, 8014ff6 <_strtod_l+0x90e>
 8014fbc:	ea13 0f0a 	tst.w	r3, sl
 8014fc0:	d0ee      	beq.n	8014fa0 <_strtod_l+0x8b8>
 8014fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fc4:	9a04      	ldr	r2, [sp, #16]
 8014fc6:	4640      	mov	r0, r8
 8014fc8:	4649      	mov	r1, r9
 8014fca:	b1c3      	cbz	r3, 8014ffe <_strtod_l+0x916>
 8014fcc:	f7ff fb6f 	bl	80146ae <sulp>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	460b      	mov	r3, r1
 8014fd4:	ec51 0b18 	vmov	r0, r1, d8
 8014fd8:	f7eb f958 	bl	800028c <__adddf3>
 8014fdc:	4680      	mov	r8, r0
 8014fde:	4689      	mov	r9, r1
 8014fe0:	e7de      	b.n	8014fa0 <_strtod_l+0x8b8>
 8014fe2:	4013      	ands	r3, r2
 8014fe4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014fe8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014fec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014ff0:	f04f 38ff 	mov.w	r8, #4294967295
 8014ff4:	e7d4      	b.n	8014fa0 <_strtod_l+0x8b8>
 8014ff6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ff8:	ea13 0f08 	tst.w	r3, r8
 8014ffc:	e7e0      	b.n	8014fc0 <_strtod_l+0x8d8>
 8014ffe:	f7ff fb56 	bl	80146ae <sulp>
 8015002:	4602      	mov	r2, r0
 8015004:	460b      	mov	r3, r1
 8015006:	ec51 0b18 	vmov	r0, r1, d8
 801500a:	f7eb f93d 	bl	8000288 <__aeabi_dsub>
 801500e:	2200      	movs	r2, #0
 8015010:	2300      	movs	r3, #0
 8015012:	4680      	mov	r8, r0
 8015014:	4689      	mov	r9, r1
 8015016:	f7eb fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 801501a:	2800      	cmp	r0, #0
 801501c:	d0c0      	beq.n	8014fa0 <_strtod_l+0x8b8>
 801501e:	e618      	b.n	8014c52 <_strtod_l+0x56a>
 8015020:	fffffc02 	.word	0xfffffc02
 8015024:	7ff00000 	.word	0x7ff00000
 8015028:	39500000 	.word	0x39500000
 801502c:	000fffff 	.word	0x000fffff
 8015030:	7fefffff 	.word	0x7fefffff
 8015034:	08016bb0 	.word	0x08016bb0
 8015038:	4659      	mov	r1, fp
 801503a:	4628      	mov	r0, r5
 801503c:	f7ff fac0 	bl	80145c0 <__ratio>
 8015040:	ec57 6b10 	vmov	r6, r7, d0
 8015044:	ee10 0a10 	vmov	r0, s0
 8015048:	2200      	movs	r2, #0
 801504a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801504e:	4639      	mov	r1, r7
 8015050:	f7eb fd4e 	bl	8000af0 <__aeabi_dcmple>
 8015054:	2800      	cmp	r0, #0
 8015056:	d071      	beq.n	801513c <_strtod_l+0xa54>
 8015058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801505a:	2b00      	cmp	r3, #0
 801505c:	d17c      	bne.n	8015158 <_strtod_l+0xa70>
 801505e:	f1b8 0f00 	cmp.w	r8, #0
 8015062:	d15a      	bne.n	801511a <_strtod_l+0xa32>
 8015064:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015068:	2b00      	cmp	r3, #0
 801506a:	d15d      	bne.n	8015128 <_strtod_l+0xa40>
 801506c:	4b90      	ldr	r3, [pc, #576]	; (80152b0 <_strtod_l+0xbc8>)
 801506e:	2200      	movs	r2, #0
 8015070:	4630      	mov	r0, r6
 8015072:	4639      	mov	r1, r7
 8015074:	f7eb fd32 	bl	8000adc <__aeabi_dcmplt>
 8015078:	2800      	cmp	r0, #0
 801507a:	d15c      	bne.n	8015136 <_strtod_l+0xa4e>
 801507c:	4630      	mov	r0, r6
 801507e:	4639      	mov	r1, r7
 8015080:	4b8c      	ldr	r3, [pc, #560]	; (80152b4 <_strtod_l+0xbcc>)
 8015082:	2200      	movs	r2, #0
 8015084:	f7eb fab8 	bl	80005f8 <__aeabi_dmul>
 8015088:	4606      	mov	r6, r0
 801508a:	460f      	mov	r7, r1
 801508c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015090:	9606      	str	r6, [sp, #24]
 8015092:	9307      	str	r3, [sp, #28]
 8015094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015098:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801509c:	4b86      	ldr	r3, [pc, #536]	; (80152b8 <_strtod_l+0xbd0>)
 801509e:	ea0a 0303 	and.w	r3, sl, r3
 80150a2:	930d      	str	r3, [sp, #52]	; 0x34
 80150a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80150a6:	4b85      	ldr	r3, [pc, #532]	; (80152bc <_strtod_l+0xbd4>)
 80150a8:	429a      	cmp	r2, r3
 80150aa:	f040 8090 	bne.w	80151ce <_strtod_l+0xae6>
 80150ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80150b2:	ec49 8b10 	vmov	d0, r8, r9
 80150b6:	f7ff f9b9 	bl	801442c <__ulp>
 80150ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150be:	ec51 0b10 	vmov	r0, r1, d0
 80150c2:	f7eb fa99 	bl	80005f8 <__aeabi_dmul>
 80150c6:	4642      	mov	r2, r8
 80150c8:	464b      	mov	r3, r9
 80150ca:	f7eb f8df 	bl	800028c <__adddf3>
 80150ce:	460b      	mov	r3, r1
 80150d0:	4979      	ldr	r1, [pc, #484]	; (80152b8 <_strtod_l+0xbd0>)
 80150d2:	4a7b      	ldr	r2, [pc, #492]	; (80152c0 <_strtod_l+0xbd8>)
 80150d4:	4019      	ands	r1, r3
 80150d6:	4291      	cmp	r1, r2
 80150d8:	4680      	mov	r8, r0
 80150da:	d944      	bls.n	8015166 <_strtod_l+0xa7e>
 80150dc:	ee18 2a90 	vmov	r2, s17
 80150e0:	4b78      	ldr	r3, [pc, #480]	; (80152c4 <_strtod_l+0xbdc>)
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d104      	bne.n	80150f0 <_strtod_l+0xa08>
 80150e6:	ee18 3a10 	vmov	r3, s16
 80150ea:	3301      	adds	r3, #1
 80150ec:	f43f ad40 	beq.w	8014b70 <_strtod_l+0x488>
 80150f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80152c4 <_strtod_l+0xbdc>
 80150f4:	f04f 38ff 	mov.w	r8, #4294967295
 80150f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80150fa:	4620      	mov	r0, r4
 80150fc:	f7fe fe6a 	bl	8013dd4 <_Bfree>
 8015100:	9905      	ldr	r1, [sp, #20]
 8015102:	4620      	mov	r0, r4
 8015104:	f7fe fe66 	bl	8013dd4 <_Bfree>
 8015108:	4659      	mov	r1, fp
 801510a:	4620      	mov	r0, r4
 801510c:	f7fe fe62 	bl	8013dd4 <_Bfree>
 8015110:	4629      	mov	r1, r5
 8015112:	4620      	mov	r0, r4
 8015114:	f7fe fe5e 	bl	8013dd4 <_Bfree>
 8015118:	e609      	b.n	8014d2e <_strtod_l+0x646>
 801511a:	f1b8 0f01 	cmp.w	r8, #1
 801511e:	d103      	bne.n	8015128 <_strtod_l+0xa40>
 8015120:	f1b9 0f00 	cmp.w	r9, #0
 8015124:	f43f ad95 	beq.w	8014c52 <_strtod_l+0x56a>
 8015128:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015280 <_strtod_l+0xb98>
 801512c:	4f60      	ldr	r7, [pc, #384]	; (80152b0 <_strtod_l+0xbc8>)
 801512e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015132:	2600      	movs	r6, #0
 8015134:	e7ae      	b.n	8015094 <_strtod_l+0x9ac>
 8015136:	4f5f      	ldr	r7, [pc, #380]	; (80152b4 <_strtod_l+0xbcc>)
 8015138:	2600      	movs	r6, #0
 801513a:	e7a7      	b.n	801508c <_strtod_l+0x9a4>
 801513c:	4b5d      	ldr	r3, [pc, #372]	; (80152b4 <_strtod_l+0xbcc>)
 801513e:	4630      	mov	r0, r6
 8015140:	4639      	mov	r1, r7
 8015142:	2200      	movs	r2, #0
 8015144:	f7eb fa58 	bl	80005f8 <__aeabi_dmul>
 8015148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801514a:	4606      	mov	r6, r0
 801514c:	460f      	mov	r7, r1
 801514e:	2b00      	cmp	r3, #0
 8015150:	d09c      	beq.n	801508c <_strtod_l+0x9a4>
 8015152:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015156:	e79d      	b.n	8015094 <_strtod_l+0x9ac>
 8015158:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015288 <_strtod_l+0xba0>
 801515c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015160:	ec57 6b17 	vmov	r6, r7, d7
 8015164:	e796      	b.n	8015094 <_strtod_l+0x9ac>
 8015166:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801516a:	9b04      	ldr	r3, [sp, #16]
 801516c:	46ca      	mov	sl, r9
 801516e:	2b00      	cmp	r3, #0
 8015170:	d1c2      	bne.n	80150f8 <_strtod_l+0xa10>
 8015172:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015176:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015178:	0d1b      	lsrs	r3, r3, #20
 801517a:	051b      	lsls	r3, r3, #20
 801517c:	429a      	cmp	r2, r3
 801517e:	d1bb      	bne.n	80150f8 <_strtod_l+0xa10>
 8015180:	4630      	mov	r0, r6
 8015182:	4639      	mov	r1, r7
 8015184:	f7eb fd80 	bl	8000c88 <__aeabi_d2lz>
 8015188:	f7eb fa08 	bl	800059c <__aeabi_l2d>
 801518c:	4602      	mov	r2, r0
 801518e:	460b      	mov	r3, r1
 8015190:	4630      	mov	r0, r6
 8015192:	4639      	mov	r1, r7
 8015194:	f7eb f878 	bl	8000288 <__aeabi_dsub>
 8015198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801519a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801519e:	ea43 0308 	orr.w	r3, r3, r8
 80151a2:	4313      	orrs	r3, r2
 80151a4:	4606      	mov	r6, r0
 80151a6:	460f      	mov	r7, r1
 80151a8:	d054      	beq.n	8015254 <_strtod_l+0xb6c>
 80151aa:	a339      	add	r3, pc, #228	; (adr r3, 8015290 <_strtod_l+0xba8>)
 80151ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151b0:	f7eb fc94 	bl	8000adc <__aeabi_dcmplt>
 80151b4:	2800      	cmp	r0, #0
 80151b6:	f47f ace5 	bne.w	8014b84 <_strtod_l+0x49c>
 80151ba:	a337      	add	r3, pc, #220	; (adr r3, 8015298 <_strtod_l+0xbb0>)
 80151bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c0:	4630      	mov	r0, r6
 80151c2:	4639      	mov	r1, r7
 80151c4:	f7eb fca8 	bl	8000b18 <__aeabi_dcmpgt>
 80151c8:	2800      	cmp	r0, #0
 80151ca:	d095      	beq.n	80150f8 <_strtod_l+0xa10>
 80151cc:	e4da      	b.n	8014b84 <_strtod_l+0x49c>
 80151ce:	9b04      	ldr	r3, [sp, #16]
 80151d0:	b333      	cbz	r3, 8015220 <_strtod_l+0xb38>
 80151d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80151d8:	d822      	bhi.n	8015220 <_strtod_l+0xb38>
 80151da:	a331      	add	r3, pc, #196	; (adr r3, 80152a0 <_strtod_l+0xbb8>)
 80151dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e0:	4630      	mov	r0, r6
 80151e2:	4639      	mov	r1, r7
 80151e4:	f7eb fc84 	bl	8000af0 <__aeabi_dcmple>
 80151e8:	b1a0      	cbz	r0, 8015214 <_strtod_l+0xb2c>
 80151ea:	4639      	mov	r1, r7
 80151ec:	4630      	mov	r0, r6
 80151ee:	f7eb fcdb 	bl	8000ba8 <__aeabi_d2uiz>
 80151f2:	2801      	cmp	r0, #1
 80151f4:	bf38      	it	cc
 80151f6:	2001      	movcc	r0, #1
 80151f8:	f7eb f984 	bl	8000504 <__aeabi_ui2d>
 80151fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151fe:	4606      	mov	r6, r0
 8015200:	460f      	mov	r7, r1
 8015202:	bb23      	cbnz	r3, 801524e <_strtod_l+0xb66>
 8015204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015208:	9010      	str	r0, [sp, #64]	; 0x40
 801520a:	9311      	str	r3, [sp, #68]	; 0x44
 801520c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015210:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015218:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801521c:	1a9b      	subs	r3, r3, r2
 801521e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015220:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015224:	eeb0 0a48 	vmov.f32	s0, s16
 8015228:	eef0 0a68 	vmov.f32	s1, s17
 801522c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015230:	f7ff f8fc 	bl	801442c <__ulp>
 8015234:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015238:	ec53 2b10 	vmov	r2, r3, d0
 801523c:	f7eb f9dc 	bl	80005f8 <__aeabi_dmul>
 8015240:	ec53 2b18 	vmov	r2, r3, d8
 8015244:	f7eb f822 	bl	800028c <__adddf3>
 8015248:	4680      	mov	r8, r0
 801524a:	4689      	mov	r9, r1
 801524c:	e78d      	b.n	801516a <_strtod_l+0xa82>
 801524e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015252:	e7db      	b.n	801520c <_strtod_l+0xb24>
 8015254:	a314      	add	r3, pc, #80	; (adr r3, 80152a8 <_strtod_l+0xbc0>)
 8015256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525a:	f7eb fc3f 	bl	8000adc <__aeabi_dcmplt>
 801525e:	e7b3      	b.n	80151c8 <_strtod_l+0xae0>
 8015260:	2300      	movs	r3, #0
 8015262:	930a      	str	r3, [sp, #40]	; 0x28
 8015264:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015268:	6013      	str	r3, [r2, #0]
 801526a:	f7ff ba7c 	b.w	8014766 <_strtod_l+0x7e>
 801526e:	2a65      	cmp	r2, #101	; 0x65
 8015270:	f43f ab75 	beq.w	801495e <_strtod_l+0x276>
 8015274:	2a45      	cmp	r2, #69	; 0x45
 8015276:	f43f ab72 	beq.w	801495e <_strtod_l+0x276>
 801527a:	2301      	movs	r3, #1
 801527c:	f7ff bbaa 	b.w	80149d4 <_strtod_l+0x2ec>
 8015280:	00000000 	.word	0x00000000
 8015284:	bff00000 	.word	0xbff00000
 8015288:	00000000 	.word	0x00000000
 801528c:	3ff00000 	.word	0x3ff00000
 8015290:	94a03595 	.word	0x94a03595
 8015294:	3fdfffff 	.word	0x3fdfffff
 8015298:	35afe535 	.word	0x35afe535
 801529c:	3fe00000 	.word	0x3fe00000
 80152a0:	ffc00000 	.word	0xffc00000
 80152a4:	41dfffff 	.word	0x41dfffff
 80152a8:	94a03595 	.word	0x94a03595
 80152ac:	3fcfffff 	.word	0x3fcfffff
 80152b0:	3ff00000 	.word	0x3ff00000
 80152b4:	3fe00000 	.word	0x3fe00000
 80152b8:	7ff00000 	.word	0x7ff00000
 80152bc:	7fe00000 	.word	0x7fe00000
 80152c0:	7c9fffff 	.word	0x7c9fffff
 80152c4:	7fefffff 	.word	0x7fefffff

080152c8 <_strtod_r>:
 80152c8:	4b01      	ldr	r3, [pc, #4]	; (80152d0 <_strtod_r+0x8>)
 80152ca:	f7ff ba0d 	b.w	80146e8 <_strtod_l>
 80152ce:	bf00      	nop
 80152d0:	20000168 	.word	0x20000168

080152d4 <_strtol_l.constprop.0>:
 80152d4:	2b01      	cmp	r3, #1
 80152d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152da:	d001      	beq.n	80152e0 <_strtol_l.constprop.0+0xc>
 80152dc:	2b24      	cmp	r3, #36	; 0x24
 80152de:	d906      	bls.n	80152ee <_strtol_l.constprop.0+0x1a>
 80152e0:	f7fd fe32 	bl	8012f48 <__errno>
 80152e4:	2316      	movs	r3, #22
 80152e6:	6003      	str	r3, [r0, #0]
 80152e8:	2000      	movs	r0, #0
 80152ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80153d4 <_strtol_l.constprop.0+0x100>
 80152f2:	460d      	mov	r5, r1
 80152f4:	462e      	mov	r6, r5
 80152f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80152fa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80152fe:	f017 0708 	ands.w	r7, r7, #8
 8015302:	d1f7      	bne.n	80152f4 <_strtol_l.constprop.0+0x20>
 8015304:	2c2d      	cmp	r4, #45	; 0x2d
 8015306:	d132      	bne.n	801536e <_strtol_l.constprop.0+0x9a>
 8015308:	782c      	ldrb	r4, [r5, #0]
 801530a:	2701      	movs	r7, #1
 801530c:	1cb5      	adds	r5, r6, #2
 801530e:	2b00      	cmp	r3, #0
 8015310:	d05b      	beq.n	80153ca <_strtol_l.constprop.0+0xf6>
 8015312:	2b10      	cmp	r3, #16
 8015314:	d109      	bne.n	801532a <_strtol_l.constprop.0+0x56>
 8015316:	2c30      	cmp	r4, #48	; 0x30
 8015318:	d107      	bne.n	801532a <_strtol_l.constprop.0+0x56>
 801531a:	782c      	ldrb	r4, [r5, #0]
 801531c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015320:	2c58      	cmp	r4, #88	; 0x58
 8015322:	d14d      	bne.n	80153c0 <_strtol_l.constprop.0+0xec>
 8015324:	786c      	ldrb	r4, [r5, #1]
 8015326:	2310      	movs	r3, #16
 8015328:	3502      	adds	r5, #2
 801532a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801532e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015332:	f04f 0e00 	mov.w	lr, #0
 8015336:	fbb8 f9f3 	udiv	r9, r8, r3
 801533a:	4676      	mov	r6, lr
 801533c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015340:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015344:	f1bc 0f09 	cmp.w	ip, #9
 8015348:	d816      	bhi.n	8015378 <_strtol_l.constprop.0+0xa4>
 801534a:	4664      	mov	r4, ip
 801534c:	42a3      	cmp	r3, r4
 801534e:	dd24      	ble.n	801539a <_strtol_l.constprop.0+0xc6>
 8015350:	f1be 3fff 	cmp.w	lr, #4294967295
 8015354:	d008      	beq.n	8015368 <_strtol_l.constprop.0+0x94>
 8015356:	45b1      	cmp	r9, r6
 8015358:	d31c      	bcc.n	8015394 <_strtol_l.constprop.0+0xc0>
 801535a:	d101      	bne.n	8015360 <_strtol_l.constprop.0+0x8c>
 801535c:	45a2      	cmp	sl, r4
 801535e:	db19      	blt.n	8015394 <_strtol_l.constprop.0+0xc0>
 8015360:	fb06 4603 	mla	r6, r6, r3, r4
 8015364:	f04f 0e01 	mov.w	lr, #1
 8015368:	f815 4b01 	ldrb.w	r4, [r5], #1
 801536c:	e7e8      	b.n	8015340 <_strtol_l.constprop.0+0x6c>
 801536e:	2c2b      	cmp	r4, #43	; 0x2b
 8015370:	bf04      	itt	eq
 8015372:	782c      	ldrbeq	r4, [r5, #0]
 8015374:	1cb5      	addeq	r5, r6, #2
 8015376:	e7ca      	b.n	801530e <_strtol_l.constprop.0+0x3a>
 8015378:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801537c:	f1bc 0f19 	cmp.w	ip, #25
 8015380:	d801      	bhi.n	8015386 <_strtol_l.constprop.0+0xb2>
 8015382:	3c37      	subs	r4, #55	; 0x37
 8015384:	e7e2      	b.n	801534c <_strtol_l.constprop.0+0x78>
 8015386:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801538a:	f1bc 0f19 	cmp.w	ip, #25
 801538e:	d804      	bhi.n	801539a <_strtol_l.constprop.0+0xc6>
 8015390:	3c57      	subs	r4, #87	; 0x57
 8015392:	e7db      	b.n	801534c <_strtol_l.constprop.0+0x78>
 8015394:	f04f 3eff 	mov.w	lr, #4294967295
 8015398:	e7e6      	b.n	8015368 <_strtol_l.constprop.0+0x94>
 801539a:	f1be 3fff 	cmp.w	lr, #4294967295
 801539e:	d105      	bne.n	80153ac <_strtol_l.constprop.0+0xd8>
 80153a0:	2322      	movs	r3, #34	; 0x22
 80153a2:	6003      	str	r3, [r0, #0]
 80153a4:	4646      	mov	r6, r8
 80153a6:	b942      	cbnz	r2, 80153ba <_strtol_l.constprop.0+0xe6>
 80153a8:	4630      	mov	r0, r6
 80153aa:	e79e      	b.n	80152ea <_strtol_l.constprop.0+0x16>
 80153ac:	b107      	cbz	r7, 80153b0 <_strtol_l.constprop.0+0xdc>
 80153ae:	4276      	negs	r6, r6
 80153b0:	2a00      	cmp	r2, #0
 80153b2:	d0f9      	beq.n	80153a8 <_strtol_l.constprop.0+0xd4>
 80153b4:	f1be 0f00 	cmp.w	lr, #0
 80153b8:	d000      	beq.n	80153bc <_strtol_l.constprop.0+0xe8>
 80153ba:	1e69      	subs	r1, r5, #1
 80153bc:	6011      	str	r1, [r2, #0]
 80153be:	e7f3      	b.n	80153a8 <_strtol_l.constprop.0+0xd4>
 80153c0:	2430      	movs	r4, #48	; 0x30
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d1b1      	bne.n	801532a <_strtol_l.constprop.0+0x56>
 80153c6:	2308      	movs	r3, #8
 80153c8:	e7af      	b.n	801532a <_strtol_l.constprop.0+0x56>
 80153ca:	2c30      	cmp	r4, #48	; 0x30
 80153cc:	d0a5      	beq.n	801531a <_strtol_l.constprop.0+0x46>
 80153ce:	230a      	movs	r3, #10
 80153d0:	e7ab      	b.n	801532a <_strtol_l.constprop.0+0x56>
 80153d2:	bf00      	nop
 80153d4:	08016bd9 	.word	0x08016bd9

080153d8 <_strtol_r>:
 80153d8:	f7ff bf7c 	b.w	80152d4 <_strtol_l.constprop.0>

080153dc <__ssputs_r>:
 80153dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153e0:	688e      	ldr	r6, [r1, #8]
 80153e2:	461f      	mov	r7, r3
 80153e4:	42be      	cmp	r6, r7
 80153e6:	680b      	ldr	r3, [r1, #0]
 80153e8:	4682      	mov	sl, r0
 80153ea:	460c      	mov	r4, r1
 80153ec:	4690      	mov	r8, r2
 80153ee:	d82c      	bhi.n	801544a <__ssputs_r+0x6e>
 80153f0:	898a      	ldrh	r2, [r1, #12]
 80153f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80153f6:	d026      	beq.n	8015446 <__ssputs_r+0x6a>
 80153f8:	6965      	ldr	r5, [r4, #20]
 80153fa:	6909      	ldr	r1, [r1, #16]
 80153fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015400:	eba3 0901 	sub.w	r9, r3, r1
 8015404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015408:	1c7b      	adds	r3, r7, #1
 801540a:	444b      	add	r3, r9
 801540c:	106d      	asrs	r5, r5, #1
 801540e:	429d      	cmp	r5, r3
 8015410:	bf38      	it	cc
 8015412:	461d      	movcc	r5, r3
 8015414:	0553      	lsls	r3, r2, #21
 8015416:	d527      	bpl.n	8015468 <__ssputs_r+0x8c>
 8015418:	4629      	mov	r1, r5
 801541a:	f7fc fd1d 	bl	8011e58 <_malloc_r>
 801541e:	4606      	mov	r6, r0
 8015420:	b360      	cbz	r0, 801547c <__ssputs_r+0xa0>
 8015422:	6921      	ldr	r1, [r4, #16]
 8015424:	464a      	mov	r2, r9
 8015426:	f7fd fdbb 	bl	8012fa0 <memcpy>
 801542a:	89a3      	ldrh	r3, [r4, #12]
 801542c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015434:	81a3      	strh	r3, [r4, #12]
 8015436:	6126      	str	r6, [r4, #16]
 8015438:	6165      	str	r5, [r4, #20]
 801543a:	444e      	add	r6, r9
 801543c:	eba5 0509 	sub.w	r5, r5, r9
 8015440:	6026      	str	r6, [r4, #0]
 8015442:	60a5      	str	r5, [r4, #8]
 8015444:	463e      	mov	r6, r7
 8015446:	42be      	cmp	r6, r7
 8015448:	d900      	bls.n	801544c <__ssputs_r+0x70>
 801544a:	463e      	mov	r6, r7
 801544c:	6820      	ldr	r0, [r4, #0]
 801544e:	4632      	mov	r2, r6
 8015450:	4641      	mov	r1, r8
 8015452:	f000 f9c9 	bl	80157e8 <memmove>
 8015456:	68a3      	ldr	r3, [r4, #8]
 8015458:	1b9b      	subs	r3, r3, r6
 801545a:	60a3      	str	r3, [r4, #8]
 801545c:	6823      	ldr	r3, [r4, #0]
 801545e:	4433      	add	r3, r6
 8015460:	6023      	str	r3, [r4, #0]
 8015462:	2000      	movs	r0, #0
 8015464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015468:	462a      	mov	r2, r5
 801546a:	f000 fd8e 	bl	8015f8a <_realloc_r>
 801546e:	4606      	mov	r6, r0
 8015470:	2800      	cmp	r0, #0
 8015472:	d1e0      	bne.n	8015436 <__ssputs_r+0x5a>
 8015474:	6921      	ldr	r1, [r4, #16]
 8015476:	4650      	mov	r0, sl
 8015478:	f7fe fc20 	bl	8013cbc <_free_r>
 801547c:	230c      	movs	r3, #12
 801547e:	f8ca 3000 	str.w	r3, [sl]
 8015482:	89a3      	ldrh	r3, [r4, #12]
 8015484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015488:	81a3      	strh	r3, [r4, #12]
 801548a:	f04f 30ff 	mov.w	r0, #4294967295
 801548e:	e7e9      	b.n	8015464 <__ssputs_r+0x88>

08015490 <_svfiprintf_r>:
 8015490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015494:	4698      	mov	r8, r3
 8015496:	898b      	ldrh	r3, [r1, #12]
 8015498:	061b      	lsls	r3, r3, #24
 801549a:	b09d      	sub	sp, #116	; 0x74
 801549c:	4607      	mov	r7, r0
 801549e:	460d      	mov	r5, r1
 80154a0:	4614      	mov	r4, r2
 80154a2:	d50e      	bpl.n	80154c2 <_svfiprintf_r+0x32>
 80154a4:	690b      	ldr	r3, [r1, #16]
 80154a6:	b963      	cbnz	r3, 80154c2 <_svfiprintf_r+0x32>
 80154a8:	2140      	movs	r1, #64	; 0x40
 80154aa:	f7fc fcd5 	bl	8011e58 <_malloc_r>
 80154ae:	6028      	str	r0, [r5, #0]
 80154b0:	6128      	str	r0, [r5, #16]
 80154b2:	b920      	cbnz	r0, 80154be <_svfiprintf_r+0x2e>
 80154b4:	230c      	movs	r3, #12
 80154b6:	603b      	str	r3, [r7, #0]
 80154b8:	f04f 30ff 	mov.w	r0, #4294967295
 80154bc:	e0d0      	b.n	8015660 <_svfiprintf_r+0x1d0>
 80154be:	2340      	movs	r3, #64	; 0x40
 80154c0:	616b      	str	r3, [r5, #20]
 80154c2:	2300      	movs	r3, #0
 80154c4:	9309      	str	r3, [sp, #36]	; 0x24
 80154c6:	2320      	movs	r3, #32
 80154c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80154d0:	2330      	movs	r3, #48	; 0x30
 80154d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015678 <_svfiprintf_r+0x1e8>
 80154d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154da:	f04f 0901 	mov.w	r9, #1
 80154de:	4623      	mov	r3, r4
 80154e0:	469a      	mov	sl, r3
 80154e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154e6:	b10a      	cbz	r2, 80154ec <_svfiprintf_r+0x5c>
 80154e8:	2a25      	cmp	r2, #37	; 0x25
 80154ea:	d1f9      	bne.n	80154e0 <_svfiprintf_r+0x50>
 80154ec:	ebba 0b04 	subs.w	fp, sl, r4
 80154f0:	d00b      	beq.n	801550a <_svfiprintf_r+0x7a>
 80154f2:	465b      	mov	r3, fp
 80154f4:	4622      	mov	r2, r4
 80154f6:	4629      	mov	r1, r5
 80154f8:	4638      	mov	r0, r7
 80154fa:	f7ff ff6f 	bl	80153dc <__ssputs_r>
 80154fe:	3001      	adds	r0, #1
 8015500:	f000 80a9 	beq.w	8015656 <_svfiprintf_r+0x1c6>
 8015504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015506:	445a      	add	r2, fp
 8015508:	9209      	str	r2, [sp, #36]	; 0x24
 801550a:	f89a 3000 	ldrb.w	r3, [sl]
 801550e:	2b00      	cmp	r3, #0
 8015510:	f000 80a1 	beq.w	8015656 <_svfiprintf_r+0x1c6>
 8015514:	2300      	movs	r3, #0
 8015516:	f04f 32ff 	mov.w	r2, #4294967295
 801551a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801551e:	f10a 0a01 	add.w	sl, sl, #1
 8015522:	9304      	str	r3, [sp, #16]
 8015524:	9307      	str	r3, [sp, #28]
 8015526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801552a:	931a      	str	r3, [sp, #104]	; 0x68
 801552c:	4654      	mov	r4, sl
 801552e:	2205      	movs	r2, #5
 8015530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015534:	4850      	ldr	r0, [pc, #320]	; (8015678 <_svfiprintf_r+0x1e8>)
 8015536:	f7ea fe4b 	bl	80001d0 <memchr>
 801553a:	9a04      	ldr	r2, [sp, #16]
 801553c:	b9d8      	cbnz	r0, 8015576 <_svfiprintf_r+0xe6>
 801553e:	06d0      	lsls	r0, r2, #27
 8015540:	bf44      	itt	mi
 8015542:	2320      	movmi	r3, #32
 8015544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015548:	0711      	lsls	r1, r2, #28
 801554a:	bf44      	itt	mi
 801554c:	232b      	movmi	r3, #43	; 0x2b
 801554e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015552:	f89a 3000 	ldrb.w	r3, [sl]
 8015556:	2b2a      	cmp	r3, #42	; 0x2a
 8015558:	d015      	beq.n	8015586 <_svfiprintf_r+0xf6>
 801555a:	9a07      	ldr	r2, [sp, #28]
 801555c:	4654      	mov	r4, sl
 801555e:	2000      	movs	r0, #0
 8015560:	f04f 0c0a 	mov.w	ip, #10
 8015564:	4621      	mov	r1, r4
 8015566:	f811 3b01 	ldrb.w	r3, [r1], #1
 801556a:	3b30      	subs	r3, #48	; 0x30
 801556c:	2b09      	cmp	r3, #9
 801556e:	d94d      	bls.n	801560c <_svfiprintf_r+0x17c>
 8015570:	b1b0      	cbz	r0, 80155a0 <_svfiprintf_r+0x110>
 8015572:	9207      	str	r2, [sp, #28]
 8015574:	e014      	b.n	80155a0 <_svfiprintf_r+0x110>
 8015576:	eba0 0308 	sub.w	r3, r0, r8
 801557a:	fa09 f303 	lsl.w	r3, r9, r3
 801557e:	4313      	orrs	r3, r2
 8015580:	9304      	str	r3, [sp, #16]
 8015582:	46a2      	mov	sl, r4
 8015584:	e7d2      	b.n	801552c <_svfiprintf_r+0x9c>
 8015586:	9b03      	ldr	r3, [sp, #12]
 8015588:	1d19      	adds	r1, r3, #4
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	9103      	str	r1, [sp, #12]
 801558e:	2b00      	cmp	r3, #0
 8015590:	bfbb      	ittet	lt
 8015592:	425b      	neglt	r3, r3
 8015594:	f042 0202 	orrlt.w	r2, r2, #2
 8015598:	9307      	strge	r3, [sp, #28]
 801559a:	9307      	strlt	r3, [sp, #28]
 801559c:	bfb8      	it	lt
 801559e:	9204      	strlt	r2, [sp, #16]
 80155a0:	7823      	ldrb	r3, [r4, #0]
 80155a2:	2b2e      	cmp	r3, #46	; 0x2e
 80155a4:	d10c      	bne.n	80155c0 <_svfiprintf_r+0x130>
 80155a6:	7863      	ldrb	r3, [r4, #1]
 80155a8:	2b2a      	cmp	r3, #42	; 0x2a
 80155aa:	d134      	bne.n	8015616 <_svfiprintf_r+0x186>
 80155ac:	9b03      	ldr	r3, [sp, #12]
 80155ae:	1d1a      	adds	r2, r3, #4
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	9203      	str	r2, [sp, #12]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	bfb8      	it	lt
 80155b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80155bc:	3402      	adds	r4, #2
 80155be:	9305      	str	r3, [sp, #20]
 80155c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015688 <_svfiprintf_r+0x1f8>
 80155c4:	7821      	ldrb	r1, [r4, #0]
 80155c6:	2203      	movs	r2, #3
 80155c8:	4650      	mov	r0, sl
 80155ca:	f7ea fe01 	bl	80001d0 <memchr>
 80155ce:	b138      	cbz	r0, 80155e0 <_svfiprintf_r+0x150>
 80155d0:	9b04      	ldr	r3, [sp, #16]
 80155d2:	eba0 000a 	sub.w	r0, r0, sl
 80155d6:	2240      	movs	r2, #64	; 0x40
 80155d8:	4082      	lsls	r2, r0
 80155da:	4313      	orrs	r3, r2
 80155dc:	3401      	adds	r4, #1
 80155de:	9304      	str	r3, [sp, #16]
 80155e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155e4:	4825      	ldr	r0, [pc, #148]	; (801567c <_svfiprintf_r+0x1ec>)
 80155e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155ea:	2206      	movs	r2, #6
 80155ec:	f7ea fdf0 	bl	80001d0 <memchr>
 80155f0:	2800      	cmp	r0, #0
 80155f2:	d038      	beq.n	8015666 <_svfiprintf_r+0x1d6>
 80155f4:	4b22      	ldr	r3, [pc, #136]	; (8015680 <_svfiprintf_r+0x1f0>)
 80155f6:	bb1b      	cbnz	r3, 8015640 <_svfiprintf_r+0x1b0>
 80155f8:	9b03      	ldr	r3, [sp, #12]
 80155fa:	3307      	adds	r3, #7
 80155fc:	f023 0307 	bic.w	r3, r3, #7
 8015600:	3308      	adds	r3, #8
 8015602:	9303      	str	r3, [sp, #12]
 8015604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015606:	4433      	add	r3, r6
 8015608:	9309      	str	r3, [sp, #36]	; 0x24
 801560a:	e768      	b.n	80154de <_svfiprintf_r+0x4e>
 801560c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015610:	460c      	mov	r4, r1
 8015612:	2001      	movs	r0, #1
 8015614:	e7a6      	b.n	8015564 <_svfiprintf_r+0xd4>
 8015616:	2300      	movs	r3, #0
 8015618:	3401      	adds	r4, #1
 801561a:	9305      	str	r3, [sp, #20]
 801561c:	4619      	mov	r1, r3
 801561e:	f04f 0c0a 	mov.w	ip, #10
 8015622:	4620      	mov	r0, r4
 8015624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015628:	3a30      	subs	r2, #48	; 0x30
 801562a:	2a09      	cmp	r2, #9
 801562c:	d903      	bls.n	8015636 <_svfiprintf_r+0x1a6>
 801562e:	2b00      	cmp	r3, #0
 8015630:	d0c6      	beq.n	80155c0 <_svfiprintf_r+0x130>
 8015632:	9105      	str	r1, [sp, #20]
 8015634:	e7c4      	b.n	80155c0 <_svfiprintf_r+0x130>
 8015636:	fb0c 2101 	mla	r1, ip, r1, r2
 801563a:	4604      	mov	r4, r0
 801563c:	2301      	movs	r3, #1
 801563e:	e7f0      	b.n	8015622 <_svfiprintf_r+0x192>
 8015640:	ab03      	add	r3, sp, #12
 8015642:	9300      	str	r3, [sp, #0]
 8015644:	462a      	mov	r2, r5
 8015646:	4b0f      	ldr	r3, [pc, #60]	; (8015684 <_svfiprintf_r+0x1f4>)
 8015648:	a904      	add	r1, sp, #16
 801564a:	4638      	mov	r0, r7
 801564c:	f7fc fd30 	bl	80120b0 <_printf_float>
 8015650:	1c42      	adds	r2, r0, #1
 8015652:	4606      	mov	r6, r0
 8015654:	d1d6      	bne.n	8015604 <_svfiprintf_r+0x174>
 8015656:	89ab      	ldrh	r3, [r5, #12]
 8015658:	065b      	lsls	r3, r3, #25
 801565a:	f53f af2d 	bmi.w	80154b8 <_svfiprintf_r+0x28>
 801565e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015660:	b01d      	add	sp, #116	; 0x74
 8015662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015666:	ab03      	add	r3, sp, #12
 8015668:	9300      	str	r3, [sp, #0]
 801566a:	462a      	mov	r2, r5
 801566c:	4b05      	ldr	r3, [pc, #20]	; (8015684 <_svfiprintf_r+0x1f4>)
 801566e:	a904      	add	r1, sp, #16
 8015670:	4638      	mov	r0, r7
 8015672:	f7fc ffc1 	bl	80125f8 <_printf_i>
 8015676:	e7eb      	b.n	8015650 <_svfiprintf_r+0x1c0>
 8015678:	08016cd9 	.word	0x08016cd9
 801567c:	08016ce3 	.word	0x08016ce3
 8015680:	080120b1 	.word	0x080120b1
 8015684:	080153dd 	.word	0x080153dd
 8015688:	08016cdf 	.word	0x08016cdf

0801568c <__sflush_r>:
 801568c:	898a      	ldrh	r2, [r1, #12]
 801568e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015692:	4605      	mov	r5, r0
 8015694:	0710      	lsls	r0, r2, #28
 8015696:	460c      	mov	r4, r1
 8015698:	d458      	bmi.n	801574c <__sflush_r+0xc0>
 801569a:	684b      	ldr	r3, [r1, #4]
 801569c:	2b00      	cmp	r3, #0
 801569e:	dc05      	bgt.n	80156ac <__sflush_r+0x20>
 80156a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	dc02      	bgt.n	80156ac <__sflush_r+0x20>
 80156a6:	2000      	movs	r0, #0
 80156a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80156ae:	2e00      	cmp	r6, #0
 80156b0:	d0f9      	beq.n	80156a6 <__sflush_r+0x1a>
 80156b2:	2300      	movs	r3, #0
 80156b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80156b8:	682f      	ldr	r7, [r5, #0]
 80156ba:	6a21      	ldr	r1, [r4, #32]
 80156bc:	602b      	str	r3, [r5, #0]
 80156be:	d032      	beq.n	8015726 <__sflush_r+0x9a>
 80156c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80156c2:	89a3      	ldrh	r3, [r4, #12]
 80156c4:	075a      	lsls	r2, r3, #29
 80156c6:	d505      	bpl.n	80156d4 <__sflush_r+0x48>
 80156c8:	6863      	ldr	r3, [r4, #4]
 80156ca:	1ac0      	subs	r0, r0, r3
 80156cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156ce:	b10b      	cbz	r3, 80156d4 <__sflush_r+0x48>
 80156d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80156d2:	1ac0      	subs	r0, r0, r3
 80156d4:	2300      	movs	r3, #0
 80156d6:	4602      	mov	r2, r0
 80156d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80156da:	6a21      	ldr	r1, [r4, #32]
 80156dc:	4628      	mov	r0, r5
 80156de:	47b0      	blx	r6
 80156e0:	1c43      	adds	r3, r0, #1
 80156e2:	89a3      	ldrh	r3, [r4, #12]
 80156e4:	d106      	bne.n	80156f4 <__sflush_r+0x68>
 80156e6:	6829      	ldr	r1, [r5, #0]
 80156e8:	291d      	cmp	r1, #29
 80156ea:	d82b      	bhi.n	8015744 <__sflush_r+0xb8>
 80156ec:	4a29      	ldr	r2, [pc, #164]	; (8015794 <__sflush_r+0x108>)
 80156ee:	410a      	asrs	r2, r1
 80156f0:	07d6      	lsls	r6, r2, #31
 80156f2:	d427      	bmi.n	8015744 <__sflush_r+0xb8>
 80156f4:	2200      	movs	r2, #0
 80156f6:	6062      	str	r2, [r4, #4]
 80156f8:	04d9      	lsls	r1, r3, #19
 80156fa:	6922      	ldr	r2, [r4, #16]
 80156fc:	6022      	str	r2, [r4, #0]
 80156fe:	d504      	bpl.n	801570a <__sflush_r+0x7e>
 8015700:	1c42      	adds	r2, r0, #1
 8015702:	d101      	bne.n	8015708 <__sflush_r+0x7c>
 8015704:	682b      	ldr	r3, [r5, #0]
 8015706:	b903      	cbnz	r3, 801570a <__sflush_r+0x7e>
 8015708:	6560      	str	r0, [r4, #84]	; 0x54
 801570a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801570c:	602f      	str	r7, [r5, #0]
 801570e:	2900      	cmp	r1, #0
 8015710:	d0c9      	beq.n	80156a6 <__sflush_r+0x1a>
 8015712:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015716:	4299      	cmp	r1, r3
 8015718:	d002      	beq.n	8015720 <__sflush_r+0x94>
 801571a:	4628      	mov	r0, r5
 801571c:	f7fe face 	bl	8013cbc <_free_r>
 8015720:	2000      	movs	r0, #0
 8015722:	6360      	str	r0, [r4, #52]	; 0x34
 8015724:	e7c0      	b.n	80156a8 <__sflush_r+0x1c>
 8015726:	2301      	movs	r3, #1
 8015728:	4628      	mov	r0, r5
 801572a:	47b0      	blx	r6
 801572c:	1c41      	adds	r1, r0, #1
 801572e:	d1c8      	bne.n	80156c2 <__sflush_r+0x36>
 8015730:	682b      	ldr	r3, [r5, #0]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d0c5      	beq.n	80156c2 <__sflush_r+0x36>
 8015736:	2b1d      	cmp	r3, #29
 8015738:	d001      	beq.n	801573e <__sflush_r+0xb2>
 801573a:	2b16      	cmp	r3, #22
 801573c:	d101      	bne.n	8015742 <__sflush_r+0xb6>
 801573e:	602f      	str	r7, [r5, #0]
 8015740:	e7b1      	b.n	80156a6 <__sflush_r+0x1a>
 8015742:	89a3      	ldrh	r3, [r4, #12]
 8015744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015748:	81a3      	strh	r3, [r4, #12]
 801574a:	e7ad      	b.n	80156a8 <__sflush_r+0x1c>
 801574c:	690f      	ldr	r7, [r1, #16]
 801574e:	2f00      	cmp	r7, #0
 8015750:	d0a9      	beq.n	80156a6 <__sflush_r+0x1a>
 8015752:	0793      	lsls	r3, r2, #30
 8015754:	680e      	ldr	r6, [r1, #0]
 8015756:	bf08      	it	eq
 8015758:	694b      	ldreq	r3, [r1, #20]
 801575a:	600f      	str	r7, [r1, #0]
 801575c:	bf18      	it	ne
 801575e:	2300      	movne	r3, #0
 8015760:	eba6 0807 	sub.w	r8, r6, r7
 8015764:	608b      	str	r3, [r1, #8]
 8015766:	f1b8 0f00 	cmp.w	r8, #0
 801576a:	dd9c      	ble.n	80156a6 <__sflush_r+0x1a>
 801576c:	6a21      	ldr	r1, [r4, #32]
 801576e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015770:	4643      	mov	r3, r8
 8015772:	463a      	mov	r2, r7
 8015774:	4628      	mov	r0, r5
 8015776:	47b0      	blx	r6
 8015778:	2800      	cmp	r0, #0
 801577a:	dc06      	bgt.n	801578a <__sflush_r+0xfe>
 801577c:	89a3      	ldrh	r3, [r4, #12]
 801577e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015782:	81a3      	strh	r3, [r4, #12]
 8015784:	f04f 30ff 	mov.w	r0, #4294967295
 8015788:	e78e      	b.n	80156a8 <__sflush_r+0x1c>
 801578a:	4407      	add	r7, r0
 801578c:	eba8 0800 	sub.w	r8, r8, r0
 8015790:	e7e9      	b.n	8015766 <__sflush_r+0xda>
 8015792:	bf00      	nop
 8015794:	dfbffffe 	.word	0xdfbffffe

08015798 <_fflush_r>:
 8015798:	b538      	push	{r3, r4, r5, lr}
 801579a:	690b      	ldr	r3, [r1, #16]
 801579c:	4605      	mov	r5, r0
 801579e:	460c      	mov	r4, r1
 80157a0:	b913      	cbnz	r3, 80157a8 <_fflush_r+0x10>
 80157a2:	2500      	movs	r5, #0
 80157a4:	4628      	mov	r0, r5
 80157a6:	bd38      	pop	{r3, r4, r5, pc}
 80157a8:	b118      	cbz	r0, 80157b2 <_fflush_r+0x1a>
 80157aa:	6a03      	ldr	r3, [r0, #32]
 80157ac:	b90b      	cbnz	r3, 80157b2 <_fflush_r+0x1a>
 80157ae:	f7fd facf 	bl	8012d50 <__sinit>
 80157b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d0f3      	beq.n	80157a2 <_fflush_r+0xa>
 80157ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80157bc:	07d0      	lsls	r0, r2, #31
 80157be:	d404      	bmi.n	80157ca <_fflush_r+0x32>
 80157c0:	0599      	lsls	r1, r3, #22
 80157c2:	d402      	bmi.n	80157ca <_fflush_r+0x32>
 80157c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157c6:	f7fd fbe9 	bl	8012f9c <__retarget_lock_acquire_recursive>
 80157ca:	4628      	mov	r0, r5
 80157cc:	4621      	mov	r1, r4
 80157ce:	f7ff ff5d 	bl	801568c <__sflush_r>
 80157d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80157d4:	07da      	lsls	r2, r3, #31
 80157d6:	4605      	mov	r5, r0
 80157d8:	d4e4      	bmi.n	80157a4 <_fflush_r+0xc>
 80157da:	89a3      	ldrh	r3, [r4, #12]
 80157dc:	059b      	lsls	r3, r3, #22
 80157de:	d4e1      	bmi.n	80157a4 <_fflush_r+0xc>
 80157e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80157e2:	f7fd fbdc 	bl	8012f9e <__retarget_lock_release_recursive>
 80157e6:	e7dd      	b.n	80157a4 <_fflush_r+0xc>

080157e8 <memmove>:
 80157e8:	4288      	cmp	r0, r1
 80157ea:	b510      	push	{r4, lr}
 80157ec:	eb01 0402 	add.w	r4, r1, r2
 80157f0:	d902      	bls.n	80157f8 <memmove+0x10>
 80157f2:	4284      	cmp	r4, r0
 80157f4:	4623      	mov	r3, r4
 80157f6:	d807      	bhi.n	8015808 <memmove+0x20>
 80157f8:	1e43      	subs	r3, r0, #1
 80157fa:	42a1      	cmp	r1, r4
 80157fc:	d008      	beq.n	8015810 <memmove+0x28>
 80157fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015806:	e7f8      	b.n	80157fa <memmove+0x12>
 8015808:	4402      	add	r2, r0
 801580a:	4601      	mov	r1, r0
 801580c:	428a      	cmp	r2, r1
 801580e:	d100      	bne.n	8015812 <memmove+0x2a>
 8015810:	bd10      	pop	{r4, pc}
 8015812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801581a:	e7f7      	b.n	801580c <memmove+0x24>

0801581c <strncmp>:
 801581c:	b510      	push	{r4, lr}
 801581e:	b16a      	cbz	r2, 801583c <strncmp+0x20>
 8015820:	3901      	subs	r1, #1
 8015822:	1884      	adds	r4, r0, r2
 8015824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015828:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801582c:	429a      	cmp	r2, r3
 801582e:	d103      	bne.n	8015838 <strncmp+0x1c>
 8015830:	42a0      	cmp	r0, r4
 8015832:	d001      	beq.n	8015838 <strncmp+0x1c>
 8015834:	2a00      	cmp	r2, #0
 8015836:	d1f5      	bne.n	8015824 <strncmp+0x8>
 8015838:	1ad0      	subs	r0, r2, r3
 801583a:	bd10      	pop	{r4, pc}
 801583c:	4610      	mov	r0, r2
 801583e:	e7fc      	b.n	801583a <strncmp+0x1e>

08015840 <nan>:
 8015840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015848 <nan+0x8>
 8015844:	4770      	bx	lr
 8015846:	bf00      	nop
 8015848:	00000000 	.word	0x00000000
 801584c:	7ff80000 	.word	0x7ff80000

08015850 <__assert_func>:
 8015850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015852:	4614      	mov	r4, r2
 8015854:	461a      	mov	r2, r3
 8015856:	4b09      	ldr	r3, [pc, #36]	; (801587c <__assert_func+0x2c>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	4605      	mov	r5, r0
 801585c:	68d8      	ldr	r0, [r3, #12]
 801585e:	b14c      	cbz	r4, 8015874 <__assert_func+0x24>
 8015860:	4b07      	ldr	r3, [pc, #28]	; (8015880 <__assert_func+0x30>)
 8015862:	9100      	str	r1, [sp, #0]
 8015864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015868:	4906      	ldr	r1, [pc, #24]	; (8015884 <__assert_func+0x34>)
 801586a:	462b      	mov	r3, r5
 801586c:	f000 fbca 	bl	8016004 <fiprintf>
 8015870:	f000 fbda 	bl	8016028 <abort>
 8015874:	4b04      	ldr	r3, [pc, #16]	; (8015888 <__assert_func+0x38>)
 8015876:	461c      	mov	r4, r3
 8015878:	e7f3      	b.n	8015862 <__assert_func+0x12>
 801587a:	bf00      	nop
 801587c:	20000164 	.word	0x20000164
 8015880:	08016cf2 	.word	0x08016cf2
 8015884:	08016cff 	.word	0x08016cff
 8015888:	08016d2d 	.word	0x08016d2d

0801588c <_calloc_r>:
 801588c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801588e:	fba1 2402 	umull	r2, r4, r1, r2
 8015892:	b94c      	cbnz	r4, 80158a8 <_calloc_r+0x1c>
 8015894:	4611      	mov	r1, r2
 8015896:	9201      	str	r2, [sp, #4]
 8015898:	f7fc fade 	bl	8011e58 <_malloc_r>
 801589c:	9a01      	ldr	r2, [sp, #4]
 801589e:	4605      	mov	r5, r0
 80158a0:	b930      	cbnz	r0, 80158b0 <_calloc_r+0x24>
 80158a2:	4628      	mov	r0, r5
 80158a4:	b003      	add	sp, #12
 80158a6:	bd30      	pop	{r4, r5, pc}
 80158a8:	220c      	movs	r2, #12
 80158aa:	6002      	str	r2, [r0, #0]
 80158ac:	2500      	movs	r5, #0
 80158ae:	e7f8      	b.n	80158a2 <_calloc_r+0x16>
 80158b0:	4621      	mov	r1, r4
 80158b2:	f7fd fae6 	bl	8012e82 <memset>
 80158b6:	e7f4      	b.n	80158a2 <_calloc_r+0x16>

080158b8 <rshift>:
 80158b8:	6903      	ldr	r3, [r0, #16]
 80158ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80158be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80158c6:	f100 0414 	add.w	r4, r0, #20
 80158ca:	dd45      	ble.n	8015958 <rshift+0xa0>
 80158cc:	f011 011f 	ands.w	r1, r1, #31
 80158d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80158d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80158d8:	d10c      	bne.n	80158f4 <rshift+0x3c>
 80158da:	f100 0710 	add.w	r7, r0, #16
 80158de:	4629      	mov	r1, r5
 80158e0:	42b1      	cmp	r1, r6
 80158e2:	d334      	bcc.n	801594e <rshift+0x96>
 80158e4:	1a9b      	subs	r3, r3, r2
 80158e6:	009b      	lsls	r3, r3, #2
 80158e8:	1eea      	subs	r2, r5, #3
 80158ea:	4296      	cmp	r6, r2
 80158ec:	bf38      	it	cc
 80158ee:	2300      	movcc	r3, #0
 80158f0:	4423      	add	r3, r4
 80158f2:	e015      	b.n	8015920 <rshift+0x68>
 80158f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80158f8:	f1c1 0820 	rsb	r8, r1, #32
 80158fc:	40cf      	lsrs	r7, r1
 80158fe:	f105 0e04 	add.w	lr, r5, #4
 8015902:	46a1      	mov	r9, r4
 8015904:	4576      	cmp	r6, lr
 8015906:	46f4      	mov	ip, lr
 8015908:	d815      	bhi.n	8015936 <rshift+0x7e>
 801590a:	1a9a      	subs	r2, r3, r2
 801590c:	0092      	lsls	r2, r2, #2
 801590e:	3a04      	subs	r2, #4
 8015910:	3501      	adds	r5, #1
 8015912:	42ae      	cmp	r6, r5
 8015914:	bf38      	it	cc
 8015916:	2200      	movcc	r2, #0
 8015918:	18a3      	adds	r3, r4, r2
 801591a:	50a7      	str	r7, [r4, r2]
 801591c:	b107      	cbz	r7, 8015920 <rshift+0x68>
 801591e:	3304      	adds	r3, #4
 8015920:	1b1a      	subs	r2, r3, r4
 8015922:	42a3      	cmp	r3, r4
 8015924:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015928:	bf08      	it	eq
 801592a:	2300      	moveq	r3, #0
 801592c:	6102      	str	r2, [r0, #16]
 801592e:	bf08      	it	eq
 8015930:	6143      	streq	r3, [r0, #20]
 8015932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015936:	f8dc c000 	ldr.w	ip, [ip]
 801593a:	fa0c fc08 	lsl.w	ip, ip, r8
 801593e:	ea4c 0707 	orr.w	r7, ip, r7
 8015942:	f849 7b04 	str.w	r7, [r9], #4
 8015946:	f85e 7b04 	ldr.w	r7, [lr], #4
 801594a:	40cf      	lsrs	r7, r1
 801594c:	e7da      	b.n	8015904 <rshift+0x4c>
 801594e:	f851 cb04 	ldr.w	ip, [r1], #4
 8015952:	f847 cf04 	str.w	ip, [r7, #4]!
 8015956:	e7c3      	b.n	80158e0 <rshift+0x28>
 8015958:	4623      	mov	r3, r4
 801595a:	e7e1      	b.n	8015920 <rshift+0x68>

0801595c <__hexdig_fun>:
 801595c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015960:	2b09      	cmp	r3, #9
 8015962:	d802      	bhi.n	801596a <__hexdig_fun+0xe>
 8015964:	3820      	subs	r0, #32
 8015966:	b2c0      	uxtb	r0, r0
 8015968:	4770      	bx	lr
 801596a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801596e:	2b05      	cmp	r3, #5
 8015970:	d801      	bhi.n	8015976 <__hexdig_fun+0x1a>
 8015972:	3847      	subs	r0, #71	; 0x47
 8015974:	e7f7      	b.n	8015966 <__hexdig_fun+0xa>
 8015976:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801597a:	2b05      	cmp	r3, #5
 801597c:	d801      	bhi.n	8015982 <__hexdig_fun+0x26>
 801597e:	3827      	subs	r0, #39	; 0x27
 8015980:	e7f1      	b.n	8015966 <__hexdig_fun+0xa>
 8015982:	2000      	movs	r0, #0
 8015984:	4770      	bx	lr
	...

08015988 <__gethex>:
 8015988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801598c:	4617      	mov	r7, r2
 801598e:	680a      	ldr	r2, [r1, #0]
 8015990:	b085      	sub	sp, #20
 8015992:	f102 0b02 	add.w	fp, r2, #2
 8015996:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801599a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801599e:	4681      	mov	r9, r0
 80159a0:	468a      	mov	sl, r1
 80159a2:	9302      	str	r3, [sp, #8]
 80159a4:	32fe      	adds	r2, #254	; 0xfe
 80159a6:	eb02 030b 	add.w	r3, r2, fp
 80159aa:	46d8      	mov	r8, fp
 80159ac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80159b0:	9301      	str	r3, [sp, #4]
 80159b2:	2830      	cmp	r0, #48	; 0x30
 80159b4:	d0f7      	beq.n	80159a6 <__gethex+0x1e>
 80159b6:	f7ff ffd1 	bl	801595c <__hexdig_fun>
 80159ba:	4604      	mov	r4, r0
 80159bc:	2800      	cmp	r0, #0
 80159be:	d138      	bne.n	8015a32 <__gethex+0xaa>
 80159c0:	49a7      	ldr	r1, [pc, #668]	; (8015c60 <__gethex+0x2d8>)
 80159c2:	2201      	movs	r2, #1
 80159c4:	4640      	mov	r0, r8
 80159c6:	f7ff ff29 	bl	801581c <strncmp>
 80159ca:	4606      	mov	r6, r0
 80159cc:	2800      	cmp	r0, #0
 80159ce:	d169      	bne.n	8015aa4 <__gethex+0x11c>
 80159d0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80159d4:	465d      	mov	r5, fp
 80159d6:	f7ff ffc1 	bl	801595c <__hexdig_fun>
 80159da:	2800      	cmp	r0, #0
 80159dc:	d064      	beq.n	8015aa8 <__gethex+0x120>
 80159de:	465a      	mov	r2, fp
 80159e0:	7810      	ldrb	r0, [r2, #0]
 80159e2:	2830      	cmp	r0, #48	; 0x30
 80159e4:	4690      	mov	r8, r2
 80159e6:	f102 0201 	add.w	r2, r2, #1
 80159ea:	d0f9      	beq.n	80159e0 <__gethex+0x58>
 80159ec:	f7ff ffb6 	bl	801595c <__hexdig_fun>
 80159f0:	2301      	movs	r3, #1
 80159f2:	fab0 f480 	clz	r4, r0
 80159f6:	0964      	lsrs	r4, r4, #5
 80159f8:	465e      	mov	r6, fp
 80159fa:	9301      	str	r3, [sp, #4]
 80159fc:	4642      	mov	r2, r8
 80159fe:	4615      	mov	r5, r2
 8015a00:	3201      	adds	r2, #1
 8015a02:	7828      	ldrb	r0, [r5, #0]
 8015a04:	f7ff ffaa 	bl	801595c <__hexdig_fun>
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	d1f8      	bne.n	80159fe <__gethex+0x76>
 8015a0c:	4994      	ldr	r1, [pc, #592]	; (8015c60 <__gethex+0x2d8>)
 8015a0e:	2201      	movs	r2, #1
 8015a10:	4628      	mov	r0, r5
 8015a12:	f7ff ff03 	bl	801581c <strncmp>
 8015a16:	b978      	cbnz	r0, 8015a38 <__gethex+0xb0>
 8015a18:	b946      	cbnz	r6, 8015a2c <__gethex+0xa4>
 8015a1a:	1c6e      	adds	r6, r5, #1
 8015a1c:	4632      	mov	r2, r6
 8015a1e:	4615      	mov	r5, r2
 8015a20:	3201      	adds	r2, #1
 8015a22:	7828      	ldrb	r0, [r5, #0]
 8015a24:	f7ff ff9a 	bl	801595c <__hexdig_fun>
 8015a28:	2800      	cmp	r0, #0
 8015a2a:	d1f8      	bne.n	8015a1e <__gethex+0x96>
 8015a2c:	1b73      	subs	r3, r6, r5
 8015a2e:	009e      	lsls	r6, r3, #2
 8015a30:	e004      	b.n	8015a3c <__gethex+0xb4>
 8015a32:	2400      	movs	r4, #0
 8015a34:	4626      	mov	r6, r4
 8015a36:	e7e1      	b.n	80159fc <__gethex+0x74>
 8015a38:	2e00      	cmp	r6, #0
 8015a3a:	d1f7      	bne.n	8015a2c <__gethex+0xa4>
 8015a3c:	782b      	ldrb	r3, [r5, #0]
 8015a3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015a42:	2b50      	cmp	r3, #80	; 0x50
 8015a44:	d13d      	bne.n	8015ac2 <__gethex+0x13a>
 8015a46:	786b      	ldrb	r3, [r5, #1]
 8015a48:	2b2b      	cmp	r3, #43	; 0x2b
 8015a4a:	d02f      	beq.n	8015aac <__gethex+0x124>
 8015a4c:	2b2d      	cmp	r3, #45	; 0x2d
 8015a4e:	d031      	beq.n	8015ab4 <__gethex+0x12c>
 8015a50:	1c69      	adds	r1, r5, #1
 8015a52:	f04f 0b00 	mov.w	fp, #0
 8015a56:	7808      	ldrb	r0, [r1, #0]
 8015a58:	f7ff ff80 	bl	801595c <__hexdig_fun>
 8015a5c:	1e42      	subs	r2, r0, #1
 8015a5e:	b2d2      	uxtb	r2, r2
 8015a60:	2a18      	cmp	r2, #24
 8015a62:	d82e      	bhi.n	8015ac2 <__gethex+0x13a>
 8015a64:	f1a0 0210 	sub.w	r2, r0, #16
 8015a68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015a6c:	f7ff ff76 	bl	801595c <__hexdig_fun>
 8015a70:	f100 3cff 	add.w	ip, r0, #4294967295
 8015a74:	fa5f fc8c 	uxtb.w	ip, ip
 8015a78:	f1bc 0f18 	cmp.w	ip, #24
 8015a7c:	d91d      	bls.n	8015aba <__gethex+0x132>
 8015a7e:	f1bb 0f00 	cmp.w	fp, #0
 8015a82:	d000      	beq.n	8015a86 <__gethex+0xfe>
 8015a84:	4252      	negs	r2, r2
 8015a86:	4416      	add	r6, r2
 8015a88:	f8ca 1000 	str.w	r1, [sl]
 8015a8c:	b1dc      	cbz	r4, 8015ac6 <__gethex+0x13e>
 8015a8e:	9b01      	ldr	r3, [sp, #4]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	bf14      	ite	ne
 8015a94:	f04f 0800 	movne.w	r8, #0
 8015a98:	f04f 0806 	moveq.w	r8, #6
 8015a9c:	4640      	mov	r0, r8
 8015a9e:	b005      	add	sp, #20
 8015aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aa4:	4645      	mov	r5, r8
 8015aa6:	4626      	mov	r6, r4
 8015aa8:	2401      	movs	r4, #1
 8015aaa:	e7c7      	b.n	8015a3c <__gethex+0xb4>
 8015aac:	f04f 0b00 	mov.w	fp, #0
 8015ab0:	1ca9      	adds	r1, r5, #2
 8015ab2:	e7d0      	b.n	8015a56 <__gethex+0xce>
 8015ab4:	f04f 0b01 	mov.w	fp, #1
 8015ab8:	e7fa      	b.n	8015ab0 <__gethex+0x128>
 8015aba:	230a      	movs	r3, #10
 8015abc:	fb03 0002 	mla	r0, r3, r2, r0
 8015ac0:	e7d0      	b.n	8015a64 <__gethex+0xdc>
 8015ac2:	4629      	mov	r1, r5
 8015ac4:	e7e0      	b.n	8015a88 <__gethex+0x100>
 8015ac6:	eba5 0308 	sub.w	r3, r5, r8
 8015aca:	3b01      	subs	r3, #1
 8015acc:	4621      	mov	r1, r4
 8015ace:	2b07      	cmp	r3, #7
 8015ad0:	dc0a      	bgt.n	8015ae8 <__gethex+0x160>
 8015ad2:	4648      	mov	r0, r9
 8015ad4:	f7fe f93e 	bl	8013d54 <_Balloc>
 8015ad8:	4604      	mov	r4, r0
 8015ada:	b940      	cbnz	r0, 8015aee <__gethex+0x166>
 8015adc:	4b61      	ldr	r3, [pc, #388]	; (8015c64 <__gethex+0x2dc>)
 8015ade:	4602      	mov	r2, r0
 8015ae0:	21e4      	movs	r1, #228	; 0xe4
 8015ae2:	4861      	ldr	r0, [pc, #388]	; (8015c68 <__gethex+0x2e0>)
 8015ae4:	f7ff feb4 	bl	8015850 <__assert_func>
 8015ae8:	3101      	adds	r1, #1
 8015aea:	105b      	asrs	r3, r3, #1
 8015aec:	e7ef      	b.n	8015ace <__gethex+0x146>
 8015aee:	f100 0a14 	add.w	sl, r0, #20
 8015af2:	2300      	movs	r3, #0
 8015af4:	495a      	ldr	r1, [pc, #360]	; (8015c60 <__gethex+0x2d8>)
 8015af6:	f8cd a004 	str.w	sl, [sp, #4]
 8015afa:	469b      	mov	fp, r3
 8015afc:	45a8      	cmp	r8, r5
 8015afe:	d342      	bcc.n	8015b86 <__gethex+0x1fe>
 8015b00:	9801      	ldr	r0, [sp, #4]
 8015b02:	f840 bb04 	str.w	fp, [r0], #4
 8015b06:	eba0 000a 	sub.w	r0, r0, sl
 8015b0a:	1080      	asrs	r0, r0, #2
 8015b0c:	6120      	str	r0, [r4, #16]
 8015b0e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8015b12:	4658      	mov	r0, fp
 8015b14:	f7fe fa10 	bl	8013f38 <__hi0bits>
 8015b18:	683d      	ldr	r5, [r7, #0]
 8015b1a:	eba8 0000 	sub.w	r0, r8, r0
 8015b1e:	42a8      	cmp	r0, r5
 8015b20:	dd59      	ble.n	8015bd6 <__gethex+0x24e>
 8015b22:	eba0 0805 	sub.w	r8, r0, r5
 8015b26:	4641      	mov	r1, r8
 8015b28:	4620      	mov	r0, r4
 8015b2a:	f7fe fd9f 	bl	801466c <__any_on>
 8015b2e:	4683      	mov	fp, r0
 8015b30:	b1b8      	cbz	r0, 8015b62 <__gethex+0x1da>
 8015b32:	f108 33ff 	add.w	r3, r8, #4294967295
 8015b36:	1159      	asrs	r1, r3, #5
 8015b38:	f003 021f 	and.w	r2, r3, #31
 8015b3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015b40:	f04f 0b01 	mov.w	fp, #1
 8015b44:	fa0b f202 	lsl.w	r2, fp, r2
 8015b48:	420a      	tst	r2, r1
 8015b4a:	d00a      	beq.n	8015b62 <__gethex+0x1da>
 8015b4c:	455b      	cmp	r3, fp
 8015b4e:	dd06      	ble.n	8015b5e <__gethex+0x1d6>
 8015b50:	f1a8 0102 	sub.w	r1, r8, #2
 8015b54:	4620      	mov	r0, r4
 8015b56:	f7fe fd89 	bl	801466c <__any_on>
 8015b5a:	2800      	cmp	r0, #0
 8015b5c:	d138      	bne.n	8015bd0 <__gethex+0x248>
 8015b5e:	f04f 0b02 	mov.w	fp, #2
 8015b62:	4641      	mov	r1, r8
 8015b64:	4620      	mov	r0, r4
 8015b66:	f7ff fea7 	bl	80158b8 <rshift>
 8015b6a:	4446      	add	r6, r8
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	42b3      	cmp	r3, r6
 8015b70:	da41      	bge.n	8015bf6 <__gethex+0x26e>
 8015b72:	4621      	mov	r1, r4
 8015b74:	4648      	mov	r0, r9
 8015b76:	f7fe f92d 	bl	8013dd4 <_Bfree>
 8015b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	6013      	str	r3, [r2, #0]
 8015b80:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8015b84:	e78a      	b.n	8015a9c <__gethex+0x114>
 8015b86:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8015b8a:	2a2e      	cmp	r2, #46	; 0x2e
 8015b8c:	d014      	beq.n	8015bb8 <__gethex+0x230>
 8015b8e:	2b20      	cmp	r3, #32
 8015b90:	d106      	bne.n	8015ba0 <__gethex+0x218>
 8015b92:	9b01      	ldr	r3, [sp, #4]
 8015b94:	f843 bb04 	str.w	fp, [r3], #4
 8015b98:	f04f 0b00 	mov.w	fp, #0
 8015b9c:	9301      	str	r3, [sp, #4]
 8015b9e:	465b      	mov	r3, fp
 8015ba0:	7828      	ldrb	r0, [r5, #0]
 8015ba2:	9303      	str	r3, [sp, #12]
 8015ba4:	f7ff feda 	bl	801595c <__hexdig_fun>
 8015ba8:	9b03      	ldr	r3, [sp, #12]
 8015baa:	f000 000f 	and.w	r0, r0, #15
 8015bae:	4098      	lsls	r0, r3
 8015bb0:	ea4b 0b00 	orr.w	fp, fp, r0
 8015bb4:	3304      	adds	r3, #4
 8015bb6:	e7a1      	b.n	8015afc <__gethex+0x174>
 8015bb8:	45a8      	cmp	r8, r5
 8015bba:	d8e8      	bhi.n	8015b8e <__gethex+0x206>
 8015bbc:	2201      	movs	r2, #1
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	9303      	str	r3, [sp, #12]
 8015bc2:	f7ff fe2b 	bl	801581c <strncmp>
 8015bc6:	4926      	ldr	r1, [pc, #152]	; (8015c60 <__gethex+0x2d8>)
 8015bc8:	9b03      	ldr	r3, [sp, #12]
 8015bca:	2800      	cmp	r0, #0
 8015bcc:	d1df      	bne.n	8015b8e <__gethex+0x206>
 8015bce:	e795      	b.n	8015afc <__gethex+0x174>
 8015bd0:	f04f 0b03 	mov.w	fp, #3
 8015bd4:	e7c5      	b.n	8015b62 <__gethex+0x1da>
 8015bd6:	da0b      	bge.n	8015bf0 <__gethex+0x268>
 8015bd8:	eba5 0800 	sub.w	r8, r5, r0
 8015bdc:	4621      	mov	r1, r4
 8015bde:	4642      	mov	r2, r8
 8015be0:	4648      	mov	r0, r9
 8015be2:	f7fe fb11 	bl	8014208 <__lshift>
 8015be6:	eba6 0608 	sub.w	r6, r6, r8
 8015bea:	4604      	mov	r4, r0
 8015bec:	f100 0a14 	add.w	sl, r0, #20
 8015bf0:	f04f 0b00 	mov.w	fp, #0
 8015bf4:	e7ba      	b.n	8015b6c <__gethex+0x1e4>
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	42b3      	cmp	r3, r6
 8015bfa:	dd73      	ble.n	8015ce4 <__gethex+0x35c>
 8015bfc:	1b9e      	subs	r6, r3, r6
 8015bfe:	42b5      	cmp	r5, r6
 8015c00:	dc34      	bgt.n	8015c6c <__gethex+0x2e4>
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	2b02      	cmp	r3, #2
 8015c06:	d023      	beq.n	8015c50 <__gethex+0x2c8>
 8015c08:	2b03      	cmp	r3, #3
 8015c0a:	d025      	beq.n	8015c58 <__gethex+0x2d0>
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	d115      	bne.n	8015c3c <__gethex+0x2b4>
 8015c10:	42b5      	cmp	r5, r6
 8015c12:	d113      	bne.n	8015c3c <__gethex+0x2b4>
 8015c14:	2d01      	cmp	r5, #1
 8015c16:	d10b      	bne.n	8015c30 <__gethex+0x2a8>
 8015c18:	9a02      	ldr	r2, [sp, #8]
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	6013      	str	r3, [r2, #0]
 8015c1e:	2301      	movs	r3, #1
 8015c20:	6123      	str	r3, [r4, #16]
 8015c22:	f8ca 3000 	str.w	r3, [sl]
 8015c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c28:	f04f 0862 	mov.w	r8, #98	; 0x62
 8015c2c:	601c      	str	r4, [r3, #0]
 8015c2e:	e735      	b.n	8015a9c <__gethex+0x114>
 8015c30:	1e69      	subs	r1, r5, #1
 8015c32:	4620      	mov	r0, r4
 8015c34:	f7fe fd1a 	bl	801466c <__any_on>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	d1ed      	bne.n	8015c18 <__gethex+0x290>
 8015c3c:	4621      	mov	r1, r4
 8015c3e:	4648      	mov	r0, r9
 8015c40:	f7fe f8c8 	bl	8013dd4 <_Bfree>
 8015c44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c46:	2300      	movs	r3, #0
 8015c48:	6013      	str	r3, [r2, #0]
 8015c4a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8015c4e:	e725      	b.n	8015a9c <__gethex+0x114>
 8015c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d1f2      	bne.n	8015c3c <__gethex+0x2b4>
 8015c56:	e7df      	b.n	8015c18 <__gethex+0x290>
 8015c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d1dc      	bne.n	8015c18 <__gethex+0x290>
 8015c5e:	e7ed      	b.n	8015c3c <__gethex+0x2b4>
 8015c60:	08016b84 	.word	0x08016b84
 8015c64:	08016a1d 	.word	0x08016a1d
 8015c68:	08016d2e 	.word	0x08016d2e
 8015c6c:	f106 38ff 	add.w	r8, r6, #4294967295
 8015c70:	f1bb 0f00 	cmp.w	fp, #0
 8015c74:	d133      	bne.n	8015cde <__gethex+0x356>
 8015c76:	f1b8 0f00 	cmp.w	r8, #0
 8015c7a:	d004      	beq.n	8015c86 <__gethex+0x2fe>
 8015c7c:	4641      	mov	r1, r8
 8015c7e:	4620      	mov	r0, r4
 8015c80:	f7fe fcf4 	bl	801466c <__any_on>
 8015c84:	4683      	mov	fp, r0
 8015c86:	ea4f 1268 	mov.w	r2, r8, asr #5
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015c90:	f008 081f 	and.w	r8, r8, #31
 8015c94:	fa03 f308 	lsl.w	r3, r3, r8
 8015c98:	4213      	tst	r3, r2
 8015c9a:	4631      	mov	r1, r6
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	bf18      	it	ne
 8015ca0:	f04b 0b02 	orrne.w	fp, fp, #2
 8015ca4:	1bad      	subs	r5, r5, r6
 8015ca6:	f7ff fe07 	bl	80158b8 <rshift>
 8015caa:	687e      	ldr	r6, [r7, #4]
 8015cac:	f04f 0802 	mov.w	r8, #2
 8015cb0:	f1bb 0f00 	cmp.w	fp, #0
 8015cb4:	d04a      	beq.n	8015d4c <__gethex+0x3c4>
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2b02      	cmp	r3, #2
 8015cba:	d016      	beq.n	8015cea <__gethex+0x362>
 8015cbc:	2b03      	cmp	r3, #3
 8015cbe:	d018      	beq.n	8015cf2 <__gethex+0x36a>
 8015cc0:	2b01      	cmp	r3, #1
 8015cc2:	d109      	bne.n	8015cd8 <__gethex+0x350>
 8015cc4:	f01b 0f02 	tst.w	fp, #2
 8015cc8:	d006      	beq.n	8015cd8 <__gethex+0x350>
 8015cca:	f8da 3000 	ldr.w	r3, [sl]
 8015cce:	ea4b 0b03 	orr.w	fp, fp, r3
 8015cd2:	f01b 0f01 	tst.w	fp, #1
 8015cd6:	d10f      	bne.n	8015cf8 <__gethex+0x370>
 8015cd8:	f048 0810 	orr.w	r8, r8, #16
 8015cdc:	e036      	b.n	8015d4c <__gethex+0x3c4>
 8015cde:	f04f 0b01 	mov.w	fp, #1
 8015ce2:	e7d0      	b.n	8015c86 <__gethex+0x2fe>
 8015ce4:	f04f 0801 	mov.w	r8, #1
 8015ce8:	e7e2      	b.n	8015cb0 <__gethex+0x328>
 8015cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cec:	f1c3 0301 	rsb	r3, r3, #1
 8015cf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d0ef      	beq.n	8015cd8 <__gethex+0x350>
 8015cf8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015cfc:	f104 0214 	add.w	r2, r4, #20
 8015d00:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015d04:	9301      	str	r3, [sp, #4]
 8015d06:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	4694      	mov	ip, r2
 8015d0e:	f852 1b04 	ldr.w	r1, [r2], #4
 8015d12:	f1b1 3fff 	cmp.w	r1, #4294967295
 8015d16:	d01e      	beq.n	8015d56 <__gethex+0x3ce>
 8015d18:	3101      	adds	r1, #1
 8015d1a:	f8cc 1000 	str.w	r1, [ip]
 8015d1e:	f1b8 0f02 	cmp.w	r8, #2
 8015d22:	f104 0214 	add.w	r2, r4, #20
 8015d26:	d13d      	bne.n	8015da4 <__gethex+0x41c>
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	3b01      	subs	r3, #1
 8015d2c:	42ab      	cmp	r3, r5
 8015d2e:	d10b      	bne.n	8015d48 <__gethex+0x3c0>
 8015d30:	1169      	asrs	r1, r5, #5
 8015d32:	2301      	movs	r3, #1
 8015d34:	f005 051f 	and.w	r5, r5, #31
 8015d38:	fa03 f505 	lsl.w	r5, r3, r5
 8015d3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d40:	421d      	tst	r5, r3
 8015d42:	bf18      	it	ne
 8015d44:	f04f 0801 	movne.w	r8, #1
 8015d48:	f048 0820 	orr.w	r8, r8, #32
 8015d4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d4e:	601c      	str	r4, [r3, #0]
 8015d50:	9b02      	ldr	r3, [sp, #8]
 8015d52:	601e      	str	r6, [r3, #0]
 8015d54:	e6a2      	b.n	8015a9c <__gethex+0x114>
 8015d56:	4290      	cmp	r0, r2
 8015d58:	f842 3c04 	str.w	r3, [r2, #-4]
 8015d5c:	d8d6      	bhi.n	8015d0c <__gethex+0x384>
 8015d5e:	68a2      	ldr	r2, [r4, #8]
 8015d60:	4593      	cmp	fp, r2
 8015d62:	db17      	blt.n	8015d94 <__gethex+0x40c>
 8015d64:	6861      	ldr	r1, [r4, #4]
 8015d66:	4648      	mov	r0, r9
 8015d68:	3101      	adds	r1, #1
 8015d6a:	f7fd fff3 	bl	8013d54 <_Balloc>
 8015d6e:	4682      	mov	sl, r0
 8015d70:	b918      	cbnz	r0, 8015d7a <__gethex+0x3f2>
 8015d72:	4b1b      	ldr	r3, [pc, #108]	; (8015de0 <__gethex+0x458>)
 8015d74:	4602      	mov	r2, r0
 8015d76:	2184      	movs	r1, #132	; 0x84
 8015d78:	e6b3      	b.n	8015ae2 <__gethex+0x15a>
 8015d7a:	6922      	ldr	r2, [r4, #16]
 8015d7c:	3202      	adds	r2, #2
 8015d7e:	f104 010c 	add.w	r1, r4, #12
 8015d82:	0092      	lsls	r2, r2, #2
 8015d84:	300c      	adds	r0, #12
 8015d86:	f7fd f90b 	bl	8012fa0 <memcpy>
 8015d8a:	4621      	mov	r1, r4
 8015d8c:	4648      	mov	r0, r9
 8015d8e:	f7fe f821 	bl	8013dd4 <_Bfree>
 8015d92:	4654      	mov	r4, sl
 8015d94:	6922      	ldr	r2, [r4, #16]
 8015d96:	1c51      	adds	r1, r2, #1
 8015d98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015d9c:	6121      	str	r1, [r4, #16]
 8015d9e:	2101      	movs	r1, #1
 8015da0:	6151      	str	r1, [r2, #20]
 8015da2:	e7bc      	b.n	8015d1e <__gethex+0x396>
 8015da4:	6921      	ldr	r1, [r4, #16]
 8015da6:	4559      	cmp	r1, fp
 8015da8:	dd0b      	ble.n	8015dc2 <__gethex+0x43a>
 8015daa:	2101      	movs	r1, #1
 8015dac:	4620      	mov	r0, r4
 8015dae:	f7ff fd83 	bl	80158b8 <rshift>
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	3601      	adds	r6, #1
 8015db6:	42b3      	cmp	r3, r6
 8015db8:	f6ff aedb 	blt.w	8015b72 <__gethex+0x1ea>
 8015dbc:	f04f 0801 	mov.w	r8, #1
 8015dc0:	e7c2      	b.n	8015d48 <__gethex+0x3c0>
 8015dc2:	f015 051f 	ands.w	r5, r5, #31
 8015dc6:	d0f9      	beq.n	8015dbc <__gethex+0x434>
 8015dc8:	9b01      	ldr	r3, [sp, #4]
 8015dca:	441a      	add	r2, r3
 8015dcc:	f1c5 0520 	rsb	r5, r5, #32
 8015dd0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8015dd4:	f7fe f8b0 	bl	8013f38 <__hi0bits>
 8015dd8:	42a8      	cmp	r0, r5
 8015dda:	dbe6      	blt.n	8015daa <__gethex+0x422>
 8015ddc:	e7ee      	b.n	8015dbc <__gethex+0x434>
 8015dde:	bf00      	nop
 8015de0:	08016a1d 	.word	0x08016a1d

08015de4 <L_shift>:
 8015de4:	f1c2 0208 	rsb	r2, r2, #8
 8015de8:	0092      	lsls	r2, r2, #2
 8015dea:	b570      	push	{r4, r5, r6, lr}
 8015dec:	f1c2 0620 	rsb	r6, r2, #32
 8015df0:	6843      	ldr	r3, [r0, #4]
 8015df2:	6804      	ldr	r4, [r0, #0]
 8015df4:	fa03 f506 	lsl.w	r5, r3, r6
 8015df8:	432c      	orrs	r4, r5
 8015dfa:	40d3      	lsrs	r3, r2
 8015dfc:	6004      	str	r4, [r0, #0]
 8015dfe:	f840 3f04 	str.w	r3, [r0, #4]!
 8015e02:	4288      	cmp	r0, r1
 8015e04:	d3f4      	bcc.n	8015df0 <L_shift+0xc>
 8015e06:	bd70      	pop	{r4, r5, r6, pc}

08015e08 <__match>:
 8015e08:	b530      	push	{r4, r5, lr}
 8015e0a:	6803      	ldr	r3, [r0, #0]
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e12:	b914      	cbnz	r4, 8015e1a <__match+0x12>
 8015e14:	6003      	str	r3, [r0, #0]
 8015e16:	2001      	movs	r0, #1
 8015e18:	bd30      	pop	{r4, r5, pc}
 8015e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015e22:	2d19      	cmp	r5, #25
 8015e24:	bf98      	it	ls
 8015e26:	3220      	addls	r2, #32
 8015e28:	42a2      	cmp	r2, r4
 8015e2a:	d0f0      	beq.n	8015e0e <__match+0x6>
 8015e2c:	2000      	movs	r0, #0
 8015e2e:	e7f3      	b.n	8015e18 <__match+0x10>

08015e30 <__hexnan>:
 8015e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e34:	680b      	ldr	r3, [r1, #0]
 8015e36:	6801      	ldr	r1, [r0, #0]
 8015e38:	115e      	asrs	r6, r3, #5
 8015e3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015e3e:	f013 031f 	ands.w	r3, r3, #31
 8015e42:	b087      	sub	sp, #28
 8015e44:	bf18      	it	ne
 8015e46:	3604      	addne	r6, #4
 8015e48:	2500      	movs	r5, #0
 8015e4a:	1f37      	subs	r7, r6, #4
 8015e4c:	4682      	mov	sl, r0
 8015e4e:	4690      	mov	r8, r2
 8015e50:	9301      	str	r3, [sp, #4]
 8015e52:	f846 5c04 	str.w	r5, [r6, #-4]
 8015e56:	46b9      	mov	r9, r7
 8015e58:	463c      	mov	r4, r7
 8015e5a:	9502      	str	r5, [sp, #8]
 8015e5c:	46ab      	mov	fp, r5
 8015e5e:	784a      	ldrb	r2, [r1, #1]
 8015e60:	1c4b      	adds	r3, r1, #1
 8015e62:	9303      	str	r3, [sp, #12]
 8015e64:	b342      	cbz	r2, 8015eb8 <__hexnan+0x88>
 8015e66:	4610      	mov	r0, r2
 8015e68:	9105      	str	r1, [sp, #20]
 8015e6a:	9204      	str	r2, [sp, #16]
 8015e6c:	f7ff fd76 	bl	801595c <__hexdig_fun>
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d14f      	bne.n	8015f14 <__hexnan+0xe4>
 8015e74:	9a04      	ldr	r2, [sp, #16]
 8015e76:	9905      	ldr	r1, [sp, #20]
 8015e78:	2a20      	cmp	r2, #32
 8015e7a:	d818      	bhi.n	8015eae <__hexnan+0x7e>
 8015e7c:	9b02      	ldr	r3, [sp, #8]
 8015e7e:	459b      	cmp	fp, r3
 8015e80:	dd13      	ble.n	8015eaa <__hexnan+0x7a>
 8015e82:	454c      	cmp	r4, r9
 8015e84:	d206      	bcs.n	8015e94 <__hexnan+0x64>
 8015e86:	2d07      	cmp	r5, #7
 8015e88:	dc04      	bgt.n	8015e94 <__hexnan+0x64>
 8015e8a:	462a      	mov	r2, r5
 8015e8c:	4649      	mov	r1, r9
 8015e8e:	4620      	mov	r0, r4
 8015e90:	f7ff ffa8 	bl	8015de4 <L_shift>
 8015e94:	4544      	cmp	r4, r8
 8015e96:	d950      	bls.n	8015f3a <__hexnan+0x10a>
 8015e98:	2300      	movs	r3, #0
 8015e9a:	f1a4 0904 	sub.w	r9, r4, #4
 8015e9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ea2:	f8cd b008 	str.w	fp, [sp, #8]
 8015ea6:	464c      	mov	r4, r9
 8015ea8:	461d      	mov	r5, r3
 8015eaa:	9903      	ldr	r1, [sp, #12]
 8015eac:	e7d7      	b.n	8015e5e <__hexnan+0x2e>
 8015eae:	2a29      	cmp	r2, #41	; 0x29
 8015eb0:	d155      	bne.n	8015f5e <__hexnan+0x12e>
 8015eb2:	3102      	adds	r1, #2
 8015eb4:	f8ca 1000 	str.w	r1, [sl]
 8015eb8:	f1bb 0f00 	cmp.w	fp, #0
 8015ebc:	d04f      	beq.n	8015f5e <__hexnan+0x12e>
 8015ebe:	454c      	cmp	r4, r9
 8015ec0:	d206      	bcs.n	8015ed0 <__hexnan+0xa0>
 8015ec2:	2d07      	cmp	r5, #7
 8015ec4:	dc04      	bgt.n	8015ed0 <__hexnan+0xa0>
 8015ec6:	462a      	mov	r2, r5
 8015ec8:	4649      	mov	r1, r9
 8015eca:	4620      	mov	r0, r4
 8015ecc:	f7ff ff8a 	bl	8015de4 <L_shift>
 8015ed0:	4544      	cmp	r4, r8
 8015ed2:	d934      	bls.n	8015f3e <__hexnan+0x10e>
 8015ed4:	f1a8 0204 	sub.w	r2, r8, #4
 8015ed8:	4623      	mov	r3, r4
 8015eda:	f853 1b04 	ldr.w	r1, [r3], #4
 8015ede:	f842 1f04 	str.w	r1, [r2, #4]!
 8015ee2:	429f      	cmp	r7, r3
 8015ee4:	d2f9      	bcs.n	8015eda <__hexnan+0xaa>
 8015ee6:	1b3b      	subs	r3, r7, r4
 8015ee8:	f023 0303 	bic.w	r3, r3, #3
 8015eec:	3304      	adds	r3, #4
 8015eee:	3e03      	subs	r6, #3
 8015ef0:	3401      	adds	r4, #1
 8015ef2:	42a6      	cmp	r6, r4
 8015ef4:	bf38      	it	cc
 8015ef6:	2304      	movcc	r3, #4
 8015ef8:	4443      	add	r3, r8
 8015efa:	2200      	movs	r2, #0
 8015efc:	f843 2b04 	str.w	r2, [r3], #4
 8015f00:	429f      	cmp	r7, r3
 8015f02:	d2fb      	bcs.n	8015efc <__hexnan+0xcc>
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	b91b      	cbnz	r3, 8015f10 <__hexnan+0xe0>
 8015f08:	4547      	cmp	r7, r8
 8015f0a:	d126      	bne.n	8015f5a <__hexnan+0x12a>
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	603b      	str	r3, [r7, #0]
 8015f10:	2005      	movs	r0, #5
 8015f12:	e025      	b.n	8015f60 <__hexnan+0x130>
 8015f14:	3501      	adds	r5, #1
 8015f16:	2d08      	cmp	r5, #8
 8015f18:	f10b 0b01 	add.w	fp, fp, #1
 8015f1c:	dd06      	ble.n	8015f2c <__hexnan+0xfc>
 8015f1e:	4544      	cmp	r4, r8
 8015f20:	d9c3      	bls.n	8015eaa <__hexnan+0x7a>
 8015f22:	2300      	movs	r3, #0
 8015f24:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f28:	2501      	movs	r5, #1
 8015f2a:	3c04      	subs	r4, #4
 8015f2c:	6822      	ldr	r2, [r4, #0]
 8015f2e:	f000 000f 	and.w	r0, r0, #15
 8015f32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015f36:	6020      	str	r0, [r4, #0]
 8015f38:	e7b7      	b.n	8015eaa <__hexnan+0x7a>
 8015f3a:	2508      	movs	r5, #8
 8015f3c:	e7b5      	b.n	8015eaa <__hexnan+0x7a>
 8015f3e:	9b01      	ldr	r3, [sp, #4]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d0df      	beq.n	8015f04 <__hexnan+0xd4>
 8015f44:	f1c3 0320 	rsb	r3, r3, #32
 8015f48:	f04f 32ff 	mov.w	r2, #4294967295
 8015f4c:	40da      	lsrs	r2, r3
 8015f4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015f52:	4013      	ands	r3, r2
 8015f54:	f846 3c04 	str.w	r3, [r6, #-4]
 8015f58:	e7d4      	b.n	8015f04 <__hexnan+0xd4>
 8015f5a:	3f04      	subs	r7, #4
 8015f5c:	e7d2      	b.n	8015f04 <__hexnan+0xd4>
 8015f5e:	2004      	movs	r0, #4
 8015f60:	b007      	add	sp, #28
 8015f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f66 <__ascii_mbtowc>:
 8015f66:	b082      	sub	sp, #8
 8015f68:	b901      	cbnz	r1, 8015f6c <__ascii_mbtowc+0x6>
 8015f6a:	a901      	add	r1, sp, #4
 8015f6c:	b142      	cbz	r2, 8015f80 <__ascii_mbtowc+0x1a>
 8015f6e:	b14b      	cbz	r3, 8015f84 <__ascii_mbtowc+0x1e>
 8015f70:	7813      	ldrb	r3, [r2, #0]
 8015f72:	600b      	str	r3, [r1, #0]
 8015f74:	7812      	ldrb	r2, [r2, #0]
 8015f76:	1e10      	subs	r0, r2, #0
 8015f78:	bf18      	it	ne
 8015f7a:	2001      	movne	r0, #1
 8015f7c:	b002      	add	sp, #8
 8015f7e:	4770      	bx	lr
 8015f80:	4610      	mov	r0, r2
 8015f82:	e7fb      	b.n	8015f7c <__ascii_mbtowc+0x16>
 8015f84:	f06f 0001 	mvn.w	r0, #1
 8015f88:	e7f8      	b.n	8015f7c <__ascii_mbtowc+0x16>

08015f8a <_realloc_r>:
 8015f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f8e:	4680      	mov	r8, r0
 8015f90:	4614      	mov	r4, r2
 8015f92:	460e      	mov	r6, r1
 8015f94:	b921      	cbnz	r1, 8015fa0 <_realloc_r+0x16>
 8015f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f9a:	4611      	mov	r1, r2
 8015f9c:	f7fb bf5c 	b.w	8011e58 <_malloc_r>
 8015fa0:	b92a      	cbnz	r2, 8015fae <_realloc_r+0x24>
 8015fa2:	f7fd fe8b 	bl	8013cbc <_free_r>
 8015fa6:	4625      	mov	r5, r4
 8015fa8:	4628      	mov	r0, r5
 8015faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fae:	f000 f842 	bl	8016036 <_malloc_usable_size_r>
 8015fb2:	4284      	cmp	r4, r0
 8015fb4:	4607      	mov	r7, r0
 8015fb6:	d802      	bhi.n	8015fbe <_realloc_r+0x34>
 8015fb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015fbc:	d812      	bhi.n	8015fe4 <_realloc_r+0x5a>
 8015fbe:	4621      	mov	r1, r4
 8015fc0:	4640      	mov	r0, r8
 8015fc2:	f7fb ff49 	bl	8011e58 <_malloc_r>
 8015fc6:	4605      	mov	r5, r0
 8015fc8:	2800      	cmp	r0, #0
 8015fca:	d0ed      	beq.n	8015fa8 <_realloc_r+0x1e>
 8015fcc:	42bc      	cmp	r4, r7
 8015fce:	4622      	mov	r2, r4
 8015fd0:	4631      	mov	r1, r6
 8015fd2:	bf28      	it	cs
 8015fd4:	463a      	movcs	r2, r7
 8015fd6:	f7fc ffe3 	bl	8012fa0 <memcpy>
 8015fda:	4631      	mov	r1, r6
 8015fdc:	4640      	mov	r0, r8
 8015fde:	f7fd fe6d 	bl	8013cbc <_free_r>
 8015fe2:	e7e1      	b.n	8015fa8 <_realloc_r+0x1e>
 8015fe4:	4635      	mov	r5, r6
 8015fe6:	e7df      	b.n	8015fa8 <_realloc_r+0x1e>

08015fe8 <__ascii_wctomb>:
 8015fe8:	b149      	cbz	r1, 8015ffe <__ascii_wctomb+0x16>
 8015fea:	2aff      	cmp	r2, #255	; 0xff
 8015fec:	bf85      	ittet	hi
 8015fee:	238a      	movhi	r3, #138	; 0x8a
 8015ff0:	6003      	strhi	r3, [r0, #0]
 8015ff2:	700a      	strbls	r2, [r1, #0]
 8015ff4:	f04f 30ff 	movhi.w	r0, #4294967295
 8015ff8:	bf98      	it	ls
 8015ffa:	2001      	movls	r0, #1
 8015ffc:	4770      	bx	lr
 8015ffe:	4608      	mov	r0, r1
 8016000:	4770      	bx	lr
	...

08016004 <fiprintf>:
 8016004:	b40e      	push	{r1, r2, r3}
 8016006:	b503      	push	{r0, r1, lr}
 8016008:	4601      	mov	r1, r0
 801600a:	ab03      	add	r3, sp, #12
 801600c:	4805      	ldr	r0, [pc, #20]	; (8016024 <fiprintf+0x20>)
 801600e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016012:	6800      	ldr	r0, [r0, #0]
 8016014:	9301      	str	r3, [sp, #4]
 8016016:	f000 f83f 	bl	8016098 <_vfiprintf_r>
 801601a:	b002      	add	sp, #8
 801601c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016020:	b003      	add	sp, #12
 8016022:	4770      	bx	lr
 8016024:	20000164 	.word	0x20000164

08016028 <abort>:
 8016028:	b508      	push	{r3, lr}
 801602a:	2006      	movs	r0, #6
 801602c:	f000 fa0c 	bl	8016448 <raise>
 8016030:	2001      	movs	r0, #1
 8016032:	f7ed fcc3 	bl	80039bc <_exit>

08016036 <_malloc_usable_size_r>:
 8016036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801603a:	1f18      	subs	r0, r3, #4
 801603c:	2b00      	cmp	r3, #0
 801603e:	bfbc      	itt	lt
 8016040:	580b      	ldrlt	r3, [r1, r0]
 8016042:	18c0      	addlt	r0, r0, r3
 8016044:	4770      	bx	lr

08016046 <__sfputc_r>:
 8016046:	6893      	ldr	r3, [r2, #8]
 8016048:	3b01      	subs	r3, #1
 801604a:	2b00      	cmp	r3, #0
 801604c:	b410      	push	{r4}
 801604e:	6093      	str	r3, [r2, #8]
 8016050:	da08      	bge.n	8016064 <__sfputc_r+0x1e>
 8016052:	6994      	ldr	r4, [r2, #24]
 8016054:	42a3      	cmp	r3, r4
 8016056:	db01      	blt.n	801605c <__sfputc_r+0x16>
 8016058:	290a      	cmp	r1, #10
 801605a:	d103      	bne.n	8016064 <__sfputc_r+0x1e>
 801605c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016060:	f000 b934 	b.w	80162cc <__swbuf_r>
 8016064:	6813      	ldr	r3, [r2, #0]
 8016066:	1c58      	adds	r0, r3, #1
 8016068:	6010      	str	r0, [r2, #0]
 801606a:	7019      	strb	r1, [r3, #0]
 801606c:	4608      	mov	r0, r1
 801606e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016072:	4770      	bx	lr

08016074 <__sfputs_r>:
 8016074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016076:	4606      	mov	r6, r0
 8016078:	460f      	mov	r7, r1
 801607a:	4614      	mov	r4, r2
 801607c:	18d5      	adds	r5, r2, r3
 801607e:	42ac      	cmp	r4, r5
 8016080:	d101      	bne.n	8016086 <__sfputs_r+0x12>
 8016082:	2000      	movs	r0, #0
 8016084:	e007      	b.n	8016096 <__sfputs_r+0x22>
 8016086:	f814 1b01 	ldrb.w	r1, [r4], #1
 801608a:	463a      	mov	r2, r7
 801608c:	4630      	mov	r0, r6
 801608e:	f7ff ffda 	bl	8016046 <__sfputc_r>
 8016092:	1c43      	adds	r3, r0, #1
 8016094:	d1f3      	bne.n	801607e <__sfputs_r+0xa>
 8016096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016098 <_vfiprintf_r>:
 8016098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801609c:	460d      	mov	r5, r1
 801609e:	b09d      	sub	sp, #116	; 0x74
 80160a0:	4614      	mov	r4, r2
 80160a2:	4698      	mov	r8, r3
 80160a4:	4606      	mov	r6, r0
 80160a6:	b118      	cbz	r0, 80160b0 <_vfiprintf_r+0x18>
 80160a8:	6a03      	ldr	r3, [r0, #32]
 80160aa:	b90b      	cbnz	r3, 80160b0 <_vfiprintf_r+0x18>
 80160ac:	f7fc fe50 	bl	8012d50 <__sinit>
 80160b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160b2:	07d9      	lsls	r1, r3, #31
 80160b4:	d405      	bmi.n	80160c2 <_vfiprintf_r+0x2a>
 80160b6:	89ab      	ldrh	r3, [r5, #12]
 80160b8:	059a      	lsls	r2, r3, #22
 80160ba:	d402      	bmi.n	80160c2 <_vfiprintf_r+0x2a>
 80160bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160be:	f7fc ff6d 	bl	8012f9c <__retarget_lock_acquire_recursive>
 80160c2:	89ab      	ldrh	r3, [r5, #12]
 80160c4:	071b      	lsls	r3, r3, #28
 80160c6:	d501      	bpl.n	80160cc <_vfiprintf_r+0x34>
 80160c8:	692b      	ldr	r3, [r5, #16]
 80160ca:	b99b      	cbnz	r3, 80160f4 <_vfiprintf_r+0x5c>
 80160cc:	4629      	mov	r1, r5
 80160ce:	4630      	mov	r0, r6
 80160d0:	f000 f93a 	bl	8016348 <__swsetup_r>
 80160d4:	b170      	cbz	r0, 80160f4 <_vfiprintf_r+0x5c>
 80160d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160d8:	07dc      	lsls	r4, r3, #31
 80160da:	d504      	bpl.n	80160e6 <_vfiprintf_r+0x4e>
 80160dc:	f04f 30ff 	mov.w	r0, #4294967295
 80160e0:	b01d      	add	sp, #116	; 0x74
 80160e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160e6:	89ab      	ldrh	r3, [r5, #12]
 80160e8:	0598      	lsls	r0, r3, #22
 80160ea:	d4f7      	bmi.n	80160dc <_vfiprintf_r+0x44>
 80160ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160ee:	f7fc ff56 	bl	8012f9e <__retarget_lock_release_recursive>
 80160f2:	e7f3      	b.n	80160dc <_vfiprintf_r+0x44>
 80160f4:	2300      	movs	r3, #0
 80160f6:	9309      	str	r3, [sp, #36]	; 0x24
 80160f8:	2320      	movs	r3, #32
 80160fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8016102:	2330      	movs	r3, #48	; 0x30
 8016104:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80162b8 <_vfiprintf_r+0x220>
 8016108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801610c:	f04f 0901 	mov.w	r9, #1
 8016110:	4623      	mov	r3, r4
 8016112:	469a      	mov	sl, r3
 8016114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016118:	b10a      	cbz	r2, 801611e <_vfiprintf_r+0x86>
 801611a:	2a25      	cmp	r2, #37	; 0x25
 801611c:	d1f9      	bne.n	8016112 <_vfiprintf_r+0x7a>
 801611e:	ebba 0b04 	subs.w	fp, sl, r4
 8016122:	d00b      	beq.n	801613c <_vfiprintf_r+0xa4>
 8016124:	465b      	mov	r3, fp
 8016126:	4622      	mov	r2, r4
 8016128:	4629      	mov	r1, r5
 801612a:	4630      	mov	r0, r6
 801612c:	f7ff ffa2 	bl	8016074 <__sfputs_r>
 8016130:	3001      	adds	r0, #1
 8016132:	f000 80a9 	beq.w	8016288 <_vfiprintf_r+0x1f0>
 8016136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016138:	445a      	add	r2, fp
 801613a:	9209      	str	r2, [sp, #36]	; 0x24
 801613c:	f89a 3000 	ldrb.w	r3, [sl]
 8016140:	2b00      	cmp	r3, #0
 8016142:	f000 80a1 	beq.w	8016288 <_vfiprintf_r+0x1f0>
 8016146:	2300      	movs	r3, #0
 8016148:	f04f 32ff 	mov.w	r2, #4294967295
 801614c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016150:	f10a 0a01 	add.w	sl, sl, #1
 8016154:	9304      	str	r3, [sp, #16]
 8016156:	9307      	str	r3, [sp, #28]
 8016158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801615c:	931a      	str	r3, [sp, #104]	; 0x68
 801615e:	4654      	mov	r4, sl
 8016160:	2205      	movs	r2, #5
 8016162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016166:	4854      	ldr	r0, [pc, #336]	; (80162b8 <_vfiprintf_r+0x220>)
 8016168:	f7ea f832 	bl	80001d0 <memchr>
 801616c:	9a04      	ldr	r2, [sp, #16]
 801616e:	b9d8      	cbnz	r0, 80161a8 <_vfiprintf_r+0x110>
 8016170:	06d1      	lsls	r1, r2, #27
 8016172:	bf44      	itt	mi
 8016174:	2320      	movmi	r3, #32
 8016176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801617a:	0713      	lsls	r3, r2, #28
 801617c:	bf44      	itt	mi
 801617e:	232b      	movmi	r3, #43	; 0x2b
 8016180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016184:	f89a 3000 	ldrb.w	r3, [sl]
 8016188:	2b2a      	cmp	r3, #42	; 0x2a
 801618a:	d015      	beq.n	80161b8 <_vfiprintf_r+0x120>
 801618c:	9a07      	ldr	r2, [sp, #28]
 801618e:	4654      	mov	r4, sl
 8016190:	2000      	movs	r0, #0
 8016192:	f04f 0c0a 	mov.w	ip, #10
 8016196:	4621      	mov	r1, r4
 8016198:	f811 3b01 	ldrb.w	r3, [r1], #1
 801619c:	3b30      	subs	r3, #48	; 0x30
 801619e:	2b09      	cmp	r3, #9
 80161a0:	d94d      	bls.n	801623e <_vfiprintf_r+0x1a6>
 80161a2:	b1b0      	cbz	r0, 80161d2 <_vfiprintf_r+0x13a>
 80161a4:	9207      	str	r2, [sp, #28]
 80161a6:	e014      	b.n	80161d2 <_vfiprintf_r+0x13a>
 80161a8:	eba0 0308 	sub.w	r3, r0, r8
 80161ac:	fa09 f303 	lsl.w	r3, r9, r3
 80161b0:	4313      	orrs	r3, r2
 80161b2:	9304      	str	r3, [sp, #16]
 80161b4:	46a2      	mov	sl, r4
 80161b6:	e7d2      	b.n	801615e <_vfiprintf_r+0xc6>
 80161b8:	9b03      	ldr	r3, [sp, #12]
 80161ba:	1d19      	adds	r1, r3, #4
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	9103      	str	r1, [sp, #12]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	bfbb      	ittet	lt
 80161c4:	425b      	neglt	r3, r3
 80161c6:	f042 0202 	orrlt.w	r2, r2, #2
 80161ca:	9307      	strge	r3, [sp, #28]
 80161cc:	9307      	strlt	r3, [sp, #28]
 80161ce:	bfb8      	it	lt
 80161d0:	9204      	strlt	r2, [sp, #16]
 80161d2:	7823      	ldrb	r3, [r4, #0]
 80161d4:	2b2e      	cmp	r3, #46	; 0x2e
 80161d6:	d10c      	bne.n	80161f2 <_vfiprintf_r+0x15a>
 80161d8:	7863      	ldrb	r3, [r4, #1]
 80161da:	2b2a      	cmp	r3, #42	; 0x2a
 80161dc:	d134      	bne.n	8016248 <_vfiprintf_r+0x1b0>
 80161de:	9b03      	ldr	r3, [sp, #12]
 80161e0:	1d1a      	adds	r2, r3, #4
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	9203      	str	r2, [sp, #12]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	bfb8      	it	lt
 80161ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80161ee:	3402      	adds	r4, #2
 80161f0:	9305      	str	r3, [sp, #20]
 80161f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80162c8 <_vfiprintf_r+0x230>
 80161f6:	7821      	ldrb	r1, [r4, #0]
 80161f8:	2203      	movs	r2, #3
 80161fa:	4650      	mov	r0, sl
 80161fc:	f7e9 ffe8 	bl	80001d0 <memchr>
 8016200:	b138      	cbz	r0, 8016212 <_vfiprintf_r+0x17a>
 8016202:	9b04      	ldr	r3, [sp, #16]
 8016204:	eba0 000a 	sub.w	r0, r0, sl
 8016208:	2240      	movs	r2, #64	; 0x40
 801620a:	4082      	lsls	r2, r0
 801620c:	4313      	orrs	r3, r2
 801620e:	3401      	adds	r4, #1
 8016210:	9304      	str	r3, [sp, #16]
 8016212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016216:	4829      	ldr	r0, [pc, #164]	; (80162bc <_vfiprintf_r+0x224>)
 8016218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801621c:	2206      	movs	r2, #6
 801621e:	f7e9 ffd7 	bl	80001d0 <memchr>
 8016222:	2800      	cmp	r0, #0
 8016224:	d03f      	beq.n	80162a6 <_vfiprintf_r+0x20e>
 8016226:	4b26      	ldr	r3, [pc, #152]	; (80162c0 <_vfiprintf_r+0x228>)
 8016228:	bb1b      	cbnz	r3, 8016272 <_vfiprintf_r+0x1da>
 801622a:	9b03      	ldr	r3, [sp, #12]
 801622c:	3307      	adds	r3, #7
 801622e:	f023 0307 	bic.w	r3, r3, #7
 8016232:	3308      	adds	r3, #8
 8016234:	9303      	str	r3, [sp, #12]
 8016236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016238:	443b      	add	r3, r7
 801623a:	9309      	str	r3, [sp, #36]	; 0x24
 801623c:	e768      	b.n	8016110 <_vfiprintf_r+0x78>
 801623e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016242:	460c      	mov	r4, r1
 8016244:	2001      	movs	r0, #1
 8016246:	e7a6      	b.n	8016196 <_vfiprintf_r+0xfe>
 8016248:	2300      	movs	r3, #0
 801624a:	3401      	adds	r4, #1
 801624c:	9305      	str	r3, [sp, #20]
 801624e:	4619      	mov	r1, r3
 8016250:	f04f 0c0a 	mov.w	ip, #10
 8016254:	4620      	mov	r0, r4
 8016256:	f810 2b01 	ldrb.w	r2, [r0], #1
 801625a:	3a30      	subs	r2, #48	; 0x30
 801625c:	2a09      	cmp	r2, #9
 801625e:	d903      	bls.n	8016268 <_vfiprintf_r+0x1d0>
 8016260:	2b00      	cmp	r3, #0
 8016262:	d0c6      	beq.n	80161f2 <_vfiprintf_r+0x15a>
 8016264:	9105      	str	r1, [sp, #20]
 8016266:	e7c4      	b.n	80161f2 <_vfiprintf_r+0x15a>
 8016268:	fb0c 2101 	mla	r1, ip, r1, r2
 801626c:	4604      	mov	r4, r0
 801626e:	2301      	movs	r3, #1
 8016270:	e7f0      	b.n	8016254 <_vfiprintf_r+0x1bc>
 8016272:	ab03      	add	r3, sp, #12
 8016274:	9300      	str	r3, [sp, #0]
 8016276:	462a      	mov	r2, r5
 8016278:	4b12      	ldr	r3, [pc, #72]	; (80162c4 <_vfiprintf_r+0x22c>)
 801627a:	a904      	add	r1, sp, #16
 801627c:	4630      	mov	r0, r6
 801627e:	f7fb ff17 	bl	80120b0 <_printf_float>
 8016282:	4607      	mov	r7, r0
 8016284:	1c78      	adds	r0, r7, #1
 8016286:	d1d6      	bne.n	8016236 <_vfiprintf_r+0x19e>
 8016288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801628a:	07d9      	lsls	r1, r3, #31
 801628c:	d405      	bmi.n	801629a <_vfiprintf_r+0x202>
 801628e:	89ab      	ldrh	r3, [r5, #12]
 8016290:	059a      	lsls	r2, r3, #22
 8016292:	d402      	bmi.n	801629a <_vfiprintf_r+0x202>
 8016294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016296:	f7fc fe82 	bl	8012f9e <__retarget_lock_release_recursive>
 801629a:	89ab      	ldrh	r3, [r5, #12]
 801629c:	065b      	lsls	r3, r3, #25
 801629e:	f53f af1d 	bmi.w	80160dc <_vfiprintf_r+0x44>
 80162a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80162a4:	e71c      	b.n	80160e0 <_vfiprintf_r+0x48>
 80162a6:	ab03      	add	r3, sp, #12
 80162a8:	9300      	str	r3, [sp, #0]
 80162aa:	462a      	mov	r2, r5
 80162ac:	4b05      	ldr	r3, [pc, #20]	; (80162c4 <_vfiprintf_r+0x22c>)
 80162ae:	a904      	add	r1, sp, #16
 80162b0:	4630      	mov	r0, r6
 80162b2:	f7fc f9a1 	bl	80125f8 <_printf_i>
 80162b6:	e7e4      	b.n	8016282 <_vfiprintf_r+0x1ea>
 80162b8:	08016cd9 	.word	0x08016cd9
 80162bc:	08016ce3 	.word	0x08016ce3
 80162c0:	080120b1 	.word	0x080120b1
 80162c4:	08016075 	.word	0x08016075
 80162c8:	08016cdf 	.word	0x08016cdf

080162cc <__swbuf_r>:
 80162cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162ce:	460e      	mov	r6, r1
 80162d0:	4614      	mov	r4, r2
 80162d2:	4605      	mov	r5, r0
 80162d4:	b118      	cbz	r0, 80162de <__swbuf_r+0x12>
 80162d6:	6a03      	ldr	r3, [r0, #32]
 80162d8:	b90b      	cbnz	r3, 80162de <__swbuf_r+0x12>
 80162da:	f7fc fd39 	bl	8012d50 <__sinit>
 80162de:	69a3      	ldr	r3, [r4, #24]
 80162e0:	60a3      	str	r3, [r4, #8]
 80162e2:	89a3      	ldrh	r3, [r4, #12]
 80162e4:	071a      	lsls	r2, r3, #28
 80162e6:	d525      	bpl.n	8016334 <__swbuf_r+0x68>
 80162e8:	6923      	ldr	r3, [r4, #16]
 80162ea:	b31b      	cbz	r3, 8016334 <__swbuf_r+0x68>
 80162ec:	6823      	ldr	r3, [r4, #0]
 80162ee:	6922      	ldr	r2, [r4, #16]
 80162f0:	1a98      	subs	r0, r3, r2
 80162f2:	6963      	ldr	r3, [r4, #20]
 80162f4:	b2f6      	uxtb	r6, r6
 80162f6:	4283      	cmp	r3, r0
 80162f8:	4637      	mov	r7, r6
 80162fa:	dc04      	bgt.n	8016306 <__swbuf_r+0x3a>
 80162fc:	4621      	mov	r1, r4
 80162fe:	4628      	mov	r0, r5
 8016300:	f7ff fa4a 	bl	8015798 <_fflush_r>
 8016304:	b9e0      	cbnz	r0, 8016340 <__swbuf_r+0x74>
 8016306:	68a3      	ldr	r3, [r4, #8]
 8016308:	3b01      	subs	r3, #1
 801630a:	60a3      	str	r3, [r4, #8]
 801630c:	6823      	ldr	r3, [r4, #0]
 801630e:	1c5a      	adds	r2, r3, #1
 8016310:	6022      	str	r2, [r4, #0]
 8016312:	701e      	strb	r6, [r3, #0]
 8016314:	6962      	ldr	r2, [r4, #20]
 8016316:	1c43      	adds	r3, r0, #1
 8016318:	429a      	cmp	r2, r3
 801631a:	d004      	beq.n	8016326 <__swbuf_r+0x5a>
 801631c:	89a3      	ldrh	r3, [r4, #12]
 801631e:	07db      	lsls	r3, r3, #31
 8016320:	d506      	bpl.n	8016330 <__swbuf_r+0x64>
 8016322:	2e0a      	cmp	r6, #10
 8016324:	d104      	bne.n	8016330 <__swbuf_r+0x64>
 8016326:	4621      	mov	r1, r4
 8016328:	4628      	mov	r0, r5
 801632a:	f7ff fa35 	bl	8015798 <_fflush_r>
 801632e:	b938      	cbnz	r0, 8016340 <__swbuf_r+0x74>
 8016330:	4638      	mov	r0, r7
 8016332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016334:	4621      	mov	r1, r4
 8016336:	4628      	mov	r0, r5
 8016338:	f000 f806 	bl	8016348 <__swsetup_r>
 801633c:	2800      	cmp	r0, #0
 801633e:	d0d5      	beq.n	80162ec <__swbuf_r+0x20>
 8016340:	f04f 37ff 	mov.w	r7, #4294967295
 8016344:	e7f4      	b.n	8016330 <__swbuf_r+0x64>
	...

08016348 <__swsetup_r>:
 8016348:	b538      	push	{r3, r4, r5, lr}
 801634a:	4b2a      	ldr	r3, [pc, #168]	; (80163f4 <__swsetup_r+0xac>)
 801634c:	4605      	mov	r5, r0
 801634e:	6818      	ldr	r0, [r3, #0]
 8016350:	460c      	mov	r4, r1
 8016352:	b118      	cbz	r0, 801635c <__swsetup_r+0x14>
 8016354:	6a03      	ldr	r3, [r0, #32]
 8016356:	b90b      	cbnz	r3, 801635c <__swsetup_r+0x14>
 8016358:	f7fc fcfa 	bl	8012d50 <__sinit>
 801635c:	89a3      	ldrh	r3, [r4, #12]
 801635e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016362:	0718      	lsls	r0, r3, #28
 8016364:	d422      	bmi.n	80163ac <__swsetup_r+0x64>
 8016366:	06d9      	lsls	r1, r3, #27
 8016368:	d407      	bmi.n	801637a <__swsetup_r+0x32>
 801636a:	2309      	movs	r3, #9
 801636c:	602b      	str	r3, [r5, #0]
 801636e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016372:	81a3      	strh	r3, [r4, #12]
 8016374:	f04f 30ff 	mov.w	r0, #4294967295
 8016378:	e034      	b.n	80163e4 <__swsetup_r+0x9c>
 801637a:	0758      	lsls	r0, r3, #29
 801637c:	d512      	bpl.n	80163a4 <__swsetup_r+0x5c>
 801637e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016380:	b141      	cbz	r1, 8016394 <__swsetup_r+0x4c>
 8016382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016386:	4299      	cmp	r1, r3
 8016388:	d002      	beq.n	8016390 <__swsetup_r+0x48>
 801638a:	4628      	mov	r0, r5
 801638c:	f7fd fc96 	bl	8013cbc <_free_r>
 8016390:	2300      	movs	r3, #0
 8016392:	6363      	str	r3, [r4, #52]	; 0x34
 8016394:	89a3      	ldrh	r3, [r4, #12]
 8016396:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801639a:	81a3      	strh	r3, [r4, #12]
 801639c:	2300      	movs	r3, #0
 801639e:	6063      	str	r3, [r4, #4]
 80163a0:	6923      	ldr	r3, [r4, #16]
 80163a2:	6023      	str	r3, [r4, #0]
 80163a4:	89a3      	ldrh	r3, [r4, #12]
 80163a6:	f043 0308 	orr.w	r3, r3, #8
 80163aa:	81a3      	strh	r3, [r4, #12]
 80163ac:	6923      	ldr	r3, [r4, #16]
 80163ae:	b94b      	cbnz	r3, 80163c4 <__swsetup_r+0x7c>
 80163b0:	89a3      	ldrh	r3, [r4, #12]
 80163b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80163b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163ba:	d003      	beq.n	80163c4 <__swsetup_r+0x7c>
 80163bc:	4621      	mov	r1, r4
 80163be:	4628      	mov	r0, r5
 80163c0:	f000 f884 	bl	80164cc <__smakebuf_r>
 80163c4:	89a0      	ldrh	r0, [r4, #12]
 80163c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80163ca:	f010 0301 	ands.w	r3, r0, #1
 80163ce:	d00a      	beq.n	80163e6 <__swsetup_r+0x9e>
 80163d0:	2300      	movs	r3, #0
 80163d2:	60a3      	str	r3, [r4, #8]
 80163d4:	6963      	ldr	r3, [r4, #20]
 80163d6:	425b      	negs	r3, r3
 80163d8:	61a3      	str	r3, [r4, #24]
 80163da:	6923      	ldr	r3, [r4, #16]
 80163dc:	b943      	cbnz	r3, 80163f0 <__swsetup_r+0xa8>
 80163de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80163e2:	d1c4      	bne.n	801636e <__swsetup_r+0x26>
 80163e4:	bd38      	pop	{r3, r4, r5, pc}
 80163e6:	0781      	lsls	r1, r0, #30
 80163e8:	bf58      	it	pl
 80163ea:	6963      	ldrpl	r3, [r4, #20]
 80163ec:	60a3      	str	r3, [r4, #8]
 80163ee:	e7f4      	b.n	80163da <__swsetup_r+0x92>
 80163f0:	2000      	movs	r0, #0
 80163f2:	e7f7      	b.n	80163e4 <__swsetup_r+0x9c>
 80163f4:	20000164 	.word	0x20000164

080163f8 <_raise_r>:
 80163f8:	291f      	cmp	r1, #31
 80163fa:	b538      	push	{r3, r4, r5, lr}
 80163fc:	4604      	mov	r4, r0
 80163fe:	460d      	mov	r5, r1
 8016400:	d904      	bls.n	801640c <_raise_r+0x14>
 8016402:	2316      	movs	r3, #22
 8016404:	6003      	str	r3, [r0, #0]
 8016406:	f04f 30ff 	mov.w	r0, #4294967295
 801640a:	bd38      	pop	{r3, r4, r5, pc}
 801640c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801640e:	b112      	cbz	r2, 8016416 <_raise_r+0x1e>
 8016410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016414:	b94b      	cbnz	r3, 801642a <_raise_r+0x32>
 8016416:	4620      	mov	r0, r4
 8016418:	f000 f830 	bl	801647c <_getpid_r>
 801641c:	462a      	mov	r2, r5
 801641e:	4601      	mov	r1, r0
 8016420:	4620      	mov	r0, r4
 8016422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016426:	f000 b817 	b.w	8016458 <_kill_r>
 801642a:	2b01      	cmp	r3, #1
 801642c:	d00a      	beq.n	8016444 <_raise_r+0x4c>
 801642e:	1c59      	adds	r1, r3, #1
 8016430:	d103      	bne.n	801643a <_raise_r+0x42>
 8016432:	2316      	movs	r3, #22
 8016434:	6003      	str	r3, [r0, #0]
 8016436:	2001      	movs	r0, #1
 8016438:	e7e7      	b.n	801640a <_raise_r+0x12>
 801643a:	2400      	movs	r4, #0
 801643c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016440:	4628      	mov	r0, r5
 8016442:	4798      	blx	r3
 8016444:	2000      	movs	r0, #0
 8016446:	e7e0      	b.n	801640a <_raise_r+0x12>

08016448 <raise>:
 8016448:	4b02      	ldr	r3, [pc, #8]	; (8016454 <raise+0xc>)
 801644a:	4601      	mov	r1, r0
 801644c:	6818      	ldr	r0, [r3, #0]
 801644e:	f7ff bfd3 	b.w	80163f8 <_raise_r>
 8016452:	bf00      	nop
 8016454:	20000164 	.word	0x20000164

08016458 <_kill_r>:
 8016458:	b538      	push	{r3, r4, r5, lr}
 801645a:	4d07      	ldr	r5, [pc, #28]	; (8016478 <_kill_r+0x20>)
 801645c:	2300      	movs	r3, #0
 801645e:	4604      	mov	r4, r0
 8016460:	4608      	mov	r0, r1
 8016462:	4611      	mov	r1, r2
 8016464:	602b      	str	r3, [r5, #0]
 8016466:	f7ed fa99 	bl	800399c <_kill>
 801646a:	1c43      	adds	r3, r0, #1
 801646c:	d102      	bne.n	8016474 <_kill_r+0x1c>
 801646e:	682b      	ldr	r3, [r5, #0]
 8016470:	b103      	cbz	r3, 8016474 <_kill_r+0x1c>
 8016472:	6023      	str	r3, [r4, #0]
 8016474:	bd38      	pop	{r3, r4, r5, pc}
 8016476:	bf00      	nop
 8016478:	20003eac 	.word	0x20003eac

0801647c <_getpid_r>:
 801647c:	f7ed ba86 	b.w	800398c <_getpid>

08016480 <__swhatbuf_r>:
 8016480:	b570      	push	{r4, r5, r6, lr}
 8016482:	460c      	mov	r4, r1
 8016484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016488:	2900      	cmp	r1, #0
 801648a:	b096      	sub	sp, #88	; 0x58
 801648c:	4615      	mov	r5, r2
 801648e:	461e      	mov	r6, r3
 8016490:	da0d      	bge.n	80164ae <__swhatbuf_r+0x2e>
 8016492:	89a3      	ldrh	r3, [r4, #12]
 8016494:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016498:	f04f 0100 	mov.w	r1, #0
 801649c:	bf0c      	ite	eq
 801649e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80164a2:	2340      	movne	r3, #64	; 0x40
 80164a4:	2000      	movs	r0, #0
 80164a6:	6031      	str	r1, [r6, #0]
 80164a8:	602b      	str	r3, [r5, #0]
 80164aa:	b016      	add	sp, #88	; 0x58
 80164ac:	bd70      	pop	{r4, r5, r6, pc}
 80164ae:	466a      	mov	r2, sp
 80164b0:	f000 f848 	bl	8016544 <_fstat_r>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	dbec      	blt.n	8016492 <__swhatbuf_r+0x12>
 80164b8:	9901      	ldr	r1, [sp, #4]
 80164ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80164be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80164c2:	4259      	negs	r1, r3
 80164c4:	4159      	adcs	r1, r3
 80164c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164ca:	e7eb      	b.n	80164a4 <__swhatbuf_r+0x24>

080164cc <__smakebuf_r>:
 80164cc:	898b      	ldrh	r3, [r1, #12]
 80164ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80164d0:	079d      	lsls	r5, r3, #30
 80164d2:	4606      	mov	r6, r0
 80164d4:	460c      	mov	r4, r1
 80164d6:	d507      	bpl.n	80164e8 <__smakebuf_r+0x1c>
 80164d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80164dc:	6023      	str	r3, [r4, #0]
 80164de:	6123      	str	r3, [r4, #16]
 80164e0:	2301      	movs	r3, #1
 80164e2:	6163      	str	r3, [r4, #20]
 80164e4:	b002      	add	sp, #8
 80164e6:	bd70      	pop	{r4, r5, r6, pc}
 80164e8:	ab01      	add	r3, sp, #4
 80164ea:	466a      	mov	r2, sp
 80164ec:	f7ff ffc8 	bl	8016480 <__swhatbuf_r>
 80164f0:	9900      	ldr	r1, [sp, #0]
 80164f2:	4605      	mov	r5, r0
 80164f4:	4630      	mov	r0, r6
 80164f6:	f7fb fcaf 	bl	8011e58 <_malloc_r>
 80164fa:	b948      	cbnz	r0, 8016510 <__smakebuf_r+0x44>
 80164fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016500:	059a      	lsls	r2, r3, #22
 8016502:	d4ef      	bmi.n	80164e4 <__smakebuf_r+0x18>
 8016504:	f023 0303 	bic.w	r3, r3, #3
 8016508:	f043 0302 	orr.w	r3, r3, #2
 801650c:	81a3      	strh	r3, [r4, #12]
 801650e:	e7e3      	b.n	80164d8 <__smakebuf_r+0xc>
 8016510:	89a3      	ldrh	r3, [r4, #12]
 8016512:	6020      	str	r0, [r4, #0]
 8016514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016518:	81a3      	strh	r3, [r4, #12]
 801651a:	9b00      	ldr	r3, [sp, #0]
 801651c:	6163      	str	r3, [r4, #20]
 801651e:	9b01      	ldr	r3, [sp, #4]
 8016520:	6120      	str	r0, [r4, #16]
 8016522:	b15b      	cbz	r3, 801653c <__smakebuf_r+0x70>
 8016524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016528:	4630      	mov	r0, r6
 801652a:	f000 f81d 	bl	8016568 <_isatty_r>
 801652e:	b128      	cbz	r0, 801653c <__smakebuf_r+0x70>
 8016530:	89a3      	ldrh	r3, [r4, #12]
 8016532:	f023 0303 	bic.w	r3, r3, #3
 8016536:	f043 0301 	orr.w	r3, r3, #1
 801653a:	81a3      	strh	r3, [r4, #12]
 801653c:	89a3      	ldrh	r3, [r4, #12]
 801653e:	431d      	orrs	r5, r3
 8016540:	81a5      	strh	r5, [r4, #12]
 8016542:	e7cf      	b.n	80164e4 <__smakebuf_r+0x18>

08016544 <_fstat_r>:
 8016544:	b538      	push	{r3, r4, r5, lr}
 8016546:	4d07      	ldr	r5, [pc, #28]	; (8016564 <_fstat_r+0x20>)
 8016548:	2300      	movs	r3, #0
 801654a:	4604      	mov	r4, r0
 801654c:	4608      	mov	r0, r1
 801654e:	4611      	mov	r1, r2
 8016550:	602b      	str	r3, [r5, #0]
 8016552:	f7ed fa82 	bl	8003a5a <_fstat>
 8016556:	1c43      	adds	r3, r0, #1
 8016558:	d102      	bne.n	8016560 <_fstat_r+0x1c>
 801655a:	682b      	ldr	r3, [r5, #0]
 801655c:	b103      	cbz	r3, 8016560 <_fstat_r+0x1c>
 801655e:	6023      	str	r3, [r4, #0]
 8016560:	bd38      	pop	{r3, r4, r5, pc}
 8016562:	bf00      	nop
 8016564:	20003eac 	.word	0x20003eac

08016568 <_isatty_r>:
 8016568:	b538      	push	{r3, r4, r5, lr}
 801656a:	4d06      	ldr	r5, [pc, #24]	; (8016584 <_isatty_r+0x1c>)
 801656c:	2300      	movs	r3, #0
 801656e:	4604      	mov	r4, r0
 8016570:	4608      	mov	r0, r1
 8016572:	602b      	str	r3, [r5, #0]
 8016574:	f7ed fa81 	bl	8003a7a <_isatty>
 8016578:	1c43      	adds	r3, r0, #1
 801657a:	d102      	bne.n	8016582 <_isatty_r+0x1a>
 801657c:	682b      	ldr	r3, [r5, #0]
 801657e:	b103      	cbz	r3, 8016582 <_isatty_r+0x1a>
 8016580:	6023      	str	r3, [r4, #0]
 8016582:	bd38      	pop	{r3, r4, r5, pc}
 8016584:	20003eac 	.word	0x20003eac

08016588 <_init>:
 8016588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801658a:	bf00      	nop
 801658c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801658e:	bc08      	pop	{r3}
 8016590:	469e      	mov	lr, r3
 8016592:	4770      	bx	lr

08016594 <_fini>:
 8016594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016596:	bf00      	nop
 8016598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801659a:	bc08      	pop	{r3}
 801659c:	469e      	mov	lr, r3
 801659e:	4770      	bx	lr
