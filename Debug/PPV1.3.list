
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  08013538  08013538  00023538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c28  08013c28  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  08013c28  08013c28  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013c28  08013c28  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c28  08013c28  00023c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013c2c  08013c2c  00023c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08013c30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038b0  200002d4  08013f04  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20003b84  08013f04  00033b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e2a0  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052b1  00000000  00000000  0004e5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  00053898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012df  00000000  00000000  000551b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e316  00000000  00000000  0005648f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022bfc  00000000  00000000  000847a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fad2e  00000000  00000000  000a73a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a0c  00000000  00000000  001a20d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001a9adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013520 	.word	0x08013520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	08013520 	.word	0x08013520

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	213d      	movs	r1, #61	; 0x3d
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f003 fab9 	bl	8004290 <HAL_I2C_Mem_Read>
 8000d1e:	4603      	mov	r3, r0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LIS2MDL_WriteReg>:
HAL_StatusTypeDef	LIS2MDL_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LIS2MDL_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	460b      	mov	r3, r1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	213d      	movs	r1, #61	; 0x3d
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f003 f98b 	bl	8004068 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	21d7      	movs	r1, #215	; 0xd7
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f003 fa85 	bl	8004290 <HAL_I2C_Mem_Read>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LSM6DSO_ReadRegs>:

HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21d7      	movs	r1, #215	; 0xd7
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f003 fa67 	bl	8004290 <HAL_I2C_Mem_Read>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DSO_WriteReg>:

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21d7      	movs	r1, #215	; 0xd7
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f003 f939 	bl	8004068 <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t inBuff[64];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
		//while(1){
		//CDC_Transmit_FS((uint8_t *) FIFOFULL, strlen(FIFOFULL));
		//HAL_Delay(1000);
		//}
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f002 facb 	bl	80033b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f81e 	bl	8000e60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e24:	f000 f86d 	bl	8000f02 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e28:	f000 f97e 	bl	8001128 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2c:	f000 f956 	bl	80010dc <MX_DMA_Init>
  MX_I2C3_Init();
 8000e30:	f000 f896 	bl	8000f60 <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000e34:	f000 f930 	bl	8001098 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000e38:	f00a ff2a 	bl	800bc90 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000e3c:	f00d f990 	bl	800e160 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e40:	f000 f8ce 	bl	8000fe0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* Search for connection via USB */
  /* Once Received proceed to init and data collection */
  // Initialise Sensor
  pawprint_init(&hi2c3);
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <main+0x44>)
 8000e46:	f000 f9ee 	bl	8001226 <pawprint_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  pawprint_readFIFO(&hi2c3);
 8000e4a:	4804      	ldr	r0, [pc, #16]	; (8000e5c <main+0x44>)
 8000e4c:	f000 fc04 	bl	8001658 <pawprint_readFIFO>
	  HAL_Delay(1000);
 8000e50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e54:	f002 fb24 	bl	80034a0 <HAL_Delay>
	  pawprint_readFIFO(&hi2c3);
 8000e58:	e7f7      	b.n	8000e4a <main+0x32>
 8000e5a:	bf00      	nop
 8000e5c:	200002f0 	.word	0x200002f0

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b096      	sub	sp, #88	; 0x58
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2244      	movs	r2, #68	; 0x44
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f00e ff1f 	bl	800fcb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e86:	f005 f821 	bl	8005ecc <HAL_PWREx_ControlVoltageScaling>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e90:	f000 f9c4 	bl	800121c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e94:	2309      	movs	r3, #9
 8000e96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f005 f868 	bl	8005f98 <HAL_RCC_OscConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ece:	f000 f9a5 	bl	800121c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fc30 	bl	8006750 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ef6:	f000 f991 	bl	800121c <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3758      	adds	r7, #88	; 0x58
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b0a2      	sub	sp, #136	; 0x88
 8000f06:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2288      	movs	r2, #136	; 0x88
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f00e fecf 	bl	800fcb2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1;
 8000f14:	f44f 2302 	mov.w	r3, #532480	; 0x82000
 8000f18:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8000f20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f24:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000f26:	2303      	movs	r3, #3
 8000f28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f2e:	2308      	movs	r3, #8
 8000f30:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f32:	2307      	movs	r3, #7
 8000f34:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f36:	2302      	movs	r3, #2
 8000f38:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000f3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f42:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fe26 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000f52:	f000 f963 	bl	800121c <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3788      	adds	r7, #136	; 0x88
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <MX_I2C3_Init+0x78>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <MX_I2C3_Init+0x7c>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000f9c:	f002 ffc8 	bl	8003f30 <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fa6:	f000 f939 	bl	800121c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000fae:	f003 fd41 	bl	8004a34 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fb8:	f000 f930 	bl	800121c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_I2C3_Init+0x74>)
 8000fc0:	f003 fd83 	bl	8004aca <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 f927 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200002f0 	.word	0x200002f0
 8000fd8:	40005c00 	.word	0x40005c00
 8000fdc:	20303e5d 	.word	0x20303e5d

08000fe0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <MX_RTC_Init+0xb0>)
 8000ffa:	4a26      	ldr	r2, [pc, #152]	; (8001094 <MX_RTC_Init+0xb4>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <MX_RTC_Init+0xb0>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_RTC_Init+0xb0>)
 8001006:	227f      	movs	r2, #127	; 0x7f
 8001008:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_RTC_Init+0xb0>)
 800100c:	22ff      	movs	r2, #255	; 0xff
 800100e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_RTC_Init+0xb0>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_RTC_Init+0xb0>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_RTC_Init+0xb0>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_RTC_Init+0xb0>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001028:	4819      	ldr	r0, [pc, #100]	; (8001090 <MX_RTC_Init+0xb0>)
 800102a:	f007 f8cf 	bl	80081cc <HAL_RTC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001034:	f000 f8f2 	bl	800121c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	4619      	mov	r1, r3
 8001052:	480f      	ldr	r0, [pc, #60]	; (8001090 <MX_RTC_Init+0xb0>)
 8001054:	f007 f942 	bl	80082dc <HAL_RTC_SetTime>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800105e:	f000 f8dd 	bl	800121c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001062:	2301      	movs	r3, #1
 8001064:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001066:	2301      	movs	r3, #1
 8001068:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_RTC_Init+0xb0>)
 800107a:	f007 f9cc 	bl	8008416 <HAL_RTC_SetDate>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001084:	f000 f8ca 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000344 	.word	0x20000344
 8001094:	40002800 	.word	0x40002800

08001098 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <MX_SDMMC1_SD_Init+0x3c>)
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <MX_SDMMC1_SD_Init+0x40>)
 80010a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_SDMMC1_SD_Init+0x3c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_SDMMC1_SD_Init+0x3c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_SDMMC1_SD_Init+0x3c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_SDMMC1_SD_Init+0x3c>)
 80010b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ba:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <MX_SDMMC1_SD_Init+0x3c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <MX_SDMMC1_SD_Init+0x3c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000368 	.word	0x20000368
 80010d8:	40012800 	.word	0x40012800

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_DMA_Init+0x48>)
 80010e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <MX_DMA_Init+0x48>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6493      	str	r3, [r2, #72]	; 0x48
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_DMA_Init+0x48>)
 80010f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	203b      	movs	r0, #59	; 0x3b
 8001100:	f002 facd 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001104:	203b      	movs	r0, #59	; 0x3b
 8001106:	f002 fae6 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	203c      	movs	r0, #60	; 0x3c
 8001110:	f002 fac5 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001114:	203c      	movs	r0, #60	; 0x3c
 8001116:	f002 fade 	bl	80036d6 <HAL_NVIC_EnableIRQ>

}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <MX_GPIO_Init+0xec>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a34      	ldr	r2, [pc, #208]	; (8001214 <MX_GPIO_Init+0xec>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <MX_GPIO_Init+0xec>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <MX_GPIO_Init+0xec>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a2e      	ldr	r2, [pc, #184]	; (8001214 <MX_GPIO_Init+0xec>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <MX_GPIO_Init+0xec>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <MX_GPIO_Init+0xec>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a28      	ldr	r2, [pc, #160]	; (8001214 <MX_GPIO_Init+0xec>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <MX_GPIO_Init+0xec>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <MX_GPIO_Init+0xec>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a22      	ldr	r2, [pc, #136]	; (8001214 <MX_GPIO_Init+0xec>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_GPIO_Init+0xec>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 800119e:	2304      	movs	r3, #4
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4819      	ldr	r0, [pc, #100]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011b4:	f002 fce2 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_INT_Pin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 80011b8:	2308      	movs	r3, #8
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011ce:	f002 fcd5 	bl	8003b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_Detect_Pin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <MX_GPIO_Init+0xf0>)
 80011e6:	f002 fcc9 	bl	8003b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2008      	movs	r0, #8
 80011f0:	f002 fa55 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011f4:	2008      	movs	r0, #8
 80011f6:	f002 fa6e 	bl	80036d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2009      	movs	r0, #9
 8001200:	f002 fa4d 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001204:	2009      	movs	r0, #9
 8001206:	f002 fa66 	bl	80036d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	48000800 	.word	0x48000800

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	e7fe      	b.n	8001224 <Error_Handler+0x8>

08001226 <pawprint_init>:
static st_fifo_out_slot acc_slot[126];
static st_fifo_out_slot gyr_slot[126];

/* Initialisation */

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]

	//Create required variables
	uint8_t LSM6DSO_WHO,MasterTemp, RegDat, LIS2MDL_WHO, STTS_PROD, STTS_MAN;

	// Boot Delay
	HAL_Delay(20);
 800122e:	2014      	movs	r0, #20
 8001230:	f002 f936 	bl	80034a0 <HAL_Delay>
	/* Reset Sensor to defaults*/
	RegDat = 0x00;
 8001234:	2300      	movs	r3, #0
 8001236:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Ensure accessing correct registers
 8001238:	f107 030d 	add.w	r3, r7, #13
 800123c:	461a      	mov	r2, r3
 800123e:	2101      	movs	r1, #1
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fdc3 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x05;
 8001246:	2305      	movs	r3, #5
 8001248:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat); // Software reset
 800124a:	f107 030d 	add.w	r3, r7, #13
 800124e:	461a      	mov	r2, r3
 8001250:	2112      	movs	r1, #18
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fdba 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);
 8001258:	2064      	movs	r0, #100	; 0x64
 800125a:	f002 f921 	bl	80034a0 <HAL_Delay>

	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &LSM6DSO_WHO);
 800125e:	f107 030f 	add.w	r3, r7, #15
 8001262:	461a      	mov	r2, r3
 8001264:	210f      	movs	r1, #15
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fd78 	bl	8000d5c <LSM6DSO_ReadReg>

	/****** Enable PassThrough ******/
	RegDat = 0x40;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 8001270:	f107 030d 	add.w	r3, r7, #13
 8001274:	461a      	mov	r2, r3
 8001276:	2101      	movs	r1, #1
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fda7 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp);// Save Master Config to MasterTemp
 800127e:	f107 030e 	add.w	r3, r7, #14
 8001282:	461a      	mov	r2, r3
 8001284:	2114      	movs	r1, #20
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fd68 	bl	8000d5c <LSM6DSO_ReadReg>
	MasterTemp |= 0x20;
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	b2db      	uxtb	r3, r3
 8001294:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 1 - sensor hub signal disable
 8001296:	f107 030e 	add.w	r3, r7, #14
 800129a:	461a      	mov	r2, r3
 800129c:	2114      	movs	r1, #20
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fd94 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(5);																							// Delay
 80012a4:	2005      	movs	r0, #5
 80012a6:	f002 f8fb 	bl	80034a0 <HAL_Delay>
	MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f023 0304 	bic.w	r3, r3, #4
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Master On bit to 0 to enable
 80012ba:	f107 030e 	add.w	r3, r7, #14
 80012be:	461a      	mov	r2, r3
 80012c0:	2114      	movs	r1, #20
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fd82 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 0 to restore trigger
 80012d2:	f107 030e 	add.w	r3, r7, #14
 80012d6:	461a      	mov	r2, r3
 80012d8:	2114      	movs	r1, #20
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fd76 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 80012e0:	7bbb      	ldrb	r3, [r7, #14]
 80012e2:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Set Pullup to 0 to disable internal pullup
 80012ea:	f107 030e 	add.w	r3, r7, #14
 80012ee:	461a      	mov	r2, r3
 80012f0:	2114      	movs	r1, #20
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fd6a 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = 0x10;
 80012f8:	2310      	movs	r3, #16
 80012fa:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 80012fc:	f107 030e 	add.w	r3, r7, #14
 8001300:	461a      	mov	r2, r3
 8001302:	2114      	movs	r1, #20
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fd61 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800130a:	2300      	movs	r3, #0
 800130c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 800130e:	f107 030d 	add.w	r3, r7, #13
 8001312:	461a      	mov	r2, r3
 8001314:	2101      	movs	r1, #1
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fd58 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** LIS2MDL Configuration ***/

	LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &LIS2MDL_WHO);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	461a      	mov	r2, r3
 8001322:	214f      	movs	r1, #79	; 0x4f
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fce5 	bl	8000cf4 <LIS2MDL_ReadReg>

	while( LIS2MDL_WHO != LIS2MDL_ID)
 800132a:	e001      	b.n	8001330 <pawprint_init+0x10a>

	/* Reset sensor to defaults */
	RegDat = 0x23;
 800132c:	2323      	movs	r3, #35	; 0x23
 800132e:	737b      	strb	r3, [r7, #13]
	while( LIS2MDL_WHO != LIS2MDL_ID)
 8001330:	7b3b      	ldrb	r3, [r7, #12]
 8001332:	2b40      	cmp	r3, #64	; 0x40
 8001334:	d1fa      	bne.n	800132c <pawprint_init+0x106>
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //Reset registers by soft rst of cfg A to 1
 8001336:	f107 030d 	add.w	r3, r7, #13
 800133a:	461a      	mov	r2, r3
 800133c:	2160      	movs	r1, #96	; 0x60
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fcf2 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(5);
 8001344:	2005      	movs	r0, #5
 8001346:	f002 f8ab 	bl	80034a0 <HAL_Delay>
	RegDat = 0x43;
 800134a:	2343      	movs	r3, #67	; 0x43
 800134c:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //ReBOOT of cfg A to 1
 800134e:	f107 030d 	add.w	r3, r7, #13
 8001352:	461a      	mov	r2, r3
 8001354:	2160      	movs	r1, #96	; 0x60
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fce6 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(20);
 800135c:	2014      	movs	r0, #20
 800135e:	f002 f89f 	bl	80034a0 <HAL_Delay>

	/* Setup */
	RegDat = 0x10;
 8001362:	2310      	movs	r3, #16
 8001364:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_C, &RegDat);// bdu set 1
 8001366:	f107 030d 	add.w	r3, r7, #13
 800136a:	461a      	mov	r2, r3
 800136c:	2162      	movs	r1, #98	; 0x62
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fcda 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x8C;
 8001374:	238c      	movs	r3, #140	; 0x8c
 8001376:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat);// offset temp on, operating mode Default, & data rate  100Hz
 8001378:	f107 030d 	add.w	r3, r7, #13
 800137c:	461a      	mov	r2, r3
 800137e:	2160      	movs	r1, #96	; 0x60
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff fcd1 	bl	8000d28 <LIS2MDL_WriteReg>

	/**** Insert Calibration Code here - Requires Moving and Input trigger via USB ******/

	/*** STTS Setup ***/

	STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &STTS_PROD); // ProdID is 00 for this version of therm - therefore also use manID
 8001386:	f107 030b 	add.w	r3, r7, #11
 800138a:	461a      	mov	r2, r3
 800138c:	21fd      	movs	r1, #253	; 0xfd
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f001 fef6 	bl	8003180 <STTS751_ReadReg>
	STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &STTS_MAN);
 8001394:	f107 030a 	add.w	r3, r7, #10
 8001398:	461a      	mov	r2, r3
 800139a:	21fe      	movs	r1, #254	; 0xfe
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f001 feef 	bl	8003180 <STTS751_ReadReg>

	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80013a2:	e001      	b.n	80013a8 <pawprint_init+0x182>

	RegDat = 0x04;
 80013a4:	2304      	movs	r3, #4
 80013a6:	737b      	strb	r3, [r7, #13]
	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <pawprint_init+0x18e>
 80013ae:	7abb      	ldrb	r3, [r7, #10]
 80013b0:	2b53      	cmp	r3, #83	; 0x53
 80013b2:	d1f7      	bne.n	80013a4 <pawprint_init+0x17e>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONV_RATE, &RegDat); // 1Hz
 80013b4:	f107 030d 	add.w	r3, r7, #13
 80013b8:	461a      	mov	r2, r3
 80013ba:	2104      	movs	r1, #4
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fcb3 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x4B;
 80013c2:	234b      	movs	r3, #75	; 0x4b
 80013c4:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_H, &RegDat); // Thermal Limit - default is 85 lowered to 75, low limit at freezing
 80013c6:	f107 030d 	add.w	r3, r7, #13
 80013ca:	461a      	mov	r2, r3
 80013cc:	2105      	movs	r1, #5
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fcaa 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_THERM_LIMIT, &RegDat); //Therm limit for THERM pin - not used in this design but set regardless for consistency
 80013d4:	f107 030d 	add.w	r3, r7, #13
 80013d8:	461a      	mov	r2, r3
 80013da:	2120      	movs	r1, #32
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fca3 	bl	8000d28 <LIS2MDL_WriteReg>

	// No reset function - for safety ensure all thermal registers are set and not assumed to be correct
	RegDat = 0x00;
 80013e2:	2300      	movs	r3, #0
 80013e4:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_L, &RegDat);
 80013e6:	f107 030d 	add.w	r3, r7, #13
 80013ea:	461a      	mov	r2, r3
 80013ec:	2106      	movs	r1, #6
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fc9a 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_H, &RegDat);
 80013f4:	f107 030d 	add.w	r3, r7, #13
 80013f8:	461a      	mov	r2, r3
 80013fa:	2107      	movs	r1, #7
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fc93 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_L, &RegDat);
 8001402:	f107 030d 	add.w	r3, r7, #13
 8001406:	461a      	mov	r2, r3
 8001408:	2108      	movs	r1, #8
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fc8c 	bl	8000d28 <LIS2MDL_WriteReg>

	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONFIG, &RegDat);// Mask1 enabled - event pin active (b7), Run/standby mode (b6)
 8001410:	f107 030d 	add.w	r3, r7, #13
 8001414:	461a      	mov	r2, r3
 8001416:	2103      	movs	r1, #3
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fc85 	bl	8000d28 <LIS2MDL_WriteReg>

	/*** Disable Pass Through ***/
	RegDat = 0x40;
 800141e:	2340      	movs	r3, #64	; 0x40
 8001420:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 8001422:	f107 030d 	add.w	r3, r7, #13
 8001426:	461a      	mov	r2, r3
 8001428:	2101      	movs	r1, #1
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fcce 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);		// delay 100
 8001430:	2064      	movs	r0, #100	; 0x64
 8001432:	f002 f835 	bl	80034a0 <HAL_Delay>
	RegDat = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);	// Disable pass through
 800143a:	f107 030d 	add.w	r3, r7, #13
 800143e:	461a      	mov	r2, r3
 8001440:	2114      	movs	r1, #20
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fcc2 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);	// Disable SHUB access
 8001448:	f107 030d 	add.w	r3, r7, #13
 800144c:	461a      	mov	r2, r3
 800144e:	2101      	movs	r1, #1
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fcbb 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Configure LSM6DSO ***/
	RegDat = 0xE2;
 8001456:	23e2      	movs	r3, #226	; 0xe2
 8001458:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL9_XL , &RegDat); // Disable I3C MIPI
 800145a:	f107 030d 	add.w	r3, r7, #13
 800145e:	461a      	mov	r2, r3
 8001460:	2118      	movs	r1, #24
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fcb2 	bl	8000dcc <LSM6DSO_WriteReg>

	RegDat = 0x00;
 8001468:	2300      	movs	r3, #0
 800146a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL , &RegDat); // Ensure Acc and Gyro Powered down
 800146c:	f107 030d 	add.w	r3, r7, #13
 8001470:	461a      	mov	r2, r3
 8001472:	2110      	movs	r1, #16
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fca9 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G , &RegDat);
 800147a:	f107 030d 	add.w	r3, r7, #13
 800147e:	461a      	mov	r2, r3
 8001480:	2111      	movs	r1, #17
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fca2 	bl	8000dcc <LSM6DSO_WriteReg>

	/**** FIFO set up ****/
	RegDat = 0x80;
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL1 , &RegDat);// Set Watermark level to 256 = 25% 512
 800148c:	f107 030d 	add.w	r3, r7, #13
 8001490:	461a      	mov	r2, r3
 8001492:	2107      	movs	r1, #7
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fc99 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800149a:	2300      	movs	r3, #0
 800149c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL2 , &RegDat);
 800149e:	f107 030d 	add.w	r3, r7, #13
 80014a2:	461a      	mov	r2, r3
 80014a4:	2108      	movs	r1, #8
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fc90 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x44;
 80014ac:	2344      	movs	r3, #68	; 0x44
 80014ae:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL3 , &RegDat); // Set BDR for XL and Gyro (104Hz both)
 80014b0:	f107 030d 	add.w	r3, r7, #13
 80014b4:	461a      	mov	r2, r3
 80014b6:	2109      	movs	r1, #9
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff fc87 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x56;
 80014be:	2356      	movs	r3, #86	; 0x56
 80014c0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL4 , &RegDat);// Set to continuous mode & batch Temp and Timestamp
 80014c2:	f107 030d 	add.w	r3, r7, #13
 80014c6:	461a      	mov	r2, r3
 80014c8:	210a      	movs	r1, #10
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fc7e 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x41;
 80014d0:	2341      	movs	r3, #65	; 0x41
 80014d2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_TAP_CFG0 , &RegDat); // Latch interrupt & clear on read
 80014d4:	f107 030d 	add.w	r3, r7, #13
 80014d8:	461a      	mov	r2, r3
 80014da:	2156      	movs	r1, #86	; 0x56
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fc75 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x38;
 80014e2:	2338      	movs	r3, #56	; 0x38
 80014e4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_INT1_CTRL , &RegDat); // FIFO int on INT1
 80014e6:	f107 030d 	add.w	r3, r7, #13
 80014ea:	461a      	mov	r2, r3
 80014ec:	210d      	movs	r1, #13
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fc6c 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Peripheral address / subaddress config ***/
	RegDat = 0x40;
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB access
 80014f8:	f107 030d 	add.w	r3, r7, #13
 80014fc:	461a      	mov	r2, r3
 80014fe:	2101      	movs	r1, #1
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fc63 	bl	8000dcc <LSM6DSO_WriteReg>

	// LIS2MDL Peripheral enable
	RegDat = LIS2MDL_I2C_ADDR;
 8001506:	233d      	movs	r3, #61	; 0x3d
 8001508:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_ADD, &RegDat);// Set address slv0
 800150a:	f107 030d 	add.w	r3, r7, #13
 800150e:	461a      	mov	r2, r3
 8001510:	2115      	movs	r1, #21
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff fc5a 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = LIS2MDL_REG_OUTX_L;
 8001518:	2368      	movs	r3, #104	; 0x68
 800151a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_SUBADD, &RegDat);// Set start register for data output
 800151c:	f107 030d 	add.w	r3, r7, #13
 8001520:	461a      	mov	r2, r3
 8001522:	2116      	movs	r1, #22
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fc51 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0E;
 800152a:	230e      	movs	r3, #14
 800152c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_CONFIG, &RegDat);// Set bytes to read
 800152e:	f107 030d 	add.w	r3, r7, #13
 8001532:	461a      	mov	r2, r3
 8001534:	2117      	movs	r1, #23
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fc48 	bl	8000dcc <LSM6DSO_WriteReg>

	// STTS751 Peripheral enable
	RegDat = STTS751_I2C_ADDR;
 800153c:	2372      	movs	r3, #114	; 0x72
 800153e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_ADD, &RegDat);// Set address slv1
 8001540:	f107 030d 	add.w	r3, r7, #13
 8001544:	461a      	mov	r2, r3
 8001546:	2118      	movs	r1, #24
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fc3f 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = STTS751_REG_TEMP_H;
 800154e:	2300      	movs	r3, #0
 8001550:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_SUBADD, &RegDat);// Set start register for data output
 8001552:	f107 030d 	add.w	r3, r7, #13
 8001556:	461a      	mov	r2, r3
 8001558:	2119      	movs	r1, #25
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fc36 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x0B;
 8001560:	230b      	movs	r3, #11
 8001562:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_CONFIG, &RegDat);// Set bytes to read - status between L and H registers so need to read 3
 8001564:	f107 030d 	add.w	r3, r7, #13
 8001568:	461a      	mov	r2, r3
 800156a:	211a      	movs	r1, #26
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fc2d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 8001572:	2300      	movs	r3, #0
 8001574:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Disable SHUB access
 8001576:	f107 030d 	add.w	r3, r7, #13
 800157a:	461a      	mov	r2, r3
 800157c:	2101      	movs	r1, #1
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fc24 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Configure Xl and Gyro */
	RegDat = 0x44;
 8001584:	2344      	movs	r3, #68	; 0x44
 8001586:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat);// Enable block update and auto increment registers
 8001588:	f107 030d 	add.w	r3, r7, #13
 800158c:	461a      	mov	r2, r3
 800158e:	2112      	movs	r1, #18
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fc1b 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x28;
 8001596:	2328      	movs	r3, #40	; 0x28
 8001598:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL4_C, &RegDat);	// Int 1 and mask DRDY until Filter settles
 800159a:	f107 030d 	add.w	r3, r7, #13
 800159e:	461a      	mov	r2, r3
 80015a0:	2113      	movs	r1, #19
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fc12 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 80015a8:	2310      	movs	r3, #16
 80015aa:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL6_C, &RegDat);// XL High performance disabled
 80015ac:	f107 030d 	add.w	r3, r7, #13
 80015b0:	461a      	mov	r2, r3
 80015b2:	2115      	movs	r1, #21
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fc09 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x80;
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL7_G, &RegDat);// Gyro High performance disabled
 80015be:	f107 030d 	add.w	r3, r7, #13
 80015c2:	461a      	mov	r2, r3
 80015c4:	2116      	movs	r1, #22
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fc00 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x20;
 80015cc:	2320      	movs	r3, #32
 80015ce:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL10_C, &RegDat);// enable timestamps
 80015d0:	f107 030d 	add.w	r3, r7, #13
 80015d4:	461a      	mov	r2, r3
 80015d6:	2119      	movs	r1, #25
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fbf7 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80015de:	2340      	movs	r3, #64	; 0x40
 80015e0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL, &RegDat);//Set acc scale and sample rate  - ctrl 1 xl
 80015e2:	f107 030d 	add.w	r3, r7, #13
 80015e6:	461a      	mov	r2, r3
 80015e8:	2110      	movs	r1, #16
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fbee 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G, &RegDat);// Gyro scale and sample rate - ctrl 2 g
 80015f4:	f107 030d 	add.w	r3, r7, #13
 80015f8:	461a      	mov	r2, r3
 80015fa:	2111      	movs	r1, #17
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fbe5 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Enable I2C Master to begin Data collection */
	RegDat = 0x40;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB Reg Access
 8001606:	f107 030d 	add.w	r3, r7, #13
 800160a:	461a      	mov	r2, r3
 800160c:	2101      	movs	r1, #1
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fbdc 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x09;
 8001614:	2309      	movs	r3, #9
 8001616:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable pullups & accel trigger drdy & number external sensors
 8001618:	f107 030d 	add.w	r3, r7, #13
 800161c:	461a      	mov	r2, r3
 800161e:	2114      	movs	r1, #20
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fbd3 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = (RegDat ^ 0x04);
 8001626:	7b7b      	ldrb	r3, [r7, #13]
 8001628:	f083 0304 	eor.w	r3, r3, #4
 800162c:	b2db      	uxtb	r3, r3
 800162e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable I2C Master
 8001630:	f107 030d 	add.w	r3, r7, #13
 8001634:	461a      	mov	r2, r3
 8001636:	2114      	movs	r1, #20
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fbc7 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 8001642:	f107 030d 	add.w	r3, r7, #13
 8001646:	461a      	mov	r2, r3
 8001648:	2101      	movs	r1, #1
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff fbbe 	bl	8000dcc <LSM6DSO_WriteReg>

}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <pawprint_readFIFO>:

void pawprint_readFIFO( I2C_HandleTypeDef *i2cHandle ){
 8001658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800165c:	b08e      	sub	sp, #56	; 0x38
 800165e:	af06      	add	r7, sp, #24
 8001660:	6078      	str	r0, [r7, #4]

	uint8_t FIFO_STATUS1 = 0, FIFO_STATUS2 = 0, FIFO_tag_reg = 0, FIFO_tag = 0, FIFO_counter_old = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	747b      	strb	r3, [r7, #17]
 8001666:	2300      	movs	r3, #0
 8001668:	743b      	strb	r3, [r7, #16]
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]
 800166e:	2300      	movs	r3, #0
 8001670:	75bb      	strb	r3, [r7, #22]
 8001672:	2300      	movs	r3, #0
 8001674:	757b      	strb	r3, [r7, #21]
	uint16_t FIFO_Depth = 0, FIFO_Slots = 0, Out_FIFO_Slots, acc_samples;
 8001676:	2300      	movs	r3, #0
 8001678:	83fb      	strh	r3, [r7, #30]
 800167a:	2300      	movs	r3, #0
 800167c:	83bb      	strh	r3, [r7, #28]
	//lsm6dso_tags_t	lsm6dso_tags;

	/* Confirm watermark has been met LSM6DSO_REG_FIFO_STATUS2 */
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_FIFO_STATUS2, &FIFO_STATUS2);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	461a      	mov	r2, r3
 8001684:	213b      	movs	r1, #59	; 0x3b
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fb68 	bl	8000d5c <LSM6DSO_ReadReg>
	HAL_Delay(1000);
 800168c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001690:	f001 ff06 	bl	80034a0 <HAL_Delay>
	if (((FIFO_STATUS2 >> 7)  & 0x01)||((FIFO_STATUS2 >> 6)  & 0x01)||((FIFO_STATUS2 >> 5)  & 0x01)){ // Check WTM threshold bit, overrun bit and full bit
 8001694:	7c3b      	ldrb	r3, [r7, #16]
 8001696:	09db      	lsrs	r3, r3, #7
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10e      	bne.n	80016c0 <pawprint_readFIFO+0x68>
 80016a2:	7c3b      	ldrb	r3, [r7, #16]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d107      	bne.n	80016c0 <pawprint_readFIFO+0x68>
 80016b0:	7c3b      	ldrb	r3, [r7, #16]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80b5 	beq.w	800182a <pawprint_readFIFO+0x1d2>
		/* Get number of samples in FIFO*/
		LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, &FIFO_STATUS1);
 80016c0:	f107 0311 	add.w	r3, r7, #17
 80016c4:	461a      	mov	r2, r3
 80016c6:	213a      	movs	r1, #58	; 0x3a
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fb47 	bl	8000d5c <LSM6DSO_ReadReg>
		FIFO_Depth = ((((uint16_t)FIFO_STATUS2 & 0x03) << 8) + (uint16_t)FIFO_STATUS1);
 80016ce:	7c3b      	ldrb	r3, [r7, #16]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016d8:	b29a      	uxth	r2, r3
 80016da:	7c7b      	ldrb	r3, [r7, #17]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4413      	add	r3, r2
 80016e0:	83fb      	strh	r3, [r7, #30]
		/* Loop until FIFO Empty */
		while (FIFO_Depth--){
 80016e2:	e019      	b.n	8001718 <pawprint_readFIFO+0xc0>
			/* Read Tag and store */
			LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, (uint8_t *)&raw_slot[FIFO_Slots].fifo_data_out[0]);
 80016e4:	8bba      	ldrh	r2, [r7, #28]
 80016e6:	4613      	mov	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	4a51      	ldr	r2, [pc, #324]	; (8001834 <pawprint_readFIFO+0x1dc>)
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	213a      	movs	r1, #58	; 0x3a
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fb31 	bl	8000d5c <LSM6DSO_ReadReg>
			/* Read Raw Data */
			LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_DATA_OUT_X_L, &raw_slot[FIFO_Slots].fifo_data_out[1],6 );
 80016fa:	8bba      	ldrh	r2, [r7, #28]
 80016fc:	4613      	mov	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	1a9b      	subs	r3, r3, r2
 8001702:	3301      	adds	r3, #1
 8001704:	4a4b      	ldr	r2, [pc, #300]	; (8001834 <pawprint_readFIFO+0x1dc>)
 8001706:	441a      	add	r2, r3
 8001708:	2306      	movs	r3, #6
 800170a:	2179      	movs	r1, #121	; 0x79
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fb3f 	bl	8000d90 <LSM6DSO_ReadRegs>
			//FIFO_tag = (FIFO_tag_reg >> 3); // Take tag register and right shift to leave only the tag
			FIFO_Slots++;
 8001712:	8bbb      	ldrh	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	83bb      	strh	r3, [r7, #28]
		while (FIFO_Depth--){
 8001718:	8bfb      	ldrh	r3, [r7, #30]
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	83fa      	strh	r2, [r7, #30]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1e0      	bne.n	80016e4 <pawprint_readFIFO+0x8c>
				// Get data out
				// Convert to mg

		}
		/* Filter based on sensor type */
		st_fifo_decode(out_slot, raw_slot, &Out_FIFO_Slots, FIFO_Slots);
 8001722:	8bbb      	ldrh	r3, [r7, #28]
 8001724:	f107 020e 	add.w	r2, r7, #14
 8001728:	4942      	ldr	r1, [pc, #264]	; (8001834 <pawprint_readFIFO+0x1dc>)
 800172a:	4843      	ldr	r0, [pc, #268]	; (8001838 <pawprint_readFIFO+0x1e0>)
 800172c:	f000 f8a6 	bl	800187c <st_fifo_decode>
		st_fifo_sort(out_slot, Out_FIFO_Slots);
 8001730:	89fb      	ldrh	r3, [r7, #14]
 8001732:	4619      	mov	r1, r3
 8001734:	4840      	ldr	r0, [pc, #256]	; (8001838 <pawprint_readFIFO+0x1e0>)
 8001736:	f001 f86d 	bl	8002814 <st_fifo_sort>
		acc_samples = st_fifo_get_sensor_occurrence(out_slot,Out_FIFO_Slots, ST_FIFO_ACCELEROMETER);
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	483d      	ldr	r0, [pc, #244]	; (8001838 <pawprint_readFIFO+0x1e0>)
 8001742:	f001 f8c3 	bl	80028cc <st_fifo_get_sensor_occurrence>
 8001746:	4603      	mov	r3, r0
 8001748:	827b      	strh	r3, [r7, #18]

		 /* Count how many acc and gyro samples */
		      st_fifo_extract_sensor(acc_slot, out_slot, Out_FIFO_Slots,
 800174a:	89fa      	ldrh	r2, [r7, #14]
 800174c:	2301      	movs	r3, #1
 800174e:	493a      	ldr	r1, [pc, #232]	; (8001838 <pawprint_readFIFO+0x1e0>)
 8001750:	483a      	ldr	r0, [pc, #232]	; (800183c <pawprint_readFIFO+0x1e4>)
 8001752:	f001 f8e5 	bl	8002920 <st_fifo_extract_sensor>
		                             ST_FIFO_ACCELEROMETER);
		      st_fifo_extract_sensor(gyr_slot, out_slot, Out_FIFO_Slots,
 8001756:	89fa      	ldrh	r2, [r7, #14]
 8001758:	2300      	movs	r3, #0
 800175a:	4937      	ldr	r1, [pc, #220]	; (8001838 <pawprint_readFIFO+0x1e0>)
 800175c:	4838      	ldr	r0, [pc, #224]	; (8001840 <pawprint_readFIFO+0x1e8>)
 800175e:	f001 f8df 	bl	8002920 <st_fifo_extract_sensor>
		                             ST_FIFO_GYROSCOPE);

		      for (int i = 0; i < acc_samples; i++) {
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	e05c      	b.n	8001822 <pawprint_readFIFO+0x1ca>
		        sprintf((char *)tx_buffer, "ACC:\t%u\t%d\t%4.2f\t%4.2f\t%4.2f\r\n",
		                (unsigned int)acc_slot[i].timestamp,
 8001768:	4934      	ldr	r1, [pc, #208]	; (800183c <pawprint_readFIFO+0x1e4>)
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	681e      	ldr	r6, [r3, #0]
		                acc_slot[i].sensor_tag,
 8001778:	4930      	ldr	r1, [pc, #192]	; (800183c <pawprint_readFIFO+0x1e4>)
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	3304      	adds	r3, #4
 8001788:	781b      	ldrb	r3, [r3, #0]
		        sprintf((char *)tx_buffer, "ACC:\t%u\t%d\t%4.2f\t%4.2f\t%4.2f\r\n",
 800178a:	469a      	mov	sl, r3
		                lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.x),
 800178c:	492b      	ldr	r1, [pc, #172]	; (800183c <pawprint_readFIFO+0x1e4>)
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3306      	adds	r3, #6
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f853 	bl	800184c <lsm6dso_from_fs2_to_mg>
 80017a6:	ee10 3a10 	vmov	r3, s0
		        sprintf((char *)tx_buffer, "ACC:\t%u\t%d\t%4.2f\t%4.2f\t%4.2f\r\n",
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fecc 	bl	8000548 <__aeabi_f2d>
 80017b0:	4604      	mov	r4, r0
 80017b2:	460d      	mov	r5, r1
		                lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.y),
 80017b4:	4921      	ldr	r1, [pc, #132]	; (800183c <pawprint_readFIFO+0x1e4>)
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3308      	adds	r3, #8
 80017c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 f83f 	bl	800184c <lsm6dso_from_fs2_to_mg>
 80017ce:	ee10 3a10 	vmov	r3, s0
		        sprintf((char *)tx_buffer, "ACC:\t%u\t%d\t%4.2f\t%4.2f\t%4.2f\r\n",
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe feb8 	bl	8000548 <__aeabi_f2d>
 80017d8:	4680      	mov	r8, r0
 80017da:	4689      	mov	r9, r1
		                lsm6dso_from_fs2_to_mg(acc_slot[i].sensor_data.z));
 80017dc:	4917      	ldr	r1, [pc, #92]	; (800183c <pawprint_readFIFO+0x1e4>)
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	330a      	adds	r3, #10
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f82b 	bl	800184c <lsm6dso_from_fs2_to_mg>
 80017f6:	ee10 3a10 	vmov	r3, s0
		        sprintf((char *)tx_buffer, "ACC:\t%u\t%d\t%4.2f\t%4.2f\t%4.2f\r\n",
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fea4 	bl	8000548 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001808:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800180c:	e9cd 4500 	strd	r4, r5, [sp]
 8001810:	4653      	mov	r3, sl
 8001812:	4632      	mov	r2, r6
 8001814:	490b      	ldr	r1, [pc, #44]	; (8001844 <pawprint_readFIFO+0x1ec>)
 8001816:	480c      	ldr	r0, [pc, #48]	; (8001848 <pawprint_readFIFO+0x1f0>)
 8001818:	f00e f9e8 	bl	800fbec <siprintf>
		      for (int i = 0; i < acc_samples; i++) {
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	3301      	adds	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	8a7b      	ldrh	r3, [r7, #18]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	429a      	cmp	r2, r3
 8001828:	db9e      	blt.n	8001768 <pawprint_readFIFO+0x110>
		      }

	}


}
 800182a:	bf00      	nop
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001834:	200008a4 	.word	0x200008a4
 8001838:	20000c18 	.word	0x20000c18
 800183c:	20001200 	.word	0x20001200
 8001840:	200017e8 	.word	0x200017e8
 8001844:	08013538 	.word	0x08013538
 8001848:	200004bc 	.word	0x200004bc

0800184c <lsm6dso_from_fs2_to_mg>:

float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001862:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001878 <lsm6dso_from_fs2_to_mg+0x2c>
 8001866:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	3d79db23 	.word	0x3d79db23

0800187c <st_fifo_decode>:
  * @retval st_fifo_status    ST_FIFO_OK / ST_FIFO_ERR
  *
  */
st_fifo_status st_fifo_decode(st_fifo_out_slot *fifo_out_slot,
                              st_fifo_raw_slot *fifo_raw_slot, uint16_t *out_slot_size, uint16_t stream_size)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b09b      	sub	sp, #108	; 0x6c
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	807b      	strh	r3, [r7, #2]
  uint16_t j = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

  for (uint16_t i = 0; i < stream_size; i++)
 8001890:	2300      	movs	r3, #0
 8001892:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001896:	f000 bfa5 	b.w	80027e4 <st_fifo_decode+0xf68>
  {

    uint8_t tag = (fifo_raw_slot[i].fifo_data_out[0] & TAG_SENSOR_MASK) >> TAG_SENSOR_SHIFT;
 800189a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    uint8_t tag_counter = (fifo_raw_slot[i].fifo_data_out[0] & TAG_COUNTER_MASK) >> TAG_COUNTER_SHIFT;
 80018b0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    if (fifo_ver == 0u && has_even_parity(fifo_raw_slot[i].fifo_data_out[0]) == 0u)
 80018cc:	4bb5      	ldr	r3, [pc, #724]	; (8001ba4 <st_fifo_decode+0x328>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d110      	bne.n	80018f6 <st_fifo_decode+0x7a>
 80018d4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80018d8:	4613      	mov	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 f9c3 	bl	8002c70 <has_even_parity>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <st_fifo_decode+0x7a>
    {
      return ST_FIFO_ERR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f000 bf7e 	b.w	80027f2 <st_fifo_decode+0xf76>
    }

    if (is_tag_valid(tag) == 0u)
 80018f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 f850 	bl	80029a0 <is_tag_valid>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <st_fifo_decode+0x90>
    {
      return ST_FIFO_ERR;
 8001906:	2301      	movs	r3, #1
 8001908:	f000 bf73 	b.w	80027f2 <st_fifo_decode+0xf76>
    }

    if ((tag_counter != (tag_counter_old)) && dtime_min != 0u)
 800190c:	4ba6      	ldr	r3, [pc, #664]	; (8001ba8 <st_fifo_decode+0x32c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001914:	429a      	cmp	r2, r3
 8001916:	d025      	beq.n	8001964 <st_fifo_decode+0xe8>
 8001918:	4ba4      	ldr	r3, [pc, #656]	; (8001bac <st_fifo_decode+0x330>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d021      	beq.n	8001964 <st_fifo_decode+0xe8>
    {

      uint8_t diff_tag_counter;

      if (tag_counter < tag_counter_old)
 8001920:	4ba1      	ldr	r3, [pc, #644]	; (8001ba8 <st_fifo_decode+0x32c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001928:	429a      	cmp	r2, r3
 800192a:	d209      	bcs.n	8001940 <st_fifo_decode+0xc4>
      {
        diff_tag_counter = tag_counter + 4u - tag_counter_old;
 800192c:	4b9e      	ldr	r3, [pc, #632]	; (8001ba8 <st_fifo_decode+0x32c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	3304      	adds	r3, #4
 800193a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800193e:	e006      	b.n	800194e <st_fifo_decode+0xd2>
      }
      else
      {
        diff_tag_counter = tag_counter - tag_counter_old;
 8001940:	4b99      	ldr	r3, [pc, #612]	; (8001ba8 <st_fifo_decode+0x32c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      }

      timestamp += dtime_min * diff_tag_counter;
 800194e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001952:	4a96      	ldr	r2, [pc, #600]	; (8001bac <st_fifo_decode+0x330>)
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	fb03 f202 	mul.w	r2, r3, r2
 800195a:	4b95      	ldr	r3, [pc, #596]	; (8001bb0 <st_fifo_decode+0x334>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a93      	ldr	r2, [pc, #588]	; (8001bb0 <st_fifo_decode+0x334>)
 8001962:	6013      	str	r3, [r2, #0]
    }

    if (tag == TAG_ODRCHG)
 8001964:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001968:	2b05      	cmp	r3, #5
 800196a:	f040 80d1 	bne.w	8001b10 <st_fifo_decode+0x294>
    {

      uint8_t bdr_acc_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_XL_MASK) >> BDR_XL_SHIFT;
 800196e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	4413      	add	r3, r2
 800197c:	799b      	ldrb	r3, [r3, #6]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      uint8_t bdr_gyr_cfg = (fifo_raw_slot[i].fifo_data_out[6] & BDR_GY_MASK) >> BDR_GY_SHIFT;
 8001986:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800198a:	4613      	mov	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	4413      	add	r3, r2
 8001994:	799b      	ldrb	r3, [r3, #6]
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      uint8_t bdr_vsens_cfg = (fifo_raw_slot[i].fifo_data_out[4] & BDR_VSENS_MASK) >> BDR_VSENS_SHIFT;
 800199c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	4413      	add	r3, r2
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

      float bdr_xl = device[fifo_ver].bdr_acc[bdr_acc_cfg];
 80019b4:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <st_fifo_decode+0x328>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80019be:	497d      	ldr	r1, [pc, #500]	; (8001bb4 <st_fifo_decode+0x338>)
 80019c0:	4603      	mov	r3, r0
 80019c2:	019b      	lsls	r3, r3, #6
 80019c4:	4403      	add	r3, r0
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      float bdr_gy = device[fifo_ver].bdr_gyr[bdr_gyr_cfg];
 80019d0:	4b74      	ldr	r3, [pc, #464]	; (8001ba4 <st_fifo_decode+0x328>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 80019da:	4976      	ldr	r1, [pc, #472]	; (8001bb4 <st_fifo_decode+0x338>)
 80019dc:	4603      	mov	r3, r0
 80019de:	019b      	lsls	r3, r3, #6
 80019e0:	4403      	add	r3, r0
 80019e2:	4413      	add	r3, r2
 80019e4:	3310      	adds	r3, #16
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
      float bdr_vsens = device[fifo_ver].bdr_vsens[bdr_vsens_cfg];
 80019ee:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <st_fifo_decode+0x328>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80019f8:	496e      	ldr	r1, [pc, #440]	; (8001bb4 <st_fifo_decode+0x338>)
 80019fa:	4603      	mov	r3, r0
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	4403      	add	r3, r0
 8001a00:	4413      	add	r3, r2
 8001a02:	3320      	adds	r3, #32
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
      float bdr_max = MAX(bdr_xl, bdr_gy);
 8001a0c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001a10:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	dd01      	ble.n	8001a22 <st_fifo_decode+0x1a6>
 8001a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a20:	e000      	b.n	8001a24 <st_fifo_decode+0x1a8>
 8001a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a24:	633b      	str	r3, [r7, #48]	; 0x30
      bdr_max = MAX(bdr_max, bdr_vsens);
 8001a26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001a2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	dd01      	ble.n	8001a3c <st_fifo_decode+0x1c0>
 8001a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3a:	e000      	b.n	8001a3e <st_fifo_decode+0x1c2>
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30

      dtime_xl_old = dtime_xl;
 8001a40:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <st_fifo_decode+0x33c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <st_fifo_decode+0x340>)
 8001a46:	6013      	str	r3, [r2, #0]
      dtime_gy_old = dtime_gy;
 8001a48:	4b5d      	ldr	r3, [pc, #372]	; (8001bc0 <st_fifo_decode+0x344>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a5d      	ldr	r2, [pc, #372]	; (8001bc4 <st_fifo_decode+0x348>)
 8001a4e:	6013      	str	r3, [r2, #0]
      dtime_min = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_max)];
 8001a50:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <st_fifo_decode+0x328>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461c      	mov	r4, r3
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <st_fifo_decode+0x328>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	019b      	lsls	r3, r3, #6
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4a53      	ldr	r2, [pc, #332]	; (8001bb4 <st_fifo_decode+0x338>)
 8001a66:	4413      	add	r3, r2
 8001a68:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 f89f 	bl	8002bb0 <bdr_get_index>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4619      	mov	r1, r3
 8001a76:	4a4f      	ldr	r2, [pc, #316]	; (8001bb4 <st_fifo_decode+0x338>)
 8001a78:	4623      	mov	r3, r4
 8001a7a:	019b      	lsls	r3, r3, #6
 8001a7c:	4423      	add	r3, r4
 8001a7e:	440b      	add	r3, r1
 8001a80:	3330      	adds	r3, #48	; 0x30
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	4a49      	ldr	r2, [pc, #292]	; (8001bac <st_fifo_decode+0x330>)
 8001a88:	6013      	str	r3, [r2, #0]
      dtime_xl = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_acc, bdr_xl)];
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <st_fifo_decode+0x328>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461c      	mov	r4, r3
 8001a90:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <st_fifo_decode+0x328>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4613      	mov	r3, r2
 8001a98:	019b      	lsls	r3, r3, #6
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4a45      	ldr	r2, [pc, #276]	; (8001bb4 <st_fifo_decode+0x338>)
 8001aa0:	4413      	add	r3, r2
 8001aa2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 f882 	bl	8002bb0 <bdr_get_index>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4a40      	ldr	r2, [pc, #256]	; (8001bb4 <st_fifo_decode+0x338>)
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	019b      	lsls	r3, r3, #6
 8001ab6:	4423      	add	r3, r4
 8001ab8:	440b      	add	r3, r1
 8001aba:	3330      	adds	r3, #48	; 0x30
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	4a3d      	ldr	r2, [pc, #244]	; (8001bb8 <st_fifo_decode+0x33c>)
 8001ac2:	6013      	str	r3, [r2, #0]
      dtime_gy = device[fifo_ver].dtime[bdr_get_index(device[fifo_ver].bdr_gyr, bdr_gy)];
 8001ac4:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <st_fifo_decode+0x328>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461c      	mov	r4, r3
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <st_fifo_decode+0x328>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	019b      	lsls	r3, r3, #6
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	3340      	adds	r3, #64	; 0x40
 8001ada:	4a36      	ldr	r2, [pc, #216]	; (8001bb4 <st_fifo_decode+0x338>)
 8001adc:	4413      	add	r3, r2
 8001ade:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 f864 	bl	8002bb0 <bdr_get_index>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4619      	mov	r1, r3
 8001aec:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <st_fifo_decode+0x338>)
 8001aee:	4623      	mov	r3, r4
 8001af0:	019b      	lsls	r3, r3, #6
 8001af2:	4423      	add	r3, r4
 8001af4:	440b      	add	r3, r1
 8001af6:	3330      	adds	r3, #48	; 0x30
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	4a30      	ldr	r2, [pc, #192]	; (8001bc0 <st_fifo_decode+0x344>)
 8001afe:	6013      	str	r3, [r2, #0]

      bdr_chg_xl_flag = 1;
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <st_fifo_decode+0x34c>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
      bdr_chg_gy_flag = 1;
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <st_fifo_decode+0x350>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	f000 be5f 	b.w	80027ce <st_fifo_decode+0xf52>

    }
    else if (tag == TAG_TS)
 8001b10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d10d      	bne.n	8001b34 <st_fifo_decode+0x2b8>
    {

      (void)memcpy(&timestamp, &fifo_raw_slot[i].fifo_data_out[1], 4);
 8001b18:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	3301      	adds	r3, #1
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <st_fifo_decode+0x334>)
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f000 be4d 	b.w	80027ce <st_fifo_decode+0xf52>

    }
    else
    {

      st_fifo_compression_type compression_type = get_compression_type(tag);
 8001b34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 fffb 	bl	8002b34 <get_compression_type>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
      st_fifo_sensor_type sensor_type = get_sensor_type(tag);
 8001b44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 ff4b 	bl	80029e4 <get_sensor_type>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

      if (compression_type == ST_FIFO_COMPRESSION_NC)
 8001b54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 80a2 	bne.w	8001ca2 <st_fifo_decode+0x426>
      {

        if (tag == TAG_EMPTY)
 8001b5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8638 	beq.w	80027d8 <st_fifo_decode+0xf5c>
        {
          continue;
        }

        if (tag == TAG_STEP_COUNTER || tag == TAG_MLC_RESULT)
 8001b68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b6c:	2b12      	cmp	r3, #18
 8001b6e:	d003      	beq.n	8001b78 <st_fifo_decode+0x2fc>
 8001b70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b74:	2b1a      	cmp	r3, #26
 8001b76:	d12b      	bne.n	8001bd0 <st_fifo_decode+0x354>
        {
          (void)memcpy(&fifo_out_slot[j].timestamp, &fifo_raw_slot[i].fifo_data_out[3],
 8001b78:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	3303      	adds	r3, #3
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	600b      	str	r3, [r1, #0]
 8001ba0:	e022      	b.n	8001be8 <st_fifo_decode+0x36c>
 8001ba2:	bf00      	nop
 8001ba4:	20001dd0 	.word	0x20001dd0
 8001ba8:	20001dd1 	.word	0x20001dd1
 8001bac:	20001ddc 	.word	0x20001ddc
 8001bb0:	20001de8 	.word	0x20001de8
 8001bb4:	08013598 	.word	0x08013598
 8001bb8:	20001dd4 	.word	0x20001dd4
 8001bbc:	20001de0 	.word	0x20001de0
 8001bc0:	20001dd8 	.word	0x20001dd8
 8001bc4:	20001de4 	.word	0x20001de4
 8001bc8:	20001df4 	.word	0x20001df4
 8001bcc:	20001df5 	.word	0x20001df5
                       4);
        }
        else
        {
          fifo_out_slot[j].timestamp = timestamp;
 8001bd0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	4ab1      	ldr	r2, [pc, #708]	; (8001ea8 <st_fifo_decode+0x62c>)
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	601a      	str	r2, [r3, #0]
        }

        fifo_out_slot[j].sensor_tag = sensor_type;
 8001be8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8001bfe:	711a      	strb	r2, [r3, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8001c00:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4413      	add	r3, r2
 8001c12:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 8001c14:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	4413      	add	r3, r2
 8001c22:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8001c24:	2206      	movs	r2, #6
 8001c26:	4619      	mov	r1, r3
 8001c28:	f00e f8c2 	bl	800fdb0 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8001c2c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d115      	bne.n	8001c60 <st_fifo_decode+0x3e4>
        {
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8001c34:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	461a      	mov	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	3306      	adds	r3, #6
 8001c48:	2206      	movs	r2, #6
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4897      	ldr	r0, [pc, #604]	; (8001eac <st_fifo_decode+0x630>)
 8001c4e:	f00e f8af 	bl	800fdb0 <memcpy>
          last_timestamp_xl = timestamp;
 8001c52:	4b95      	ldr	r3, [pc, #596]	; (8001ea8 <st_fifo_decode+0x62c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a96      	ldr	r2, [pc, #600]	; (8001eb0 <st_fifo_decode+0x634>)
 8001c58:	6013      	str	r3, [r2, #0]
          bdr_chg_xl_flag = 0;
 8001c5a:	4b96      	ldr	r3, [pc, #600]	; (8001eb4 <st_fifo_decode+0x638>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8001c60:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d115      	bne.n	8001c94 <st_fifo_decode+0x418>
        {
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8001c68:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	461a      	mov	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3306      	adds	r3, #6
 8001c7c:	2206      	movs	r2, #6
 8001c7e:	4619      	mov	r1, r3
 8001c80:	488d      	ldr	r0, [pc, #564]	; (8001eb8 <st_fifo_decode+0x63c>)
 8001c82:	f00e f895 	bl	800fdb0 <memcpy>
          last_timestamp_gy = timestamp;
 8001c86:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <st_fifo_decode+0x62c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a8c      	ldr	r2, [pc, #560]	; (8001ebc <st_fifo_decode+0x640>)
 8001c8c:	6013      	str	r3, [r2, #0]
          bdr_chg_gy_flag = 0;
 8001c8e:	4b8c      	ldr	r3, [pc, #560]	; (8001ec0 <st_fifo_decode+0x644>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
        }

        j++;
 8001c94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001c9e:	f000 bd92 	b.w	80027c6 <st_fifo_decode+0xf4a>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_1)
 8001ca2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	f040 8091 	bne.w	8001dce <st_fifo_decode+0x552>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 8001cac:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	189c      	adds	r4, r3, r2
 8001cbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fe8e 	bl	80029e4 <get_sensor_type>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8001ccc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 8001ce0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8001cf0:	2206      	movs	r2, #6
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f00e f85c 	bl	800fdb0 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8001cf8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d12d      	bne.n	8001d5c <st_fifo_decode+0x4e0>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 8001d00:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <st_fifo_decode+0x638>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <st_fifo_decode+0x49a>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 8001d08:	4b69      	ldr	r3, [pc, #420]	; (8001eb0 <st_fifo_decode+0x634>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b6d      	ldr	r3, [pc, #436]	; (8001ec4 <st_fifo_decode+0x648>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d14:	e005      	b.n	8001d22 <st_fifo_decode+0x4a6>
          }
          else
          {
            last_timestamp = timestamp - dtime_xl;
 8001d16:	4b64      	ldr	r3, [pc, #400]	; (8001ea8 <st_fifo_decode+0x62c>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b6b      	ldr	r3, [pc, #428]	; (8001ec8 <st_fifo_decode+0x64c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	65fb      	str	r3, [r7, #92]	; 0x5c
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8001d22:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001d36:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8001d38:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	461a      	mov	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	3306      	adds	r3, #6
 8001d4c:	2206      	movs	r2, #6
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4856      	ldr	r0, [pc, #344]	; (8001eac <st_fifo_decode+0x630>)
 8001d52:	f00e f82d 	bl	800fdb0 <memcpy>
          last_timestamp_xl = last_timestamp;
 8001d56:	4a56      	ldr	r2, [pc, #344]	; (8001eb0 <st_fifo_decode+0x634>)
 8001d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5a:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8001d5c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d12d      	bne.n	8001dc0 <st_fifo_decode+0x544>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 8001d64:	4b56      	ldr	r3, [pc, #344]	; (8001ec0 <st_fifo_decode+0x644>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <st_fifo_decode+0x4fe>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <st_fifo_decode+0x640>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <st_fifo_decode+0x650>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d78:	e005      	b.n	8001d86 <st_fifo_decode+0x50a>
          }
          else
          {
            last_timestamp = timestamp - dtime_gy;
 8001d7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <st_fifo_decode+0x62c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b54      	ldr	r3, [pc, #336]	; (8001ed0 <st_fifo_decode+0x654>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	65bb      	str	r3, [r7, #88]	; 0x58
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8001d86:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d9a:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8001d9c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	461a      	mov	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	3306      	adds	r3, #6
 8001db0:	2206      	movs	r2, #6
 8001db2:	4619      	mov	r1, r3
 8001db4:	4840      	ldr	r0, [pc, #256]	; (8001eb8 <st_fifo_decode+0x63c>)
 8001db6:	f00d fffb 	bl	800fdb0 <memcpy>
          last_timestamp_gy = last_timestamp;
 8001dba:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <st_fifo_decode+0x640>)
 8001dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dbe:	6013      	str	r3, [r2, #0]
        }

        j++;
 8001dc0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001dca:	f000 bcfc 	b.w	80027c6 <st_fifo_decode+0xf4a>

      }
      else if (compression_type == ST_FIFO_COMPRESSION_NC_T_2)
 8001dce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	f040 80b2 	bne.w	8001f3c <st_fifo_decode+0x6c0>
      {

        fifo_out_slot[j].sensor_tag = get_sensor_type(tag);
 8001dd8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	461a      	mov	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	189c      	adds	r4, r3, r2
 8001dea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fdf8 	bl	80029e4 <get_sensor_type>
 8001df4:	4603      	mov	r3, r0
 8001df6:	7123      	strb	r3, [r4, #4]
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8001df8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	461a      	mov	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4413      	add	r3, r2
 8001e0a:	1d98      	adds	r0, r3, #6
                     &fifo_raw_slot[i].fifo_data_out[1], 6);
 8001e0c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	3301      	adds	r3, #1
        (void)memcpy(fifo_out_slot[j].sensor_data.raw_data,
 8001e1c:	2206      	movs	r2, #6
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f00d ffc6 	bl	800fdb0 <memcpy>

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8001e24:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d12e      	bne.n	8001e8a <st_fifo_decode+0x60e>
        {
          uint32_t last_timestamp;

          if (bdr_chg_xl_flag == 1u)
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <st_fifo_decode+0x638>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <st_fifo_decode+0x5c6>
          {
            last_timestamp = last_timestamp_xl + dtime_xl_old;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <st_fifo_decode+0x634>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <st_fifo_decode+0x648>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8001e40:	e006      	b.n	8001e50 <st_fifo_decode+0x5d4>
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_xl;
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <st_fifo_decode+0x62c>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <st_fifo_decode+0x64c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	657b      	str	r3, [r7, #84]	; 0x54
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8001e50:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e64:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8001e66:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	3306      	adds	r3, #6
 8001e7a:	2206      	movs	r2, #6
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480b      	ldr	r0, [pc, #44]	; (8001eac <st_fifo_decode+0x630>)
 8001e80:	f00d ff96 	bl	800fdb0 <memcpy>
          last_timestamp_xl = last_timestamp;
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <st_fifo_decode+0x634>)
 8001e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e88:	6013      	str	r3, [r2, #0]
        }
        if (sensor_type == ST_FIFO_GYROSCOPE)
 8001e8a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d144      	bne.n	8001f1c <st_fifo_decode+0x6a0>
        {
          uint32_t last_timestamp;

          if (bdr_chg_gy_flag == 1u)
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <st_fifo_decode+0x644>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d11c      	bne.n	8001ed4 <st_fifo_decode+0x658>
          {
            last_timestamp = last_timestamp_gy + dtime_gy_old;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <st_fifo_decode+0x640>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <st_fifo_decode+0x650>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8001ea6:	e01c      	b.n	8001ee2 <st_fifo_decode+0x666>
 8001ea8:	20001de8 	.word	0x20001de8
 8001eac:	20001df8 	.word	0x20001df8
 8001eb0:	20001dec 	.word	0x20001dec
 8001eb4:	20001df4 	.word	0x20001df4
 8001eb8:	20001e00 	.word	0x20001e00
 8001ebc:	20001df0 	.word	0x20001df0
 8001ec0:	20001df5 	.word	0x20001df5
 8001ec4:	20001de0 	.word	0x20001de0
 8001ec8:	20001dd4 	.word	0x20001dd4
 8001ecc:	20001de4 	.word	0x20001de4
 8001ed0:	20001dd8 	.word	0x20001dd8
          }
          else
          {
            last_timestamp = timestamp - 2u * dtime_gy;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <st_fifo_decode+0x6b0>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <st_fifo_decode+0x6b4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	653b      	str	r3, [r7, #80]	; 0x50
          }

          fifo_out_slot[j].timestamp = last_timestamp;
 8001ee2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ef6:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8001ef8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	461a      	mov	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4413      	add	r3, r2
 8001f0a:	3306      	adds	r3, #6
 8001f0c:	2206      	movs	r2, #6
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4808      	ldr	r0, [pc, #32]	; (8001f34 <st_fifo_decode+0x6b8>)
 8001f12:	f00d ff4d 	bl	800fdb0 <memcpy>
          last_timestamp_gy = last_timestamp;
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <st_fifo_decode+0x6bc>)
 8001f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1a:	6013      	str	r3, [r2, #0]
        }

        j++;
 8001f1c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001f20:	3301      	adds	r3, #1
 8001f22:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001f26:	f000 bc4e 	b.w	80027c6 <st_fifo_decode+0xf4a>
 8001f2a:	bf00      	nop
 8001f2c:	20001de8 	.word	0x20001de8
 8001f30:	20001dd8 	.word	0x20001dd8
 8001f34:	20001e00 	.word	0x20001e00
 8001f38:	20001df0 	.word	0x20001df0

      }
      else if (compression_type == ST_FIFO_COMPRESSION_2X)
 8001f3c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	f040 81c7 	bne.w	80022d4 <st_fifo_decode+0xa58>
      {

        int16_t diff[6];
        get_diff_2x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 8001f46:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	4413      	add	r3, r2
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 feb2 	bl	8002cc6 <get_diff_2x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 8001f62:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8001f78:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8001f7a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d15a      	bne.n	8002038 <st_fifo_decode+0x7bc>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 8001f82:	4bbf      	ldr	r3, [pc, #764]	; (8002280 <st_fifo_decode+0xa04>)
 8001f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	b299      	uxth	r1, r3
 8001f94:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b20a      	sxth	r2, r1
 8001fa8:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 8001faa:	4bb5      	ldr	r3, [pc, #724]	; (8002280 <st_fifo_decode+0xa04>)
 8001fac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	b299      	uxth	r1, r3
 8001fbc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	b20a      	sxth	r2, r1
 8001fd0:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 8001fd2:	4bab      	ldr	r3, [pc, #684]	; (8002280 <st_fifo_decode+0xa04>)
 8001fd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b20a      	sxth	r2, r1
 8001ff8:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 8001ffa:	4ba2      	ldr	r3, [pc, #648]	; (8002284 <st_fifo_decode+0xa08>)
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	4ba2      	ldr	r3, [pc, #648]	; (8002288 <st_fifo_decode+0xa0c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0059      	lsls	r1, r3, #1
 8002004:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	461a      	mov	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4413      	add	r3, r2
 8002016:	1a42      	subs	r2, r0, r1
 8002018:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 800201a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	3306      	adds	r3, #6
 800202e:	2206      	movs	r2, #6
 8002030:	4619      	mov	r1, r3
 8002032:	4893      	ldr	r0, [pc, #588]	; (8002280 <st_fifo_decode+0xa04>)
 8002034:	f00d febc 	bl	800fdb0 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002038:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800203c:	2b00      	cmp	r3, #0
 800203e:	d15a      	bne.n	80020f6 <st_fifo_decode+0x87a>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 8002040:	4b92      	ldr	r3, [pc, #584]	; (800228c <st_fifo_decode+0xa10>)
 8002042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002046:	b29a      	uxth	r2, r3
 8002048:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800204c:	b29b      	uxth	r3, r3
 800204e:	4413      	add	r3, r2
 8002050:	b299      	uxth	r1, r3
 8002052:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	b20a      	sxth	r2, r1
 8002066:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <st_fifo_decode+0xa10>)
 800206a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800206e:	b29a      	uxth	r2, r3
 8002070:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002074:	b29b      	uxth	r3, r3
 8002076:	4413      	add	r3, r2
 8002078:	b299      	uxth	r1, r3
 800207a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	461a      	mov	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	b20a      	sxth	r2, r1
 800208e:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <st_fifo_decode+0xa10>)
 8002092:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002096:	b29a      	uxth	r2, r3
 8002098:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800209c:	b29b      	uxth	r3, r3
 800209e:	4413      	add	r3, r2
 80020a0:	b299      	uxth	r1, r3
 80020a2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	b20a      	sxth	r2, r1
 80020b6:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 80020b8:	4b72      	ldr	r3, [pc, #456]	; (8002284 <st_fifo_decode+0xa08>)
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	4b74      	ldr	r3, [pc, #464]	; (8002290 <st_fifo_decode+0xa14>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0059      	lsls	r1, r3, #1
 80020c2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	1a42      	subs	r2, r0, r1
 80020d6:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 80020d8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	461a      	mov	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4413      	add	r3, r2
 80020ea:	3306      	adds	r3, #6
 80020ec:	2206      	movs	r2, #6
 80020ee:	4619      	mov	r1, r3
 80020f0:	4866      	ldr	r0, [pc, #408]	; (800228c <st_fifo_decode+0xa10>)
 80020f2:	f00d fe5d 	bl	800fdb0 <memcpy>
        }

        j++;
 80020f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80020fa:	3301      	adds	r3, #1
 80020fc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 8002100:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	461a      	mov	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002116:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002118:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800211c:	2b01      	cmp	r3, #1
 800211e:	d15e      	bne.n	80021de <st_fifo_decode+0x962>
        {
          uint32_t last_timestamp = timestamp - dtime_xl;
 8002120:	4b58      	ldr	r3, [pc, #352]	; (8002284 <st_fifo_decode+0xa08>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b58      	ldr	r3, [pc, #352]	; (8002288 <st_fifo_decode+0xa0c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	64bb      	str	r3, [r7, #72]	; 0x48
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 800212c:	4b54      	ldr	r3, [pc, #336]	; (8002280 <st_fifo_decode+0xa04>)
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	b29a      	uxth	r2, r3
 8002134:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	4413      	add	r3, r2
 800213c:	b299      	uxth	r1, r3
 800213e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	b20a      	sxth	r2, r1
 8002152:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 8002154:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <st_fifo_decode+0xa04>)
 8002156:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800215a:	b29a      	uxth	r2, r3
 800215c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002160:	b29b      	uxth	r3, r3
 8002162:	4413      	add	r3, r2
 8002164:	b299      	uxth	r1, r3
 8002166:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	b20a      	sxth	r2, r1
 800217a:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 800217c:	4b40      	ldr	r3, [pc, #256]	; (8002280 <st_fifo_decode+0xa04>)
 800217e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002182:	b29a      	uxth	r2, r3
 8002184:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002188:	b29b      	uxth	r3, r3
 800218a:	4413      	add	r3, r2
 800218c:	b299      	uxth	r1, r3
 800218e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	b20a      	sxth	r2, r1
 80021a2:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 80021a4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	461a      	mov	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021b8:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80021ba:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	3306      	adds	r3, #6
 80021ce:	2206      	movs	r2, #6
 80021d0:	4619      	mov	r1, r3
 80021d2:	482b      	ldr	r0, [pc, #172]	; (8002280 <st_fifo_decode+0xa04>)
 80021d4:	f00d fdec 	bl	800fdb0 <memcpy>
          last_timestamp_xl = last_timestamp;
 80021d8:	4a2e      	ldr	r2, [pc, #184]	; (8002294 <st_fifo_decode+0xa18>)
 80021da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021dc:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 80021de:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d16c      	bne.n	80022c0 <st_fifo_decode+0xa44>
        {
          uint32_t last_timestamp = timestamp - dtime_gy;
 80021e6:	4b27      	ldr	r3, [pc, #156]	; (8002284 <st_fifo_decode+0xa08>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <st_fifo_decode+0xa14>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	647b      	str	r3, [r7, #68]	; 0x44
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 80021f2:	4b26      	ldr	r3, [pc, #152]	; (800228c <st_fifo_decode+0xa10>)
 80021f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4413      	add	r3, r2
 8002202:	b299      	uxth	r1, r3
 8002204:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	461a      	mov	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4413      	add	r3, r2
 8002216:	b20a      	sxth	r2, r1
 8002218:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <st_fifo_decode+0xa10>)
 800221c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002220:	b29a      	uxth	r2, r3
 8002222:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002226:	b29b      	uxth	r3, r3
 8002228:	4413      	add	r3, r2
 800222a:	b299      	uxth	r1, r3
 800222c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	461a      	mov	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	b20a      	sxth	r2, r1
 8002240:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <st_fifo_decode+0xa10>)
 8002244:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002248:	b29a      	uxth	r2, r3
 800224a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800224e:	b29b      	uxth	r3, r3
 8002250:	4413      	add	r3, r2
 8002252:	b299      	uxth	r1, r3
 8002254:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	461a      	mov	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4413      	add	r3, r2
 8002266:	b20a      	sxth	r2, r1
 8002268:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = last_timestamp;
 800226a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	e00c      	b.n	8002298 <st_fifo_decode+0xa1c>
 800227e:	bf00      	nop
 8002280:	20001df8 	.word	0x20001df8
 8002284:	20001de8 	.word	0x20001de8
 8002288:	20001dd4 	.word	0x20001dd4
 800228c:	20001e00 	.word	0x20001e00
 8002290:	20001dd8 	.word	0x20001dd8
 8002294:	20001dec 	.word	0x20001dec
 8002298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800229a:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 800229c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	461a      	mov	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4413      	add	r3, r2
 80022ae:	3306      	adds	r3, #6
 80022b0:	2206      	movs	r2, #6
 80022b2:	4619      	mov	r1, r3
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <st_fifo_decode+0xa50>)
 80022b6:	f00d fd7b 	bl	800fdb0 <memcpy>
          last_timestamp_gy = last_timestamp;
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <st_fifo_decode+0xa54>)
 80022bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022be:	6013      	str	r3, [r2, #0]
        }

        j++;
 80022c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80022c4:	3301      	adds	r3, #1
 80022c6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80022ca:	e27c      	b.n	80027c6 <st_fifo_decode+0xf4a>
 80022cc:	20001e00 	.word	0x20001e00
 80022d0:	20001df0 	.word	0x20001df0

      }
      else /* compression_type == ST_FIFO_COMPRESSION_3X */
      {
        int16_t diff[9];
        get_diff_3x(diff, &fifo_raw_slot[i].fifo_data_out[1]);
 80022d4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fd1b 	bl	8002d26 <get_diff_3x>

        fifo_out_slot[j].sensor_tag = sensor_type;
 80022f0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	461a      	mov	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4413      	add	r3, r2
 8002302:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8002306:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002308:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800230c:	2b01      	cmp	r3, #1
 800230e:	d15a      	bne.n	80023c6 <st_fifo_decode+0xb4a>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[0];
 8002310:	4bc1      	ldr	r3, [pc, #772]	; (8002618 <st_fifo_decode+0xd9c>)
 8002312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002316:	b29a      	uxth	r2, r3
 8002318:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800231c:	b29b      	uxth	r3, r3
 800231e:	4413      	add	r3, r2
 8002320:	b299      	uxth	r1, r3
 8002322:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	b20a      	sxth	r2, r1
 8002336:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[1];
 8002338:	4bb7      	ldr	r3, [pc, #732]	; (8002618 <st_fifo_decode+0xd9c>)
 800233a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800233e:	b29a      	uxth	r2, r3
 8002340:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002344:	b29b      	uxth	r3, r3
 8002346:	4413      	add	r3, r2
 8002348:	b299      	uxth	r1, r3
 800234a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	b20a      	sxth	r2, r1
 800235e:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[2];
 8002360:	4bad      	ldr	r3, [pc, #692]	; (8002618 <st_fifo_decode+0xd9c>)
 8002362:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002366:	b29a      	uxth	r2, r3
 8002368:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4413      	add	r3, r2
 8002370:	b299      	uxth	r1, r3
 8002372:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	b20a      	sxth	r2, r1
 8002386:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_xl;
 8002388:	4ba4      	ldr	r3, [pc, #656]	; (800261c <st_fifo_decode+0xda0>)
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	4ba4      	ldr	r3, [pc, #656]	; (8002620 <st_fifo_decode+0xda4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0059      	lsls	r1, r3, #1
 8002392:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	1a42      	subs	r2, r0, r1
 80023a6:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80023a8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	461a      	mov	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4413      	add	r3, r2
 80023ba:	3306      	adds	r3, #6
 80023bc:	2206      	movs	r2, #6
 80023be:	4619      	mov	r1, r3
 80023c0:	4895      	ldr	r0, [pc, #596]	; (8002618 <st_fifo_decode+0xd9c>)
 80023c2:	f00d fcf5 	bl	800fdb0 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 80023c6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d15a      	bne.n	8002484 <st_fifo_decode+0xc08>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[0];
 80023ce:	4b95      	ldr	r3, [pc, #596]	; (8002624 <st_fifo_decode+0xda8>)
 80023d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4413      	add	r3, r2
 80023de:	b299      	uxth	r1, r3
 80023e0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	461a      	mov	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	b20a      	sxth	r2, r1
 80023f4:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[1];
 80023f6:	4b8b      	ldr	r3, [pc, #556]	; (8002624 <st_fifo_decode+0xda8>)
 80023f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4413      	add	r3, r2
 8002406:	b299      	uxth	r1, r3
 8002408:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	461a      	mov	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4413      	add	r3, r2
 800241a:	b20a      	sxth	r2, r1
 800241c:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[2];
 800241e:	4b81      	ldr	r3, [pc, #516]	; (8002624 <st_fifo_decode+0xda8>)
 8002420:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002424:	b29a      	uxth	r2, r3
 8002426:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4413      	add	r3, r2
 800242e:	b299      	uxth	r1, r3
 8002430:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	461a      	mov	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4413      	add	r3, r2
 8002442:	b20a      	sxth	r2, r1
 8002444:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - 2u * dtime_gy;
 8002446:	4b75      	ldr	r3, [pc, #468]	; (800261c <st_fifo_decode+0xda0>)
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	4b77      	ldr	r3, [pc, #476]	; (8002628 <st_fifo_decode+0xdac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0059      	lsls	r1, r3, #1
 8002450:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	461a      	mov	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	1a42      	subs	r2, r0, r1
 8002464:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002466:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	3306      	adds	r3, #6
 800247a:	2206      	movs	r2, #6
 800247c:	4619      	mov	r1, r3
 800247e:	4869      	ldr	r0, [pc, #420]	; (8002624 <st_fifo_decode+0xda8>)
 8002480:	f00d fc96 	bl	800fdb0 <memcpy>
        }

        j++;
 8002484:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002488:	3301      	adds	r3, #1
 800248a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].sensor_tag = sensor_type;
 800248e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80024a4:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 80024a6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d159      	bne.n	8002562 <st_fifo_decode+0xce6>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[3];
 80024ae:	4b5a      	ldr	r3, [pc, #360]	; (8002618 <st_fifo_decode+0xd9c>)
 80024b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4413      	add	r3, r2
 80024be:	b299      	uxth	r1, r3
 80024c0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	461a      	mov	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4413      	add	r3, r2
 80024d2:	b20a      	sxth	r2, r1
 80024d4:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[4];
 80024d6:	4b50      	ldr	r3, [pc, #320]	; (8002618 <st_fifo_decode+0xd9c>)
 80024d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	b299      	uxth	r1, r3
 80024e8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	461a      	mov	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4413      	add	r3, r2
 80024fa:	b20a      	sxth	r2, r1
 80024fc:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[5];
 80024fe:	4b46      	ldr	r3, [pc, #280]	; (8002618 <st_fifo_decode+0xd9c>)
 8002500:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002504:	b29a      	uxth	r2, r3
 8002506:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800250a:	b29b      	uxth	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	b299      	uxth	r1, r3
 8002510:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	461a      	mov	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4413      	add	r3, r2
 8002522:	b20a      	sxth	r2, r1
 8002524:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_xl;
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <st_fifo_decode+0xda0>)
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <st_fifo_decode+0xda4>)
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	1a42      	subs	r2, r0, r1
 8002542:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002544:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	461a      	mov	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4413      	add	r3, r2
 8002556:	3306      	adds	r3, #6
 8002558:	2206      	movs	r2, #6
 800255a:	4619      	mov	r1, r3
 800255c:	482e      	ldr	r0, [pc, #184]	; (8002618 <st_fifo_decode+0xd9c>)
 800255e:	f00d fc27 	bl	800fdb0 <memcpy>
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002562:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d165      	bne.n	8002636 <st_fifo_decode+0xdba>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[3];
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <st_fifo_decode+0xda8>)
 800256c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002570:	b29a      	uxth	r2, r3
 8002572:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002576:	b29b      	uxth	r3, r3
 8002578:	4413      	add	r3, r2
 800257a:	b299      	uxth	r1, r3
 800257c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	461a      	mov	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	b20a      	sxth	r2, r1
 8002590:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[4];
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <st_fifo_decode+0xda8>)
 8002594:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002598:	b29a      	uxth	r2, r3
 800259a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	b299      	uxth	r1, r3
 80025a4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	461a      	mov	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	b20a      	sxth	r2, r1
 80025b8:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[5];
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <st_fifo_decode+0xda8>)
 80025bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	b299      	uxth	r1, r3
 80025cc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	461a      	mov	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	b20a      	sxth	r2, r1
 80025e0:	815a      	strh	r2, [r3, #10]
          fifo_out_slot[j].timestamp = timestamp - dtime_gy;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <st_fifo_decode+0xda0>)
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <st_fifo_decode+0xdac>)
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	1a42      	subs	r2, r0, r1
 80025fe:	601a      	str	r2, [r3, #0]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002600:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	3306      	adds	r3, #6
 8002614:	e00a      	b.n	800262c <st_fifo_decode+0xdb0>
 8002616:	bf00      	nop
 8002618:	20001df8 	.word	0x20001df8
 800261c:	20001de8 	.word	0x20001de8
 8002620:	20001dd4 	.word	0x20001dd4
 8002624:	20001e00 	.word	0x20001e00
 8002628:	20001dd8 	.word	0x20001dd8
 800262c:	2206      	movs	r2, #6
 800262e:	4619      	mov	r1, r3
 8002630:	4872      	ldr	r0, [pc, #456]	; (80027fc <st_fifo_decode+0xf80>)
 8002632:	f00d fbbd 	bl	800fdb0 <memcpy>
        }

        j++;
 8002636:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800263a:	3301      	adds	r3, #1
 800263c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

        fifo_out_slot[j].timestamp = timestamp;
 8002640:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	461a      	mov	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4413      	add	r3, r2
 8002652:	4a6b      	ldr	r2, [pc, #428]	; (8002800 <st_fifo_decode+0xf84>)
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	601a      	str	r2, [r3, #0]
        fifo_out_slot[j].sensor_tag = sensor_type;
 8002658:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	461a      	mov	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800266e:	711a      	strb	r2, [r3, #4]

        if (sensor_type == ST_FIFO_ACCELEROMETER)
 8002670:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d14e      	bne.n	8002716 <st_fifo_decode+0xe9a>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_xl[0] + diff[6];
 8002678:	4b62      	ldr	r3, [pc, #392]	; (8002804 <st_fifo_decode+0xf88>)
 800267a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267e:	b29a      	uxth	r2, r3
 8002680:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4413      	add	r3, r2
 8002688:	b299      	uxth	r1, r3
 800268a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	b20a      	sxth	r2, r1
 800269e:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_xl[1] + diff[7];
 80026a0:	4b58      	ldr	r3, [pc, #352]	; (8002804 <st_fifo_decode+0xf88>)
 80026a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	b299      	uxth	r1, r3
 80026b2:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	b20a      	sxth	r2, r1
 80026c6:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_xl[2] + diff[8];
 80026c8:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <st_fifo_decode+0xf88>)
 80026ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	b299      	uxth	r1, r3
 80026da:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	b20a      	sxth	r2, r1
 80026ee:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_xl, fifo_out_slot[j].sensor_data.raw_data, 6);
 80026f0:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	461a      	mov	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4413      	add	r3, r2
 8002702:	3306      	adds	r3, #6
 8002704:	2206      	movs	r2, #6
 8002706:	4619      	mov	r1, r3
 8002708:	483e      	ldr	r0, [pc, #248]	; (8002804 <st_fifo_decode+0xf88>)
 800270a:	f00d fb51 	bl	800fdb0 <memcpy>
          last_timestamp_xl = timestamp;
 800270e:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <st_fifo_decode+0xf84>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a3d      	ldr	r2, [pc, #244]	; (8002808 <st_fifo_decode+0xf8c>)
 8002714:	6013      	str	r3, [r2, #0]
        }

        if (sensor_type == ST_FIFO_GYROSCOPE)
 8002716:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d14e      	bne.n	80027bc <st_fifo_decode+0xf40>
        {
          fifo_out_slot[j].sensor_data.data[0] = last_data_gy[0] + diff[6];
 800271e:	4b37      	ldr	r3, [pc, #220]	; (80027fc <st_fifo_decode+0xf80>)
 8002720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002724:	b29a      	uxth	r2, r3
 8002726:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800272a:	b29b      	uxth	r3, r3
 800272c:	4413      	add	r3, r2
 800272e:	b299      	uxth	r1, r3
 8002730:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	461a      	mov	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4413      	add	r3, r2
 8002742:	b20a      	sxth	r2, r1
 8002744:	80da      	strh	r2, [r3, #6]
          fifo_out_slot[j].sensor_data.data[1] = last_data_gy[1] + diff[7];
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <st_fifo_decode+0xf80>)
 8002748:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800274c:	b29a      	uxth	r2, r3
 800274e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4413      	add	r3, r2
 8002756:	b299      	uxth	r1, r3
 8002758:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	461a      	mov	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	b20a      	sxth	r2, r1
 800276c:	811a      	strh	r2, [r3, #8]
          fifo_out_slot[j].sensor_data.data[2] = last_data_gy[2] + diff[8];
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <st_fifo_decode+0xf80>)
 8002770:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002774:	b29a      	uxth	r2, r3
 8002776:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800277a:	b29b      	uxth	r3, r3
 800277c:	4413      	add	r3, r2
 800277e:	b299      	uxth	r1, r3
 8002780:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002784:	4613      	mov	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	461a      	mov	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	b20a      	sxth	r2, r1
 8002794:	815a      	strh	r2, [r3, #10]
          (void)memcpy(last_data_gy, fifo_out_slot[j].sensor_data.raw_data, 6);
 8002796:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4413      	add	r3, r2
 80027a8:	3306      	adds	r3, #6
 80027aa:	2206      	movs	r2, #6
 80027ac:	4619      	mov	r1, r3
 80027ae:	4813      	ldr	r0, [pc, #76]	; (80027fc <st_fifo_decode+0xf80>)
 80027b0:	f00d fafe 	bl	800fdb0 <memcpy>
          last_timestamp_gy = timestamp;
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <st_fifo_decode+0xf84>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <st_fifo_decode+0xf90>)
 80027ba:	6013      	str	r3, [r2, #0]
        }

        j++;
 80027bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80027c0:	3301      	adds	r3, #1
 80027c2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
      }

      *out_slot_size = j;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80027cc:	801a      	strh	r2, [r3, #0]
    }

    tag_counter_old = tag_counter;
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <st_fifo_decode+0xf94>)
 80027d0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80027d4:	7013      	strb	r3, [r2, #0]
 80027d6:	e000      	b.n	80027da <st_fifo_decode+0xf5e>
          continue;
 80027d8:	bf00      	nop
  for (uint16_t i = 0; i < stream_size; i++)
 80027da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80027de:	3301      	adds	r3, #1
 80027e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80027e4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	f4ff a855 	bcc.w	800189a <st_fifo_decode+0x1e>
  }

  return ST_FIFO_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	376c      	adds	r7, #108	; 0x6c
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd90      	pop	{r4, r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20001e00 	.word	0x20001e00
 8002800:	20001de8 	.word	0x20001de8
 8002804:	20001df8 	.word	0x20001df8
 8002808:	20001dec 	.word	0x20001dec
 800280c:	20001df0 	.word	0x20001df0
 8002810:	20001dd1 	.word	0x20001dd1

08002814 <st_fifo_sort>:
  * @param  fifo_out_slot     decoded output stream to sort.(ptr)
  * @param  out_slot_size     decoded stream size.
  *
  */
void st_fifo_sort(st_fifo_out_slot *fifo_out_slot, uint16_t out_slot_size)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	807b      	strh	r3, [r7, #2]
  int32_t i;
  int32_t j;
  st_fifo_out_slot temp;

  for (i = 1; i < (int32_t)out_slot_size; i++)
 8002820:	2301      	movs	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	e04a      	b.n	80028bc <st_fifo_sort+0xa8>
  {
    (void)memcpy(&temp, &fifo_out_slot[i], sizeof(st_fifo_out_slot));
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	461a      	mov	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	1899      	adds	r1, r3, r2
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	220c      	movs	r2, #12
 800283c:	4618      	mov	r0, r3
 800283e:	f00d fab7 	bl	800fdb0 <memcpy>

    j = i - 1;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b01      	subs	r3, #1
 8002846:	61bb      	str	r3, [r7, #24]

    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 8002848:	e017      	b.n	800287a <st_fifo_sort+0x66>
    {
      (void)memcpy(&fifo_out_slot[j + 1], &fifo_out_slot[j],
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	461a      	mov	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	1898      	adds	r0, r3, r2
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	461a      	mov	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	220c      	movs	r2, #12
 800286e:	4619      	mov	r1, r3
 8002870:	f00d fa9e 	bl	800fdb0 <memcpy>
                   sizeof(st_fifo_out_slot));
      j--;
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	3b01      	subs	r3, #1
 8002878:	61bb      	str	r3, [r7, #24]
    while (j >= 0 && fifo_out_slot[j].timestamp > temp.timestamp)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0b      	blt.n	8002898 <st_fifo_sort+0x84>
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	461a      	mov	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8d8      	bhi.n	800284a <st_fifo_sort+0x36>
    }

    (void)memcpy(&fifo_out_slot[j + 1], &temp, sizeof(st_fifo_out_slot));
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	f107 010c 	add.w	r1, r7, #12
 80028ae:	220c      	movs	r2, #12
 80028b0:	4618      	mov	r0, r3
 80028b2:	f00d fa7d 	bl	800fdb0 <memcpy>
  for (i = 1; i < (int32_t)out_slot_size; i++)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dbb0      	blt.n	8002826 <st_fifo_sort+0x12>
  }

  return;
 80028c4:	bf00      	nop
}
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <st_fifo_get_sensor_occurrence>:
  *                           decoded FIFO stream.
  *
  */
uint16_t st_fifo_get_sensor_occurrence(st_fifo_out_slot *fifo_out_slot,
                                       uint16_t out_slot_size, st_fifo_sensor_type sensor_type)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  uint16_t occurrence = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	81fb      	strh	r3, [r7, #14]

  for (uint16_t i = 0; i < out_slot_size; i++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	81bb      	strh	r3, [r7, #12]
 80028e4:	e011      	b.n	800290a <st_fifo_get_sensor_occurrence+0x3e>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 80028e6:	89ba      	ldrh	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	461a      	mov	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	791b      	ldrb	r3, [r3, #4]
 80028f8:	787a      	ldrb	r2, [r7, #1]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d102      	bne.n	8002904 <st_fifo_get_sensor_occurrence+0x38>
    {
      occurrence++;
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	3301      	adds	r3, #1
 8002902:	81fb      	strh	r3, [r7, #14]
  for (uint16_t i = 0; i < out_slot_size; i++)
 8002904:	89bb      	ldrh	r3, [r7, #12]
 8002906:	3301      	adds	r3, #1
 8002908:	81bb      	strh	r3, [r7, #12]
 800290a:	89ba      	ldrh	r2, [r7, #12]
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	429a      	cmp	r2, r3
 8002910:	d3e9      	bcc.n	80028e6 <st_fifo_get_sensor_occurrence+0x1a>
    }
  }

  return occurrence;
 8002912:	89fb      	ldrh	r3, [r7, #14]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <st_fifo_extract_sensor>:
  *
  */
void st_fifo_extract_sensor(st_fifo_out_slot *sensor_out_slot,
                            st_fifo_out_slot *fifo_out_slot, uint16_t  out_slot_size,
                            st_fifo_sensor_type sensor_type)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	4611      	mov	r1, r2
 800292c:	461a      	mov	r2, r3
 800292e:	460b      	mov	r3, r1
 8002930:	80fb      	strh	r3, [r7, #6]
 8002932:	4613      	mov	r3, r2
 8002934:	717b      	strb	r3, [r7, #5]
  uint16_t temp_i = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	82fb      	strh	r3, [r7, #22]

  for (uint16_t i = 0; i < out_slot_size; i++)
 800293a:	2300      	movs	r3, #0
 800293c:	82bb      	strh	r3, [r7, #20]
 800293e:	e025      	b.n	800298c <st_fifo_extract_sensor+0x6c>
  {
    if (fifo_out_slot[i].sensor_tag == sensor_type)
 8002940:	8aba      	ldrh	r2, [r7, #20]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4413      	add	r3, r2
 8002950:	791b      	ldrb	r3, [r3, #4]
 8002952:	797a      	ldrb	r2, [r7, #5]
 8002954:	429a      	cmp	r2, r3
 8002956:	d116      	bne.n	8002986 <st_fifo_extract_sensor+0x66>
    {
      (void)memcpy(&sensor_out_slot[temp_i], &fifo_out_slot[i],
 8002958:	8afa      	ldrh	r2, [r7, #22]
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1898      	adds	r0, r3, r2
 8002968:	8aba      	ldrh	r2, [r7, #20]
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4413      	add	r3, r2
 8002978:	220c      	movs	r2, #12
 800297a:	4619      	mov	r1, r3
 800297c:	f00d fa18 	bl	800fdb0 <memcpy>
                   sizeof(st_fifo_out_slot));
      temp_i++;
 8002980:	8afb      	ldrh	r3, [r7, #22]
 8002982:	3301      	adds	r3, #1
 8002984:	82fb      	strh	r3, [r7, #22]
  for (uint16_t i = 0; i < out_slot_size; i++)
 8002986:	8abb      	ldrh	r3, [r7, #20]
 8002988:	3301      	adds	r3, #1
 800298a:	82bb      	strh	r3, [r7, #20]
 800298c:	8aba      	ldrh	r2, [r7, #20]
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	429a      	cmp	r2, r3
 8002992:	d3d5      	bcc.n	8002940 <st_fifo_extract_sensor+0x20>
    }
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <is_tag_valid>:
  *
  * @retval uint8_t           valid (1) or invalid (0) tag.
  *
  */
static uint8_t is_tag_valid(uint8_t tag)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if (tag > device[fifo_ver].tag_valid_limit)
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <is_tag_valid+0x3c>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	4619      	mov	r1, r3
 80029b0:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <is_tag_valid+0x40>)
 80029b2:	460b      	mov	r3, r1
 80029b4:	019b      	lsls	r3, r3, #6
 80029b6:	440b      	add	r3, r1
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	79fa      	ldrb	r2, [r7, #7]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d901      	bls.n	80029cc <is_tag_valid+0x2c>
  {
    return 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e000      	b.n	80029ce <is_tag_valid+0x2e>
  }
  else
  {
    return 1;
 80029cc:	2301      	movs	r3, #1
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20001dd0 	.word	0x20001dd0
 80029e0:	08013598 	.word	0x08013598

080029e4 <get_sensor_type>:
  *
  * @retval st_fifo_sensor_type    sensor type.
  *
  */
static st_fifo_sensor_type get_sensor_type(uint8_t tag)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  st_fifo_sensor_type type;

  switch (tag)
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	2b1d      	cmp	r3, #29
 80029f4:	f200 8094 	bhi.w	8002b20 <get_sensor_type+0x13c>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <get_sensor_type+0x1c>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a79 	.word	0x08002a79
 8002a04:	08002a7f 	.word	0x08002a7f
 8002a08:	08002a85 	.word	0x08002a85
 8002a0c:	08002b21 	.word	0x08002b21
 8002a10:	08002b21 	.word	0x08002b21
 8002a14:	08002aa9 	.word	0x08002aa9
 8002a18:	08002aaf 	.word	0x08002aaf
 8002a1c:	08002ab5 	.word	0x08002ab5
 8002a20:	08002abb 	.word	0x08002abb
 8002a24:	08002ac1 	.word	0x08002ac1
 8002a28:	08002ac7 	.word	0x08002ac7
 8002a2c:	08002acd 	.word	0x08002acd
 8002a30:	08002ad3 	.word	0x08002ad3
 8002a34:	08002a8b 	.word	0x08002a8b
 8002a38:	08002a91 	.word	0x08002a91
 8002a3c:	08002a97 	.word	0x08002a97
 8002a40:	08002a9d 	.word	0x08002a9d
 8002a44:	08002aa3 	.word	0x08002aa3
 8002a48:	08002ad9 	.word	0x08002ad9
 8002a4c:	08002adf 	.word	0x08002adf
 8002a50:	08002ae5 	.word	0x08002ae5
 8002a54:	08002aeb 	.word	0x08002aeb
 8002a58:	08002af1 	.word	0x08002af1
 8002a5c:	08002af7 	.word	0x08002af7
 8002a60:	08002afd 	.word	0x08002afd
 8002a64:	08002b03 	.word	0x08002b03
 8002a68:	08002b09 	.word	0x08002b09
 8002a6c:	08002b0f 	.word	0x08002b0f
 8002a70:	08002b15 	.word	0x08002b15
 8002a74:	08002b1b 	.word	0x08002b1b
  {
    case TAG_GY:
      type = ST_FIFO_GYROSCOPE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e053      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_XL:
      type = ST_FIFO_ACCELEROMETER;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      break;
 8002a82:	e050      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_TEMP:
      type = ST_FIFO_TEMPERATURE;
 8002a84:	2302      	movs	r3, #2
 8002a86:	73fb      	strb	r3, [r7, #15]
      break;
 8002a88:	e04d      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_EXT_SENS_0:
      type = ST_FIFO_EXT_SENSOR0;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8e:	e04a      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_EXT_SENS_1:
      type = ST_FIFO_EXT_SENSOR1;
 8002a90:	2304      	movs	r3, #4
 8002a92:	73fb      	strb	r3, [r7, #15]
      break;
 8002a94:	e047      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_EXT_SENS_2:
      type = ST_FIFO_EXT_SENSOR2;
 8002a96:	2305      	movs	r3, #5
 8002a98:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9a:	e044      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_EXT_SENS_3:
      type = ST_FIFO_EXT_SENSOR3;
 8002a9c:	2306      	movs	r3, #6
 8002a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa0:	e041      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_STEP_COUNTER:
      type = ST_FIFO_STEP_COUNTER;
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa6:	e03e      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_ACCELEROMETER;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	e03b      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_ACCELEROMETER;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab2:	e038      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_ACCELEROMETER;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab8:	e035      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_ACCELEROMETER;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
      break;
 8002abe:	e032      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_GYROSCOPE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac4:	e02f      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_GYROSCOPE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aca:	e02c      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_GYROSCOPE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad0:	e029      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_GYROSCOPE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad6:	e026      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_GAME_RV:
      type = ST_FIFO_6X_GAME_RV;
 8002ad8:	2308      	movs	r3, #8
 8002ada:	73fb      	strb	r3, [r7, #15]
      break;
 8002adc:	e023      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_GEOM_RV:
      type = ST_FIFO_6X_GEOM_RV;
 8002ade:	2309      	movs	r3, #9
 8002ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae2:	e020      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_NORM_RV:
      type = ST_FIFO_9X_RV;
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e01d      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_GYRO_BIAS:
      type = ST_FIFO_GYRO_BIAS;
 8002aea:	230b      	movs	r3, #11
 8002aec:	73fb      	strb	r3, [r7, #15]
      break;
 8002aee:	e01a      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_GRAVITIY:
      type = ST_FIFO_GRAVITY;
 8002af0:	230c      	movs	r3, #12
 8002af2:	73fb      	strb	r3, [r7, #15]
      break;
 8002af4:	e017      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_MAG_CAL:
      type = ST_FIFO_MAGNETOMETER_CALIB;
 8002af6:	230d      	movs	r3, #13
 8002af8:	73fb      	strb	r3, [r7, #15]
      break;
 8002afa:	e014      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_EXT_SENS_NACK:
      type = ST_FIFO_EXT_SENSOR_NACK;
 8002afc:	230e      	movs	r3, #14
 8002afe:	73fb      	strb	r3, [r7, #15]
      break;
 8002b00:	e011      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_MLC_RESULT:
      type = ST_FIFO_MLC_RESULT;
 8002b02:	230f      	movs	r3, #15
 8002b04:	73fb      	strb	r3, [r7, #15]
      break;
 8002b06:	e00e      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_MLC_FILTER:
      type = ST_FIFO_MLC_FILTER;
 8002b08:	2310      	movs	r3, #16
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e00b      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_MLC_FEATURE:
      type = ST_FIFO_MLC_FEATURE;
 8002b0e:	2311      	movs	r3, #17
 8002b10:	73fb      	strb	r3, [r7, #15]
      break;
 8002b12:	e008      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_DUALC_XL:
      type = ST_FIFO_DUALC_ACCELEROMETER;
 8002b14:	2312      	movs	r3, #18
 8002b16:	73fb      	strb	r3, [r7, #15]
      break;
 8002b18:	e005      	b.n	8002b26 <get_sensor_type+0x142>
    case TAG_EIS_GY:
      type = ST_FIFO_EIS_GYROSCOPE;
 8002b1a:	2313      	movs	r3, #19
 8002b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1e:	e002      	b.n	8002b26 <get_sensor_type+0x142>
    default:
      type = ST_FIFO_NONE;
 8002b20:	2314      	movs	r3, #20
 8002b22:	73fb      	strb	r3, [r7, #15]
      break;
 8002b24:	bf00      	nop
  }

  return type;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <get_compression_type>:
  *
  * @retval st_fifo_compression_type    compression type.
  *
  */
static st_fifo_compression_type get_compression_type(uint8_t tag)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  st_fifo_compression_type type;

  switch (tag)
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	3b06      	subs	r3, #6
 8002b42:	2b07      	cmp	r3, #7
 8002b44:	d82a      	bhi.n	8002b9c <get_compression_type+0x68>
 8002b46:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <get_compression_type+0x18>)
 8002b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4c:	08002b6d 	.word	0x08002b6d
 8002b50:	08002b73 	.word	0x08002b73
 8002b54:	08002b79 	.word	0x08002b79
 8002b58:	08002b7f 	.word	0x08002b7f
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	08002b8b 	.word	0x08002b8b
 8002b64:	08002b91 	.word	0x08002b91
 8002b68:	08002b97 	.word	0x08002b97
  {
    case TAG_XL_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b70:	e017      	b.n	8002ba2 <get_compression_type+0x6e>
    case TAG_XL_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      break;
 8002b76:	e014      	b.n	8002ba2 <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7c:	e011      	b.n	8002ba2 <get_compression_type+0x6e>
    case TAG_XL_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	73fb      	strb	r3, [r7, #15]
      break;
 8002b82:	e00e      	b.n	8002ba2 <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_2:
      type = ST_FIFO_COMPRESSION_NC_T_2;
 8002b84:	2302      	movs	r3, #2
 8002b86:	73fb      	strb	r3, [r7, #15]
      break;
 8002b88:	e00b      	b.n	8002ba2 <get_compression_type+0x6e>
    case TAG_GY_UNCOMPRESSED_T_1:
      type = ST_FIFO_COMPRESSION_NC_T_1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8e:	e008      	b.n	8002ba2 <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_2X:
      type = ST_FIFO_COMPRESSION_2X;
 8002b90:	2303      	movs	r3, #3
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e005      	b.n	8002ba2 <get_compression_type+0x6e>
    case TAG_GY_COMPRESSED_3X:
      type = ST_FIFO_COMPRESSION_3X;
 8002b96:	2304      	movs	r3, #4
 8002b98:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9a:	e002      	b.n	8002ba2 <get_compression_type+0x6e>
    default:
      type = ST_FIFO_COMPRESSION_NC;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	bf00      	nop
  }

  return type;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <bdr_get_index>:
  *
  * @retval uint8_t           index of the nearest BDR.
  *
  */
static uint8_t bdr_get_index(const float *bdr, float n)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b095      	sub	sp, #84	; 0x54
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	ed87 0a00 	vstr	s0, [r7]
  float diff[16], min = FLT_MAX;
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <bdr_get_index+0xbc>)
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t idx = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

  for (uint8_t i = 0; i < 16u; i++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002bcc:	e019      	b.n	8002c02 <bdr_get_index+0x52>
  {
    diff[i] = fabsf(bdr[i] - n);
 8002bce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	ed93 7a00 	vldr	s14, [r3]
 8002bdc:	edd7 7a00 	vldr	s15, [r7]
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002be8:	eef0 7ae7 	vabs.f32	s15, s15
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	3350      	adds	r3, #80	; 0x50
 8002bf0:	443b      	add	r3, r7
 8002bf2:	3b48      	subs	r3, #72	; 0x48
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 16u; i++)
 8002bf8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002c02:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	d9e1      	bls.n	8002bce <bdr_get_index+0x1e>
  }

  for (uint8_t i = 0; i < 16u; i++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002c10:	e01f      	b.n	8002c52 <bdr_get_index+0xa2>
  {
    if (diff[i] < min)
 8002c12:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	3350      	adds	r3, #80	; 0x50
 8002c1a:	443b      	add	r3, r7
 8002c1c:	3b48      	subs	r3, #72	; 0x48
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	dd0b      	ble.n	8002c48 <bdr_get_index+0x98>
    {
      min = diff[i];
 8002c30:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	3350      	adds	r3, #80	; 0x50
 8002c38:	443b      	add	r3, r7
 8002c3a:	3b48      	subs	r3, #72	; 0x48
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      idx = i;
 8002c40:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002c44:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  for (uint8_t i = 0; i < 16u; i++)
 8002c48:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8002c52:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002c56:	2b0f      	cmp	r3, #15
 8002c58:	d9db      	bls.n	8002c12 <bdr_get_index+0x62>
    }
  }

  return idx;
 8002c5a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3754      	adds	r7, #84	; 0x54
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	7f7fffff 	.word	0x7f7fffff

08002c70 <has_even_parity>:
  *
  * @retval uint8_t           the byte has even parity (1) or not (0).
  *
  */
static uint8_t has_even_parity(uint8_t x)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
  uint8_t count = 0x00, b = 0x01;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	2301      	movs	r3, #1
 8002c80:	737b      	strb	r3, [r7, #13]

  for (uint8_t i = 0; i < 8u; i++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	73bb      	strb	r3, [r7, #14]
 8002c86:	e00d      	b.n	8002ca4 <has_even_parity+0x34>
  {
    if ((x & (b << i)) != 0x00u)
 8002c88:	79fa      	ldrb	r2, [r7, #7]
 8002c8a:	7b79      	ldrb	r1, [r7, #13]
 8002c8c:	7bbb      	ldrb	r3, [r7, #14]
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <has_even_parity+0x2e>
    {
      count++;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < 8u; i++)
 8002c9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	73bb      	strb	r3, [r7, #14]
 8002ca4:	7bbb      	ldrb	r3, [r7, #14]
 8002ca6:	2b07      	cmp	r3, #7
 8002ca8:	d9ee      	bls.n	8002c88 <has_even_parity+0x18>
    }
  }

  if ((count & 0x01u) == 0x01u)
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <has_even_parity+0x48>
  {
    return 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <has_even_parity+0x4a>
  }

  return 1;
 8002cb8:	2301      	movs	r3, #1
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <get_diff_2x>:
  * @param  diff[6]           compressed data (2x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_2x(int16_t diff[6], uint8_t input[6])
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 6u; i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e01d      	b.n	8002d12 <get_diff_2x+0x4c>
  {
    diff[i] = input[i] < 128u ? (int16_t)input[i] : (int16_t)input[i] - 256;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	db05      	blt.n	8002cf0 <get_diff_2x+0x2a>
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	e008      	b.n	8002d02 <get_diff_2x+0x3c>
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	b21b      	sxth	r3, r3
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	0052      	lsls	r2, r2, #1
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	440a      	add	r2, r1
 8002d0a:	8013      	strh	r3, [r2, #0]
  for (uint8_t i = 0; i < 6u; i++)
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d9de      	bls.n	8002cd6 <get_diff_2x+0x10>
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <get_diff_3x>:
  * @param  diff[6]           compressed data (3x).
  * @param  input[6]          FIFO raw word without tag.
  *
  */
static void get_diff_3x(int16_t diff[9], uint8_t input[6])
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
  uint16_t decode_tmp;

  for (uint8_t i = 0; i < 3u; i++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	e03a      	b.n	8002dac <get_diff_3x+0x86>
  {

    (void)memcpy(&decode_tmp, &input[2u * i], 2);
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	813b      	strh	r3, [r7, #8]

    for (uint8_t j = 0; j < 3u; j++)
 8002d44:	2300      	movs	r3, #0
 8002d46:	73bb      	strb	r3, [r7, #14]
 8002d48:	e02a      	b.n	8002da0 <get_diff_3x+0x7a>
    {
      uint16_t utmp = (decode_tmp & ((uint16_t)0x1Fu << (5u * j))) >> (5u * j);
 8002d4a:	893b      	ldrh	r3, [r7, #8]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	7bba      	ldrb	r2, [r7, #14]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	221f      	movs	r2, #31
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	4019      	ands	r1, r3
 8002d5e:	7bba      	ldrb	r2, [r7, #14]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	fa41 f303 	asr.w	r3, r1, r3
 8002d6a:	81bb      	strh	r3, [r7, #12]
      int16_t tmp = (int16_t)utmp;
 8002d6c:	89bb      	ldrh	r3, [r7, #12]
 8002d6e:	817b      	strh	r3, [r7, #10]
      diff[j + 3u * i] = tmp < 16 ? tmp : (tmp - 32);
 8002d70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	dd04      	ble.n	8002d82 <get_diff_3x+0x5c>
 8002d78:	897b      	ldrh	r3, [r7, #10]
 8002d7a:	3b20      	subs	r3, #32
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	b21a      	sxth	r2, r3
 8002d80:	e001      	b.n	8002d86 <get_diff_3x+0x60>
 8002d82:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d86:	7bb8      	ldrb	r0, [r7, #14]
 8002d88:	7bf9      	ldrb	r1, [r7, #15]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	440b      	add	r3, r1
 8002d90:	4403      	add	r3, r0
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	440b      	add	r3, r1
 8002d98:	801a      	strh	r2, [r3, #0]
    for (uint8_t j = 0; j < 3u; j++)
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	73bb      	strb	r3, [r7, #14]
 8002da0:	7bbb      	ldrb	r3, [r7, #14]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d9d1      	bls.n	8002d4a <get_diff_3x+0x24>
  for (uint8_t i = 0; i < 3u; i++)
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	3301      	adds	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d9c1      	bls.n	8002d36 <get_diff_3x+0x10>
    }
  }
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_MspInit+0x44>)
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <HAL_MspInit+0x44>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_MspInit+0x44>)
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_MspInit+0x44>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_MspInit+0x44>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_MspInit+0x44>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000

08002e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b0ac      	sub	sp, #176	; 0xb0
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	2288      	movs	r2, #136	; 0x88
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f00c ff42 	bl	800fcb2 <memset>
  if(hi2c->Instance==I2C3)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <HAL_I2C_MspInit+0xb0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d13b      	bne.n	8002eb0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e3c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 fea6 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e52:	f7fe f9e3 	bl	800121c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_I2C_MspInit+0xb4>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_I2C_MspInit+0xb4>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_I2C_MspInit+0xb4>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e74:	2312      	movs	r3, #18
 8002e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	2303      	movs	r3, #3
 8002e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e86:	2304      	movs	r3, #4
 8002e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e90:	4619      	mov	r1, r3
 8002e92:	480b      	ldr	r0, [pc, #44]	; (8002ec0 <HAL_I2C_MspInit+0xb8>)
 8002e94:	f000 fe72 	bl	8003b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_I2C_MspInit+0xb4>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <HAL_I2C_MspInit+0xb4>)
 8002e9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_I2C_MspInit+0xb4>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002eb0:	bf00      	nop
 8002eb2:	37b0      	adds	r7, #176	; 0xb0
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40005c00 	.word	0x40005c00
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	48000800 	.word	0x48000800

08002ec4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b0a4      	sub	sp, #144	; 0x90
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ecc:	f107 0308 	add.w	r3, r7, #8
 8002ed0:	2288      	movs	r2, #136	; 0x88
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f00c feec 	bl	800fcb2 <memset>
  if(hrtc->Instance==RTC)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <HAL_RTC_MspInit+0x5c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d118      	bne.n	8002f16 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 fe4e 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002f02:	f7fe f98b 	bl	800121c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <HAL_RTC_MspInit+0x60>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <HAL_RTC_MspInit+0x60>)
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f16:	bf00      	nop
 8002f18:	3790      	adds	r7, #144	; 0x90
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40002800 	.word	0x40002800
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a56      	ldr	r2, [pc, #344]	; (80030a0 <HAL_SD_MspInit+0x178>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	f040 80a5 	bne.w	8003096 <HAL_SD_MspInit+0x16e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002f4c:	4b55      	ldr	r3, [pc, #340]	; (80030a4 <HAL_SD_MspInit+0x17c>)
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f50:	4a54      	ldr	r2, [pc, #336]	; (80030a4 <HAL_SD_MspInit+0x17c>)
 8002f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f56:	6613      	str	r3, [r2, #96]	; 0x60
 8002f58:	4b52      	ldr	r3, [pc, #328]	; (80030a4 <HAL_SD_MspInit+0x17c>)
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f64:	4b4f      	ldr	r3, [pc, #316]	; (80030a4 <HAL_SD_MspInit+0x17c>)
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f68:	4a4e      	ldr	r2, [pc, #312]	; (80030a4 <HAL_SD_MspInit+0x17c>)
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f70:	4b4c      	ldr	r3, [pc, #304]	; (80030a4 <HAL_SD_MspInit+0x17c>)
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7c:	4b49      	ldr	r3, [pc, #292]	; (80030a4 <HAL_SD_MspInit+0x17c>)
 8002f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f80:	4a48      	ldr	r2, [pc, #288]	; (80030a4 <HAL_SD_MspInit+0x17c>)
 8002f82:	f043 0308 	orr.w	r3, r3, #8
 8002f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f88:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <HAL_SD_MspInit+0x17c>)
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f94:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002f98:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	4619      	mov	r1, r3
 8002fb0:	483d      	ldr	r0, [pc, #244]	; (80030a8 <HAL_SD_MspInit+0x180>)
 8002fb2:	f000 fde3 	bl	8003b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002fc6:	230c      	movs	r3, #12
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4836      	ldr	r0, [pc, #216]	; (80030ac <HAL_SD_MspInit+0x184>)
 8002fd2:	f000 fdd3 	bl	8003b7c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 8002fd6:	4b36      	ldr	r3, [pc, #216]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8002fd8:	4a36      	ldr	r2, [pc, #216]	; (80030b4 <HAL_SD_MspInit+0x18c>)
 8002fda:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 8002fdc:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8002fde:	2207      	movs	r2, #7
 8002fe0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe2:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fee:	4b30      	ldr	r3, [pc, #192]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ff4:	4b2e      	ldr	r3, [pc, #184]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8002ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffa:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ffc:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8002ffe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003002:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_SD_MspInit+0x188>)
 800300c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003010:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003012:	4827      	ldr	r0, [pc, #156]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8003014:	f000 fb7a 	bl	800370c <HAL_DMA_Init>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_SD_MspInit+0xfa>
    {
      Error_Handler();
 800301e:	f7fe f8fd 	bl	800121c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <HAL_SD_MspInit+0x188>)
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
 8003028:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <HAL_SD_MspInit+0x188>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_SD_MspInit+0x190>)
 8003030:	4a22      	ldr	r2, [pc, #136]	; (80030bc <HAL_SD_MspInit+0x194>)
 8003032:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 8003034:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_SD_MspInit+0x190>)
 8003036:	2207      	movs	r2, #7
 8003038:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <HAL_SD_MspInit+0x190>)
 800303c:	2210      	movs	r2, #16
 800303e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_SD_MspInit+0x190>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_SD_MspInit+0x190>)
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_SD_MspInit+0x190>)
 800304e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003052:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_SD_MspInit+0x190>)
 8003056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800305a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_SD_MspInit+0x190>)
 800305e:	2200      	movs	r2, #0
 8003060:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_SD_MspInit+0x190>)
 8003064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003068:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800306a:	4813      	ldr	r0, [pc, #76]	; (80030b8 <HAL_SD_MspInit+0x190>)
 800306c:	f000 fb4e 	bl	800370c <HAL_DMA_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_SD_MspInit+0x152>
    {
      Error_Handler();
 8003076:	f7fe f8d1 	bl	800121c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_SD_MspInit+0x190>)
 800307e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_SD_MspInit+0x190>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	2031      	movs	r0, #49	; 0x31
 800308c:	f000 fb07 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003090:	2031      	movs	r0, #49	; 0x31
 8003092:	f000 fb20 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003096:	bf00      	nop
 8003098:	3728      	adds	r7, #40	; 0x28
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40012800 	.word	0x40012800
 80030a4:	40021000 	.word	0x40021000
 80030a8:	48000800 	.word	0x48000800
 80030ac:	48000c00 	.word	0x48000c00
 80030b0:	200003ec 	.word	0x200003ec
 80030b4:	40020444 	.word	0x40020444
 80030b8:	20000434 	.word	0x20000434
 80030bc:	40020458 	.word	0x40020458

080030c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <NMI_Handler+0x4>

080030c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ca:	e7fe      	b.n	80030ca <HardFault_Handler+0x4>

080030cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <MemManage_Handler+0x4>

080030d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <BusFault_Handler+0x4>

080030d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030dc:	e7fe      	b.n	80030dc <UsageFault_Handler+0x4>

080030de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800310c:	f000 f9a8 	bl	8003460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}

08003114 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8003118:	2004      	movs	r0, #4
 800311a:	f000 fef1 	bl	8003f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}

08003122 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_INT_Pin);
 8003126:	2008      	movs	r0, #8
 8003128:	f000 feea 	bl	8003f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	bd80      	pop	{r7, pc}

08003130 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <SDMMC1_IRQHandler+0x10>)
 8003136:	f005 fd15 	bl	8008b64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000368 	.word	0x20000368

08003144 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <DMA2_Channel4_IRQHandler+0x10>)
 800314a:	f000 fc38 	bl	80039be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200003ec 	.word	0x200003ec

08003158 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <DMA2_Channel5_IRQHandler+0x10>)
 800315e:	f000 fc2e 	bl	80039be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000434 	.word	0x20000434

0800316c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <OTG_FS_IRQHandler+0x10>)
 8003172:	f001 fe49 	bl	8004e08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	2000330c 	.word	0x2000330c

08003180 <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af04      	add	r7, sp, #16
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	460b      	mov	r3, r1
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 800318e:	7afb      	ldrb	r3, [r7, #11]
 8003190:	b29a      	uxth	r2, r3
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	9302      	str	r3, [sp, #8]
 8003198:	2301      	movs	r3, #1
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2301      	movs	r3, #1
 80031a2:	2172      	movs	r1, #114	; 0x72
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f001 f873 	bl	8004290 <HAL_I2C_Mem_Read>
 80031aa:	4603      	mov	r3, r0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return 1;
 80031b8:	2301      	movs	r3, #1
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_kill>:

int _kill(int pid, int sig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031ce:	f00c fdc3 	bl	800fd58 <__errno>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2216      	movs	r2, #22
 80031d6:	601a      	str	r2, [r3, #0]
  return -1;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_exit>:

void _exit (int status)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031ec:	f04f 31ff 	mov.w	r1, #4294967295
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ffe7 	bl	80031c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80031f6:	e7fe      	b.n	80031f6 <_exit+0x12>

080031f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	e00a      	b.n	8003220 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800320a:	f3af 8000 	nop.w
 800320e:	4601      	mov	r1, r0
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	60ba      	str	r2, [r7, #8]
 8003216:	b2ca      	uxtb	r2, r1
 8003218:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3301      	adds	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	dbf0      	blt.n	800320a <_read+0x12>
  }

  return len;
 8003228:	687b      	ldr	r3, [r7, #4]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e009      	b.n	8003258 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	60ba      	str	r2, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3301      	adds	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	dbf1      	blt.n	8003244 <_write+0x12>
  }
  return len;
 8003260:	687b      	ldr	r3, [r7, #4]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <_close>:

int _close(int file)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003292:	605a      	str	r2, [r3, #4]
  return 0;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_isatty>:

int _isatty(int file)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032aa:	2301      	movs	r3, #1
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <_sbrk+0x5c>)
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <_sbrk+0x60>)
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <_sbrk+0x64>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <_sbrk+0x64>)
 80032f2:	4a12      	ldr	r2, [pc, #72]	; (800333c <_sbrk+0x68>)
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <_sbrk+0x64>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4413      	add	r3, r2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d207      	bcs.n	8003314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003304:	f00c fd28 	bl	800fd58 <__errno>
 8003308:	4603      	mov	r3, r0
 800330a:	220c      	movs	r2, #12
 800330c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	e009      	b.n	8003328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <_sbrk+0x64>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <_sbrk+0x64>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	4a05      	ldr	r2, [pc, #20]	; (8003338 <_sbrk+0x64>)
 8003324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20018000 	.word	0x20018000
 8003334:	00000800 	.word	0x00000800
 8003338:	20001e08 	.word	0x20001e08
 800333c:	20003b88 	.word	0x20003b88

08003340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <SystemInit+0x20>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	4a05      	ldr	r2, [pc, #20]	; (8003360 <SystemInit+0x20>)
 800334c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800339c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003368:	f7ff ffea 	bl	8003340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800336c:	480c      	ldr	r0, [pc, #48]	; (80033a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800336e:	490d      	ldr	r1, [pc, #52]	; (80033a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003370:	4a0d      	ldr	r2, [pc, #52]	; (80033a8 <LoopForever+0xe>)
  movs r3, #0
 8003372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003374:	e002      	b.n	800337c <LoopCopyDataInit>

08003376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800337a:	3304      	adds	r3, #4

0800337c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800337c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800337e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003380:	d3f9      	bcc.n	8003376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003384:	4c0a      	ldr	r4, [pc, #40]	; (80033b0 <LoopForever+0x16>)
  movs r3, #0
 8003386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003388:	e001      	b.n	800338e <LoopFillZerobss>

0800338a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800338a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800338c:	3204      	adds	r2, #4

0800338e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800338e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003390:	d3fb      	bcc.n	800338a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003392:	f00c fce7 	bl	800fd64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003396:	f7fd fd3f 	bl	8000e18 <main>

0800339a <LoopForever>:

LoopForever:
    b LoopForever
 800339a:	e7fe      	b.n	800339a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800339c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033a4:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80033a8:	08013c30 	.word	0x08013c30
  ldr r2, =_sbss
 80033ac:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80033b0:	20003b84 	.word	0x20003b84

080033b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033b4:	e7fe      	b.n	80033b4 <ADC1_2_IRQHandler>

080033b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c0:	2003      	movs	r0, #3
 80033c2:	f000 f961 	bl	8003688 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033c6:	200f      	movs	r0, #15
 80033c8:	f000 f80e 	bl	80033e8 <HAL_InitTick>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	71fb      	strb	r3, [r7, #7]
 80033d6:	e001      	b.n	80033dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033d8:	f7ff fcf2 	bl	8002dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033dc:	79fb      	ldrb	r3, [r7, #7]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033f4:	4b17      	ldr	r3, [pc, #92]	; (8003454 <HAL_InitTick+0x6c>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d023      	beq.n	8003444 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033fc:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_InitTick+0x70>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_InitTick+0x6c>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4619      	mov	r1, r3
 8003406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340a:	fbb3 f3f1 	udiv	r3, r3, r1
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f96d 	bl	80036f2 <HAL_SYSTICK_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10f      	bne.n	800343e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b0f      	cmp	r3, #15
 8003422:	d809      	bhi.n	8003438 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003424:	2200      	movs	r2, #0
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f000 f937 	bl	800369e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003430:	4a0a      	ldr	r2, [pc, #40]	; (800345c <HAL_InitTick+0x74>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e007      	b.n	8003448 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e004      	b.n	8003448 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
 8003442:	e001      	b.n	8003448 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000008 	.word	0x20000008
 8003458:	20000000 	.word	0x20000000
 800345c:	20000004 	.word	0x20000004

08003460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_IncTick+0x20>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_IncTick+0x24>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4413      	add	r3, r2
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <HAL_IncTick+0x24>)
 8003472:	6013      	str	r3, [r2, #0]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000008 	.word	0x20000008
 8003484:	20001e0c 	.word	0x20001e0c

08003488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return uwTick;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_GetTick+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20001e0c 	.word	0x20001e0c

080034a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034a8:	f7ff ffee 	bl	8003488 <HAL_GetTick>
 80034ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d005      	beq.n	80034c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_Delay+0x44>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034c6:	bf00      	nop
 80034c8:	f7ff ffde 	bl	8003488 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d8f7      	bhi.n	80034c8 <HAL_Delay+0x28>
  {
  }
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000008 	.word	0x20000008

080034e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351a:	4a04      	ldr	r2, [pc, #16]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	60d3      	str	r3, [r2, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <__NVIC_GetPriorityGrouping+0x18>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0307 	and.w	r3, r3, #7
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db0b      	blt.n	8003576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4907      	ldr	r1, [pc, #28]	; (8003584 <__NVIC_EnableIRQ+0x38>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2001      	movs	r0, #1
 800356e:	fa00 f202 	lsl.w	r2, r0, r2
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000e100 	.word	0xe000e100

08003588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db0a      	blt.n	80035b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <__NVIC_SetPriority+0x4c>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b0:	e00a      	b.n	80035c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4908      	ldr	r1, [pc, #32]	; (80035d8 <__NVIC_SetPriority+0x50>)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3b04      	subs	r3, #4
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	761a      	strb	r2, [r3, #24]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	bf28      	it	cs
 80035fa:	2304      	movcs	r3, #4
 80035fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3304      	adds	r3, #4
 8003602:	2b06      	cmp	r3, #6
 8003604:	d902      	bls.n	800360c <NVIC_EncodePriority+0x30>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3b03      	subs	r3, #3
 800360a:	e000      	b.n	800360e <NVIC_EncodePriority+0x32>
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	401a      	ands	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003624:	f04f 31ff 	mov.w	r1, #4294967295
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43d9      	mvns	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	4313      	orrs	r3, r2
         );
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003654:	d301      	bcc.n	800365a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003656:	2301      	movs	r3, #1
 8003658:	e00f      	b.n	800367a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <SysTick_Config+0x40>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003662:	210f      	movs	r1, #15
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f7ff ff8e 	bl	8003588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <SysTick_Config+0x40>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <SysTick_Config+0x40>)
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000e010 	.word	0xe000e010

08003688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff29 	bl	80034e8 <__NVIC_SetPriorityGrouping>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036b0:	f7ff ff3e 	bl	8003530 <__NVIC_GetPriorityGrouping>
 80036b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f7ff ff8e 	bl	80035dc <NVIC_EncodePriority>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff5d 	bl	8003588 <__NVIC_SetPriority>
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff31 	bl	800354c <__NVIC_EnableIRQ>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffa2 	bl	8003644 <SysTick_Config>
 8003700:	4603      	mov	r3, r0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e098      	b.n	8003850 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	4b4d      	ldr	r3, [pc, #308]	; (800385c <HAL_DMA_Init+0x150>)
 8003726:	429a      	cmp	r2, r3
 8003728:	d80f      	bhi.n	800374a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	4b4b      	ldr	r3, [pc, #300]	; (8003860 <HAL_DMA_Init+0x154>)
 8003732:	4413      	add	r3, r2
 8003734:	4a4b      	ldr	r2, [pc, #300]	; (8003864 <HAL_DMA_Init+0x158>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	009a      	lsls	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a48      	ldr	r2, [pc, #288]	; (8003868 <HAL_DMA_Init+0x15c>)
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
 8003748:	e00e      	b.n	8003768 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	4b46      	ldr	r3, [pc, #280]	; (800386c <HAL_DMA_Init+0x160>)
 8003752:	4413      	add	r3, r2
 8003754:	4a43      	ldr	r2, [pc, #268]	; (8003864 <HAL_DMA_Init+0x158>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	009a      	lsls	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a42      	ldr	r2, [pc, #264]	; (8003870 <HAL_DMA_Init+0x164>)
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800378c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c2:	d039      	beq.n	8003838 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	4a27      	ldr	r2, [pc, #156]	; (8003868 <HAL_DMA_Init+0x15c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d11a      	bne.n	8003804 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_DMA_Init+0x168>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f003 031c 	and.w	r3, r3, #28
 80037da:	210f      	movs	r1, #15
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	4924      	ldr	r1, [pc, #144]	; (8003874 <HAL_DMA_Init+0x168>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037e8:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_DMA_Init+0x168>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	f003 031c 	and.w	r3, r3, #28
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	491d      	ldr	r1, [pc, #116]	; (8003874 <HAL_DMA_Init+0x168>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]
 8003802:	e019      	b.n	8003838 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_DMA_Init+0x16c>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f003 031c 	and.w	r3, r3, #28
 8003810:	210f      	movs	r1, #15
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	4917      	ldr	r1, [pc, #92]	; (8003878 <HAL_DMA_Init+0x16c>)
 800381a:	4013      	ands	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_DMA_Init+0x16c>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f003 031c 	and.w	r3, r3, #28
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	4911      	ldr	r1, [pc, #68]	; (8003878 <HAL_DMA_Init+0x16c>)
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40020407 	.word	0x40020407
 8003860:	bffdfff8 	.word	0xbffdfff8
 8003864:	cccccccd 	.word	0xcccccccd
 8003868:	40020000 	.word	0x40020000
 800386c:	bffdfbf8 	.word	0xbffdfbf8
 8003870:	40020400 	.word	0x40020400
 8003874:	400200a8 	.word	0x400200a8
 8003878:	400204a8 	.word	0x400204a8

0800387c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_DMA_Start_IT+0x20>
 8003898:	2302      	movs	r3, #2
 800389a:	e04b      	b.n	8003934 <HAL_DMA_Start_IT+0xb8>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d13a      	bne.n	8003926 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f921 	bl	8003b1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 020e 	orr.w	r2, r2, #14
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e00f      	b.n	8003914 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0204 	bic.w	r2, r2, #4
 8003902:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 020a 	orr.w	r2, r2, #10
 8003912:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e005      	b.n	8003932 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800392e:	2302      	movs	r3, #2
 8003930:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d005      	beq.n	8003960 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e029      	b.n	80039b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 020e 	bic.w	r2, r2, #14
 800396e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	f003 021c 	and.w	r2, r3, #28
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	2101      	movs	r1, #1
 800398e:	fa01 f202 	lsl.w	r2, r1, r2
 8003992:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
    }
  }
  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039da:	f003 031c 	and.w	r3, r3, #28
 80039de:	2204      	movs	r2, #4
 80039e0:	409a      	lsls	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d026      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x7a>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d021      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d107      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0204 	bic.w	r2, r2, #4
 8003a10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f003 021c 	and.w	r2, r3, #28
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2104      	movs	r1, #4
 8003a20:	fa01 f202 	lsl.w	r2, r1, r2
 8003a24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d071      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a36:	e06c      	b.n	8003b12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f003 031c 	and.w	r3, r3, #28
 8003a40:	2202      	movs	r2, #2
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02e      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xec>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d029      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 020a 	bic.w	r2, r2, #10
 8003a72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f003 021c 	and.w	r2, r3, #28
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2102      	movs	r1, #2
 8003a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d038      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003aa8:	e033      	b.n	8003b12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f003 031c 	and.w	r3, r3, #28
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d02a      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x156>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d025      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 020e 	bic.w	r2, r2, #14
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	f003 021c 	and.w	r2, r3, #28
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b12:	bf00      	nop
 8003b14:	bf00      	nop
}
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f003 021c 	and.w	r2, r3, #28
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d108      	bne.n	8003b60 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b5e:	e007      	b.n	8003b70 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8a:	e17f      	b.n	8003e8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa01 f303 	lsl.w	r3, r1, r3
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8171 	beq.w	8003e86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d005      	beq.n	8003bbc <HAL_GPIO_Init+0x40>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d130      	bne.n	8003c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 0201 	and.w	r2, r3, #1
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d118      	bne.n	8003c5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c30:	2201      	movs	r2, #1
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	f003 0201 	and.w	r2, r3, #1
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d017      	beq.n	8003c98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d123      	bne.n	8003cec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	08da      	lsrs	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3208      	adds	r2, #8
 8003cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	220f      	movs	r2, #15
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	6939      	ldr	r1, [r7, #16]
 8003ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0203 	and.w	r2, r3, #3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80ac 	beq.w	8003e86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2e:	4b5f      	ldr	r3, [pc, #380]	; (8003eac <HAL_GPIO_Init+0x330>)
 8003d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d32:	4a5e      	ldr	r2, [pc, #376]	; (8003eac <HAL_GPIO_Init+0x330>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6613      	str	r3, [r2, #96]	; 0x60
 8003d3a:	4b5c      	ldr	r3, [pc, #368]	; (8003eac <HAL_GPIO_Init+0x330>)
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d46:	4a5a      	ldr	r2, [pc, #360]	; (8003eb0 <HAL_GPIO_Init+0x334>)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	220f      	movs	r2, #15
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d70:	d025      	beq.n	8003dbe <HAL_GPIO_Init+0x242>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a4f      	ldr	r2, [pc, #316]	; (8003eb4 <HAL_GPIO_Init+0x338>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01f      	beq.n	8003dba <HAL_GPIO_Init+0x23e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a4e      	ldr	r2, [pc, #312]	; (8003eb8 <HAL_GPIO_Init+0x33c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d019      	beq.n	8003db6 <HAL_GPIO_Init+0x23a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4d      	ldr	r2, [pc, #308]	; (8003ebc <HAL_GPIO_Init+0x340>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d013      	beq.n	8003db2 <HAL_GPIO_Init+0x236>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4c      	ldr	r2, [pc, #304]	; (8003ec0 <HAL_GPIO_Init+0x344>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00d      	beq.n	8003dae <HAL_GPIO_Init+0x232>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4b      	ldr	r2, [pc, #300]	; (8003ec4 <HAL_GPIO_Init+0x348>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <HAL_GPIO_Init+0x22e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4a      	ldr	r2, [pc, #296]	; (8003ec8 <HAL_GPIO_Init+0x34c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <HAL_GPIO_Init+0x22a>
 8003da2:	2306      	movs	r3, #6
 8003da4:	e00c      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003da6:	2307      	movs	r3, #7
 8003da8:	e00a      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003daa:	2305      	movs	r3, #5
 8003dac:	e008      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003dae:	2304      	movs	r3, #4
 8003db0:	e006      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003db2:	2303      	movs	r3, #3
 8003db4:	e004      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e002      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_GPIO_Init+0x244>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	f002 0203 	and.w	r2, r2, #3
 8003dc6:	0092      	lsls	r2, r2, #2
 8003dc8:	4093      	lsls	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dd0:	4937      	ldr	r1, [pc, #220]	; (8003eb0 <HAL_GPIO_Init+0x334>)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	089b      	lsrs	r3, r3, #2
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dde:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e02:	4a32      	ldr	r2, [pc, #200]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e08:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e32:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e56:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e80:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <HAL_GPIO_Init+0x350>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	fa22 f303 	lsr.w	r3, r2, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f47f ae78 	bne.w	8003b8c <HAL_GPIO_Init+0x10>
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40010000 	.word	0x40010000
 8003eb4:	48000400 	.word	0x48000400
 8003eb8:	48000800 	.word	0x48000800
 8003ebc:	48000c00 	.word	0x48000c00
 8003ec0:	48001000 	.word	0x48001000
 8003ec4:	48001400 	.word	0x48001400
 8003ec8:	48001800 	.word	0x48001800
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	887b      	ldrh	r3, [r7, #2]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
 8003eec:	e001      	b.n	8003ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f16:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc ff6e 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40010400 	.word	0x40010400

08003f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e08d      	b.n	800405e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fe ff56 	bl	8002e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d107      	bne.n	8003faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	e006      	b.n	8003fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d108      	bne.n	8003fd2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	e007      	b.n	8003fe2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69d9      	ldr	r1, [r3, #28]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4603      	mov	r3, r0
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	460b      	mov	r3, r1
 800407c:	813b      	strh	r3, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b20      	cmp	r3, #32
 800408c:	f040 80f9 	bne.w	8004282 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_I2C_Mem_Write+0x34>
 8004096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0ed      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_I2C_Mem_Write+0x4e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0e6      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040be:	f7ff f9e3 	bl	8003488 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2319      	movs	r3, #25
 80040ca:	2201      	movs	r2, #1
 80040cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fac3 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0d1      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2221      	movs	r2, #33	; 0x21
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2240      	movs	r2, #64	; 0x40
 80040ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004108:	88f8      	ldrh	r0, [r7, #6]
 800410a:	893a      	ldrh	r2, [r7, #8]
 800410c:	8979      	ldrh	r1, [r7, #10]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	4603      	mov	r3, r0
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f9d3 	bl	80044c4 <I2C_RequestMemoryWrite>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0a9      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2bff      	cmp	r3, #255	; 0xff
 8004138:	d90e      	bls.n	8004158 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004144:	b2da      	uxtb	r2, r3
 8004146:	8979      	ldrh	r1, [r7, #10]
 8004148:	2300      	movs	r3, #0
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fc3d 	bl	80049d0 <I2C_TransferConfig>
 8004156:	e00f      	b.n	8004178 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	b2da      	uxtb	r2, r3
 8004168:	8979      	ldrh	r1, [r7, #10]
 800416a:	2300      	movs	r3, #0
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fc2c 	bl	80049d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fabc 	bl	80046fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e07b      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	781a      	ldrb	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d034      	beq.n	8004230 <HAL_I2C_Mem_Write+0x1c8>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d130      	bne.n	8004230 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fa3f 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e04d      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2bff      	cmp	r3, #255	; 0xff
 80041f0:	d90e      	bls.n	8004210 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	22ff      	movs	r2, #255	; 0xff
 80041f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	8979      	ldrh	r1, [r7, #10]
 8004200:	2300      	movs	r3, #0
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fbe1 	bl	80049d0 <I2C_TransferConfig>
 800420e:	e00f      	b.n	8004230 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421e:	b2da      	uxtb	r2, r3
 8004220:	8979      	ldrh	r1, [r7, #10]
 8004222:	2300      	movs	r3, #0
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fbd0 	bl	80049d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d19e      	bne.n	8004178 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 faa2 	bl	8004788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e01a      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2220      	movs	r2, #32
 8004254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b0a      	ldr	r3, [pc, #40]	; (800428c <HAL_I2C_Mem_Write+0x224>)
 8004262:	400b      	ands	r3, r1
 8004264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	fe00e800 	.word	0xfe00e800

08004290 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	461a      	mov	r2, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	817b      	strh	r3, [r7, #10]
 80042a2:	460b      	mov	r3, r1
 80042a4:	813b      	strh	r3, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	f040 80fd 	bne.w	80044b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_I2C_Mem_Read+0x34>
 80042be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0f1      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_I2C_Mem_Read+0x4e>
 80042da:	2302      	movs	r3, #2
 80042dc:	e0ea      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042e6:	f7ff f8cf 	bl	8003488 <HAL_GetTick>
 80042ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	2319      	movs	r3, #25
 80042f2:	2201      	movs	r2, #1
 80042f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f9af 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0d5      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2222      	movs	r2, #34	; 0x22
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2240      	movs	r2, #64	; 0x40
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a3a      	ldr	r2, [r7, #32]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004330:	88f8      	ldrh	r0, [r7, #6]
 8004332:	893a      	ldrh	r2, [r7, #8]
 8004334:	8979      	ldrh	r1, [r7, #10]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	4603      	mov	r3, r0
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f913 	bl	800456c <I2C_RequestMemoryRead>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0ad      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2bff      	cmp	r3, #255	; 0xff
 8004360:	d90e      	bls.n	8004380 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	22ff      	movs	r2, #255	; 0xff
 8004366:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	b2da      	uxtb	r2, r3
 800436e:	8979      	ldrh	r1, [r7, #10]
 8004370:	4b52      	ldr	r3, [pc, #328]	; (80044bc <HAL_I2C_Mem_Read+0x22c>)
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fb29 	bl	80049d0 <I2C_TransferConfig>
 800437e:	e00f      	b.n	80043a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438e:	b2da      	uxtb	r2, r3
 8004390:	8979      	ldrh	r1, [r7, #10]
 8004392:	4b4a      	ldr	r3, [pc, #296]	; (80044bc <HAL_I2C_Mem_Read+0x22c>)
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fb18 	bl	80049d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	2200      	movs	r2, #0
 80043a8:	2104      	movs	r1, #4
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f956 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e07c      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d034      	beq.n	8004460 <HAL_I2C_Mem_Read+0x1d0>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d130      	bne.n	8004460 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	2200      	movs	r2, #0
 8004406:	2180      	movs	r1, #128	; 0x80
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f927 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e04d      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	2bff      	cmp	r3, #255	; 0xff
 8004420:	d90e      	bls.n	8004440 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	22ff      	movs	r2, #255	; 0xff
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	b2da      	uxtb	r2, r3
 800442e:	8979      	ldrh	r1, [r7, #10]
 8004430:	2300      	movs	r3, #0
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fac9 	bl	80049d0 <I2C_TransferConfig>
 800443e:	e00f      	b.n	8004460 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	b2da      	uxtb	r2, r3
 8004450:	8979      	ldrh	r1, [r7, #10]
 8004452:	2300      	movs	r3, #0
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fab8 	bl	80049d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d19a      	bne.n	80043a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f98a 	bl	8004788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e01a      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2220      	movs	r2, #32
 8004484:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <HAL_I2C_Mem_Read+0x230>)
 8004492:	400b      	ands	r3, r1
 8004494:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e000      	b.n	80044b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044b2:	2302      	movs	r3, #2
  }
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	80002400 	.word	0x80002400
 80044c0:	fe00e800 	.word	0xfe00e800

080044c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	4608      	mov	r0, r1
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	817b      	strh	r3, [r7, #10]
 80044d6:	460b      	mov	r3, r1
 80044d8:	813b      	strh	r3, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	8979      	ldrh	r1, [r7, #10]
 80044e4:	4b20      	ldr	r3, [pc, #128]	; (8004568 <I2C_RequestMemoryWrite+0xa4>)
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fa6f 	bl	80049d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 f8ff 	bl	80046fa <I2C_WaitOnTXISFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e02c      	b.n	8004560 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800450c:	893b      	ldrh	r3, [r7, #8]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	629a      	str	r2, [r3, #40]	; 0x28
 8004516:	e015      	b.n	8004544 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004518:	893b      	ldrh	r3, [r7, #8]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	b29b      	uxth	r3, r3
 800451e:	b2da      	uxtb	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f8e5 	bl	80046fa <I2C_WaitOnTXISFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e012      	b.n	8004560 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800453a:	893b      	ldrh	r3, [r7, #8]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2200      	movs	r2, #0
 800454c:	2180      	movs	r1, #128	; 0x80
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f884 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	80002000 	.word	0x80002000

0800456c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	4608      	mov	r0, r1
 8004576:	4611      	mov	r1, r2
 8004578:	461a      	mov	r2, r3
 800457a:	4603      	mov	r3, r0
 800457c:	817b      	strh	r3, [r7, #10]
 800457e:	460b      	mov	r3, r1
 8004580:	813b      	strh	r3, [r7, #8]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	8979      	ldrh	r1, [r7, #10]
 800458c:	4b20      	ldr	r3, [pc, #128]	; (8004610 <I2C_RequestMemoryRead+0xa4>)
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fa1c 	bl	80049d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	69b9      	ldr	r1, [r7, #24]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f8ac 	bl	80046fa <I2C_WaitOnTXISFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e02c      	b.n	8004606 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045b2:	893b      	ldrh	r3, [r7, #8]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
 80045bc:	e015      	b.n	80045ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045be:	893b      	ldrh	r3, [r7, #8]
 80045c0:	0a1b      	lsrs	r3, r3, #8
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	69b9      	ldr	r1, [r7, #24]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f892 	bl	80046fa <I2C_WaitOnTXISFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e012      	b.n	8004606 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045e0:	893b      	ldrh	r3, [r7, #8]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2140      	movs	r1, #64	; 0x40
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f831 	bl	800465c <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	80002000 	.word	0x80002000

08004614 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b02      	cmp	r3, #2
 8004628:	d103      	bne.n	8004632 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d007      	beq.n	8004650 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	619a      	str	r2, [r3, #24]
  }
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800466c:	e031      	b.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d02d      	beq.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fe ff07 	bl	8003488 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d122      	bne.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4013      	ands	r3, r2
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d113      	bne.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f043 0220 	orr.w	r2, r3, #32
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e00f      	b.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d0be      	beq.n	800466e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004706:	e033      	b.n	8004770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f87f 	bl	8004810 <I2C_IsErrorOccurred>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e031      	b.n	8004780 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d025      	beq.n	8004770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004724:	f7fe feb0 	bl	8003488 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	429a      	cmp	r2, r3
 8004732:	d302      	bcc.n	800473a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11a      	bne.n	8004770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b02      	cmp	r3, #2
 8004746:	d013      	beq.n	8004770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e007      	b.n	8004780 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b02      	cmp	r3, #2
 800477c:	d1c4      	bne.n	8004708 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004794:	e02f      	b.n	80047f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f838 	bl	8004810 <I2C_IsErrorOccurred>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e02d      	b.n	8004806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fe fe6d 	bl	8003488 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d11a      	bne.n	80047f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d013      	beq.n	80047f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e007      	b.n	8004806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b20      	cmp	r3, #32
 8004802:	d1c8      	bne.n	8004796 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	; 0x28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d068      	beq.n	800490e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2210      	movs	r2, #16
 8004842:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004844:	e049      	b.n	80048da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d045      	beq.n	80048da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800484e:	f7fe fe1b 	bl	8003488 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <I2C_IsErrorOccurred+0x54>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d13a      	bne.n	80048da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004876:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004886:	d121      	bne.n	80048cc <I2C_IsErrorOccurred+0xbc>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800488e:	d01d      	beq.n	80048cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	2b20      	cmp	r3, #32
 8004894:	d01a      	beq.n	80048cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048a6:	f7fe fdef 	bl	8003488 <HAL_GetTick>
 80048aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048ac:	e00e      	b.n	80048cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048ae:	f7fe fdeb 	bl	8003488 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b19      	cmp	r3, #25
 80048ba:	d907      	bls.n	80048cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	f043 0320 	orr.w	r3, r3, #32
 80048c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80048ca:	e006      	b.n	80048da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d1e9      	bne.n	80048ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d003      	beq.n	80048f0 <I2C_IsErrorOccurred+0xe0>
 80048e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0aa      	beq.n	8004846 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d103      	bne.n	8004900 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2220      	movs	r2, #32
 80048fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f043 0304 	orr.w	r3, r3, #4
 8004906:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00b      	beq.n	8004938 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004930:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	f043 0308 	orr.w	r3, r3, #8
 8004948:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004952:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00b      	beq.n	800497c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f043 0302 	orr.w	r3, r3, #2
 800496a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800497c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01c      	beq.n	80049be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fe45 	bl	8004614 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <I2C_IsErrorOccurred+0x1bc>)
 8004996:	400b      	ands	r3, r1
 8004998:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80049be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3728      	adds	r7, #40	; 0x28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	fe00e800 	.word	0xfe00e800

080049d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	817b      	strh	r3, [r7, #10]
 80049de:	4613      	mov	r3, r2
 80049e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049e2:	897b      	ldrh	r3, [r7, #10]
 80049e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049e8:	7a7b      	ldrb	r3, [r7, #9]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	0d5b      	lsrs	r3, r3, #21
 8004a0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <I2C_TransferConfig+0x60>)
 8004a10:	430b      	orrs	r3, r1
 8004a12:	43db      	mvns	r3, r3
 8004a14:	ea02 0103 	and.w	r1, r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	03ff63ff 	.word	0x03ff63ff

08004a34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d138      	bne.n	8004abc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e032      	b.n	8004abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	; 0x24
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d139      	bne.n	8004b54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e033      	b.n	8004b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2224      	movs	r2, #36	; 0x24
 8004afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	e000      	b.n	8004b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
  }
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b64:	b08f      	sub	sp, #60	; 0x3c
 8004b66:	af0a      	add	r7, sp, #40	; 0x28
 8004b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e116      	b.n	8004da2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f009 fcee 	bl	800e570 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2203      	movs	r2, #3
 8004b98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d102      	bne.n	8004bae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f005 fee3 	bl	800a97e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	687e      	ldr	r6, [r7, #4]
 8004bc0:	466d      	mov	r5, sp
 8004bc2:	f106 0410 	add.w	r4, r6, #16
 8004bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bd6:	1d33      	adds	r3, r6, #4
 8004bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bda:	6838      	ldr	r0, [r7, #0]
 8004bdc:	f005 fdf6 	bl	800a7cc <USB_CoreInit>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0d7      	b.n	8004da2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f005 fed1 	bl	800a9a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	e04a      	b.n	8004c9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c04:	7bfa      	ldrb	r2, [r7, #15]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	333d      	adds	r3, #61	; 0x3d
 8004c14:	2201      	movs	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c18:	7bfa      	ldrb	r2, [r7, #15]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	333c      	adds	r3, #60	; 0x3c
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c2c:	7bfa      	ldrb	r2, [r7, #15]
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	b298      	uxth	r0, r3
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3356      	adds	r3, #86	; 0x56
 8004c40:	4602      	mov	r2, r0
 8004c42:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c44:	7bfa      	ldrb	r2, [r7, #15]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	3340      	adds	r3, #64	; 0x40
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	3344      	adds	r3, #68	; 0x44
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c6c:	7bfa      	ldrb	r2, [r7, #15]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	3348      	adds	r3, #72	; 0x48
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	334c      	adds	r3, #76	; 0x4c
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	3301      	adds	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d3af      	bcc.n	8004c04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]
 8004ca8:	e044      	b.n	8004d34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cc0:	7bfa      	ldrb	r2, [r7, #15]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004cd2:	7bfa      	ldrb	r2, [r7, #15]
 8004cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cd6:	7bfa      	ldrb	r2, [r7, #15]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cec:	7bfa      	ldrb	r2, [r7, #15]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d02:	7bfa      	ldrb	r2, [r7, #15]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d18:	7bfa      	ldrb	r2, [r7, #15]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	3301      	adds	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d3b5      	bcc.n	8004caa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	687e      	ldr	r6, [r7, #4]
 8004d46:	466d      	mov	r5, sp
 8004d48:	f106 0410 	add.w	r4, r6, #16
 8004d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d58:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d5c:	1d33      	adds	r3, r6, #4
 8004d5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d60:	6838      	ldr	r0, [r7, #0]
 8004d62:	f005 fe69 	bl	800aa38 <USB_DevInit>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e014      	b.n	8004da2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d102      	bne.n	8004d96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 f869 	bl	8005e68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f006 fe17 	bl	800b9ce <USB_DevDisconnect>

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004daa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_PCD_Start+0x1c>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e01c      	b.n	8004e00 <HAL_PCD_Start+0x56>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f005 fdb8 	bl	800a95c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f006 fdcb 	bl	800b98c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b08d      	sub	sp, #52	; 0x34
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f006 fe89 	bl	800bb36 <USB_GetMode>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 847e 	bne.w	8005728 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f006 fded 	bl	800ba10 <USB_ReadInterrupts>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8474 	beq.w	8005726 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f006 fdda 	bl	800ba10 <USB_ReadInterrupts>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d107      	bne.n	8004e76 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f002 0202 	and.w	r2, r2, #2
 8004e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f006 fdc8 	bl	800ba10 <USB_ReadInterrupts>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b10      	cmp	r3, #16
 8004e88:	d161      	bne.n	8004f4e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0210 	bic.w	r2, r2, #16
 8004e98:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f003 020f 	and.w	r2, r3, #15
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	0c5b      	lsrs	r3, r3, #17
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d124      	bne.n	8004f10 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d035      	beq.n	8004f3e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6a38      	ldr	r0, [r7, #32]
 8004ee6:	f006 fbff 	bl	800b6e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ef6:	441a      	add	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f08:	441a      	add	r2, r3
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	615a      	str	r2, [r3, #20]
 8004f0e:	e016      	b.n	8004f3e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	0c5b      	lsrs	r3, r3, #17
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	2b06      	cmp	r3, #6
 8004f1a:	d110      	bne.n	8004f3e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f22:	2208      	movs	r2, #8
 8004f24:	4619      	mov	r1, r3
 8004f26:	6a38      	ldr	r0, [r7, #32]
 8004f28:	f006 fbde 	bl	800b6e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	091b      	lsrs	r3, r3, #4
 8004f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f38:	441a      	add	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0210 	orr.w	r2, r2, #16
 8004f4c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f006 fd5c 	bl	800ba10 <USB_ReadInterrupts>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f62:	f040 80a7 	bne.w	80050b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f006 fd61 	bl	800ba36 <USB_ReadDevAllOutEpInterrupt>
 8004f74:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f76:	e099      	b.n	80050ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 808e 	beq.w	80050a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f006 fd85 	bl	800ba9e <USB_ReadDevOutEPInterrupt>
 8004f94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	461a      	mov	r2, r3
 8004fae:	2301      	movs	r3, #1
 8004fb0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fe7d 	bl	8005cb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00c      	beq.n	8004fde <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 feb9 	bl	8005d50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2310      	movs	r3, #16
 8004ff8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d030      	beq.n	8005066 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500c:	2b80      	cmp	r3, #128	; 0x80
 800500e:	d109      	bne.n	8005024 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800501e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005022:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005026:	4613      	mov	r3, r2
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	3304      	adds	r3, #4
 8005038:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	78db      	ldrb	r3, [r3, #3]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d108      	bne.n	8005054 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	b2db      	uxtb	r3, r3
 800504c:	4619      	mov	r1, r3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f009 fbb6 	bl	800e7c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	2302      	movs	r3, #2
 8005064:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	461a      	mov	r2, r3
 800507e:	2320      	movs	r3, #32
 8005080:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005098:	461a      	mov	r2, r3
 800509a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800509e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	3301      	adds	r3, #1
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f47f af62 	bne.w	8004f78 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f006 fca9 	bl	800ba10 <USB_ReadInterrupts>
 80050be:	4603      	mov	r3, r0
 80050c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050c8:	f040 80a4 	bne.w	8005214 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f006 fcca 	bl	800ba6a <USB_ReadDevAllInEpInterrupt>
 80050d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80050dc:	e096      	b.n	800520c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 808b 	beq.w	8005200 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f006 fcf0 	bl	800bada <USB_ReadDevInEPInterrupt>
 80050fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d020      	beq.n	8005148 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	2201      	movs	r2, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	43db      	mvns	r3, r3
 8005120:	69f9      	ldr	r1, [r7, #28]
 8005122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005126:	4013      	ands	r3, r2
 8005128:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	461a      	mov	r2, r3
 8005138:	2301      	movs	r3, #1
 800513a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	b2db      	uxtb	r3, r3
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f009 faa7 	bl	800e696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	461a      	mov	r2, r3
 8005160:	2308      	movs	r3, #8
 8005162:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	461a      	mov	r2, r3
 800517c:	2310      	movs	r3, #16
 800517e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	461a      	mov	r2, r3
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d023      	beq.n	80051ee <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051a8:	6a38      	ldr	r0, [r7, #32]
 80051aa:	f005 fd87 	bl	800acbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	3338      	adds	r3, #56	; 0x38
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	78db      	ldrb	r3, [r3, #3]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d108      	bne.n	80051dc <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f009 fb04 	bl	800e7e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	461a      	mov	r2, r3
 80051ea:	2302      	movs	r3, #2
 80051ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80051f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fcd2 	bl	8005ba4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	3301      	adds	r3, #1
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	085b      	lsrs	r3, r3, #1
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	f47f af65 	bne.w	80050de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f006 fbf9 	bl	800ba10 <USB_ReadInterrupts>
 800521e:	4603      	mov	r3, r0
 8005220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005228:	d122      	bne.n	8005270 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005238:	f023 0301 	bic.w	r3, r3, #1
 800523c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005244:	2b01      	cmp	r3, #1
 8005246:	d108      	bne.n	800525a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005250:	2100      	movs	r1, #0
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f009 fd38 	bl	800ecc8 <HAL_PCDEx_LPM_Callback>
 8005258:	e002      	b.n	8005260 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f009 fa88 	bl	800e770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800526e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f006 fbcb 	bl	800ba10 <USB_ReadInterrupts>
 800527a:	4603      	mov	r3, r0
 800527c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005284:	d112      	bne.n	80052ac <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b01      	cmp	r3, #1
 8005294:	d102      	bne.n	800529c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f009 fa44 	bl	800e724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80052aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f006 fbad 	bl	800ba10 <USB_ReadInterrupts>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c0:	d121      	bne.n	8005306 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80052d0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d111      	bne.n	8005300 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	089b      	lsrs	r3, r3, #2
 80052ec:	f003 020f 	and.w	r2, r3, #15
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80052f6:	2101      	movs	r1, #1
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f009 fce5 	bl	800ecc8 <HAL_PCDEx_LPM_Callback>
 80052fe:	e002      	b.n	8005306 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f009 fa0f 	bl	800e724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f006 fb80 	bl	800ba10 <USB_ReadInterrupts>
 8005310:	4603      	mov	r3, r0
 8005312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531a:	f040 80b5 	bne.w	8005488 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2110      	movs	r1, #16
 8005338:	4618      	mov	r0, r3
 800533a:	f005 fcbf 	bl	800acbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800533e:	2300      	movs	r3, #0
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005342:	e046      	b.n	80053d2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	461a      	mov	r2, r3
 8005352:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005356:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005368:	0151      	lsls	r1, r2, #5
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	440a      	add	r2, r1
 800536e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005372:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005376:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	461a      	mov	r2, r3
 8005386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800538a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	3301      	adds	r3, #1
 80053d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d8:	429a      	cmp	r2, r3
 80053da:	d3b3      	bcc.n	8005344 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80053ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d016      	beq.n	8005426 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005408:	f043 030b 	orr.w	r3, r3, #11
 800540c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541e:	f043 030b 	orr.w	r3, r3, #11
 8005422:	6453      	str	r3, [r2, #68]	; 0x44
 8005424:	e015      	b.n	8005452 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005438:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800543c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800544c:	f043 030b 	orr.w	r3, r3, #11
 8005450:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005460:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005464:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f006 fb90 	bl	800bb98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f006 fabf 	bl	800ba10 <USB_ReadInterrupts>
 8005492:	4603      	mov	r3, r0
 8005494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549c:	d124      	bne.n	80054e8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f006 fb55 	bl	800bb52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f005 fc82 	bl	800adb6 <USB_GetDevSpeed>
 80054b2:	4603      	mov	r3, r0
 80054b4:	461a      	mov	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681c      	ldr	r4, [r3, #0]
 80054be:	f001 fad3 	bl	8006a68 <HAL_RCC_GetHCLKFreq>
 80054c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
 80054cc:	4620      	mov	r0, r4
 80054ce:	f005 f9a9 	bl	800a824 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f009 f907 	bl	800e6e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80054e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f006 fa8f 	bl	800ba10 <USB_ReadInterrupts>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d10a      	bne.n	8005512 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f009 f8e4 	bl	800e6ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f002 0208 	and.w	r2, r2, #8
 8005510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f006 fa7a 	bl	800ba10 <USB_ReadInterrupts>
 800551c:	4603      	mov	r3, r0
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d122      	bne.n	800556c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005532:	2301      	movs	r3, #1
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
 8005536:	e014      	b.n	8005562 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d105      	bne.n	800555c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	b2db      	uxtb	r3, r3
 8005554:	4619      	mov	r1, r3
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 faf3 	bl	8005b42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	3301      	adds	r3, #1
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005568:	429a      	cmp	r2, r3
 800556a:	d3e5      	bcc.n	8005538 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f006 fa4d 	bl	800ba10 <USB_ReadInterrupts>
 8005576:	4603      	mov	r3, r0
 8005578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800557c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005580:	d13b      	bne.n	80055fa <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005582:	2301      	movs	r3, #1
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	e02b      	b.n	80055e0 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3340      	adds	r3, #64	; 0x40
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d115      	bne.n	80055da <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da12      	bge.n	80055da <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	333f      	adds	r3, #63	; 0x3f
 80055c4:	2201      	movs	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fab4 	bl	8005b42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	3301      	adds	r3, #1
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d3ce      	bcc.n	8005588 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80055f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f006 fa06 	bl	800ba10 <USB_ReadInterrupts>
 8005604:	4603      	mov	r3, r0
 8005606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800560a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800560e:	d155      	bne.n	80056bc <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005610:	2301      	movs	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
 8005614:	e045      	b.n	80056a2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562a:	4613      	mov	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d12e      	bne.n	800569c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800563e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005640:	2b00      	cmp	r3, #0
 8005642:	da2b      	bge.n	800569c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005650:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005654:	429a      	cmp	r2, r3
 8005656:	d121      	bne.n	800569c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565c:	4613      	mov	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005698:	6053      	str	r3, [r2, #4]
            break;
 800569a:	e007      	b.n	80056ac <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	3301      	adds	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d3b4      	bcc.n	8005616 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80056ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f006 f9a5 	bl	800ba10 <USB_ReadInterrupts>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d0:	d10a      	bne.n	80056e8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f009 f898 	bl	800e808 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f006 f98f 	bl	800ba10 <USB_ReadInterrupts>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d115      	bne.n	8005728 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f009 f888 	bl	800e824 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
 8005724:	e000      	b.n	8005728 <HAL_PCD_IRQHandler+0x920>
      return;
 8005726:	bf00      	nop
    }
  }
}
 8005728:	3734      	adds	r7, #52	; 0x34
 800572a:	46bd      	mov	sp, r7
 800572c:	bd90      	pop	{r4, r7, pc}

0800572e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_PCD_SetAddress+0x1a>
 8005744:	2302      	movs	r3, #2
 8005746:	e013      	b.n	8005770 <HAL_PCD_SetAddress+0x42>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	4611      	mov	r1, r2
 8005760:	4618      	mov	r0, r3
 8005762:	f006 f8ed 	bl	800b940 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	461a      	mov	r2, r3
 8005786:	4603      	mov	r3, r0
 8005788:	70fb      	strb	r3, [r7, #3]
 800578a:	460b      	mov	r3, r1
 800578c:	803b      	strh	r3, [r7, #0]
 800578e:	4613      	mov	r3, r2
 8005790:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800579a:	2b00      	cmp	r3, #0
 800579c:	da0f      	bge.n	80057be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	f003 020f 	and.w	r2, r3, #15
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	3338      	adds	r3, #56	; 0x38
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	3304      	adds	r3, #4
 80057b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	705a      	strb	r2, [r3, #1]
 80057bc:	e00f      	b.n	80057de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	f003 020f 	and.w	r2, r3, #15
 80057c4:	4613      	mov	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4413      	add	r3, r2
 80057d4:	3304      	adds	r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	f003 030f 	and.w	r3, r3, #15
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057ea:	883a      	ldrh	r2, [r7, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	78ba      	ldrb	r2, [r7, #2]
 80057f4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	785b      	ldrb	r3, [r3, #1]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005808:	78bb      	ldrb	r3, [r7, #2]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d102      	bne.n	8005814 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800581a:	2b01      	cmp	r3, #1
 800581c:	d101      	bne.n	8005822 <HAL_PCD_EP_Open+0xaa>
 800581e:	2302      	movs	r3, #2
 8005820:	e00e      	b.n	8005840 <HAL_PCD_EP_Open+0xc8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	4618      	mov	r0, r3
 8005832:	f005 fadf 	bl	800adf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800583e:	7afb      	ldrb	r3, [r7, #11]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005858:	2b00      	cmp	r3, #0
 800585a:	da0f      	bge.n	800587c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	f003 020f 	and.w	r2, r3, #15
 8005862:	4613      	mov	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	3338      	adds	r3, #56	; 0x38
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	4413      	add	r3, r2
 8005870:	3304      	adds	r3, #4
 8005872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	705a      	strb	r2, [r3, #1]
 800587a:	e00f      	b.n	800589c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	f003 020f 	and.w	r2, r3, #15
 8005882:	4613      	mov	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	3304      	adds	r3, #4
 8005894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_PCD_EP_Close+0x6e>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e00e      	b.n	80058d4 <HAL_PCD_EP_Close+0x8c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f005 fb1d 	bl	800af04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	607a      	str	r2, [r7, #4]
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	460b      	mov	r3, r1
 80058ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058ec:	7afb      	ldrb	r3, [r7, #11]
 80058ee:	f003 020f 	and.w	r2, r3, #15
 80058f2:	4613      	mov	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	3304      	adds	r3, #4
 8005904:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2200      	movs	r2, #0
 800591c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800591e:	7afb      	ldrb	r3, [r7, #11]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	b2da      	uxtb	r2, r3
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6979      	ldr	r1, [r7, #20]
 8005930:	4618      	mov	r0, r3
 8005932:	f005 fbc3 	bl	800b0bc <USB_EPStartXfer>

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8005962:	681b      	ldr	r3, [r3, #0]
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	607a      	str	r2, [r7, #4]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	460b      	mov	r3, r1
 800597e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005980:	7afb      	ldrb	r3, [r7, #11]
 8005982:	f003 020f 	and.w	r2, r3, #15
 8005986:	4613      	mov	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	3338      	adds	r3, #56	; 0x38
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	3304      	adds	r3, #4
 8005996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2201      	movs	r2, #1
 80059ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059b0:	7afb      	ldrb	r3, [r7, #11]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6979      	ldr	r1, [r7, #20]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f005 fb7a 	bl	800b0bc <USB_EPStartXfer>

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d901      	bls.n	80059f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e04e      	b.n	8005a8e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	da0f      	bge.n	8005a18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	f003 020f 	and.w	r2, r3, #15
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	3338      	adds	r3, #56	; 0x38
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	705a      	strb	r2, [r3, #1]
 8005a16:	e00d      	b.n	8005a34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4413      	add	r3, r2
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_PCD_EP_SetStall+0x82>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e01c      	b.n	8005a8e <HAL_PCD_EP_SetStall+0xbc>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68f9      	ldr	r1, [r7, #12]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f005 fe98 	bl	800b798 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d108      	bne.n	8005a84 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f006 f88a 	bl	800bb98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005aa2:	78fb      	ldrb	r3, [r7, #3]
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d901      	bls.n	8005ab4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e042      	b.n	8005b3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	da0f      	bge.n	8005adc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	f003 020f 	and.w	r2, r3, #15
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	3338      	adds	r3, #56	; 0x38
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4413      	add	r3, r2
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	705a      	strb	r2, [r3, #1]
 8005ada:	e00f      	b.n	8005afc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	f003 020f 	and.w	r2, r3, #15
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4413      	add	r3, r2
 8005af2:	3304      	adds	r3, #4
 8005af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_PCD_EP_ClrStall+0x86>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e00e      	b.n	8005b3a <HAL_PCD_EP_ClrStall+0xa4>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f005 fea2 	bl	800b874 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	da0c      	bge.n	8005b70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	f003 020f 	and.w	r2, r3, #15
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	3338      	adds	r3, #56	; 0x38
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	4413      	add	r3, r2
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	e00c      	b.n	8005b8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4413      	add	r3, r2
 8005b86:	3304      	adds	r3, #4
 8005b88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68f9      	ldr	r1, [r7, #12]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f005 fcc5 	bl	800b520 <USB_EPStopXfer>
 8005b96:	4603      	mov	r3, r0
 8005b98:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	3338      	adds	r3, #56	; 0x38
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3304      	adds	r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	695a      	ldr	r2, [r3, #20]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d901      	bls.n	8005bdc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e067      	b.n	8005cac <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	691a      	ldr	r2, [r3, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d902      	bls.n	8005bf8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	3303      	adds	r3, #3
 8005bfc:	089b      	lsrs	r3, r3, #2
 8005bfe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c00:	e026      	b.n	8005c50 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	69fa      	ldr	r2, [r7, #28]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d902      	bls.n	8005c1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	3303      	adds	r3, #3
 8005c22:	089b      	lsrs	r3, r3, #2
 8005c24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68d9      	ldr	r1, [r3, #12]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f005 fd1e 	bl	800b674 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	441a      	add	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	695a      	ldr	r2, [r3, #20]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	441a      	add	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d809      	bhi.n	8005c7a <PCD_WriteEmptyTxFifo+0xd6>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	695a      	ldr	r2, [r3, #20]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d203      	bcs.n	8005c7a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1c3      	bne.n	8005c02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d811      	bhi.n	8005caa <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	6939      	ldr	r1, [r7, #16]
 8005ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3720      	adds	r7, #32
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	333c      	adds	r3, #60	; 0x3c
 8005ccc:	3304      	adds	r3, #4
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <PCD_EP_OutXfrComplete_int+0x98>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d124      	bne.n	8005d34 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	461a      	mov	r2, r3
 8005d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d06:	6093      	str	r3, [r2, #8]
 8005d08:	e01a      	b.n	8005d40 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	461a      	mov	r2, r3
 8005d22:	2320      	movs	r3, #32
 8005d24:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f008 fc97 	bl	800e660 <HAL_PCD_DataOutStageCallback>
 8005d32:	e005      	b.n	8005d40 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f008 fc90 	bl	800e660 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	4f54310a 	.word	0x4f54310a

08005d50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	333c      	adds	r3, #60	; 0x3c
 8005d68:	3304      	adds	r3, #4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a0c      	ldr	r2, [pc, #48]	; (8005db4 <PCD_EP_OutSetupPacket_int+0x64>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d90e      	bls.n	8005da4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005da2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f008 fc49 	bl	800e63c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	4f54300a 	.word	0x4f54300a

08005db8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d107      	bne.n	8005de6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005dd6:	883b      	ldrh	r3, [r7, #0]
 8005dd8:	0419      	lsls	r1, r3, #16
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28
 8005de4:	e028      	b.n	8005e38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	0c1b      	lsrs	r3, r3, #16
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	4413      	add	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e00d      	b.n	8005e16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	3340      	adds	r3, #64	; 0x40
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	3301      	adds	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
 8005e16:	7bfa      	ldrb	r2, [r7, #15]
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d3ec      	bcc.n	8005dfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e20:	883b      	ldrh	r3, [r7, #0]
 8005e22:	0418      	lsls	r0, r3, #16
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6819      	ldr	r1, [r3, #0]
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	4302      	orrs	r2, r0
 8005e30:	3340      	adds	r3, #64	; 0x40
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	440b      	add	r3, r1
 8005e36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	887a      	ldrh	r2, [r7, #2]
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	f043 0303 	orr.w	r3, r3, #3
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40007000 	.word	0x40007000

08005ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eda:	d130      	bne.n	8005f3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005edc:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee8:	d038      	beq.n	8005f5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005eea:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ef4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ef8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005efa:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2232      	movs	r2, #50	; 0x32
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	0c9b      	lsrs	r3, r3, #18
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f10:	e002      	b.n	8005f18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f18:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f24:	d102      	bne.n	8005f2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f2      	bne.n	8005f12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f2c:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f38:	d110      	bne.n	8005f5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e00f      	b.n	8005f5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4a:	d007      	beq.n	8005f5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f4c:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f54:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40007000 	.word	0x40007000
 8005f70:	20000000 	.word	0x20000000
 8005f74:	431bde83 	.word	0x431bde83

08005f78 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	4a04      	ldr	r2, [pc, #16]	; (8005f94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f86:	6053      	str	r3, [r2, #4]
}
 8005f88:	bf00      	nop
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40007000 	.word	0x40007000

08005f98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e3ca      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005faa:	4b97      	ldr	r3, [pc, #604]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fb4:	4b94      	ldr	r3, [pc, #592]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80e4 	beq.w	8006194 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x4a>
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b0c      	cmp	r3, #12
 8005fd6:	f040 808b 	bne.w	80060f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	f040 8087 	bne.w	80060f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fe2:	4b89      	ldr	r3, [pc, #548]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d005      	beq.n	8005ffa <HAL_RCC_OscConfig+0x62>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e3a2      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1a      	ldr	r2, [r3, #32]
 8005ffe:	4b82      	ldr	r3, [pc, #520]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d004      	beq.n	8006014 <HAL_RCC_OscConfig+0x7c>
 800600a:	4b7f      	ldr	r3, [pc, #508]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006012:	e005      	b.n	8006020 <HAL_RCC_OscConfig+0x88>
 8006014:	4b7c      	ldr	r3, [pc, #496]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601a:	091b      	lsrs	r3, r3, #4
 800601c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006020:	4293      	cmp	r3, r2
 8006022:	d223      	bcs.n	800606c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	4618      	mov	r0, r3
 800602a:	f000 fd55 	bl	8006ad8 <RCC_SetFlashLatencyFromMSIRange>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e383      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006038:	4b73      	ldr	r3, [pc, #460]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a72      	ldr	r2, [pc, #456]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800603e:	f043 0308 	orr.w	r3, r3, #8
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	4b70      	ldr	r3, [pc, #448]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	496d      	ldr	r1, [pc, #436]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006052:	4313      	orrs	r3, r2
 8006054:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006056:	4b6c      	ldr	r3, [pc, #432]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	4968      	ldr	r1, [pc, #416]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006066:	4313      	orrs	r3, r2
 8006068:	604b      	str	r3, [r1, #4]
 800606a:	e025      	b.n	80060b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800606c:	4b66      	ldr	r3, [pc, #408]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a65      	ldr	r2, [pc, #404]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006072:	f043 0308 	orr.w	r3, r3, #8
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	4b63      	ldr	r3, [pc, #396]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	4960      	ldr	r1, [pc, #384]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006086:	4313      	orrs	r3, r2
 8006088:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800608a:	4b5f      	ldr	r3, [pc, #380]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	495b      	ldr	r1, [pc, #364]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800609a:	4313      	orrs	r3, r2
 800609c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fd15 	bl	8006ad8 <RCC_SetFlashLatencyFromMSIRange>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e343      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060b8:	f000 fc4a 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 80060bc:	4602      	mov	r2, r0
 80060be:	4b52      	ldr	r3, [pc, #328]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	4950      	ldr	r1, [pc, #320]	; (800620c <HAL_RCC_OscConfig+0x274>)
 80060ca:	5ccb      	ldrb	r3, [r1, r3]
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	fa22 f303 	lsr.w	r3, r2, r3
 80060d4:	4a4e      	ldr	r2, [pc, #312]	; (8006210 <HAL_RCC_OscConfig+0x278>)
 80060d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80060d8:	4b4e      	ldr	r3, [pc, #312]	; (8006214 <HAL_RCC_OscConfig+0x27c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fd f983 	bl	80033e8 <HAL_InitTick>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d052      	beq.n	8006192 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	e327      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d032      	beq.n	800615e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060f8:	4b43      	ldr	r3, [pc, #268]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a42      	ldr	r2, [pc, #264]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006104:	f7fd f9c0 	bl	8003488 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800610c:	f7fd f9bc 	bl	8003488 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e310      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800611e:	4b3a      	ldr	r3, [pc, #232]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0f0      	beq.n	800610c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800612a:	4b37      	ldr	r3, [pc, #220]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a36      	ldr	r2, [pc, #216]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006130:	f043 0308 	orr.w	r3, r3, #8
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	4931      	ldr	r1, [pc, #196]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006144:	4313      	orrs	r3, r2
 8006146:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006148:	4b2f      	ldr	r3, [pc, #188]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	492c      	ldr	r1, [pc, #176]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006158:	4313      	orrs	r3, r2
 800615a:	604b      	str	r3, [r1, #4]
 800615c:	e01a      	b.n	8006194 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800615e:	4b2a      	ldr	r3, [pc, #168]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a29      	ldr	r2, [pc, #164]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006164:	f023 0301 	bic.w	r3, r3, #1
 8006168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800616a:	f7fd f98d 	bl	8003488 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006172:	f7fd f989 	bl	8003488 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e2dd      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006184:	4b20      	ldr	r3, [pc, #128]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1f0      	bne.n	8006172 <HAL_RCC_OscConfig+0x1da>
 8006190:	e000      	b.n	8006194 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006192:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d074      	beq.n	800628a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d005      	beq.n	80061b2 <HAL_RCC_OscConfig+0x21a>
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	2b0c      	cmp	r3, #12
 80061aa:	d10e      	bne.n	80061ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d10b      	bne.n	80061ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d064      	beq.n	8006288 <HAL_RCC_OscConfig+0x2f0>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d160      	bne.n	8006288 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e2ba      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d2:	d106      	bne.n	80061e2 <HAL_RCC_OscConfig+0x24a>
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80061da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	e026      	b.n	8006230 <HAL_RCC_OscConfig+0x298>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061ea:	d115      	bne.n	8006218 <HAL_RCC_OscConfig+0x280>
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a05      	ldr	r2, [pc, #20]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80061f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a02      	ldr	r2, [pc, #8]	; (8006208 <HAL_RCC_OscConfig+0x270>)
 80061fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e014      	b.n	8006230 <HAL_RCC_OscConfig+0x298>
 8006206:	bf00      	nop
 8006208:	40021000 	.word	0x40021000
 800620c:	080137a0 	.word	0x080137a0
 8006210:	20000000 	.word	0x20000000
 8006214:	20000004 	.word	0x20000004
 8006218:	4ba0      	ldr	r3, [pc, #640]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a9f      	ldr	r2, [pc, #636]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800621e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	4b9d      	ldr	r3, [pc, #628]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a9c      	ldr	r2, [pc, #624]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800622a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d013      	beq.n	8006260 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006238:	f7fd f926 	bl	8003488 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006240:	f7fd f922 	bl	8003488 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b64      	cmp	r3, #100	; 0x64
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e276      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006252:	4b92      	ldr	r3, [pc, #584]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0x2a8>
 800625e:	e014      	b.n	800628a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fd f912 	bl	8003488 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006268:	f7fd f90e 	bl	8003488 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	; 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e262      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800627a:	4b88      	ldr	r3, [pc, #544]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0x2d0>
 8006286:	e000      	b.n	800628a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d060      	beq.n	8006358 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b04      	cmp	r3, #4
 800629a:	d005      	beq.n	80062a8 <HAL_RCC_OscConfig+0x310>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	2b0c      	cmp	r3, #12
 80062a0:	d119      	bne.n	80062d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d116      	bne.n	80062d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062a8:	4b7c      	ldr	r3, [pc, #496]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_RCC_OscConfig+0x328>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e23f      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c0:	4b76      	ldr	r3, [pc, #472]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	061b      	lsls	r3, r3, #24
 80062ce:	4973      	ldr	r1, [pc, #460]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d4:	e040      	b.n	8006358 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d023      	beq.n	8006326 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062de:	4b6f      	ldr	r3, [pc, #444]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a6e      	ldr	r2, [pc, #440]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80062e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ea:	f7fd f8cd 	bl	8003488 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f2:	f7fd f8c9 	bl	8003488 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e21d      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006304:	4b65      	ldr	r3, [pc, #404]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006310:	4b62      	ldr	r3, [pc, #392]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	061b      	lsls	r3, r3, #24
 800631e:	495f      	ldr	r1, [pc, #380]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006320:	4313      	orrs	r3, r2
 8006322:	604b      	str	r3, [r1, #4]
 8006324:	e018      	b.n	8006358 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006326:	4b5d      	ldr	r3, [pc, #372]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a5c      	ldr	r2, [pc, #368]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800632c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fd f8a9 	bl	8003488 <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633a:	f7fd f8a5 	bl	8003488 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e1f9      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800634c:	4b53      	ldr	r3, [pc, #332]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f0      	bne.n	800633a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0308 	and.w	r3, r3, #8
 8006360:	2b00      	cmp	r3, #0
 8006362:	d03c      	beq.n	80063de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01c      	beq.n	80063a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800636c:	4b4b      	ldr	r3, [pc, #300]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800636e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006372:	4a4a      	ldr	r2, [pc, #296]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637c:	f7fd f884 	bl	8003488 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006384:	f7fd f880 	bl	8003488 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e1d4      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006396:	4b41      	ldr	r3, [pc, #260]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0ef      	beq.n	8006384 <HAL_RCC_OscConfig+0x3ec>
 80063a4:	e01b      	b.n	80063de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a6:	4b3d      	ldr	r3, [pc, #244]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80063a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ac:	4a3b      	ldr	r2, [pc, #236]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b6:	f7fd f867 	bl	8003488 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063be:	f7fd f863 	bl	8003488 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e1b7      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063d0:	4b32      	ldr	r3, [pc, #200]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80063d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1ef      	bne.n	80063be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80a6 	beq.w	8006538 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063ec:	2300      	movs	r3, #0
 80063ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80063f0:	4b2a      	ldr	r3, [pc, #168]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80063f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10d      	bne.n	8006418 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063fc:	4b27      	ldr	r3, [pc, #156]	; (800649c <HAL_RCC_OscConfig+0x504>)
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	4a26      	ldr	r2, [pc, #152]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006406:	6593      	str	r3, [r2, #88]	; 0x58
 8006408:	4b24      	ldr	r3, [pc, #144]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800640a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006410:	60bb      	str	r3, [r7, #8]
 8006412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006414:	2301      	movs	r3, #1
 8006416:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006418:	4b21      	ldr	r3, [pc, #132]	; (80064a0 <HAL_RCC_OscConfig+0x508>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d118      	bne.n	8006456 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006424:	4b1e      	ldr	r3, [pc, #120]	; (80064a0 <HAL_RCC_OscConfig+0x508>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <HAL_RCC_OscConfig+0x508>)
 800642a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800642e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006430:	f7fd f82a 	bl	8003488 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006438:	f7fd f826 	bl	8003488 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e17a      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800644a:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <HAL_RCC_OscConfig+0x508>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f0      	beq.n	8006438 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d108      	bne.n	8006470 <HAL_RCC_OscConfig+0x4d8>
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	4a0d      	ldr	r2, [pc, #52]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800646e:	e029      	b.n	80064c4 <HAL_RCC_OscConfig+0x52c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b05      	cmp	r3, #5
 8006476:	d115      	bne.n	80064a4 <HAL_RCC_OscConfig+0x50c>
 8006478:	4b08      	ldr	r3, [pc, #32]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647e:	4a07      	ldr	r2, [pc, #28]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006480:	f043 0304 	orr.w	r3, r3, #4
 8006484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006488:	4b04      	ldr	r3, [pc, #16]	; (800649c <HAL_RCC_OscConfig+0x504>)
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648e:	4a03      	ldr	r2, [pc, #12]	; (800649c <HAL_RCC_OscConfig+0x504>)
 8006490:	f043 0301 	orr.w	r3, r3, #1
 8006494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006498:	e014      	b.n	80064c4 <HAL_RCC_OscConfig+0x52c>
 800649a:	bf00      	nop
 800649c:	40021000 	.word	0x40021000
 80064a0:	40007000 	.word	0x40007000
 80064a4:	4b9c      	ldr	r3, [pc, #624]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80064a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064aa:	4a9b      	ldr	r2, [pc, #620]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80064b4:	4b98      	ldr	r3, [pc, #608]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80064b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ba:	4a97      	ldr	r2, [pc, #604]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80064bc:	f023 0304 	bic.w	r3, r3, #4
 80064c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d016      	beq.n	80064fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064cc:	f7fc ffdc 	bl	8003488 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064d2:	e00a      	b.n	80064ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d4:	f7fc ffd8 	bl	8003488 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e12a      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ea:	4b8b      	ldr	r3, [pc, #556]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0ed      	beq.n	80064d4 <HAL_RCC_OscConfig+0x53c>
 80064f8:	e015      	b.n	8006526 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fa:	f7fc ffc5 	bl	8003488 <HAL_GetTick>
 80064fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006500:	e00a      	b.n	8006518 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006502:	f7fc ffc1 	bl	8003488 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006510:	4293      	cmp	r3, r2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e113      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006518:	4b7f      	ldr	r3, [pc, #508]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1ed      	bne.n	8006502 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006526:	7ffb      	ldrb	r3, [r7, #31]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d105      	bne.n	8006538 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800652c:	4b7a      	ldr	r3, [pc, #488]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 800652e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006530:	4a79      	ldr	r2, [pc, #484]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 8006532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006536:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80fe 	beq.w	800673e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	2b02      	cmp	r3, #2
 8006548:	f040 80d0 	bne.w	80066ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800654c:	4b72      	ldr	r3, [pc, #456]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f003 0203 	and.w	r2, r3, #3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	429a      	cmp	r2, r3
 800655e:	d130      	bne.n	80065c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656a:	3b01      	subs	r3, #1
 800656c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	429a      	cmp	r2, r3
 8006570:	d127      	bne.n	80065c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d11f      	bne.n	80065c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800658c:	2a07      	cmp	r2, #7
 800658e:	bf14      	ite	ne
 8006590:	2201      	movne	r2, #1
 8006592:	2200      	moveq	r2, #0
 8006594:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006596:	4293      	cmp	r3, r2
 8006598:	d113      	bne.n	80065c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a4:	085b      	lsrs	r3, r3, #1
 80065a6:	3b01      	subs	r3, #1
 80065a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d109      	bne.n	80065c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	3b01      	subs	r3, #1
 80065bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065be:	429a      	cmp	r2, r3
 80065c0:	d06e      	beq.n	80066a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	2b0c      	cmp	r3, #12
 80065c6:	d069      	beq.n	800669c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80065c8:	4b53      	ldr	r3, [pc, #332]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80065d4:	4b50      	ldr	r3, [pc, #320]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0ad      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80065e4:	4b4c      	ldr	r3, [pc, #304]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a4b      	ldr	r2, [pc, #300]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80065ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065f0:	f7fc ff4a 	bl	8003488 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065f8:	f7fc ff46 	bl	8003488 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e09a      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800660a:	4b43      	ldr	r3, [pc, #268]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006616:	4b40      	ldr	r3, [pc, #256]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	4b40      	ldr	r3, [pc, #256]	; (800671c <HAL_RCC_OscConfig+0x784>)
 800661c:	4013      	ands	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006626:	3a01      	subs	r2, #1
 8006628:	0112      	lsls	r2, r2, #4
 800662a:	4311      	orrs	r1, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006630:	0212      	lsls	r2, r2, #8
 8006632:	4311      	orrs	r1, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006638:	0852      	lsrs	r2, r2, #1
 800663a:	3a01      	subs	r2, #1
 800663c:	0552      	lsls	r2, r2, #21
 800663e:	4311      	orrs	r1, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006644:	0852      	lsrs	r2, r2, #1
 8006646:	3a01      	subs	r2, #1
 8006648:	0652      	lsls	r2, r2, #25
 800664a:	4311      	orrs	r1, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006650:	0912      	lsrs	r2, r2, #4
 8006652:	0452      	lsls	r2, r2, #17
 8006654:	430a      	orrs	r2, r1
 8006656:	4930      	ldr	r1, [pc, #192]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 8006658:	4313      	orrs	r3, r2
 800665a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800665c:	4b2e      	ldr	r3, [pc, #184]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a2d      	ldr	r2, [pc, #180]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 8006662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006666:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006668:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	4a2a      	ldr	r2, [pc, #168]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 800666e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006672:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006674:	f7fc ff08 	bl	8003488 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800667c:	f7fc ff04 	bl	8003488 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e058      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800668e:	4b22      	ldr	r3, [pc, #136]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0f0      	beq.n	800667c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800669a:	e050      	b.n	800673e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e04f      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066a0:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d148      	bne.n	800673e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80066b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066b8:	4b17      	ldr	r3, [pc, #92]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a16      	ldr	r2, [pc, #88]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80066be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066c4:	f7fc fee0 	bl	8003488 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066cc:	f7fc fedc 	bl	8003488 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e030      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066de:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0f0      	beq.n	80066cc <HAL_RCC_OscConfig+0x734>
 80066ea:	e028      	b.n	800673e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b0c      	cmp	r3, #12
 80066f0:	d023      	beq.n	800673a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f2:	4b09      	ldr	r3, [pc, #36]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a08      	ldr	r2, [pc, #32]	; (8006718 <HAL_RCC_OscConfig+0x780>)
 80066f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fe:	f7fc fec3 	bl	8003488 <HAL_GetTick>
 8006702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006704:	e00c      	b.n	8006720 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006706:	f7fc febf 	bl	8003488 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d905      	bls.n	8006720 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e013      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
 8006718:	40021000 	.word	0x40021000
 800671c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006720:	4b09      	ldr	r3, [pc, #36]	; (8006748 <HAL_RCC_OscConfig+0x7b0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1ec      	bne.n	8006706 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <HAL_RCC_OscConfig+0x7b0>)
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	4905      	ldr	r1, [pc, #20]	; (8006748 <HAL_RCC_OscConfig+0x7b0>)
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <HAL_RCC_OscConfig+0x7b4>)
 8006734:	4013      	ands	r3, r2
 8006736:	60cb      	str	r3, [r1, #12]
 8006738:	e001      	b.n	800673e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3720      	adds	r7, #32
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40021000 	.word	0x40021000
 800674c:	feeefffc 	.word	0xfeeefffc

08006750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e0e7      	b.n	8006934 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006764:	4b75      	ldr	r3, [pc, #468]	; (800693c <HAL_RCC_ClockConfig+0x1ec>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d910      	bls.n	8006794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006772:	4b72      	ldr	r3, [pc, #456]	; (800693c <HAL_RCC_ClockConfig+0x1ec>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f023 0207 	bic.w	r2, r3, #7
 800677a:	4970      	ldr	r1, [pc, #448]	; (800693c <HAL_RCC_ClockConfig+0x1ec>)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4313      	orrs	r3, r2
 8006780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b6e      	ldr	r3, [pc, #440]	; (800693c <HAL_RCC_ClockConfig+0x1ec>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d001      	beq.n	8006794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0cf      	b.n	8006934 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d010      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	4b66      	ldr	r3, [pc, #408]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d908      	bls.n	80067c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b0:	4b63      	ldr	r3, [pc, #396]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	4960      	ldr	r1, [pc, #384]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d04c      	beq.n	8006868 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d107      	bne.n	80067e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067d6:	4b5a      	ldr	r3, [pc, #360]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d121      	bne.n	8006826 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e0a6      	b.n	8006934 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d107      	bne.n	80067fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ee:	4b54      	ldr	r3, [pc, #336]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d115      	bne.n	8006826 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e09a      	b.n	8006934 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d107      	bne.n	8006816 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006806:	4b4e      	ldr	r3, [pc, #312]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d109      	bne.n	8006826 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e08e      	b.n	8006934 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006816:	4b4a      	ldr	r3, [pc, #296]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e086      	b.n	8006934 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006826:	4b46      	ldr	r3, [pc, #280]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f023 0203 	bic.w	r2, r3, #3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	4943      	ldr	r1, [pc, #268]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 8006834:	4313      	orrs	r3, r2
 8006836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006838:	f7fc fe26 	bl	8003488 <HAL_GetTick>
 800683c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683e:	e00a      	b.n	8006856 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006840:	f7fc fe22 	bl	8003488 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	f241 3288 	movw	r2, #5000	; 0x1388
 800684e:	4293      	cmp	r3, r2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e06e      	b.n	8006934 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006856:	4b3a      	ldr	r3, [pc, #232]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 020c 	and.w	r2, r3, #12
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	429a      	cmp	r2, r3
 8006866:	d1eb      	bne.n	8006840 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d010      	beq.n	8006896 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	4b31      	ldr	r3, [pc, #196]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006880:	429a      	cmp	r2, r3
 8006882:	d208      	bcs.n	8006896 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006884:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	492b      	ldr	r1, [pc, #172]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 8006892:	4313      	orrs	r3, r2
 8006894:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006896:	4b29      	ldr	r3, [pc, #164]	; (800693c <HAL_RCC_ClockConfig+0x1ec>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d210      	bcs.n	80068c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a4:	4b25      	ldr	r3, [pc, #148]	; (800693c <HAL_RCC_ClockConfig+0x1ec>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f023 0207 	bic.w	r2, r3, #7
 80068ac:	4923      	ldr	r1, [pc, #140]	; (800693c <HAL_RCC_ClockConfig+0x1ec>)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b4:	4b21      	ldr	r3, [pc, #132]	; (800693c <HAL_RCC_ClockConfig+0x1ec>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d001      	beq.n	80068c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e036      	b.n	8006934 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d2:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	4918      	ldr	r1, [pc, #96]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d009      	beq.n	8006904 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068f0:	4b13      	ldr	r3, [pc, #76]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	4910      	ldr	r1, [pc, #64]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 8006900:	4313      	orrs	r3, r2
 8006902:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006904:	f000 f824 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 8006908:	4602      	mov	r2, r0
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <HAL_RCC_ClockConfig+0x1f0>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	091b      	lsrs	r3, r3, #4
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	490b      	ldr	r1, [pc, #44]	; (8006944 <HAL_RCC_ClockConfig+0x1f4>)
 8006916:	5ccb      	ldrb	r3, [r1, r3]
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	4a09      	ldr	r2, [pc, #36]	; (8006948 <HAL_RCC_ClockConfig+0x1f8>)
 8006922:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006924:	4b09      	ldr	r3, [pc, #36]	; (800694c <HAL_RCC_ClockConfig+0x1fc>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4618      	mov	r0, r3
 800692a:	f7fc fd5d 	bl	80033e8 <HAL_InitTick>
 800692e:	4603      	mov	r3, r0
 8006930:	72fb      	strb	r3, [r7, #11]

  return status;
 8006932:	7afb      	ldrb	r3, [r7, #11]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	40022000 	.word	0x40022000
 8006940:	40021000 	.word	0x40021000
 8006944:	080137a0 	.word	0x080137a0
 8006948:	20000000 	.word	0x20000000
 800694c:	20000004 	.word	0x20000004

08006950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006950:	b480      	push	{r7}
 8006952:	b089      	sub	sp, #36	; 0x24
 8006954:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800695e:	4b3e      	ldr	r3, [pc, #248]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 030c 	and.w	r3, r3, #12
 8006966:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006968:	4b3b      	ldr	r3, [pc, #236]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x108>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <HAL_RCC_GetSysClockFreq+0x34>
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2b0c      	cmp	r3, #12
 800697c:	d121      	bne.n	80069c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d11e      	bne.n	80069c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006984:	4b34      	ldr	r3, [pc, #208]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d107      	bne.n	80069a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006990:	4b31      	ldr	r3, [pc, #196]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	e005      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069a0:	4b2d      	ldr	r3, [pc, #180]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x108>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	091b      	lsrs	r3, r3, #4
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80069ac:	4a2b      	ldr	r2, [pc, #172]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x10c>)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10d      	bne.n	80069d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069c0:	e00a      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d102      	bne.n	80069ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069c8:	4b25      	ldr	r3, [pc, #148]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x110>)
 80069ca:	61bb      	str	r3, [r7, #24]
 80069cc:	e004      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d101      	bne.n	80069d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069d4:	4b23      	ldr	r3, [pc, #140]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x114>)
 80069d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b0c      	cmp	r3, #12
 80069dc:	d134      	bne.n	8006a48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069de:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x108>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d003      	beq.n	80069f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d003      	beq.n	80069fc <HAL_RCC_GetSysClockFreq+0xac>
 80069f4:	e005      	b.n	8006a02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80069f6:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x110>)
 80069f8:	617b      	str	r3, [r7, #20]
      break;
 80069fa:	e005      	b.n	8006a08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80069fc:	4b19      	ldr	r3, [pc, #100]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x114>)
 80069fe:	617b      	str	r3, [r7, #20]
      break;
 8006a00:	e002      	b.n	8006a08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	617b      	str	r3, [r7, #20]
      break;
 8006a06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a08:	4b13      	ldr	r3, [pc, #76]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	091b      	lsrs	r3, r3, #4
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	3301      	adds	r3, #1
 8006a14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	fb03 f202 	mul.w	r2, r3, r2
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	0e5b      	lsrs	r3, r3, #25
 8006a34:	f003 0303 	and.w	r3, r3, #3
 8006a38:	3301      	adds	r3, #1
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a48:	69bb      	ldr	r3, [r7, #24]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3724      	adds	r7, #36	; 0x24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	080137b8 	.word	0x080137b8
 8006a60:	00f42400 	.word	0x00f42400
 8006a64:	00b71b00 	.word	0x00b71b00

08006a68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a6c:	4b03      	ldr	r3, [pc, #12]	; (8006a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	20000000 	.word	0x20000000

08006a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a84:	f7ff fff0 	bl	8006a68 <HAL_RCC_GetHCLKFreq>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	0a1b      	lsrs	r3, r3, #8
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	4904      	ldr	r1, [pc, #16]	; (8006aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a96:	5ccb      	ldrb	r3, [r1, r3]
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	080137b0 	.word	0x080137b0

08006aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ab0:	f7ff ffda 	bl	8006a68 <HAL_RCC_GetHCLKFreq>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	0adb      	lsrs	r3, r3, #11
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	4904      	ldr	r1, [pc, #16]	; (8006ad4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ac2:	5ccb      	ldrb	r3, [r1, r3]
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	080137b0 	.word	0x080137b0

08006ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ae4:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006af0:	f7ff f9de 	bl	8005eb0 <HAL_PWREx_GetVoltageRange>
 8006af4:	6178      	str	r0, [r7, #20]
 8006af6:	e014      	b.n	8006b22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006af8:	4b25      	ldr	r3, [pc, #148]	; (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afc:	4a24      	ldr	r2, [pc, #144]	; (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b02:	6593      	str	r3, [r2, #88]	; 0x58
 8006b04:	4b22      	ldr	r3, [pc, #136]	; (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b10:	f7ff f9ce 	bl	8005eb0 <HAL_PWREx_GetVoltageRange>
 8006b14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b16:	4b1e      	ldr	r3, [pc, #120]	; (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	; (8006b90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b28:	d10b      	bne.n	8006b42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b80      	cmp	r3, #128	; 0x80
 8006b2e:	d919      	bls.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2ba0      	cmp	r3, #160	; 0xa0
 8006b34:	d902      	bls.n	8006b3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b36:	2302      	movs	r3, #2
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	e013      	b.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	e010      	b.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b80      	cmp	r3, #128	; 0x80
 8006b46:	d902      	bls.n	8006b4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b48:	2303      	movs	r3, #3
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	e00a      	b.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b80      	cmp	r3, #128	; 0x80
 8006b52:	d102      	bne.n	8006b5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b54:	2302      	movs	r3, #2
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	e004      	b.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b70      	cmp	r3, #112	; 0x70
 8006b5e:	d101      	bne.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b60:	2301      	movs	r3, #1
 8006b62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f023 0207 	bic.w	r2, r3, #7
 8006b6c:	4909      	ldr	r1, [pc, #36]	; (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d001      	beq.n	8006b86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40021000 	.word	0x40021000
 8006b94:	40022000 	.word	0x40022000

08006b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d041      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bbc:	d02a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006bbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006bc2:	d824      	bhi.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bc8:	d008      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bce:	d81e      	bhi.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd8:	d010      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bda:	e018      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006bdc:	4b86      	ldr	r3, [pc, #536]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	4a85      	ldr	r2, [pc, #532]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006be6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006be8:	e015      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3304      	adds	r3, #4
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f001 f829 	bl	8007c48 <RCCEx_PLLSAI1_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bfa:	e00c      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3320      	adds	r3, #32
 8006c00:	2100      	movs	r1, #0
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 f914 	bl	8007e30 <RCCEx_PLLSAI2_Config>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c0c:	e003      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	74fb      	strb	r3, [r7, #19]
      break;
 8006c12:	e000      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c16:	7cfb      	ldrb	r3, [r7, #19]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c1c:	4b76      	ldr	r3, [pc, #472]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2a:	4973      	ldr	r1, [pc, #460]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006c32:	e001      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c34:	7cfb      	ldrb	r3, [r7, #19]
 8006c36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d041      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c4c:	d02a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006c4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c52:	d824      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c58:	d008      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c5e:	d81e      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c68:	d010      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c6a:	e018      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c6c:	4b62      	ldr	r3, [pc, #392]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4a61      	ldr	r2, [pc, #388]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c78:	e015      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 ffe1 	bl	8007c48 <RCCEx_PLLSAI1_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c8a:	e00c      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3320      	adds	r3, #32
 8006c90:	2100      	movs	r1, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f001 f8cc 	bl	8007e30 <RCCEx_PLLSAI2_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c9c:	e003      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca6:	7cfb      	ldrb	r3, [r7, #19]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006cac:	4b52      	ldr	r3, [pc, #328]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cba:	494f      	ldr	r1, [pc, #316]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006cc2:	e001      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	7cfb      	ldrb	r3, [r7, #19]
 8006cc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80a0 	beq.w	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cda:	4b47      	ldr	r3, [pc, #284]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006cea:	2300      	movs	r3, #0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00d      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf0:	4b41      	ldr	r3, [pc, #260]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf4:	4a40      	ldr	r2, [pc, #256]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8006cfc:	4b3e      	ldr	r3, [pc, #248]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d0c:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a3a      	ldr	r2, [pc, #232]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d18:	f7fc fbb6 	bl	8003488 <HAL_GetTick>
 8006d1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d1e:	e009      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d20:	f7fc fbb2 	bl	8003488 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d902      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	74fb      	strb	r3, [r7, #19]
        break;
 8006d32:	e005      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d34:	4b31      	ldr	r3, [pc, #196]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ef      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006d40:	7cfb      	ldrb	r3, [r7, #19]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d15c      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d46:	4b2c      	ldr	r3, [pc, #176]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01f      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d019      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d64:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d70:	4b21      	ldr	r3, [pc, #132]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	4a20      	ldr	r2, [pc, #128]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d80:	4b1d      	ldr	r3, [pc, #116]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d86:	4a1c      	ldr	r2, [pc, #112]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d90:	4a19      	ldr	r2, [pc, #100]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d016      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da2:	f7fc fb71 	bl	8003488 <HAL_GetTick>
 8006da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006da8:	e00b      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006daa:	f7fc fb6d 	bl	8003488 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d902      	bls.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8006dc0:	e006      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0ec      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006dd0:	7cfb      	ldrb	r3, [r7, #19]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10c      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de6:	4904      	ldr	r1, [pc, #16]	; (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006dee:	e009      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006df0:	7cfb      	ldrb	r3, [r7, #19]
 8006df2:	74bb      	strb	r3, [r7, #18]
 8006df4:	e006      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006df6:	bf00      	nop
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	7cfb      	ldrb	r3, [r7, #19]
 8006e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e04:	7c7b      	ldrb	r3, [r7, #17]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d105      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0a:	4b9e      	ldr	r3, [pc, #632]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0e:	4a9d      	ldr	r2, [pc, #628]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e22:	4b98      	ldr	r3, [pc, #608]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e28:	f023 0203 	bic.w	r2, r3, #3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	4994      	ldr	r1, [pc, #592]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e44:	4b8f      	ldr	r3, [pc, #572]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4a:	f023 020c 	bic.w	r2, r3, #12
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e52:	498c      	ldr	r1, [pc, #560]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e66:	4b87      	ldr	r3, [pc, #540]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	4983      	ldr	r1, [pc, #524]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e88:	4b7e      	ldr	r3, [pc, #504]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e96:	497b      	ldr	r1, [pc, #492]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006eaa:	4b76      	ldr	r3, [pc, #472]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb8:	4972      	ldr	r1, [pc, #456]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ecc:	4b6d      	ldr	r3, [pc, #436]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	496a      	ldr	r1, [pc, #424]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eee:	4b65      	ldr	r3, [pc, #404]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efc:	4961      	ldr	r1, [pc, #388]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f10:	4b5c      	ldr	r3, [pc, #368]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1e:	4959      	ldr	r1, [pc, #356]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f32:	4b54      	ldr	r3, [pc, #336]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f40:	4950      	ldr	r1, [pc, #320]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f54:	4b4b      	ldr	r3, [pc, #300]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	4948      	ldr	r1, [pc, #288]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f76:	4b43      	ldr	r3, [pc, #268]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	493f      	ldr	r1, [pc, #252]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d028      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f98:	4b3a      	ldr	r3, [pc, #232]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa6:	4937      	ldr	r1, [pc, #220]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb6:	d106      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb8:	4b32      	ldr	r3, [pc, #200]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a31      	ldr	r2, [pc, #196]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc2:	60d3      	str	r3, [r2, #12]
 8006fc4:	e011      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fce:	d10c      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fe36 	bl	8007c48 <RCCEx_PLLSAI1_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006fe0:	7cfb      	ldrb	r3, [r7, #19]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006fe6:	7cfb      	ldrb	r3, [r7, #19]
 8006fe8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d028      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ff6:	4b23      	ldr	r3, [pc, #140]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007004:	491f      	ldr	r1, [pc, #124]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007014:	d106      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007016:	4b1b      	ldr	r3, [pc, #108]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	4a1a      	ldr	r2, [pc, #104]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800701c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007020:	60d3      	str	r3, [r2, #12]
 8007022:	e011      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800702c:	d10c      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3304      	adds	r3, #4
 8007032:	2101      	movs	r1, #1
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fe07 	bl	8007c48 <RCCEx_PLLSAI1_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800703e:	7cfb      	ldrb	r3, [r7, #19]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007044:	7cfb      	ldrb	r3, [r7, #19]
 8007046:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d02b      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007054:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007062:	4908      	ldr	r1, [pc, #32]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007072:	d109      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007074:	4b03      	ldr	r3, [pc, #12]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	4a02      	ldr	r2, [pc, #8]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800707a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800707e:	60d3      	str	r3, [r2, #12]
 8007080:	e014      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007082:	bf00      	nop
 8007084:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007090:	d10c      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3304      	adds	r3, #4
 8007096:	2101      	movs	r1, #1
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fdd5 	bl	8007c48 <RCCEx_PLLSAI1_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070a2:	7cfb      	ldrb	r3, [r7, #19]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80070a8:	7cfb      	ldrb	r3, [r7, #19]
 80070aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d02f      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070b8:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070c6:	4928      	ldr	r1, [pc, #160]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070d6:	d10d      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3304      	adds	r3, #4
 80070dc:	2102      	movs	r1, #2
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fdb2 	bl	8007c48 <RCCEx_PLLSAI1_Config>
 80070e4:	4603      	mov	r3, r0
 80070e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070e8:	7cfb      	ldrb	r3, [r7, #19]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d014      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80070ee:	7cfb      	ldrb	r3, [r7, #19]
 80070f0:	74bb      	strb	r3, [r7, #18]
 80070f2:	e011      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070fc:	d10c      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3320      	adds	r3, #32
 8007102:	2102      	movs	r1, #2
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fe93 	bl	8007e30 <RCCEx_PLLSAI2_Config>
 800710a:	4603      	mov	r3, r0
 800710c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800710e:	7cfb      	ldrb	r3, [r7, #19]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007114:	7cfb      	ldrb	r3, [r7, #19]
 8007116:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007124:	4b10      	ldr	r3, [pc, #64]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007132:	490d      	ldr	r1, [pc, #52]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007134:	4313      	orrs	r3, r2
 8007136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00b      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007146:	4b08      	ldr	r3, [pc, #32]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800714c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007156:	4904      	ldr	r1, [pc, #16]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800715e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40021000 	.word	0x40021000

0800716c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800717e:	d13e      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007180:	4bb2      	ldr	r3, [pc, #712]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007192:	d028      	beq.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719a:	f200 8542 	bhi.w	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a4:	d005      	beq.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ac:	d00e      	beq.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80071ae:	f000 bd38 	b.w	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071b2:	4ba6      	ldr	r3, [pc, #664]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b02      	cmp	r3, #2
 80071be:	f040 8532 	bne.w	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80071c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c6:	61fb      	str	r3, [r7, #28]
      break;
 80071c8:	f000 bd2d 	b.w	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80071cc:	4b9f      	ldr	r3, [pc, #636]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80071ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	f040 8527 	bne.w	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80071dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071e0:	61fb      	str	r3, [r7, #28]
      break;
 80071e2:	f000 bd22 	b.w	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071e6:	4b99      	ldr	r3, [pc, #612]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f2:	f040 851c 	bne.w	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80071f6:	4b96      	ldr	r3, [pc, #600]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80071f8:	61fb      	str	r3, [r7, #28]
      break;
 80071fa:	f000 bd18 	b.w	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071fe:	4b93      	ldr	r3, [pc, #588]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d036      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b03      	cmp	r3, #3
 8007212:	d840      	bhi.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d003      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d020      	beq.n	8007262 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007220:	e039      	b.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007222:	4b8a      	ldr	r3, [pc, #552]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b02      	cmp	r3, #2
 800722c:	d116      	bne.n	800725c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800722e:	4b87      	ldr	r3, [pc, #540]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d005      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800723a:	4b84      	ldr	r3, [pc, #528]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	091b      	lsrs	r3, r3, #4
 8007240:	f003 030f 	and.w	r3, r3, #15
 8007244:	e005      	b.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007246:	4b81      	ldr	r3, [pc, #516]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800724c:	0a1b      	lsrs	r3, r3, #8
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	4a80      	ldr	r2, [pc, #512]	; (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8007254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007258:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800725a:	e01f      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
      break;
 8007260:	e01c      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007262:	4b7a      	ldr	r3, [pc, #488]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800726a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800726e:	d102      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8007270:	4b79      	ldr	r3, [pc, #484]	; (8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8007272:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007274:	e012      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	61bb      	str	r3, [r7, #24]
      break;
 800727a:	e00f      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800727c:	4b73      	ldr	r3, [pc, #460]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007288:	d102      	bne.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800728a:	4b74      	ldr	r3, [pc, #464]	; (800745c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800728c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800728e:	e005      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	61bb      	str	r3, [r7, #24]
      break;
 8007294:	e002      	b.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	61bb      	str	r3, [r7, #24]
      break;
 800729a:	bf00      	nop
    }

    switch(PeriphClk)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072a2:	f000 80dd 	beq.w	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072ac:	f200 84c1 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072b6:	f000 80d3 	beq.w	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072c0:	f200 84b7 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ca:	f000 835f 	beq.w	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d4:	f200 84ad 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072de:	f000 847e 	beq.w	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e8:	f200 84a3 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072f2:	f000 82cd 	beq.w	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072fc:	f200 8499 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007306:	f000 80ab 	beq.w	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007310:	f200 848f 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731a:	f000 8090 	beq.w	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007324:	f200 8485 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800732e:	d07f      	beq.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007336:	f200 847c 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007340:	f000 8403 	beq.w	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734a:	f200 8472 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007354:	f000 83af 	beq.w	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800735e:	f200 8468 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007368:	f000 8379 	beq.w	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007372:	f200 845e 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b80      	cmp	r3, #128	; 0x80
 800737a:	f000 8344 	beq.w	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b80      	cmp	r3, #128	; 0x80
 8007382:	f200 8456 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b20      	cmp	r3, #32
 800738a:	d84b      	bhi.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 844f 	beq.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3b01      	subs	r3, #1
 8007398:	2b1f      	cmp	r3, #31
 800739a:	f200 844a 	bhi.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	0800758d 	.word	0x0800758d
 80073a8:	080075fb 	.word	0x080075fb
 80073ac:	08007c33 	.word	0x08007c33
 80073b0:	0800768f 	.word	0x0800768f
 80073b4:	08007c33 	.word	0x08007c33
 80073b8:	08007c33 	.word	0x08007c33
 80073bc:	08007c33 	.word	0x08007c33
 80073c0:	08007715 	.word	0x08007715
 80073c4:	08007c33 	.word	0x08007c33
 80073c8:	08007c33 	.word	0x08007c33
 80073cc:	08007c33 	.word	0x08007c33
 80073d0:	08007c33 	.word	0x08007c33
 80073d4:	08007c33 	.word	0x08007c33
 80073d8:	08007c33 	.word	0x08007c33
 80073dc:	08007c33 	.word	0x08007c33
 80073e0:	0800778d 	.word	0x0800778d
 80073e4:	08007c33 	.word	0x08007c33
 80073e8:	08007c33 	.word	0x08007c33
 80073ec:	08007c33 	.word	0x08007c33
 80073f0:	08007c33 	.word	0x08007c33
 80073f4:	08007c33 	.word	0x08007c33
 80073f8:	08007c33 	.word	0x08007c33
 80073fc:	08007c33 	.word	0x08007c33
 8007400:	08007c33 	.word	0x08007c33
 8007404:	08007c33 	.word	0x08007c33
 8007408:	08007c33 	.word	0x08007c33
 800740c:	08007c33 	.word	0x08007c33
 8007410:	08007c33 	.word	0x08007c33
 8007414:	08007c33 	.word	0x08007c33
 8007418:	08007c33 	.word	0x08007c33
 800741c:	08007c33 	.word	0x08007c33
 8007420:	0800780f 	.word	0x0800780f
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b40      	cmp	r3, #64	; 0x40
 8007428:	f000 82c1 	beq.w	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800742c:	f000 bc01 	b.w	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007430:	69b9      	ldr	r1, [r7, #24]
 8007432:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007436:	f000 fdd9 	bl	8007fec <RCCEx_GetSAIxPeriphCLKFreq>
 800743a:	61f8      	str	r0, [r7, #28]
      break;
 800743c:	e3fa      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800743e:	69b9      	ldr	r1, [r7, #24]
 8007440:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007444:	f000 fdd2 	bl	8007fec <RCCEx_GetSAIxPeriphCLKFreq>
 8007448:	61f8      	str	r0, [r7, #28]
      break;
 800744a:	e3f3      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800744c:	40021000 	.word	0x40021000
 8007450:	0005b8d8 	.word	0x0005b8d8
 8007454:	080137b8 	.word	0x080137b8
 8007458:	00f42400 	.word	0x00f42400
 800745c:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007460:	4ba9      	ldr	r3, [pc, #676]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007466:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800746a:	613b      	str	r3, [r7, #16]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007472:	d00c      	beq.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800747a:	d87f      	bhi.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007482:	d04e      	beq.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800748a:	d01d      	beq.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 800748c:	e076      	b.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800748e:	4b9e      	ldr	r3, [pc, #632]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b02      	cmp	r3, #2
 8007498:	d172      	bne.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800749a:	4b9b      	ldr	r3, [pc, #620]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80074a6:	4b98      	ldr	r3, [pc, #608]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	e005      	b.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80074b2:	4b95      	ldr	r3, [pc, #596]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	4a93      	ldr	r2, [pc, #588]	; (800770c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80074c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c4:	61fb      	str	r3, [r7, #28]
          break;
 80074c6:	e05b      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80074c8:	4b8f      	ldr	r3, [pc, #572]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074d4:	d156      	bne.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80074d6:	4b8c      	ldr	r3, [pc, #560]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e2:	d14f      	bne.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80074e4:	4b88      	ldr	r3, [pc, #544]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	0a1b      	lsrs	r3, r3, #8
 80074ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ee:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	fb03 f202 	mul.w	r2, r3, r2
 80074f8:	4b83      	ldr	r3, [pc, #524]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	091b      	lsrs	r3, r3, #4
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	3301      	adds	r3, #1
 8007504:	fbb2 f3f3 	udiv	r3, r2, r3
 8007508:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800750a:	4b7f      	ldr	r3, [pc, #508]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	0d5b      	lsrs	r3, r3, #21
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	3301      	adds	r3, #1
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	fbb2 f3f3 	udiv	r3, r2, r3
 800751e:	61fb      	str	r3, [r7, #28]
          break;
 8007520:	e030      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007522:	4b79      	ldr	r3, [pc, #484]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800752a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800752e:	d12b      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007530:	4b75      	ldr	r3, [pc, #468]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007538:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800753c:	d124      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800753e:	4b72      	ldr	r3, [pc, #456]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007548:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	fb03 f202 	mul.w	r2, r3, r2
 8007552:	4b6d      	ldr	r3, [pc, #436]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	091b      	lsrs	r3, r3, #4
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	3301      	adds	r3, #1
 800755e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007562:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007564:	4b68      	ldr	r3, [pc, #416]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	0d5b      	lsrs	r3, r3, #21
 800756a:	f003 0303 	and.w	r3, r3, #3
 800756e:	3301      	adds	r3, #1
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	fbb2 f3f3 	udiv	r3, r2, r3
 8007578:	61fb      	str	r3, [r7, #28]
          break;
 800757a:	e005      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800757c:	bf00      	nop
 800757e:	e359      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007580:	bf00      	nop
 8007582:	e357      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007584:	bf00      	nop
 8007586:	e355      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007588:	bf00      	nop
        break;
 800758a:	e353      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800758c:	4b5e      	ldr	r3, [pc, #376]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800758e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2b03      	cmp	r3, #3
 800759c:	d827      	bhi.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800759e:	a201      	add	r2, pc, #4	; (adr r2, 80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80075a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a4:	080075b5 	.word	0x080075b5
 80075a8:	080075bd 	.word	0x080075bd
 80075ac:	080075c5 	.word	0x080075c5
 80075b0:	080075d9 	.word	0x080075d9
          frequency = HAL_RCC_GetPCLK2Freq();
 80075b4:	f7ff fa7a 	bl	8006aac <HAL_RCC_GetPCLK2Freq>
 80075b8:	61f8      	str	r0, [r7, #28]
          break;
 80075ba:	e01d      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80075bc:	f7ff f9c8 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 80075c0:	61f8      	str	r0, [r7, #28]
          break;
 80075c2:	e019      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075c4:	4b50      	ldr	r3, [pc, #320]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d0:	d10f      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80075d2:	4b4f      	ldr	r3, [pc, #316]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80075d4:	61fb      	str	r3, [r7, #28]
          break;
 80075d6:	e00c      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075d8:	4b4b      	ldr	r3, [pc, #300]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80075da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d107      	bne.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80075e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ea:	61fb      	str	r3, [r7, #28]
          break;
 80075ec:	e003      	b.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80075ee:	bf00      	nop
 80075f0:	e320      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80075f2:	bf00      	nop
 80075f4:	e31e      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80075f6:	bf00      	nop
        break;
 80075f8:	e31c      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80075fa:	4b43      	ldr	r3, [pc, #268]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007600:	f003 030c 	and.w	r3, r3, #12
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b0c      	cmp	r3, #12
 800760a:	d83a      	bhi.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800760c:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007649 	.word	0x08007649
 8007618:	08007683 	.word	0x08007683
 800761c:	08007683 	.word	0x08007683
 8007620:	08007683 	.word	0x08007683
 8007624:	08007651 	.word	0x08007651
 8007628:	08007683 	.word	0x08007683
 800762c:	08007683 	.word	0x08007683
 8007630:	08007683 	.word	0x08007683
 8007634:	08007659 	.word	0x08007659
 8007638:	08007683 	.word	0x08007683
 800763c:	08007683 	.word	0x08007683
 8007640:	08007683 	.word	0x08007683
 8007644:	0800766d 	.word	0x0800766d
          frequency = HAL_RCC_GetPCLK1Freq();
 8007648:	f7ff fa1a 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 800764c:	61f8      	str	r0, [r7, #28]
          break;
 800764e:	e01d      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8007650:	f7ff f97e 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 8007654:	61f8      	str	r0, [r7, #28]
          break;
 8007656:	e019      	b.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007658:	4b2b      	ldr	r3, [pc, #172]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007664:	d10f      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8007666:	4b2a      	ldr	r3, [pc, #168]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007668:	61fb      	str	r3, [r7, #28]
          break;
 800766a:	e00c      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800766c:	4b26      	ldr	r3, [pc, #152]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800766e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b02      	cmp	r3, #2
 8007678:	d107      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800767a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800767e:	61fb      	str	r3, [r7, #28]
          break;
 8007680:	e003      	b.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8007682:	bf00      	nop
 8007684:	e2d6      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007686:	bf00      	nop
 8007688:	e2d4      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800768a:	bf00      	nop
        break;
 800768c:	e2d2      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800768e:	4b1e      	ldr	r3, [pc, #120]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007694:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b30      	cmp	r3, #48	; 0x30
 800769e:	d021      	beq.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b30      	cmp	r3, #48	; 0x30
 80076a4:	d829      	bhi.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d011      	beq.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d823      	bhi.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2b10      	cmp	r3, #16
 80076bc:	d004      	beq.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80076be:	e01c      	b.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80076c0:	f7ff f9de 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 80076c4:	61f8      	str	r0, [r7, #28]
          break;
 80076c6:	e01d      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80076c8:	f7ff f942 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 80076cc:	61f8      	str	r0, [r7, #28]
          break;
 80076ce:	e019      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076dc:	d10f      	bne.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80076de:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80076e0:	61fb      	str	r3, [r7, #28]
          break;
 80076e2:	e00c      	b.n	80076fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80076e4:	4b08      	ldr	r3, [pc, #32]	; (8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80076e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d107      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80076f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f6:	61fb      	str	r3, [r7, #28]
          break;
 80076f8:	e003      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80076fa:	bf00      	nop
 80076fc:	e29a      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80076fe:	bf00      	nop
 8007700:	e298      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007702:	bf00      	nop
        break;
 8007704:	e296      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007706:	bf00      	nop
 8007708:	40021000 	.word	0x40021000
 800770c:	080137b8 	.word	0x080137b8
 8007710:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007714:	4b9b      	ldr	r3, [pc, #620]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2bc0      	cmp	r3, #192	; 0xc0
 8007724:	d021      	beq.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2bc0      	cmp	r3, #192	; 0xc0
 800772a:	d829      	bhi.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2b80      	cmp	r3, #128	; 0x80
 8007730:	d011      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	2b80      	cmp	r3, #128	; 0x80
 8007736:	d823      	bhi.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d004      	beq.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8007744:	e01c      	b.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007746:	f7ff f99b 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 800774a:	61f8      	str	r0, [r7, #28]
          break;
 800774c:	e01d      	b.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800774e:	f7ff f8ff 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 8007752:	61f8      	str	r0, [r7, #28]
          break;
 8007754:	e019      	b.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007756:	4b8b      	ldr	r3, [pc, #556]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800775e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007762:	d10f      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8007764:	4b88      	ldr	r3, [pc, #544]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8007766:	61fb      	str	r3, [r7, #28]
          break;
 8007768:	e00c      	b.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800776a:	4b86      	ldr	r3, [pc, #536]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800776c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b02      	cmp	r3, #2
 8007776:	d107      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8007778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800777c:	61fb      	str	r3, [r7, #28]
          break;
 800777e:	e003      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8007780:	bf00      	nop
 8007782:	e257      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007784:	bf00      	nop
 8007786:	e255      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007788:	bf00      	nop
        break;
 800778a:	e253      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800778c:	4b7d      	ldr	r3, [pc, #500]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800779e:	d025      	beq.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a6:	d82c      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ae:	d013      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077b6:	d824      	bhi.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d004      	beq.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c4:	d004      	beq.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80077c6:	e01c      	b.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80077c8:	f7ff f95a 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 80077cc:	61f8      	str	r0, [r7, #28]
          break;
 80077ce:	e01d      	b.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80077d0:	f7ff f8be 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 80077d4:	61f8      	str	r0, [r7, #28]
          break;
 80077d6:	e019      	b.n	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077d8:	4b6a      	ldr	r3, [pc, #424]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e4:	d10f      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80077e6:	4b68      	ldr	r3, [pc, #416]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80077e8:	61fb      	str	r3, [r7, #28]
          break;
 80077ea:	e00c      	b.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80077ec:	4b65      	ldr	r3, [pc, #404]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80077ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d107      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80077fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077fe:	61fb      	str	r3, [r7, #28]
          break;
 8007800:	e003      	b.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8007802:	bf00      	nop
 8007804:	e216      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007806:	bf00      	nop
 8007808:	e214      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800780a:	bf00      	nop
        break;
 800780c:	e212      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800780e:	4b5d      	ldr	r3, [pc, #372]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007820:	d025      	beq.n	800786e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007828:	d82c      	bhi.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007830:	d013      	beq.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007838:	d824      	bhi.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007846:	d004      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8007848:	e01c      	b.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800784a:	f7ff f919 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 800784e:	61f8      	str	r0, [r7, #28]
          break;
 8007850:	e01d      	b.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8007852:	f7ff f87d 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 8007856:	61f8      	str	r0, [r7, #28]
          break;
 8007858:	e019      	b.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800785a:	4b4a      	ldr	r3, [pc, #296]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007866:	d10f      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8007868:	4b47      	ldr	r3, [pc, #284]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800786a:	61fb      	str	r3, [r7, #28]
          break;
 800786c:	e00c      	b.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800786e:	4b45      	ldr	r3, [pc, #276]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b02      	cmp	r3, #2
 800787a:	d107      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 800787c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007880:	61fb      	str	r3, [r7, #28]
          break;
 8007882:	e003      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8007884:	bf00      	nop
 8007886:	e1d5      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007888:	bf00      	nop
 800788a:	e1d3      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800788c:	bf00      	nop
        break;
 800788e:	e1d1      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007890:	4b3c      	ldr	r3, [pc, #240]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007896:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078a2:	d00c      	beq.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078aa:	d864      	bhi.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b2:	d008      	beq.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078ba:	d030      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80078bc:	e05b      	b.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80078be:	f7ff f847 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 80078c2:	61f8      	str	r0, [r7, #28]
          break;
 80078c4:	e05c      	b.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80078c6:	4b2f      	ldr	r3, [pc, #188]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078d2:	d152      	bne.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80078d4:	4b2b      	ldr	r3, [pc, #172]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d04c      	beq.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80078e0:	4b28      	ldr	r3, [pc, #160]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	0a1b      	lsrs	r3, r3, #8
 80078e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ea:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	fb03 f202 	mul.w	r2, r3, r2
 80078f4:	4b23      	ldr	r3, [pc, #140]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	091b      	lsrs	r3, r3, #4
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	3301      	adds	r3, #1
 8007900:	fbb2 f3f3 	udiv	r3, r2, r3
 8007904:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007906:	4b1f      	ldr	r3, [pc, #124]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	0e5b      	lsrs	r3, r3, #25
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	3301      	adds	r3, #1
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	fbb2 f3f3 	udiv	r3, r2, r3
 800791a:	61fb      	str	r3, [r7, #28]
          break;
 800791c:	e02d      	b.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800791e:	4b19      	ldr	r3, [pc, #100]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800792a:	d128      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800792c:	4b15      	ldr	r3, [pc, #84]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d022      	beq.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	0a1b      	lsrs	r3, r3, #8
 800793e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007942:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	fb03 f202 	mul.w	r2, r3, r2
 800794c:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	091b      	lsrs	r3, r3, #4
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	3301      	adds	r3, #1
 8007958:	fbb2 f3f3 	udiv	r3, r2, r3
 800795c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800795e:	4b09      	ldr	r3, [pc, #36]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	0e5b      	lsrs	r3, r3, #25
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	3301      	adds	r3, #1
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007972:	61fb      	str	r3, [r7, #28]
          break;
 8007974:	e003      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8007976:	bf00      	nop
 8007978:	e15c      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800797a:	bf00      	nop
 800797c:	e15a      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800797e:	bf00      	nop
        break;
 8007980:	e158      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8007982:	bf00      	nop
 8007984:	40021000 	.word	0x40021000
 8007988:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800798c:	4b9d      	ldr	r3, [pc, #628]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007996:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d103      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 800799e:	f7ff f885 	bl	8006aac <HAL_RCC_GetPCLK2Freq>
 80079a2:	61f8      	str	r0, [r7, #28]
        break;
 80079a4:	e146      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80079a6:	f7fe ffd3 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 80079aa:	61f8      	str	r0, [r7, #28]
        break;
 80079ac:	e142      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80079ae:	4b95      	ldr	r3, [pc, #596]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80079b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c0:	d013      	beq.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c8:	d819      	bhi.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d6:	d004      	beq.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80079d8:	e011      	b.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80079da:	f7ff f851 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 80079de:	61f8      	str	r0, [r7, #28]
          break;
 80079e0:	e010      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80079e2:	f7fe ffb5 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 80079e6:	61f8      	str	r0, [r7, #28]
          break;
 80079e8:	e00c      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079ea:	4b86      	ldr	r3, [pc, #536]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f6:	d104      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80079f8:	4b83      	ldr	r3, [pc, #524]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80079fa:	61fb      	str	r3, [r7, #28]
          break;
 80079fc:	e001      	b.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80079fe:	bf00      	nop
 8007a00:	e118      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007a02:	bf00      	nop
        break;
 8007a04:	e116      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007a06:	4b7f      	ldr	r3, [pc, #508]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a18:	d013      	beq.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a20:	d819      	bhi.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d004      	beq.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a2e:	d004      	beq.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8007a30:	e011      	b.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a32:	f7ff f825 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 8007a36:	61f8      	str	r0, [r7, #28]
          break;
 8007a38:	e010      	b.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a3a:	f7fe ff89 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 8007a3e:	61f8      	str	r0, [r7, #28]
          break;
 8007a40:	e00c      	b.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a42:	4b70      	ldr	r3, [pc, #448]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a4e:	d104      	bne.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8007a50:	4b6d      	ldr	r3, [pc, #436]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8007a52:	61fb      	str	r3, [r7, #28]
          break;
 8007a54:	e001      	b.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8007a56:	bf00      	nop
 8007a58:	e0ec      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007a5a:	bf00      	nop
        break;
 8007a5c:	e0ea      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007a5e:	4b69      	ldr	r3, [pc, #420]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a68:	613b      	str	r3, [r7, #16]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a70:	d013      	beq.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a78:	d819      	bhi.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a86:	d004      	beq.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8007a88:	e011      	b.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a8a:	f7fe fff9 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 8007a8e:	61f8      	str	r0, [r7, #28]
          break;
 8007a90:	e010      	b.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a92:	f7fe ff5d 	bl	8006950 <HAL_RCC_GetSysClockFreq>
 8007a96:	61f8      	str	r0, [r7, #28]
          break;
 8007a98:	e00c      	b.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a9a:	4b5a      	ldr	r3, [pc, #360]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa6:	d104      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8007aa8:	4b57      	ldr	r3, [pc, #348]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8007aaa:	61fb      	str	r3, [r7, #28]
          break;
 8007aac:	e001      	b.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8007aae:	bf00      	nop
 8007ab0:	e0c0      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007ab2:	bf00      	nop
        break;
 8007ab4:	e0be      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007ab6:	4b53      	ldr	r3, [pc, #332]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007abc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007ac0:	613b      	str	r3, [r7, #16]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007ac8:	d02c      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007ad0:	d833      	bhi.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ad8:	d01a      	beq.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ae0:	d82b      	bhi.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007aee:	d004      	beq.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8007af0:	e023      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007af2:	f7fe ffc5 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 8007af6:	61f8      	str	r0, [r7, #28]
          break;
 8007af8:	e026      	b.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007afa:	4b42      	ldr	r3, [pc, #264]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d11a      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8007b08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b0c:	61fb      	str	r3, [r7, #28]
          break;
 8007b0e:	e016      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b10:	4b3c      	ldr	r3, [pc, #240]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1c:	d111      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8007b1e:	4b3a      	ldr	r3, [pc, #232]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8007b20:	61fb      	str	r3, [r7, #28]
          break;
 8007b22:	e00e      	b.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b24:	4b37      	ldr	r3, [pc, #220]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d109      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8007b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b36:	61fb      	str	r3, [r7, #28]
          break;
 8007b38:	e005      	b.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8007b3a:	bf00      	nop
 8007b3c:	e07a      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007b3e:	bf00      	nop
 8007b40:	e078      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007b42:	bf00      	nop
 8007b44:	e076      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007b46:	bf00      	nop
        break;
 8007b48:	e074      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007b4a:	4b2e      	ldr	r3, [pc, #184]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b5c:	d02c      	beq.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b64:	d833      	bhi.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b6c:	d01a      	beq.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b74:	d82b      	bhi.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b82:	d004      	beq.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8007b84:	e023      	b.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b86:	f7fe ff7b 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 8007b8a:	61f8      	str	r0, [r7, #28]
          break;
 8007b8c:	e026      	b.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007b8e:	4b1d      	ldr	r3, [pc, #116]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d11a      	bne.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8007b9c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ba0:	61fb      	str	r3, [r7, #28]
          break;
 8007ba2:	e016      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ba4:	4b17      	ldr	r3, [pc, #92]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb0:	d111      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8007bb2:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8007bb4:	61fb      	str	r3, [r7, #28]
          break;
 8007bb6:	e00e      	b.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007bb8:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d109      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8007bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bca:	61fb      	str	r3, [r7, #28]
          break;
 8007bcc:	e005      	b.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8007bce:	bf00      	nop
 8007bd0:	e030      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007bd2:	bf00      	nop
 8007bd4:	e02e      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007bd6:	bf00      	nop
 8007bd8:	e02c      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8007bda:	bf00      	nop
        break;
 8007bdc:	e02a      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007be8:	613b      	str	r3, [r7, #16]
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf6:	d009      	beq.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8007bf8:	e012      	b.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bfa:	f7fe ff41 	bl	8006a80 <HAL_RCC_GetPCLK1Freq>
 8007bfe:	61f8      	str	r0, [r7, #28]
          break;
 8007c00:	e00e      	b.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8007c02:	bf00      	nop
 8007c04:	40021000 	.word	0x40021000
 8007c08:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c0c:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c18:	d101      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	; (8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8007c1c:	61fb      	str	r3, [r7, #28]
          break;
 8007c1e:	bf00      	nop
        break;
 8007c20:	e008      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007c22:	bf00      	nop
 8007c24:	e006      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007c26:	bf00      	nop
 8007c28:	e004      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e002      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007c2e:	bf00      	nop
 8007c30:	e000      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8007c32:	bf00      	nop
    }
  }

  return(frequency);
 8007c34:	69fb      	ldr	r3, [r7, #28]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3720      	adds	r7, #32
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40021000 	.word	0x40021000
 8007c44:	00f42400 	.word	0x00f42400

08007c48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c56:	4b75      	ldr	r3, [pc, #468]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d018      	beq.n	8007c94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007c62:	4b72      	ldr	r3, [pc, #456]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f003 0203 	and.w	r2, r3, #3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d10d      	bne.n	8007c8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
       ||
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d009      	beq.n	8007c8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007c7a:	4b6c      	ldr	r3, [pc, #432]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	091b      	lsrs	r3, r3, #4
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
       ||
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d047      	beq.n	8007d1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	73fb      	strb	r3, [r7, #15]
 8007c92:	e044      	b.n	8007d1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d018      	beq.n	8007cce <RCCEx_PLLSAI1_Config+0x86>
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d825      	bhi.n	8007cec <RCCEx_PLLSAI1_Config+0xa4>
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d002      	beq.n	8007caa <RCCEx_PLLSAI1_Config+0x62>
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d009      	beq.n	8007cbc <RCCEx_PLLSAI1_Config+0x74>
 8007ca8:	e020      	b.n	8007cec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007caa:	4b60      	ldr	r3, [pc, #384]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d11d      	bne.n	8007cf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cba:	e01a      	b.n	8007cf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007cbc:	4b5b      	ldr	r3, [pc, #364]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d116      	bne.n	8007cf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ccc:	e013      	b.n	8007cf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007cce:	4b57      	ldr	r3, [pc, #348]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10f      	bne.n	8007cfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007cda:	4b54      	ldr	r3, [pc, #336]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cea:	e006      	b.n	8007cfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e004      	b.n	8007cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007cf2:	bf00      	nop
 8007cf4:	e002      	b.n	8007cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007cf6:	bf00      	nop
 8007cf8:	e000      	b.n	8007cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007cfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10d      	bne.n	8007d1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007d02:	4b4a      	ldr	r3, [pc, #296]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	430b      	orrs	r3, r1
 8007d18:	4944      	ldr	r1, [pc, #272]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d17d      	bne.n	8007e20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007d24:	4b41      	ldr	r3, [pc, #260]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a40      	ldr	r2, [pc, #256]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d30:	f7fb fbaa 	bl	8003488 <HAL_GetTick>
 8007d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007d36:	e009      	b.n	8007d4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d38:	f7fb fba6 	bl	8003488 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d902      	bls.n	8007d4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	73fb      	strb	r3, [r7, #15]
        break;
 8007d4a:	e005      	b.n	8007d58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007d4c:	4b37      	ldr	r3, [pc, #220]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1ef      	bne.n	8007d38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d160      	bne.n	8007e20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d111      	bne.n	8007d88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d64:	4b31      	ldr	r3, [pc, #196]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6892      	ldr	r2, [r2, #8]
 8007d74:	0211      	lsls	r1, r2, #8
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	68d2      	ldr	r2, [r2, #12]
 8007d7a:	0912      	lsrs	r2, r2, #4
 8007d7c:	0452      	lsls	r2, r2, #17
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	492a      	ldr	r1, [pc, #168]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	610b      	str	r3, [r1, #16]
 8007d86:	e027      	b.n	8007dd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d112      	bne.n	8007db4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d8e:	4b27      	ldr	r3, [pc, #156]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007d96:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6892      	ldr	r2, [r2, #8]
 8007d9e:	0211      	lsls	r1, r2, #8
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6912      	ldr	r2, [r2, #16]
 8007da4:	0852      	lsrs	r2, r2, #1
 8007da6:	3a01      	subs	r2, #1
 8007da8:	0552      	lsls	r2, r2, #21
 8007daa:	430a      	orrs	r2, r1
 8007dac:	491f      	ldr	r1, [pc, #124]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	610b      	str	r3, [r1, #16]
 8007db2:	e011      	b.n	8007dd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007db4:	4b1d      	ldr	r3, [pc, #116]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007dbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	6892      	ldr	r2, [r2, #8]
 8007dc4:	0211      	lsls	r1, r2, #8
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6952      	ldr	r2, [r2, #20]
 8007dca:	0852      	lsrs	r2, r2, #1
 8007dcc:	3a01      	subs	r2, #1
 8007dce:	0652      	lsls	r2, r2, #25
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	4916      	ldr	r1, [pc, #88]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007dd8:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a13      	ldr	r2, [pc, #76]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007dde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007de2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de4:	f7fb fb50 	bl	8003488 <HAL_GetTick>
 8007de8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007dea:	e009      	b.n	8007e00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007dec:	f7fb fb4c 	bl	8003488 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d902      	bls.n	8007e00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	73fb      	strb	r3, [r7, #15]
          break;
 8007dfe:	e005      	b.n	8007e0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0ef      	beq.n	8007dec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d106      	bne.n	8007e20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007e12:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	4904      	ldr	r1, [pc, #16]	; (8007e2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	40021000 	.word	0x40021000

08007e30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007e3e:	4b6a      	ldr	r3, [pc, #424]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d018      	beq.n	8007e7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007e4a:	4b67      	ldr	r3, [pc, #412]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f003 0203 	and.w	r2, r3, #3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d10d      	bne.n	8007e76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
       ||
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007e62:	4b61      	ldr	r3, [pc, #388]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	091b      	lsrs	r3, r3, #4
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
       ||
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d047      	beq.n	8007f06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	73fb      	strb	r3, [r7, #15]
 8007e7a:	e044      	b.n	8007f06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d018      	beq.n	8007eb6 <RCCEx_PLLSAI2_Config+0x86>
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d825      	bhi.n	8007ed4 <RCCEx_PLLSAI2_Config+0xa4>
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d002      	beq.n	8007e92 <RCCEx_PLLSAI2_Config+0x62>
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d009      	beq.n	8007ea4 <RCCEx_PLLSAI2_Config+0x74>
 8007e90:	e020      	b.n	8007ed4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007e92:	4b55      	ldr	r3, [pc, #340]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d11d      	bne.n	8007eda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ea2:	e01a      	b.n	8007eda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ea4:	4b50      	ldr	r3, [pc, #320]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d116      	bne.n	8007ede <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007eb4:	e013      	b.n	8007ede <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007eb6:	4b4c      	ldr	r3, [pc, #304]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10f      	bne.n	8007ee2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ec2:	4b49      	ldr	r3, [pc, #292]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d109      	bne.n	8007ee2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ed2:	e006      	b.n	8007ee2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed8:	e004      	b.n	8007ee4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007eda:	bf00      	nop
 8007edc:	e002      	b.n	8007ee4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007ede:	bf00      	nop
 8007ee0:	e000      	b.n	8007ee4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007ee2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10d      	bne.n	8007f06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007eea:	4b3f      	ldr	r3, [pc, #252]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6819      	ldr	r1, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	430b      	orrs	r3, r1
 8007f00:	4939      	ldr	r1, [pc, #228]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d167      	bne.n	8007fdc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007f0c:	4b36      	ldr	r3, [pc, #216]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a35      	ldr	r2, [pc, #212]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f18:	f7fb fab6 	bl	8003488 <HAL_GetTick>
 8007f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f1e:	e009      	b.n	8007f34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007f20:	f7fb fab2 	bl	8003488 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d902      	bls.n	8007f34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	73fb      	strb	r3, [r7, #15]
        break;
 8007f32:	e005      	b.n	8007f40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007f34:	4b2c      	ldr	r3, [pc, #176]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1ef      	bne.n	8007f20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d14a      	bne.n	8007fdc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d111      	bne.n	8007f70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f4c:	4b26      	ldr	r3, [pc, #152]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6892      	ldr	r2, [r2, #8]
 8007f5c:	0211      	lsls	r1, r2, #8
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	68d2      	ldr	r2, [r2, #12]
 8007f62:	0912      	lsrs	r2, r2, #4
 8007f64:	0452      	lsls	r2, r2, #17
 8007f66:	430a      	orrs	r2, r1
 8007f68:	491f      	ldr	r1, [pc, #124]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	614b      	str	r3, [r1, #20]
 8007f6e:	e011      	b.n	8007f94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007f70:	4b1d      	ldr	r3, [pc, #116]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007f78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6892      	ldr	r2, [r2, #8]
 8007f80:	0211      	lsls	r1, r2, #8
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6912      	ldr	r2, [r2, #16]
 8007f86:	0852      	lsrs	r2, r2, #1
 8007f88:	3a01      	subs	r2, #1
 8007f8a:	0652      	lsls	r2, r2, #25
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	4916      	ldr	r1, [pc, #88]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007f94:	4b14      	ldr	r3, [pc, #80]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a13      	ldr	r2, [pc, #76]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa0:	f7fb fa72 	bl	8003488 <HAL_GetTick>
 8007fa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007fa6:	e009      	b.n	8007fbc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007fa8:	f7fb fa6e 	bl	8003488 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d902      	bls.n	8007fbc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	73fb      	strb	r3, [r7, #15]
          break;
 8007fba:	e005      	b.n	8007fc8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0ef      	beq.n	8007fa8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d106      	bne.n	8007fdc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007fce:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fd0:	695a      	ldr	r2, [r3, #20]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	4904      	ldr	r1, [pc, #16]	; (8007fe8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40021000 	.word	0x40021000

08007fec <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b089      	sub	sp, #36	; 0x24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008008:	d10c      	bne.n	8008024 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800800a:	4b6e      	ldr	r3, [pc, #440]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800800c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008010:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008014:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800801c:	d112      	bne.n	8008044 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800801e:	4b6a      	ldr	r3, [pc, #424]	; (80081c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	e00f      	b.n	8008044 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802a:	d10b      	bne.n	8008044 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800802c:	4b65      	ldr	r3, [pc, #404]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800802e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008032:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008036:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800803e:	d101      	bne.n	8008044 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008040:	4b61      	ldr	r3, [pc, #388]	; (80081c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008042:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f040 80b4 	bne.w	80081b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008056:	d003      	beq.n	8008060 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800805e:	d135      	bne.n	80080cc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008060:	4b58      	ldr	r3, [pc, #352]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800806c:	f040 80a1 	bne.w	80081b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8008070:	4b54      	ldr	r3, [pc, #336]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 809a 	beq.w	80081b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800807e:	4b51      	ldr	r3, [pc, #324]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	091b      	lsrs	r3, r3, #4
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	3301      	adds	r3, #1
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008090:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008092:	4b4c      	ldr	r3, [pc, #304]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	0a1b      	lsrs	r3, r3, #8
 8008098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80080a4:	4b47      	ldr	r3, [pc, #284]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80080b0:	2311      	movs	r3, #17
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e001      	b.n	80080ba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80080b6:	2307      	movs	r3, #7
 80080b8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	fb03 f202 	mul.w	r2, r3, r2
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80080ca:	e072      	b.n	80081b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d133      	bne.n	800813a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80080d2:	4b3c      	ldr	r3, [pc, #240]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080de:	d169      	bne.n	80081b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80080e0:	4b38      	ldr	r3, [pc, #224]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d063      	beq.n	80081b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80080ec:	4b35      	ldr	r3, [pc, #212]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	091b      	lsrs	r3, r3, #4
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	3301      	adds	r3, #1
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080fe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008100:	4b30      	ldr	r3, [pc, #192]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	0a1b      	lsrs	r3, r3, #8
 8008106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800810a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008112:	4b2c      	ldr	r3, [pc, #176]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800811e:	2311      	movs	r3, #17
 8008120:	617b      	str	r3, [r7, #20]
 8008122:	e001      	b.n	8008128 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8008124:	2307      	movs	r3, #7
 8008126:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	fb03 f202 	mul.w	r2, r3, r2
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	fbb2 f3f3 	udiv	r3, r2, r3
 8008136:	61fb      	str	r3, [r7, #28]
 8008138:	e03c      	b.n	80081b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008140:	d003      	beq.n	800814a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008148:	d134      	bne.n	80081b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800814a:	4b1e      	ldr	r3, [pc, #120]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008156:	d12d      	bne.n	80081b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008158:	4b1a      	ldr	r3, [pc, #104]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d027      	beq.n	80081b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008164:	4b17      	ldr	r3, [pc, #92]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	091b      	lsrs	r3, r3, #4
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	3301      	adds	r3, #1
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008178:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	0a1b      	lsrs	r3, r3, #8
 800817e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008182:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800818a:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8008196:	2311      	movs	r3, #17
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	e001      	b.n	80081a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800819c:	2307      	movs	r3, #7
 800819e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	fb03 f202 	mul.w	r2, r3, r2
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	e000      	b.n	80081b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80081b2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80081b4:	69fb      	ldr	r3, [r7, #28]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3724      	adds	r7, #36	; 0x24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	40021000 	.word	0x40021000
 80081c8:	001fff68 	.word	0x001fff68

080081cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d079      	beq.n	80082d2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fa fe66 	bl	8002ec4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f003 0310 	and.w	r3, r3, #16
 800820a:	2b10      	cmp	r3, #16
 800820c:	d058      	beq.n	80082c0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	22ca      	movs	r2, #202	; 0xca
 8008214:	625a      	str	r2, [r3, #36]	; 0x24
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2253      	movs	r2, #83	; 0x53
 800821c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9a4 	bl	800856c <RTC_EnterInitMode>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d127      	bne.n	800827e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6812      	ldr	r2, [r2, #0]
 8008238:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800823c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008240:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6899      	ldr	r1, [r3, #8]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	431a      	orrs	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68d2      	ldr	r2, [r2, #12]
 8008268:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6919      	ldr	r1, [r3, #16]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	041a      	lsls	r2, r3, #16
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f9a8 	bl	80085d4 <RTC_ExitInitMode>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d113      	bne.n	80082b6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0203 	bic.w	r2, r2, #3
 800829c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	69da      	ldr	r2, [r3, #28]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	22ff      	movs	r2, #255	; 0xff
 80082bc:	625a      	str	r2, [r3, #36]	; 0x24
 80082be:	e001      	b.n	80082c4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d103      	bne.n	80082d2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <HAL_RTC_SetTime+0x1a>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e08b      	b.n	800840e <HAL_RTC_SetTime+0x132>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2202      	movs	r2, #2
 8008302:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	22ca      	movs	r2, #202	; 0xca
 800830c:	625a      	str	r2, [r3, #36]	; 0x24
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2253      	movs	r2, #83	; 0x53
 8008314:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f928 	bl	800856c <RTC_EnterInitMode>
 800831c:	4603      	mov	r3, r0
 800831e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008320:	7cfb      	ldrb	r3, [r7, #19]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d163      	bne.n	80083ee <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d126      	bne.n	800837a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2200      	movs	r2, #0
 800833e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 f983 	bl	8008650 <RTC_ByteToBcd2>
 800834a:	4603      	mov	r3, r0
 800834c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	785b      	ldrb	r3, [r3, #1]
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f97c 	bl	8008650 <RTC_ByteToBcd2>
 8008358:	4603      	mov	r3, r0
 800835a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800835c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	789b      	ldrb	r3, [r3, #2]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f974 	bl	8008650 <RTC_ByteToBcd2>
 8008368:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800836a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	78db      	ldrb	r3, [r3, #3]
 8008372:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e018      	b.n	80083ac <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d102      	bne.n	800838e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	785b      	ldrb	r3, [r3, #1]
 8008398:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800839a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083a0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	78db      	ldrb	r3, [r3, #3]
 80083a6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80083b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80083ba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6899      	ldr	r1, [r3, #8]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	431a      	orrs	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 f8f5 	bl	80085d4 <RTC_ExitInitMode>
 80083ea:	4603      	mov	r3, r0
 80083ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	22ff      	movs	r2, #255	; 0xff
 80083f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80083f6:	7cfb      	ldrb	r3, [r7, #19]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800840c:	7cfb      	ldrb	r3, [r7, #19]
}
 800840e:	4618      	mov	r0, r3
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	bd90      	pop	{r4, r7, pc}

08008416 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b087      	sub	sp, #28
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_RTC_SetDate+0x1a>
 800842c:	2302      	movs	r3, #2
 800842e:	e075      	b.n	800851c <HAL_RTC_SetDate+0x106>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10e      	bne.n	8008464 <HAL_RTC_SetDate+0x4e>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	f023 0310 	bic.w	r3, r3, #16
 800845a:	b2db      	uxtb	r3, r3
 800845c:	330a      	adds	r3, #10
 800845e:	b2da      	uxtb	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d11c      	bne.n	80084a4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	78db      	ldrb	r3, [r3, #3]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f8ee 	bl	8008650 <RTC_ByteToBcd2>
 8008474:	4603      	mov	r3, r0
 8008476:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 f8e7 	bl	8008650 <RTC_ByteToBcd2>
 8008482:	4603      	mov	r3, r0
 8008484:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008486:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	789b      	ldrb	r3, [r3, #2]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f8df 	bl	8008650 <RTC_ByteToBcd2>
 8008492:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008494:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	e00e      	b.n	80084c2 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	78db      	ldrb	r3, [r3, #3]
 80084a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80084b0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80084b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	22ca      	movs	r2, #202	; 0xca
 80084c8:	625a      	str	r2, [r3, #36]	; 0x24
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2253      	movs	r2, #83	; 0x53
 80084d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 f84a 	bl	800856c <RTC_EnterInitMode>
 80084d8:	4603      	mov	r3, r0
 80084da:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80084dc:	7cfb      	ldrb	r3, [r7, #19]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10c      	bne.n	80084fc <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80084f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 f86e 	bl	80085d4 <RTC_ExitInitMode>
 80084f8:	4603      	mov	r3, r0
 80084fa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	22ff      	movs	r2, #255	; 0xff
 8008502:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008504:	7cfb      	ldrb	r3, [r7, #19]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d103      	bne.n	8008512 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800851a:	7cfb      	ldrb	r3, [r7, #19]
}
 800851c:	4618      	mov	r0, r3
 800851e:	371c      	adds	r7, #28
 8008520:	46bd      	mov	sp, r7
 8008522:	bd90      	pop	{r4, r7, pc}

08008524 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a0d      	ldr	r2, [pc, #52]	; (8008568 <HAL_RTC_WaitForSynchro+0x44>)
 8008532:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008534:	f7fa ffa8 	bl	8003488 <HAL_GetTick>
 8008538:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800853a:	e009      	b.n	8008550 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800853c:	f7fa ffa4 	bl	8003488 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800854a:	d901      	bls.n	8008550 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e007      	b.n	8008560 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f003 0320 	and.w	r3, r3, #32
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0ee      	beq.n	800853c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	0003ff5f 	.word	0x0003ff5f

0800856c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d120      	bne.n	80085c8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f04f 32ff 	mov.w	r2, #4294967295
 800858e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008590:	f7fa ff7a 	bl	8003488 <HAL_GetTick>
 8008594:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008596:	e00d      	b.n	80085b4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008598:	f7fa ff76 	bl	8003488 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085a6:	d905      	bls.n	80085b4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2203      	movs	r2, #3
 80085b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d102      	bne.n	80085c8 <RTC_EnterInitMode+0x5c>
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d1e7      	bne.n	8008598 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80085e0:	4b1a      	ldr	r3, [pc, #104]	; (800864c <RTC_ExitInitMode+0x78>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	4a19      	ldr	r2, [pc, #100]	; (800864c <RTC_ExitInitMode+0x78>)
 80085e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ea:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80085ec:	4b17      	ldr	r3, [pc, #92]	; (800864c <RTC_ExitInitMode+0x78>)
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10c      	bne.n	8008612 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff ff93 	bl	8008524 <HAL_RTC_WaitForSynchro>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01e      	beq.n	8008642 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2203      	movs	r2, #3
 8008608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	73fb      	strb	r3, [r7, #15]
 8008610:	e017      	b.n	8008642 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008612:	4b0e      	ldr	r3, [pc, #56]	; (800864c <RTC_ExitInitMode+0x78>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	4a0d      	ldr	r2, [pc, #52]	; (800864c <RTC_ExitInitMode+0x78>)
 8008618:	f023 0320 	bic.w	r3, r3, #32
 800861c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff ff80 	bl	8008524 <HAL_RTC_WaitForSynchro>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2203      	movs	r2, #3
 800862e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008636:	4b05      	ldr	r3, [pc, #20]	; (800864c <RTC_ExitInitMode+0x78>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	4a04      	ldr	r2, [pc, #16]	; (800864c <RTC_ExitInitMode+0x78>)
 800863c:	f043 0320 	orr.w	r3, r3, #32
 8008640:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008642:	7bfb      	ldrb	r3, [r7, #15]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	40002800 	.word	0x40002800

08008650 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8008662:	e005      	b.n	8008670 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	3301      	adds	r3, #1
 8008668:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800866a:	7afb      	ldrb	r3, [r7, #11]
 800866c:	3b0a      	subs	r3, #10
 800866e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008670:	7afb      	ldrb	r3, [r7, #11]
 8008672:	2b09      	cmp	r3, #9
 8008674:	d8f6      	bhi.n	8008664 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	b2da      	uxtb	r2, r3
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	4313      	orrs	r3, r2
 8008682:	b2db      	uxtb	r3, r3
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e022      	b.n	80086e8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d105      	bne.n	80086ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7fa fc37 	bl	8002f28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2203      	movs	r2, #3
 80086be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f814 	bl	80086f0 <HAL_SD_InitCard>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e00a      	b.n	80086e8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80086f0:	b5b0      	push	{r4, r5, r7, lr}
 80086f2:	b08e      	sub	sp, #56	; 0x38
 80086f4:	af04      	add	r7, sp, #16
 80086f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008700:	2300      	movs	r3, #0
 8008702:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008704:	2300      	movs	r3, #0
 8008706:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008708:	2300      	movs	r3, #0
 800870a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800870c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008710:	f7fe fd2c 	bl	800716c <HAL_RCCEx_GetPeriphCLKFreq>
 8008714:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	d109      	bne.n	8008730 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800872a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e07b      	b.n	8008828 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	09db      	lsrs	r3, r3, #7
 8008734:	4a3e      	ldr	r2, [pc, #248]	; (8008830 <HAL_SD_InitCard+0x140>)
 8008736:	fba2 2303 	umull	r2, r3, r2, r3
 800873a:	091b      	lsrs	r3, r3, #4
 800873c:	3b02      	subs	r3, #2
 800873e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681d      	ldr	r5, [r3, #0]
 8008744:	466c      	mov	r4, sp
 8008746:	f107 0314 	add.w	r3, r7, #20
 800874a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800874e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008758:	4628      	mov	r0, r5
 800875a:	f001 fac1 	bl	8009ce0 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800876c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4618      	mov	r0, r3
 8008774:	f001 faff 	bl	8009d76 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008786:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	3302      	adds	r3, #2
 800878c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800878e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008794:	4a27      	ldr	r2, [pc, #156]	; (8008834 <HAL_SD_InitCard+0x144>)
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	fbb2 f3f3 	udiv	r3, r2, r3
 800879c:	3301      	adds	r3, #1
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fa fe7e 	bl	80034a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 ffdf 	bl	8009768 <SD_PowerON>
 80087aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e02e      	b.n	8008828 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fefe 	bl	80095cc <SD_InitCard>
 80087d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00b      	beq.n	80087f0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e01b      	b.n	8008828 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087f8:	4618      	mov	r0, r3
 80087fa:	f001 fb4f 	bl	8009e9c <SDMMC_CmdBlockLength>
 80087fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00f      	beq.n	8008826 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a0b      	ldr	r2, [pc, #44]	; (8008838 <HAL_SD_InitCard+0x148>)
 800880c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e000      	b.n	8008828 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3728      	adds	r7, #40	; 0x28
 800882c:	46bd      	mov	sp, r7
 800882e:	bdb0      	pop	{r4, r5, r7, pc}
 8008830:	014f8b59 	.word	0x014f8b59
 8008834:	00012110 	.word	0x00012110
 8008838:	004005ff 	.word	0x004005ff

0800883c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08c      	sub	sp, #48	; 0x30
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
 8008848:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d107      	bne.n	8008864 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e0a9      	b.n	80089b8 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b01      	cmp	r3, #1
 800886e:	f040 80a2 	bne.w	80089b6 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	441a      	add	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008882:	429a      	cmp	r2, r3
 8008884:	d907      	bls.n	8008896 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e090      	b.n	80089b8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2203      	movs	r2, #3
 800889a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2200      	movs	r2, #0
 80088a4:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	4a45      	ldr	r2, [pc, #276]	; (80089c0 <HAL_SD_ReadBlocks_DMA+0x184>)
 80088ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b2:	4a44      	ldr	r2, [pc, #272]	; (80089c4 <HAL_SD_ReadBlocks_DMA+0x188>)
 80088b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	2200      	movs	r2, #0
 80088bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3380      	adds	r3, #128	; 0x80
 80088c8:	4619      	mov	r1, r3
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	025b      	lsls	r3, r3, #9
 80088d0:	089b      	lsrs	r3, r3, #2
 80088d2:	f7fa ffd3 	bl	800387c <HAL_DMA_Start_IT>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00f      	beq.n	80088fc <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a39      	ldr	r2, [pc, #228]	; (80089c8 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80088e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e05d      	b.n	80089b8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0208 	orr.w	r2, r2, #8
 800890a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008910:	2b01      	cmp	r3, #1
 8008912:	d002      	beq.n	800891a <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	025b      	lsls	r3, r3, #9
 8008918:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800891a:	f04f 33ff 	mov.w	r3, #4294967295
 800891e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	025b      	lsls	r3, r3, #9
 8008924:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008926:	2390      	movs	r3, #144	; 0x90
 8008928:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800892a:	2302      	movs	r3, #2
 800892c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800892e:	2300      	movs	r3, #0
 8008930:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008932:	2301      	movs	r3, #1
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f107 0210 	add.w	r2, r7, #16
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f001 fa7f 	bl	8009e44 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d90a      	bls.n	8008962 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2282      	movs	r2, #130	; 0x82
 8008950:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008958:	4618      	mov	r0, r3
 800895a:	f001 fae3 	bl	8009f24 <SDMMC_CmdReadMultiBlock>
 800895e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008960:	e009      	b.n	8008976 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2281      	movs	r2, #129	; 0x81
 8008966:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800896e:	4618      	mov	r0, r3
 8008970:	f001 fab6 	bl	8009ee0 <SDMMC_CmdReadSingleBlock>
 8008974:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d012      	beq.n	80089a2 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8008982:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	431a      	orrs	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e00a      	b.n	80089b8 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80089b0:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	e000      	b.n	80089b8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80089b6:	2302      	movs	r3, #2
  }
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3730      	adds	r7, #48	; 0x30
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	080093e7 	.word	0x080093e7
 80089c4:	08009459 	.word	0x08009459
 80089c8:	004005ff 	.word	0x004005ff

080089cc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08c      	sub	sp, #48	; 0x30
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d107      	bne.n	80089f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e0ac      	b.n	8008b4e <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	f040 80a5 	bne.w	8008b4c <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	441a      	add	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d907      	bls.n	8008a26 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e093      	b.n	8008b4e <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2203      	movs	r2, #3
 8008a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3a:	4a47      	ldr	r2, [pc, #284]	; (8008b58 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8008a3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a42:	4a46      	ldr	r2, [pc, #280]	; (8008b5c <HAL_SD_WriteBlocks_DMA+0x190>)
 8008a44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d002      	beq.n	8008a5c <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	025b      	lsls	r3, r3, #9
 8008a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d90a      	bls.n	8008a78 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	22a0      	movs	r2, #160	; 0xa0
 8008a66:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 fa9c 	bl	8009fac <SDMMC_CmdWriteMultiBlock>
 8008a74:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a76:	e009      	b.n	8008a8c <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2290      	movs	r2, #144	; 0x90
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 fa6f 	bl	8009f68 <SDMMC_CmdWriteSingleBlock>
 8008a8a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d012      	beq.n	8008ab8 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a32      	ldr	r2, [pc, #200]	; (8008b60 <HAL_SD_WriteBlocks_DMA+0x194>)
 8008a98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e04a      	b.n	8008b4e <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0208 	orr.w	r2, r2, #8
 8008ac6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008acc:	68b9      	ldr	r1, [r7, #8]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3380      	adds	r3, #128	; 0x80
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	025b      	lsls	r3, r3, #9
 8008ada:	089b      	lsrs	r3, r3, #2
 8008adc:	f7fa fece 	bl	800387c <HAL_DMA_Start_IT>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d012      	beq.n	8008b0c <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a1d      	ldr	r2, [pc, #116]	; (8008b60 <HAL_SD_WriteBlocks_DMA+0x194>)
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e020      	b.n	8008b4e <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b10:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	025b      	lsls	r3, r3, #9
 8008b16:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b18:	2390      	movs	r3, #144	; 0x90
 8008b1a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f107 0210 	add.w	r2, r7, #16
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 f986 	bl	8009e44 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 021a 	orr.w	r2, r2, #26
 8008b46:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e000      	b.n	8008b4e <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8008b4c:	2302      	movs	r3, #2
  }
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3730      	adds	r7, #48	; 0x30
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	080093bd 	.word	0x080093bd
 8008b5c:	08009459 	.word	0x08009459
 8008b60:	004005ff 	.word	0x004005ff

08008b64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d008      	beq.n	8008b92 <HAL_SD_IRQHandler+0x2e>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f003 0308 	and.w	r3, r3, #8
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d003      	beq.n	8008b92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f001 f802 	bl	8009b94 <SD_Read_IT>
 8008b90:	e155      	b.n	8008e3e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 808f 	beq.w	8008cc0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6812      	ldr	r2, [r2, #0]
 8008bb6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008bba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008bbe:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 0201 	bic.w	r2, r2, #1
 8008bce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f003 0308 	and.w	r3, r3, #8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d039      	beq.n	8008c4e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <HAL_SD_IRQHandler+0x8a>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d011      	beq.n	8008c12 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 f9fc 	bl	8009ff0 <SDMMC_CmdStopTransfer>
 8008bf8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d008      	beq.n	8008c12 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f91f 	bl	8008e50 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c1a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <HAL_SD_IRQHandler+0xda>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f003 f8c4 	bl	800bdcc <HAL_SD_RxCpltCallback>
 8008c44:	e0fb      	b.n	8008e3e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f003 f8b6 	bl	800bdb8 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8008c4c:	e0f7      	b.n	8008e3e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 80f2 	beq.w	8008e3e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f003 0320 	and.w	r3, r3, #32
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d011      	beq.n	8008c88 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 f9c1 	bl	8009ff0 <SDMMC_CmdStopTransfer>
 8008c6e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d008      	beq.n	8008c88 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f8e4 	bl	8008e50 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f040 80d5 	bne.w	8008e3e <HAL_SD_IRQHandler+0x2da>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f040 80cf 	bne.w	8008e3e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 0208 	bic.w	r2, r2, #8
 8008cae:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f003 f87d 	bl	800bdb8 <HAL_SD_TxCpltCallback>
}
 8008cbe:	e0be      	b.n	8008e3e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d008      	beq.n	8008ce0 <HAL_SD_IRQHandler+0x17c>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f003 0308 	and.w	r3, r3, #8
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 ffac 	bl	8009c36 <SD_Write_IT>
 8008cde:	e0ae      	b.n	8008e3e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 80a7 	beq.w	8008e3e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d005      	beq.n	8008d0a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d02:	f043 0202 	orr.w	r2, r3, #2
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d10:	f003 0308 	and.w	r3, r3, #8
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	f043 0208 	orr.w	r2, r3, #8
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d36:	f043 0220 	orr.w	r2, r3, #32
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d44:	f003 0310 	and.w	r3, r3, #16
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d005      	beq.n	8008d58 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d50:	f043 0210 	orr.w	r2, r3, #16
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008d70:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 f93a 	bl	8009ff0 <SDMMC_CmdStopTransfer>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f003 0308 	and.w	r3, r3, #8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f855 	bl	8008e50 <HAL_SD_ErrorCallback>
}
 8008da6:	e04a      	b.n	8008e3e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d045      	beq.n	8008e3e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d104      	bne.n	8008dc6 <HAL_SD_IRQHandler+0x262>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f003 0320 	and.w	r3, r3, #32
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d011      	beq.n	8008dea <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dca:	4a1f      	ldr	r2, [pc, #124]	; (8008e48 <HAL_SD_IRQHandler+0x2e4>)
 8008dcc:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fa fdb2 	bl	800393c <HAL_DMA_Abort_IT>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d02f      	beq.n	8008e3e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fb84 	bl	80094f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008de8:	e029      	b.n	8008e3e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <HAL_SD_IRQHandler+0x29a>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d011      	beq.n	8008e22 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	4a12      	ldr	r2, [pc, #72]	; (8008e4c <HAL_SD_IRQHandler+0x2e8>)
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fa fd96 	bl	800393c <HAL_DMA_Abort_IT>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d013      	beq.n	8008e3e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fb9f 	bl	800955e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008e20:	e00d      	b.n	8008e3e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f002 ffb4 	bl	800bda4 <HAL_SD_AbortCallback>
}
 8008e3c:	e7ff      	b.n	8008e3e <HAL_SD_IRQHandler+0x2da>
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	080094f1 	.word	0x080094f1
 8008e4c:	0800955f 	.word	0x0800955f

08008e50 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e72:	0f9b      	lsrs	r3, r3, #30
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e7e:	0e9b      	lsrs	r3, r3, #26
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	f003 030f 	and.w	r3, r3, #15
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e90:	0e1b      	lsrs	r3, r3, #24
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f003 0303 	and.w	r3, r3, #3
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea2:	0c1b      	lsrs	r3, r3, #16
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ec4:	0d1b      	lsrs	r3, r3, #20
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ed0:	0c1b      	lsrs	r3, r3, #16
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	f003 030f 	and.w	r3, r3, #15
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ee2:	0bdb      	lsrs	r3, r3, #15
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ef4:	0b9b      	lsrs	r3, r3, #14
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f06:	0b5b      	lsrs	r3, r3, #13
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f18:	0b1b      	lsrs	r3, r3, #12
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d163      	bne.n	8008ffc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f38:	009a      	lsls	r2, r3, #2
 8008f3a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008f3e:	4013      	ands	r3, r2
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008f44:	0f92      	lsrs	r2, r2, #30
 8008f46:	431a      	orrs	r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f50:	0edb      	lsrs	r3, r3, #27
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 0307 	and.w	r3, r3, #7
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f62:	0e1b      	lsrs	r3, r3, #24
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f74:	0d5b      	lsrs	r3, r3, #21
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	f003 0307 	and.w	r3, r3, #7
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f86:	0c9b      	lsrs	r3, r3, #18
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f98:	0bdb      	lsrs	r3, r3, #15
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	f003 0307 	and.w	r3, r3, #7
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	7e1b      	ldrb	r3, [r3, #24]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	3302      	adds	r3, #2
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008fc6:	fb03 f202 	mul.w	r2, r3, r2
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	7a1b      	ldrb	r3, [r3, #8]
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	2201      	movs	r2, #1
 8008fda:	409a      	lsls	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008fe8:	0a52      	lsrs	r2, r2, #9
 8008fea:	fb03 f202 	mul.w	r2, r3, r2
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ff8:	661a      	str	r2, [r3, #96]	; 0x60
 8008ffa:	e031      	b.n	8009060 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009000:	2b01      	cmp	r3, #1
 8009002:	d11d      	bne.n	8009040 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009008:	041b      	lsls	r3, r3, #16
 800900a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009012:	0c1b      	lsrs	r3, r3, #16
 8009014:	431a      	orrs	r2, r3
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	3301      	adds	r3, #1
 8009020:	029a      	lsls	r2, r3, #10
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009034:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	661a      	str	r2, [r3, #96]	; 0x60
 800903e:	e00f      	b.n	8009060 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a58      	ldr	r2, [pc, #352]	; (80091a8 <HAL_SD_GetCardCSD+0x344>)
 8009046:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e09d      	b.n	800919c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009064:	0b9b      	lsrs	r3, r3, #14
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	b2da      	uxtb	r2, r3
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009076:	09db      	lsrs	r3, r3, #7
 8009078:	b2db      	uxtb	r3, r3
 800907a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800907e:	b2da      	uxtb	r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009088:	b2db      	uxtb	r3, r3
 800908a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800908e:	b2da      	uxtb	r2, r3
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009098:	0fdb      	lsrs	r3, r3, #31
 800909a:	b2da      	uxtb	r2, r3
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a4:	0f5b      	lsrs	r3, r3, #29
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	f003 0303 	and.w	r3, r3, #3
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b6:	0e9b      	lsrs	r3, r3, #26
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c8:	0d9b      	lsrs	r3, r3, #22
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	f003 030f 	and.w	r3, r3, #15
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090da:	0d5b      	lsrs	r3, r3, #21
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	0c1b      	lsrs	r3, r3, #16
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910a:	0bdb      	lsrs	r3, r3, #15
 800910c:	b2db      	uxtb	r3, r3
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	b2da      	uxtb	r2, r3
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	0b9b      	lsrs	r3, r3, #14
 8009120:	b2db      	uxtb	r3, r3
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	b2da      	uxtb	r2, r3
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009132:	0b5b      	lsrs	r3, r3, #13
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	b2da      	uxtb	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009146:	0b1b      	lsrs	r3, r3, #12
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915a:	0a9b      	lsrs	r3, r3, #10
 800915c:	b2db      	uxtb	r3, r3
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	b2da      	uxtb	r2, r3
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916e:	0a1b      	lsrs	r3, r3, #8
 8009170:	b2db      	uxtb	r3, r3
 8009172:	f003 0303 	and.w	r3, r3, #3
 8009176:	b2da      	uxtb	r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009182:	085b      	lsrs	r3, r3, #1
 8009184:	b2db      	uxtb	r3, r3
 8009186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918a:	b2da      	uxtb	r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	004005ff 	.word	0x004005ff

080091ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009204:	b5b0      	push	{r4, r5, r7, lr}
 8009206:	b090      	sub	sp, #64	; 0x40
 8009208:	af04      	add	r7, sp, #16
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2203      	movs	r2, #3
 8009218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009220:	2b03      	cmp	r3, #3
 8009222:	d02e      	beq.n	8009282 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922a:	d106      	bne.n	800923a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009230:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
 8009238:	e029      	b.n	800928e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009240:	d10a      	bne.n	8009258 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fb46 	bl	80098d4 <SD_WideBus_Enable>
 8009248:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	431a      	orrs	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	639a      	str	r2, [r3, #56]	; 0x38
 8009256:	e01a      	b.n	800928e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fb83 	bl	800996a <SD_WideBus_Disable>
 8009264:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	639a      	str	r2, [r3, #56]	; 0x38
 8009272:	e00c      	b.n	800928e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	639a      	str	r2, [r3, #56]	; 0x38
 8009280:	e005      	b.n	800928e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009292:	2b00      	cmp	r3, #0
 8009294:	d007      	beq.n	80092a6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a35      	ldr	r2, [pc, #212]	; (8009370 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800929c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80092a4:	e042      	b.n	800932c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80092a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80092aa:	f7fd ff5f 	bl	800716c <HAL_RCCEx_GetPeriphCLKFreq>
 80092ae:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d031      	beq.n	800931a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	3302      	adds	r3, #2
 80092d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092da:	fbb2 f3f3 	udiv	r3, r2, r3
 80092de:	4a25      	ldr	r2, [pc, #148]	; (8009374 <HAL_SD_ConfigWideBusOperation+0x170>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d907      	bls.n	80092f4 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	4a24      	ldr	r2, [pc, #144]	; (8009378 <HAL_SD_ConfigWideBusOperation+0x174>)
 80092e8:	fba2 2303 	umull	r2, r3, r2, r3
 80092ec:	0ddb      	lsrs	r3, r3, #23
 80092ee:	3b02      	subs	r3, #2
 80092f0:	623b      	str	r3, [r7, #32]
 80092f2:	e002      	b.n	80092fa <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681d      	ldr	r5, [r3, #0]
 80092fe:	466c      	mov	r4, sp
 8009300:	f107 0318 	add.w	r3, r7, #24
 8009304:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009308:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800930c:	f107 030c 	add.w	r3, r7, #12
 8009310:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009312:	4628      	mov	r0, r5
 8009314:	f000 fce4 	bl	8009ce0 <SDMMC_Init>
 8009318:	e008      	b.n	800932c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009334:	4618      	mov	r0, r3
 8009336:	f000 fdb1 	bl	8009e9c <SDMMC_CmdBlockLength>
 800933a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00c      	beq.n	800935c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a0a      	ldr	r2, [pc, #40]	; (8009370 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8009348:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	431a      	orrs	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009368:	4618      	mov	r0, r3
 800936a:	3730      	adds	r7, #48	; 0x30
 800936c:	46bd      	mov	sp, r7
 800936e:	bdb0      	pop	{r4, r5, r7, pc}
 8009370:	004005ff 	.word	0x004005ff
 8009374:	017d7840 	.word	0x017d7840
 8009378:	55e63b89 	.word	0x55e63b89

0800937c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009388:	f107 030c 	add.w	r3, r7, #12
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa78 	bl	8009884 <SD_SendStatus>
 8009394:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	431a      	orrs	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	0a5b      	lsrs	r3, r3, #9
 80093ac:	f003 030f 	and.w	r3, r3, #15
 80093b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80093b2:	693b      	ldr	r3, [r7, #16]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80093da:	bf00      	nop
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f8:	2b82      	cmp	r3, #130	; 0x82
 80093fa:	d111      	bne.n	8009420 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fdf5 	bl	8009ff0 <SDMMC_CmdStopTransfer>
 8009406:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d008      	beq.n	8009420 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	431a      	orrs	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff fd18 	bl	8008e50 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0208 	bic.w	r2, r2, #8
 800942e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f240 523a 	movw	r2, #1338	; 0x53a
 8009438:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f002 fcbf 	bl	800bdcc <HAL_SD_RxCpltCallback>
#endif
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009474:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d002      	beq.n	8009482 <SD_DMAError+0x2a>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d12d      	bne.n	80094de <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a19      	ldr	r2, [pc, #100]	; (80094ec <SD_DMAError+0x94>)
 8009488:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009498:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80094a6:	6978      	ldr	r0, [r7, #20]
 80094a8:	f7ff ff68 	bl	800937c <HAL_SD_GetCardState>
 80094ac:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b06      	cmp	r3, #6
 80094b2:	d002      	beq.n	80094ba <SD_DMAError+0x62>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b05      	cmp	r3, #5
 80094b8:	d10a      	bne.n	80094d0 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fd96 	bl	8009ff0 <SDMMC_CmdStopTransfer>
 80094c4:	4602      	mov	r2, r0
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	431a      	orrs	r2, r3
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2200      	movs	r2, #0
 80094dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80094de:	6978      	ldr	r0, [r7, #20]
 80094e0:	f7ff fcb6 	bl	8008e50 <HAL_SD_ErrorCallback>
#endif
}
 80094e4:	bf00      	nop
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	004005ff 	.word	0x004005ff

080094f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f240 523a 	movw	r2, #1338	; 0x53a
 8009506:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f7ff ff37 	bl	800937c <HAL_SD_GetCardState>
 800950e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b06      	cmp	r3, #6
 8009522:	d002      	beq.n	800952a <SD_DMATxAbort+0x3a>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b05      	cmp	r3, #5
 8009528:	d10a      	bne.n	8009540 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 fd5e 	bl	8009ff0 <SDMMC_CmdStopTransfer>
 8009534:	4602      	mov	r2, r0
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	431a      	orrs	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009544:	2b00      	cmp	r3, #0
 8009546:	d103      	bne.n	8009550 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f002 fc2b 	bl	800bda4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800954e:	e002      	b.n	8009556 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f7ff fc7d 	bl	8008e50 <HAL_SD_ErrorCallback>
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f240 523a 	movw	r2, #1338	; 0x53a
 8009574:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7ff ff00 	bl	800937c <HAL_SD_GetCardState>
 800957c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b06      	cmp	r3, #6
 8009590:	d002      	beq.n	8009598 <SD_DMARxAbort+0x3a>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b05      	cmp	r3, #5
 8009596:	d10a      	bne.n	80095ae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fd27 	bl	8009ff0 <SDMMC_CmdStopTransfer>
 80095a2:	4602      	mov	r2, r0
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a8:	431a      	orrs	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d103      	bne.n	80095be <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f002 fbf4 	bl	800bda4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80095bc:	e002      	b.n	80095c4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f7ff fc46 	bl	8008e50 <HAL_SD_ErrorCallback>
}
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80095cc:	b5b0      	push	{r4, r5, r7, lr}
 80095ce:	b094      	sub	sp, #80	; 0x50
 80095d0:	af04      	add	r7, sp, #16
 80095d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80095d4:	2301      	movs	r3, #1
 80095d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fbd9 	bl	8009d94 <SDMMC_GetPowerState>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d102      	bne.n	80095ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80095ec:	e0b8      	b.n	8009760 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d02f      	beq.n	8009656 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fe02 	bl	800a204 <SDMMC_CmdSendCID>
 8009600:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <SD_InitCard+0x40>
    {
      return errorstate;
 8009608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960a:	e0a9      	b.n	8009760 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2100      	movs	r1, #0
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fc03 	bl	8009e1e <SDMMC_GetResponse>
 8009618:	4602      	mov	r2, r0
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2104      	movs	r1, #4
 8009624:	4618      	mov	r0, r3
 8009626:	f000 fbfa 	bl	8009e1e <SDMMC_GetResponse>
 800962a:	4602      	mov	r2, r0
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2108      	movs	r1, #8
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fbf1 	bl	8009e1e <SDMMC_GetResponse>
 800963c:	4602      	mov	r2, r0
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	210c      	movs	r1, #12
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fbe8 	bl	8009e1e <SDMMC_GetResponse>
 800964e:	4602      	mov	r2, r0
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965a:	2b03      	cmp	r3, #3
 800965c:	d00d      	beq.n	800967a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f107 020e 	add.w	r2, r7, #14
 8009666:	4611      	mov	r1, r2
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fe08 	bl	800a27e <SDMMC_CmdSetRelAdd>
 800966e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <SD_InitCard+0xae>
    {
      return errorstate;
 8009676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009678:	e072      	b.n	8009760 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967e:	2b03      	cmp	r3, #3
 8009680:	d036      	beq.n	80096f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009682:	89fb      	ldrh	r3, [r7, #14]
 8009684:	461a      	mov	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009692:	041b      	lsls	r3, r3, #16
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f000 fdd2 	bl	800a240 <SDMMC_CmdSendCSD>
 800969c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800969e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80096a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a6:	e05b      	b.n	8009760 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2100      	movs	r1, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 fbb5 	bl	8009e1e <SDMMC_GetResponse>
 80096b4:	4602      	mov	r2, r0
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2104      	movs	r1, #4
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 fbac 	bl	8009e1e <SDMMC_GetResponse>
 80096c6:	4602      	mov	r2, r0
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2108      	movs	r1, #8
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fba3 	bl	8009e1e <SDMMC_GetResponse>
 80096d8:	4602      	mov	r2, r0
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	210c      	movs	r1, #12
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 fb9a 	bl	8009e1e <SDMMC_GetResponse>
 80096ea:	4602      	mov	r2, r0
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2104      	movs	r1, #4
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 fb91 	bl	8009e1e <SDMMC_GetResponse>
 80096fc:	4603      	mov	r3, r0
 80096fe:	0d1a      	lsrs	r2, r3, #20
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009704:	f107 0310 	add.w	r3, r7, #16
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff fbaa 	bl	8008e64 <HAL_SD_GetCardCSD>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009716:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800971a:	e021      	b.n	8009760 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6819      	ldr	r1, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009724:	041b      	lsls	r3, r3, #16
 8009726:	2200      	movs	r2, #0
 8009728:	461c      	mov	r4, r3
 800972a:	4615      	mov	r5, r2
 800972c:	4622      	mov	r2, r4
 800972e:	462b      	mov	r3, r5
 8009730:	4608      	mov	r0, r1
 8009732:	f000 fc7f 	bl	800a034 <SDMMC_CmdSelDesel>
 8009736:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <SD_InitCard+0x176>
  {
    return errorstate;
 800973e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009740:	e00e      	b.n	8009760 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681d      	ldr	r5, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	466c      	mov	r4, sp
 800974a:	f103 0210 	add.w	r2, r3, #16
 800974e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009750:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009754:	3304      	adds	r3, #4
 8009756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009758:	4628      	mov	r0, r5
 800975a:	f000 fac1 	bl	8009ce0 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3740      	adds	r7, #64	; 0x40
 8009764:	46bd      	mov	sp, r7
 8009766:	bdb0      	pop	{r4, r5, r7, pc}

08009768 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	2300      	movs	r3, #0
 800977a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fc7a 	bl	800a07a <SDMMC_CmdGoIdleState>
 8009786:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <SD_PowerON+0x2a>
  {
    return errorstate;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	e072      	b.n	8009878 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fc8d 	bl	800a0b6 <SDMMC_CmdOperCond>
 800979c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d00d      	beq.n	80097c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fc63 	bl	800a07a <SDMMC_CmdGoIdleState>
 80097b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d004      	beq.n	80097c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	e05b      	b.n	8009878 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d137      	bne.n	800983e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2100      	movs	r1, #0
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fc8d 	bl	800a0f4 <SDMMC_CmdAppCommand>
 80097da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d02d      	beq.n	800983e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097e6:	e047      	b.n	8009878 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2100      	movs	r1, #0
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fc80 	bl	800a0f4 <SDMMC_CmdAppCommand>
 80097f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <SD_PowerON+0x98>
    {
      return errorstate;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	e03b      	b.n	8009878 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	491e      	ldr	r1, [pc, #120]	; (8009880 <SD_PowerON+0x118>)
 8009806:	4618      	mov	r0, r3
 8009808:	f000 fc96 	bl	800a138 <SDMMC_CmdAppOperCommand>
 800980c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009814:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009818:	e02e      	b.n	8009878 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fafc 	bl	8009e1e <SDMMC_GetResponse>
 8009826:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	0fdb      	lsrs	r3, r3, #31
 800982c:	2b01      	cmp	r3, #1
 800982e:	d101      	bne.n	8009834 <SD_PowerON+0xcc>
 8009830:	2301      	movs	r3, #1
 8009832:	e000      	b.n	8009836 <SD_PowerON+0xce>
 8009834:	2300      	movs	r3, #0
 8009836:	613b      	str	r3, [r7, #16]

    count++;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	3301      	adds	r3, #1
 800983c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009844:	4293      	cmp	r3, r2
 8009846:	d802      	bhi.n	800984e <SD_PowerON+0xe6>
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0cc      	beq.n	80097e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009854:	4293      	cmp	r3, r2
 8009856:	d902      	bls.n	800985e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800985c:	e00c      	b.n	8009878 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	645a      	str	r2, [r3, #68]	; 0x44
 800986e:	e002      	b.n	8009876 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	c1100000 	.word	0xc1100000

08009884 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009894:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009898:	e018      	b.n	80098cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a2:	041b      	lsls	r3, r3, #16
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f000 fd0a 	bl	800a2c0 <SDMMC_CmdSendStatus>
 80098ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	e009      	b.n	80098cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 faad 	bl	8009e1e <SDMMC_GetResponse>
 80098c4:	4602      	mov	r2, r0
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	2300      	movs	r3, #0
 80098e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2100      	movs	r1, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fa97 	bl	8009e1e <SDMMC_GetResponse>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098fa:	d102      	bne.n	8009902 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009900:	e02f      	b.n	8009962 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009902:	f107 030c 	add.w	r3, r7, #12
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f879 	bl	8009a00 <SD_FindSCR>
 800990e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	e023      	b.n	8009962 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d01c      	beq.n	800995e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800992c:	041b      	lsls	r3, r3, #16
 800992e:	4619      	mov	r1, r3
 8009930:	4610      	mov	r0, r2
 8009932:	f000 fbdf 	bl	800a0f4 <SDMMC_CmdAppCommand>
 8009936:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	e00f      	b.n	8009962 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2102      	movs	r1, #2
 8009948:	4618      	mov	r0, r3
 800994a:	f000 fc18 	bl	800a17e <SDMMC_CmdBusWidth>
 800994e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	e003      	b.n	8009962 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800995a:	2300      	movs	r3, #0
 800995c:	e001      	b.n	8009962 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800995e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009962:	4618      	mov	r0, r3
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009972:	2300      	movs	r3, #0
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	2300      	movs	r3, #0
 8009978:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2100      	movs	r1, #0
 8009980:	4618      	mov	r0, r3
 8009982:	f000 fa4c 	bl	8009e1e <SDMMC_GetResponse>
 8009986:	4603      	mov	r3, r0
 8009988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800998c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009990:	d102      	bne.n	8009998 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009992:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009996:	e02f      	b.n	80099f8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009998:	f107 030c 	add.w	r3, r7, #12
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f82e 	bl	8009a00 <SD_FindSCR>
 80099a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	e023      	b.n	80099f8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d01c      	beq.n	80099f4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c2:	041b      	lsls	r3, r3, #16
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f000 fb94 	bl	800a0f4 <SDMMC_CmdAppCommand>
 80099cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	e00f      	b.n	80099f8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 fbcd 	bl	800a17e <SDMMC_CmdBusWidth>
 80099e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	e003      	b.n	80099f8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80099f0:	2300      	movs	r3, #0
 80099f2:	e001      	b.n	80099f8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009a00:	b590      	push	{r4, r7, lr}
 8009a02:	b08f      	sub	sp, #60	; 0x3c
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009a0a:	f7f9 fd3d 	bl	8003488 <HAL_GetTick>
 8009a0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009a14:	2300      	movs	r3, #0
 8009a16:	60bb      	str	r3, [r7, #8]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2108      	movs	r1, #8
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fa38 	bl	8009e9c <SDMMC_CmdBlockLength>
 8009a2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	e0a9      	b.n	8009b8c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a40:	041b      	lsls	r3, r3, #16
 8009a42:	4619      	mov	r1, r3
 8009a44:	4610      	mov	r0, r2
 8009a46:	f000 fb55 	bl	800a0f4 <SDMMC_CmdAppCommand>
 8009a4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	e09a      	b.n	8009b8c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a56:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009a60:	2330      	movs	r3, #48	; 0x30
 8009a62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a64:	2302      	movs	r3, #2
 8009a66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f107 0210 	add.w	r2, r7, #16
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 f9e2 	bl	8009e44 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 fb9c 	bl	800a1c2 <SDMMC_CmdSendSCR>
 8009a8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d022      	beq.n	8009ad8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	e07a      	b.n	8009b8c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00e      	beq.n	8009ac2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6819      	ldr	r1, [r3, #0]
 8009aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	f107 0208 	add.w	r2, r7, #8
 8009ab0:	18d4      	adds	r4, r2, r3
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	f000 f941 	bl	8009d3a <SDMMC_ReadFIFO>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	6023      	str	r3, [r4, #0]
      index++;
 8009abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abe:	3301      	adds	r3, #1
 8009ac0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ac2:	f7f9 fce1 	bl	8003488 <HAL_GetTick>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad0:	d102      	bne.n	8009ad8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009ad2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ad6:	e059      	b.n	8009b8c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ade:	f240 432a 	movw	r3, #1066	; 0x42a
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d0d6      	beq.n	8009a96 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aee:	f003 0308 	and.w	r3, r3, #8
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d005      	beq.n	8009b02 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2208      	movs	r2, #8
 8009afc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009afe:	2308      	movs	r3, #8
 8009b00:	e044      	b.n	8009b8c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b08:	f003 0302 	and.w	r3, r3, #2
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2202      	movs	r2, #2
 8009b16:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e037      	b.n	8009b8c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d005      	beq.n	8009b36 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2220      	movs	r2, #32
 8009b30:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009b32:	2320      	movs	r3, #32
 8009b34:	e02a      	b.n	8009b8c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f240 523a 	movw	r2, #1338	; 0x53a
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	061a      	lsls	r2, r3, #24
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	0a1b      	lsrs	r3, r3, #8
 8009b52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	0e1b      	lsrs	r3, r3, #24
 8009b5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b60:	601a      	str	r2, [r3, #0]
    scr++;
 8009b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b64:	3304      	adds	r3, #4
 8009b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	061a      	lsls	r2, r3, #24
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	021b      	lsls	r3, r3, #8
 8009b70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	0a1b      	lsrs	r3, r3, #8
 8009b7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	0e1b      	lsrs	r3, r3, #24
 8009b84:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	373c      	adds	r7, #60	; 0x3c
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd90      	pop	{r4, r7, pc}

08009b94 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d03f      	beq.n	8009c2e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]
 8009bb2:	e033      	b.n	8009c1c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 f8be 	bl	8009d3a <SDMMC_ReadFIFO>
 8009bbe:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	0a1b      	lsrs	r3, r3, #8
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3301      	adds	r3, #1
 8009be2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	0c1b      	lsrs	r3, r3, #16
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	0e1b      	lsrs	r3, r3, #24
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	617b      	str	r3, [r7, #20]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b07      	cmp	r3, #7
 8009c20:	d9c8      	bls.n	8009bb4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009c2e:	bf00      	nop
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b086      	sub	sp, #24
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d043      	beq.n	8009cd8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009c50:	2300      	movs	r3, #0
 8009c52:	617b      	str	r3, [r7, #20]
 8009c54:	e037      	b.n	8009cc6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	021a      	lsls	r2, r3, #8
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3301      	adds	r3, #1
 8009c78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	041a      	lsls	r2, r3, #16
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	061a      	lsls	r2, r3, #24
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f107 0208 	add.w	r2, r7, #8
 8009cb8:	4611      	mov	r1, r2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 f84a 	bl	8009d54 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	617b      	str	r3, [r7, #20]
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b07      	cmp	r3, #7
 8009cca:	d9c4      	bls.n	8009c56 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009cd8:	bf00      	nop
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	b480      	push	{r7}
 8009ce4:	b085      	sub	sp, #20
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	f107 001c 	add.w	r0, r7, #28
 8009cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009cfe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8009d02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009d06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009d0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009d0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009d1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	431a      	orrs	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	b004      	add	sp, #16
 8009d38:	4770      	bx	lr

08009d3a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2203      	movs	r2, #3
 8009d82:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009d84:	2002      	movs	r0, #2
 8009d86:	f7f9 fb8b 	bl	80034a0 <HAL_Delay>

  return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0303 	and.w	r3, r3, #3
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009dce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009dd4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009dda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009dea:	f023 030f 	bic.w	r3, r3, #15
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	431a      	orrs	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	b2db      	uxtb	r3, r3
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b085      	sub	sp, #20
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3314      	adds	r3, #20
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	4413      	add	r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e6a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009e70:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009e76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e82:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0

}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009eaa:	2310      	movs	r3, #16
 8009eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eae:	2340      	movs	r3, #64	; 0x40
 8009eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ebc:	f107 0308 	add.w	r3, r7, #8
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff ff74 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ecc:	2110      	movs	r1, #16
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fa18 	bl	800a304 <SDMMC_GetCmdResp1>
 8009ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3720      	adds	r7, #32
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b088      	sub	sp, #32
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009eee:	2311      	movs	r3, #17
 8009ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ef2:	2340      	movs	r3, #64	; 0x40
 8009ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009efe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f00:	f107 0308 	add.w	r3, r7, #8
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7ff ff52 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f10:	2111      	movs	r1, #17
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f9f6 	bl	800a304 <SDMMC_GetCmdResp1>
 8009f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f1a:	69fb      	ldr	r3, [r7, #28]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3720      	adds	r7, #32
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009f32:	2312      	movs	r3, #18
 8009f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f36:	2340      	movs	r3, #64	; 0x40
 8009f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f44:	f107 0308 	add.w	r3, r7, #8
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff ff30 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f54:	2112      	movs	r1, #18
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f9d4 	bl	800a304 <SDMMC_GetCmdResp1>
 8009f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f5e:	69fb      	ldr	r3, [r7, #28]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3720      	adds	r7, #32
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009f76:	2318      	movs	r3, #24
 8009f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f7a:	2340      	movs	r3, #64	; 0x40
 8009f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f88:	f107 0308 	add.w	r3, r7, #8
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff ff0e 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f98:	2118      	movs	r1, #24
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f9b2 	bl	800a304 <SDMMC_GetCmdResp1>
 8009fa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fa2:	69fb      	ldr	r3, [r7, #28]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3720      	adds	r7, #32
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b088      	sub	sp, #32
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009fba:	2319      	movs	r3, #25
 8009fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fbe:	2340      	movs	r3, #64	; 0x40
 8009fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fcc:	f107 0308 	add.w	r3, r7, #8
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff feec 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fdc:	2119      	movs	r1, #25
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f990 	bl	800a304 <SDMMC_GetCmdResp1>
 8009fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fe6:	69fb      	ldr	r3, [r7, #28]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3720      	adds	r7, #32
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009ffc:	230c      	movs	r3, #12
 8009ffe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a000:	2340      	movs	r3, #64	; 0x40
 800a002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a004:	2300      	movs	r3, #0
 800a006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a00c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a00e:	f107 0308 	add.w	r3, r7, #8
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7ff fecb 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a01a:	4a05      	ldr	r2, [pc, #20]	; (800a030 <SDMMC_CmdStopTransfer+0x40>)
 800a01c:	210c      	movs	r1, #12
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f970 	bl	800a304 <SDMMC_GetCmdResp1>
 800a024:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800a026:	69fb      	ldr	r3, [r7, #28]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3720      	adds	r7, #32
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	05f5e100 	.word	0x05f5e100

0800a034 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b08a      	sub	sp, #40	; 0x28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a044:	2307      	movs	r3, #7
 800a046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a048:	2340      	movs	r3, #64	; 0x40
 800a04a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a04c:	2300      	movs	r3, #0
 800a04e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a054:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a056:	f107 0310 	add.w	r3, r7, #16
 800a05a:	4619      	mov	r1, r3
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f7ff fea7 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a062:	f241 3288 	movw	r2, #5000	; 0x1388
 800a066:	2107      	movs	r1, #7
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f94b 	bl	800a304 <SDMMC_GetCmdResp1>
 800a06e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a072:	4618      	mov	r0, r3
 800a074:	3728      	adds	r7, #40	; 0x28
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b088      	sub	sp, #32
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a08a:	2300      	movs	r3, #0
 800a08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a08e:	2300      	movs	r3, #0
 800a090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a096:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a098:	f107 0308 	add.w	r3, r7, #8
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7ff fe86 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fb65 	bl	800a774 <SDMMC_GetCmdError>
 800a0aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3720      	adds	r7, #32
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b088      	sub	sp, #32
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a0be:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a0c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff fe67 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 faf8 	bl	800a6d8 <SDMMC_GetCmdResp7>
 800a0e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ea:	69fb      	ldr	r3, [r7, #28]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3720      	adds	r7, #32
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a102:	2337      	movs	r3, #55	; 0x37
 800a104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a106:	2340      	movs	r3, #64	; 0x40
 800a108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a10a:	2300      	movs	r3, #0
 800a10c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a10e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a114:	f107 0308 	add.w	r3, r7, #8
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff fe48 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a120:	f241 3288 	movw	r2, #5000	; 0x1388
 800a124:	2137      	movs	r1, #55	; 0x37
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f8ec 	bl	800a304 <SDMMC_GetCmdResp1>
 800a12c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a12e:	69fb      	ldr	r3, [r7, #28]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a14c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a14e:	2329      	movs	r3, #41	; 0x29
 800a150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a152:	2340      	movs	r3, #64	; 0x40
 800a154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a156:	2300      	movs	r3, #0
 800a158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a15e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a160:	f107 0308 	add.w	r3, r7, #8
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff fe22 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f9ff 	bl	800a570 <SDMMC_GetCmdResp3>
 800a172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a174:	69fb      	ldr	r3, [r7, #28]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3720      	adds	r7, #32
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b088      	sub	sp, #32
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a18c:	2306      	movs	r3, #6
 800a18e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a190:	2340      	movs	r3, #64	; 0x40
 800a192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a19c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a19e:	f107 0308 	add.w	r3, r7, #8
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff fe03 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a1aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ae:	2106      	movs	r1, #6
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f8a7 	bl	800a304 <SDMMC_GetCmdResp1>
 800a1b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3720      	adds	r7, #32
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b088      	sub	sp, #32
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a1ce:	2333      	movs	r3, #51	; 0x33
 800a1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1d2:	2340      	movs	r3, #64	; 0x40
 800a1d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff fde2 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f0:	2133      	movs	r1, #51	; 0x33
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f886 	bl	800a304 <SDMMC_GetCmdResp1>
 800a1f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a210:	2302      	movs	r3, #2
 800a212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a214:	23c0      	movs	r3, #192	; 0xc0
 800a216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a218:	2300      	movs	r3, #0
 800a21a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a21c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a220:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	4619      	mov	r1, r3
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff fdc1 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f956 	bl	800a4e0 <SDMMC_GetCmdResp2>
 800a234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a236:	69fb      	ldr	r3, [r7, #28]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3720      	adds	r7, #32
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b088      	sub	sp, #32
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a24e:	2309      	movs	r3, #9
 800a250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a252:	23c0      	movs	r3, #192	; 0xc0
 800a254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a256:	2300      	movs	r3, #0
 800a258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a25e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a260:	f107 0308 	add.w	r3, r7, #8
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff fda2 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f937 	bl	800a4e0 <SDMMC_GetCmdResp2>
 800a272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a274:	69fb      	ldr	r3, [r7, #28]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3720      	adds	r7, #32
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b088      	sub	sp, #32
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a28c:	2303      	movs	r3, #3
 800a28e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a290:	2340      	movs	r3, #64	; 0x40
 800a292:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a294:	2300      	movs	r3, #0
 800a296:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a29c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a29e:	f107 0308 	add.w	r3, r7, #8
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff fd83 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	2103      	movs	r1, #3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f99c 	bl	800a5ec <SDMMC_GetCmdResp6>
 800a2b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2b6:	69fb      	ldr	r3, [r7, #28]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3720      	adds	r7, #32
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a2ce:	230d      	movs	r3, #13
 800a2d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2d2:	2340      	movs	r3, #64	; 0x40
 800a2d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2e0:	f107 0308 	add.w	r3, r7, #8
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7ff fd62 	bl	8009db0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a2ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2f0:	210d      	movs	r1, #13
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f806 	bl	800a304 <SDMMC_GetCmdResp1>
 800a2f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3720      	adds	r7, #32
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	460b      	mov	r3, r1
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a312:	4b70      	ldr	r3, [pc, #448]	; (800a4d4 <SDMMC_GetCmdResp1+0x1d0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a70      	ldr	r2, [pc, #448]	; (800a4d8 <SDMMC_GetCmdResp1+0x1d4>)
 800a318:	fba2 2303 	umull	r2, r3, r2, r3
 800a31c:	0a5a      	lsrs	r2, r3, #9
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	fb02 f303 	mul.w	r3, r2, r3
 800a324:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	1e5a      	subs	r2, r3, #1
 800a32a:	61fa      	str	r2, [r7, #28]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d102      	bne.n	800a336 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a334:	e0c9      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a33a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0ef      	beq.n	800a326 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1ea      	bne.n	800a326 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2204      	movs	r2, #4
 800a360:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a362:	2304      	movs	r3, #4
 800a364:	e0b1      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d004      	beq.n	800a37c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2201      	movs	r2, #1
 800a376:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a378:	2301      	movs	r3, #1
 800a37a:	e0a6      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	22c5      	movs	r2, #197	; 0xc5
 800a380:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f7ff fd3e 	bl	8009e04 <SDMMC_GetCommandResponse>
 800a388:	4603      	mov	r3, r0
 800a38a:	461a      	mov	r2, r3
 800a38c:	7afb      	ldrb	r3, [r7, #11]
 800a38e:	4293      	cmp	r3, r2
 800a390:	d001      	beq.n	800a396 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a392:	2301      	movs	r3, #1
 800a394:	e099      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a396:	2100      	movs	r1, #0
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f7ff fd40 	bl	8009e1e <SDMMC_GetResponse>
 800a39e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	4b4e      	ldr	r3, [pc, #312]	; (800a4dc <SDMMC_GetCmdResp1+0x1d8>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	e08d      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	da02      	bge.n	800a3ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a3b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3b8:	e087      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a3c4:	2340      	movs	r3, #64	; 0x40
 800a3c6:	e080      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a3d2:	2380      	movs	r3, #128	; 0x80
 800a3d4:	e079      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a3e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3e4:	e071      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a3f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3f4:	e069      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a404:	e061      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a410:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a414:	e059      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a424:	e051      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a434:	e049      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a444:	e041      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a454:	e039      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a464:	e031      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a470:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a474:	e029      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a480:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a484:	e021      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a490:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a494:	e019      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4a4:	e011      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a4b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4b4:	e009      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f003 0308 	and.w	r3, r3, #8
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d002      	beq.n	800a4c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a4c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a4c4:	e001      	b.n	800a4ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a4c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3720      	adds	r7, #32
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000000 	.word	0x20000000
 800a4d8:	10624dd3 	.word	0x10624dd3
 800a4dc:	fdffe008 	.word	0xfdffe008

0800a4e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4e8:	4b1f      	ldr	r3, [pc, #124]	; (800a568 <SDMMC_GetCmdResp2+0x88>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a1f      	ldr	r2, [pc, #124]	; (800a56c <SDMMC_GetCmdResp2+0x8c>)
 800a4ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f2:	0a5b      	lsrs	r3, r3, #9
 800a4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f8:	fb02 f303 	mul.w	r3, r2, r3
 800a4fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	1e5a      	subs	r2, r3, #1
 800a502:	60fa      	str	r2, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d102      	bne.n	800a50e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a50c:	e026      	b.n	800a55c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a512:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0ef      	beq.n	800a4fe <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1ea      	bne.n	800a4fe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d004      	beq.n	800a53e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2204      	movs	r2, #4
 800a538:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a53a:	2304      	movs	r3, #4
 800a53c:	e00e      	b.n	800a55c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d004      	beq.n	800a554 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a550:	2301      	movs	r3, #1
 800a552:	e003      	b.n	800a55c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	22c5      	movs	r2, #197	; 0xc5
 800a558:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	20000000 	.word	0x20000000
 800a56c:	10624dd3 	.word	0x10624dd3

0800a570 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a578:	4b1a      	ldr	r3, [pc, #104]	; (800a5e4 <SDMMC_GetCmdResp3+0x74>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a1a      	ldr	r2, [pc, #104]	; (800a5e8 <SDMMC_GetCmdResp3+0x78>)
 800a57e:	fba2 2303 	umull	r2, r3, r2, r3
 800a582:	0a5b      	lsrs	r3, r3, #9
 800a584:	f241 3288 	movw	r2, #5000	; 0x1388
 800a588:	fb02 f303 	mul.w	r3, r2, r3
 800a58c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	1e5a      	subs	r2, r3, #1
 800a592:	60fa      	str	r2, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a59c:	e01b      	b.n	800a5d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d0ef      	beq.n	800a58e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1ea      	bne.n	800a58e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2204      	movs	r2, #4
 800a5c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5ca:	2304      	movs	r3, #4
 800a5cc:	e003      	b.n	800a5d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	22c5      	movs	r2, #197	; 0xc5
 800a5d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	20000000 	.word	0x20000000
 800a5e8:	10624dd3 	.word	0x10624dd3

0800a5ec <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	607a      	str	r2, [r7, #4]
 800a5f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5fa:	4b35      	ldr	r3, [pc, #212]	; (800a6d0 <SDMMC_GetCmdResp6+0xe4>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a35      	ldr	r2, [pc, #212]	; (800a6d4 <SDMMC_GetCmdResp6+0xe8>)
 800a600:	fba2 2303 	umull	r2, r3, r2, r3
 800a604:	0a5b      	lsrs	r3, r3, #9
 800a606:	f241 3288 	movw	r2, #5000	; 0x1388
 800a60a:	fb02 f303 	mul.w	r3, r2, r3
 800a60e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	1e5a      	subs	r2, r3, #1
 800a614:	61fa      	str	r2, [r7, #28]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d102      	bne.n	800a620 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a61a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a61e:	e052      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a624:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0ef      	beq.n	800a610 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1ea      	bne.n	800a610 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b00      	cmp	r3, #0
 800a644:	d004      	beq.n	800a650 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2204      	movs	r2, #4
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a64c:	2304      	movs	r3, #4
 800a64e:	e03a      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d004      	beq.n	800a666 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2201      	movs	r2, #1
 800a660:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a662:	2301      	movs	r3, #1
 800a664:	e02f      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f7ff fbcc 	bl	8009e04 <SDMMC_GetCommandResponse>
 800a66c:	4603      	mov	r3, r0
 800a66e:	461a      	mov	r2, r3
 800a670:	7afb      	ldrb	r3, [r7, #11]
 800a672:	4293      	cmp	r3, r2
 800a674:	d001      	beq.n	800a67a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a676:	2301      	movs	r3, #1
 800a678:	e025      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	22c5      	movs	r2, #197	; 0xc5
 800a67e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a680:	2100      	movs	r1, #0
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f7ff fbcb 	bl	8009e1e <SDMMC_GetResponse>
 800a688:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d106      	bne.n	800a6a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	0c1b      	lsrs	r3, r3, #16
 800a698:	b29a      	uxth	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e011      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a6ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6b0:	e009      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6c0:	e001      	b.n	800a6c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3720      	adds	r7, #32
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20000000 	.word	0x20000000
 800a6d4:	10624dd3 	.word	0x10624dd3

0800a6d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6e0:	4b22      	ldr	r3, [pc, #136]	; (800a76c <SDMMC_GetCmdResp7+0x94>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a22      	ldr	r2, [pc, #136]	; (800a770 <SDMMC_GetCmdResp7+0x98>)
 800a6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ea:	0a5b      	lsrs	r3, r3, #9
 800a6ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f0:	fb02 f303 	mul.w	r3, r2, r3
 800a6f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	1e5a      	subs	r2, r3, #1
 800a6fa:	60fa      	str	r2, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d102      	bne.n	800a706 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a704:	e02c      	b.n	800a760 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0ef      	beq.n	800a6f6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1ea      	bne.n	800a6f6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d004      	beq.n	800a736 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2204      	movs	r2, #4
 800a730:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a732:	2304      	movs	r3, #4
 800a734:	e014      	b.n	800a760 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d004      	beq.n	800a74c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a748:	2301      	movs	r3, #1
 800a74a:	e009      	b.n	800a760 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2240      	movs	r2, #64	; 0x40
 800a75c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a75e:	2300      	movs	r3, #0

}
 800a760:	4618      	mov	r0, r3
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	20000000 	.word	0x20000000
 800a770:	10624dd3 	.word	0x10624dd3

0800a774 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a77c:	4b11      	ldr	r3, [pc, #68]	; (800a7c4 <SDMMC_GetCmdError+0x50>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a11      	ldr	r2, [pc, #68]	; (800a7c8 <SDMMC_GetCmdError+0x54>)
 800a782:	fba2 2303 	umull	r2, r3, r2, r3
 800a786:	0a5b      	lsrs	r3, r3, #9
 800a788:	f241 3288 	movw	r2, #5000	; 0x1388
 800a78c:	fb02 f303 	mul.w	r3, r2, r3
 800a790:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	1e5a      	subs	r2, r3, #1
 800a796:	60fa      	str	r2, [r7, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a79c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7a0:	e009      	b.n	800a7b6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0f1      	beq.n	800a792 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	22c5      	movs	r2, #197	; 0xc5
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20000000 	.word	0x20000000
 800a7c8:	10624dd3 	.word	0x10624dd3

0800a7cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	f107 001c 	add.w	r0, r7, #28
 800a7da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 fa1c 	bl	800bc28 <USB_CoreReset>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d106      	bne.n	800a808 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	639a      	str	r2, [r3, #56]	; 0x38
 800a806:	e005      	b.n	800a814 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a814:	7bfb      	ldrb	r3, [r7, #15]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a820:	b004      	add	sp, #16
 800a822:	4770      	bx	lr

0800a824 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	4613      	mov	r3, r2
 800a830:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a832:	79fb      	ldrb	r3, [r7, #7]
 800a834:	2b02      	cmp	r3, #2
 800a836:	d165      	bne.n	800a904 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	4a3e      	ldr	r2, [pc, #248]	; (800a934 <USB_SetTurnaroundTime+0x110>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d906      	bls.n	800a84e <USB_SetTurnaroundTime+0x2a>
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4a3d      	ldr	r2, [pc, #244]	; (800a938 <USB_SetTurnaroundTime+0x114>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d202      	bcs.n	800a84e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a848:	230f      	movs	r3, #15
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e05c      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	4a39      	ldr	r2, [pc, #228]	; (800a938 <USB_SetTurnaroundTime+0x114>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d306      	bcc.n	800a864 <USB_SetTurnaroundTime+0x40>
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	4a38      	ldr	r2, [pc, #224]	; (800a93c <USB_SetTurnaroundTime+0x118>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d202      	bcs.n	800a864 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a85e:	230e      	movs	r3, #14
 800a860:	617b      	str	r3, [r7, #20]
 800a862:	e051      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4a35      	ldr	r2, [pc, #212]	; (800a93c <USB_SetTurnaroundTime+0x118>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d306      	bcc.n	800a87a <USB_SetTurnaroundTime+0x56>
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4a34      	ldr	r2, [pc, #208]	; (800a940 <USB_SetTurnaroundTime+0x11c>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d202      	bcs.n	800a87a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a874:	230d      	movs	r3, #13
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	e046      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	4a30      	ldr	r2, [pc, #192]	; (800a940 <USB_SetTurnaroundTime+0x11c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d306      	bcc.n	800a890 <USB_SetTurnaroundTime+0x6c>
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	4a2f      	ldr	r2, [pc, #188]	; (800a944 <USB_SetTurnaroundTime+0x120>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d802      	bhi.n	800a890 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a88a:	230c      	movs	r3, #12
 800a88c:	617b      	str	r3, [r7, #20]
 800a88e:	e03b      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	4a2c      	ldr	r2, [pc, #176]	; (800a944 <USB_SetTurnaroundTime+0x120>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d906      	bls.n	800a8a6 <USB_SetTurnaroundTime+0x82>
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	4a2b      	ldr	r2, [pc, #172]	; (800a948 <USB_SetTurnaroundTime+0x124>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d802      	bhi.n	800a8a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a8a0:	230b      	movs	r3, #11
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e030      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	4a27      	ldr	r2, [pc, #156]	; (800a948 <USB_SetTurnaroundTime+0x124>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d906      	bls.n	800a8bc <USB_SetTurnaroundTime+0x98>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	4a26      	ldr	r2, [pc, #152]	; (800a94c <USB_SetTurnaroundTime+0x128>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d802      	bhi.n	800a8bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a8b6:	230a      	movs	r3, #10
 800a8b8:	617b      	str	r3, [r7, #20]
 800a8ba:	e025      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	4a23      	ldr	r2, [pc, #140]	; (800a94c <USB_SetTurnaroundTime+0x128>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d906      	bls.n	800a8d2 <USB_SetTurnaroundTime+0xae>
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	4a22      	ldr	r2, [pc, #136]	; (800a950 <USB_SetTurnaroundTime+0x12c>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d202      	bcs.n	800a8d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a8cc:	2309      	movs	r3, #9
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	e01a      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	4a1e      	ldr	r2, [pc, #120]	; (800a950 <USB_SetTurnaroundTime+0x12c>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d306      	bcc.n	800a8e8 <USB_SetTurnaroundTime+0xc4>
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <USB_SetTurnaroundTime+0x130>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d802      	bhi.n	800a8e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a8e2:	2308      	movs	r3, #8
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e00f      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4a1a      	ldr	r2, [pc, #104]	; (800a954 <USB_SetTurnaroundTime+0x130>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d906      	bls.n	800a8fe <USB_SetTurnaroundTime+0xda>
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	4a19      	ldr	r2, [pc, #100]	; (800a958 <USB_SetTurnaroundTime+0x134>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d202      	bcs.n	800a8fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a8f8:	2307      	movs	r3, #7
 800a8fa:	617b      	str	r3, [r7, #20]
 800a8fc:	e004      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a8fe:	2306      	movs	r3, #6
 800a900:	617b      	str	r3, [r7, #20]
 800a902:	e001      	b.n	800a908 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a904:	2309      	movs	r3, #9
 800a906:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	68da      	ldr	r2, [r3, #12]
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	029b      	lsls	r3, r3, #10
 800a91c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a920:	431a      	orrs	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	371c      	adds	r7, #28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	00d8acbf 	.word	0x00d8acbf
 800a938:	00e4e1c0 	.word	0x00e4e1c0
 800a93c:	00f42400 	.word	0x00f42400
 800a940:	01067380 	.word	0x01067380
 800a944:	011a499f 	.word	0x011a499f
 800a948:	01312cff 	.word	0x01312cff
 800a94c:	014ca43f 	.word	0x014ca43f
 800a950:	016e3600 	.word	0x016e3600
 800a954:	01a6ab1f 	.word	0x01a6ab1f
 800a958:	01e84800 	.word	0x01e84800

0800a95c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f043 0201 	orr.w	r2, r3, #1
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a97e:	b480      	push	{r7}
 800a980:	b083      	sub	sp, #12
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f023 0201 	bic.w	r2, r3, #1
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9bc:	78fb      	ldrb	r3, [r7, #3]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d115      	bne.n	800a9ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a9ce:	2001      	movs	r0, #1
 800a9d0:	f7f8 fd66 	bl	80034a0 <HAL_Delay>
      ms++;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 f8ab 	bl	800bb36 <USB_GetMode>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d01e      	beq.n	800aa24 <USB_SetCurrentMode+0x84>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b31      	cmp	r3, #49	; 0x31
 800a9ea:	d9f0      	bls.n	800a9ce <USB_SetCurrentMode+0x2e>
 800a9ec:	e01a      	b.n	800aa24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a9ee:	78fb      	ldrb	r3, [r7, #3]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d115      	bne.n	800aa20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aa00:	2001      	movs	r0, #1
 800aa02:	f7f8 fd4d 	bl	80034a0 <HAL_Delay>
      ms++;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f001 f892 	bl	800bb36 <USB_GetMode>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d005      	beq.n	800aa24 <USB_SetCurrentMode+0x84>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b31      	cmp	r3, #49	; 0x31
 800aa1c:	d9f0      	bls.n	800aa00 <USB_SetCurrentMode+0x60>
 800aa1e:	e001      	b.n	800aa24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	e005      	b.n	800aa30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b32      	cmp	r3, #50	; 0x32
 800aa28:	d101      	bne.n	800aa2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e000      	b.n	800aa30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa38:	b084      	sub	sp, #16
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b086      	sub	sp, #24
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa52:	2300      	movs	r3, #0
 800aa54:	613b      	str	r3, [r7, #16]
 800aa56:	e009      	b.n	800aa6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	3340      	adds	r3, #64	; 0x40
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	2200      	movs	r2, #0
 800aa64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	613b      	str	r3, [r7, #16]
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2b0e      	cmp	r3, #14
 800aa70:	d9f2      	bls.n	800aa58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d11c      	bne.n	800aab2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa86:	f043 0302 	orr.w	r3, r3, #2
 800aa8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	e005      	b.n	800aabe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aac4:	461a      	mov	r2, r3
 800aac6:	2300      	movs	r3, #0
 800aac8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aaca:	2103      	movs	r1, #3
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f959 	bl	800ad84 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aad2:	2110      	movs	r1, #16
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 f8f1 	bl	800acbc <USB_FlushTxFifo>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f91d 	bl	800ad24 <USB_FlushRxFifo>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aafa:	461a      	mov	r2, r3
 800aafc:	2300      	movs	r3, #0
 800aafe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab06:	461a      	mov	r2, r3
 800ab08:	2300      	movs	r3, #0
 800ab0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab12:	461a      	mov	r2, r3
 800ab14:	2300      	movs	r3, #0
 800ab16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	613b      	str	r3, [r7, #16]
 800ab1c:	e043      	b.n	800aba6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	015a      	lsls	r2, r3, #5
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4413      	add	r3, r2
 800ab26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab34:	d118      	bne.n	800ab68 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab48:	461a      	mov	r2, r3
 800ab4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	e013      	b.n	800ab7a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	e008      	b.n	800ab7a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	015a      	lsls	r2, r3, #5
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab74:	461a      	mov	r2, r3
 800ab76:	2300      	movs	r3, #0
 800ab78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab86:	461a      	mov	r2, r3
 800ab88:	2300      	movs	r3, #0
 800ab8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab98:	461a      	mov	r2, r3
 800ab9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	3301      	adds	r3, #1
 800aba4:	613b      	str	r3, [r7, #16]
 800aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d3b7      	bcc.n	800ab1e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abae:	2300      	movs	r3, #0
 800abb0:	613b      	str	r3, [r7, #16]
 800abb2:	e043      	b.n	800ac3c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abca:	d118      	bne.n	800abfe <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10a      	bne.n	800abe8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abde:	461a      	mov	r2, r3
 800abe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	e013      	b.n	800ac10 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	015a      	lsls	r2, r3, #5
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	4413      	add	r3, r2
 800abf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf4:	461a      	mov	r2, r3
 800abf6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abfa:	6013      	str	r3, [r2, #0]
 800abfc:	e008      	b.n	800ac10 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	015a      	lsls	r2, r3, #5
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4413      	add	r3, r2
 800ac06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	2300      	movs	r3, #0
 800ac20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	613b      	str	r3, [r7, #16]
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d3b7      	bcc.n	800abb4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	f043 0210 	orr.w	r2, r3, #16
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	699a      	ldr	r2, [r3, #24]
 800ac76:	4b10      	ldr	r3, [pc, #64]	; (800acb8 <USB_DevInit+0x280>)
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ac7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	f043 0208 	orr.w	r2, r3, #8
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ac90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d107      	bne.n	800aca6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac9e:	f043 0304 	orr.w	r3, r3, #4
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aca6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acb2:	b004      	add	sp, #16
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	803c3800 	.word	0x803c3800

0800acbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3301      	adds	r3, #1
 800acce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	4a13      	ldr	r2, [pc, #76]	; (800ad20 <USB_FlushTxFifo+0x64>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d901      	bls.n	800acdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800acd8:	2303      	movs	r3, #3
 800acda:	e01b      	b.n	800ad14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	daf2      	bge.n	800acca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	019b      	lsls	r3, r3, #6
 800acec:	f043 0220 	orr.w	r2, r3, #32
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3301      	adds	r3, #1
 800acf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4a08      	ldr	r2, [pc, #32]	; (800ad20 <USB_FlushTxFifo+0x64>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d901      	bls.n	800ad06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ad02:	2303      	movs	r3, #3
 800ad04:	e006      	b.n	800ad14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	f003 0320 	and.w	r3, r3, #32
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	d0f0      	beq.n	800acf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	00030d40 	.word	0x00030d40

0800ad24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	3301      	adds	r3, #1
 800ad34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4a11      	ldr	r2, [pc, #68]	; (800ad80 <USB_FlushRxFifo+0x5c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d901      	bls.n	800ad42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e018      	b.n	800ad74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	daf2      	bge.n	800ad30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2210      	movs	r2, #16
 800ad52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3301      	adds	r3, #1
 800ad58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	4a08      	ldr	r2, [pc, #32]	; (800ad80 <USB_FlushRxFifo+0x5c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d901      	bls.n	800ad66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e006      	b.n	800ad74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	f003 0310 	and.w	r3, r3, #16
 800ad6e:	2b10      	cmp	r3, #16
 800ad70:	d0f0      	beq.n	800ad54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	00030d40 	.word	0x00030d40

0800ad84 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	68f9      	ldr	r1, [r7, #12]
 800ada0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ada4:	4313      	orrs	r3, r2
 800ada6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b087      	sub	sp, #28
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f003 0306 	and.w	r3, r3, #6
 800adce:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2b02      	cmp	r3, #2
 800add4:	d002      	beq.n	800addc <USB_GetDevSpeed+0x26>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b06      	cmp	r3, #6
 800adda:	d102      	bne.n	800ade2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800addc:	2302      	movs	r3, #2
 800adde:	75fb      	strb	r3, [r7, #23]
 800ade0:	e001      	b.n	800ade6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800ade2:	230f      	movs	r3, #15
 800ade4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d13a      	bne.n	800ae86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae16:	69da      	ldr	r2, [r3, #28]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	f003 030f 	and.w	r3, r3, #15
 800ae20:	2101      	movs	r1, #1
 800ae22:	fa01 f303 	lsl.w	r3, r1, r3
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	68f9      	ldr	r1, [r7, #12]
 800ae2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d155      	bne.n	800aef4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	791b      	ldrb	r3, [r3, #4]
 800ae62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	059b      	lsls	r3, r3, #22
 800ae6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	0151      	lsls	r1, r2, #5
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	440a      	add	r2, r1
 800ae76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae82:	6013      	str	r3, [r2, #0]
 800ae84:	e036      	b.n	800aef4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8c:	69da      	ldr	r2, [r3, #28]
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	f003 030f 	and.w	r3, r3, #15
 800ae96:	2101      	movs	r1, #1
 800ae98:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9c:	041b      	lsls	r3, r3, #16
 800ae9e:	68f9      	ldr	r1, [r7, #12]
 800aea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aea4:	4313      	orrs	r3, r2
 800aea6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	015a      	lsls	r2, r3, #5
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4413      	add	r3, r2
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d11a      	bne.n	800aef4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	791b      	ldrb	r3, [r3, #4]
 800aed8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aeda:	430b      	orrs	r3, r1
 800aedc:	4313      	orrs	r3, r2
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	0151      	lsls	r1, r2, #5
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	440a      	add	r2, r1
 800aee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aef2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
	...

0800af04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	785b      	ldrb	r3, [r3, #1]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d161      	bne.n	800afe4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	015a      	lsls	r2, r3, #5
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	4413      	add	r3, r2
 800af28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af36:	d11f      	bne.n	800af78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	0151      	lsls	r1, r2, #5
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	440a      	add	r2, r1
 800af4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	0151      	lsls	r1, r2, #5
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	440a      	add	r2, r1
 800af6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f003 030f 	and.w	r3, r3, #15
 800af88:	2101      	movs	r1, #1
 800af8a:	fa01 f303 	lsl.w	r3, r1, r3
 800af8e:	b29b      	uxth	r3, r3
 800af90:	43db      	mvns	r3, r3
 800af92:	68f9      	ldr	r1, [r7, #12]
 800af94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af98:	4013      	ands	r3, r2
 800af9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa2:	69da      	ldr	r2, [r3, #28]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f003 030f 	and.w	r3, r3, #15
 800afac:	2101      	movs	r1, #1
 800afae:	fa01 f303 	lsl.w	r3, r1, r3
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	43db      	mvns	r3, r3
 800afb6:	68f9      	ldr	r1, [r7, #12]
 800afb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afbc:	4013      	ands	r3, r2
 800afbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	0159      	lsls	r1, r3, #5
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	440b      	add	r3, r1
 800afd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afda:	4619      	mov	r1, r3
 800afdc:	4b35      	ldr	r3, [pc, #212]	; (800b0b4 <USB_DeactivateEndpoint+0x1b0>)
 800afde:	4013      	ands	r3, r2
 800afe0:	600b      	str	r3, [r1, #0]
 800afe2:	e060      	b.n	800b0a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800affa:	d11f      	bne.n	800b03c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	015a      	lsls	r2, r3, #5
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4413      	add	r3, r2
 800b004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	0151      	lsls	r1, r2, #5
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	440a      	add	r2, r1
 800b012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b01a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	4413      	add	r3, r2
 800b024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	0151      	lsls	r1, r2, #5
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	440a      	add	r2, r1
 800b032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b03a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	f003 030f 	and.w	r3, r3, #15
 800b04c:	2101      	movs	r1, #1
 800b04e:	fa01 f303 	lsl.w	r3, r1, r3
 800b052:	041b      	lsls	r3, r3, #16
 800b054:	43db      	mvns	r3, r3
 800b056:	68f9      	ldr	r1, [r7, #12]
 800b058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b05c:	4013      	ands	r3, r2
 800b05e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b066:	69da      	ldr	r2, [r3, #28]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	f003 030f 	and.w	r3, r3, #15
 800b070:	2101      	movs	r1, #1
 800b072:	fa01 f303 	lsl.w	r3, r1, r3
 800b076:	041b      	lsls	r3, r3, #16
 800b078:	43db      	mvns	r3, r3
 800b07a:	68f9      	ldr	r1, [r7, #12]
 800b07c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b080:	4013      	ands	r3, r2
 800b082:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	015a      	lsls	r2, r3, #5
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4413      	add	r3, r2
 800b08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	0159      	lsls	r1, r3, #5
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	440b      	add	r3, r1
 800b09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <USB_DeactivateEndpoint+0x1b4>)
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	ec337800 	.word	0xec337800
 800b0b8:	eff37800 	.word	0xeff37800

0800b0bc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	785b      	ldrb	r3, [r3, #1]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	f040 8128 	bne.w	800b32a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d132      	bne.n	800b148 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	0151      	lsls	r1, r2, #5
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	440a      	add	r2, r1
 800b0f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	0151      	lsls	r1, r2, #5
 800b118:	697a      	ldr	r2, [r7, #20]
 800b11a:	440a      	add	r2, r1
 800b11c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b124:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	015a      	lsls	r2, r3, #5
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	4413      	add	r3, r2
 800b12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	0151      	lsls	r1, r2, #5
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	440a      	add	r2, r1
 800b13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b140:	0cdb      	lsrs	r3, r3, #19
 800b142:	04db      	lsls	r3, r3, #19
 800b144:	6113      	str	r3, [r2, #16]
 800b146:	e092      	b.n	800b26e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	0151      	lsls	r1, r2, #5
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	440a      	add	r2, r1
 800b15e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b162:	0cdb      	lsrs	r3, r3, #19
 800b164:	04db      	lsls	r3, r3, #19
 800b166:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	015a      	lsls	r2, r3, #5
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	4413      	add	r3, r2
 800b170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	0151      	lsls	r1, r2, #5
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	440a      	add	r2, r1
 800b17e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b182:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b186:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b18a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d11a      	bne.n	800b1c8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	691a      	ldr	r2, [r3, #16]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d903      	bls.n	800b1a6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	689a      	ldr	r2, [r3, #8]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	0151      	lsls	r1, r2, #5
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	440a      	add	r2, r1
 800b1bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1c4:	6113      	str	r3, [r2, #16]
 800b1c6:	e01b      	b.n	800b200 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	6919      	ldr	r1, [r3, #16]
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	440b      	add	r3, r1
 800b1e0:	1e59      	subs	r1, r3, #1
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b1ea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b1ec:	4b8d      	ldr	r3, [pc, #564]	; (800b424 <USB_EPStartXfer+0x368>)
 800b1ee:	400b      	ands	r3, r1
 800b1f0:	6939      	ldr	r1, [r7, #16]
 800b1f2:	0148      	lsls	r0, r1, #5
 800b1f4:	6979      	ldr	r1, [r7, #20]
 800b1f6:	4401      	add	r1, r0
 800b1f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b20c:	691a      	ldr	r2, [r3, #16]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b216:	6939      	ldr	r1, [r7, #16]
 800b218:	0148      	lsls	r0, r1, #5
 800b21a:	6979      	ldr	r1, [r7, #20]
 800b21c:	4401      	add	r1, r0
 800b21e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b222:	4313      	orrs	r3, r2
 800b224:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	791b      	ldrb	r3, [r3, #4]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d11f      	bne.n	800b26e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	015a      	lsls	r2, r3, #5
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	4413      	add	r3, r2
 800b236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	0151      	lsls	r1, r2, #5
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	440a      	add	r2, r1
 800b244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b248:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b24c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	015a      	lsls	r2, r3, #5
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	4413      	add	r3, r2
 800b256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	0151      	lsls	r1, r2, #5
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	440a      	add	r2, r1
 800b264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b26c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	4413      	add	r3, r2
 800b276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	693a      	ldr	r2, [r7, #16]
 800b27e:	0151      	lsls	r1, r2, #5
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	440a      	add	r2, r1
 800b284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b288:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b28c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	791b      	ldrb	r3, [r3, #4]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d015      	beq.n	800b2c2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 8139 	beq.w	800b512 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	f003 030f 	and.w	r3, r3, #15
 800b2b0:	2101      	movs	r1, #1
 800b2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b6:	6979      	ldr	r1, [r7, #20]
 800b2b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	634b      	str	r3, [r1, #52]	; 0x34
 800b2c0:	e127      	b.n	800b512 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d110      	bne.n	800b2f4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	015a      	lsls	r2, r3, #5
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	693a      	ldr	r2, [r7, #16]
 800b2e2:	0151      	lsls	r1, r2, #5
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	440a      	add	r2, r1
 800b2e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2f0:	6013      	str	r3, [r2, #0]
 800b2f2:	e00f      	b.n	800b314 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	015a      	lsls	r2, r3, #5
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	693a      	ldr	r2, [r7, #16]
 800b304:	0151      	lsls	r1, r2, #5
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	440a      	add	r2, r1
 800b30a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b30e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b312:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	68d9      	ldr	r1, [r3, #12]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	781a      	ldrb	r2, [r3, #0]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	b29b      	uxth	r3, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f9a6 	bl	800b674 <USB_WritePacket>
 800b328:	e0f3      	b.n	800b512 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	015a      	lsls	r2, r3, #5
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	4413      	add	r3, r2
 800b332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	0151      	lsls	r1, r2, #5
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	440a      	add	r2, r1
 800b340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b344:	0cdb      	lsrs	r3, r3, #19
 800b346:	04db      	lsls	r3, r3, #19
 800b348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	015a      	lsls	r2, r3, #5
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	0151      	lsls	r1, r2, #5
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	440a      	add	r2, r1
 800b360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b36c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d12f      	bne.n	800b3d4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d003      	beq.n	800b384 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	689a      	ldr	r2, [r3, #8]
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b398:	691a      	ldr	r2, [r3, #16]
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3a2:	6939      	ldr	r1, [r7, #16]
 800b3a4:	0148      	lsls	r0, r1, #5
 800b3a6:	6979      	ldr	r1, [r7, #20]
 800b3a8:	4401      	add	r1, r0
 800b3aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	015a      	lsls	r2, r3, #5
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	0151      	lsls	r1, r2, #5
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	440a      	add	r2, r1
 800b3c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3d0:	6113      	str	r3, [r2, #16]
 800b3d2:	e061      	b.n	800b498 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d125      	bne.n	800b428 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e8:	691a      	ldr	r2, [r3, #16]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3f2:	6939      	ldr	r1, [r7, #16]
 800b3f4:	0148      	lsls	r0, r1, #5
 800b3f6:	6979      	ldr	r1, [r7, #20]
 800b3f8:	4401      	add	r1, r0
 800b3fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3fe:	4313      	orrs	r3, r2
 800b400:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	0151      	lsls	r1, r2, #5
 800b414:	697a      	ldr	r2, [r7, #20]
 800b416:	440a      	add	r2, r1
 800b418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b41c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b420:	6113      	str	r3, [r2, #16]
 800b422:	e039      	b.n	800b498 <USB_EPStartXfer+0x3dc>
 800b424:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	691a      	ldr	r2, [r3, #16]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	4413      	add	r3, r2
 800b432:	1e5a      	subs	r2, r3, #1
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	fbb2 f3f3 	udiv	r3, r2, r3
 800b43c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	89fa      	ldrh	r2, [r7, #14]
 800b444:	fb03 f202 	mul.w	r2, r3, r2
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	015a      	lsls	r2, r3, #5
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	4413      	add	r3, r2
 800b454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b458:	691a      	ldr	r2, [r3, #16]
 800b45a:	89fb      	ldrh	r3, [r7, #14]
 800b45c:	04d9      	lsls	r1, r3, #19
 800b45e:	4b2f      	ldr	r3, [pc, #188]	; (800b51c <USB_EPStartXfer+0x460>)
 800b460:	400b      	ands	r3, r1
 800b462:	6939      	ldr	r1, [r7, #16]
 800b464:	0148      	lsls	r0, r1, #5
 800b466:	6979      	ldr	r1, [r7, #20]
 800b468:	4401      	add	r1, r0
 800b46a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b46e:	4313      	orrs	r3, r2
 800b470:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	4413      	add	r3, r2
 800b47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47e:	691a      	ldr	r2, [r3, #16]
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	6a1b      	ldr	r3, [r3, #32]
 800b484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b488:	6939      	ldr	r1, [r7, #16]
 800b48a:	0148      	lsls	r0, r1, #5
 800b48c:	6979      	ldr	r1, [r7, #20]
 800b48e:	4401      	add	r1, r0
 800b490:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b494:	4313      	orrs	r3, r2
 800b496:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	791b      	ldrb	r3, [r3, #4]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d128      	bne.n	800b4f2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d110      	bne.n	800b4d2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	0151      	lsls	r1, r2, #5
 800b4c2:	697a      	ldr	r2, [r7, #20]
 800b4c4:	440a      	add	r2, r1
 800b4c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	e00f      	b.n	800b4f2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	015a      	lsls	r2, r3, #5
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	4413      	add	r3, r2
 800b4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	0151      	lsls	r1, r2, #5
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	440a      	add	r2, r1
 800b4e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4f0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	0151      	lsls	r1, r2, #5
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	440a      	add	r2, r1
 800b508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b50c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b510:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3718      	adds	r7, #24
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	1ff80000 	.word	0x1ff80000

0800b520 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b52a:	2300      	movs	r3, #0
 800b52c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	785b      	ldrb	r3, [r3, #1]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d14a      	bne.n	800b5d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	015a      	lsls	r2, r3, #5
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	4413      	add	r3, r2
 800b548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b556:	f040 8086 	bne.w	800b666 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	015a      	lsls	r2, r3, #5
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	4413      	add	r3, r2
 800b564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	7812      	ldrb	r2, [r2, #0]
 800b56e:	0151      	lsls	r1, r2, #5
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	440a      	add	r2, r1
 800b574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b578:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b57c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	015a      	lsls	r2, r3, #5
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	7812      	ldrb	r2, [r2, #0]
 800b592:	0151      	lsls	r1, r2, #5
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	440a      	add	r2, r1
 800b598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b59c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f242 7210 	movw	r2, #10000	; 0x2710
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d902      	bls.n	800b5b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b5b6:	e056      	b.n	800b666 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	015a      	lsls	r2, r3, #5
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5d0:	d0e7      	beq.n	800b5a2 <USB_EPStopXfer+0x82>
 800b5d2:	e048      	b.n	800b666 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	015a      	lsls	r2, r3, #5
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5ec:	d13b      	bne.n	800b666 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	015a      	lsls	r2, r3, #5
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	7812      	ldrb	r2, [r2, #0]
 800b602:	0151      	lsls	r1, r2, #5
 800b604:	693a      	ldr	r2, [r7, #16]
 800b606:	440a      	add	r2, r1
 800b608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b60c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b610:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	7812      	ldrb	r2, [r2, #0]
 800b626:	0151      	lsls	r1, r2, #5
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	440a      	add	r2, r1
 800b62c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b634:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3301      	adds	r3, #1
 800b63a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b642:	4293      	cmp	r3, r2
 800b644:	d902      	bls.n	800b64c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	75fb      	strb	r3, [r7, #23]
          break;
 800b64a:	e00c      	b.n	800b666 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b664:	d0e7      	beq.n	800b636 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b666:	7dfb      	ldrb	r3, [r7, #23]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	371c      	adds	r7, #28
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b674:	b480      	push	{r7}
 800b676:	b089      	sub	sp, #36	; 0x24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4611      	mov	r1, r2
 800b680:	461a      	mov	r2, r3
 800b682:	460b      	mov	r3, r1
 800b684:	71fb      	strb	r3, [r7, #7]
 800b686:	4613      	mov	r3, r2
 800b688:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b692:	88bb      	ldrh	r3, [r7, #4]
 800b694:	3303      	adds	r3, #3
 800b696:	089b      	lsrs	r3, r3, #2
 800b698:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b69a:	2300      	movs	r3, #0
 800b69c:	61bb      	str	r3, [r7, #24]
 800b69e:	e018      	b.n	800b6d2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b6a0:	79fb      	ldrb	r3, [r7, #7]
 800b6a2:	031a      	lsls	r2, r3, #12
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	61bb      	str	r3, [r7, #24]
 800b6d2:	69ba      	ldr	r2, [r7, #24]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d3e2      	bcc.n	800b6a0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3724      	adds	r7, #36	; 0x24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b08b      	sub	sp, #44	; 0x2c
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b6fe:	88fb      	ldrh	r3, [r7, #6]
 800b700:	089b      	lsrs	r3, r3, #2
 800b702:	b29b      	uxth	r3, r3
 800b704:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b706:	88fb      	ldrh	r3, [r7, #6]
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b70e:	2300      	movs	r3, #0
 800b710:	623b      	str	r3, [r7, #32]
 800b712:	e014      	b.n	800b73e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	3301      	adds	r3, #1
 800b724:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	3301      	adds	r3, #1
 800b72a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72e:	3301      	adds	r3, #1
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	3301      	adds	r3, #1
 800b736:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	3301      	adds	r3, #1
 800b73c:	623b      	str	r3, [r7, #32]
 800b73e:	6a3a      	ldr	r2, [r7, #32]
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	429a      	cmp	r2, r3
 800b744:	d3e6      	bcc.n	800b714 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b746:	8bfb      	ldrh	r3, [r7, #30]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01e      	beq.n	800b78a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b756:	461a      	mov	r2, r3
 800b758:	f107 0310 	add.w	r3, r7, #16
 800b75c:	6812      	ldr	r2, [r2, #0]
 800b75e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	6a3b      	ldr	r3, [r7, #32]
 800b764:	b2db      	uxtb	r3, r3
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	fa22 f303 	lsr.w	r3, r2, r3
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b770:	701a      	strb	r2, [r3, #0]
      i++;
 800b772:	6a3b      	ldr	r3, [r7, #32]
 800b774:	3301      	adds	r3, #1
 800b776:	623b      	str	r3, [r7, #32]
      pDest++;
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	3301      	adds	r3, #1
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b77e:	8bfb      	ldrh	r3, [r7, #30]
 800b780:	3b01      	subs	r3, #1
 800b782:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b784:	8bfb      	ldrh	r3, [r7, #30]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1ea      	bne.n	800b760 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	372c      	adds	r7, #44	; 0x2c
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	785b      	ldrb	r3, [r3, #1]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d12c      	bne.n	800b80e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	db12      	blt.n	800b7ec <USB_EPSetStall+0x54>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00f      	beq.n	800b7ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	015a      	lsls	r2, r3, #5
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	0151      	lsls	r1, r2, #5
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	440a      	add	r2, r1
 800b7e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b7ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	015a      	lsls	r2, r3, #5
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	0151      	lsls	r1, r2, #5
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	440a      	add	r2, r1
 800b802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	e02b      	b.n	800b866 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	015a      	lsls	r2, r3, #5
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	4413      	add	r3, r2
 800b816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	db12      	blt.n	800b846 <USB_EPSetStall+0xae>
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00f      	beq.n	800b846 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	015a      	lsls	r2, r3, #5
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	4413      	add	r3, r2
 800b82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	0151      	lsls	r1, r2, #5
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	440a      	add	r2, r1
 800b83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b844:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	015a      	lsls	r2, r3, #5
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	4413      	add	r3, r2
 800b84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	0151      	lsls	r1, r2, #5
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	440a      	add	r2, r1
 800b85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	785b      	ldrb	r3, [r3, #1]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d128      	bne.n	800b8e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	4413      	add	r3, r2
 800b898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	0151      	lsls	r1, r2, #5
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	440a      	add	r2, r1
 800b8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	791b      	ldrb	r3, [r3, #4]
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d003      	beq.n	800b8c0 <USB_EPClearStall+0x4c>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	791b      	ldrb	r3, [r3, #4]
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d138      	bne.n	800b932 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	e027      	b.n	800b932 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	0151      	lsls	r1, r2, #5
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	440a      	add	r2, r1
 800b8f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b900:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	791b      	ldrb	r3, [r3, #4]
 800b906:	2b03      	cmp	r3, #3
 800b908:	d003      	beq.n	800b912 <USB_EPClearStall+0x9e>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	791b      	ldrb	r3, [r3, #4]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d10f      	bne.n	800b932 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	015a      	lsls	r2, r3, #5
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	4413      	add	r3, r2
 800b91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	0151      	lsls	r1, r2, #5
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	440a      	add	r2, r1
 800b928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b92c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b930:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	460b      	mov	r3, r1
 800b94a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b95e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b962:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	78fb      	ldrb	r3, [r7, #3]
 800b96e:	011b      	lsls	r3, r3, #4
 800b970:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b974:	68f9      	ldr	r1, [r7, #12]
 800b976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b97a:	4313      	orrs	r3, r2
 800b97c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9a6:	f023 0303 	bic.w	r3, r3, #3
 800b9aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9ba:	f023 0302 	bic.w	r3, r3, #2
 800b9be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9e8:	f023 0303 	bic.w	r3, r3, #3
 800b9ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9fc:	f043 0302 	orr.w	r3, r3, #2
 800ba00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	4013      	ands	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ba28:	68fb      	ldr	r3, [r7, #12]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b085      	sub	sp, #20
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba48:	699b      	ldr	r3, [r3, #24]
 800ba4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba52:	69db      	ldr	r3, [r3, #28]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	4013      	ands	r3, r2
 800ba58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	0c1b      	lsrs	r3, r3, #16
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b085      	sub	sp, #20
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba86:	69db      	ldr	r3, [r3, #28]
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	b29b      	uxth	r3, r3
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b085      	sub	sp, #20
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	015a      	lsls	r2, r3, #5
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	4413      	add	r3, r2
 800bab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac4:	695b      	ldr	r3, [r3, #20]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	4013      	ands	r3, r2
 800baca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bacc:	68bb      	ldr	r3, [r7, #8]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bada:	b480      	push	{r7}
 800badc:	b087      	sub	sp, #28
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	460b      	mov	r3, r1
 800bae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bafe:	78fb      	ldrb	r3, [r7, #3]
 800bb00:	f003 030f 	and.w	r3, r3, #15
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	fa22 f303 	lsr.w	r3, r2, r3
 800bb0a:	01db      	lsls	r3, r3, #7
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bb14:	78fb      	ldrb	r3, [r7, #3]
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	4013      	ands	r3, r2
 800bb26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb28:	68bb      	ldr	r3, [r7, #8]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	371c      	adds	r7, #28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bb36:	b480      	push	{r7}
 800bb38:	b083      	sub	sp, #12
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	f003 0301 	and.w	r3, r3, #1
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	370c      	adds	r7, #12
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b085      	sub	sp, #20
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bb70:	f023 0307 	bic.w	r3, r3, #7
 800bb74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	333c      	adds	r3, #60	; 0x3c
 800bbaa:	3304      	adds	r3, #4
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	4a1c      	ldr	r2, [pc, #112]	; (800bc24 <USB_EP0_OutStart+0x8c>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d90a      	bls.n	800bbce <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbc8:	d101      	bne.n	800bbce <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e024      	b.n	800bc18 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	68fa      	ldr	r2, [r7, #12]
 800bbe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbfc:	f043 0318 	orr.w	r3, r3, #24
 800bc00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bc14:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr
 800bc24:	4f54300a 	.word	0x4f54300a

0800bc28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	3301      	adds	r3, #1
 800bc38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	4a13      	ldr	r2, [pc, #76]	; (800bc8c <USB_CoreReset+0x64>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d901      	bls.n	800bc46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc42:	2303      	movs	r3, #3
 800bc44:	e01b      	b.n	800bc7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	daf2      	bge.n	800bc34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	f043 0201 	orr.w	r2, r3, #1
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3301      	adds	r3, #1
 800bc62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	4a09      	ldr	r2, [pc, #36]	; (800bc8c <USB_CoreReset+0x64>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d901      	bls.n	800bc70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e006      	b.n	800bc7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d0f0      	beq.n	800bc5e <USB_CoreReset+0x36>

  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3714      	adds	r7, #20
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	00030d40 	.word	0x00030d40

0800bc90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bc94:	4904      	ldr	r1, [pc, #16]	; (800bca8 <MX_FATFS_Init+0x18>)
 800bc96:	4805      	ldr	r0, [pc, #20]	; (800bcac <MX_FATFS_Init+0x1c>)
 800bc98:	f002 fa52 	bl	800e140 <FATFS_LinkDriver>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	461a      	mov	r2, r3
 800bca0:	4b03      	ldr	r3, [pc, #12]	; (800bcb0 <MX_FATFS_Init+0x20>)
 800bca2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bca4:	bf00      	nop
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	20001e14 	.word	0x20001e14
 800bcac:	080137e8 	.word	0x080137e8
 800bcb0:	20001e10 	.word	0x20001e10

0800bcb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bcbe:	f000 f896 	bl	800bdee <BSP_SD_IsDetected>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d001      	beq.n	800bccc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bcc8:	2302      	movs	r3, #2
 800bcca:	e012      	b.n	800bcf2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bccc:	480b      	ldr	r0, [pc, #44]	; (800bcfc <BSP_SD_Init+0x48>)
 800bcce:	f7fc fcdf 	bl	8008690 <HAL_SD_Init>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d109      	bne.n	800bcf0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bcdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bce0:	4806      	ldr	r0, [pc, #24]	; (800bcfc <BSP_SD_Init+0x48>)
 800bce2:	f7fd fa8f 	bl	8009204 <HAL_SD_ConfigWideBusOperation>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bcf0:	79fb      	ldrb	r3, [r7, #7]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20000368 	.word	0x20000368

0800bd00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	68f9      	ldr	r1, [r7, #12]
 800bd16:	4806      	ldr	r0, [pc, #24]	; (800bd30 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bd18:	f7fc fd90 	bl	800883c <HAL_SD_ReadBlocks_DMA>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d001      	beq.n	800bd26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20000368 	.word	0x20000368

0800bd34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	68f9      	ldr	r1, [r7, #12]
 800bd4a:	4806      	ldr	r0, [pc, #24]	; (800bd64 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bd4c:	f7fc fe3e 	bl	80089cc <HAL_SD_WriteBlocks_DMA>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d001      	beq.n	800bd5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3718      	adds	r7, #24
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	20000368 	.word	0x20000368

0800bd68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bd6c:	4805      	ldr	r0, [pc, #20]	; (800bd84 <BSP_SD_GetCardState+0x1c>)
 800bd6e:	f7fd fb05 	bl	800937c <HAL_SD_GetCardState>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b04      	cmp	r3, #4
 800bd76:	bf14      	ite	ne
 800bd78:	2301      	movne	r3, #1
 800bd7a:	2300      	moveq	r3, #0
 800bd7c:	b2db      	uxtb	r3, r3
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	20000368 	.word	0x20000368

0800bd88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bd90:	6879      	ldr	r1, [r7, #4]
 800bd92:	4803      	ldr	r0, [pc, #12]	; (800bda0 <BSP_SD_GetCardInfo+0x18>)
 800bd94:	f7fd fa0a 	bl	80091ac <HAL_SD_GetCardInfo>
}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	20000368 	.word	0x20000368

0800bda4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800bdac:	f000 f818 	bl	800bde0 <BSP_SD_AbortCallback>
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bdc0:	f000 f9a8 	bl	800c114 <BSP_SD_WriteCpltCallback>
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bdd4:	f000 f9aa 	bl	800c12c <BSP_SD_ReadCpltCallback>
}
 800bdd8:	bf00      	nop
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800bde0:	b480      	push	{r7}
 800bde2:	af00      	add	r7, sp, #0

}
 800bde4:	bf00      	nop
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bdf8:	f000 f80c 	bl	800be14 <BSP_PlatformIsDetected>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800be02:	2300      	movs	r3, #0
 800be04:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800be06:	79fb      	ldrb	r3, [r7, #7]
 800be08:	b2db      	uxtb	r3, r3
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800be1a:	2301      	movs	r3, #1
 800be1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800be1e:	2180      	movs	r1, #128	; 0x80
 800be20:	4806      	ldr	r0, [pc, #24]	; (800be3c <BSP_PlatformIsDetected+0x28>)
 800be22:	f7f8 f855 	bl	8003ed0 <HAL_GPIO_ReadPin>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800be2c:	2300      	movs	r3, #0
 800be2e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800be30:	79fb      	ldrb	r3, [r7, #7]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	48000800 	.word	0x48000800

0800be40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800be48:	f7f7 fb1e 	bl	8003488 <HAL_GetTick>
 800be4c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800be4e:	e006      	b.n	800be5e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be50:	f7ff ff8a 	bl	800bd68 <BSP_SD_GetCardState>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d101      	bne.n	800be5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800be5a:	2300      	movs	r3, #0
 800be5c:	e009      	b.n	800be72 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800be5e:	f7f7 fb13 	bl	8003488 <HAL_GetTick>
 800be62:	4602      	mov	r2, r0
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d8f0      	bhi.n	800be50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800be6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
	...

0800be7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	4603      	mov	r3, r0
 800be84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be86:	4b0b      	ldr	r3, [pc, #44]	; (800beb4 <SD_CheckStatus+0x38>)
 800be88:	2201      	movs	r2, #1
 800be8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800be8c:	f7ff ff6c 	bl	800bd68 <BSP_SD_GetCardState>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d107      	bne.n	800bea6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800be96:	4b07      	ldr	r3, [pc, #28]	; (800beb4 <SD_CheckStatus+0x38>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f023 0301 	bic.w	r3, r3, #1
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	4b04      	ldr	r3, [pc, #16]	; (800beb4 <SD_CheckStatus+0x38>)
 800bea4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bea6:	4b03      	ldr	r3, [pc, #12]	; (800beb4 <SD_CheckStatus+0x38>)
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	b2db      	uxtb	r3, r3
}
 800beac:	4618      	mov	r0, r3
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	20000009 	.word	0x20000009

0800beb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	4603      	mov	r3, r0
 800bec0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bec2:	f7ff fef7 	bl	800bcb4 <BSP_SD_Init>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d107      	bne.n	800bedc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff ffd4 	bl	800be7c <SD_CheckStatus>
 800bed4:	4603      	mov	r3, r0
 800bed6:	461a      	mov	r2, r3
 800bed8:	4b04      	ldr	r3, [pc, #16]	; (800beec <SD_initialize+0x34>)
 800beda:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bedc:	4b03      	ldr	r3, [pc, #12]	; (800beec <SD_initialize+0x34>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	b2db      	uxtb	r3, r3
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	20000009 	.word	0x20000009

0800bef0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	4603      	mov	r3, r0
 800bef8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	4618      	mov	r0, r3
 800befe:	f7ff ffbd 	bl	800be7c <SD_CheckStatus>
 800bf02:	4603      	mov	r3, r0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b086      	sub	sp, #24
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60b9      	str	r1, [r7, #8]
 800bf14:	607a      	str	r2, [r7, #4]
 800bf16:	603b      	str	r3, [r7, #0]
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf20:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf24:	f7ff ff8c 	bl	800be40 <SD_CheckStatusWithTimeout>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	da01      	bge.n	800bf32 <SD_read+0x26>
  {
    return res;
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	e03b      	b.n	800bfaa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bf32:	683a      	ldr	r2, [r7, #0]
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	68b8      	ldr	r0, [r7, #8]
 800bf38:	f7ff fee2 	bl	800bd00 <BSP_SD_ReadBlocks_DMA>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d132      	bne.n	800bfa8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bf42:	4b1c      	ldr	r3, [pc, #112]	; (800bfb4 <SD_read+0xa8>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bf48:	f7f7 fa9e 	bl	8003488 <HAL_GetTick>
 800bf4c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bf4e:	bf00      	nop
 800bf50:	4b18      	ldr	r3, [pc, #96]	; (800bfb4 <SD_read+0xa8>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d108      	bne.n	800bf6a <SD_read+0x5e>
 800bf58:	f7f7 fa96 	bl	8003488 <HAL_GetTick>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	f247 522f 	movw	r2, #29999	; 0x752f
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d9f2      	bls.n	800bf50 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bf6a:	4b12      	ldr	r3, [pc, #72]	; (800bfb4 <SD_read+0xa8>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d102      	bne.n	800bf78 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	75fb      	strb	r3, [r7, #23]
 800bf76:	e017      	b.n	800bfa8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bf78:	4b0e      	ldr	r3, [pc, #56]	; (800bfb4 <SD_read+0xa8>)
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bf7e:	f7f7 fa83 	bl	8003488 <HAL_GetTick>
 800bf82:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bf84:	e007      	b.n	800bf96 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bf86:	f7ff feef 	bl	800bd68 <BSP_SD_GetCardState>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <SD_read+0x8a>
          {
            res = RES_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bf94:	e008      	b.n	800bfa8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bf96:	f7f7 fa77 	bl	8003488 <HAL_GetTick>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	f247 522f 	movw	r2, #29999	; 0x752f
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d9ee      	bls.n	800bf86 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bfa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	20001e1c 	.word	0x20001e1c

0800bfb8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60b9      	str	r1, [r7, #8]
 800bfc0:	607a      	str	r2, [r7, #4]
 800bfc2:	603b      	str	r3, [r7, #0]
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bfcc:	4b24      	ldr	r3, [pc, #144]	; (800c060 <SD_write+0xa8>)
 800bfce:	2200      	movs	r2, #0
 800bfd0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bfd2:	f247 5030 	movw	r0, #30000	; 0x7530
 800bfd6:	f7ff ff33 	bl	800be40 <SD_CheckStatusWithTimeout>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	da01      	bge.n	800bfe4 <SD_write+0x2c>
  {
    return res;
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	e038      	b.n	800c056 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	68b8      	ldr	r0, [r7, #8]
 800bfea:	f7ff fea3 	bl	800bd34 <BSP_SD_WriteBlocks_DMA>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d12f      	bne.n	800c054 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bff4:	f7f7 fa48 	bl	8003488 <HAL_GetTick>
 800bff8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bffa:	bf00      	nop
 800bffc:	4b18      	ldr	r3, [pc, #96]	; (800c060 <SD_write+0xa8>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d108      	bne.n	800c016 <SD_write+0x5e>
 800c004:	f7f7 fa40 	bl	8003488 <HAL_GetTick>
 800c008:	4602      	mov	r2, r0
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	f247 522f 	movw	r2, #29999	; 0x752f
 800c012:	4293      	cmp	r3, r2
 800c014:	d9f2      	bls.n	800bffc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c016:	4b12      	ldr	r3, [pc, #72]	; (800c060 <SD_write+0xa8>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	75fb      	strb	r3, [r7, #23]
 800c022:	e017      	b.n	800c054 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c024:	4b0e      	ldr	r3, [pc, #56]	; (800c060 <SD_write+0xa8>)
 800c026:	2200      	movs	r2, #0
 800c028:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c02a:	f7f7 fa2d 	bl	8003488 <HAL_GetTick>
 800c02e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c030:	e007      	b.n	800c042 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c032:	f7ff fe99 	bl	800bd68 <BSP_SD_GetCardState>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d102      	bne.n	800c042 <SD_write+0x8a>
          {
            res = RES_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	75fb      	strb	r3, [r7, #23]
            break;
 800c040:	e008      	b.n	800c054 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c042:	f7f7 fa21 	bl	8003488 <HAL_GetTick>
 800c046:	4602      	mov	r2, r0
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c050:	4293      	cmp	r3, r2
 800c052:	d9ee      	bls.n	800c032 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c054:	7dfb      	ldrb	r3, [r7, #23]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3718      	adds	r7, #24
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	20001e18 	.word	0x20001e18

0800c064 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08c      	sub	sp, #48	; 0x30
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	603a      	str	r2, [r7, #0]
 800c06e:	71fb      	strb	r3, [r7, #7]
 800c070:	460b      	mov	r3, r1
 800c072:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c07a:	4b25      	ldr	r3, [pc, #148]	; (800c110 <SD_ioctl+0xac>)
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <SD_ioctl+0x28>
 800c088:	2303      	movs	r3, #3
 800c08a:	e03c      	b.n	800c106 <SD_ioctl+0xa2>

  switch (cmd)
 800c08c:	79bb      	ldrb	r3, [r7, #6]
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d834      	bhi.n	800c0fc <SD_ioctl+0x98>
 800c092:	a201      	add	r2, pc, #4	; (adr r2, 800c098 <SD_ioctl+0x34>)
 800c094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c098:	0800c0a9 	.word	0x0800c0a9
 800c09c:	0800c0b1 	.word	0x0800c0b1
 800c0a0:	0800c0c9 	.word	0x0800c0c9
 800c0a4:	0800c0e3 	.word	0x0800c0e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0ae:	e028      	b.n	800c102 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0b0:	f107 030c 	add.w	r3, r7, #12
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7ff fe67 	bl	800bd88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0c6:	e01c      	b.n	800c102 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0c8:	f107 030c 	add.w	r3, r7, #12
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff fe5b 	bl	800bd88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0e0:	e00f      	b.n	800c102 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0e2:	f107 030c 	add.w	r3, r7, #12
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff fe4e 	bl	800bd88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	0a5a      	lsrs	r2, r3, #9
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0fa:	e002      	b.n	800c102 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c0fc:	2304      	movs	r3, #4
 800c0fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c106:	4618      	mov	r0, r3
 800c108:	3730      	adds	r7, #48	; 0x30
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20000009 	.word	0x20000009

0800c114 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c114:	b480      	push	{r7}
 800c116:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c118:	4b03      	ldr	r3, [pc, #12]	; (800c128 <BSP_SD_WriteCpltCallback+0x14>)
 800c11a:	2201      	movs	r2, #1
 800c11c:	601a      	str	r2, [r3, #0]
}
 800c11e:	bf00      	nop
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	20001e18 	.word	0x20001e18

0800c12c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c12c:	b480      	push	{r7}
 800c12e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c130:	4b03      	ldr	r3, [pc, #12]	; (800c140 <BSP_SD_ReadCpltCallback+0x14>)
 800c132:	2201      	movs	r2, #1
 800c134:	601a      	str	r2, [r3, #0]
}
 800c136:	bf00      	nop
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	20001e1c 	.word	0x20001e1c

0800c144 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c150:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c154:	f002 fe06 	bl	800ed64 <USBD_static_malloc>
 800c158:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d109      	bne.n	800c174 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	32b0      	adds	r2, #176	; 0xb0
 800c16a:	2100      	movs	r1, #0
 800c16c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c170:	2302      	movs	r3, #2
 800c172:	e0d4      	b.n	800c31e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c174:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c178:	2100      	movs	r1, #0
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f003 fd99 	bl	800fcb2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	32b0      	adds	r2, #176	; 0xb0
 800c18a:	68f9      	ldr	r1, [r7, #12]
 800c18c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	32b0      	adds	r2, #176	; 0xb0
 800c19a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	7c1b      	ldrb	r3, [r3, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d138      	bne.n	800c21e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c1ac:	4b5e      	ldr	r3, [pc, #376]	; (800c328 <USBD_CDC_Init+0x1e4>)
 800c1ae:	7819      	ldrb	r1, [r3, #0]
 800c1b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f002 fbc0 	bl	800e93c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c1bc:	4b5a      	ldr	r3, [pc, #360]	; (800c328 <USBD_CDC_Init+0x1e4>)
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	f003 020f 	and.w	r2, r3, #15
 800c1c4:	6879      	ldr	r1, [r7, #4]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	4413      	add	r3, r2
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	440b      	add	r3, r1
 800c1d0:	3324      	adds	r3, #36	; 0x24
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c1d6:	4b55      	ldr	r3, [pc, #340]	; (800c32c <USBD_CDC_Init+0x1e8>)
 800c1d8:	7819      	ldrb	r1, [r3, #0]
 800c1da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1de:	2202      	movs	r2, #2
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f002 fbab 	bl	800e93c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c1e6:	4b51      	ldr	r3, [pc, #324]	; (800c32c <USBD_CDC_Init+0x1e8>)
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	f003 020f 	and.w	r2, r3, #15
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	440b      	add	r3, r1
 800c1fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c1fe:	2201      	movs	r2, #1
 800c200:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c202:	4b4b      	ldr	r3, [pc, #300]	; (800c330 <USBD_CDC_Init+0x1ec>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	f003 020f 	and.w	r2, r3, #15
 800c20a:	6879      	ldr	r1, [r7, #4]
 800c20c:	4613      	mov	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	4413      	add	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	440b      	add	r3, r1
 800c216:	3326      	adds	r3, #38	; 0x26
 800c218:	2210      	movs	r2, #16
 800c21a:	801a      	strh	r2, [r3, #0]
 800c21c:	e035      	b.n	800c28a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c21e:	4b42      	ldr	r3, [pc, #264]	; (800c328 <USBD_CDC_Init+0x1e4>)
 800c220:	7819      	ldrb	r1, [r3, #0]
 800c222:	2340      	movs	r3, #64	; 0x40
 800c224:	2202      	movs	r2, #2
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f002 fb88 	bl	800e93c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c22c:	4b3e      	ldr	r3, [pc, #248]	; (800c328 <USBD_CDC_Init+0x1e4>)
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	f003 020f 	and.w	r2, r3, #15
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	4613      	mov	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	440b      	add	r3, r1
 800c240:	3324      	adds	r3, #36	; 0x24
 800c242:	2201      	movs	r2, #1
 800c244:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c246:	4b39      	ldr	r3, [pc, #228]	; (800c32c <USBD_CDC_Init+0x1e8>)
 800c248:	7819      	ldrb	r1, [r3, #0]
 800c24a:	2340      	movs	r3, #64	; 0x40
 800c24c:	2202      	movs	r2, #2
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f002 fb74 	bl	800e93c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c254:	4b35      	ldr	r3, [pc, #212]	; (800c32c <USBD_CDC_Init+0x1e8>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	f003 020f 	and.w	r2, r3, #15
 800c25c:	6879      	ldr	r1, [r7, #4]
 800c25e:	4613      	mov	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4413      	add	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	440b      	add	r3, r1
 800c268:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c26c:	2201      	movs	r2, #1
 800c26e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c270:	4b2f      	ldr	r3, [pc, #188]	; (800c330 <USBD_CDC_Init+0x1ec>)
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	f003 020f 	and.w	r2, r3, #15
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	4613      	mov	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	440b      	add	r3, r1
 800c284:	3326      	adds	r3, #38	; 0x26
 800c286:	2210      	movs	r2, #16
 800c288:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c28a:	4b29      	ldr	r3, [pc, #164]	; (800c330 <USBD_CDC_Init+0x1ec>)
 800c28c:	7819      	ldrb	r1, [r3, #0]
 800c28e:	2308      	movs	r3, #8
 800c290:	2203      	movs	r2, #3
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f002 fb52 	bl	800e93c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c298:	4b25      	ldr	r3, [pc, #148]	; (800c330 <USBD_CDC_Init+0x1ec>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	f003 020f 	and.w	r2, r3, #15
 800c2a0:	6879      	ldr	r1, [r7, #4]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	440b      	add	r3, r1
 800c2ac:	3324      	adds	r3, #36	; 0x24
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	33b0      	adds	r3, #176	; 0xb0
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d101      	bne.n	800c2ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e018      	b.n	800c31e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	7c1b      	ldrb	r3, [r3, #16]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10a      	bne.n	800c30a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c2f4:	4b0d      	ldr	r3, [pc, #52]	; (800c32c <USBD_CDC_Init+0x1e8>)
 800c2f6:	7819      	ldrb	r1, [r3, #0]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f002 fc94 	bl	800ec30 <USBD_LL_PrepareReceive>
 800c308:	e008      	b.n	800c31c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c30a:	4b08      	ldr	r3, [pc, #32]	; (800c32c <USBD_CDC_Init+0x1e8>)
 800c30c:	7819      	ldrb	r1, [r3, #0]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c314:	2340      	movs	r3, #64	; 0x40
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f002 fc8a 	bl	800ec30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	20000093 	.word	0x20000093
 800c32c:	20000094 	.word	0x20000094
 800c330:	20000095 	.word	0x20000095

0800c334 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c340:	4b3a      	ldr	r3, [pc, #232]	; (800c42c <USBD_CDC_DeInit+0xf8>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	4619      	mov	r1, r3
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f002 fb36 	bl	800e9b8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c34c:	4b37      	ldr	r3, [pc, #220]	; (800c42c <USBD_CDC_DeInit+0xf8>)
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	f003 020f 	and.w	r2, r3, #15
 800c354:	6879      	ldr	r1, [r7, #4]
 800c356:	4613      	mov	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	440b      	add	r3, r1
 800c360:	3324      	adds	r3, #36	; 0x24
 800c362:	2200      	movs	r2, #0
 800c364:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c366:	4b32      	ldr	r3, [pc, #200]	; (800c430 <USBD_CDC_DeInit+0xfc>)
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	4619      	mov	r1, r3
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f002 fb23 	bl	800e9b8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c372:	4b2f      	ldr	r3, [pc, #188]	; (800c430 <USBD_CDC_DeInit+0xfc>)
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	f003 020f 	and.w	r2, r3, #15
 800c37a:	6879      	ldr	r1, [r7, #4]
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	440b      	add	r3, r1
 800c386:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c38a:	2200      	movs	r2, #0
 800c38c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c38e:	4b29      	ldr	r3, [pc, #164]	; (800c434 <USBD_CDC_DeInit+0x100>)
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f002 fb0f 	bl	800e9b8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c39a:	4b26      	ldr	r3, [pc, #152]	; (800c434 <USBD_CDC_DeInit+0x100>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	f003 020f 	and.w	r2, r3, #15
 800c3a2:	6879      	ldr	r1, [r7, #4]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	440b      	add	r3, r1
 800c3ae:	3324      	adds	r3, #36	; 0x24
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c3b4:	4b1f      	ldr	r3, [pc, #124]	; (800c434 <USBD_CDC_DeInit+0x100>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	f003 020f 	and.w	r2, r3, #15
 800c3bc:	6879      	ldr	r1, [r7, #4]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	440b      	add	r3, r1
 800c3c8:	3326      	adds	r3, #38	; 0x26
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	32b0      	adds	r2, #176	; 0xb0
 800c3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d01f      	beq.n	800c420 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	33b0      	adds	r3, #176	; 0xb0
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	4413      	add	r3, r2
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	32b0      	adds	r2, #176	; 0xb0
 800c3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c402:	4618      	mov	r0, r3
 800c404:	f002 fcbc 	bl	800ed80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	32b0      	adds	r2, #176	; 0xb0
 800c412:	2100      	movs	r1, #0
 800c414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	20000093 	.word	0x20000093
 800c430:	20000094 	.word	0x20000094
 800c434:	20000095 	.word	0x20000095

0800c438 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	32b0      	adds	r2, #176	; 0xb0
 800c44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c450:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c452:	2300      	movs	r3, #0
 800c454:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c456:	2300      	movs	r3, #0
 800c458:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c45a:	2300      	movs	r3, #0
 800c45c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c464:	2303      	movs	r3, #3
 800c466:	e0bf      	b.n	800c5e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c470:	2b00      	cmp	r3, #0
 800c472:	d050      	beq.n	800c516 <USBD_CDC_Setup+0xde>
 800c474:	2b20      	cmp	r3, #32
 800c476:	f040 80af 	bne.w	800c5d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	88db      	ldrh	r3, [r3, #6]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d03a      	beq.n	800c4f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	b25b      	sxtb	r3, r3
 800c488:	2b00      	cmp	r3, #0
 800c48a:	da1b      	bge.n	800c4c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	33b0      	adds	r3, #176	; 0xb0
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	683a      	ldr	r2, [r7, #0]
 800c4a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c4a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c4a4:	683a      	ldr	r2, [r7, #0]
 800c4a6:	88d2      	ldrh	r2, [r2, #6]
 800c4a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	88db      	ldrh	r3, [r3, #6]
 800c4ae:	2b07      	cmp	r3, #7
 800c4b0:	bf28      	it	cs
 800c4b2:	2307      	movcs	r3, #7
 800c4b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	89fa      	ldrh	r2, [r7, #14]
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f001 fd73 	bl	800dfa8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c4c2:	e090      	b.n	800c5e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	785a      	ldrb	r2, [r3, #1]
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	88db      	ldrh	r3, [r3, #6]
 800c4d2:	2b3f      	cmp	r3, #63	; 0x3f
 800c4d4:	d803      	bhi.n	800c4de <USBD_CDC_Setup+0xa6>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	88db      	ldrh	r3, [r3, #6]
 800c4da:	b2da      	uxtb	r2, r3
 800c4dc:	e000      	b.n	800c4e0 <USBD_CDC_Setup+0xa8>
 800c4de:	2240      	movs	r2, #64	; 0x40
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c4e6:	6939      	ldr	r1, [r7, #16]
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f001 fd85 	bl	800e000 <USBD_CtlPrepareRx>
      break;
 800c4f6:	e076      	b.n	800c5e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	33b0      	adds	r3, #176	; 0xb0
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	7850      	ldrb	r0, [r2, #1]
 800c50e:	2200      	movs	r2, #0
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	4798      	blx	r3
      break;
 800c514:	e067      	b.n	800c5e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	785b      	ldrb	r3, [r3, #1]
 800c51a:	2b0b      	cmp	r3, #11
 800c51c:	d851      	bhi.n	800c5c2 <USBD_CDC_Setup+0x18a>
 800c51e:	a201      	add	r2, pc, #4	; (adr r2, 800c524 <USBD_CDC_Setup+0xec>)
 800c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c524:	0800c555 	.word	0x0800c555
 800c528:	0800c5d1 	.word	0x0800c5d1
 800c52c:	0800c5c3 	.word	0x0800c5c3
 800c530:	0800c5c3 	.word	0x0800c5c3
 800c534:	0800c5c3 	.word	0x0800c5c3
 800c538:	0800c5c3 	.word	0x0800c5c3
 800c53c:	0800c5c3 	.word	0x0800c5c3
 800c540:	0800c5c3 	.word	0x0800c5c3
 800c544:	0800c5c3 	.word	0x0800c5c3
 800c548:	0800c5c3 	.word	0x0800c5c3
 800c54c:	0800c57f 	.word	0x0800c57f
 800c550:	0800c5a9 	.word	0x0800c5a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	2b03      	cmp	r3, #3
 800c55e:	d107      	bne.n	800c570 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c560:	f107 030a 	add.w	r3, r7, #10
 800c564:	2202      	movs	r2, #2
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f001 fd1d 	bl	800dfa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c56e:	e032      	b.n	800c5d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f001 fca7 	bl	800dec6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c578:	2303      	movs	r3, #3
 800c57a:	75fb      	strb	r3, [r7, #23]
          break;
 800c57c:	e02b      	b.n	800c5d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c584:	b2db      	uxtb	r3, r3
 800c586:	2b03      	cmp	r3, #3
 800c588:	d107      	bne.n	800c59a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c58a:	f107 030d 	add.w	r3, r7, #13
 800c58e:	2201      	movs	r2, #1
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f001 fd08 	bl	800dfa8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c598:	e01d      	b.n	800c5d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f001 fc92 	bl	800dec6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	75fb      	strb	r3, [r7, #23]
          break;
 800c5a6:	e016      	b.n	800c5d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	2b03      	cmp	r3, #3
 800c5b2:	d00f      	beq.n	800c5d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f001 fc85 	bl	800dec6 <USBD_CtlError>
            ret = USBD_FAIL;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c5c0:	e008      	b.n	800c5d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f001 fc7e 	bl	800dec6 <USBD_CtlError>
          ret = USBD_FAIL;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	75fb      	strb	r3, [r7, #23]
          break;
 800c5ce:	e002      	b.n	800c5d6 <USBD_CDC_Setup+0x19e>
          break;
 800c5d0:	bf00      	nop
 800c5d2:	e008      	b.n	800c5e6 <USBD_CDC_Setup+0x1ae>
          break;
 800c5d4:	bf00      	nop
      }
      break;
 800c5d6:	e006      	b.n	800c5e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f001 fc73 	bl	800dec6 <USBD_CtlError>
      ret = USBD_FAIL;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c5e4:	bf00      	nop
  }

  return (uint8_t)ret;
 800c5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c602:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	32b0      	adds	r2, #176	; 0xb0
 800c60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d101      	bne.n	800c61a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c616:	2303      	movs	r3, #3
 800c618:	e065      	b.n	800c6e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	32b0      	adds	r2, #176	; 0xb0
 800c624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c628:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c62a:	78fb      	ldrb	r3, [r7, #3]
 800c62c:	f003 020f 	and.w	r2, r3, #15
 800c630:	6879      	ldr	r1, [r7, #4]
 800c632:	4613      	mov	r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	440b      	add	r3, r1
 800c63c:	3318      	adds	r3, #24
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d02f      	beq.n	800c6a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c644:	78fb      	ldrb	r3, [r7, #3]
 800c646:	f003 020f 	and.w	r2, r3, #15
 800c64a:	6879      	ldr	r1, [r7, #4]
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	440b      	add	r3, r1
 800c656:	3318      	adds	r3, #24
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	78fb      	ldrb	r3, [r7, #3]
 800c65c:	f003 010f 	and.w	r1, r3, #15
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	460b      	mov	r3, r1
 800c664:	00db      	lsls	r3, r3, #3
 800c666:	440b      	add	r3, r1
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	4403      	add	r3, r0
 800c66c:	3344      	adds	r3, #68	; 0x44
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	fbb2 f1f3 	udiv	r1, r2, r3
 800c674:	fb01 f303 	mul.w	r3, r1, r3
 800c678:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d112      	bne.n	800c6a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c67e:	78fb      	ldrb	r3, [r7, #3]
 800c680:	f003 020f 	and.w	r2, r3, #15
 800c684:	6879      	ldr	r1, [r7, #4]
 800c686:	4613      	mov	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	440b      	add	r3, r1
 800c690:	3318      	adds	r3, #24
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c696:	78f9      	ldrb	r1, [r7, #3]
 800c698:	2300      	movs	r3, #0
 800c69a:	2200      	movs	r2, #0
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f002 fa8f 	bl	800ebc0 <USBD_LL_Transmit>
 800c6a2:	e01f      	b.n	800c6e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	33b0      	adds	r3, #176	; 0xb0
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4413      	add	r3, r2
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d010      	beq.n	800c6e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	33b0      	adds	r3, #176	; 0xb0
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	4413      	add	r3, r2
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c6e0:	78fa      	ldrb	r2, [r7, #3]
 800c6e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b084      	sub	sp, #16
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	32b0      	adds	r2, #176	; 0xb0
 800c704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c708:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	32b0      	adds	r2, #176	; 0xb0
 800c714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c71c:	2303      	movs	r3, #3
 800c71e:	e01a      	b.n	800c756 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f002 fabb 	bl	800eca0 <USBD_LL_GetRxDataSize>
 800c72a:	4602      	mov	r2, r0
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	33b0      	adds	r3, #176	; 0xb0
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c750:	4611      	mov	r1, r2
 800c752:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c754:	2300      	movs	r3, #0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	32b0      	adds	r2, #176	; 0xb0
 800c770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c774:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c77c:	2303      	movs	r3, #3
 800c77e:	e025      	b.n	800c7cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	33b0      	adds	r3, #176	; 0xb0
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d01a      	beq.n	800c7ca <USBD_CDC_EP0_RxReady+0x6c>
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c79a:	2bff      	cmp	r3, #255	; 0xff
 800c79c:	d015      	beq.n	800c7ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	33b0      	adds	r3, #176	; 0xb0
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c7b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c7be:	b292      	uxth	r2, r2
 800c7c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	22ff      	movs	r2, #255	; 0xff
 800c7c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c7dc:	2182      	movs	r1, #130	; 0x82
 800c7de:	4818      	ldr	r0, [pc, #96]	; (800c840 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c7e0:	f000 fd0f 	bl	800d202 <USBD_GetEpDesc>
 800c7e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	4815      	ldr	r0, [pc, #84]	; (800c840 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c7ea:	f000 fd0a 	bl	800d202 <USBD_GetEpDesc>
 800c7ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c7f0:	2181      	movs	r1, #129	; 0x81
 800c7f2:	4813      	ldr	r0, [pc, #76]	; (800c840 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c7f4:	f000 fd05 	bl	800d202 <USBD_GetEpDesc>
 800c7f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	2210      	movs	r2, #16
 800c804:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d006      	beq.n	800c81a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	2200      	movs	r2, #0
 800c810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c814:	711a      	strb	r2, [r3, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d006      	beq.n	800c82e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c828:	711a      	strb	r2, [r3, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2243      	movs	r2, #67	; 0x43
 800c832:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c834:	4b02      	ldr	r3, [pc, #8]	; (800c840 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20000050 	.word	0x20000050

0800c844 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c84c:	2182      	movs	r1, #130	; 0x82
 800c84e:	4818      	ldr	r0, [pc, #96]	; (800c8b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c850:	f000 fcd7 	bl	800d202 <USBD_GetEpDesc>
 800c854:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c856:	2101      	movs	r1, #1
 800c858:	4815      	ldr	r0, [pc, #84]	; (800c8b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c85a:	f000 fcd2 	bl	800d202 <USBD_GetEpDesc>
 800c85e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c860:	2181      	movs	r1, #129	; 0x81
 800c862:	4813      	ldr	r0, [pc, #76]	; (800c8b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c864:	f000 fccd 	bl	800d202 <USBD_GetEpDesc>
 800c868:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	2210      	movs	r2, #16
 800c874:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d006      	beq.n	800c88a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	2200      	movs	r2, #0
 800c880:	711a      	strb	r2, [r3, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	f042 0202 	orr.w	r2, r2, #2
 800c888:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d006      	beq.n	800c89e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	711a      	strb	r2, [r3, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	f042 0202 	orr.w	r2, r2, #2
 800c89c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2243      	movs	r2, #67	; 0x43
 800c8a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c8a4:	4b02      	ldr	r3, [pc, #8]	; (800c8b0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	20000050 	.word	0x20000050

0800c8b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c8bc:	2182      	movs	r1, #130	; 0x82
 800c8be:	4818      	ldr	r0, [pc, #96]	; (800c920 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c8c0:	f000 fc9f 	bl	800d202 <USBD_GetEpDesc>
 800c8c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c8c6:	2101      	movs	r1, #1
 800c8c8:	4815      	ldr	r0, [pc, #84]	; (800c920 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c8ca:	f000 fc9a 	bl	800d202 <USBD_GetEpDesc>
 800c8ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c8d0:	2181      	movs	r1, #129	; 0x81
 800c8d2:	4813      	ldr	r0, [pc, #76]	; (800c920 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c8d4:	f000 fc95 	bl	800d202 <USBD_GetEpDesc>
 800c8d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d002      	beq.n	800c8e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2210      	movs	r2, #16
 800c8e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d006      	beq.n	800c8fa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8f4:	711a      	strb	r2, [r3, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d006      	beq.n	800c90e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c908:	711a      	strb	r2, [r3, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2243      	movs	r2, #67	; 0x43
 800c912:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c914:	4b02      	ldr	r3, [pc, #8]	; (800c920 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	20000050 	.word	0x20000050

0800c924 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	220a      	movs	r2, #10
 800c930:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c932:	4b03      	ldr	r3, [pc, #12]	; (800c940 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c934:	4618      	mov	r0, r3
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr
 800c940:	2000000c 	.word	0x2000000c

0800c944 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c944:	b480      	push	{r7}
 800c946:	b083      	sub	sp, #12
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d101      	bne.n	800c958 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c954:	2303      	movs	r3, #3
 800c956:	e009      	b.n	800c96c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	33b0      	adds	r3, #176	; 0xb0
 800c962:	009b      	lsls	r3, r3, #2
 800c964:	4413      	add	r3, r2
 800c966:	683a      	ldr	r2, [r7, #0]
 800c968:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c96a:	2300      	movs	r3, #0
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c978:	b480      	push	{r7}
 800c97a:	b087      	sub	sp, #28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	32b0      	adds	r2, #176	; 0xb0
 800c98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c992:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d101      	bne.n	800c99e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c99a:	2303      	movs	r3, #3
 800c99c:	e008      	b.n	800c9b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	371c      	adds	r7, #28
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	32b0      	adds	r2, #176	; 0xb0
 800c9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	e004      	b.n	800c9ea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3714      	adds	r7, #20
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr
	...

0800c9f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	32b0      	adds	r2, #176	; 0xb0
 800ca0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	32b0      	adds	r2, #176	; 0xb0
 800ca1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d101      	bne.n	800ca26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ca22:	2303      	movs	r3, #3
 800ca24:	e018      	b.n	800ca58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7c1b      	ldrb	r3, [r3, #16]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10a      	bne.n	800ca44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca2e:	4b0c      	ldr	r3, [pc, #48]	; (800ca60 <USBD_CDC_ReceivePacket+0x68>)
 800ca30:	7819      	ldrb	r1, [r3, #0]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f002 f8f7 	bl	800ec30 <USBD_LL_PrepareReceive>
 800ca42:	e008      	b.n	800ca56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca44:	4b06      	ldr	r3, [pc, #24]	; (800ca60 <USBD_CDC_ReceivePacket+0x68>)
 800ca46:	7819      	ldrb	r1, [r3, #0]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca4e:	2340      	movs	r3, #64	; 0x40
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f002 f8ed 	bl	800ec30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20000094 	.word	0x20000094

0800ca64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	e01f      	b.n	800cabc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2200      	movs	r2, #0
 800ca88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2201      	movs	r2, #1
 800caa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	79fa      	ldrb	r2, [r7, #7]
 800caae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f001 fec5 	bl	800e840 <USBD_LL_Init>
 800cab6:	4603      	mov	r3, r0
 800cab8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800caba:	7dfb      	ldrb	r3, [r7, #23]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3718      	adds	r7, #24
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cace:	2300      	movs	r3, #0
 800cad0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d101      	bne.n	800cadc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cad8:	2303      	movs	r3, #3
 800cada:	e025      	b.n	800cb28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	683a      	ldr	r2, [r7, #0]
 800cae0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	32ae      	adds	r2, #174	; 0xae
 800caee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d00f      	beq.n	800cb18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	32ae      	adds	r2, #174	; 0xae
 800cb02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb08:	f107 020e 	add.w	r2, r7, #14
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	4798      	blx	r3
 800cb10:	4602      	mov	r2, r0
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cb1e:	1c5a      	adds	r2, r3, #1
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cb26:	2300      	movs	r3, #0
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f001 fecd 	bl	800e8d8 <USBD_LL_Start>
 800cb3e:	4603      	mov	r3, r0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	370c      	adds	r7, #12
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	460b      	mov	r3, r1
 800cb68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d009      	beq.n	800cb8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	78fa      	ldrb	r2, [r7, #3]
 800cb82:	4611      	mov	r1, r2
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	4798      	blx	r3
 800cb88:	4603      	mov	r3, r0
 800cb8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b084      	sub	sp, #16
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cba2:	2300      	movs	r3, #0
 800cba4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	78fa      	ldrb	r2, [r7, #3]
 800cbb0:	4611      	mov	r1, r2
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	4798      	blx	r3
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cbbc:	2303      	movs	r3, #3
 800cbbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b084      	sub	sp, #16
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cbda:	6839      	ldr	r1, [r7, #0]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f001 f938 	bl	800de52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cbfe:	f003 031f 	and.w	r3, r3, #31
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	d01a      	beq.n	800cc3c <USBD_LL_SetupStage+0x72>
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d822      	bhi.n	800cc50 <USBD_LL_SetupStage+0x86>
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d002      	beq.n	800cc14 <USBD_LL_SetupStage+0x4a>
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d00a      	beq.n	800cc28 <USBD_LL_SetupStage+0x5e>
 800cc12:	e01d      	b.n	800cc50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 fb65 	bl	800d2ec <USBD_StdDevReq>
 800cc22:	4603      	mov	r3, r0
 800cc24:	73fb      	strb	r3, [r7, #15]
      break;
 800cc26:	e020      	b.n	800cc6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc2e:	4619      	mov	r1, r3
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 fbcd 	bl	800d3d0 <USBD_StdItfReq>
 800cc36:	4603      	mov	r3, r0
 800cc38:	73fb      	strb	r3, [r7, #15]
      break;
 800cc3a:	e016      	b.n	800cc6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc42:	4619      	mov	r1, r3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fc2f 	bl	800d4a8 <USBD_StdEPReq>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	73fb      	strb	r3, [r7, #15]
      break;
 800cc4e:	e00c      	b.n	800cc6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cc56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f001 fee0 	bl	800ea24 <USBD_LL_StallEP>
 800cc64:	4603      	mov	r3, r0
 800cc66:	73fb      	strb	r3, [r7, #15]
      break;
 800cc68:	bf00      	nop
  }

  return ret;
 800cc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cc86:	7afb      	ldrb	r3, [r7, #11]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d16e      	bne.n	800cd6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cc92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cc9a:	2b03      	cmp	r3, #3
 800cc9c:	f040 8098 	bne.w	800cdd0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	689a      	ldr	r2, [r3, #8]
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d913      	bls.n	800ccd4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	689a      	ldr	r2, [r3, #8]
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	1ad2      	subs	r2, r2, r3
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	68da      	ldr	r2, [r3, #12]
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	bf28      	it	cs
 800ccc6:	4613      	movcs	r3, r2
 800ccc8:	461a      	mov	r2, r3
 800ccca:	6879      	ldr	r1, [r7, #4]
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f001 f9b4 	bl	800e03a <USBD_CtlContinueRx>
 800ccd2:	e07d      	b.n	800cdd0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ccda:	f003 031f 	and.w	r3, r3, #31
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d014      	beq.n	800cd0c <USBD_LL_DataOutStage+0x98>
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d81d      	bhi.n	800cd22 <USBD_LL_DataOutStage+0xae>
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <USBD_LL_DataOutStage+0x7c>
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d003      	beq.n	800ccf6 <USBD_LL_DataOutStage+0x82>
 800ccee:	e018      	b.n	800cd22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	75bb      	strb	r3, [r7, #22]
            break;
 800ccf4:	e018      	b.n	800cd28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	4619      	mov	r1, r3
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f000 fa64 	bl	800d1ce <USBD_CoreFindIF>
 800cd06:	4603      	mov	r3, r0
 800cd08:	75bb      	strb	r3, [r7, #22]
            break;
 800cd0a:	e00d      	b.n	800cd28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	4619      	mov	r1, r3
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f000 fa66 	bl	800d1e8 <USBD_CoreFindEP>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	75bb      	strb	r3, [r7, #22]
            break;
 800cd20:	e002      	b.n	800cd28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cd22:	2300      	movs	r3, #0
 800cd24:	75bb      	strb	r3, [r7, #22]
            break;
 800cd26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cd28:	7dbb      	ldrb	r3, [r7, #22]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d119      	bne.n	800cd62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b03      	cmp	r3, #3
 800cd38:	d113      	bne.n	800cd62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cd3a:	7dba      	ldrb	r2, [r7, #22]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	32ae      	adds	r2, #174	; 0xae
 800cd40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00b      	beq.n	800cd62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cd4a:	7dba      	ldrb	r2, [r7, #22]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cd52:	7dba      	ldrb	r2, [r7, #22]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	32ae      	adds	r2, #174	; 0xae
 800cd58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f001 f97a 	bl	800e05c <USBD_CtlSendStatus>
 800cd68:	e032      	b.n	800cdd0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cd6a:	7afb      	ldrb	r3, [r7, #11]
 800cd6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	4619      	mov	r1, r3
 800cd74:	68f8      	ldr	r0, [r7, #12]
 800cd76:	f000 fa37 	bl	800d1e8 <USBD_CoreFindEP>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd7e:	7dbb      	ldrb	r3, [r7, #22]
 800cd80:	2bff      	cmp	r3, #255	; 0xff
 800cd82:	d025      	beq.n	800cdd0 <USBD_LL_DataOutStage+0x15c>
 800cd84:	7dbb      	ldrb	r3, [r7, #22]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d122      	bne.n	800cdd0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	d117      	bne.n	800cdc6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cd96:	7dba      	ldrb	r2, [r7, #22]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	32ae      	adds	r2, #174	; 0xae
 800cd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda0:	699b      	ldr	r3, [r3, #24]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00f      	beq.n	800cdc6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cda6:	7dba      	ldrb	r2, [r7, #22]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cdae:	7dba      	ldrb	r2, [r7, #22]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	32ae      	adds	r2, #174	; 0xae
 800cdb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb8:	699b      	ldr	r3, [r3, #24]
 800cdba:	7afa      	ldrb	r2, [r7, #11]
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	4798      	blx	r3
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cdc6:	7dfb      	ldrb	r3, [r7, #23]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d001      	beq.n	800cdd0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	e000      	b.n	800cdd2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3718      	adds	r7, #24
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b086      	sub	sp, #24
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	60f8      	str	r0, [r7, #12]
 800cde2:	460b      	mov	r3, r1
 800cde4:	607a      	str	r2, [r7, #4]
 800cde6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cde8:	7afb      	ldrb	r3, [r7, #11]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d16f      	bne.n	800cece <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	3314      	adds	r3, #20
 800cdf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d15a      	bne.n	800ceb4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	689a      	ldr	r2, [r3, #8]
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d914      	bls.n	800ce34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	689a      	ldr	r2, [r3, #8]
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	1ad2      	subs	r2, r2, r3
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f001 f8dc 	bl	800dfde <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce26:	2300      	movs	r3, #0
 800ce28:	2200      	movs	r2, #0
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f001 feff 	bl	800ec30 <USBD_LL_PrepareReceive>
 800ce32:	e03f      	b.n	800ceb4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	68da      	ldr	r2, [r3, #12]
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d11c      	bne.n	800ce7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d316      	bcc.n	800ce7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d20f      	bcs.n	800ce7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f001 f8bd 	bl	800dfde <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	2200      	movs	r2, #0
 800ce70:	2100      	movs	r1, #0
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	f001 fedc 	bl	800ec30 <USBD_LL_PrepareReceive>
 800ce78:	e01c      	b.n	800ceb4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2b03      	cmp	r3, #3
 800ce84:	d10f      	bne.n	800cea6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d009      	beq.n	800cea6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2200      	movs	r2, #0
 800ce96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cea6:	2180      	movs	r1, #128	; 0x80
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f001 fdbb 	bl	800ea24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f001 f8e7 	bl	800e082 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d03a      	beq.n	800cf34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f7ff fe42 	bl	800cb48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cecc:	e032      	b.n	800cf34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cece:	7afb      	ldrb	r3, [r7, #11]
 800ced0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	4619      	mov	r1, r3
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 f985 	bl	800d1e8 <USBD_CoreFindEP>
 800cede:	4603      	mov	r3, r0
 800cee0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cee2:	7dfb      	ldrb	r3, [r7, #23]
 800cee4:	2bff      	cmp	r3, #255	; 0xff
 800cee6:	d025      	beq.n	800cf34 <USBD_LL_DataInStage+0x15a>
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d122      	bne.n	800cf34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d11c      	bne.n	800cf34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cefa:	7dfa      	ldrb	r2, [r7, #23]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	32ae      	adds	r2, #174	; 0xae
 800cf00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d014      	beq.n	800cf34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cf0a:	7dfa      	ldrb	r2, [r7, #23]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cf12:	7dfa      	ldrb	r2, [r7, #23]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	32ae      	adds	r2, #174	; 0xae
 800cf18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	7afa      	ldrb	r2, [r7, #11]
 800cf20:	4611      	mov	r1, r2
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	4798      	blx	r3
 800cf26:	4603      	mov	r3, r0
 800cf28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cf2a:	7dbb      	ldrb	r3, [r7, #22]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cf30:	7dbb      	ldrb	r3, [r7, #22]
 800cf32:	e000      	b.n	800cf36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3718      	adds	r7, #24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}

0800cf3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b084      	sub	sp, #16
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d014      	beq.n	800cfa4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00e      	beq.n	800cfa4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	6852      	ldr	r2, [r2, #4]
 800cf92:	b2d2      	uxtb	r2, r2
 800cf94:	4611      	mov	r1, r2
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	4798      	blx	r3
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d001      	beq.n	800cfa4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cfa0:	2303      	movs	r3, #3
 800cfa2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cfa4:	2340      	movs	r3, #64	; 0x40
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f001 fcc6 	bl	800e93c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2240      	movs	r2, #64	; 0x40
 800cfbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cfc0:	2340      	movs	r3, #64	; 0x40
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	2180      	movs	r1, #128	; 0x80
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f001 fcb8 	bl	800e93c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2240      	movs	r2, #64	; 0x40
 800cfd6:	621a      	str	r2, [r3, #32]

  return ret;
 800cfd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b083      	sub	sp, #12
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	460b      	mov	r3, r1
 800cfec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	78fa      	ldrb	r2, [r7, #3]
 800cff2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	370c      	adds	r7, #12
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d002:	b480      	push	{r7}
 800d004:	b083      	sub	sp, #12
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d010:	b2db      	uxtb	r3, r3
 800d012:	2b04      	cmp	r3, #4
 800d014:	d006      	beq.n	800d024 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2204      	movs	r2, #4
 800d028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d03a:	b480      	push	{r7}
 800d03c:	b083      	sub	sp, #12
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	2b04      	cmp	r3, #4
 800d04c:	d106      	bne.n	800d05c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d054:	b2da      	uxtb	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b082      	sub	sp, #8
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d110      	bne.n	800d0a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00b      	beq.n	800d0a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d08e:	69db      	ldr	r3, [r3, #28]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d005      	beq.n	800d0a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d09a:	69db      	ldr	r3, [r3, #28]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b082      	sub	sp, #8
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	460b      	mov	r3, r1
 800d0b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	32ae      	adds	r2, #174	; 0xae
 800d0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d101      	bne.n	800d0cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	e01c      	b.n	800d106 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d115      	bne.n	800d104 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	32ae      	adds	r2, #174	; 0xae
 800d0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e6:	6a1b      	ldr	r3, [r3, #32]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00b      	beq.n	800d104 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	32ae      	adds	r2, #174	; 0xae
 800d0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0fa:	6a1b      	ldr	r3, [r3, #32]
 800d0fc:	78fa      	ldrb	r2, [r7, #3]
 800d0fe:	4611      	mov	r1, r2
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b082      	sub	sp, #8
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	460b      	mov	r3, r1
 800d118:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	32ae      	adds	r2, #174	; 0xae
 800d124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d12c:	2303      	movs	r3, #3
 800d12e:	e01c      	b.n	800d16a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b03      	cmp	r3, #3
 800d13a:	d115      	bne.n	800d168 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	32ae      	adds	r2, #174	; 0xae
 800d146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00b      	beq.n	800d168 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	32ae      	adds	r2, #174	; 0xae
 800d15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d160:	78fa      	ldrb	r2, [r7, #3]
 800d162:	4611      	mov	r1, r2
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d172:	b480      	push	{r7}
 800d174:	b083      	sub	sp, #12
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d17a:	2300      	movs	r3, #0
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00e      	beq.n	800d1c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	6852      	ldr	r2, [r2, #4]
 800d1b2:	b2d2      	uxtb	r2, r2
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	4798      	blx	r3
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d1c0:	2303      	movs	r3, #3
 800d1c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d1ce:	b480      	push	{r7}
 800d1d0:	b083      	sub	sp, #12
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d1da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d1f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	370c      	adds	r7, #12
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b086      	sub	sp, #24
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	460b      	mov	r3, r1
 800d20c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d216:	2300      	movs	r3, #0
 800d218:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	885b      	ldrh	r3, [r3, #2]
 800d21e:	b29a      	uxth	r2, r3
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	b29b      	uxth	r3, r3
 800d226:	429a      	cmp	r2, r3
 800d228:	d920      	bls.n	800d26c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	b29b      	uxth	r3, r3
 800d230:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d232:	e013      	b.n	800d25c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d234:	f107 030a 	add.w	r3, r7, #10
 800d238:	4619      	mov	r1, r3
 800d23a:	6978      	ldr	r0, [r7, #20]
 800d23c:	f000 f81b 	bl	800d276 <USBD_GetNextDesc>
 800d240:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	785b      	ldrb	r3, [r3, #1]
 800d246:	2b05      	cmp	r3, #5
 800d248:	d108      	bne.n	800d25c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	789b      	ldrb	r3, [r3, #2]
 800d252:	78fa      	ldrb	r2, [r7, #3]
 800d254:	429a      	cmp	r2, r3
 800d256:	d008      	beq.n	800d26a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d258:	2300      	movs	r3, #0
 800d25a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	885b      	ldrh	r3, [r3, #2]
 800d260:	b29a      	uxth	r2, r3
 800d262:	897b      	ldrh	r3, [r7, #10]
 800d264:	429a      	cmp	r2, r3
 800d266:	d8e5      	bhi.n	800d234 <USBD_GetEpDesc+0x32>
 800d268:	e000      	b.n	800d26c <USBD_GetEpDesc+0x6a>
          break;
 800d26a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d26c:	693b      	ldr	r3, [r7, #16]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d276:	b480      	push	{r7}
 800d278:	b085      	sub	sp, #20
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	881a      	ldrh	r2, [r3, #0]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	4413      	add	r3, r2
 800d290:	b29a      	uxth	r2, r3
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4413      	add	r3, r2
 800d2a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3714      	adds	r7, #20
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b087      	sub	sp, #28
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d2ce:	8a3b      	ldrh	r3, [r7, #16]
 800d2d0:	021b      	lsls	r3, r3, #8
 800d2d2:	b21a      	sxth	r2, r3
 800d2d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	b21b      	sxth	r3, r3
 800d2dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d2de:	89fb      	ldrh	r3, [r7, #14]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	371c      	adds	r7, #28
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d302:	2b40      	cmp	r3, #64	; 0x40
 800d304:	d005      	beq.n	800d312 <USBD_StdDevReq+0x26>
 800d306:	2b40      	cmp	r3, #64	; 0x40
 800d308:	d857      	bhi.n	800d3ba <USBD_StdDevReq+0xce>
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00f      	beq.n	800d32e <USBD_StdDevReq+0x42>
 800d30e:	2b20      	cmp	r3, #32
 800d310:	d153      	bne.n	800d3ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	32ae      	adds	r2, #174	; 0xae
 800d31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	4798      	blx	r3
 800d328:	4603      	mov	r3, r0
 800d32a:	73fb      	strb	r3, [r7, #15]
      break;
 800d32c:	e04a      	b.n	800d3c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	785b      	ldrb	r3, [r3, #1]
 800d332:	2b09      	cmp	r3, #9
 800d334:	d83b      	bhi.n	800d3ae <USBD_StdDevReq+0xc2>
 800d336:	a201      	add	r2, pc, #4	; (adr r2, 800d33c <USBD_StdDevReq+0x50>)
 800d338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d33c:	0800d391 	.word	0x0800d391
 800d340:	0800d3a5 	.word	0x0800d3a5
 800d344:	0800d3af 	.word	0x0800d3af
 800d348:	0800d39b 	.word	0x0800d39b
 800d34c:	0800d3af 	.word	0x0800d3af
 800d350:	0800d36f 	.word	0x0800d36f
 800d354:	0800d365 	.word	0x0800d365
 800d358:	0800d3af 	.word	0x0800d3af
 800d35c:	0800d387 	.word	0x0800d387
 800d360:	0800d379 	.word	0x0800d379
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d364:	6839      	ldr	r1, [r7, #0]
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 fa3c 	bl	800d7e4 <USBD_GetDescriptor>
          break;
 800d36c:	e024      	b.n	800d3b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 fbcb 	bl	800db0c <USBD_SetAddress>
          break;
 800d376:	e01f      	b.n	800d3b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fc0a 	bl	800db94 <USBD_SetConfig>
 800d380:	4603      	mov	r3, r0
 800d382:	73fb      	strb	r3, [r7, #15]
          break;
 800d384:	e018      	b.n	800d3b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d386:	6839      	ldr	r1, [r7, #0]
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 fcad 	bl	800dce8 <USBD_GetConfig>
          break;
 800d38e:	e013      	b.n	800d3b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d390:	6839      	ldr	r1, [r7, #0]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 fcde 	bl	800dd54 <USBD_GetStatus>
          break;
 800d398:	e00e      	b.n	800d3b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d39a:	6839      	ldr	r1, [r7, #0]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fd0d 	bl	800ddbc <USBD_SetFeature>
          break;
 800d3a2:	e009      	b.n	800d3b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fd31 	bl	800de0e <USBD_ClrFeature>
          break;
 800d3ac:	e004      	b.n	800d3b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d3ae:	6839      	ldr	r1, [r7, #0]
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f000 fd88 	bl	800dec6 <USBD_CtlError>
          break;
 800d3b6:	bf00      	nop
      }
      break;
 800d3b8:	e004      	b.n	800d3c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fd82 	bl	800dec6 <USBD_CtlError>
      break;
 800d3c2:	bf00      	nop
  }

  return ret;
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop

0800d3d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3e6:	2b40      	cmp	r3, #64	; 0x40
 800d3e8:	d005      	beq.n	800d3f6 <USBD_StdItfReq+0x26>
 800d3ea:	2b40      	cmp	r3, #64	; 0x40
 800d3ec:	d852      	bhi.n	800d494 <USBD_StdItfReq+0xc4>
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <USBD_StdItfReq+0x26>
 800d3f2:	2b20      	cmp	r3, #32
 800d3f4:	d14e      	bne.n	800d494 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	3b01      	subs	r3, #1
 800d400:	2b02      	cmp	r3, #2
 800d402:	d840      	bhi.n	800d486 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	889b      	ldrh	r3, [r3, #4]
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d836      	bhi.n	800d47c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	889b      	ldrh	r3, [r3, #4]
 800d412:	b2db      	uxtb	r3, r3
 800d414:	4619      	mov	r1, r3
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7ff fed9 	bl	800d1ce <USBD_CoreFindIF>
 800d41c:	4603      	mov	r3, r0
 800d41e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d420:	7bbb      	ldrb	r3, [r7, #14]
 800d422:	2bff      	cmp	r3, #255	; 0xff
 800d424:	d01d      	beq.n	800d462 <USBD_StdItfReq+0x92>
 800d426:	7bbb      	ldrb	r3, [r7, #14]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d11a      	bne.n	800d462 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d42c:	7bba      	ldrb	r2, [r7, #14]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	32ae      	adds	r2, #174	; 0xae
 800d432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00f      	beq.n	800d45c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d43c:	7bba      	ldrb	r2, [r7, #14]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d444:	7bba      	ldrb	r2, [r7, #14]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	32ae      	adds	r2, #174	; 0xae
 800d44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	4798      	blx	r3
 800d456:	4603      	mov	r3, r0
 800d458:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d45a:	e004      	b.n	800d466 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d45c:	2303      	movs	r3, #3
 800d45e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d460:	e001      	b.n	800d466 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d462:	2303      	movs	r3, #3
 800d464:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	88db      	ldrh	r3, [r3, #6]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d110      	bne.n	800d490 <USBD_StdItfReq+0xc0>
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10d      	bne.n	800d490 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 fdf1 	bl	800e05c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d47a:	e009      	b.n	800d490 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d47c:	6839      	ldr	r1, [r7, #0]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fd21 	bl	800dec6 <USBD_CtlError>
          break;
 800d484:	e004      	b.n	800d490 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fd1c 	bl	800dec6 <USBD_CtlError>
          break;
 800d48e:	e000      	b.n	800d492 <USBD_StdItfReq+0xc2>
          break;
 800d490:	bf00      	nop
      }
      break;
 800d492:	e004      	b.n	800d49e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d494:	6839      	ldr	r1, [r7, #0]
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 fd15 	bl	800dec6 <USBD_CtlError>
      break;
 800d49c:	bf00      	nop
  }

  return ret;
 800d49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	889b      	ldrh	r3, [r3, #4]
 800d4ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4c4:	2b40      	cmp	r3, #64	; 0x40
 800d4c6:	d007      	beq.n	800d4d8 <USBD_StdEPReq+0x30>
 800d4c8:	2b40      	cmp	r3, #64	; 0x40
 800d4ca:	f200 817f 	bhi.w	800d7cc <USBD_StdEPReq+0x324>
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d02a      	beq.n	800d528 <USBD_StdEPReq+0x80>
 800d4d2:	2b20      	cmp	r3, #32
 800d4d4:	f040 817a 	bne.w	800d7cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d4d8:	7bbb      	ldrb	r3, [r7, #14]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7ff fe83 	bl	800d1e8 <USBD_CoreFindEP>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4e6:	7b7b      	ldrb	r3, [r7, #13]
 800d4e8:	2bff      	cmp	r3, #255	; 0xff
 800d4ea:	f000 8174 	beq.w	800d7d6 <USBD_StdEPReq+0x32e>
 800d4ee:	7b7b      	ldrb	r3, [r7, #13]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f040 8170 	bne.w	800d7d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d4f6:	7b7a      	ldrb	r2, [r7, #13]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d4fe:	7b7a      	ldrb	r2, [r7, #13]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	32ae      	adds	r2, #174	; 0xae
 800d504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f000 8163 	beq.w	800d7d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d510:	7b7a      	ldrb	r2, [r7, #13]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	32ae      	adds	r2, #174	; 0xae
 800d516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	6839      	ldr	r1, [r7, #0]
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	4798      	blx	r3
 800d522:	4603      	mov	r3, r0
 800d524:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d526:	e156      	b.n	800d7d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	785b      	ldrb	r3, [r3, #1]
 800d52c:	2b03      	cmp	r3, #3
 800d52e:	d008      	beq.n	800d542 <USBD_StdEPReq+0x9a>
 800d530:	2b03      	cmp	r3, #3
 800d532:	f300 8145 	bgt.w	800d7c0 <USBD_StdEPReq+0x318>
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 809b 	beq.w	800d672 <USBD_StdEPReq+0x1ca>
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d03c      	beq.n	800d5ba <USBD_StdEPReq+0x112>
 800d540:	e13e      	b.n	800d7c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d002      	beq.n	800d554 <USBD_StdEPReq+0xac>
 800d54e:	2b03      	cmp	r3, #3
 800d550:	d016      	beq.n	800d580 <USBD_StdEPReq+0xd8>
 800d552:	e02c      	b.n	800d5ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d554:	7bbb      	ldrb	r3, [r7, #14]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d00d      	beq.n	800d576 <USBD_StdEPReq+0xce>
 800d55a:	7bbb      	ldrb	r3, [r7, #14]
 800d55c:	2b80      	cmp	r3, #128	; 0x80
 800d55e:	d00a      	beq.n	800d576 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d560:	7bbb      	ldrb	r3, [r7, #14]
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f001 fa5d 	bl	800ea24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d56a:	2180      	movs	r1, #128	; 0x80
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f001 fa59 	bl	800ea24 <USBD_LL_StallEP>
 800d572:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d574:	e020      	b.n	800d5b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d576:	6839      	ldr	r1, [r7, #0]
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 fca4 	bl	800dec6 <USBD_CtlError>
              break;
 800d57e:	e01b      	b.n	800d5b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	885b      	ldrh	r3, [r3, #2]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10e      	bne.n	800d5a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d588:	7bbb      	ldrb	r3, [r7, #14]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00b      	beq.n	800d5a6 <USBD_StdEPReq+0xfe>
 800d58e:	7bbb      	ldrb	r3, [r7, #14]
 800d590:	2b80      	cmp	r3, #128	; 0x80
 800d592:	d008      	beq.n	800d5a6 <USBD_StdEPReq+0xfe>
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	88db      	ldrh	r3, [r3, #6]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d104      	bne.n	800d5a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d59c:	7bbb      	ldrb	r3, [r7, #14]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f001 fa3f 	bl	800ea24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fd58 	bl	800e05c <USBD_CtlSendStatus>

              break;
 800d5ac:	e004      	b.n	800d5b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fc88 	bl	800dec6 <USBD_CtlError>
              break;
 800d5b6:	bf00      	nop
          }
          break;
 800d5b8:	e107      	b.n	800d7ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	2b02      	cmp	r3, #2
 800d5c4:	d002      	beq.n	800d5cc <USBD_StdEPReq+0x124>
 800d5c6:	2b03      	cmp	r3, #3
 800d5c8:	d016      	beq.n	800d5f8 <USBD_StdEPReq+0x150>
 800d5ca:	e04b      	b.n	800d664 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5cc:	7bbb      	ldrb	r3, [r7, #14]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00d      	beq.n	800d5ee <USBD_StdEPReq+0x146>
 800d5d2:	7bbb      	ldrb	r3, [r7, #14]
 800d5d4:	2b80      	cmp	r3, #128	; 0x80
 800d5d6:	d00a      	beq.n	800d5ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f001 fa21 	bl	800ea24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5e2:	2180      	movs	r1, #128	; 0x80
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f001 fa1d 	bl	800ea24 <USBD_LL_StallEP>
 800d5ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d5ec:	e040      	b.n	800d670 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d5ee:	6839      	ldr	r1, [r7, #0]
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 fc68 	bl	800dec6 <USBD_CtlError>
              break;
 800d5f6:	e03b      	b.n	800d670 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	885b      	ldrh	r3, [r3, #2]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d136      	bne.n	800d66e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d600:	7bbb      	ldrb	r3, [r7, #14]
 800d602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d606:	2b00      	cmp	r3, #0
 800d608:	d004      	beq.n	800d614 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d60a:	7bbb      	ldrb	r3, [r7, #14]
 800d60c:	4619      	mov	r1, r3
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f001 fa3e 	bl	800ea90 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fd21 	bl	800e05c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d61a:	7bbb      	ldrb	r3, [r7, #14]
 800d61c:	4619      	mov	r1, r3
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7ff fde2 	bl	800d1e8 <USBD_CoreFindEP>
 800d624:	4603      	mov	r3, r0
 800d626:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d628:	7b7b      	ldrb	r3, [r7, #13]
 800d62a:	2bff      	cmp	r3, #255	; 0xff
 800d62c:	d01f      	beq.n	800d66e <USBD_StdEPReq+0x1c6>
 800d62e:	7b7b      	ldrb	r3, [r7, #13]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d11c      	bne.n	800d66e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d634:	7b7a      	ldrb	r2, [r7, #13]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d63c:	7b7a      	ldrb	r2, [r7, #13]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	32ae      	adds	r2, #174	; 0xae
 800d642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d010      	beq.n	800d66e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d64c:	7b7a      	ldrb	r2, [r7, #13]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	32ae      	adds	r2, #174	; 0xae
 800d652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	4798      	blx	r3
 800d65e:	4603      	mov	r3, r0
 800d660:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d662:	e004      	b.n	800d66e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fc2d 	bl	800dec6 <USBD_CtlError>
              break;
 800d66c:	e000      	b.n	800d670 <USBD_StdEPReq+0x1c8>
              break;
 800d66e:	bf00      	nop
          }
          break;
 800d670:	e0ab      	b.n	800d7ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b02      	cmp	r3, #2
 800d67c:	d002      	beq.n	800d684 <USBD_StdEPReq+0x1dc>
 800d67e:	2b03      	cmp	r3, #3
 800d680:	d032      	beq.n	800d6e8 <USBD_StdEPReq+0x240>
 800d682:	e097      	b.n	800d7b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d684:	7bbb      	ldrb	r3, [r7, #14]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d007      	beq.n	800d69a <USBD_StdEPReq+0x1f2>
 800d68a:	7bbb      	ldrb	r3, [r7, #14]
 800d68c:	2b80      	cmp	r3, #128	; 0x80
 800d68e:	d004      	beq.n	800d69a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d690:	6839      	ldr	r1, [r7, #0]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fc17 	bl	800dec6 <USBD_CtlError>
                break;
 800d698:	e091      	b.n	800d7be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d69a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	da0b      	bge.n	800d6ba <USBD_StdEPReq+0x212>
 800d6a2:	7bbb      	ldrb	r3, [r7, #14]
 800d6a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4413      	add	r3, r2
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	3310      	adds	r3, #16
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	4413      	add	r3, r2
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	e00b      	b.n	800d6d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6ba:	7bbb      	ldrb	r3, [r7, #14]
 800d6bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	4413      	add	r3, r2
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	2202      	movs	r2, #2
 800d6de:	4619      	mov	r1, r3
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 fc61 	bl	800dfa8 <USBD_CtlSendData>
              break;
 800d6e6:	e06a      	b.n	800d7be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d6e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	da11      	bge.n	800d714 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d6f0:	7bbb      	ldrb	r3, [r7, #14]
 800d6f2:	f003 020f 	and.w	r2, r3, #15
 800d6f6:	6879      	ldr	r1, [r7, #4]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4413      	add	r3, r2
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	440b      	add	r3, r1
 800d702:	3324      	adds	r3, #36	; 0x24
 800d704:	881b      	ldrh	r3, [r3, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d117      	bne.n	800d73a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fbda 	bl	800dec6 <USBD_CtlError>
                  break;
 800d712:	e054      	b.n	800d7be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	f003 020f 	and.w	r2, r3, #15
 800d71a:	6879      	ldr	r1, [r7, #4]
 800d71c:	4613      	mov	r3, r2
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	4413      	add	r3, r2
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	440b      	add	r3, r1
 800d726:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d104      	bne.n	800d73a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d730:	6839      	ldr	r1, [r7, #0]
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 fbc7 	bl	800dec6 <USBD_CtlError>
                  break;
 800d738:	e041      	b.n	800d7be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d73a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	da0b      	bge.n	800d75a <USBD_StdEPReq+0x2b2>
 800d742:	7bbb      	ldrb	r3, [r7, #14]
 800d744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d748:	4613      	mov	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	3310      	adds	r3, #16
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	4413      	add	r3, r2
 800d756:	3304      	adds	r3, #4
 800d758:	e00b      	b.n	800d772 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d75a:	7bbb      	ldrb	r3, [r7, #14]
 800d75c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d760:	4613      	mov	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	4413      	add	r3, r2
 800d770:	3304      	adds	r3, #4
 800d772:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d774:	7bbb      	ldrb	r3, [r7, #14]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d002      	beq.n	800d780 <USBD_StdEPReq+0x2d8>
 800d77a:	7bbb      	ldrb	r3, [r7, #14]
 800d77c:	2b80      	cmp	r3, #128	; 0x80
 800d77e:	d103      	bne.n	800d788 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2200      	movs	r2, #0
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	e00e      	b.n	800d7a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d788:	7bbb      	ldrb	r3, [r7, #14]
 800d78a:	4619      	mov	r1, r3
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f001 f9b5 	bl	800eafc <USBD_LL_IsStallEP>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d003      	beq.n	800d7a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2201      	movs	r2, #1
 800d79c:	601a      	str	r2, [r3, #0]
 800d79e:	e002      	b.n	800d7a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	2202      	movs	r2, #2
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fbfb 	bl	800dfa8 <USBD_CtlSendData>
              break;
 800d7b2:	e004      	b.n	800d7be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fb85 	bl	800dec6 <USBD_CtlError>
              break;
 800d7bc:	bf00      	nop
          }
          break;
 800d7be:	e004      	b.n	800d7ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d7c0:	6839      	ldr	r1, [r7, #0]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fb7f 	bl	800dec6 <USBD_CtlError>
          break;
 800d7c8:	bf00      	nop
      }
      break;
 800d7ca:	e005      	b.n	800d7d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d7cc:	6839      	ldr	r1, [r7, #0]
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 fb79 	bl	800dec6 <USBD_CtlError>
      break;
 800d7d4:	e000      	b.n	800d7d8 <USBD_StdEPReq+0x330>
      break;
 800d7d6:	bf00      	nop
  }

  return ret;
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	885b      	ldrh	r3, [r3, #2]
 800d7fe:	0a1b      	lsrs	r3, r3, #8
 800d800:	b29b      	uxth	r3, r3
 800d802:	3b01      	subs	r3, #1
 800d804:	2b0e      	cmp	r3, #14
 800d806:	f200 8152 	bhi.w	800daae <USBD_GetDescriptor+0x2ca>
 800d80a:	a201      	add	r2, pc, #4	; (adr r2, 800d810 <USBD_GetDescriptor+0x2c>)
 800d80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d810:	0800d881 	.word	0x0800d881
 800d814:	0800d899 	.word	0x0800d899
 800d818:	0800d8d9 	.word	0x0800d8d9
 800d81c:	0800daaf 	.word	0x0800daaf
 800d820:	0800daaf 	.word	0x0800daaf
 800d824:	0800da4f 	.word	0x0800da4f
 800d828:	0800da7b 	.word	0x0800da7b
 800d82c:	0800daaf 	.word	0x0800daaf
 800d830:	0800daaf 	.word	0x0800daaf
 800d834:	0800daaf 	.word	0x0800daaf
 800d838:	0800daaf 	.word	0x0800daaf
 800d83c:	0800daaf 	.word	0x0800daaf
 800d840:	0800daaf 	.word	0x0800daaf
 800d844:	0800daaf 	.word	0x0800daaf
 800d848:	0800d84d 	.word	0x0800d84d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d852:	69db      	ldr	r3, [r3, #28]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00b      	beq.n	800d870 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	7c12      	ldrb	r2, [r2, #16]
 800d864:	f107 0108 	add.w	r1, r7, #8
 800d868:	4610      	mov	r0, r2
 800d86a:	4798      	blx	r3
 800d86c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d86e:	e126      	b.n	800dabe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d870:	6839      	ldr	r1, [r7, #0]
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 fb27 	bl	800dec6 <USBD_CtlError>
        err++;
 800d878:	7afb      	ldrb	r3, [r7, #11]
 800d87a:	3301      	adds	r3, #1
 800d87c:	72fb      	strb	r3, [r7, #11]
      break;
 800d87e:	e11e      	b.n	800dabe <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	7c12      	ldrb	r2, [r2, #16]
 800d88c:	f107 0108 	add.w	r1, r7, #8
 800d890:	4610      	mov	r0, r2
 800d892:	4798      	blx	r3
 800d894:	60f8      	str	r0, [r7, #12]
      break;
 800d896:	e112      	b.n	800dabe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7c1b      	ldrb	r3, [r3, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10d      	bne.n	800d8bc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a8:	f107 0208 	add.w	r2, r7, #8
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	4798      	blx	r3
 800d8b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	2202      	movs	r2, #2
 800d8b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d8ba:	e100      	b.n	800dabe <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c4:	f107 0208 	add.w	r2, r7, #8
 800d8c8:	4610      	mov	r0, r2
 800d8ca:	4798      	blx	r3
 800d8cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	2202      	movs	r2, #2
 800d8d4:	701a      	strb	r2, [r3, #0]
      break;
 800d8d6:	e0f2      	b.n	800dabe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	885b      	ldrh	r3, [r3, #2]
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b05      	cmp	r3, #5
 800d8e0:	f200 80ac 	bhi.w	800da3c <USBD_GetDescriptor+0x258>
 800d8e4:	a201      	add	r2, pc, #4	; (adr r2, 800d8ec <USBD_GetDescriptor+0x108>)
 800d8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ea:	bf00      	nop
 800d8ec:	0800d905 	.word	0x0800d905
 800d8f0:	0800d939 	.word	0x0800d939
 800d8f4:	0800d96d 	.word	0x0800d96d
 800d8f8:	0800d9a1 	.word	0x0800d9a1
 800d8fc:	0800d9d5 	.word	0x0800d9d5
 800d900:	0800da09 	.word	0x0800da09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00b      	beq.n	800d928 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	7c12      	ldrb	r2, [r2, #16]
 800d91c:	f107 0108 	add.w	r1, r7, #8
 800d920:	4610      	mov	r0, r2
 800d922:	4798      	blx	r3
 800d924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d926:	e091      	b.n	800da4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 facb 	bl	800dec6 <USBD_CtlError>
            err++;
 800d930:	7afb      	ldrb	r3, [r7, #11]
 800d932:	3301      	adds	r3, #1
 800d934:	72fb      	strb	r3, [r7, #11]
          break;
 800d936:	e089      	b.n	800da4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00b      	beq.n	800d95c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	7c12      	ldrb	r2, [r2, #16]
 800d950:	f107 0108 	add.w	r1, r7, #8
 800d954:	4610      	mov	r0, r2
 800d956:	4798      	blx	r3
 800d958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d95a:	e077      	b.n	800da4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d95c:	6839      	ldr	r1, [r7, #0]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 fab1 	bl	800dec6 <USBD_CtlError>
            err++;
 800d964:	7afb      	ldrb	r3, [r7, #11]
 800d966:	3301      	adds	r3, #1
 800d968:	72fb      	strb	r3, [r7, #11]
          break;
 800d96a:	e06f      	b.n	800da4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00b      	beq.n	800d990 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	7c12      	ldrb	r2, [r2, #16]
 800d984:	f107 0108 	add.w	r1, r7, #8
 800d988:	4610      	mov	r0, r2
 800d98a:	4798      	blx	r3
 800d98c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d98e:	e05d      	b.n	800da4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d990:	6839      	ldr	r1, [r7, #0]
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f000 fa97 	bl	800dec6 <USBD_CtlError>
            err++;
 800d998:	7afb      	ldrb	r3, [r7, #11]
 800d99a:	3301      	adds	r3, #1
 800d99c:	72fb      	strb	r3, [r7, #11]
          break;
 800d99e:	e055      	b.n	800da4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00b      	beq.n	800d9c4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	7c12      	ldrb	r2, [r2, #16]
 800d9b8:	f107 0108 	add.w	r1, r7, #8
 800d9bc:	4610      	mov	r0, r2
 800d9be:	4798      	blx	r3
 800d9c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9c2:	e043      	b.n	800da4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9c4:	6839      	ldr	r1, [r7, #0]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fa7d 	bl	800dec6 <USBD_CtlError>
            err++;
 800d9cc:	7afb      	ldrb	r3, [r7, #11]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d9d2:	e03b      	b.n	800da4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9da:	695b      	ldr	r3, [r3, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00b      	beq.n	800d9f8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9e6:	695b      	ldr	r3, [r3, #20]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	7c12      	ldrb	r2, [r2, #16]
 800d9ec:	f107 0108 	add.w	r1, r7, #8
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	4798      	blx	r3
 800d9f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d9f6:	e029      	b.n	800da4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fa63 	bl	800dec6 <USBD_CtlError>
            err++;
 800da00:	7afb      	ldrb	r3, [r7, #11]
 800da02:	3301      	adds	r3, #1
 800da04:	72fb      	strb	r3, [r7, #11]
          break;
 800da06:	e021      	b.n	800da4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00b      	beq.n	800da2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	7c12      	ldrb	r2, [r2, #16]
 800da20:	f107 0108 	add.w	r1, r7, #8
 800da24:	4610      	mov	r0, r2
 800da26:	4798      	blx	r3
 800da28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800da2a:	e00f      	b.n	800da4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800da2c:	6839      	ldr	r1, [r7, #0]
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 fa49 	bl	800dec6 <USBD_CtlError>
            err++;
 800da34:	7afb      	ldrb	r3, [r7, #11]
 800da36:	3301      	adds	r3, #1
 800da38:	72fb      	strb	r3, [r7, #11]
          break;
 800da3a:	e007      	b.n	800da4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800da3c:	6839      	ldr	r1, [r7, #0]
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 fa41 	bl	800dec6 <USBD_CtlError>
          err++;
 800da44:	7afb      	ldrb	r3, [r7, #11]
 800da46:	3301      	adds	r3, #1
 800da48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800da4a:	bf00      	nop
      }
      break;
 800da4c:	e037      	b.n	800dabe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	7c1b      	ldrb	r3, [r3, #16]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d109      	bne.n	800da6a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da5e:	f107 0208 	add.w	r2, r7, #8
 800da62:	4610      	mov	r0, r2
 800da64:	4798      	blx	r3
 800da66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da68:	e029      	b.n	800dabe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fa2a 	bl	800dec6 <USBD_CtlError>
        err++;
 800da72:	7afb      	ldrb	r3, [r7, #11]
 800da74:	3301      	adds	r3, #1
 800da76:	72fb      	strb	r3, [r7, #11]
      break;
 800da78:	e021      	b.n	800dabe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	7c1b      	ldrb	r3, [r3, #16]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10d      	bne.n	800da9e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8a:	f107 0208 	add.w	r2, r7, #8
 800da8e:	4610      	mov	r0, r2
 800da90:	4798      	blx	r3
 800da92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	3301      	adds	r3, #1
 800da98:	2207      	movs	r2, #7
 800da9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da9c:	e00f      	b.n	800dabe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800da9e:	6839      	ldr	r1, [r7, #0]
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 fa10 	bl	800dec6 <USBD_CtlError>
        err++;
 800daa6:	7afb      	ldrb	r3, [r7, #11]
 800daa8:	3301      	adds	r3, #1
 800daaa:	72fb      	strb	r3, [r7, #11]
      break;
 800daac:	e007      	b.n	800dabe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fa08 	bl	800dec6 <USBD_CtlError>
      err++;
 800dab6:	7afb      	ldrb	r3, [r7, #11]
 800dab8:	3301      	adds	r3, #1
 800daba:	72fb      	strb	r3, [r7, #11]
      break;
 800dabc:	bf00      	nop
  }

  if (err != 0U)
 800dabe:	7afb      	ldrb	r3, [r7, #11]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d11e      	bne.n	800db02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	88db      	ldrh	r3, [r3, #6]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d016      	beq.n	800dafa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dacc:	893b      	ldrh	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00e      	beq.n	800daf0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	88da      	ldrh	r2, [r3, #6]
 800dad6:	893b      	ldrh	r3, [r7, #8]
 800dad8:	4293      	cmp	r3, r2
 800dada:	bf28      	it	cs
 800dadc:	4613      	movcs	r3, r2
 800dade:	b29b      	uxth	r3, r3
 800dae0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dae2:	893b      	ldrh	r3, [r7, #8]
 800dae4:	461a      	mov	r2, r3
 800dae6:	68f9      	ldr	r1, [r7, #12]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fa5d 	bl	800dfa8 <USBD_CtlSendData>
 800daee:	e009      	b.n	800db04 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f9e7 	bl	800dec6 <USBD_CtlError>
 800daf8:	e004      	b.n	800db04 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 faae 	bl	800e05c <USBD_CtlSendStatus>
 800db00:	e000      	b.n	800db04 <USBD_GetDescriptor+0x320>
    return;
 800db02:	bf00      	nop
  }
}
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop

0800db0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	889b      	ldrh	r3, [r3, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d131      	bne.n	800db82 <USBD_SetAddress+0x76>
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	88db      	ldrh	r3, [r3, #6]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d12d      	bne.n	800db82 <USBD_SetAddress+0x76>
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	885b      	ldrh	r3, [r3, #2]
 800db2a:	2b7f      	cmp	r3, #127	; 0x7f
 800db2c:	d829      	bhi.n	800db82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	885b      	ldrh	r3, [r3, #2]
 800db32:	b2db      	uxtb	r3, r3
 800db34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db40:	b2db      	uxtb	r3, r3
 800db42:	2b03      	cmp	r3, #3
 800db44:	d104      	bne.n	800db50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f9bc 	bl	800dec6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db4e:	e01d      	b.n	800db8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	7bfa      	ldrb	r2, [r7, #15]
 800db54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db58:	7bfb      	ldrb	r3, [r7, #15]
 800db5a:	4619      	mov	r1, r3
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 fff9 	bl	800eb54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fa7a 	bl	800e05c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d004      	beq.n	800db78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2202      	movs	r2, #2
 800db72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db76:	e009      	b.n	800db8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2201      	movs	r2, #1
 800db7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db80:	e004      	b.n	800db8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f99e 	bl	800dec6 <USBD_CtlError>
  }
}
 800db8a:	bf00      	nop
 800db8c:	bf00      	nop
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	885b      	ldrh	r3, [r3, #2]
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	4b4e      	ldr	r3, [pc, #312]	; (800dce4 <USBD_SetConfig+0x150>)
 800dbaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dbac:	4b4d      	ldr	r3, [pc, #308]	; (800dce4 <USBD_SetConfig+0x150>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d905      	bls.n	800dbc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dbb4:	6839      	ldr	r1, [r7, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 f985 	bl	800dec6 <USBD_CtlError>
    return USBD_FAIL;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	e08c      	b.n	800dcda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d002      	beq.n	800dbd2 <USBD_SetConfig+0x3e>
 800dbcc:	2b03      	cmp	r3, #3
 800dbce:	d029      	beq.n	800dc24 <USBD_SetConfig+0x90>
 800dbd0:	e075      	b.n	800dcbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800dbd2:	4b44      	ldr	r3, [pc, #272]	; (800dce4 <USBD_SetConfig+0x150>)
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d020      	beq.n	800dc1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800dbda:	4b42      	ldr	r3, [pc, #264]	; (800dce4 <USBD_SetConfig+0x150>)
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	461a      	mov	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dbe4:	4b3f      	ldr	r3, [pc, #252]	; (800dce4 <USBD_SetConfig+0x150>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7fe ffb7 	bl	800cb5e <USBD_SetClassConfig>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dbf4:	7bfb      	ldrb	r3, [r7, #15]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d008      	beq.n	800dc0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dbfa:	6839      	ldr	r1, [r7, #0]
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 f962 	bl	800dec6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2202      	movs	r2, #2
 800dc06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc0a:	e065      	b.n	800dcd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 fa25 	bl	800e05c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2203      	movs	r2, #3
 800dc16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dc1a:	e05d      	b.n	800dcd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 fa1d 	bl	800e05c <USBD_CtlSendStatus>
      break;
 800dc22:	e059      	b.n	800dcd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dc24:	4b2f      	ldr	r3, [pc, #188]	; (800dce4 <USBD_SetConfig+0x150>)
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d112      	bne.n	800dc52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2202      	movs	r2, #2
 800dc30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dc34:	4b2b      	ldr	r3, [pc, #172]	; (800dce4 <USBD_SetConfig+0x150>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	461a      	mov	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc3e:	4b29      	ldr	r3, [pc, #164]	; (800dce4 <USBD_SetConfig+0x150>)
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f7fe ffa6 	bl	800cb96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fa06 	bl	800e05c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc50:	e042      	b.n	800dcd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dc52:	4b24      	ldr	r3, [pc, #144]	; (800dce4 <USBD_SetConfig+0x150>)
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	461a      	mov	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d02a      	beq.n	800dcb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7fe ff94 	bl	800cb96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dc6e:	4b1d      	ldr	r3, [pc, #116]	; (800dce4 <USBD_SetConfig+0x150>)
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc78:	4b1a      	ldr	r3, [pc, #104]	; (800dce4 <USBD_SetConfig+0x150>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7fe ff6d 	bl	800cb5e <USBD_SetClassConfig>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00f      	beq.n	800dcae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 f918 	bl	800dec6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7fe ff79 	bl	800cb96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2202      	movs	r2, #2
 800dca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dcac:	e014      	b.n	800dcd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f9d4 	bl	800e05c <USBD_CtlSendStatus>
      break;
 800dcb4:	e010      	b.n	800dcd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 f9d0 	bl	800e05c <USBD_CtlSendStatus>
      break;
 800dcbc:	e00c      	b.n	800dcd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f900 	bl	800dec6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dcc6:	4b07      	ldr	r3, [pc, #28]	; (800dce4 <USBD_SetConfig+0x150>)
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	4619      	mov	r1, r3
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f7fe ff62 	bl	800cb96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dcd2:	2303      	movs	r3, #3
 800dcd4:	73fb      	strb	r3, [r7, #15]
      break;
 800dcd6:	bf00      	nop
  }

  return ret;
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20001e20 	.word	0x20001e20

0800dce8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	88db      	ldrh	r3, [r3, #6]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d004      	beq.n	800dd04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dcfa:	6839      	ldr	r1, [r7, #0]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 f8e2 	bl	800dec6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dd02:	e023      	b.n	800dd4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b02      	cmp	r3, #2
 800dd0e:	dc02      	bgt.n	800dd16 <USBD_GetConfig+0x2e>
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	dc03      	bgt.n	800dd1c <USBD_GetConfig+0x34>
 800dd14:	e015      	b.n	800dd42 <USBD_GetConfig+0x5a>
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d00b      	beq.n	800dd32 <USBD_GetConfig+0x4a>
 800dd1a:	e012      	b.n	800dd42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	3308      	adds	r3, #8
 800dd26:	2201      	movs	r2, #1
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 f93c 	bl	800dfa8 <USBD_CtlSendData>
        break;
 800dd30:	e00c      	b.n	800dd4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	3304      	adds	r3, #4
 800dd36:	2201      	movs	r2, #1
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f934 	bl	800dfa8 <USBD_CtlSendData>
        break;
 800dd40:	e004      	b.n	800dd4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dd42:	6839      	ldr	r1, [r7, #0]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 f8be 	bl	800dec6 <USBD_CtlError>
        break;
 800dd4a:	bf00      	nop
}
 800dd4c:	bf00      	nop
 800dd4e:	3708      	adds	r7, #8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	3b01      	subs	r3, #1
 800dd68:	2b02      	cmp	r3, #2
 800dd6a:	d81e      	bhi.n	800ddaa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	88db      	ldrh	r3, [r3, #6]
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d004      	beq.n	800dd7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f8a5 	bl	800dec6 <USBD_CtlError>
        break;
 800dd7c:	e01a      	b.n	800ddb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2201      	movs	r2, #1
 800dd82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d005      	beq.n	800dd9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	f043 0202 	orr.w	r2, r3, #2
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	330c      	adds	r3, #12
 800dd9e:	2202      	movs	r2, #2
 800dda0:	4619      	mov	r1, r3
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f900 	bl	800dfa8 <USBD_CtlSendData>
      break;
 800dda8:	e004      	b.n	800ddb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ddaa:	6839      	ldr	r1, [r7, #0]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 f88a 	bl	800dec6 <USBD_CtlError>
      break;
 800ddb2:	bf00      	nop
  }
}
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b082      	sub	sp, #8
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	885b      	ldrh	r3, [r3, #2]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d107      	bne.n	800ddde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f000 f940 	bl	800e05c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dddc:	e013      	b.n	800de06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	885b      	ldrh	r3, [r3, #2]
 800dde2:	2b02      	cmp	r3, #2
 800dde4:	d10b      	bne.n	800ddfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	889b      	ldrh	r3, [r3, #4]
 800ddea:	0a1b      	lsrs	r3, r3, #8
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	b2da      	uxtb	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 f930 	bl	800e05c <USBD_CtlSendStatus>
}
 800ddfc:	e003      	b.n	800de06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 f860 	bl	800dec6 <USBD_CtlError>
}
 800de06:	bf00      	nop
 800de08:	3708      	adds	r7, #8
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b082      	sub	sp, #8
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
 800de16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	3b01      	subs	r3, #1
 800de22:	2b02      	cmp	r3, #2
 800de24:	d80b      	bhi.n	800de3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	885b      	ldrh	r3, [r3, #2]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d10c      	bne.n	800de48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 f910 	bl	800e05c <USBD_CtlSendStatus>
      }
      break;
 800de3c:	e004      	b.n	800de48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800de3e:	6839      	ldr	r1, [r7, #0]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 f840 	bl	800dec6 <USBD_CtlError>
      break;
 800de46:	e000      	b.n	800de4a <USBD_ClrFeature+0x3c>
      break;
 800de48:	bf00      	nop
  }
}
 800de4a:	bf00      	nop
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b084      	sub	sp, #16
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
 800de5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	781a      	ldrb	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	3301      	adds	r3, #1
 800de6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	781a      	ldrb	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3301      	adds	r3, #1
 800de7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f7ff fa17 	bl	800d2b0 <SWAPBYTE>
 800de82:	4603      	mov	r3, r0
 800de84:	461a      	mov	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3301      	adds	r3, #1
 800de8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3301      	adds	r3, #1
 800de94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7ff fa0a 	bl	800d2b0 <SWAPBYTE>
 800de9c:	4603      	mov	r3, r0
 800de9e:	461a      	mov	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3301      	adds	r3, #1
 800dea8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3301      	adds	r3, #1
 800deae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f7ff f9fd 	bl	800d2b0 <SWAPBYTE>
 800deb6:	4603      	mov	r3, r0
 800deb8:	461a      	mov	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	80da      	strh	r2, [r3, #6]
}
 800debe:	bf00      	nop
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b082      	sub	sp, #8
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
 800dece:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ded0:	2180      	movs	r1, #128	; 0x80
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 fda6 	bl	800ea24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ded8:	2100      	movs	r1, #0
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fda2 	bl	800ea24 <USBD_LL_StallEP>
}
 800dee0:	bf00      	nop
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800def4:	2300      	movs	r3, #0
 800def6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d036      	beq.n	800df6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800df02:	6938      	ldr	r0, [r7, #16]
 800df04:	f000 f836 	bl	800df74 <USBD_GetLen>
 800df08:	4603      	mov	r3, r0
 800df0a:	3301      	adds	r3, #1
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	005b      	lsls	r3, r3, #1
 800df10:	b29a      	uxth	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800df16:	7dfb      	ldrb	r3, [r7, #23]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	4413      	add	r3, r2
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	7812      	ldrb	r2, [r2, #0]
 800df20:	701a      	strb	r2, [r3, #0]
  idx++;
 800df22:	7dfb      	ldrb	r3, [r7, #23]
 800df24:	3301      	adds	r3, #1
 800df26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800df28:	7dfb      	ldrb	r3, [r7, #23]
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	4413      	add	r3, r2
 800df2e:	2203      	movs	r2, #3
 800df30:	701a      	strb	r2, [r3, #0]
  idx++;
 800df32:	7dfb      	ldrb	r3, [r7, #23]
 800df34:	3301      	adds	r3, #1
 800df36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800df38:	e013      	b.n	800df62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
 800df3c:	68ba      	ldr	r2, [r7, #8]
 800df3e:	4413      	add	r3, r2
 800df40:	693a      	ldr	r2, [r7, #16]
 800df42:	7812      	ldrb	r2, [r2, #0]
 800df44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	3301      	adds	r3, #1
 800df4a:	613b      	str	r3, [r7, #16]
    idx++;
 800df4c:	7dfb      	ldrb	r3, [r7, #23]
 800df4e:	3301      	adds	r3, #1
 800df50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800df52:	7dfb      	ldrb	r3, [r7, #23]
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	4413      	add	r3, r2
 800df58:	2200      	movs	r2, #0
 800df5a:	701a      	strb	r2, [r3, #0]
    idx++;
 800df5c:	7dfb      	ldrb	r3, [r7, #23]
 800df5e:	3301      	adds	r3, #1
 800df60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1e7      	bne.n	800df3a <USBD_GetString+0x52>
 800df6a:	e000      	b.n	800df6e <USBD_GetString+0x86>
    return;
 800df6c:	bf00      	nop
  }
}
 800df6e:	3718      	adds	r7, #24
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df7c:	2300      	movs	r3, #0
 800df7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df84:	e005      	b.n	800df92 <USBD_GetLen+0x1e>
  {
    len++;
 800df86:	7bfb      	ldrb	r3, [r7, #15]
 800df88:	3301      	adds	r3, #1
 800df8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	3301      	adds	r3, #1
 800df90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d1f5      	bne.n	800df86 <USBD_GetLen+0x12>
  }

  return len;
 800df9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2202      	movs	r2, #2
 800dfb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	2100      	movs	r1, #0
 800dfce:	68f8      	ldr	r0, [r7, #12]
 800dfd0:	f000 fdf6 	bl	800ebc0 <USBD_LL_Transmit>

  return USBD_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b084      	sub	sp, #16
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	60b9      	str	r1, [r7, #8]
 800dfe8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	2100      	movs	r1, #0
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f000 fde5 	bl	800ebc0 <USBD_LL_Transmit>

  return USBD_OK;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3710      	adds	r7, #16
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2203      	movs	r2, #3
 800e010:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	2100      	movs	r1, #0
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f000 fe00 	bl	800ec30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b084      	sub	sp, #16
 800e03e:	af00      	add	r7, sp, #0
 800e040:	60f8      	str	r0, [r7, #12]
 800e042:	60b9      	str	r1, [r7, #8]
 800e044:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	2100      	movs	r1, #0
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f000 fdef 	bl	800ec30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2204      	movs	r2, #4
 800e068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e06c:	2300      	movs	r3, #0
 800e06e:	2200      	movs	r2, #0
 800e070:	2100      	movs	r1, #0
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 fda4 	bl	800ebc0 <USBD_LL_Transmit>

  return USBD_OK;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b082      	sub	sp, #8
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2205      	movs	r2, #5
 800e08e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e092:	2300      	movs	r3, #0
 800e094:	2200      	movs	r2, #0
 800e096:	2100      	movs	r1, #0
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fdc9 	bl	800ec30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b087      	sub	sp, #28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	4613      	mov	r3, r2
 800e0b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e0be:	4b1f      	ldr	r3, [pc, #124]	; (800e13c <FATFS_LinkDriverEx+0x94>)
 800e0c0:	7a5b      	ldrb	r3, [r3, #9]
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d131      	bne.n	800e12c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e0c8:	4b1c      	ldr	r3, [pc, #112]	; (800e13c <FATFS_LinkDriverEx+0x94>)
 800e0ca:	7a5b      	ldrb	r3, [r3, #9]
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	4b1a      	ldr	r3, [pc, #104]	; (800e13c <FATFS_LinkDriverEx+0x94>)
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e0d6:	4b19      	ldr	r3, [pc, #100]	; (800e13c <FATFS_LinkDriverEx+0x94>)
 800e0d8:	7a5b      	ldrb	r3, [r3, #9]
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	4a17      	ldr	r2, [pc, #92]	; (800e13c <FATFS_LinkDriverEx+0x94>)
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e0e6:	4b15      	ldr	r3, [pc, #84]	; (800e13c <FATFS_LinkDriverEx+0x94>)
 800e0e8:	7a5b      	ldrb	r3, [r3, #9]
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	4b13      	ldr	r3, [pc, #76]	; (800e13c <FATFS_LinkDriverEx+0x94>)
 800e0f0:	4413      	add	r3, r2
 800e0f2:	79fa      	ldrb	r2, [r7, #7]
 800e0f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e0f6:	4b11      	ldr	r3, [pc, #68]	; (800e13c <FATFS_LinkDriverEx+0x94>)
 800e0f8:	7a5b      	ldrb	r3, [r3, #9]
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	1c5a      	adds	r2, r3, #1
 800e0fe:	b2d1      	uxtb	r1, r2
 800e100:	4a0e      	ldr	r2, [pc, #56]	; (800e13c <FATFS_LinkDriverEx+0x94>)
 800e102:	7251      	strb	r1, [r2, #9]
 800e104:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e106:	7dbb      	ldrb	r3, [r7, #22]
 800e108:	3330      	adds	r3, #48	; 0x30
 800e10a:	b2da      	uxtb	r2, r3
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	3301      	adds	r3, #1
 800e114:	223a      	movs	r2, #58	; 0x3a
 800e116:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	3302      	adds	r3, #2
 800e11c:	222f      	movs	r2, #47	; 0x2f
 800e11e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	3303      	adds	r3, #3
 800e124:	2200      	movs	r2, #0
 800e126:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e128:	2300      	movs	r3, #0
 800e12a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e12c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e12e:	4618      	mov	r0, r3
 800e130:	371c      	adds	r7, #28
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	20001e24 	.word	0x20001e24

0800e140 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e14a:	2200      	movs	r2, #0
 800e14c:	6839      	ldr	r1, [r7, #0]
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7ff ffaa 	bl	800e0a8 <FATFS_LinkDriverEx>
 800e154:	4603      	mov	r3, r0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e164:	2200      	movs	r2, #0
 800e166:	4912      	ldr	r1, [pc, #72]	; (800e1b0 <MX_USB_DEVICE_Init+0x50>)
 800e168:	4812      	ldr	r0, [pc, #72]	; (800e1b4 <MX_USB_DEVICE_Init+0x54>)
 800e16a:	f7fe fc7b 	bl	800ca64 <USBD_Init>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d001      	beq.n	800e178 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e174:	f7f3 f852 	bl	800121c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e178:	490f      	ldr	r1, [pc, #60]	; (800e1b8 <MX_USB_DEVICE_Init+0x58>)
 800e17a:	480e      	ldr	r0, [pc, #56]	; (800e1b4 <MX_USB_DEVICE_Init+0x54>)
 800e17c:	f7fe fca2 	bl	800cac4 <USBD_RegisterClass>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d001      	beq.n	800e18a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e186:	f7f3 f849 	bl	800121c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e18a:	490c      	ldr	r1, [pc, #48]	; (800e1bc <MX_USB_DEVICE_Init+0x5c>)
 800e18c:	4809      	ldr	r0, [pc, #36]	; (800e1b4 <MX_USB_DEVICE_Init+0x54>)
 800e18e:	f7fe fbd9 	bl	800c944 <USBD_CDC_RegisterInterface>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e198:	f7f3 f840 	bl	800121c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e19c:	4805      	ldr	r0, [pc, #20]	; (800e1b4 <MX_USB_DEVICE_Init+0x54>)
 800e19e:	f7fe fcc7 	bl	800cb30 <USBD_Start>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e1a8:	f7f3 f838 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e1ac:	bf00      	nop
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	200000ac 	.word	0x200000ac
 800e1b4:	20001e30 	.word	0x20001e30
 800e1b8:	20000018 	.word	0x20000018
 800e1bc:	20000098 	.word	0x20000098

0800e1c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	4905      	ldr	r1, [pc, #20]	; (800e1dc <CDC_Init_FS+0x1c>)
 800e1c8:	4805      	ldr	r0, [pc, #20]	; (800e1e0 <CDC_Init_FS+0x20>)
 800e1ca:	f7fe fbd5 	bl	800c978 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e1ce:	4905      	ldr	r1, [pc, #20]	; (800e1e4 <CDC_Init_FS+0x24>)
 800e1d0:	4803      	ldr	r0, [pc, #12]	; (800e1e0 <CDC_Init_FS+0x20>)
 800e1d2:	f7fe fbf3 	bl	800c9bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e1d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	2000290c 	.word	0x2000290c
 800e1e0:	20001e30 	.word	0x20001e30
 800e1e4:	2000210c 	.word	0x2000210c

0800e1e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e1ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	4603      	mov	r3, r0
 800e200:	6039      	str	r1, [r7, #0]
 800e202:	71fb      	strb	r3, [r7, #7]
 800e204:	4613      	mov	r3, r2
 800e206:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	2b23      	cmp	r3, #35	; 0x23
 800e20c:	d84a      	bhi.n	800e2a4 <CDC_Control_FS+0xac>
 800e20e:	a201      	add	r2, pc, #4	; (adr r2, 800e214 <CDC_Control_FS+0x1c>)
 800e210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e214:	0800e2a5 	.word	0x0800e2a5
 800e218:	0800e2a5 	.word	0x0800e2a5
 800e21c:	0800e2a5 	.word	0x0800e2a5
 800e220:	0800e2a5 	.word	0x0800e2a5
 800e224:	0800e2a5 	.word	0x0800e2a5
 800e228:	0800e2a5 	.word	0x0800e2a5
 800e22c:	0800e2a5 	.word	0x0800e2a5
 800e230:	0800e2a5 	.word	0x0800e2a5
 800e234:	0800e2a5 	.word	0x0800e2a5
 800e238:	0800e2a5 	.word	0x0800e2a5
 800e23c:	0800e2a5 	.word	0x0800e2a5
 800e240:	0800e2a5 	.word	0x0800e2a5
 800e244:	0800e2a5 	.word	0x0800e2a5
 800e248:	0800e2a5 	.word	0x0800e2a5
 800e24c:	0800e2a5 	.word	0x0800e2a5
 800e250:	0800e2a5 	.word	0x0800e2a5
 800e254:	0800e2a5 	.word	0x0800e2a5
 800e258:	0800e2a5 	.word	0x0800e2a5
 800e25c:	0800e2a5 	.word	0x0800e2a5
 800e260:	0800e2a5 	.word	0x0800e2a5
 800e264:	0800e2a5 	.word	0x0800e2a5
 800e268:	0800e2a5 	.word	0x0800e2a5
 800e26c:	0800e2a5 	.word	0x0800e2a5
 800e270:	0800e2a5 	.word	0x0800e2a5
 800e274:	0800e2a5 	.word	0x0800e2a5
 800e278:	0800e2a5 	.word	0x0800e2a5
 800e27c:	0800e2a5 	.word	0x0800e2a5
 800e280:	0800e2a5 	.word	0x0800e2a5
 800e284:	0800e2a5 	.word	0x0800e2a5
 800e288:	0800e2a5 	.word	0x0800e2a5
 800e28c:	0800e2a5 	.word	0x0800e2a5
 800e290:	0800e2a5 	.word	0x0800e2a5
 800e294:	0800e2a5 	.word	0x0800e2a5
 800e298:	0800e2a5 	.word	0x0800e2a5
 800e29c:	0800e2a5 	.word	0x0800e2a5
 800e2a0:	0800e2a5 	.word	0x0800e2a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e2a4:	bf00      	nop
  }

  return (USBD_OK);
 800e2a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e2be:	6879      	ldr	r1, [r7, #4]
 800e2c0:	480f      	ldr	r0, [pc, #60]	; (800e300 <CDC_Receive_FS+0x4c>)
 800e2c2:	f7fe fb7b 	bl	800c9bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e2c6:	480e      	ldr	r0, [pc, #56]	; (800e300 <CDC_Receive_FS+0x4c>)
 800e2c8:	f7fe fb96 	bl	800c9f8 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	73fb      	strb	r3, [r7, #15]
  memset(inBuff, '\0', 64);
 800e2d2:	2240      	movs	r2, #64	; 0x40
 800e2d4:	2100      	movs	r1, #0
 800e2d6:	480b      	ldr	r0, [pc, #44]	; (800e304 <CDC_Receive_FS+0x50>)
 800e2d8:	f001 fceb 	bl	800fcb2 <memset>
  memcpy(inBuff, Buf, len);
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	6879      	ldr	r1, [r7, #4]
 800e2e2:	4808      	ldr	r0, [pc, #32]	; (800e304 <CDC_Receive_FS+0x50>)
 800e2e4:	f001 fd64 	bl	800fdb0 <memcpy>
  memset(Buf, '\0', len);
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f001 fcdf 	bl	800fcb2 <memset>
  return (USBD_OK);
 800e2f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	20001e30 	.word	0x20001e30
 800e304:	2000047c 	.word	0x2000047c

0800e308 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e308:	b480      	push	{r7}
 800e30a:	b087      	sub	sp, #28
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	4613      	mov	r3, r2
 800e314:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	371c      	adds	r7, #28
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
	...

0800e32c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b083      	sub	sp, #12
 800e330:	af00      	add	r7, sp, #0
 800e332:	4603      	mov	r3, r0
 800e334:	6039      	str	r1, [r7, #0]
 800e336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	2212      	movs	r2, #18
 800e33c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e33e:	4b03      	ldr	r3, [pc, #12]	; (800e34c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e340:	4618      	mov	r0, r3
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr
 800e34c:	200000cc 	.word	0x200000cc

0800e350 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	4603      	mov	r3, r0
 800e358:	6039      	str	r1, [r7, #0]
 800e35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	2204      	movs	r2, #4
 800e360:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e362:	4b03      	ldr	r3, [pc, #12]	; (800e370 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e364:	4618      	mov	r0, r3
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr
 800e370:	200000ec 	.word	0x200000ec

0800e374 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	4603      	mov	r3, r0
 800e37c:	6039      	str	r1, [r7, #0]
 800e37e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e380:	79fb      	ldrb	r3, [r7, #7]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d105      	bne.n	800e392 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e386:	683a      	ldr	r2, [r7, #0]
 800e388:	4907      	ldr	r1, [pc, #28]	; (800e3a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e38a:	4808      	ldr	r0, [pc, #32]	; (800e3ac <USBD_FS_ProductStrDescriptor+0x38>)
 800e38c:	f7ff fdac 	bl	800dee8 <USBD_GetString>
 800e390:	e004      	b.n	800e39c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	4904      	ldr	r1, [pc, #16]	; (800e3a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e396:	4805      	ldr	r0, [pc, #20]	; (800e3ac <USBD_FS_ProductStrDescriptor+0x38>)
 800e398:	f7ff fda6 	bl	800dee8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e39c:	4b02      	ldr	r3, [pc, #8]	; (800e3a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3708      	adds	r7, #8
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	2000310c 	.word	0x2000310c
 800e3ac:	08013558 	.word	0x08013558

0800e3b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	6039      	str	r1, [r7, #0]
 800e3ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e3bc:	683a      	ldr	r2, [r7, #0]
 800e3be:	4904      	ldr	r1, [pc, #16]	; (800e3d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e3c0:	4804      	ldr	r0, [pc, #16]	; (800e3d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e3c2:	f7ff fd91 	bl	800dee8 <USBD_GetString>
  return USBD_StrDesc;
 800e3c6:	4b02      	ldr	r3, [pc, #8]	; (800e3d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3708      	adds	r7, #8
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	2000310c 	.word	0x2000310c
 800e3d4:	08013568 	.word	0x08013568

0800e3d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	4603      	mov	r3, r0
 800e3e0:	6039      	str	r1, [r7, #0]
 800e3e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	221a      	movs	r2, #26
 800e3e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e3ea:	f000 f855 	bl	800e498 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e3ee:	4b02      	ldr	r3, [pc, #8]	; (800e3f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	200000f0 	.word	0x200000f0

0800e3fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	4603      	mov	r3, r0
 800e404:	6039      	str	r1, [r7, #0]
 800e406:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e408:	79fb      	ldrb	r3, [r7, #7]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d105      	bne.n	800e41a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	4907      	ldr	r1, [pc, #28]	; (800e430 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e412:	4808      	ldr	r0, [pc, #32]	; (800e434 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e414:	f7ff fd68 	bl	800dee8 <USBD_GetString>
 800e418:	e004      	b.n	800e424 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	4904      	ldr	r1, [pc, #16]	; (800e430 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e41e:	4805      	ldr	r0, [pc, #20]	; (800e434 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e420:	f7ff fd62 	bl	800dee8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e424:	4b02      	ldr	r3, [pc, #8]	; (800e430 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e426:	4618      	mov	r0, r3
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	2000310c 	.word	0x2000310c
 800e434:	0801357c 	.word	0x0801357c

0800e438 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	4603      	mov	r3, r0
 800e440:	6039      	str	r1, [r7, #0]
 800e442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e444:	79fb      	ldrb	r3, [r7, #7]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d105      	bne.n	800e456 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	4907      	ldr	r1, [pc, #28]	; (800e46c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e44e:	4808      	ldr	r0, [pc, #32]	; (800e470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e450:	f7ff fd4a 	bl	800dee8 <USBD_GetString>
 800e454:	e004      	b.n	800e460 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	4904      	ldr	r1, [pc, #16]	; (800e46c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e45a:	4805      	ldr	r0, [pc, #20]	; (800e470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e45c:	f7ff fd44 	bl	800dee8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e460:	4b02      	ldr	r3, [pc, #8]	; (800e46c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e462:	4618      	mov	r0, r3
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	2000310c 	.word	0x2000310c
 800e470:	08013588 	.word	0x08013588

0800e474 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	4603      	mov	r3, r0
 800e47c:	6039      	str	r1, [r7, #0]
 800e47e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	220c      	movs	r2, #12
 800e484:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e486:	4b03      	ldr	r3, [pc, #12]	; (800e494 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e488:	4618      	mov	r0, r3
 800e48a:	370c      	adds	r7, #12
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr
 800e494:	200000e0 	.word	0x200000e0

0800e498 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e49e:	4b0f      	ldr	r3, [pc, #60]	; (800e4dc <Get_SerialNum+0x44>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e4a4:	4b0e      	ldr	r3, [pc, #56]	; (800e4e0 <Get_SerialNum+0x48>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e4aa:	4b0e      	ldr	r3, [pc, #56]	; (800e4e4 <Get_SerialNum+0x4c>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4413      	add	r3, r2
 800e4b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d009      	beq.n	800e4d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e4be:	2208      	movs	r2, #8
 800e4c0:	4909      	ldr	r1, [pc, #36]	; (800e4e8 <Get_SerialNum+0x50>)
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f000 f814 	bl	800e4f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e4c8:	2204      	movs	r2, #4
 800e4ca:	4908      	ldr	r1, [pc, #32]	; (800e4ec <Get_SerialNum+0x54>)
 800e4cc:	68b8      	ldr	r0, [r7, #8]
 800e4ce:	f000 f80f 	bl	800e4f0 <IntToUnicode>
  }
}
 800e4d2:	bf00      	nop
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	1fff7590 	.word	0x1fff7590
 800e4e0:	1fff7594 	.word	0x1fff7594
 800e4e4:	1fff7598 	.word	0x1fff7598
 800e4e8:	200000f2 	.word	0x200000f2
 800e4ec:	20000102 	.word	0x20000102

0800e4f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b087      	sub	sp, #28
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e4fe:	2300      	movs	r3, #0
 800e500:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e502:	2300      	movs	r3, #0
 800e504:	75fb      	strb	r3, [r7, #23]
 800e506:	e027      	b.n	800e558 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	0f1b      	lsrs	r3, r3, #28
 800e50c:	2b09      	cmp	r3, #9
 800e50e:	d80b      	bhi.n	800e528 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	0f1b      	lsrs	r3, r3, #28
 800e514:	b2da      	uxtb	r2, r3
 800e516:	7dfb      	ldrb	r3, [r7, #23]
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	4619      	mov	r1, r3
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	440b      	add	r3, r1
 800e520:	3230      	adds	r2, #48	; 0x30
 800e522:	b2d2      	uxtb	r2, r2
 800e524:	701a      	strb	r2, [r3, #0]
 800e526:	e00a      	b.n	800e53e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	0f1b      	lsrs	r3, r3, #28
 800e52c:	b2da      	uxtb	r2, r3
 800e52e:	7dfb      	ldrb	r3, [r7, #23]
 800e530:	005b      	lsls	r3, r3, #1
 800e532:	4619      	mov	r1, r3
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	440b      	add	r3, r1
 800e538:	3237      	adds	r2, #55	; 0x37
 800e53a:	b2d2      	uxtb	r2, r2
 800e53c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	011b      	lsls	r3, r3, #4
 800e542:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e544:	7dfb      	ldrb	r3, [r7, #23]
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	3301      	adds	r3, #1
 800e54a:	68ba      	ldr	r2, [r7, #8]
 800e54c:	4413      	add	r3, r2
 800e54e:	2200      	movs	r2, #0
 800e550:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e552:	7dfb      	ldrb	r3, [r7, #23]
 800e554:	3301      	adds	r3, #1
 800e556:	75fb      	strb	r3, [r7, #23]
 800e558:	7dfa      	ldrb	r2, [r7, #23]
 800e55a:	79fb      	ldrb	r3, [r7, #7]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d3d3      	bcc.n	800e508 <IntToUnicode+0x18>
  }
}
 800e560:	bf00      	nop
 800e562:	bf00      	nop
 800e564:	371c      	adds	r7, #28
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
	...

0800e570 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08a      	sub	sp, #40	; 0x28
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e578:	f107 0314 	add.w	r3, r7, #20
 800e57c:	2200      	movs	r2, #0
 800e57e:	601a      	str	r2, [r3, #0]
 800e580:	605a      	str	r2, [r3, #4]
 800e582:	609a      	str	r2, [r3, #8]
 800e584:	60da      	str	r2, [r3, #12]
 800e586:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e590:	d14e      	bne.n	800e630 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e592:	4b29      	ldr	r3, [pc, #164]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e596:	4a28      	ldr	r2, [pc, #160]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e598:	f043 0301 	orr.w	r3, r3, #1
 800e59c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e59e:	4b26      	ldr	r3, [pc, #152]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5a2:	f003 0301 	and.w	r3, r3, #1
 800e5a6:	613b      	str	r3, [r7, #16]
 800e5a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e5aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e5ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5b0:	2302      	movs	r3, #2
 800e5b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e5b8:	2303      	movs	r3, #3
 800e5ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e5bc:	230a      	movs	r3, #10
 800e5be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5c0:	f107 0314 	add.w	r3, r7, #20
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800e5ca:	f7f5 fad7 	bl	8003b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e5ce:	4b1a      	ldr	r3, [pc, #104]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5d2:	4a19      	ldr	r2, [pc, #100]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e5d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e5d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e5da:	4b17      	ldr	r3, [pc, #92]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e5dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e5e2:	60fb      	str	r3, [r7, #12]
 800e5e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e5e6:	4b14      	ldr	r3, [pc, #80]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d114      	bne.n	800e61c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e5f2:	4b11      	ldr	r3, [pc, #68]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5f6:	4a10      	ldr	r2, [pc, #64]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e5f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5fc:	6593      	str	r3, [r2, #88]	; 0x58
 800e5fe:	4b0e      	ldr	r3, [pc, #56]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e606:	60bb      	str	r3, [r7, #8]
 800e608:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800e60a:	f7f7 fcb5 	bl	8005f78 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e60e:	4b0a      	ldr	r3, [pc, #40]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e612:	4a09      	ldr	r2, [pc, #36]	; (800e638 <HAL_PCD_MspInit+0xc8>)
 800e614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e618:	6593      	str	r3, [r2, #88]	; 0x58
 800e61a:	e001      	b.n	800e620 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800e61c:	f7f7 fcac 	bl	8005f78 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e620:	2200      	movs	r2, #0
 800e622:	2100      	movs	r1, #0
 800e624:	2043      	movs	r0, #67	; 0x43
 800e626:	f7f5 f83a 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e62a:	2043      	movs	r0, #67	; 0x43
 800e62c:	f7f5 f853 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e630:	bf00      	nop
 800e632:	3728      	adds	r7, #40	; 0x28
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	40021000 	.word	0x40021000

0800e63c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e650:	4619      	mov	r1, r3
 800e652:	4610      	mov	r0, r2
 800e654:	f7fe fab9 	bl	800cbca <USBD_LL_SetupStage>
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	460b      	mov	r3, r1
 800e66a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e672:	78fa      	ldrb	r2, [r7, #3]
 800e674:	6879      	ldr	r1, [r7, #4]
 800e676:	4613      	mov	r3, r2
 800e678:	00db      	lsls	r3, r3, #3
 800e67a:	4413      	add	r3, r2
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	440b      	add	r3, r1
 800e680:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	78fb      	ldrb	r3, [r7, #3]
 800e688:	4619      	mov	r1, r3
 800e68a:	f7fe faf3 	bl	800cc74 <USBD_LL_DataOutStage>
}
 800e68e:	bf00      	nop
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b082      	sub	sp, #8
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
 800e69e:	460b      	mov	r3, r1
 800e6a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e6a8:	78fa      	ldrb	r2, [r7, #3]
 800e6aa:	6879      	ldr	r1, [r7, #4]
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	00db      	lsls	r3, r3, #3
 800e6b0:	4413      	add	r3, r2
 800e6b2:	009b      	lsls	r3, r3, #2
 800e6b4:	440b      	add	r3, r1
 800e6b6:	3348      	adds	r3, #72	; 0x48
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	78fb      	ldrb	r3, [r7, #3]
 800e6bc:	4619      	mov	r1, r3
 800e6be:	f7fe fb8c 	bl	800cdda <USBD_LL_DataInStage>
}
 800e6c2:	bf00      	nop
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b082      	sub	sp, #8
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7fe fcc6 	bl	800d06a <USBD_LL_SOF>
}
 800e6de:	bf00      	nop
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b084      	sub	sp, #16
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	691b      	ldr	r3, [r3, #16]
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d001      	beq.n	800e6fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e6fa:	f7f2 fd8f 	bl	800121c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e704:	7bfa      	ldrb	r2, [r7, #15]
 800e706:	4611      	mov	r1, r2
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fe fc6a 	bl	800cfe2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e714:	4618      	mov	r0, r3
 800e716:	f7fe fc12 	bl	800cf3e <USBD_LL_Reset>
}
 800e71a:	bf00      	nop
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
	...

0800e724 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	6812      	ldr	r2, [r2, #0]
 800e73a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e73e:	f043 0301 	orr.w	r3, r3, #1
 800e742:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fe fc59 	bl	800d002 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6a1b      	ldr	r3, [r3, #32]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d005      	beq.n	800e764 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e758:	4b04      	ldr	r3, [pc, #16]	; (800e76c <HAL_PCD_SuspendCallback+0x48>)
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	4a03      	ldr	r2, [pc, #12]	; (800e76c <HAL_PCD_SuspendCallback+0x48>)
 800e75e:	f043 0306 	orr.w	r3, r3, #6
 800e762:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e764:	bf00      	nop
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	e000ed00 	.word	0xe000ed00

0800e770 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	6812      	ldr	r2, [r2, #0]
 800e786:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e78a:	f023 0301 	bic.w	r3, r3, #1
 800e78e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a1b      	ldr	r3, [r3, #32]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d007      	beq.n	800e7a8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e798:	4b08      	ldr	r3, [pc, #32]	; (800e7bc <HAL_PCD_ResumeCallback+0x4c>)
 800e79a:	691b      	ldr	r3, [r3, #16]
 800e79c:	4a07      	ldr	r2, [pc, #28]	; (800e7bc <HAL_PCD_ResumeCallback+0x4c>)
 800e79e:	f023 0306 	bic.w	r3, r3, #6
 800e7a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e7a4:	f000 faf6 	bl	800ed94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fe fc43 	bl	800d03a <USBD_LL_Resume>
}
 800e7b4:	bf00      	nop
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	e000ed00 	.word	0xe000ed00

0800e7c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7d2:	78fa      	ldrb	r2, [r7, #3]
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fe fc99 	bl	800d10e <USBD_LL_IsoOUTIncomplete>
}
 800e7dc:	bf00      	nop
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7f6:	78fa      	ldrb	r2, [r7, #3]
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fe fc55 	bl	800d0aa <USBD_LL_IsoINIncomplete>
}
 800e800:	bf00      	nop
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e816:	4618      	mov	r0, r3
 800e818:	f7fe fcab 	bl	800d172 <USBD_LL_DevConnected>
}
 800e81c:	bf00      	nop
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e832:	4618      	mov	r0, r3
 800e834:	f7fe fca8 	bl	800d188 <USBD_LL_DevDisconnected>
}
 800e838:	bf00      	nop
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d13c      	bne.n	800e8ca <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e850:	4a20      	ldr	r2, [pc, #128]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4a1e      	ldr	r2, [pc, #120]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e85c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e860:	4b1c      	ldr	r3, [pc, #112]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e868:	4b1a      	ldr	r3, [pc, #104]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e86a:	2206      	movs	r2, #6
 800e86c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e86e:	4b19      	ldr	r3, [pc, #100]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e870:	2202      	movs	r2, #2
 800e872:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e874:	4b17      	ldr	r3, [pc, #92]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e876:	2202      	movs	r2, #2
 800e878:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e87a:	4b16      	ldr	r3, [pc, #88]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e87c:	2200      	movs	r2, #0
 800e87e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e880:	4b14      	ldr	r3, [pc, #80]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e882:	2200      	movs	r2, #0
 800e884:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e886:	4b13      	ldr	r3, [pc, #76]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e888:	2200      	movs	r2, #0
 800e88a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e88c:	4b11      	ldr	r3, [pc, #68]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e88e:	2200      	movs	r2, #0
 800e890:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e892:	4b10      	ldr	r3, [pc, #64]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e894:	2200      	movs	r2, #0
 800e896:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e898:	4b0e      	ldr	r3, [pc, #56]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e89e:	480d      	ldr	r0, [pc, #52]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e8a0:	f7f6 f95f 	bl	8004b62 <HAL_PCD_Init>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e8aa:	f7f2 fcb7 	bl	800121c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e8ae:	2180      	movs	r1, #128	; 0x80
 800e8b0:	4808      	ldr	r0, [pc, #32]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e8b2:	f7f7 fac8 	bl	8005e46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e8b6:	2240      	movs	r2, #64	; 0x40
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	4806      	ldr	r0, [pc, #24]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e8bc:	f7f7 fa7c 	bl	8005db8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e8c0:	2280      	movs	r2, #128	; 0x80
 800e8c2:	2101      	movs	r1, #1
 800e8c4:	4803      	ldr	r0, [pc, #12]	; (800e8d4 <USBD_LL_Init+0x94>)
 800e8c6:	f7f7 fa77 	bl	8005db8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e8ca:	2300      	movs	r3, #0
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	2000330c 	.word	0x2000330c

0800e8d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7f6 fa5b 	bl	8004daa <HAL_PCD_Start>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e8f8:	7bbb      	ldrb	r3, [r7, #14]
 800e8fa:	2b03      	cmp	r3, #3
 800e8fc:	d816      	bhi.n	800e92c <USBD_LL_Start+0x54>
 800e8fe:	a201      	add	r2, pc, #4	; (adr r2, 800e904 <USBD_LL_Start+0x2c>)
 800e900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e904:	0800e915 	.word	0x0800e915
 800e908:	0800e91b 	.word	0x0800e91b
 800e90c:	0800e921 	.word	0x0800e921
 800e910:	0800e927 	.word	0x0800e927
    case HAL_OK :
      usb_status = USBD_OK;
 800e914:	2300      	movs	r3, #0
 800e916:	73fb      	strb	r3, [r7, #15]
    break;
 800e918:	e00b      	b.n	800e932 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e91a:	2303      	movs	r3, #3
 800e91c:	73fb      	strb	r3, [r7, #15]
    break;
 800e91e:	e008      	b.n	800e932 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e920:	2301      	movs	r3, #1
 800e922:	73fb      	strb	r3, [r7, #15]
    break;
 800e924:	e005      	b.n	800e932 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e926:	2303      	movs	r3, #3
 800e928:	73fb      	strb	r3, [r7, #15]
    break;
 800e92a:	e002      	b.n	800e932 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e92c:	2303      	movs	r3, #3
 800e92e:	73fb      	strb	r3, [r7, #15]
    break;
 800e930:	bf00      	nop
  }
  return usb_status;
 800e932:	7bfb      	ldrb	r3, [r7, #15]
}
 800e934:	4618      	mov	r0, r3
 800e936:	3710      	adds	r7, #16
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	4608      	mov	r0, r1
 800e946:	4611      	mov	r1, r2
 800e948:	461a      	mov	r2, r3
 800e94a:	4603      	mov	r3, r0
 800e94c:	70fb      	strb	r3, [r7, #3]
 800e94e:	460b      	mov	r3, r1
 800e950:	70bb      	strb	r3, [r7, #2]
 800e952:	4613      	mov	r3, r2
 800e954:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e95a:	2300      	movs	r3, #0
 800e95c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e964:	78bb      	ldrb	r3, [r7, #2]
 800e966:	883a      	ldrh	r2, [r7, #0]
 800e968:	78f9      	ldrb	r1, [r7, #3]
 800e96a:	f7f6 ff05 	bl	8005778 <HAL_PCD_EP_Open>
 800e96e:	4603      	mov	r3, r0
 800e970:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e972:	7bbb      	ldrb	r3, [r7, #14]
 800e974:	2b03      	cmp	r3, #3
 800e976:	d817      	bhi.n	800e9a8 <USBD_LL_OpenEP+0x6c>
 800e978:	a201      	add	r2, pc, #4	; (adr r2, 800e980 <USBD_LL_OpenEP+0x44>)
 800e97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e97e:	bf00      	nop
 800e980:	0800e991 	.word	0x0800e991
 800e984:	0800e997 	.word	0x0800e997
 800e988:	0800e99d 	.word	0x0800e99d
 800e98c:	0800e9a3 	.word	0x0800e9a3
    case HAL_OK :
      usb_status = USBD_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	73fb      	strb	r3, [r7, #15]
    break;
 800e994:	e00b      	b.n	800e9ae <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e996:	2303      	movs	r3, #3
 800e998:	73fb      	strb	r3, [r7, #15]
    break;
 800e99a:	e008      	b.n	800e9ae <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e99c:	2301      	movs	r3, #1
 800e99e:	73fb      	strb	r3, [r7, #15]
    break;
 800e9a0:	e005      	b.n	800e9ae <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e9a2:	2303      	movs	r3, #3
 800e9a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e9a6:	e002      	b.n	800e9ae <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ac:	bf00      	nop
  }
  return usb_status;
 800e9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3710      	adds	r7, #16
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9d2:	78fa      	ldrb	r2, [r7, #3]
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7f6 ff36 	bl	8005848 <HAL_PCD_EP_Close>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e9e0:	7bbb      	ldrb	r3, [r7, #14]
 800e9e2:	2b03      	cmp	r3, #3
 800e9e4:	d816      	bhi.n	800ea14 <USBD_LL_CloseEP+0x5c>
 800e9e6:	a201      	add	r2, pc, #4	; (adr r2, 800e9ec <USBD_LL_CloseEP+0x34>)
 800e9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ec:	0800e9fd 	.word	0x0800e9fd
 800e9f0:	0800ea03 	.word	0x0800ea03
 800e9f4:	0800ea09 	.word	0x0800ea09
 800e9f8:	0800ea0f 	.word	0x0800ea0f
    case HAL_OK :
      usb_status = USBD_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	73fb      	strb	r3, [r7, #15]
    break;
 800ea00:	e00b      	b.n	800ea1a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea02:	2303      	movs	r3, #3
 800ea04:	73fb      	strb	r3, [r7, #15]
    break;
 800ea06:	e008      	b.n	800ea1a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea0c:	e005      	b.n	800ea1a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea0e:	2303      	movs	r3, #3
 800ea10:	73fb      	strb	r3, [r7, #15]
    break;
 800ea12:	e002      	b.n	800ea1a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ea14:	2303      	movs	r3, #3
 800ea16:	73fb      	strb	r3, [r7, #15]
    break;
 800ea18:	bf00      	nop
  }
  return usb_status;
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea30:	2300      	movs	r3, #0
 800ea32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea34:	2300      	movs	r3, #0
 800ea36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea3e:	78fa      	ldrb	r2, [r7, #3]
 800ea40:	4611      	mov	r1, r2
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7f6 ffc5 	bl	80059d2 <HAL_PCD_EP_SetStall>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ea4c:	7bbb      	ldrb	r3, [r7, #14]
 800ea4e:	2b03      	cmp	r3, #3
 800ea50:	d816      	bhi.n	800ea80 <USBD_LL_StallEP+0x5c>
 800ea52:	a201      	add	r2, pc, #4	; (adr r2, 800ea58 <USBD_LL_StallEP+0x34>)
 800ea54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea58:	0800ea69 	.word	0x0800ea69
 800ea5c:	0800ea6f 	.word	0x0800ea6f
 800ea60:	0800ea75 	.word	0x0800ea75
 800ea64:	0800ea7b 	.word	0x0800ea7b
    case HAL_OK :
      usb_status = USBD_OK;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea6c:	e00b      	b.n	800ea86 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea6e:	2303      	movs	r3, #3
 800ea70:	73fb      	strb	r3, [r7, #15]
    break;
 800ea72:	e008      	b.n	800ea86 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea74:	2301      	movs	r3, #1
 800ea76:	73fb      	strb	r3, [r7, #15]
    break;
 800ea78:	e005      	b.n	800ea86 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea7a:	2303      	movs	r3, #3
 800ea7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea7e:	e002      	b.n	800ea86 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ea80:	2303      	movs	r3, #3
 800ea82:	73fb      	strb	r3, [r7, #15]
    break;
 800ea84:	bf00      	nop
  }
  return usb_status;
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eaaa:	78fa      	ldrb	r2, [r7, #3]
 800eaac:	4611      	mov	r1, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7f6 fff1 	bl	8005a96 <HAL_PCD_EP_ClrStall>
 800eab4:	4603      	mov	r3, r0
 800eab6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eab8:	7bbb      	ldrb	r3, [r7, #14]
 800eaba:	2b03      	cmp	r3, #3
 800eabc:	d816      	bhi.n	800eaec <USBD_LL_ClearStallEP+0x5c>
 800eabe:	a201      	add	r2, pc, #4	; (adr r2, 800eac4 <USBD_LL_ClearStallEP+0x34>)
 800eac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac4:	0800ead5 	.word	0x0800ead5
 800eac8:	0800eadb 	.word	0x0800eadb
 800eacc:	0800eae1 	.word	0x0800eae1
 800ead0:	0800eae7 	.word	0x0800eae7
    case HAL_OK :
      usb_status = USBD_OK;
 800ead4:	2300      	movs	r3, #0
 800ead6:	73fb      	strb	r3, [r7, #15]
    break;
 800ead8:	e00b      	b.n	800eaf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eada:	2303      	movs	r3, #3
 800eadc:	73fb      	strb	r3, [r7, #15]
    break;
 800eade:	e008      	b.n	800eaf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eae0:	2301      	movs	r3, #1
 800eae2:	73fb      	strb	r3, [r7, #15]
    break;
 800eae4:	e005      	b.n	800eaf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eae6:	2303      	movs	r3, #3
 800eae8:	73fb      	strb	r3, [r7, #15]
    break;
 800eaea:	e002      	b.n	800eaf2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800eaec:	2303      	movs	r3, #3
 800eaee:	73fb      	strb	r3, [r7, #15]
    break;
 800eaf0:	bf00      	nop
  }
  return usb_status;
 800eaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	460b      	mov	r3, r1
 800eb06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eb10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	da0b      	bge.n	800eb30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb18:	78fb      	ldrb	r3, [r7, #3]
 800eb1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb1e:	68f9      	ldr	r1, [r7, #12]
 800eb20:	4613      	mov	r3, r2
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	4413      	add	r3, r2
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	440b      	add	r3, r1
 800eb2a:	333e      	adds	r3, #62	; 0x3e
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	e00b      	b.n	800eb48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb30:	78fb      	ldrb	r3, [r7, #3]
 800eb32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb36:	68f9      	ldr	r1, [r7, #12]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	00db      	lsls	r3, r3, #3
 800eb3c:	4413      	add	r3, r2
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	440b      	add	r3, r1
 800eb42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eb46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3714      	adds	r7, #20
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	460b      	mov	r3, r1
 800eb5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb60:	2300      	movs	r3, #0
 800eb62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb6e:	78fa      	ldrb	r2, [r7, #3]
 800eb70:	4611      	mov	r1, r2
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7f6 fddb 	bl	800572e <HAL_PCD_SetAddress>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800eb7c:	7bbb      	ldrb	r3, [r7, #14]
 800eb7e:	2b03      	cmp	r3, #3
 800eb80:	d816      	bhi.n	800ebb0 <USBD_LL_SetUSBAddress+0x5c>
 800eb82:	a201      	add	r2, pc, #4	; (adr r2, 800eb88 <USBD_LL_SetUSBAddress+0x34>)
 800eb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb88:	0800eb99 	.word	0x0800eb99
 800eb8c:	0800eb9f 	.word	0x0800eb9f
 800eb90:	0800eba5 	.word	0x0800eba5
 800eb94:	0800ebab 	.word	0x0800ebab
    case HAL_OK :
      usb_status = USBD_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73fb      	strb	r3, [r7, #15]
    break;
 800eb9c:	e00b      	b.n	800ebb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eb9e:	2303      	movs	r3, #3
 800eba0:	73fb      	strb	r3, [r7, #15]
    break;
 800eba2:	e008      	b.n	800ebb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eba4:	2301      	movs	r3, #1
 800eba6:	73fb      	strb	r3, [r7, #15]
    break;
 800eba8:	e005      	b.n	800ebb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebaa:	2303      	movs	r3, #3
 800ebac:	73fb      	strb	r3, [r7, #15]
    break;
 800ebae:	e002      	b.n	800ebb6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ebb0:	2303      	movs	r3, #3
 800ebb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb4:	bf00      	nop
  }
  return usb_status;
 800ebb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b086      	sub	sp, #24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	607a      	str	r2, [r7, #4]
 800ebca:	603b      	str	r3, [r7, #0]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebde:	7af9      	ldrb	r1, [r7, #11]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	f7f6 fec4 	bl	8005970 <HAL_PCD_EP_Transmit>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ebec:	7dbb      	ldrb	r3, [r7, #22]
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d816      	bhi.n	800ec20 <USBD_LL_Transmit+0x60>
 800ebf2:	a201      	add	r2, pc, #4	; (adr r2, 800ebf8 <USBD_LL_Transmit+0x38>)
 800ebf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf8:	0800ec09 	.word	0x0800ec09
 800ebfc:	0800ec0f 	.word	0x0800ec0f
 800ec00:	0800ec15 	.word	0x0800ec15
 800ec04:	0800ec1b 	.word	0x0800ec1b
    case HAL_OK :
      usb_status = USBD_OK;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	75fb      	strb	r3, [r7, #23]
    break;
 800ec0c:	e00b      	b.n	800ec26 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	75fb      	strb	r3, [r7, #23]
    break;
 800ec12:	e008      	b.n	800ec26 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec14:	2301      	movs	r3, #1
 800ec16:	75fb      	strb	r3, [r7, #23]
    break;
 800ec18:	e005      	b.n	800ec26 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	75fb      	strb	r3, [r7, #23]
    break;
 800ec1e:	e002      	b.n	800ec26 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ec20:	2303      	movs	r3, #3
 800ec22:	75fb      	strb	r3, [r7, #23]
    break;
 800ec24:	bf00      	nop
  }
  return usb_status;
 800ec26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3718      	adds	r7, #24
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b086      	sub	sp, #24
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	607a      	str	r2, [r7, #4]
 800ec3a:	603b      	str	r3, [r7, #0]
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec4e:	7af9      	ldrb	r1, [r7, #11]
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	f7f6 fe42 	bl	80058dc <HAL_PCD_EP_Receive>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ec5c:	7dbb      	ldrb	r3, [r7, #22]
 800ec5e:	2b03      	cmp	r3, #3
 800ec60:	d816      	bhi.n	800ec90 <USBD_LL_PrepareReceive+0x60>
 800ec62:	a201      	add	r2, pc, #4	; (adr r2, 800ec68 <USBD_LL_PrepareReceive+0x38>)
 800ec64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec68:	0800ec79 	.word	0x0800ec79
 800ec6c:	0800ec7f 	.word	0x0800ec7f
 800ec70:	0800ec85 	.word	0x0800ec85
 800ec74:	0800ec8b 	.word	0x0800ec8b
    case HAL_OK :
      usb_status = USBD_OK;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	75fb      	strb	r3, [r7, #23]
    break;
 800ec7c:	e00b      	b.n	800ec96 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	75fb      	strb	r3, [r7, #23]
    break;
 800ec82:	e008      	b.n	800ec96 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec84:	2301      	movs	r3, #1
 800ec86:	75fb      	strb	r3, [r7, #23]
    break;
 800ec88:	e005      	b.n	800ec96 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec8a:	2303      	movs	r3, #3
 800ec8c:	75fb      	strb	r3, [r7, #23]
    break;
 800ec8e:	e002      	b.n	800ec96 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ec90:	2303      	movs	r3, #3
 800ec92:	75fb      	strb	r3, [r7, #23]
    break;
 800ec94:	bf00      	nop
  }
  return usb_status;
 800ec96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3718      	adds	r7, #24
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}

0800eca0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	460b      	mov	r3, r1
 800ecaa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ecb2:	78fa      	ldrb	r2, [r7, #3]
 800ecb4:	4611      	mov	r1, r2
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7f6 fe42 	bl	8005940 <HAL_PCD_EP_GetRxCount>
 800ecbc:	4603      	mov	r3, r0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
	...

0800ecc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ecd4:	78fb      	ldrb	r3, [r7, #3]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d002      	beq.n	800ece0 <HAL_PCDEx_LPM_Callback+0x18>
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d01f      	beq.n	800ed1e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ecde:	e03b      	b.n	800ed58 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6a1b      	ldr	r3, [r3, #32]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d007      	beq.n	800ecf8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ece8:	f000 f854 	bl	800ed94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ecec:	4b1c      	ldr	r3, [pc, #112]	; (800ed60 <HAL_PCDEx_LPM_Callback+0x98>)
 800ecee:	691b      	ldr	r3, [r3, #16]
 800ecf0:	4a1b      	ldr	r2, [pc, #108]	; (800ed60 <HAL_PCDEx_LPM_Callback+0x98>)
 800ecf2:	f023 0306 	bic.w	r3, r3, #6
 800ecf6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	6812      	ldr	r2, [r2, #0]
 800ed06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ed0a:	f023 0301 	bic.w	r3, r3, #1
 800ed0e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fe f98f 	bl	800d03a <USBD_LL_Resume>
    break;
 800ed1c:	e01c      	b.n	800ed58 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	6812      	ldr	r2, [r2, #0]
 800ed2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ed30:	f043 0301 	orr.w	r3, r3, #1
 800ed34:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7fe f960 	bl	800d002 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6a1b      	ldr	r3, [r3, #32]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d005      	beq.n	800ed56 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ed4a:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <HAL_PCDEx_LPM_Callback+0x98>)
 800ed4c:	691b      	ldr	r3, [r3, #16]
 800ed4e:	4a04      	ldr	r2, [pc, #16]	; (800ed60 <HAL_PCDEx_LPM_Callback+0x98>)
 800ed50:	f043 0306 	orr.w	r3, r3, #6
 800ed54:	6113      	str	r3, [r2, #16]
    break;
 800ed56:	bf00      	nop
}
 800ed58:	bf00      	nop
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	e000ed00 	.word	0xe000ed00

0800ed64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ed6c:	4b03      	ldr	r3, [pc, #12]	; (800ed7c <USBD_static_malloc+0x18>)
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	370c      	adds	r7, #12
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop
 800ed7c:	20003818 	.word	0x20003818

0800ed80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]

}
 800ed88:	bf00      	nop
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ed98:	f7f2 f862 	bl	8000e60 <SystemClock_Config>
}
 800ed9c:	bf00      	nop
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <__cvt>:
 800eda0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eda4:	ec55 4b10 	vmov	r4, r5, d0
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	460e      	mov	r6, r1
 800edac:	4619      	mov	r1, r3
 800edae:	462b      	mov	r3, r5
 800edb0:	bfbb      	ittet	lt
 800edb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800edb6:	461d      	movlt	r5, r3
 800edb8:	2300      	movge	r3, #0
 800edba:	232d      	movlt	r3, #45	; 0x2d
 800edbc:	700b      	strb	r3, [r1, #0]
 800edbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800edc4:	4691      	mov	r9, r2
 800edc6:	f023 0820 	bic.w	r8, r3, #32
 800edca:	bfbc      	itt	lt
 800edcc:	4622      	movlt	r2, r4
 800edce:	4614      	movlt	r4, r2
 800edd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edd4:	d005      	beq.n	800ede2 <__cvt+0x42>
 800edd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800edda:	d100      	bne.n	800edde <__cvt+0x3e>
 800eddc:	3601      	adds	r6, #1
 800edde:	2102      	movs	r1, #2
 800ede0:	e000      	b.n	800ede4 <__cvt+0x44>
 800ede2:	2103      	movs	r1, #3
 800ede4:	ab03      	add	r3, sp, #12
 800ede6:	9301      	str	r3, [sp, #4]
 800ede8:	ab02      	add	r3, sp, #8
 800edea:	9300      	str	r3, [sp, #0]
 800edec:	ec45 4b10 	vmov	d0, r4, r5
 800edf0:	4653      	mov	r3, sl
 800edf2:	4632      	mov	r2, r6
 800edf4:	f001 f878 	bl	800fee8 <_dtoa_r>
 800edf8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800edfc:	4607      	mov	r7, r0
 800edfe:	d102      	bne.n	800ee06 <__cvt+0x66>
 800ee00:	f019 0f01 	tst.w	r9, #1
 800ee04:	d022      	beq.n	800ee4c <__cvt+0xac>
 800ee06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee0a:	eb07 0906 	add.w	r9, r7, r6
 800ee0e:	d110      	bne.n	800ee32 <__cvt+0x92>
 800ee10:	783b      	ldrb	r3, [r7, #0]
 800ee12:	2b30      	cmp	r3, #48	; 0x30
 800ee14:	d10a      	bne.n	800ee2c <__cvt+0x8c>
 800ee16:	2200      	movs	r2, #0
 800ee18:	2300      	movs	r3, #0
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	f7f1 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee22:	b918      	cbnz	r0, 800ee2c <__cvt+0x8c>
 800ee24:	f1c6 0601 	rsb	r6, r6, #1
 800ee28:	f8ca 6000 	str.w	r6, [sl]
 800ee2c:	f8da 3000 	ldr.w	r3, [sl]
 800ee30:	4499      	add	r9, r3
 800ee32:	2200      	movs	r2, #0
 800ee34:	2300      	movs	r3, #0
 800ee36:	4620      	mov	r0, r4
 800ee38:	4629      	mov	r1, r5
 800ee3a:	f7f1 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee3e:	b108      	cbz	r0, 800ee44 <__cvt+0xa4>
 800ee40:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee44:	2230      	movs	r2, #48	; 0x30
 800ee46:	9b03      	ldr	r3, [sp, #12]
 800ee48:	454b      	cmp	r3, r9
 800ee4a:	d307      	bcc.n	800ee5c <__cvt+0xbc>
 800ee4c:	9b03      	ldr	r3, [sp, #12]
 800ee4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee50:	1bdb      	subs	r3, r3, r7
 800ee52:	4638      	mov	r0, r7
 800ee54:	6013      	str	r3, [r2, #0]
 800ee56:	b004      	add	sp, #16
 800ee58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5c:	1c59      	adds	r1, r3, #1
 800ee5e:	9103      	str	r1, [sp, #12]
 800ee60:	701a      	strb	r2, [r3, #0]
 800ee62:	e7f0      	b.n	800ee46 <__cvt+0xa6>

0800ee64 <__exponent>:
 800ee64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee66:	4603      	mov	r3, r0
 800ee68:	2900      	cmp	r1, #0
 800ee6a:	bfb8      	it	lt
 800ee6c:	4249      	neglt	r1, r1
 800ee6e:	f803 2b02 	strb.w	r2, [r3], #2
 800ee72:	bfb4      	ite	lt
 800ee74:	222d      	movlt	r2, #45	; 0x2d
 800ee76:	222b      	movge	r2, #43	; 0x2b
 800ee78:	2909      	cmp	r1, #9
 800ee7a:	7042      	strb	r2, [r0, #1]
 800ee7c:	dd2a      	ble.n	800eed4 <__exponent+0x70>
 800ee7e:	f10d 0207 	add.w	r2, sp, #7
 800ee82:	4617      	mov	r7, r2
 800ee84:	260a      	movs	r6, #10
 800ee86:	4694      	mov	ip, r2
 800ee88:	fb91 f5f6 	sdiv	r5, r1, r6
 800ee8c:	fb06 1415 	mls	r4, r6, r5, r1
 800ee90:	3430      	adds	r4, #48	; 0x30
 800ee92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ee96:	460c      	mov	r4, r1
 800ee98:	2c63      	cmp	r4, #99	; 0x63
 800ee9a:	f102 32ff 	add.w	r2, r2, #4294967295
 800ee9e:	4629      	mov	r1, r5
 800eea0:	dcf1      	bgt.n	800ee86 <__exponent+0x22>
 800eea2:	3130      	adds	r1, #48	; 0x30
 800eea4:	f1ac 0402 	sub.w	r4, ip, #2
 800eea8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eeac:	1c41      	adds	r1, r0, #1
 800eeae:	4622      	mov	r2, r4
 800eeb0:	42ba      	cmp	r2, r7
 800eeb2:	d30a      	bcc.n	800eeca <__exponent+0x66>
 800eeb4:	f10d 0209 	add.w	r2, sp, #9
 800eeb8:	eba2 020c 	sub.w	r2, r2, ip
 800eebc:	42bc      	cmp	r4, r7
 800eebe:	bf88      	it	hi
 800eec0:	2200      	movhi	r2, #0
 800eec2:	4413      	add	r3, r2
 800eec4:	1a18      	subs	r0, r3, r0
 800eec6:	b003      	add	sp, #12
 800eec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeca:	f812 5b01 	ldrb.w	r5, [r2], #1
 800eece:	f801 5f01 	strb.w	r5, [r1, #1]!
 800eed2:	e7ed      	b.n	800eeb0 <__exponent+0x4c>
 800eed4:	2330      	movs	r3, #48	; 0x30
 800eed6:	3130      	adds	r1, #48	; 0x30
 800eed8:	7083      	strb	r3, [r0, #2]
 800eeda:	70c1      	strb	r1, [r0, #3]
 800eedc:	1d03      	adds	r3, r0, #4
 800eede:	e7f1      	b.n	800eec4 <__exponent+0x60>

0800eee0 <_printf_float>:
 800eee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eee4:	ed2d 8b02 	vpush	{d8}
 800eee8:	b08d      	sub	sp, #52	; 0x34
 800eeea:	460c      	mov	r4, r1
 800eeec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800eef0:	4616      	mov	r6, r2
 800eef2:	461f      	mov	r7, r3
 800eef4:	4605      	mov	r5, r0
 800eef6:	f000 fee5 	bl	800fcc4 <_localeconv_r>
 800eefa:	f8d0 a000 	ldr.w	sl, [r0]
 800eefe:	4650      	mov	r0, sl
 800ef00:	f7f1 f9b6 	bl	8000270 <strlen>
 800ef04:	2300      	movs	r3, #0
 800ef06:	930a      	str	r3, [sp, #40]	; 0x28
 800ef08:	6823      	ldr	r3, [r4, #0]
 800ef0a:	9305      	str	r3, [sp, #20]
 800ef0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ef10:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ef14:	3307      	adds	r3, #7
 800ef16:	f023 0307 	bic.w	r3, r3, #7
 800ef1a:	f103 0208 	add.w	r2, r3, #8
 800ef1e:	f8c8 2000 	str.w	r2, [r8]
 800ef22:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ef26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef2a:	9307      	str	r3, [sp, #28]
 800ef2c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef30:	ee08 0a10 	vmov	s16, r0
 800ef34:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ef38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef3c:	4b9e      	ldr	r3, [pc, #632]	; (800f1b8 <_printf_float+0x2d8>)
 800ef3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef42:	f7f1 fdf3 	bl	8000b2c <__aeabi_dcmpun>
 800ef46:	bb88      	cbnz	r0, 800efac <_printf_float+0xcc>
 800ef48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef4c:	4b9a      	ldr	r3, [pc, #616]	; (800f1b8 <_printf_float+0x2d8>)
 800ef4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef52:	f7f1 fdcd 	bl	8000af0 <__aeabi_dcmple>
 800ef56:	bb48      	cbnz	r0, 800efac <_printf_float+0xcc>
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	4640      	mov	r0, r8
 800ef5e:	4649      	mov	r1, r9
 800ef60:	f7f1 fdbc 	bl	8000adc <__aeabi_dcmplt>
 800ef64:	b110      	cbz	r0, 800ef6c <_printf_float+0x8c>
 800ef66:	232d      	movs	r3, #45	; 0x2d
 800ef68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef6c:	4a93      	ldr	r2, [pc, #588]	; (800f1bc <_printf_float+0x2dc>)
 800ef6e:	4b94      	ldr	r3, [pc, #592]	; (800f1c0 <_printf_float+0x2e0>)
 800ef70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef74:	bf94      	ite	ls
 800ef76:	4690      	movls	r8, r2
 800ef78:	4698      	movhi	r8, r3
 800ef7a:	2303      	movs	r3, #3
 800ef7c:	6123      	str	r3, [r4, #16]
 800ef7e:	9b05      	ldr	r3, [sp, #20]
 800ef80:	f023 0304 	bic.w	r3, r3, #4
 800ef84:	6023      	str	r3, [r4, #0]
 800ef86:	f04f 0900 	mov.w	r9, #0
 800ef8a:	9700      	str	r7, [sp, #0]
 800ef8c:	4633      	mov	r3, r6
 800ef8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef90:	4621      	mov	r1, r4
 800ef92:	4628      	mov	r0, r5
 800ef94:	f000 f9da 	bl	800f34c <_printf_common>
 800ef98:	3001      	adds	r0, #1
 800ef9a:	f040 8090 	bne.w	800f0be <_printf_float+0x1de>
 800ef9e:	f04f 30ff 	mov.w	r0, #4294967295
 800efa2:	b00d      	add	sp, #52	; 0x34
 800efa4:	ecbd 8b02 	vpop	{d8}
 800efa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efac:	4642      	mov	r2, r8
 800efae:	464b      	mov	r3, r9
 800efb0:	4640      	mov	r0, r8
 800efb2:	4649      	mov	r1, r9
 800efb4:	f7f1 fdba 	bl	8000b2c <__aeabi_dcmpun>
 800efb8:	b140      	cbz	r0, 800efcc <_printf_float+0xec>
 800efba:	464b      	mov	r3, r9
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	bfbc      	itt	lt
 800efc0:	232d      	movlt	r3, #45	; 0x2d
 800efc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800efc6:	4a7f      	ldr	r2, [pc, #508]	; (800f1c4 <_printf_float+0x2e4>)
 800efc8:	4b7f      	ldr	r3, [pc, #508]	; (800f1c8 <_printf_float+0x2e8>)
 800efca:	e7d1      	b.n	800ef70 <_printf_float+0x90>
 800efcc:	6863      	ldr	r3, [r4, #4]
 800efce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800efd2:	9206      	str	r2, [sp, #24]
 800efd4:	1c5a      	adds	r2, r3, #1
 800efd6:	d13f      	bne.n	800f058 <_printf_float+0x178>
 800efd8:	2306      	movs	r3, #6
 800efda:	6063      	str	r3, [r4, #4]
 800efdc:	9b05      	ldr	r3, [sp, #20]
 800efde:	6861      	ldr	r1, [r4, #4]
 800efe0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800efe4:	2300      	movs	r3, #0
 800efe6:	9303      	str	r3, [sp, #12]
 800efe8:	ab0a      	add	r3, sp, #40	; 0x28
 800efea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800efee:	ab09      	add	r3, sp, #36	; 0x24
 800eff0:	ec49 8b10 	vmov	d0, r8, r9
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	6022      	str	r2, [r4, #0]
 800eff8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800effc:	4628      	mov	r0, r5
 800effe:	f7ff fecf 	bl	800eda0 <__cvt>
 800f002:	9b06      	ldr	r3, [sp, #24]
 800f004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f006:	2b47      	cmp	r3, #71	; 0x47
 800f008:	4680      	mov	r8, r0
 800f00a:	d108      	bne.n	800f01e <_printf_float+0x13e>
 800f00c:	1cc8      	adds	r0, r1, #3
 800f00e:	db02      	blt.n	800f016 <_printf_float+0x136>
 800f010:	6863      	ldr	r3, [r4, #4]
 800f012:	4299      	cmp	r1, r3
 800f014:	dd41      	ble.n	800f09a <_printf_float+0x1ba>
 800f016:	f1ab 0302 	sub.w	r3, fp, #2
 800f01a:	fa5f fb83 	uxtb.w	fp, r3
 800f01e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f022:	d820      	bhi.n	800f066 <_printf_float+0x186>
 800f024:	3901      	subs	r1, #1
 800f026:	465a      	mov	r2, fp
 800f028:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f02c:	9109      	str	r1, [sp, #36]	; 0x24
 800f02e:	f7ff ff19 	bl	800ee64 <__exponent>
 800f032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f034:	1813      	adds	r3, r2, r0
 800f036:	2a01      	cmp	r2, #1
 800f038:	4681      	mov	r9, r0
 800f03a:	6123      	str	r3, [r4, #16]
 800f03c:	dc02      	bgt.n	800f044 <_printf_float+0x164>
 800f03e:	6822      	ldr	r2, [r4, #0]
 800f040:	07d2      	lsls	r2, r2, #31
 800f042:	d501      	bpl.n	800f048 <_printf_float+0x168>
 800f044:	3301      	adds	r3, #1
 800f046:	6123      	str	r3, [r4, #16]
 800f048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d09c      	beq.n	800ef8a <_printf_float+0xaa>
 800f050:	232d      	movs	r3, #45	; 0x2d
 800f052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f056:	e798      	b.n	800ef8a <_printf_float+0xaa>
 800f058:	9a06      	ldr	r2, [sp, #24]
 800f05a:	2a47      	cmp	r2, #71	; 0x47
 800f05c:	d1be      	bne.n	800efdc <_printf_float+0xfc>
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1bc      	bne.n	800efdc <_printf_float+0xfc>
 800f062:	2301      	movs	r3, #1
 800f064:	e7b9      	b.n	800efda <_printf_float+0xfa>
 800f066:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f06a:	d118      	bne.n	800f09e <_printf_float+0x1be>
 800f06c:	2900      	cmp	r1, #0
 800f06e:	6863      	ldr	r3, [r4, #4]
 800f070:	dd0b      	ble.n	800f08a <_printf_float+0x1aa>
 800f072:	6121      	str	r1, [r4, #16]
 800f074:	b913      	cbnz	r3, 800f07c <_printf_float+0x19c>
 800f076:	6822      	ldr	r2, [r4, #0]
 800f078:	07d0      	lsls	r0, r2, #31
 800f07a:	d502      	bpl.n	800f082 <_printf_float+0x1a2>
 800f07c:	3301      	adds	r3, #1
 800f07e:	440b      	add	r3, r1
 800f080:	6123      	str	r3, [r4, #16]
 800f082:	65a1      	str	r1, [r4, #88]	; 0x58
 800f084:	f04f 0900 	mov.w	r9, #0
 800f088:	e7de      	b.n	800f048 <_printf_float+0x168>
 800f08a:	b913      	cbnz	r3, 800f092 <_printf_float+0x1b2>
 800f08c:	6822      	ldr	r2, [r4, #0]
 800f08e:	07d2      	lsls	r2, r2, #31
 800f090:	d501      	bpl.n	800f096 <_printf_float+0x1b6>
 800f092:	3302      	adds	r3, #2
 800f094:	e7f4      	b.n	800f080 <_printf_float+0x1a0>
 800f096:	2301      	movs	r3, #1
 800f098:	e7f2      	b.n	800f080 <_printf_float+0x1a0>
 800f09a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0a0:	4299      	cmp	r1, r3
 800f0a2:	db05      	blt.n	800f0b0 <_printf_float+0x1d0>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	6121      	str	r1, [r4, #16]
 800f0a8:	07d8      	lsls	r0, r3, #31
 800f0aa:	d5ea      	bpl.n	800f082 <_printf_float+0x1a2>
 800f0ac:	1c4b      	adds	r3, r1, #1
 800f0ae:	e7e7      	b.n	800f080 <_printf_float+0x1a0>
 800f0b0:	2900      	cmp	r1, #0
 800f0b2:	bfd4      	ite	le
 800f0b4:	f1c1 0202 	rsble	r2, r1, #2
 800f0b8:	2201      	movgt	r2, #1
 800f0ba:	4413      	add	r3, r2
 800f0bc:	e7e0      	b.n	800f080 <_printf_float+0x1a0>
 800f0be:	6823      	ldr	r3, [r4, #0]
 800f0c0:	055a      	lsls	r2, r3, #21
 800f0c2:	d407      	bmi.n	800f0d4 <_printf_float+0x1f4>
 800f0c4:	6923      	ldr	r3, [r4, #16]
 800f0c6:	4642      	mov	r2, r8
 800f0c8:	4631      	mov	r1, r6
 800f0ca:	4628      	mov	r0, r5
 800f0cc:	47b8      	blx	r7
 800f0ce:	3001      	adds	r0, #1
 800f0d0:	d12c      	bne.n	800f12c <_printf_float+0x24c>
 800f0d2:	e764      	b.n	800ef9e <_printf_float+0xbe>
 800f0d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0d8:	f240 80e0 	bls.w	800f29c <_printf_float+0x3bc>
 800f0dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	f7f1 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d034      	beq.n	800f156 <_printf_float+0x276>
 800f0ec:	4a37      	ldr	r2, [pc, #220]	; (800f1cc <_printf_float+0x2ec>)
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	4631      	mov	r1, r6
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	47b8      	blx	r7
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	f43f af51 	beq.w	800ef9e <_printf_float+0xbe>
 800f0fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f100:	429a      	cmp	r2, r3
 800f102:	db02      	blt.n	800f10a <_printf_float+0x22a>
 800f104:	6823      	ldr	r3, [r4, #0]
 800f106:	07d8      	lsls	r0, r3, #31
 800f108:	d510      	bpl.n	800f12c <_printf_float+0x24c>
 800f10a:	ee18 3a10 	vmov	r3, s16
 800f10e:	4652      	mov	r2, sl
 800f110:	4631      	mov	r1, r6
 800f112:	4628      	mov	r0, r5
 800f114:	47b8      	blx	r7
 800f116:	3001      	adds	r0, #1
 800f118:	f43f af41 	beq.w	800ef9e <_printf_float+0xbe>
 800f11c:	f04f 0800 	mov.w	r8, #0
 800f120:	f104 091a 	add.w	r9, r4, #26
 800f124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f126:	3b01      	subs	r3, #1
 800f128:	4543      	cmp	r3, r8
 800f12a:	dc09      	bgt.n	800f140 <_printf_float+0x260>
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	079b      	lsls	r3, r3, #30
 800f130:	f100 8107 	bmi.w	800f342 <_printf_float+0x462>
 800f134:	68e0      	ldr	r0, [r4, #12]
 800f136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f138:	4298      	cmp	r0, r3
 800f13a:	bfb8      	it	lt
 800f13c:	4618      	movlt	r0, r3
 800f13e:	e730      	b.n	800efa2 <_printf_float+0xc2>
 800f140:	2301      	movs	r3, #1
 800f142:	464a      	mov	r2, r9
 800f144:	4631      	mov	r1, r6
 800f146:	4628      	mov	r0, r5
 800f148:	47b8      	blx	r7
 800f14a:	3001      	adds	r0, #1
 800f14c:	f43f af27 	beq.w	800ef9e <_printf_float+0xbe>
 800f150:	f108 0801 	add.w	r8, r8, #1
 800f154:	e7e6      	b.n	800f124 <_printf_float+0x244>
 800f156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f158:	2b00      	cmp	r3, #0
 800f15a:	dc39      	bgt.n	800f1d0 <_printf_float+0x2f0>
 800f15c:	4a1b      	ldr	r2, [pc, #108]	; (800f1cc <_printf_float+0x2ec>)
 800f15e:	2301      	movs	r3, #1
 800f160:	4631      	mov	r1, r6
 800f162:	4628      	mov	r0, r5
 800f164:	47b8      	blx	r7
 800f166:	3001      	adds	r0, #1
 800f168:	f43f af19 	beq.w	800ef9e <_printf_float+0xbe>
 800f16c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f170:	4313      	orrs	r3, r2
 800f172:	d102      	bne.n	800f17a <_printf_float+0x29a>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	07d9      	lsls	r1, r3, #31
 800f178:	d5d8      	bpl.n	800f12c <_printf_float+0x24c>
 800f17a:	ee18 3a10 	vmov	r3, s16
 800f17e:	4652      	mov	r2, sl
 800f180:	4631      	mov	r1, r6
 800f182:	4628      	mov	r0, r5
 800f184:	47b8      	blx	r7
 800f186:	3001      	adds	r0, #1
 800f188:	f43f af09 	beq.w	800ef9e <_printf_float+0xbe>
 800f18c:	f04f 0900 	mov.w	r9, #0
 800f190:	f104 0a1a 	add.w	sl, r4, #26
 800f194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f196:	425b      	negs	r3, r3
 800f198:	454b      	cmp	r3, r9
 800f19a:	dc01      	bgt.n	800f1a0 <_printf_float+0x2c0>
 800f19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f19e:	e792      	b.n	800f0c6 <_printf_float+0x1e6>
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	4652      	mov	r2, sl
 800f1a4:	4631      	mov	r1, r6
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	47b8      	blx	r7
 800f1aa:	3001      	adds	r0, #1
 800f1ac:	f43f aef7 	beq.w	800ef9e <_printf_float+0xbe>
 800f1b0:	f109 0901 	add.w	r9, r9, #1
 800f1b4:	e7ee      	b.n	800f194 <_printf_float+0x2b4>
 800f1b6:	bf00      	nop
 800f1b8:	7fefffff 	.word	0x7fefffff
 800f1bc:	080137fc 	.word	0x080137fc
 800f1c0:	08013800 	.word	0x08013800
 800f1c4:	08013804 	.word	0x08013804
 800f1c8:	08013808 	.word	0x08013808
 800f1cc:	0801380c 	.word	0x0801380c
 800f1d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	bfa8      	it	ge
 800f1d8:	461a      	movge	r2, r3
 800f1da:	2a00      	cmp	r2, #0
 800f1dc:	4691      	mov	r9, r2
 800f1de:	dc37      	bgt.n	800f250 <_printf_float+0x370>
 800f1e0:	f04f 0b00 	mov.w	fp, #0
 800f1e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1e8:	f104 021a 	add.w	r2, r4, #26
 800f1ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1ee:	9305      	str	r3, [sp, #20]
 800f1f0:	eba3 0309 	sub.w	r3, r3, r9
 800f1f4:	455b      	cmp	r3, fp
 800f1f6:	dc33      	bgt.n	800f260 <_printf_float+0x380>
 800f1f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	db3b      	blt.n	800f278 <_printf_float+0x398>
 800f200:	6823      	ldr	r3, [r4, #0]
 800f202:	07da      	lsls	r2, r3, #31
 800f204:	d438      	bmi.n	800f278 <_printf_float+0x398>
 800f206:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f20a:	eba2 0903 	sub.w	r9, r2, r3
 800f20e:	9b05      	ldr	r3, [sp, #20]
 800f210:	1ad2      	subs	r2, r2, r3
 800f212:	4591      	cmp	r9, r2
 800f214:	bfa8      	it	ge
 800f216:	4691      	movge	r9, r2
 800f218:	f1b9 0f00 	cmp.w	r9, #0
 800f21c:	dc35      	bgt.n	800f28a <_printf_float+0x3aa>
 800f21e:	f04f 0800 	mov.w	r8, #0
 800f222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f226:	f104 0a1a 	add.w	sl, r4, #26
 800f22a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f22e:	1a9b      	subs	r3, r3, r2
 800f230:	eba3 0309 	sub.w	r3, r3, r9
 800f234:	4543      	cmp	r3, r8
 800f236:	f77f af79 	ble.w	800f12c <_printf_float+0x24c>
 800f23a:	2301      	movs	r3, #1
 800f23c:	4652      	mov	r2, sl
 800f23e:	4631      	mov	r1, r6
 800f240:	4628      	mov	r0, r5
 800f242:	47b8      	blx	r7
 800f244:	3001      	adds	r0, #1
 800f246:	f43f aeaa 	beq.w	800ef9e <_printf_float+0xbe>
 800f24a:	f108 0801 	add.w	r8, r8, #1
 800f24e:	e7ec      	b.n	800f22a <_printf_float+0x34a>
 800f250:	4613      	mov	r3, r2
 800f252:	4631      	mov	r1, r6
 800f254:	4642      	mov	r2, r8
 800f256:	4628      	mov	r0, r5
 800f258:	47b8      	blx	r7
 800f25a:	3001      	adds	r0, #1
 800f25c:	d1c0      	bne.n	800f1e0 <_printf_float+0x300>
 800f25e:	e69e      	b.n	800ef9e <_printf_float+0xbe>
 800f260:	2301      	movs	r3, #1
 800f262:	4631      	mov	r1, r6
 800f264:	4628      	mov	r0, r5
 800f266:	9205      	str	r2, [sp, #20]
 800f268:	47b8      	blx	r7
 800f26a:	3001      	adds	r0, #1
 800f26c:	f43f ae97 	beq.w	800ef9e <_printf_float+0xbe>
 800f270:	9a05      	ldr	r2, [sp, #20]
 800f272:	f10b 0b01 	add.w	fp, fp, #1
 800f276:	e7b9      	b.n	800f1ec <_printf_float+0x30c>
 800f278:	ee18 3a10 	vmov	r3, s16
 800f27c:	4652      	mov	r2, sl
 800f27e:	4631      	mov	r1, r6
 800f280:	4628      	mov	r0, r5
 800f282:	47b8      	blx	r7
 800f284:	3001      	adds	r0, #1
 800f286:	d1be      	bne.n	800f206 <_printf_float+0x326>
 800f288:	e689      	b.n	800ef9e <_printf_float+0xbe>
 800f28a:	9a05      	ldr	r2, [sp, #20]
 800f28c:	464b      	mov	r3, r9
 800f28e:	4442      	add	r2, r8
 800f290:	4631      	mov	r1, r6
 800f292:	4628      	mov	r0, r5
 800f294:	47b8      	blx	r7
 800f296:	3001      	adds	r0, #1
 800f298:	d1c1      	bne.n	800f21e <_printf_float+0x33e>
 800f29a:	e680      	b.n	800ef9e <_printf_float+0xbe>
 800f29c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f29e:	2a01      	cmp	r2, #1
 800f2a0:	dc01      	bgt.n	800f2a6 <_printf_float+0x3c6>
 800f2a2:	07db      	lsls	r3, r3, #31
 800f2a4:	d53a      	bpl.n	800f31c <_printf_float+0x43c>
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	4642      	mov	r2, r8
 800f2aa:	4631      	mov	r1, r6
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	47b8      	blx	r7
 800f2b0:	3001      	adds	r0, #1
 800f2b2:	f43f ae74 	beq.w	800ef9e <_printf_float+0xbe>
 800f2b6:	ee18 3a10 	vmov	r3, s16
 800f2ba:	4652      	mov	r2, sl
 800f2bc:	4631      	mov	r1, r6
 800f2be:	4628      	mov	r0, r5
 800f2c0:	47b8      	blx	r7
 800f2c2:	3001      	adds	r0, #1
 800f2c4:	f43f ae6b 	beq.w	800ef9e <_printf_float+0xbe>
 800f2c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f2d4:	f7f1 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2d8:	b9d8      	cbnz	r0, 800f312 <_printf_float+0x432>
 800f2da:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f2de:	f108 0201 	add.w	r2, r8, #1
 800f2e2:	4631      	mov	r1, r6
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	47b8      	blx	r7
 800f2e8:	3001      	adds	r0, #1
 800f2ea:	d10e      	bne.n	800f30a <_printf_float+0x42a>
 800f2ec:	e657      	b.n	800ef9e <_printf_float+0xbe>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	4652      	mov	r2, sl
 800f2f2:	4631      	mov	r1, r6
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	47b8      	blx	r7
 800f2f8:	3001      	adds	r0, #1
 800f2fa:	f43f ae50 	beq.w	800ef9e <_printf_float+0xbe>
 800f2fe:	f108 0801 	add.w	r8, r8, #1
 800f302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f304:	3b01      	subs	r3, #1
 800f306:	4543      	cmp	r3, r8
 800f308:	dcf1      	bgt.n	800f2ee <_printf_float+0x40e>
 800f30a:	464b      	mov	r3, r9
 800f30c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f310:	e6da      	b.n	800f0c8 <_printf_float+0x1e8>
 800f312:	f04f 0800 	mov.w	r8, #0
 800f316:	f104 0a1a 	add.w	sl, r4, #26
 800f31a:	e7f2      	b.n	800f302 <_printf_float+0x422>
 800f31c:	2301      	movs	r3, #1
 800f31e:	4642      	mov	r2, r8
 800f320:	e7df      	b.n	800f2e2 <_printf_float+0x402>
 800f322:	2301      	movs	r3, #1
 800f324:	464a      	mov	r2, r9
 800f326:	4631      	mov	r1, r6
 800f328:	4628      	mov	r0, r5
 800f32a:	47b8      	blx	r7
 800f32c:	3001      	adds	r0, #1
 800f32e:	f43f ae36 	beq.w	800ef9e <_printf_float+0xbe>
 800f332:	f108 0801 	add.w	r8, r8, #1
 800f336:	68e3      	ldr	r3, [r4, #12]
 800f338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f33a:	1a5b      	subs	r3, r3, r1
 800f33c:	4543      	cmp	r3, r8
 800f33e:	dcf0      	bgt.n	800f322 <_printf_float+0x442>
 800f340:	e6f8      	b.n	800f134 <_printf_float+0x254>
 800f342:	f04f 0800 	mov.w	r8, #0
 800f346:	f104 0919 	add.w	r9, r4, #25
 800f34a:	e7f4      	b.n	800f336 <_printf_float+0x456>

0800f34c <_printf_common>:
 800f34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f350:	4616      	mov	r6, r2
 800f352:	4699      	mov	r9, r3
 800f354:	688a      	ldr	r2, [r1, #8]
 800f356:	690b      	ldr	r3, [r1, #16]
 800f358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f35c:	4293      	cmp	r3, r2
 800f35e:	bfb8      	it	lt
 800f360:	4613      	movlt	r3, r2
 800f362:	6033      	str	r3, [r6, #0]
 800f364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f368:	4607      	mov	r7, r0
 800f36a:	460c      	mov	r4, r1
 800f36c:	b10a      	cbz	r2, 800f372 <_printf_common+0x26>
 800f36e:	3301      	adds	r3, #1
 800f370:	6033      	str	r3, [r6, #0]
 800f372:	6823      	ldr	r3, [r4, #0]
 800f374:	0699      	lsls	r1, r3, #26
 800f376:	bf42      	ittt	mi
 800f378:	6833      	ldrmi	r3, [r6, #0]
 800f37a:	3302      	addmi	r3, #2
 800f37c:	6033      	strmi	r3, [r6, #0]
 800f37e:	6825      	ldr	r5, [r4, #0]
 800f380:	f015 0506 	ands.w	r5, r5, #6
 800f384:	d106      	bne.n	800f394 <_printf_common+0x48>
 800f386:	f104 0a19 	add.w	sl, r4, #25
 800f38a:	68e3      	ldr	r3, [r4, #12]
 800f38c:	6832      	ldr	r2, [r6, #0]
 800f38e:	1a9b      	subs	r3, r3, r2
 800f390:	42ab      	cmp	r3, r5
 800f392:	dc26      	bgt.n	800f3e2 <_printf_common+0x96>
 800f394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f398:	1e13      	subs	r3, r2, #0
 800f39a:	6822      	ldr	r2, [r4, #0]
 800f39c:	bf18      	it	ne
 800f39e:	2301      	movne	r3, #1
 800f3a0:	0692      	lsls	r2, r2, #26
 800f3a2:	d42b      	bmi.n	800f3fc <_printf_common+0xb0>
 800f3a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3a8:	4649      	mov	r1, r9
 800f3aa:	4638      	mov	r0, r7
 800f3ac:	47c0      	blx	r8
 800f3ae:	3001      	adds	r0, #1
 800f3b0:	d01e      	beq.n	800f3f0 <_printf_common+0xa4>
 800f3b2:	6823      	ldr	r3, [r4, #0]
 800f3b4:	6922      	ldr	r2, [r4, #16]
 800f3b6:	f003 0306 	and.w	r3, r3, #6
 800f3ba:	2b04      	cmp	r3, #4
 800f3bc:	bf02      	ittt	eq
 800f3be:	68e5      	ldreq	r5, [r4, #12]
 800f3c0:	6833      	ldreq	r3, [r6, #0]
 800f3c2:	1aed      	subeq	r5, r5, r3
 800f3c4:	68a3      	ldr	r3, [r4, #8]
 800f3c6:	bf0c      	ite	eq
 800f3c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3cc:	2500      	movne	r5, #0
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	bfc4      	itt	gt
 800f3d2:	1a9b      	subgt	r3, r3, r2
 800f3d4:	18ed      	addgt	r5, r5, r3
 800f3d6:	2600      	movs	r6, #0
 800f3d8:	341a      	adds	r4, #26
 800f3da:	42b5      	cmp	r5, r6
 800f3dc:	d11a      	bne.n	800f414 <_printf_common+0xc8>
 800f3de:	2000      	movs	r0, #0
 800f3e0:	e008      	b.n	800f3f4 <_printf_common+0xa8>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	4652      	mov	r2, sl
 800f3e6:	4649      	mov	r1, r9
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	47c0      	blx	r8
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	d103      	bne.n	800f3f8 <_printf_common+0xac>
 800f3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f8:	3501      	adds	r5, #1
 800f3fa:	e7c6      	b.n	800f38a <_printf_common+0x3e>
 800f3fc:	18e1      	adds	r1, r4, r3
 800f3fe:	1c5a      	adds	r2, r3, #1
 800f400:	2030      	movs	r0, #48	; 0x30
 800f402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f406:	4422      	add	r2, r4
 800f408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f40c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f410:	3302      	adds	r3, #2
 800f412:	e7c7      	b.n	800f3a4 <_printf_common+0x58>
 800f414:	2301      	movs	r3, #1
 800f416:	4622      	mov	r2, r4
 800f418:	4649      	mov	r1, r9
 800f41a:	4638      	mov	r0, r7
 800f41c:	47c0      	blx	r8
 800f41e:	3001      	adds	r0, #1
 800f420:	d0e6      	beq.n	800f3f0 <_printf_common+0xa4>
 800f422:	3601      	adds	r6, #1
 800f424:	e7d9      	b.n	800f3da <_printf_common+0x8e>
	...

0800f428 <_printf_i>:
 800f428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f42c:	7e0f      	ldrb	r7, [r1, #24]
 800f42e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f430:	2f78      	cmp	r7, #120	; 0x78
 800f432:	4691      	mov	r9, r2
 800f434:	4680      	mov	r8, r0
 800f436:	460c      	mov	r4, r1
 800f438:	469a      	mov	sl, r3
 800f43a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f43e:	d807      	bhi.n	800f450 <_printf_i+0x28>
 800f440:	2f62      	cmp	r7, #98	; 0x62
 800f442:	d80a      	bhi.n	800f45a <_printf_i+0x32>
 800f444:	2f00      	cmp	r7, #0
 800f446:	f000 80d4 	beq.w	800f5f2 <_printf_i+0x1ca>
 800f44a:	2f58      	cmp	r7, #88	; 0x58
 800f44c:	f000 80c0 	beq.w	800f5d0 <_printf_i+0x1a8>
 800f450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f458:	e03a      	b.n	800f4d0 <_printf_i+0xa8>
 800f45a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f45e:	2b15      	cmp	r3, #21
 800f460:	d8f6      	bhi.n	800f450 <_printf_i+0x28>
 800f462:	a101      	add	r1, pc, #4	; (adr r1, 800f468 <_printf_i+0x40>)
 800f464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f468:	0800f4c1 	.word	0x0800f4c1
 800f46c:	0800f4d5 	.word	0x0800f4d5
 800f470:	0800f451 	.word	0x0800f451
 800f474:	0800f451 	.word	0x0800f451
 800f478:	0800f451 	.word	0x0800f451
 800f47c:	0800f451 	.word	0x0800f451
 800f480:	0800f4d5 	.word	0x0800f4d5
 800f484:	0800f451 	.word	0x0800f451
 800f488:	0800f451 	.word	0x0800f451
 800f48c:	0800f451 	.word	0x0800f451
 800f490:	0800f451 	.word	0x0800f451
 800f494:	0800f5d9 	.word	0x0800f5d9
 800f498:	0800f501 	.word	0x0800f501
 800f49c:	0800f593 	.word	0x0800f593
 800f4a0:	0800f451 	.word	0x0800f451
 800f4a4:	0800f451 	.word	0x0800f451
 800f4a8:	0800f5fb 	.word	0x0800f5fb
 800f4ac:	0800f451 	.word	0x0800f451
 800f4b0:	0800f501 	.word	0x0800f501
 800f4b4:	0800f451 	.word	0x0800f451
 800f4b8:	0800f451 	.word	0x0800f451
 800f4bc:	0800f59b 	.word	0x0800f59b
 800f4c0:	682b      	ldr	r3, [r5, #0]
 800f4c2:	1d1a      	adds	r2, r3, #4
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	602a      	str	r2, [r5, #0]
 800f4c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	e09f      	b.n	800f614 <_printf_i+0x1ec>
 800f4d4:	6820      	ldr	r0, [r4, #0]
 800f4d6:	682b      	ldr	r3, [r5, #0]
 800f4d8:	0607      	lsls	r7, r0, #24
 800f4da:	f103 0104 	add.w	r1, r3, #4
 800f4de:	6029      	str	r1, [r5, #0]
 800f4e0:	d501      	bpl.n	800f4e6 <_printf_i+0xbe>
 800f4e2:	681e      	ldr	r6, [r3, #0]
 800f4e4:	e003      	b.n	800f4ee <_printf_i+0xc6>
 800f4e6:	0646      	lsls	r6, r0, #25
 800f4e8:	d5fb      	bpl.n	800f4e2 <_printf_i+0xba>
 800f4ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f4ee:	2e00      	cmp	r6, #0
 800f4f0:	da03      	bge.n	800f4fa <_printf_i+0xd2>
 800f4f2:	232d      	movs	r3, #45	; 0x2d
 800f4f4:	4276      	negs	r6, r6
 800f4f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4fa:	485a      	ldr	r0, [pc, #360]	; (800f664 <_printf_i+0x23c>)
 800f4fc:	230a      	movs	r3, #10
 800f4fe:	e012      	b.n	800f526 <_printf_i+0xfe>
 800f500:	682b      	ldr	r3, [r5, #0]
 800f502:	6820      	ldr	r0, [r4, #0]
 800f504:	1d19      	adds	r1, r3, #4
 800f506:	6029      	str	r1, [r5, #0]
 800f508:	0605      	lsls	r5, r0, #24
 800f50a:	d501      	bpl.n	800f510 <_printf_i+0xe8>
 800f50c:	681e      	ldr	r6, [r3, #0]
 800f50e:	e002      	b.n	800f516 <_printf_i+0xee>
 800f510:	0641      	lsls	r1, r0, #25
 800f512:	d5fb      	bpl.n	800f50c <_printf_i+0xe4>
 800f514:	881e      	ldrh	r6, [r3, #0]
 800f516:	4853      	ldr	r0, [pc, #332]	; (800f664 <_printf_i+0x23c>)
 800f518:	2f6f      	cmp	r7, #111	; 0x6f
 800f51a:	bf0c      	ite	eq
 800f51c:	2308      	moveq	r3, #8
 800f51e:	230a      	movne	r3, #10
 800f520:	2100      	movs	r1, #0
 800f522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f526:	6865      	ldr	r5, [r4, #4]
 800f528:	60a5      	str	r5, [r4, #8]
 800f52a:	2d00      	cmp	r5, #0
 800f52c:	bfa2      	ittt	ge
 800f52e:	6821      	ldrge	r1, [r4, #0]
 800f530:	f021 0104 	bicge.w	r1, r1, #4
 800f534:	6021      	strge	r1, [r4, #0]
 800f536:	b90e      	cbnz	r6, 800f53c <_printf_i+0x114>
 800f538:	2d00      	cmp	r5, #0
 800f53a:	d04b      	beq.n	800f5d4 <_printf_i+0x1ac>
 800f53c:	4615      	mov	r5, r2
 800f53e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f542:	fb03 6711 	mls	r7, r3, r1, r6
 800f546:	5dc7      	ldrb	r7, [r0, r7]
 800f548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f54c:	4637      	mov	r7, r6
 800f54e:	42bb      	cmp	r3, r7
 800f550:	460e      	mov	r6, r1
 800f552:	d9f4      	bls.n	800f53e <_printf_i+0x116>
 800f554:	2b08      	cmp	r3, #8
 800f556:	d10b      	bne.n	800f570 <_printf_i+0x148>
 800f558:	6823      	ldr	r3, [r4, #0]
 800f55a:	07de      	lsls	r6, r3, #31
 800f55c:	d508      	bpl.n	800f570 <_printf_i+0x148>
 800f55e:	6923      	ldr	r3, [r4, #16]
 800f560:	6861      	ldr	r1, [r4, #4]
 800f562:	4299      	cmp	r1, r3
 800f564:	bfde      	ittt	le
 800f566:	2330      	movle	r3, #48	; 0x30
 800f568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f56c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f570:	1b52      	subs	r2, r2, r5
 800f572:	6122      	str	r2, [r4, #16]
 800f574:	f8cd a000 	str.w	sl, [sp]
 800f578:	464b      	mov	r3, r9
 800f57a:	aa03      	add	r2, sp, #12
 800f57c:	4621      	mov	r1, r4
 800f57e:	4640      	mov	r0, r8
 800f580:	f7ff fee4 	bl	800f34c <_printf_common>
 800f584:	3001      	adds	r0, #1
 800f586:	d14a      	bne.n	800f61e <_printf_i+0x1f6>
 800f588:	f04f 30ff 	mov.w	r0, #4294967295
 800f58c:	b004      	add	sp, #16
 800f58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f592:	6823      	ldr	r3, [r4, #0]
 800f594:	f043 0320 	orr.w	r3, r3, #32
 800f598:	6023      	str	r3, [r4, #0]
 800f59a:	4833      	ldr	r0, [pc, #204]	; (800f668 <_printf_i+0x240>)
 800f59c:	2778      	movs	r7, #120	; 0x78
 800f59e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f5a2:	6823      	ldr	r3, [r4, #0]
 800f5a4:	6829      	ldr	r1, [r5, #0]
 800f5a6:	061f      	lsls	r7, r3, #24
 800f5a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5ac:	d402      	bmi.n	800f5b4 <_printf_i+0x18c>
 800f5ae:	065f      	lsls	r7, r3, #25
 800f5b0:	bf48      	it	mi
 800f5b2:	b2b6      	uxthmi	r6, r6
 800f5b4:	07df      	lsls	r7, r3, #31
 800f5b6:	bf48      	it	mi
 800f5b8:	f043 0320 	orrmi.w	r3, r3, #32
 800f5bc:	6029      	str	r1, [r5, #0]
 800f5be:	bf48      	it	mi
 800f5c0:	6023      	strmi	r3, [r4, #0]
 800f5c2:	b91e      	cbnz	r6, 800f5cc <_printf_i+0x1a4>
 800f5c4:	6823      	ldr	r3, [r4, #0]
 800f5c6:	f023 0320 	bic.w	r3, r3, #32
 800f5ca:	6023      	str	r3, [r4, #0]
 800f5cc:	2310      	movs	r3, #16
 800f5ce:	e7a7      	b.n	800f520 <_printf_i+0xf8>
 800f5d0:	4824      	ldr	r0, [pc, #144]	; (800f664 <_printf_i+0x23c>)
 800f5d2:	e7e4      	b.n	800f59e <_printf_i+0x176>
 800f5d4:	4615      	mov	r5, r2
 800f5d6:	e7bd      	b.n	800f554 <_printf_i+0x12c>
 800f5d8:	682b      	ldr	r3, [r5, #0]
 800f5da:	6826      	ldr	r6, [r4, #0]
 800f5dc:	6961      	ldr	r1, [r4, #20]
 800f5de:	1d18      	adds	r0, r3, #4
 800f5e0:	6028      	str	r0, [r5, #0]
 800f5e2:	0635      	lsls	r5, r6, #24
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	d501      	bpl.n	800f5ec <_printf_i+0x1c4>
 800f5e8:	6019      	str	r1, [r3, #0]
 800f5ea:	e002      	b.n	800f5f2 <_printf_i+0x1ca>
 800f5ec:	0670      	lsls	r0, r6, #25
 800f5ee:	d5fb      	bpl.n	800f5e8 <_printf_i+0x1c0>
 800f5f0:	8019      	strh	r1, [r3, #0]
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	6123      	str	r3, [r4, #16]
 800f5f6:	4615      	mov	r5, r2
 800f5f8:	e7bc      	b.n	800f574 <_printf_i+0x14c>
 800f5fa:	682b      	ldr	r3, [r5, #0]
 800f5fc:	1d1a      	adds	r2, r3, #4
 800f5fe:	602a      	str	r2, [r5, #0]
 800f600:	681d      	ldr	r5, [r3, #0]
 800f602:	6862      	ldr	r2, [r4, #4]
 800f604:	2100      	movs	r1, #0
 800f606:	4628      	mov	r0, r5
 800f608:	f7f0 fde2 	bl	80001d0 <memchr>
 800f60c:	b108      	cbz	r0, 800f612 <_printf_i+0x1ea>
 800f60e:	1b40      	subs	r0, r0, r5
 800f610:	6060      	str	r0, [r4, #4]
 800f612:	6863      	ldr	r3, [r4, #4]
 800f614:	6123      	str	r3, [r4, #16]
 800f616:	2300      	movs	r3, #0
 800f618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f61c:	e7aa      	b.n	800f574 <_printf_i+0x14c>
 800f61e:	6923      	ldr	r3, [r4, #16]
 800f620:	462a      	mov	r2, r5
 800f622:	4649      	mov	r1, r9
 800f624:	4640      	mov	r0, r8
 800f626:	47d0      	blx	sl
 800f628:	3001      	adds	r0, #1
 800f62a:	d0ad      	beq.n	800f588 <_printf_i+0x160>
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	079b      	lsls	r3, r3, #30
 800f630:	d413      	bmi.n	800f65a <_printf_i+0x232>
 800f632:	68e0      	ldr	r0, [r4, #12]
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	4298      	cmp	r0, r3
 800f638:	bfb8      	it	lt
 800f63a:	4618      	movlt	r0, r3
 800f63c:	e7a6      	b.n	800f58c <_printf_i+0x164>
 800f63e:	2301      	movs	r3, #1
 800f640:	4632      	mov	r2, r6
 800f642:	4649      	mov	r1, r9
 800f644:	4640      	mov	r0, r8
 800f646:	47d0      	blx	sl
 800f648:	3001      	adds	r0, #1
 800f64a:	d09d      	beq.n	800f588 <_printf_i+0x160>
 800f64c:	3501      	adds	r5, #1
 800f64e:	68e3      	ldr	r3, [r4, #12]
 800f650:	9903      	ldr	r1, [sp, #12]
 800f652:	1a5b      	subs	r3, r3, r1
 800f654:	42ab      	cmp	r3, r5
 800f656:	dcf2      	bgt.n	800f63e <_printf_i+0x216>
 800f658:	e7eb      	b.n	800f632 <_printf_i+0x20a>
 800f65a:	2500      	movs	r5, #0
 800f65c:	f104 0619 	add.w	r6, r4, #25
 800f660:	e7f5      	b.n	800f64e <_printf_i+0x226>
 800f662:	bf00      	nop
 800f664:	0801380e 	.word	0x0801380e
 800f668:	0801381f 	.word	0x0801381f

0800f66c <_scanf_float>:
 800f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f670:	b087      	sub	sp, #28
 800f672:	4617      	mov	r7, r2
 800f674:	9303      	str	r3, [sp, #12]
 800f676:	688b      	ldr	r3, [r1, #8]
 800f678:	1e5a      	subs	r2, r3, #1
 800f67a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f67e:	bf83      	ittte	hi
 800f680:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f684:	195b      	addhi	r3, r3, r5
 800f686:	9302      	strhi	r3, [sp, #8]
 800f688:	2300      	movls	r3, #0
 800f68a:	bf86      	itte	hi
 800f68c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f690:	608b      	strhi	r3, [r1, #8]
 800f692:	9302      	strls	r3, [sp, #8]
 800f694:	680b      	ldr	r3, [r1, #0]
 800f696:	468b      	mov	fp, r1
 800f698:	2500      	movs	r5, #0
 800f69a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f69e:	f84b 3b1c 	str.w	r3, [fp], #28
 800f6a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f6a6:	4680      	mov	r8, r0
 800f6a8:	460c      	mov	r4, r1
 800f6aa:	465e      	mov	r6, fp
 800f6ac:	46aa      	mov	sl, r5
 800f6ae:	46a9      	mov	r9, r5
 800f6b0:	9501      	str	r5, [sp, #4]
 800f6b2:	68a2      	ldr	r2, [r4, #8]
 800f6b4:	b152      	cbz	r2, 800f6cc <_scanf_float+0x60>
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	2b4e      	cmp	r3, #78	; 0x4e
 800f6bc:	d864      	bhi.n	800f788 <_scanf_float+0x11c>
 800f6be:	2b40      	cmp	r3, #64	; 0x40
 800f6c0:	d83c      	bhi.n	800f73c <_scanf_float+0xd0>
 800f6c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f6c6:	b2c8      	uxtb	r0, r1
 800f6c8:	280e      	cmp	r0, #14
 800f6ca:	d93a      	bls.n	800f742 <_scanf_float+0xd6>
 800f6cc:	f1b9 0f00 	cmp.w	r9, #0
 800f6d0:	d003      	beq.n	800f6da <_scanf_float+0x6e>
 800f6d2:	6823      	ldr	r3, [r4, #0]
 800f6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6d8:	6023      	str	r3, [r4, #0]
 800f6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6de:	f1ba 0f01 	cmp.w	sl, #1
 800f6e2:	f200 8113 	bhi.w	800f90c <_scanf_float+0x2a0>
 800f6e6:	455e      	cmp	r6, fp
 800f6e8:	f200 8105 	bhi.w	800f8f6 <_scanf_float+0x28a>
 800f6ec:	2501      	movs	r5, #1
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	b007      	add	sp, #28
 800f6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f6fa:	2a0d      	cmp	r2, #13
 800f6fc:	d8e6      	bhi.n	800f6cc <_scanf_float+0x60>
 800f6fe:	a101      	add	r1, pc, #4	; (adr r1, 800f704 <_scanf_float+0x98>)
 800f700:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f704:	0800f843 	.word	0x0800f843
 800f708:	0800f6cd 	.word	0x0800f6cd
 800f70c:	0800f6cd 	.word	0x0800f6cd
 800f710:	0800f6cd 	.word	0x0800f6cd
 800f714:	0800f8a3 	.word	0x0800f8a3
 800f718:	0800f87b 	.word	0x0800f87b
 800f71c:	0800f6cd 	.word	0x0800f6cd
 800f720:	0800f6cd 	.word	0x0800f6cd
 800f724:	0800f851 	.word	0x0800f851
 800f728:	0800f6cd 	.word	0x0800f6cd
 800f72c:	0800f6cd 	.word	0x0800f6cd
 800f730:	0800f6cd 	.word	0x0800f6cd
 800f734:	0800f6cd 	.word	0x0800f6cd
 800f738:	0800f809 	.word	0x0800f809
 800f73c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f740:	e7db      	b.n	800f6fa <_scanf_float+0x8e>
 800f742:	290e      	cmp	r1, #14
 800f744:	d8c2      	bhi.n	800f6cc <_scanf_float+0x60>
 800f746:	a001      	add	r0, pc, #4	; (adr r0, 800f74c <_scanf_float+0xe0>)
 800f748:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f74c:	0800f7fb 	.word	0x0800f7fb
 800f750:	0800f6cd 	.word	0x0800f6cd
 800f754:	0800f7fb 	.word	0x0800f7fb
 800f758:	0800f88f 	.word	0x0800f88f
 800f75c:	0800f6cd 	.word	0x0800f6cd
 800f760:	0800f7a9 	.word	0x0800f7a9
 800f764:	0800f7e5 	.word	0x0800f7e5
 800f768:	0800f7e5 	.word	0x0800f7e5
 800f76c:	0800f7e5 	.word	0x0800f7e5
 800f770:	0800f7e5 	.word	0x0800f7e5
 800f774:	0800f7e5 	.word	0x0800f7e5
 800f778:	0800f7e5 	.word	0x0800f7e5
 800f77c:	0800f7e5 	.word	0x0800f7e5
 800f780:	0800f7e5 	.word	0x0800f7e5
 800f784:	0800f7e5 	.word	0x0800f7e5
 800f788:	2b6e      	cmp	r3, #110	; 0x6e
 800f78a:	d809      	bhi.n	800f7a0 <_scanf_float+0x134>
 800f78c:	2b60      	cmp	r3, #96	; 0x60
 800f78e:	d8b2      	bhi.n	800f6f6 <_scanf_float+0x8a>
 800f790:	2b54      	cmp	r3, #84	; 0x54
 800f792:	d077      	beq.n	800f884 <_scanf_float+0x218>
 800f794:	2b59      	cmp	r3, #89	; 0x59
 800f796:	d199      	bne.n	800f6cc <_scanf_float+0x60>
 800f798:	2d07      	cmp	r5, #7
 800f79a:	d197      	bne.n	800f6cc <_scanf_float+0x60>
 800f79c:	2508      	movs	r5, #8
 800f79e:	e029      	b.n	800f7f4 <_scanf_float+0x188>
 800f7a0:	2b74      	cmp	r3, #116	; 0x74
 800f7a2:	d06f      	beq.n	800f884 <_scanf_float+0x218>
 800f7a4:	2b79      	cmp	r3, #121	; 0x79
 800f7a6:	e7f6      	b.n	800f796 <_scanf_float+0x12a>
 800f7a8:	6821      	ldr	r1, [r4, #0]
 800f7aa:	05c8      	lsls	r0, r1, #23
 800f7ac:	d51a      	bpl.n	800f7e4 <_scanf_float+0x178>
 800f7ae:	9b02      	ldr	r3, [sp, #8]
 800f7b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f7b4:	6021      	str	r1, [r4, #0]
 800f7b6:	f109 0901 	add.w	r9, r9, #1
 800f7ba:	b11b      	cbz	r3, 800f7c4 <_scanf_float+0x158>
 800f7bc:	3b01      	subs	r3, #1
 800f7be:	3201      	adds	r2, #1
 800f7c0:	9302      	str	r3, [sp, #8]
 800f7c2:	60a2      	str	r2, [r4, #8]
 800f7c4:	68a3      	ldr	r3, [r4, #8]
 800f7c6:	3b01      	subs	r3, #1
 800f7c8:	60a3      	str	r3, [r4, #8]
 800f7ca:	6923      	ldr	r3, [r4, #16]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	6123      	str	r3, [r4, #16]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	607b      	str	r3, [r7, #4]
 800f7d8:	f340 8084 	ble.w	800f8e4 <_scanf_float+0x278>
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	603b      	str	r3, [r7, #0]
 800f7e2:	e766      	b.n	800f6b2 <_scanf_float+0x46>
 800f7e4:	eb1a 0f05 	cmn.w	sl, r5
 800f7e8:	f47f af70 	bne.w	800f6cc <_scanf_float+0x60>
 800f7ec:	6822      	ldr	r2, [r4, #0]
 800f7ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f7f2:	6022      	str	r2, [r4, #0]
 800f7f4:	f806 3b01 	strb.w	r3, [r6], #1
 800f7f8:	e7e4      	b.n	800f7c4 <_scanf_float+0x158>
 800f7fa:	6822      	ldr	r2, [r4, #0]
 800f7fc:	0610      	lsls	r0, r2, #24
 800f7fe:	f57f af65 	bpl.w	800f6cc <_scanf_float+0x60>
 800f802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f806:	e7f4      	b.n	800f7f2 <_scanf_float+0x186>
 800f808:	f1ba 0f00 	cmp.w	sl, #0
 800f80c:	d10e      	bne.n	800f82c <_scanf_float+0x1c0>
 800f80e:	f1b9 0f00 	cmp.w	r9, #0
 800f812:	d10e      	bne.n	800f832 <_scanf_float+0x1c6>
 800f814:	6822      	ldr	r2, [r4, #0]
 800f816:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f81a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f81e:	d108      	bne.n	800f832 <_scanf_float+0x1c6>
 800f820:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f824:	6022      	str	r2, [r4, #0]
 800f826:	f04f 0a01 	mov.w	sl, #1
 800f82a:	e7e3      	b.n	800f7f4 <_scanf_float+0x188>
 800f82c:	f1ba 0f02 	cmp.w	sl, #2
 800f830:	d055      	beq.n	800f8de <_scanf_float+0x272>
 800f832:	2d01      	cmp	r5, #1
 800f834:	d002      	beq.n	800f83c <_scanf_float+0x1d0>
 800f836:	2d04      	cmp	r5, #4
 800f838:	f47f af48 	bne.w	800f6cc <_scanf_float+0x60>
 800f83c:	3501      	adds	r5, #1
 800f83e:	b2ed      	uxtb	r5, r5
 800f840:	e7d8      	b.n	800f7f4 <_scanf_float+0x188>
 800f842:	f1ba 0f01 	cmp.w	sl, #1
 800f846:	f47f af41 	bne.w	800f6cc <_scanf_float+0x60>
 800f84a:	f04f 0a02 	mov.w	sl, #2
 800f84e:	e7d1      	b.n	800f7f4 <_scanf_float+0x188>
 800f850:	b97d      	cbnz	r5, 800f872 <_scanf_float+0x206>
 800f852:	f1b9 0f00 	cmp.w	r9, #0
 800f856:	f47f af3c 	bne.w	800f6d2 <_scanf_float+0x66>
 800f85a:	6822      	ldr	r2, [r4, #0]
 800f85c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f860:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f864:	f47f af39 	bne.w	800f6da <_scanf_float+0x6e>
 800f868:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f86c:	6022      	str	r2, [r4, #0]
 800f86e:	2501      	movs	r5, #1
 800f870:	e7c0      	b.n	800f7f4 <_scanf_float+0x188>
 800f872:	2d03      	cmp	r5, #3
 800f874:	d0e2      	beq.n	800f83c <_scanf_float+0x1d0>
 800f876:	2d05      	cmp	r5, #5
 800f878:	e7de      	b.n	800f838 <_scanf_float+0x1cc>
 800f87a:	2d02      	cmp	r5, #2
 800f87c:	f47f af26 	bne.w	800f6cc <_scanf_float+0x60>
 800f880:	2503      	movs	r5, #3
 800f882:	e7b7      	b.n	800f7f4 <_scanf_float+0x188>
 800f884:	2d06      	cmp	r5, #6
 800f886:	f47f af21 	bne.w	800f6cc <_scanf_float+0x60>
 800f88a:	2507      	movs	r5, #7
 800f88c:	e7b2      	b.n	800f7f4 <_scanf_float+0x188>
 800f88e:	6822      	ldr	r2, [r4, #0]
 800f890:	0591      	lsls	r1, r2, #22
 800f892:	f57f af1b 	bpl.w	800f6cc <_scanf_float+0x60>
 800f896:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f89a:	6022      	str	r2, [r4, #0]
 800f89c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f8a0:	e7a8      	b.n	800f7f4 <_scanf_float+0x188>
 800f8a2:	6822      	ldr	r2, [r4, #0]
 800f8a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f8a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f8ac:	d006      	beq.n	800f8bc <_scanf_float+0x250>
 800f8ae:	0550      	lsls	r0, r2, #21
 800f8b0:	f57f af0c 	bpl.w	800f6cc <_scanf_float+0x60>
 800f8b4:	f1b9 0f00 	cmp.w	r9, #0
 800f8b8:	f43f af0f 	beq.w	800f6da <_scanf_float+0x6e>
 800f8bc:	0591      	lsls	r1, r2, #22
 800f8be:	bf58      	it	pl
 800f8c0:	9901      	ldrpl	r1, [sp, #4]
 800f8c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f8c6:	bf58      	it	pl
 800f8c8:	eba9 0101 	subpl.w	r1, r9, r1
 800f8cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f8d0:	bf58      	it	pl
 800f8d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f8d6:	6022      	str	r2, [r4, #0]
 800f8d8:	f04f 0900 	mov.w	r9, #0
 800f8dc:	e78a      	b.n	800f7f4 <_scanf_float+0x188>
 800f8de:	f04f 0a03 	mov.w	sl, #3
 800f8e2:	e787      	b.n	800f7f4 <_scanf_float+0x188>
 800f8e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f8e8:	4639      	mov	r1, r7
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	4798      	blx	r3
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	f43f aedf 	beq.w	800f6b2 <_scanf_float+0x46>
 800f8f4:	e6ea      	b.n	800f6cc <_scanf_float+0x60>
 800f8f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f8fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8fe:	463a      	mov	r2, r7
 800f900:	4640      	mov	r0, r8
 800f902:	4798      	blx	r3
 800f904:	6923      	ldr	r3, [r4, #16]
 800f906:	3b01      	subs	r3, #1
 800f908:	6123      	str	r3, [r4, #16]
 800f90a:	e6ec      	b.n	800f6e6 <_scanf_float+0x7a>
 800f90c:	1e6b      	subs	r3, r5, #1
 800f90e:	2b06      	cmp	r3, #6
 800f910:	d825      	bhi.n	800f95e <_scanf_float+0x2f2>
 800f912:	2d02      	cmp	r5, #2
 800f914:	d836      	bhi.n	800f984 <_scanf_float+0x318>
 800f916:	455e      	cmp	r6, fp
 800f918:	f67f aee8 	bls.w	800f6ec <_scanf_float+0x80>
 800f91c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f920:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f924:	463a      	mov	r2, r7
 800f926:	4640      	mov	r0, r8
 800f928:	4798      	blx	r3
 800f92a:	6923      	ldr	r3, [r4, #16]
 800f92c:	3b01      	subs	r3, #1
 800f92e:	6123      	str	r3, [r4, #16]
 800f930:	e7f1      	b.n	800f916 <_scanf_float+0x2aa>
 800f932:	9802      	ldr	r0, [sp, #8]
 800f934:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f938:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f93c:	9002      	str	r0, [sp, #8]
 800f93e:	463a      	mov	r2, r7
 800f940:	4640      	mov	r0, r8
 800f942:	4798      	blx	r3
 800f944:	6923      	ldr	r3, [r4, #16]
 800f946:	3b01      	subs	r3, #1
 800f948:	6123      	str	r3, [r4, #16]
 800f94a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f94e:	fa5f fa8a 	uxtb.w	sl, sl
 800f952:	f1ba 0f02 	cmp.w	sl, #2
 800f956:	d1ec      	bne.n	800f932 <_scanf_float+0x2c6>
 800f958:	3d03      	subs	r5, #3
 800f95a:	b2ed      	uxtb	r5, r5
 800f95c:	1b76      	subs	r6, r6, r5
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	05da      	lsls	r2, r3, #23
 800f962:	d52f      	bpl.n	800f9c4 <_scanf_float+0x358>
 800f964:	055b      	lsls	r3, r3, #21
 800f966:	d510      	bpl.n	800f98a <_scanf_float+0x31e>
 800f968:	455e      	cmp	r6, fp
 800f96a:	f67f aebf 	bls.w	800f6ec <_scanf_float+0x80>
 800f96e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f976:	463a      	mov	r2, r7
 800f978:	4640      	mov	r0, r8
 800f97a:	4798      	blx	r3
 800f97c:	6923      	ldr	r3, [r4, #16]
 800f97e:	3b01      	subs	r3, #1
 800f980:	6123      	str	r3, [r4, #16]
 800f982:	e7f1      	b.n	800f968 <_scanf_float+0x2fc>
 800f984:	46aa      	mov	sl, r5
 800f986:	9602      	str	r6, [sp, #8]
 800f988:	e7df      	b.n	800f94a <_scanf_float+0x2de>
 800f98a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f98e:	6923      	ldr	r3, [r4, #16]
 800f990:	2965      	cmp	r1, #101	; 0x65
 800f992:	f103 33ff 	add.w	r3, r3, #4294967295
 800f996:	f106 35ff 	add.w	r5, r6, #4294967295
 800f99a:	6123      	str	r3, [r4, #16]
 800f99c:	d00c      	beq.n	800f9b8 <_scanf_float+0x34c>
 800f99e:	2945      	cmp	r1, #69	; 0x45
 800f9a0:	d00a      	beq.n	800f9b8 <_scanf_float+0x34c>
 800f9a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f9a6:	463a      	mov	r2, r7
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	4798      	blx	r3
 800f9ac:	6923      	ldr	r3, [r4, #16]
 800f9ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	1eb5      	subs	r5, r6, #2
 800f9b6:	6123      	str	r3, [r4, #16]
 800f9b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f9bc:	463a      	mov	r2, r7
 800f9be:	4640      	mov	r0, r8
 800f9c0:	4798      	blx	r3
 800f9c2:	462e      	mov	r6, r5
 800f9c4:	6825      	ldr	r5, [r4, #0]
 800f9c6:	f015 0510 	ands.w	r5, r5, #16
 800f9ca:	d158      	bne.n	800fa7e <_scanf_float+0x412>
 800f9cc:	7035      	strb	r5, [r6, #0]
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f9d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9d8:	d11c      	bne.n	800fa14 <_scanf_float+0x3a8>
 800f9da:	9b01      	ldr	r3, [sp, #4]
 800f9dc:	454b      	cmp	r3, r9
 800f9de:	eba3 0209 	sub.w	r2, r3, r9
 800f9e2:	d124      	bne.n	800fa2e <_scanf_float+0x3c2>
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	4659      	mov	r1, fp
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	f002 fc29 	bl	8012240 <_strtod_r>
 800f9ee:	9b03      	ldr	r3, [sp, #12]
 800f9f0:	6821      	ldr	r1, [r4, #0]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f011 0f02 	tst.w	r1, #2
 800f9f8:	ec57 6b10 	vmov	r6, r7, d0
 800f9fc:	f103 0204 	add.w	r2, r3, #4
 800fa00:	d020      	beq.n	800fa44 <_scanf_float+0x3d8>
 800fa02:	9903      	ldr	r1, [sp, #12]
 800fa04:	600a      	str	r2, [r1, #0]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	e9c3 6700 	strd	r6, r7, [r3]
 800fa0c:	68e3      	ldr	r3, [r4, #12]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	60e3      	str	r3, [r4, #12]
 800fa12:	e66c      	b.n	800f6ee <_scanf_float+0x82>
 800fa14:	9b04      	ldr	r3, [sp, #16]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d0e4      	beq.n	800f9e4 <_scanf_float+0x378>
 800fa1a:	9905      	ldr	r1, [sp, #20]
 800fa1c:	230a      	movs	r3, #10
 800fa1e:	462a      	mov	r2, r5
 800fa20:	3101      	adds	r1, #1
 800fa22:	4640      	mov	r0, r8
 800fa24:	f002 fc94 	bl	8012350 <_strtol_r>
 800fa28:	9b04      	ldr	r3, [sp, #16]
 800fa2a:	9e05      	ldr	r6, [sp, #20]
 800fa2c:	1ac2      	subs	r2, r0, r3
 800fa2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fa32:	429e      	cmp	r6, r3
 800fa34:	bf28      	it	cs
 800fa36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fa3a:	4912      	ldr	r1, [pc, #72]	; (800fa84 <_scanf_float+0x418>)
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f000 f8d5 	bl	800fbec <siprintf>
 800fa42:	e7cf      	b.n	800f9e4 <_scanf_float+0x378>
 800fa44:	f011 0f04 	tst.w	r1, #4
 800fa48:	9903      	ldr	r1, [sp, #12]
 800fa4a:	600a      	str	r2, [r1, #0]
 800fa4c:	d1db      	bne.n	800fa06 <_scanf_float+0x39a>
 800fa4e:	f8d3 8000 	ldr.w	r8, [r3]
 800fa52:	ee10 2a10 	vmov	r2, s0
 800fa56:	ee10 0a10 	vmov	r0, s0
 800fa5a:	463b      	mov	r3, r7
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	f7f1 f865 	bl	8000b2c <__aeabi_dcmpun>
 800fa62:	b128      	cbz	r0, 800fa70 <_scanf_float+0x404>
 800fa64:	4808      	ldr	r0, [pc, #32]	; (800fa88 <_scanf_float+0x41c>)
 800fa66:	f000 f9b1 	bl	800fdcc <nanf>
 800fa6a:	ed88 0a00 	vstr	s0, [r8]
 800fa6e:	e7cd      	b.n	800fa0c <_scanf_float+0x3a0>
 800fa70:	4630      	mov	r0, r6
 800fa72:	4639      	mov	r1, r7
 800fa74:	f7f1 f8b8 	bl	8000be8 <__aeabi_d2f>
 800fa78:	f8c8 0000 	str.w	r0, [r8]
 800fa7c:	e7c6      	b.n	800fa0c <_scanf_float+0x3a0>
 800fa7e:	2500      	movs	r5, #0
 800fa80:	e635      	b.n	800f6ee <_scanf_float+0x82>
 800fa82:	bf00      	nop
 800fa84:	08013830 	.word	0x08013830
 800fa88:	08013bc5 	.word	0x08013bc5

0800fa8c <std>:
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	b510      	push	{r4, lr}
 800fa90:	4604      	mov	r4, r0
 800fa92:	e9c0 3300 	strd	r3, r3, [r0]
 800fa96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa9a:	6083      	str	r3, [r0, #8]
 800fa9c:	8181      	strh	r1, [r0, #12]
 800fa9e:	6643      	str	r3, [r0, #100]	; 0x64
 800faa0:	81c2      	strh	r2, [r0, #14]
 800faa2:	6183      	str	r3, [r0, #24]
 800faa4:	4619      	mov	r1, r3
 800faa6:	2208      	movs	r2, #8
 800faa8:	305c      	adds	r0, #92	; 0x5c
 800faaa:	f000 f902 	bl	800fcb2 <memset>
 800faae:	4b05      	ldr	r3, [pc, #20]	; (800fac4 <std+0x38>)
 800fab0:	6263      	str	r3, [r4, #36]	; 0x24
 800fab2:	4b05      	ldr	r3, [pc, #20]	; (800fac8 <std+0x3c>)
 800fab4:	62a3      	str	r3, [r4, #40]	; 0x28
 800fab6:	4b05      	ldr	r3, [pc, #20]	; (800facc <std+0x40>)
 800fab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800faba:	4b05      	ldr	r3, [pc, #20]	; (800fad0 <std+0x44>)
 800fabc:	6224      	str	r4, [r4, #32]
 800fabe:	6323      	str	r3, [r4, #48]	; 0x30
 800fac0:	bd10      	pop	{r4, pc}
 800fac2:	bf00      	nop
 800fac4:	0800fc2d 	.word	0x0800fc2d
 800fac8:	0800fc4f 	.word	0x0800fc4f
 800facc:	0800fc87 	.word	0x0800fc87
 800fad0:	0800fcab 	.word	0x0800fcab

0800fad4 <stdio_exit_handler>:
 800fad4:	4a02      	ldr	r2, [pc, #8]	; (800fae0 <stdio_exit_handler+0xc>)
 800fad6:	4903      	ldr	r1, [pc, #12]	; (800fae4 <stdio_exit_handler+0x10>)
 800fad8:	4803      	ldr	r0, [pc, #12]	; (800fae8 <stdio_exit_handler+0x14>)
 800fada:	f000 b869 	b.w	800fbb0 <_fwalk_sglue>
 800fade:	bf00      	nop
 800fae0:	2000010c 	.word	0x2000010c
 800fae4:	08012711 	.word	0x08012711
 800fae8:	20000118 	.word	0x20000118

0800faec <cleanup_stdio>:
 800faec:	6841      	ldr	r1, [r0, #4]
 800faee:	4b0c      	ldr	r3, [pc, #48]	; (800fb20 <cleanup_stdio+0x34>)
 800faf0:	4299      	cmp	r1, r3
 800faf2:	b510      	push	{r4, lr}
 800faf4:	4604      	mov	r4, r0
 800faf6:	d001      	beq.n	800fafc <cleanup_stdio+0x10>
 800faf8:	f002 fe0a 	bl	8012710 <_fflush_r>
 800fafc:	68a1      	ldr	r1, [r4, #8]
 800fafe:	4b09      	ldr	r3, [pc, #36]	; (800fb24 <cleanup_stdio+0x38>)
 800fb00:	4299      	cmp	r1, r3
 800fb02:	d002      	beq.n	800fb0a <cleanup_stdio+0x1e>
 800fb04:	4620      	mov	r0, r4
 800fb06:	f002 fe03 	bl	8012710 <_fflush_r>
 800fb0a:	68e1      	ldr	r1, [r4, #12]
 800fb0c:	4b06      	ldr	r3, [pc, #24]	; (800fb28 <cleanup_stdio+0x3c>)
 800fb0e:	4299      	cmp	r1, r3
 800fb10:	d004      	beq.n	800fb1c <cleanup_stdio+0x30>
 800fb12:	4620      	mov	r0, r4
 800fb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb18:	f002 bdfa 	b.w	8012710 <_fflush_r>
 800fb1c:	bd10      	pop	{r4, pc}
 800fb1e:	bf00      	nop
 800fb20:	20003a38 	.word	0x20003a38
 800fb24:	20003aa0 	.word	0x20003aa0
 800fb28:	20003b08 	.word	0x20003b08

0800fb2c <global_stdio_init.part.0>:
 800fb2c:	b510      	push	{r4, lr}
 800fb2e:	4b0b      	ldr	r3, [pc, #44]	; (800fb5c <global_stdio_init.part.0+0x30>)
 800fb30:	4c0b      	ldr	r4, [pc, #44]	; (800fb60 <global_stdio_init.part.0+0x34>)
 800fb32:	4a0c      	ldr	r2, [pc, #48]	; (800fb64 <global_stdio_init.part.0+0x38>)
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	4620      	mov	r0, r4
 800fb38:	2200      	movs	r2, #0
 800fb3a:	2104      	movs	r1, #4
 800fb3c:	f7ff ffa6 	bl	800fa8c <std>
 800fb40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fb44:	2201      	movs	r2, #1
 800fb46:	2109      	movs	r1, #9
 800fb48:	f7ff ffa0 	bl	800fa8c <std>
 800fb4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fb50:	2202      	movs	r2, #2
 800fb52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb56:	2112      	movs	r1, #18
 800fb58:	f7ff bf98 	b.w	800fa8c <std>
 800fb5c:	20003b70 	.word	0x20003b70
 800fb60:	20003a38 	.word	0x20003a38
 800fb64:	0800fad5 	.word	0x0800fad5

0800fb68 <__sfp_lock_acquire>:
 800fb68:	4801      	ldr	r0, [pc, #4]	; (800fb70 <__sfp_lock_acquire+0x8>)
 800fb6a:	f000 b91f 	b.w	800fdac <__retarget_lock_acquire_recursive>
 800fb6e:	bf00      	nop
 800fb70:	20003b79 	.word	0x20003b79

0800fb74 <__sfp_lock_release>:
 800fb74:	4801      	ldr	r0, [pc, #4]	; (800fb7c <__sfp_lock_release+0x8>)
 800fb76:	f000 b91a 	b.w	800fdae <__retarget_lock_release_recursive>
 800fb7a:	bf00      	nop
 800fb7c:	20003b79 	.word	0x20003b79

0800fb80 <__sinit>:
 800fb80:	b510      	push	{r4, lr}
 800fb82:	4604      	mov	r4, r0
 800fb84:	f7ff fff0 	bl	800fb68 <__sfp_lock_acquire>
 800fb88:	6a23      	ldr	r3, [r4, #32]
 800fb8a:	b11b      	cbz	r3, 800fb94 <__sinit+0x14>
 800fb8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb90:	f7ff bff0 	b.w	800fb74 <__sfp_lock_release>
 800fb94:	4b04      	ldr	r3, [pc, #16]	; (800fba8 <__sinit+0x28>)
 800fb96:	6223      	str	r3, [r4, #32]
 800fb98:	4b04      	ldr	r3, [pc, #16]	; (800fbac <__sinit+0x2c>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d1f5      	bne.n	800fb8c <__sinit+0xc>
 800fba0:	f7ff ffc4 	bl	800fb2c <global_stdio_init.part.0>
 800fba4:	e7f2      	b.n	800fb8c <__sinit+0xc>
 800fba6:	bf00      	nop
 800fba8:	0800faed 	.word	0x0800faed
 800fbac:	20003b70 	.word	0x20003b70

0800fbb0 <_fwalk_sglue>:
 800fbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbb4:	4607      	mov	r7, r0
 800fbb6:	4688      	mov	r8, r1
 800fbb8:	4614      	mov	r4, r2
 800fbba:	2600      	movs	r6, #0
 800fbbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbc0:	f1b9 0901 	subs.w	r9, r9, #1
 800fbc4:	d505      	bpl.n	800fbd2 <_fwalk_sglue+0x22>
 800fbc6:	6824      	ldr	r4, [r4, #0]
 800fbc8:	2c00      	cmp	r4, #0
 800fbca:	d1f7      	bne.n	800fbbc <_fwalk_sglue+0xc>
 800fbcc:	4630      	mov	r0, r6
 800fbce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbd2:	89ab      	ldrh	r3, [r5, #12]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d907      	bls.n	800fbe8 <_fwalk_sglue+0x38>
 800fbd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	d003      	beq.n	800fbe8 <_fwalk_sglue+0x38>
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	4638      	mov	r0, r7
 800fbe4:	47c0      	blx	r8
 800fbe6:	4306      	orrs	r6, r0
 800fbe8:	3568      	adds	r5, #104	; 0x68
 800fbea:	e7e9      	b.n	800fbc0 <_fwalk_sglue+0x10>

0800fbec <siprintf>:
 800fbec:	b40e      	push	{r1, r2, r3}
 800fbee:	b500      	push	{lr}
 800fbf0:	b09c      	sub	sp, #112	; 0x70
 800fbf2:	ab1d      	add	r3, sp, #116	; 0x74
 800fbf4:	9002      	str	r0, [sp, #8]
 800fbf6:	9006      	str	r0, [sp, #24]
 800fbf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fbfc:	4809      	ldr	r0, [pc, #36]	; (800fc24 <siprintf+0x38>)
 800fbfe:	9107      	str	r1, [sp, #28]
 800fc00:	9104      	str	r1, [sp, #16]
 800fc02:	4909      	ldr	r1, [pc, #36]	; (800fc28 <siprintf+0x3c>)
 800fc04:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc08:	9105      	str	r1, [sp, #20]
 800fc0a:	6800      	ldr	r0, [r0, #0]
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	a902      	add	r1, sp, #8
 800fc10:	f002 fbfa 	bl	8012408 <_svfiprintf_r>
 800fc14:	9b02      	ldr	r3, [sp, #8]
 800fc16:	2200      	movs	r2, #0
 800fc18:	701a      	strb	r2, [r3, #0]
 800fc1a:	b01c      	add	sp, #112	; 0x70
 800fc1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc20:	b003      	add	sp, #12
 800fc22:	4770      	bx	lr
 800fc24:	20000164 	.word	0x20000164
 800fc28:	ffff0208 	.word	0xffff0208

0800fc2c <__sread>:
 800fc2c:	b510      	push	{r4, lr}
 800fc2e:	460c      	mov	r4, r1
 800fc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc34:	f000 f86c 	bl	800fd10 <_read_r>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	bfab      	itete	ge
 800fc3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc3e:	89a3      	ldrhlt	r3, [r4, #12]
 800fc40:	181b      	addge	r3, r3, r0
 800fc42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc46:	bfac      	ite	ge
 800fc48:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc4a:	81a3      	strhlt	r3, [r4, #12]
 800fc4c:	bd10      	pop	{r4, pc}

0800fc4e <__swrite>:
 800fc4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc52:	461f      	mov	r7, r3
 800fc54:	898b      	ldrh	r3, [r1, #12]
 800fc56:	05db      	lsls	r3, r3, #23
 800fc58:	4605      	mov	r5, r0
 800fc5a:	460c      	mov	r4, r1
 800fc5c:	4616      	mov	r6, r2
 800fc5e:	d505      	bpl.n	800fc6c <__swrite+0x1e>
 800fc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc64:	2302      	movs	r3, #2
 800fc66:	2200      	movs	r2, #0
 800fc68:	f000 f840 	bl	800fcec <_lseek_r>
 800fc6c:	89a3      	ldrh	r3, [r4, #12]
 800fc6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc76:	81a3      	strh	r3, [r4, #12]
 800fc78:	4632      	mov	r2, r6
 800fc7a:	463b      	mov	r3, r7
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc82:	f000 b857 	b.w	800fd34 <_write_r>

0800fc86 <__sseek>:
 800fc86:	b510      	push	{r4, lr}
 800fc88:	460c      	mov	r4, r1
 800fc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc8e:	f000 f82d 	bl	800fcec <_lseek_r>
 800fc92:	1c43      	adds	r3, r0, #1
 800fc94:	89a3      	ldrh	r3, [r4, #12]
 800fc96:	bf15      	itete	ne
 800fc98:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fca2:	81a3      	strheq	r3, [r4, #12]
 800fca4:	bf18      	it	ne
 800fca6:	81a3      	strhne	r3, [r4, #12]
 800fca8:	bd10      	pop	{r4, pc}

0800fcaa <__sclose>:
 800fcaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcae:	f000 b80d 	b.w	800fccc <_close_r>

0800fcb2 <memset>:
 800fcb2:	4402      	add	r2, r0
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d100      	bne.n	800fcbc <memset+0xa>
 800fcba:	4770      	bx	lr
 800fcbc:	f803 1b01 	strb.w	r1, [r3], #1
 800fcc0:	e7f9      	b.n	800fcb6 <memset+0x4>
	...

0800fcc4 <_localeconv_r>:
 800fcc4:	4800      	ldr	r0, [pc, #0]	; (800fcc8 <_localeconv_r+0x4>)
 800fcc6:	4770      	bx	lr
 800fcc8:	20000258 	.word	0x20000258

0800fccc <_close_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4d06      	ldr	r5, [pc, #24]	; (800fce8 <_close_r+0x1c>)
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	602b      	str	r3, [r5, #0]
 800fcd8:	f7f3 fac7 	bl	800326a <_close>
 800fcdc:	1c43      	adds	r3, r0, #1
 800fcde:	d102      	bne.n	800fce6 <_close_r+0x1a>
 800fce0:	682b      	ldr	r3, [r5, #0]
 800fce2:	b103      	cbz	r3, 800fce6 <_close_r+0x1a>
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	bd38      	pop	{r3, r4, r5, pc}
 800fce8:	20003b74 	.word	0x20003b74

0800fcec <_lseek_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4d07      	ldr	r5, [pc, #28]	; (800fd0c <_lseek_r+0x20>)
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	602a      	str	r2, [r5, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f7f3 fadc 	bl	80032b8 <_lseek>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_lseek_r+0x1e>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_lseek_r+0x1e>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	20003b74 	.word	0x20003b74

0800fd10 <_read_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	4d07      	ldr	r5, [pc, #28]	; (800fd30 <_read_r+0x20>)
 800fd14:	4604      	mov	r4, r0
 800fd16:	4608      	mov	r0, r1
 800fd18:	4611      	mov	r1, r2
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	602a      	str	r2, [r5, #0]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	f7f3 fa6a 	bl	80031f8 <_read>
 800fd24:	1c43      	adds	r3, r0, #1
 800fd26:	d102      	bne.n	800fd2e <_read_r+0x1e>
 800fd28:	682b      	ldr	r3, [r5, #0]
 800fd2a:	b103      	cbz	r3, 800fd2e <_read_r+0x1e>
 800fd2c:	6023      	str	r3, [r4, #0]
 800fd2e:	bd38      	pop	{r3, r4, r5, pc}
 800fd30:	20003b74 	.word	0x20003b74

0800fd34 <_write_r>:
 800fd34:	b538      	push	{r3, r4, r5, lr}
 800fd36:	4d07      	ldr	r5, [pc, #28]	; (800fd54 <_write_r+0x20>)
 800fd38:	4604      	mov	r4, r0
 800fd3a:	4608      	mov	r0, r1
 800fd3c:	4611      	mov	r1, r2
 800fd3e:	2200      	movs	r2, #0
 800fd40:	602a      	str	r2, [r5, #0]
 800fd42:	461a      	mov	r2, r3
 800fd44:	f7f3 fa75 	bl	8003232 <_write>
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	d102      	bne.n	800fd52 <_write_r+0x1e>
 800fd4c:	682b      	ldr	r3, [r5, #0]
 800fd4e:	b103      	cbz	r3, 800fd52 <_write_r+0x1e>
 800fd50:	6023      	str	r3, [r4, #0]
 800fd52:	bd38      	pop	{r3, r4, r5, pc}
 800fd54:	20003b74 	.word	0x20003b74

0800fd58 <__errno>:
 800fd58:	4b01      	ldr	r3, [pc, #4]	; (800fd60 <__errno+0x8>)
 800fd5a:	6818      	ldr	r0, [r3, #0]
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	20000164 	.word	0x20000164

0800fd64 <__libc_init_array>:
 800fd64:	b570      	push	{r4, r5, r6, lr}
 800fd66:	4d0d      	ldr	r5, [pc, #52]	; (800fd9c <__libc_init_array+0x38>)
 800fd68:	4c0d      	ldr	r4, [pc, #52]	; (800fda0 <__libc_init_array+0x3c>)
 800fd6a:	1b64      	subs	r4, r4, r5
 800fd6c:	10a4      	asrs	r4, r4, #2
 800fd6e:	2600      	movs	r6, #0
 800fd70:	42a6      	cmp	r6, r4
 800fd72:	d109      	bne.n	800fd88 <__libc_init_array+0x24>
 800fd74:	4d0b      	ldr	r5, [pc, #44]	; (800fda4 <__libc_init_array+0x40>)
 800fd76:	4c0c      	ldr	r4, [pc, #48]	; (800fda8 <__libc_init_array+0x44>)
 800fd78:	f003 fbd2 	bl	8013520 <_init>
 800fd7c:	1b64      	subs	r4, r4, r5
 800fd7e:	10a4      	asrs	r4, r4, #2
 800fd80:	2600      	movs	r6, #0
 800fd82:	42a6      	cmp	r6, r4
 800fd84:	d105      	bne.n	800fd92 <__libc_init_array+0x2e>
 800fd86:	bd70      	pop	{r4, r5, r6, pc}
 800fd88:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd8c:	4798      	blx	r3
 800fd8e:	3601      	adds	r6, #1
 800fd90:	e7ee      	b.n	800fd70 <__libc_init_array+0xc>
 800fd92:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd96:	4798      	blx	r3
 800fd98:	3601      	adds	r6, #1
 800fd9a:	e7f2      	b.n	800fd82 <__libc_init_array+0x1e>
 800fd9c:	08013c28 	.word	0x08013c28
 800fda0:	08013c28 	.word	0x08013c28
 800fda4:	08013c28 	.word	0x08013c28
 800fda8:	08013c2c 	.word	0x08013c2c

0800fdac <__retarget_lock_acquire_recursive>:
 800fdac:	4770      	bx	lr

0800fdae <__retarget_lock_release_recursive>:
 800fdae:	4770      	bx	lr

0800fdb0 <memcpy>:
 800fdb0:	440a      	add	r2, r1
 800fdb2:	4291      	cmp	r1, r2
 800fdb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800fdb8:	d100      	bne.n	800fdbc <memcpy+0xc>
 800fdba:	4770      	bx	lr
 800fdbc:	b510      	push	{r4, lr}
 800fdbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fdc6:	4291      	cmp	r1, r2
 800fdc8:	d1f9      	bne.n	800fdbe <memcpy+0xe>
 800fdca:	bd10      	pop	{r4, pc}

0800fdcc <nanf>:
 800fdcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fdd4 <nanf+0x8>
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	7fc00000 	.word	0x7fc00000

0800fdd8 <quorem>:
 800fdd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	6903      	ldr	r3, [r0, #16]
 800fdde:	690c      	ldr	r4, [r1, #16]
 800fde0:	42a3      	cmp	r3, r4
 800fde2:	4607      	mov	r7, r0
 800fde4:	db7e      	blt.n	800fee4 <quorem+0x10c>
 800fde6:	3c01      	subs	r4, #1
 800fde8:	f101 0814 	add.w	r8, r1, #20
 800fdec:	f100 0514 	add.w	r5, r0, #20
 800fdf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdf4:	9301      	str	r3, [sp, #4]
 800fdf6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fdfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	429a      	cmp	r2, r3
 800fe02:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fe06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fe0a:	fbb2 f6f3 	udiv	r6, r2, r3
 800fe0e:	d331      	bcc.n	800fe74 <quorem+0x9c>
 800fe10:	f04f 0e00 	mov.w	lr, #0
 800fe14:	4640      	mov	r0, r8
 800fe16:	46ac      	mov	ip, r5
 800fe18:	46f2      	mov	sl, lr
 800fe1a:	f850 2b04 	ldr.w	r2, [r0], #4
 800fe1e:	b293      	uxth	r3, r2
 800fe20:	fb06 e303 	mla	r3, r6, r3, lr
 800fe24:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe28:	0c1a      	lsrs	r2, r3, #16
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	ebaa 0303 	sub.w	r3, sl, r3
 800fe30:	f8dc a000 	ldr.w	sl, [ip]
 800fe34:	fa13 f38a 	uxtah	r3, r3, sl
 800fe38:	fb06 220e 	mla	r2, r6, lr, r2
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	9b00      	ldr	r3, [sp, #0]
 800fe40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe44:	b292      	uxth	r2, r2
 800fe46:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fe4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe4e:	f8bd 3000 	ldrh.w	r3, [sp]
 800fe52:	4581      	cmp	r9, r0
 800fe54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe58:	f84c 3b04 	str.w	r3, [ip], #4
 800fe5c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe60:	d2db      	bcs.n	800fe1a <quorem+0x42>
 800fe62:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe66:	b92b      	cbnz	r3, 800fe74 <quorem+0x9c>
 800fe68:	9b01      	ldr	r3, [sp, #4]
 800fe6a:	3b04      	subs	r3, #4
 800fe6c:	429d      	cmp	r5, r3
 800fe6e:	461a      	mov	r2, r3
 800fe70:	d32c      	bcc.n	800fecc <quorem+0xf4>
 800fe72:	613c      	str	r4, [r7, #16]
 800fe74:	4638      	mov	r0, r7
 800fe76:	f001 f9ef 	bl	8011258 <__mcmp>
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	db22      	blt.n	800fec4 <quorem+0xec>
 800fe7e:	3601      	adds	r6, #1
 800fe80:	4629      	mov	r1, r5
 800fe82:	2000      	movs	r0, #0
 800fe84:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe88:	f8d1 c000 	ldr.w	ip, [r1]
 800fe8c:	b293      	uxth	r3, r2
 800fe8e:	1ac3      	subs	r3, r0, r3
 800fe90:	0c12      	lsrs	r2, r2, #16
 800fe92:	fa13 f38c 	uxtah	r3, r3, ip
 800fe96:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fe9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fea4:	45c1      	cmp	r9, r8
 800fea6:	f841 3b04 	str.w	r3, [r1], #4
 800feaa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800feae:	d2e9      	bcs.n	800fe84 <quorem+0xac>
 800feb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800feb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800feb8:	b922      	cbnz	r2, 800fec4 <quorem+0xec>
 800feba:	3b04      	subs	r3, #4
 800febc:	429d      	cmp	r5, r3
 800febe:	461a      	mov	r2, r3
 800fec0:	d30a      	bcc.n	800fed8 <quorem+0x100>
 800fec2:	613c      	str	r4, [r7, #16]
 800fec4:	4630      	mov	r0, r6
 800fec6:	b003      	add	sp, #12
 800fec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fecc:	6812      	ldr	r2, [r2, #0]
 800fece:	3b04      	subs	r3, #4
 800fed0:	2a00      	cmp	r2, #0
 800fed2:	d1ce      	bne.n	800fe72 <quorem+0x9a>
 800fed4:	3c01      	subs	r4, #1
 800fed6:	e7c9      	b.n	800fe6c <quorem+0x94>
 800fed8:	6812      	ldr	r2, [r2, #0]
 800feda:	3b04      	subs	r3, #4
 800fedc:	2a00      	cmp	r2, #0
 800fede:	d1f0      	bne.n	800fec2 <quorem+0xea>
 800fee0:	3c01      	subs	r4, #1
 800fee2:	e7eb      	b.n	800febc <quorem+0xe4>
 800fee4:	2000      	movs	r0, #0
 800fee6:	e7ee      	b.n	800fec6 <quorem+0xee>

0800fee8 <_dtoa_r>:
 800fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feec:	ed2d 8b04 	vpush	{d8-d9}
 800fef0:	69c5      	ldr	r5, [r0, #28]
 800fef2:	b093      	sub	sp, #76	; 0x4c
 800fef4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fef8:	ec57 6b10 	vmov	r6, r7, d0
 800fefc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ff00:	9107      	str	r1, [sp, #28]
 800ff02:	4604      	mov	r4, r0
 800ff04:	920a      	str	r2, [sp, #40]	; 0x28
 800ff06:	930d      	str	r3, [sp, #52]	; 0x34
 800ff08:	b975      	cbnz	r5, 800ff28 <_dtoa_r+0x40>
 800ff0a:	2010      	movs	r0, #16
 800ff0c:	f000 fe2a 	bl	8010b64 <malloc>
 800ff10:	4602      	mov	r2, r0
 800ff12:	61e0      	str	r0, [r4, #28]
 800ff14:	b920      	cbnz	r0, 800ff20 <_dtoa_r+0x38>
 800ff16:	4bae      	ldr	r3, [pc, #696]	; (80101d0 <_dtoa_r+0x2e8>)
 800ff18:	21ef      	movs	r1, #239	; 0xef
 800ff1a:	48ae      	ldr	r0, [pc, #696]	; (80101d4 <_dtoa_r+0x2ec>)
 800ff1c:	f002 fc64 	bl	80127e8 <__assert_func>
 800ff20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff24:	6005      	str	r5, [r0, #0]
 800ff26:	60c5      	str	r5, [r0, #12]
 800ff28:	69e3      	ldr	r3, [r4, #28]
 800ff2a:	6819      	ldr	r1, [r3, #0]
 800ff2c:	b151      	cbz	r1, 800ff44 <_dtoa_r+0x5c>
 800ff2e:	685a      	ldr	r2, [r3, #4]
 800ff30:	604a      	str	r2, [r1, #4]
 800ff32:	2301      	movs	r3, #1
 800ff34:	4093      	lsls	r3, r2
 800ff36:	608b      	str	r3, [r1, #8]
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f000 ff07 	bl	8010d4c <_Bfree>
 800ff3e:	69e3      	ldr	r3, [r4, #28]
 800ff40:	2200      	movs	r2, #0
 800ff42:	601a      	str	r2, [r3, #0]
 800ff44:	1e3b      	subs	r3, r7, #0
 800ff46:	bfbb      	ittet	lt
 800ff48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ff4c:	9303      	strlt	r3, [sp, #12]
 800ff4e:	2300      	movge	r3, #0
 800ff50:	2201      	movlt	r2, #1
 800ff52:	bfac      	ite	ge
 800ff54:	f8c8 3000 	strge.w	r3, [r8]
 800ff58:	f8c8 2000 	strlt.w	r2, [r8]
 800ff5c:	4b9e      	ldr	r3, [pc, #632]	; (80101d8 <_dtoa_r+0x2f0>)
 800ff5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ff62:	ea33 0308 	bics.w	r3, r3, r8
 800ff66:	d11b      	bne.n	800ffa0 <_dtoa_r+0xb8>
 800ff68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff6a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff6e:	6013      	str	r3, [r2, #0]
 800ff70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ff74:	4333      	orrs	r3, r6
 800ff76:	f000 8593 	beq.w	8010aa0 <_dtoa_r+0xbb8>
 800ff7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff7c:	b963      	cbnz	r3, 800ff98 <_dtoa_r+0xb0>
 800ff7e:	4b97      	ldr	r3, [pc, #604]	; (80101dc <_dtoa_r+0x2f4>)
 800ff80:	e027      	b.n	800ffd2 <_dtoa_r+0xea>
 800ff82:	4b97      	ldr	r3, [pc, #604]	; (80101e0 <_dtoa_r+0x2f8>)
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	3308      	adds	r3, #8
 800ff88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ff8a:	6013      	str	r3, [r2, #0]
 800ff8c:	9800      	ldr	r0, [sp, #0]
 800ff8e:	b013      	add	sp, #76	; 0x4c
 800ff90:	ecbd 8b04 	vpop	{d8-d9}
 800ff94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff98:	4b90      	ldr	r3, [pc, #576]	; (80101dc <_dtoa_r+0x2f4>)
 800ff9a:	9300      	str	r3, [sp, #0]
 800ff9c:	3303      	adds	r3, #3
 800ff9e:	e7f3      	b.n	800ff88 <_dtoa_r+0xa0>
 800ffa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	ec51 0b17 	vmov	r0, r1, d7
 800ffaa:	eeb0 8a47 	vmov.f32	s16, s14
 800ffae:	eef0 8a67 	vmov.f32	s17, s15
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f7f0 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffb8:	4681      	mov	r9, r0
 800ffba:	b160      	cbz	r0, 800ffd6 <_dtoa_r+0xee>
 800ffbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	6013      	str	r3, [r2, #0]
 800ffc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f000 8568 	beq.w	8010a9a <_dtoa_r+0xbb2>
 800ffca:	4b86      	ldr	r3, [pc, #536]	; (80101e4 <_dtoa_r+0x2fc>)
 800ffcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ffce:	6013      	str	r3, [r2, #0]
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	e7da      	b.n	800ff8c <_dtoa_r+0xa4>
 800ffd6:	aa10      	add	r2, sp, #64	; 0x40
 800ffd8:	a911      	add	r1, sp, #68	; 0x44
 800ffda:	4620      	mov	r0, r4
 800ffdc:	eeb0 0a48 	vmov.f32	s0, s16
 800ffe0:	eef0 0a68 	vmov.f32	s1, s17
 800ffe4:	f001 fa4e 	bl	8011484 <__d2b>
 800ffe8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ffec:	4682      	mov	sl, r0
 800ffee:	2d00      	cmp	r5, #0
 800fff0:	d07f      	beq.n	80100f2 <_dtoa_r+0x20a>
 800fff2:	ee18 3a90 	vmov	r3, s17
 800fff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fffa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fffe:	ec51 0b18 	vmov	r0, r1, d8
 8010002:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801000a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801000e:	4619      	mov	r1, r3
 8010010:	2200      	movs	r2, #0
 8010012:	4b75      	ldr	r3, [pc, #468]	; (80101e8 <_dtoa_r+0x300>)
 8010014:	f7f0 f938 	bl	8000288 <__aeabi_dsub>
 8010018:	a367      	add	r3, pc, #412	; (adr r3, 80101b8 <_dtoa_r+0x2d0>)
 801001a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001e:	f7f0 faeb 	bl	80005f8 <__aeabi_dmul>
 8010022:	a367      	add	r3, pc, #412	; (adr r3, 80101c0 <_dtoa_r+0x2d8>)
 8010024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010028:	f7f0 f930 	bl	800028c <__adddf3>
 801002c:	4606      	mov	r6, r0
 801002e:	4628      	mov	r0, r5
 8010030:	460f      	mov	r7, r1
 8010032:	f7f0 fa77 	bl	8000524 <__aeabi_i2d>
 8010036:	a364      	add	r3, pc, #400	; (adr r3, 80101c8 <_dtoa_r+0x2e0>)
 8010038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003c:	f7f0 fadc 	bl	80005f8 <__aeabi_dmul>
 8010040:	4602      	mov	r2, r0
 8010042:	460b      	mov	r3, r1
 8010044:	4630      	mov	r0, r6
 8010046:	4639      	mov	r1, r7
 8010048:	f7f0 f920 	bl	800028c <__adddf3>
 801004c:	4606      	mov	r6, r0
 801004e:	460f      	mov	r7, r1
 8010050:	f7f0 fd82 	bl	8000b58 <__aeabi_d2iz>
 8010054:	2200      	movs	r2, #0
 8010056:	4683      	mov	fp, r0
 8010058:	2300      	movs	r3, #0
 801005a:	4630      	mov	r0, r6
 801005c:	4639      	mov	r1, r7
 801005e:	f7f0 fd3d 	bl	8000adc <__aeabi_dcmplt>
 8010062:	b148      	cbz	r0, 8010078 <_dtoa_r+0x190>
 8010064:	4658      	mov	r0, fp
 8010066:	f7f0 fa5d 	bl	8000524 <__aeabi_i2d>
 801006a:	4632      	mov	r2, r6
 801006c:	463b      	mov	r3, r7
 801006e:	f7f0 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010072:	b908      	cbnz	r0, 8010078 <_dtoa_r+0x190>
 8010074:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010078:	f1bb 0f16 	cmp.w	fp, #22
 801007c:	d857      	bhi.n	801012e <_dtoa_r+0x246>
 801007e:	4b5b      	ldr	r3, [pc, #364]	; (80101ec <_dtoa_r+0x304>)
 8010080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010088:	ec51 0b18 	vmov	r0, r1, d8
 801008c:	f7f0 fd26 	bl	8000adc <__aeabi_dcmplt>
 8010090:	2800      	cmp	r0, #0
 8010092:	d04e      	beq.n	8010132 <_dtoa_r+0x24a>
 8010094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010098:	2300      	movs	r3, #0
 801009a:	930c      	str	r3, [sp, #48]	; 0x30
 801009c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801009e:	1b5b      	subs	r3, r3, r5
 80100a0:	1e5a      	subs	r2, r3, #1
 80100a2:	bf45      	ittet	mi
 80100a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80100a8:	9305      	strmi	r3, [sp, #20]
 80100aa:	2300      	movpl	r3, #0
 80100ac:	2300      	movmi	r3, #0
 80100ae:	9206      	str	r2, [sp, #24]
 80100b0:	bf54      	ite	pl
 80100b2:	9305      	strpl	r3, [sp, #20]
 80100b4:	9306      	strmi	r3, [sp, #24]
 80100b6:	f1bb 0f00 	cmp.w	fp, #0
 80100ba:	db3c      	blt.n	8010136 <_dtoa_r+0x24e>
 80100bc:	9b06      	ldr	r3, [sp, #24]
 80100be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80100c2:	445b      	add	r3, fp
 80100c4:	9306      	str	r3, [sp, #24]
 80100c6:	2300      	movs	r3, #0
 80100c8:	9308      	str	r3, [sp, #32]
 80100ca:	9b07      	ldr	r3, [sp, #28]
 80100cc:	2b09      	cmp	r3, #9
 80100ce:	d868      	bhi.n	80101a2 <_dtoa_r+0x2ba>
 80100d0:	2b05      	cmp	r3, #5
 80100d2:	bfc4      	itt	gt
 80100d4:	3b04      	subgt	r3, #4
 80100d6:	9307      	strgt	r3, [sp, #28]
 80100d8:	9b07      	ldr	r3, [sp, #28]
 80100da:	f1a3 0302 	sub.w	r3, r3, #2
 80100de:	bfcc      	ite	gt
 80100e0:	2500      	movgt	r5, #0
 80100e2:	2501      	movle	r5, #1
 80100e4:	2b03      	cmp	r3, #3
 80100e6:	f200 8085 	bhi.w	80101f4 <_dtoa_r+0x30c>
 80100ea:	e8df f003 	tbb	[pc, r3]
 80100ee:	3b2e      	.short	0x3b2e
 80100f0:	5839      	.short	0x5839
 80100f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80100f6:	441d      	add	r5, r3
 80100f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80100fc:	2b20      	cmp	r3, #32
 80100fe:	bfc1      	itttt	gt
 8010100:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010104:	fa08 f803 	lslgt.w	r8, r8, r3
 8010108:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801010c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010110:	bfd6      	itet	le
 8010112:	f1c3 0320 	rsble	r3, r3, #32
 8010116:	ea48 0003 	orrgt.w	r0, r8, r3
 801011a:	fa06 f003 	lslle.w	r0, r6, r3
 801011e:	f7f0 f9f1 	bl	8000504 <__aeabi_ui2d>
 8010122:	2201      	movs	r2, #1
 8010124:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010128:	3d01      	subs	r5, #1
 801012a:	920e      	str	r2, [sp, #56]	; 0x38
 801012c:	e76f      	b.n	801000e <_dtoa_r+0x126>
 801012e:	2301      	movs	r3, #1
 8010130:	e7b3      	b.n	801009a <_dtoa_r+0x1b2>
 8010132:	900c      	str	r0, [sp, #48]	; 0x30
 8010134:	e7b2      	b.n	801009c <_dtoa_r+0x1b4>
 8010136:	9b05      	ldr	r3, [sp, #20]
 8010138:	eba3 030b 	sub.w	r3, r3, fp
 801013c:	9305      	str	r3, [sp, #20]
 801013e:	f1cb 0300 	rsb	r3, fp, #0
 8010142:	9308      	str	r3, [sp, #32]
 8010144:	2300      	movs	r3, #0
 8010146:	930b      	str	r3, [sp, #44]	; 0x2c
 8010148:	e7bf      	b.n	80100ca <_dtoa_r+0x1e2>
 801014a:	2300      	movs	r3, #0
 801014c:	9309      	str	r3, [sp, #36]	; 0x24
 801014e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010150:	2b00      	cmp	r3, #0
 8010152:	dc52      	bgt.n	80101fa <_dtoa_r+0x312>
 8010154:	2301      	movs	r3, #1
 8010156:	9301      	str	r3, [sp, #4]
 8010158:	9304      	str	r3, [sp, #16]
 801015a:	461a      	mov	r2, r3
 801015c:	920a      	str	r2, [sp, #40]	; 0x28
 801015e:	e00b      	b.n	8010178 <_dtoa_r+0x290>
 8010160:	2301      	movs	r3, #1
 8010162:	e7f3      	b.n	801014c <_dtoa_r+0x264>
 8010164:	2300      	movs	r3, #0
 8010166:	9309      	str	r3, [sp, #36]	; 0x24
 8010168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801016a:	445b      	add	r3, fp
 801016c:	9301      	str	r3, [sp, #4]
 801016e:	3301      	adds	r3, #1
 8010170:	2b01      	cmp	r3, #1
 8010172:	9304      	str	r3, [sp, #16]
 8010174:	bfb8      	it	lt
 8010176:	2301      	movlt	r3, #1
 8010178:	69e0      	ldr	r0, [r4, #28]
 801017a:	2100      	movs	r1, #0
 801017c:	2204      	movs	r2, #4
 801017e:	f102 0614 	add.w	r6, r2, #20
 8010182:	429e      	cmp	r6, r3
 8010184:	d93d      	bls.n	8010202 <_dtoa_r+0x31a>
 8010186:	6041      	str	r1, [r0, #4]
 8010188:	4620      	mov	r0, r4
 801018a:	f000 fd9f 	bl	8010ccc <_Balloc>
 801018e:	9000      	str	r0, [sp, #0]
 8010190:	2800      	cmp	r0, #0
 8010192:	d139      	bne.n	8010208 <_dtoa_r+0x320>
 8010194:	4b16      	ldr	r3, [pc, #88]	; (80101f0 <_dtoa_r+0x308>)
 8010196:	4602      	mov	r2, r0
 8010198:	f240 11af 	movw	r1, #431	; 0x1af
 801019c:	e6bd      	b.n	800ff1a <_dtoa_r+0x32>
 801019e:	2301      	movs	r3, #1
 80101a0:	e7e1      	b.n	8010166 <_dtoa_r+0x27e>
 80101a2:	2501      	movs	r5, #1
 80101a4:	2300      	movs	r3, #0
 80101a6:	9307      	str	r3, [sp, #28]
 80101a8:	9509      	str	r5, [sp, #36]	; 0x24
 80101aa:	f04f 33ff 	mov.w	r3, #4294967295
 80101ae:	9301      	str	r3, [sp, #4]
 80101b0:	9304      	str	r3, [sp, #16]
 80101b2:	2200      	movs	r2, #0
 80101b4:	2312      	movs	r3, #18
 80101b6:	e7d1      	b.n	801015c <_dtoa_r+0x274>
 80101b8:	636f4361 	.word	0x636f4361
 80101bc:	3fd287a7 	.word	0x3fd287a7
 80101c0:	8b60c8b3 	.word	0x8b60c8b3
 80101c4:	3fc68a28 	.word	0x3fc68a28
 80101c8:	509f79fb 	.word	0x509f79fb
 80101cc:	3fd34413 	.word	0x3fd34413
 80101d0:	08013842 	.word	0x08013842
 80101d4:	08013859 	.word	0x08013859
 80101d8:	7ff00000 	.word	0x7ff00000
 80101dc:	0801383e 	.word	0x0801383e
 80101e0:	08013835 	.word	0x08013835
 80101e4:	0801380d 	.word	0x0801380d
 80101e8:	3ff80000 	.word	0x3ff80000
 80101ec:	08013948 	.word	0x08013948
 80101f0:	080138b1 	.word	0x080138b1
 80101f4:	2301      	movs	r3, #1
 80101f6:	9309      	str	r3, [sp, #36]	; 0x24
 80101f8:	e7d7      	b.n	80101aa <_dtoa_r+0x2c2>
 80101fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101fc:	9301      	str	r3, [sp, #4]
 80101fe:	9304      	str	r3, [sp, #16]
 8010200:	e7ba      	b.n	8010178 <_dtoa_r+0x290>
 8010202:	3101      	adds	r1, #1
 8010204:	0052      	lsls	r2, r2, #1
 8010206:	e7ba      	b.n	801017e <_dtoa_r+0x296>
 8010208:	69e3      	ldr	r3, [r4, #28]
 801020a:	9a00      	ldr	r2, [sp, #0]
 801020c:	601a      	str	r2, [r3, #0]
 801020e:	9b04      	ldr	r3, [sp, #16]
 8010210:	2b0e      	cmp	r3, #14
 8010212:	f200 80a8 	bhi.w	8010366 <_dtoa_r+0x47e>
 8010216:	2d00      	cmp	r5, #0
 8010218:	f000 80a5 	beq.w	8010366 <_dtoa_r+0x47e>
 801021c:	f1bb 0f00 	cmp.w	fp, #0
 8010220:	dd38      	ble.n	8010294 <_dtoa_r+0x3ac>
 8010222:	4bc0      	ldr	r3, [pc, #768]	; (8010524 <_dtoa_r+0x63c>)
 8010224:	f00b 020f 	and.w	r2, fp, #15
 8010228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801022c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010230:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010234:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010238:	d019      	beq.n	801026e <_dtoa_r+0x386>
 801023a:	4bbb      	ldr	r3, [pc, #748]	; (8010528 <_dtoa_r+0x640>)
 801023c:	ec51 0b18 	vmov	r0, r1, d8
 8010240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010244:	f7f0 fb02 	bl	800084c <__aeabi_ddiv>
 8010248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801024c:	f008 080f 	and.w	r8, r8, #15
 8010250:	2503      	movs	r5, #3
 8010252:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010528 <_dtoa_r+0x640>
 8010256:	f1b8 0f00 	cmp.w	r8, #0
 801025a:	d10a      	bne.n	8010272 <_dtoa_r+0x38a>
 801025c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010260:	4632      	mov	r2, r6
 8010262:	463b      	mov	r3, r7
 8010264:	f7f0 faf2 	bl	800084c <__aeabi_ddiv>
 8010268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801026c:	e02b      	b.n	80102c6 <_dtoa_r+0x3de>
 801026e:	2502      	movs	r5, #2
 8010270:	e7ef      	b.n	8010252 <_dtoa_r+0x36a>
 8010272:	f018 0f01 	tst.w	r8, #1
 8010276:	d008      	beq.n	801028a <_dtoa_r+0x3a2>
 8010278:	4630      	mov	r0, r6
 801027a:	4639      	mov	r1, r7
 801027c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010280:	f7f0 f9ba 	bl	80005f8 <__aeabi_dmul>
 8010284:	3501      	adds	r5, #1
 8010286:	4606      	mov	r6, r0
 8010288:	460f      	mov	r7, r1
 801028a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801028e:	f109 0908 	add.w	r9, r9, #8
 8010292:	e7e0      	b.n	8010256 <_dtoa_r+0x36e>
 8010294:	f000 809f 	beq.w	80103d6 <_dtoa_r+0x4ee>
 8010298:	f1cb 0600 	rsb	r6, fp, #0
 801029c:	4ba1      	ldr	r3, [pc, #644]	; (8010524 <_dtoa_r+0x63c>)
 801029e:	4fa2      	ldr	r7, [pc, #648]	; (8010528 <_dtoa_r+0x640>)
 80102a0:	f006 020f 	and.w	r2, r6, #15
 80102a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80102a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ac:	ec51 0b18 	vmov	r0, r1, d8
 80102b0:	f7f0 f9a2 	bl	80005f8 <__aeabi_dmul>
 80102b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102b8:	1136      	asrs	r6, r6, #4
 80102ba:	2300      	movs	r3, #0
 80102bc:	2502      	movs	r5, #2
 80102be:	2e00      	cmp	r6, #0
 80102c0:	d17e      	bne.n	80103c0 <_dtoa_r+0x4d8>
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d1d0      	bne.n	8010268 <_dtoa_r+0x380>
 80102c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f000 8084 	beq.w	80103da <_dtoa_r+0x4f2>
 80102d2:	4b96      	ldr	r3, [pc, #600]	; (801052c <_dtoa_r+0x644>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	4640      	mov	r0, r8
 80102d8:	4649      	mov	r1, r9
 80102da:	f7f0 fbff 	bl	8000adc <__aeabi_dcmplt>
 80102de:	2800      	cmp	r0, #0
 80102e0:	d07b      	beq.n	80103da <_dtoa_r+0x4f2>
 80102e2:	9b04      	ldr	r3, [sp, #16]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d078      	beq.n	80103da <_dtoa_r+0x4f2>
 80102e8:	9b01      	ldr	r3, [sp, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	dd39      	ble.n	8010362 <_dtoa_r+0x47a>
 80102ee:	4b90      	ldr	r3, [pc, #576]	; (8010530 <_dtoa_r+0x648>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	4640      	mov	r0, r8
 80102f4:	4649      	mov	r1, r9
 80102f6:	f7f0 f97f 	bl	80005f8 <__aeabi_dmul>
 80102fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102fe:	9e01      	ldr	r6, [sp, #4]
 8010300:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010304:	3501      	adds	r5, #1
 8010306:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801030a:	4628      	mov	r0, r5
 801030c:	f7f0 f90a 	bl	8000524 <__aeabi_i2d>
 8010310:	4642      	mov	r2, r8
 8010312:	464b      	mov	r3, r9
 8010314:	f7f0 f970 	bl	80005f8 <__aeabi_dmul>
 8010318:	4b86      	ldr	r3, [pc, #536]	; (8010534 <_dtoa_r+0x64c>)
 801031a:	2200      	movs	r2, #0
 801031c:	f7ef ffb6 	bl	800028c <__adddf3>
 8010320:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010328:	9303      	str	r3, [sp, #12]
 801032a:	2e00      	cmp	r6, #0
 801032c:	d158      	bne.n	80103e0 <_dtoa_r+0x4f8>
 801032e:	4b82      	ldr	r3, [pc, #520]	; (8010538 <_dtoa_r+0x650>)
 8010330:	2200      	movs	r2, #0
 8010332:	4640      	mov	r0, r8
 8010334:	4649      	mov	r1, r9
 8010336:	f7ef ffa7 	bl	8000288 <__aeabi_dsub>
 801033a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801033e:	4680      	mov	r8, r0
 8010340:	4689      	mov	r9, r1
 8010342:	f7f0 fbe9 	bl	8000b18 <__aeabi_dcmpgt>
 8010346:	2800      	cmp	r0, #0
 8010348:	f040 8296 	bne.w	8010878 <_dtoa_r+0x990>
 801034c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010350:	4640      	mov	r0, r8
 8010352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010356:	4649      	mov	r1, r9
 8010358:	f7f0 fbc0 	bl	8000adc <__aeabi_dcmplt>
 801035c:	2800      	cmp	r0, #0
 801035e:	f040 8289 	bne.w	8010874 <_dtoa_r+0x98c>
 8010362:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010368:	2b00      	cmp	r3, #0
 801036a:	f2c0 814e 	blt.w	801060a <_dtoa_r+0x722>
 801036e:	f1bb 0f0e 	cmp.w	fp, #14
 8010372:	f300 814a 	bgt.w	801060a <_dtoa_r+0x722>
 8010376:	4b6b      	ldr	r3, [pc, #428]	; (8010524 <_dtoa_r+0x63c>)
 8010378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801037c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010382:	2b00      	cmp	r3, #0
 8010384:	f280 80dc 	bge.w	8010540 <_dtoa_r+0x658>
 8010388:	9b04      	ldr	r3, [sp, #16]
 801038a:	2b00      	cmp	r3, #0
 801038c:	f300 80d8 	bgt.w	8010540 <_dtoa_r+0x658>
 8010390:	f040 826f 	bne.w	8010872 <_dtoa_r+0x98a>
 8010394:	4b68      	ldr	r3, [pc, #416]	; (8010538 <_dtoa_r+0x650>)
 8010396:	2200      	movs	r2, #0
 8010398:	4640      	mov	r0, r8
 801039a:	4649      	mov	r1, r9
 801039c:	f7f0 f92c 	bl	80005f8 <__aeabi_dmul>
 80103a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80103a4:	f7f0 fbae 	bl	8000b04 <__aeabi_dcmpge>
 80103a8:	9e04      	ldr	r6, [sp, #16]
 80103aa:	4637      	mov	r7, r6
 80103ac:	2800      	cmp	r0, #0
 80103ae:	f040 8245 	bne.w	801083c <_dtoa_r+0x954>
 80103b2:	9d00      	ldr	r5, [sp, #0]
 80103b4:	2331      	movs	r3, #49	; 0x31
 80103b6:	f805 3b01 	strb.w	r3, [r5], #1
 80103ba:	f10b 0b01 	add.w	fp, fp, #1
 80103be:	e241      	b.n	8010844 <_dtoa_r+0x95c>
 80103c0:	07f2      	lsls	r2, r6, #31
 80103c2:	d505      	bpl.n	80103d0 <_dtoa_r+0x4e8>
 80103c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103c8:	f7f0 f916 	bl	80005f8 <__aeabi_dmul>
 80103cc:	3501      	adds	r5, #1
 80103ce:	2301      	movs	r3, #1
 80103d0:	1076      	asrs	r6, r6, #1
 80103d2:	3708      	adds	r7, #8
 80103d4:	e773      	b.n	80102be <_dtoa_r+0x3d6>
 80103d6:	2502      	movs	r5, #2
 80103d8:	e775      	b.n	80102c6 <_dtoa_r+0x3de>
 80103da:	9e04      	ldr	r6, [sp, #16]
 80103dc:	465f      	mov	r7, fp
 80103de:	e792      	b.n	8010306 <_dtoa_r+0x41e>
 80103e0:	9900      	ldr	r1, [sp, #0]
 80103e2:	4b50      	ldr	r3, [pc, #320]	; (8010524 <_dtoa_r+0x63c>)
 80103e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103e8:	4431      	add	r1, r6
 80103ea:	9102      	str	r1, [sp, #8]
 80103ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80103ee:	eeb0 9a47 	vmov.f32	s18, s14
 80103f2:	eef0 9a67 	vmov.f32	s19, s15
 80103f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80103fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103fe:	2900      	cmp	r1, #0
 8010400:	d044      	beq.n	801048c <_dtoa_r+0x5a4>
 8010402:	494e      	ldr	r1, [pc, #312]	; (801053c <_dtoa_r+0x654>)
 8010404:	2000      	movs	r0, #0
 8010406:	f7f0 fa21 	bl	800084c <__aeabi_ddiv>
 801040a:	ec53 2b19 	vmov	r2, r3, d9
 801040e:	f7ef ff3b 	bl	8000288 <__aeabi_dsub>
 8010412:	9d00      	ldr	r5, [sp, #0]
 8010414:	ec41 0b19 	vmov	d9, r0, r1
 8010418:	4649      	mov	r1, r9
 801041a:	4640      	mov	r0, r8
 801041c:	f7f0 fb9c 	bl	8000b58 <__aeabi_d2iz>
 8010420:	4606      	mov	r6, r0
 8010422:	f7f0 f87f 	bl	8000524 <__aeabi_i2d>
 8010426:	4602      	mov	r2, r0
 8010428:	460b      	mov	r3, r1
 801042a:	4640      	mov	r0, r8
 801042c:	4649      	mov	r1, r9
 801042e:	f7ef ff2b 	bl	8000288 <__aeabi_dsub>
 8010432:	3630      	adds	r6, #48	; 0x30
 8010434:	f805 6b01 	strb.w	r6, [r5], #1
 8010438:	ec53 2b19 	vmov	r2, r3, d9
 801043c:	4680      	mov	r8, r0
 801043e:	4689      	mov	r9, r1
 8010440:	f7f0 fb4c 	bl	8000adc <__aeabi_dcmplt>
 8010444:	2800      	cmp	r0, #0
 8010446:	d164      	bne.n	8010512 <_dtoa_r+0x62a>
 8010448:	4642      	mov	r2, r8
 801044a:	464b      	mov	r3, r9
 801044c:	4937      	ldr	r1, [pc, #220]	; (801052c <_dtoa_r+0x644>)
 801044e:	2000      	movs	r0, #0
 8010450:	f7ef ff1a 	bl	8000288 <__aeabi_dsub>
 8010454:	ec53 2b19 	vmov	r2, r3, d9
 8010458:	f7f0 fb40 	bl	8000adc <__aeabi_dcmplt>
 801045c:	2800      	cmp	r0, #0
 801045e:	f040 80b6 	bne.w	80105ce <_dtoa_r+0x6e6>
 8010462:	9b02      	ldr	r3, [sp, #8]
 8010464:	429d      	cmp	r5, r3
 8010466:	f43f af7c 	beq.w	8010362 <_dtoa_r+0x47a>
 801046a:	4b31      	ldr	r3, [pc, #196]	; (8010530 <_dtoa_r+0x648>)
 801046c:	ec51 0b19 	vmov	r0, r1, d9
 8010470:	2200      	movs	r2, #0
 8010472:	f7f0 f8c1 	bl	80005f8 <__aeabi_dmul>
 8010476:	4b2e      	ldr	r3, [pc, #184]	; (8010530 <_dtoa_r+0x648>)
 8010478:	ec41 0b19 	vmov	d9, r0, r1
 801047c:	2200      	movs	r2, #0
 801047e:	4640      	mov	r0, r8
 8010480:	4649      	mov	r1, r9
 8010482:	f7f0 f8b9 	bl	80005f8 <__aeabi_dmul>
 8010486:	4680      	mov	r8, r0
 8010488:	4689      	mov	r9, r1
 801048a:	e7c5      	b.n	8010418 <_dtoa_r+0x530>
 801048c:	ec51 0b17 	vmov	r0, r1, d7
 8010490:	f7f0 f8b2 	bl	80005f8 <__aeabi_dmul>
 8010494:	9b02      	ldr	r3, [sp, #8]
 8010496:	9d00      	ldr	r5, [sp, #0]
 8010498:	930f      	str	r3, [sp, #60]	; 0x3c
 801049a:	ec41 0b19 	vmov	d9, r0, r1
 801049e:	4649      	mov	r1, r9
 80104a0:	4640      	mov	r0, r8
 80104a2:	f7f0 fb59 	bl	8000b58 <__aeabi_d2iz>
 80104a6:	4606      	mov	r6, r0
 80104a8:	f7f0 f83c 	bl	8000524 <__aeabi_i2d>
 80104ac:	3630      	adds	r6, #48	; 0x30
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	4640      	mov	r0, r8
 80104b4:	4649      	mov	r1, r9
 80104b6:	f7ef fee7 	bl	8000288 <__aeabi_dsub>
 80104ba:	f805 6b01 	strb.w	r6, [r5], #1
 80104be:	9b02      	ldr	r3, [sp, #8]
 80104c0:	429d      	cmp	r5, r3
 80104c2:	4680      	mov	r8, r0
 80104c4:	4689      	mov	r9, r1
 80104c6:	f04f 0200 	mov.w	r2, #0
 80104ca:	d124      	bne.n	8010516 <_dtoa_r+0x62e>
 80104cc:	4b1b      	ldr	r3, [pc, #108]	; (801053c <_dtoa_r+0x654>)
 80104ce:	ec51 0b19 	vmov	r0, r1, d9
 80104d2:	f7ef fedb 	bl	800028c <__adddf3>
 80104d6:	4602      	mov	r2, r0
 80104d8:	460b      	mov	r3, r1
 80104da:	4640      	mov	r0, r8
 80104dc:	4649      	mov	r1, r9
 80104de:	f7f0 fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d173      	bne.n	80105ce <_dtoa_r+0x6e6>
 80104e6:	ec53 2b19 	vmov	r2, r3, d9
 80104ea:	4914      	ldr	r1, [pc, #80]	; (801053c <_dtoa_r+0x654>)
 80104ec:	2000      	movs	r0, #0
 80104ee:	f7ef fecb 	bl	8000288 <__aeabi_dsub>
 80104f2:	4602      	mov	r2, r0
 80104f4:	460b      	mov	r3, r1
 80104f6:	4640      	mov	r0, r8
 80104f8:	4649      	mov	r1, r9
 80104fa:	f7f0 faef 	bl	8000adc <__aeabi_dcmplt>
 80104fe:	2800      	cmp	r0, #0
 8010500:	f43f af2f 	beq.w	8010362 <_dtoa_r+0x47a>
 8010504:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010506:	1e6b      	subs	r3, r5, #1
 8010508:	930f      	str	r3, [sp, #60]	; 0x3c
 801050a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801050e:	2b30      	cmp	r3, #48	; 0x30
 8010510:	d0f8      	beq.n	8010504 <_dtoa_r+0x61c>
 8010512:	46bb      	mov	fp, r7
 8010514:	e04a      	b.n	80105ac <_dtoa_r+0x6c4>
 8010516:	4b06      	ldr	r3, [pc, #24]	; (8010530 <_dtoa_r+0x648>)
 8010518:	f7f0 f86e 	bl	80005f8 <__aeabi_dmul>
 801051c:	4680      	mov	r8, r0
 801051e:	4689      	mov	r9, r1
 8010520:	e7bd      	b.n	801049e <_dtoa_r+0x5b6>
 8010522:	bf00      	nop
 8010524:	08013948 	.word	0x08013948
 8010528:	08013920 	.word	0x08013920
 801052c:	3ff00000 	.word	0x3ff00000
 8010530:	40240000 	.word	0x40240000
 8010534:	401c0000 	.word	0x401c0000
 8010538:	40140000 	.word	0x40140000
 801053c:	3fe00000 	.word	0x3fe00000
 8010540:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010544:	9d00      	ldr	r5, [sp, #0]
 8010546:	4642      	mov	r2, r8
 8010548:	464b      	mov	r3, r9
 801054a:	4630      	mov	r0, r6
 801054c:	4639      	mov	r1, r7
 801054e:	f7f0 f97d 	bl	800084c <__aeabi_ddiv>
 8010552:	f7f0 fb01 	bl	8000b58 <__aeabi_d2iz>
 8010556:	9001      	str	r0, [sp, #4]
 8010558:	f7ef ffe4 	bl	8000524 <__aeabi_i2d>
 801055c:	4642      	mov	r2, r8
 801055e:	464b      	mov	r3, r9
 8010560:	f7f0 f84a 	bl	80005f8 <__aeabi_dmul>
 8010564:	4602      	mov	r2, r0
 8010566:	460b      	mov	r3, r1
 8010568:	4630      	mov	r0, r6
 801056a:	4639      	mov	r1, r7
 801056c:	f7ef fe8c 	bl	8000288 <__aeabi_dsub>
 8010570:	9e01      	ldr	r6, [sp, #4]
 8010572:	9f04      	ldr	r7, [sp, #16]
 8010574:	3630      	adds	r6, #48	; 0x30
 8010576:	f805 6b01 	strb.w	r6, [r5], #1
 801057a:	9e00      	ldr	r6, [sp, #0]
 801057c:	1bae      	subs	r6, r5, r6
 801057e:	42b7      	cmp	r7, r6
 8010580:	4602      	mov	r2, r0
 8010582:	460b      	mov	r3, r1
 8010584:	d134      	bne.n	80105f0 <_dtoa_r+0x708>
 8010586:	f7ef fe81 	bl	800028c <__adddf3>
 801058a:	4642      	mov	r2, r8
 801058c:	464b      	mov	r3, r9
 801058e:	4606      	mov	r6, r0
 8010590:	460f      	mov	r7, r1
 8010592:	f7f0 fac1 	bl	8000b18 <__aeabi_dcmpgt>
 8010596:	b9c8      	cbnz	r0, 80105cc <_dtoa_r+0x6e4>
 8010598:	4642      	mov	r2, r8
 801059a:	464b      	mov	r3, r9
 801059c:	4630      	mov	r0, r6
 801059e:	4639      	mov	r1, r7
 80105a0:	f7f0 fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80105a4:	b110      	cbz	r0, 80105ac <_dtoa_r+0x6c4>
 80105a6:	9b01      	ldr	r3, [sp, #4]
 80105a8:	07db      	lsls	r3, r3, #31
 80105aa:	d40f      	bmi.n	80105cc <_dtoa_r+0x6e4>
 80105ac:	4651      	mov	r1, sl
 80105ae:	4620      	mov	r0, r4
 80105b0:	f000 fbcc 	bl	8010d4c <_Bfree>
 80105b4:	2300      	movs	r3, #0
 80105b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105b8:	702b      	strb	r3, [r5, #0]
 80105ba:	f10b 0301 	add.w	r3, fp, #1
 80105be:	6013      	str	r3, [r2, #0]
 80105c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	f43f ace2 	beq.w	800ff8c <_dtoa_r+0xa4>
 80105c8:	601d      	str	r5, [r3, #0]
 80105ca:	e4df      	b.n	800ff8c <_dtoa_r+0xa4>
 80105cc:	465f      	mov	r7, fp
 80105ce:	462b      	mov	r3, r5
 80105d0:	461d      	mov	r5, r3
 80105d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80105d6:	2a39      	cmp	r2, #57	; 0x39
 80105d8:	d106      	bne.n	80105e8 <_dtoa_r+0x700>
 80105da:	9a00      	ldr	r2, [sp, #0]
 80105dc:	429a      	cmp	r2, r3
 80105de:	d1f7      	bne.n	80105d0 <_dtoa_r+0x6e8>
 80105e0:	9900      	ldr	r1, [sp, #0]
 80105e2:	2230      	movs	r2, #48	; 0x30
 80105e4:	3701      	adds	r7, #1
 80105e6:	700a      	strb	r2, [r1, #0]
 80105e8:	781a      	ldrb	r2, [r3, #0]
 80105ea:	3201      	adds	r2, #1
 80105ec:	701a      	strb	r2, [r3, #0]
 80105ee:	e790      	b.n	8010512 <_dtoa_r+0x62a>
 80105f0:	4ba3      	ldr	r3, [pc, #652]	; (8010880 <_dtoa_r+0x998>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	f7f0 f800 	bl	80005f8 <__aeabi_dmul>
 80105f8:	2200      	movs	r2, #0
 80105fa:	2300      	movs	r3, #0
 80105fc:	4606      	mov	r6, r0
 80105fe:	460f      	mov	r7, r1
 8010600:	f7f0 fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8010604:	2800      	cmp	r0, #0
 8010606:	d09e      	beq.n	8010546 <_dtoa_r+0x65e>
 8010608:	e7d0      	b.n	80105ac <_dtoa_r+0x6c4>
 801060a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801060c:	2a00      	cmp	r2, #0
 801060e:	f000 80ca 	beq.w	80107a6 <_dtoa_r+0x8be>
 8010612:	9a07      	ldr	r2, [sp, #28]
 8010614:	2a01      	cmp	r2, #1
 8010616:	f300 80ad 	bgt.w	8010774 <_dtoa_r+0x88c>
 801061a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801061c:	2a00      	cmp	r2, #0
 801061e:	f000 80a5 	beq.w	801076c <_dtoa_r+0x884>
 8010622:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010626:	9e08      	ldr	r6, [sp, #32]
 8010628:	9d05      	ldr	r5, [sp, #20]
 801062a:	9a05      	ldr	r2, [sp, #20]
 801062c:	441a      	add	r2, r3
 801062e:	9205      	str	r2, [sp, #20]
 8010630:	9a06      	ldr	r2, [sp, #24]
 8010632:	2101      	movs	r1, #1
 8010634:	441a      	add	r2, r3
 8010636:	4620      	mov	r0, r4
 8010638:	9206      	str	r2, [sp, #24]
 801063a:	f000 fc87 	bl	8010f4c <__i2b>
 801063e:	4607      	mov	r7, r0
 8010640:	b165      	cbz	r5, 801065c <_dtoa_r+0x774>
 8010642:	9b06      	ldr	r3, [sp, #24]
 8010644:	2b00      	cmp	r3, #0
 8010646:	dd09      	ble.n	801065c <_dtoa_r+0x774>
 8010648:	42ab      	cmp	r3, r5
 801064a:	9a05      	ldr	r2, [sp, #20]
 801064c:	bfa8      	it	ge
 801064e:	462b      	movge	r3, r5
 8010650:	1ad2      	subs	r2, r2, r3
 8010652:	9205      	str	r2, [sp, #20]
 8010654:	9a06      	ldr	r2, [sp, #24]
 8010656:	1aed      	subs	r5, r5, r3
 8010658:	1ad3      	subs	r3, r2, r3
 801065a:	9306      	str	r3, [sp, #24]
 801065c:	9b08      	ldr	r3, [sp, #32]
 801065e:	b1f3      	cbz	r3, 801069e <_dtoa_r+0x7b6>
 8010660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 80a3 	beq.w	80107ae <_dtoa_r+0x8c6>
 8010668:	2e00      	cmp	r6, #0
 801066a:	dd10      	ble.n	801068e <_dtoa_r+0x7a6>
 801066c:	4639      	mov	r1, r7
 801066e:	4632      	mov	r2, r6
 8010670:	4620      	mov	r0, r4
 8010672:	f000 fd2b 	bl	80110cc <__pow5mult>
 8010676:	4652      	mov	r2, sl
 8010678:	4601      	mov	r1, r0
 801067a:	4607      	mov	r7, r0
 801067c:	4620      	mov	r0, r4
 801067e:	f000 fc7b 	bl	8010f78 <__multiply>
 8010682:	4651      	mov	r1, sl
 8010684:	4680      	mov	r8, r0
 8010686:	4620      	mov	r0, r4
 8010688:	f000 fb60 	bl	8010d4c <_Bfree>
 801068c:	46c2      	mov	sl, r8
 801068e:	9b08      	ldr	r3, [sp, #32]
 8010690:	1b9a      	subs	r2, r3, r6
 8010692:	d004      	beq.n	801069e <_dtoa_r+0x7b6>
 8010694:	4651      	mov	r1, sl
 8010696:	4620      	mov	r0, r4
 8010698:	f000 fd18 	bl	80110cc <__pow5mult>
 801069c:	4682      	mov	sl, r0
 801069e:	2101      	movs	r1, #1
 80106a0:	4620      	mov	r0, r4
 80106a2:	f000 fc53 	bl	8010f4c <__i2b>
 80106a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	4606      	mov	r6, r0
 80106ac:	f340 8081 	ble.w	80107b2 <_dtoa_r+0x8ca>
 80106b0:	461a      	mov	r2, r3
 80106b2:	4601      	mov	r1, r0
 80106b4:	4620      	mov	r0, r4
 80106b6:	f000 fd09 	bl	80110cc <__pow5mult>
 80106ba:	9b07      	ldr	r3, [sp, #28]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	4606      	mov	r6, r0
 80106c0:	dd7a      	ble.n	80107b8 <_dtoa_r+0x8d0>
 80106c2:	f04f 0800 	mov.w	r8, #0
 80106c6:	6933      	ldr	r3, [r6, #16]
 80106c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80106cc:	6918      	ldr	r0, [r3, #16]
 80106ce:	f000 fbef 	bl	8010eb0 <__hi0bits>
 80106d2:	f1c0 0020 	rsb	r0, r0, #32
 80106d6:	9b06      	ldr	r3, [sp, #24]
 80106d8:	4418      	add	r0, r3
 80106da:	f010 001f 	ands.w	r0, r0, #31
 80106de:	f000 8094 	beq.w	801080a <_dtoa_r+0x922>
 80106e2:	f1c0 0320 	rsb	r3, r0, #32
 80106e6:	2b04      	cmp	r3, #4
 80106e8:	f340 8085 	ble.w	80107f6 <_dtoa_r+0x90e>
 80106ec:	9b05      	ldr	r3, [sp, #20]
 80106ee:	f1c0 001c 	rsb	r0, r0, #28
 80106f2:	4403      	add	r3, r0
 80106f4:	9305      	str	r3, [sp, #20]
 80106f6:	9b06      	ldr	r3, [sp, #24]
 80106f8:	4403      	add	r3, r0
 80106fa:	4405      	add	r5, r0
 80106fc:	9306      	str	r3, [sp, #24]
 80106fe:	9b05      	ldr	r3, [sp, #20]
 8010700:	2b00      	cmp	r3, #0
 8010702:	dd05      	ble.n	8010710 <_dtoa_r+0x828>
 8010704:	4651      	mov	r1, sl
 8010706:	461a      	mov	r2, r3
 8010708:	4620      	mov	r0, r4
 801070a:	f000 fd39 	bl	8011180 <__lshift>
 801070e:	4682      	mov	sl, r0
 8010710:	9b06      	ldr	r3, [sp, #24]
 8010712:	2b00      	cmp	r3, #0
 8010714:	dd05      	ble.n	8010722 <_dtoa_r+0x83a>
 8010716:	4631      	mov	r1, r6
 8010718:	461a      	mov	r2, r3
 801071a:	4620      	mov	r0, r4
 801071c:	f000 fd30 	bl	8011180 <__lshift>
 8010720:	4606      	mov	r6, r0
 8010722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010724:	2b00      	cmp	r3, #0
 8010726:	d072      	beq.n	801080e <_dtoa_r+0x926>
 8010728:	4631      	mov	r1, r6
 801072a:	4650      	mov	r0, sl
 801072c:	f000 fd94 	bl	8011258 <__mcmp>
 8010730:	2800      	cmp	r0, #0
 8010732:	da6c      	bge.n	801080e <_dtoa_r+0x926>
 8010734:	2300      	movs	r3, #0
 8010736:	4651      	mov	r1, sl
 8010738:	220a      	movs	r2, #10
 801073a:	4620      	mov	r0, r4
 801073c:	f000 fb28 	bl	8010d90 <__multadd>
 8010740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010742:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010746:	4682      	mov	sl, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	f000 81b0 	beq.w	8010aae <_dtoa_r+0xbc6>
 801074e:	2300      	movs	r3, #0
 8010750:	4639      	mov	r1, r7
 8010752:	220a      	movs	r2, #10
 8010754:	4620      	mov	r0, r4
 8010756:	f000 fb1b 	bl	8010d90 <__multadd>
 801075a:	9b01      	ldr	r3, [sp, #4]
 801075c:	2b00      	cmp	r3, #0
 801075e:	4607      	mov	r7, r0
 8010760:	f300 8096 	bgt.w	8010890 <_dtoa_r+0x9a8>
 8010764:	9b07      	ldr	r3, [sp, #28]
 8010766:	2b02      	cmp	r3, #2
 8010768:	dc59      	bgt.n	801081e <_dtoa_r+0x936>
 801076a:	e091      	b.n	8010890 <_dtoa_r+0x9a8>
 801076c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801076e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010772:	e758      	b.n	8010626 <_dtoa_r+0x73e>
 8010774:	9b04      	ldr	r3, [sp, #16]
 8010776:	1e5e      	subs	r6, r3, #1
 8010778:	9b08      	ldr	r3, [sp, #32]
 801077a:	42b3      	cmp	r3, r6
 801077c:	bfbf      	itttt	lt
 801077e:	9b08      	ldrlt	r3, [sp, #32]
 8010780:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010782:	9608      	strlt	r6, [sp, #32]
 8010784:	1af3      	sublt	r3, r6, r3
 8010786:	bfb4      	ite	lt
 8010788:	18d2      	addlt	r2, r2, r3
 801078a:	1b9e      	subge	r6, r3, r6
 801078c:	9b04      	ldr	r3, [sp, #16]
 801078e:	bfbc      	itt	lt
 8010790:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010792:	2600      	movlt	r6, #0
 8010794:	2b00      	cmp	r3, #0
 8010796:	bfb7      	itett	lt
 8010798:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801079c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80107a0:	1a9d      	sublt	r5, r3, r2
 80107a2:	2300      	movlt	r3, #0
 80107a4:	e741      	b.n	801062a <_dtoa_r+0x742>
 80107a6:	9e08      	ldr	r6, [sp, #32]
 80107a8:	9d05      	ldr	r5, [sp, #20]
 80107aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80107ac:	e748      	b.n	8010640 <_dtoa_r+0x758>
 80107ae:	9a08      	ldr	r2, [sp, #32]
 80107b0:	e770      	b.n	8010694 <_dtoa_r+0x7ac>
 80107b2:	9b07      	ldr	r3, [sp, #28]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	dc19      	bgt.n	80107ec <_dtoa_r+0x904>
 80107b8:	9b02      	ldr	r3, [sp, #8]
 80107ba:	b9bb      	cbnz	r3, 80107ec <_dtoa_r+0x904>
 80107bc:	9b03      	ldr	r3, [sp, #12]
 80107be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107c2:	b99b      	cbnz	r3, 80107ec <_dtoa_r+0x904>
 80107c4:	9b03      	ldr	r3, [sp, #12]
 80107c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107ca:	0d1b      	lsrs	r3, r3, #20
 80107cc:	051b      	lsls	r3, r3, #20
 80107ce:	b183      	cbz	r3, 80107f2 <_dtoa_r+0x90a>
 80107d0:	9b05      	ldr	r3, [sp, #20]
 80107d2:	3301      	adds	r3, #1
 80107d4:	9305      	str	r3, [sp, #20]
 80107d6:	9b06      	ldr	r3, [sp, #24]
 80107d8:	3301      	adds	r3, #1
 80107da:	9306      	str	r3, [sp, #24]
 80107dc:	f04f 0801 	mov.w	r8, #1
 80107e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	f47f af6f 	bne.w	80106c6 <_dtoa_r+0x7de>
 80107e8:	2001      	movs	r0, #1
 80107ea:	e774      	b.n	80106d6 <_dtoa_r+0x7ee>
 80107ec:	f04f 0800 	mov.w	r8, #0
 80107f0:	e7f6      	b.n	80107e0 <_dtoa_r+0x8f8>
 80107f2:	4698      	mov	r8, r3
 80107f4:	e7f4      	b.n	80107e0 <_dtoa_r+0x8f8>
 80107f6:	d082      	beq.n	80106fe <_dtoa_r+0x816>
 80107f8:	9a05      	ldr	r2, [sp, #20]
 80107fa:	331c      	adds	r3, #28
 80107fc:	441a      	add	r2, r3
 80107fe:	9205      	str	r2, [sp, #20]
 8010800:	9a06      	ldr	r2, [sp, #24]
 8010802:	441a      	add	r2, r3
 8010804:	441d      	add	r5, r3
 8010806:	9206      	str	r2, [sp, #24]
 8010808:	e779      	b.n	80106fe <_dtoa_r+0x816>
 801080a:	4603      	mov	r3, r0
 801080c:	e7f4      	b.n	80107f8 <_dtoa_r+0x910>
 801080e:	9b04      	ldr	r3, [sp, #16]
 8010810:	2b00      	cmp	r3, #0
 8010812:	dc37      	bgt.n	8010884 <_dtoa_r+0x99c>
 8010814:	9b07      	ldr	r3, [sp, #28]
 8010816:	2b02      	cmp	r3, #2
 8010818:	dd34      	ble.n	8010884 <_dtoa_r+0x99c>
 801081a:	9b04      	ldr	r3, [sp, #16]
 801081c:	9301      	str	r3, [sp, #4]
 801081e:	9b01      	ldr	r3, [sp, #4]
 8010820:	b963      	cbnz	r3, 801083c <_dtoa_r+0x954>
 8010822:	4631      	mov	r1, r6
 8010824:	2205      	movs	r2, #5
 8010826:	4620      	mov	r0, r4
 8010828:	f000 fab2 	bl	8010d90 <__multadd>
 801082c:	4601      	mov	r1, r0
 801082e:	4606      	mov	r6, r0
 8010830:	4650      	mov	r0, sl
 8010832:	f000 fd11 	bl	8011258 <__mcmp>
 8010836:	2800      	cmp	r0, #0
 8010838:	f73f adbb 	bgt.w	80103b2 <_dtoa_r+0x4ca>
 801083c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801083e:	9d00      	ldr	r5, [sp, #0]
 8010840:	ea6f 0b03 	mvn.w	fp, r3
 8010844:	f04f 0800 	mov.w	r8, #0
 8010848:	4631      	mov	r1, r6
 801084a:	4620      	mov	r0, r4
 801084c:	f000 fa7e 	bl	8010d4c <_Bfree>
 8010850:	2f00      	cmp	r7, #0
 8010852:	f43f aeab 	beq.w	80105ac <_dtoa_r+0x6c4>
 8010856:	f1b8 0f00 	cmp.w	r8, #0
 801085a:	d005      	beq.n	8010868 <_dtoa_r+0x980>
 801085c:	45b8      	cmp	r8, r7
 801085e:	d003      	beq.n	8010868 <_dtoa_r+0x980>
 8010860:	4641      	mov	r1, r8
 8010862:	4620      	mov	r0, r4
 8010864:	f000 fa72 	bl	8010d4c <_Bfree>
 8010868:	4639      	mov	r1, r7
 801086a:	4620      	mov	r0, r4
 801086c:	f000 fa6e 	bl	8010d4c <_Bfree>
 8010870:	e69c      	b.n	80105ac <_dtoa_r+0x6c4>
 8010872:	2600      	movs	r6, #0
 8010874:	4637      	mov	r7, r6
 8010876:	e7e1      	b.n	801083c <_dtoa_r+0x954>
 8010878:	46bb      	mov	fp, r7
 801087a:	4637      	mov	r7, r6
 801087c:	e599      	b.n	80103b2 <_dtoa_r+0x4ca>
 801087e:	bf00      	nop
 8010880:	40240000 	.word	0x40240000
 8010884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010886:	2b00      	cmp	r3, #0
 8010888:	f000 80c8 	beq.w	8010a1c <_dtoa_r+0xb34>
 801088c:	9b04      	ldr	r3, [sp, #16]
 801088e:	9301      	str	r3, [sp, #4]
 8010890:	2d00      	cmp	r5, #0
 8010892:	dd05      	ble.n	80108a0 <_dtoa_r+0x9b8>
 8010894:	4639      	mov	r1, r7
 8010896:	462a      	mov	r2, r5
 8010898:	4620      	mov	r0, r4
 801089a:	f000 fc71 	bl	8011180 <__lshift>
 801089e:	4607      	mov	r7, r0
 80108a0:	f1b8 0f00 	cmp.w	r8, #0
 80108a4:	d05b      	beq.n	801095e <_dtoa_r+0xa76>
 80108a6:	6879      	ldr	r1, [r7, #4]
 80108a8:	4620      	mov	r0, r4
 80108aa:	f000 fa0f 	bl	8010ccc <_Balloc>
 80108ae:	4605      	mov	r5, r0
 80108b0:	b928      	cbnz	r0, 80108be <_dtoa_r+0x9d6>
 80108b2:	4b83      	ldr	r3, [pc, #524]	; (8010ac0 <_dtoa_r+0xbd8>)
 80108b4:	4602      	mov	r2, r0
 80108b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80108ba:	f7ff bb2e 	b.w	800ff1a <_dtoa_r+0x32>
 80108be:	693a      	ldr	r2, [r7, #16]
 80108c0:	3202      	adds	r2, #2
 80108c2:	0092      	lsls	r2, r2, #2
 80108c4:	f107 010c 	add.w	r1, r7, #12
 80108c8:	300c      	adds	r0, #12
 80108ca:	f7ff fa71 	bl	800fdb0 <memcpy>
 80108ce:	2201      	movs	r2, #1
 80108d0:	4629      	mov	r1, r5
 80108d2:	4620      	mov	r0, r4
 80108d4:	f000 fc54 	bl	8011180 <__lshift>
 80108d8:	9b00      	ldr	r3, [sp, #0]
 80108da:	3301      	adds	r3, #1
 80108dc:	9304      	str	r3, [sp, #16]
 80108de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108e2:	4413      	add	r3, r2
 80108e4:	9308      	str	r3, [sp, #32]
 80108e6:	9b02      	ldr	r3, [sp, #8]
 80108e8:	f003 0301 	and.w	r3, r3, #1
 80108ec:	46b8      	mov	r8, r7
 80108ee:	9306      	str	r3, [sp, #24]
 80108f0:	4607      	mov	r7, r0
 80108f2:	9b04      	ldr	r3, [sp, #16]
 80108f4:	4631      	mov	r1, r6
 80108f6:	3b01      	subs	r3, #1
 80108f8:	4650      	mov	r0, sl
 80108fa:	9301      	str	r3, [sp, #4]
 80108fc:	f7ff fa6c 	bl	800fdd8 <quorem>
 8010900:	4641      	mov	r1, r8
 8010902:	9002      	str	r0, [sp, #8]
 8010904:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010908:	4650      	mov	r0, sl
 801090a:	f000 fca5 	bl	8011258 <__mcmp>
 801090e:	463a      	mov	r2, r7
 8010910:	9005      	str	r0, [sp, #20]
 8010912:	4631      	mov	r1, r6
 8010914:	4620      	mov	r0, r4
 8010916:	f000 fcbb 	bl	8011290 <__mdiff>
 801091a:	68c2      	ldr	r2, [r0, #12]
 801091c:	4605      	mov	r5, r0
 801091e:	bb02      	cbnz	r2, 8010962 <_dtoa_r+0xa7a>
 8010920:	4601      	mov	r1, r0
 8010922:	4650      	mov	r0, sl
 8010924:	f000 fc98 	bl	8011258 <__mcmp>
 8010928:	4602      	mov	r2, r0
 801092a:	4629      	mov	r1, r5
 801092c:	4620      	mov	r0, r4
 801092e:	9209      	str	r2, [sp, #36]	; 0x24
 8010930:	f000 fa0c 	bl	8010d4c <_Bfree>
 8010934:	9b07      	ldr	r3, [sp, #28]
 8010936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010938:	9d04      	ldr	r5, [sp, #16]
 801093a:	ea43 0102 	orr.w	r1, r3, r2
 801093e:	9b06      	ldr	r3, [sp, #24]
 8010940:	4319      	orrs	r1, r3
 8010942:	d110      	bne.n	8010966 <_dtoa_r+0xa7e>
 8010944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010948:	d029      	beq.n	801099e <_dtoa_r+0xab6>
 801094a:	9b05      	ldr	r3, [sp, #20]
 801094c:	2b00      	cmp	r3, #0
 801094e:	dd02      	ble.n	8010956 <_dtoa_r+0xa6e>
 8010950:	9b02      	ldr	r3, [sp, #8]
 8010952:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010956:	9b01      	ldr	r3, [sp, #4]
 8010958:	f883 9000 	strb.w	r9, [r3]
 801095c:	e774      	b.n	8010848 <_dtoa_r+0x960>
 801095e:	4638      	mov	r0, r7
 8010960:	e7ba      	b.n	80108d8 <_dtoa_r+0x9f0>
 8010962:	2201      	movs	r2, #1
 8010964:	e7e1      	b.n	801092a <_dtoa_r+0xa42>
 8010966:	9b05      	ldr	r3, [sp, #20]
 8010968:	2b00      	cmp	r3, #0
 801096a:	db04      	blt.n	8010976 <_dtoa_r+0xa8e>
 801096c:	9907      	ldr	r1, [sp, #28]
 801096e:	430b      	orrs	r3, r1
 8010970:	9906      	ldr	r1, [sp, #24]
 8010972:	430b      	orrs	r3, r1
 8010974:	d120      	bne.n	80109b8 <_dtoa_r+0xad0>
 8010976:	2a00      	cmp	r2, #0
 8010978:	dded      	ble.n	8010956 <_dtoa_r+0xa6e>
 801097a:	4651      	mov	r1, sl
 801097c:	2201      	movs	r2, #1
 801097e:	4620      	mov	r0, r4
 8010980:	f000 fbfe 	bl	8011180 <__lshift>
 8010984:	4631      	mov	r1, r6
 8010986:	4682      	mov	sl, r0
 8010988:	f000 fc66 	bl	8011258 <__mcmp>
 801098c:	2800      	cmp	r0, #0
 801098e:	dc03      	bgt.n	8010998 <_dtoa_r+0xab0>
 8010990:	d1e1      	bne.n	8010956 <_dtoa_r+0xa6e>
 8010992:	f019 0f01 	tst.w	r9, #1
 8010996:	d0de      	beq.n	8010956 <_dtoa_r+0xa6e>
 8010998:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801099c:	d1d8      	bne.n	8010950 <_dtoa_r+0xa68>
 801099e:	9a01      	ldr	r2, [sp, #4]
 80109a0:	2339      	movs	r3, #57	; 0x39
 80109a2:	7013      	strb	r3, [r2, #0]
 80109a4:	462b      	mov	r3, r5
 80109a6:	461d      	mov	r5, r3
 80109a8:	3b01      	subs	r3, #1
 80109aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80109ae:	2a39      	cmp	r2, #57	; 0x39
 80109b0:	d06c      	beq.n	8010a8c <_dtoa_r+0xba4>
 80109b2:	3201      	adds	r2, #1
 80109b4:	701a      	strb	r2, [r3, #0]
 80109b6:	e747      	b.n	8010848 <_dtoa_r+0x960>
 80109b8:	2a00      	cmp	r2, #0
 80109ba:	dd07      	ble.n	80109cc <_dtoa_r+0xae4>
 80109bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80109c0:	d0ed      	beq.n	801099e <_dtoa_r+0xab6>
 80109c2:	9a01      	ldr	r2, [sp, #4]
 80109c4:	f109 0301 	add.w	r3, r9, #1
 80109c8:	7013      	strb	r3, [r2, #0]
 80109ca:	e73d      	b.n	8010848 <_dtoa_r+0x960>
 80109cc:	9b04      	ldr	r3, [sp, #16]
 80109ce:	9a08      	ldr	r2, [sp, #32]
 80109d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d043      	beq.n	8010a60 <_dtoa_r+0xb78>
 80109d8:	4651      	mov	r1, sl
 80109da:	2300      	movs	r3, #0
 80109dc:	220a      	movs	r2, #10
 80109de:	4620      	mov	r0, r4
 80109e0:	f000 f9d6 	bl	8010d90 <__multadd>
 80109e4:	45b8      	cmp	r8, r7
 80109e6:	4682      	mov	sl, r0
 80109e8:	f04f 0300 	mov.w	r3, #0
 80109ec:	f04f 020a 	mov.w	r2, #10
 80109f0:	4641      	mov	r1, r8
 80109f2:	4620      	mov	r0, r4
 80109f4:	d107      	bne.n	8010a06 <_dtoa_r+0xb1e>
 80109f6:	f000 f9cb 	bl	8010d90 <__multadd>
 80109fa:	4680      	mov	r8, r0
 80109fc:	4607      	mov	r7, r0
 80109fe:	9b04      	ldr	r3, [sp, #16]
 8010a00:	3301      	adds	r3, #1
 8010a02:	9304      	str	r3, [sp, #16]
 8010a04:	e775      	b.n	80108f2 <_dtoa_r+0xa0a>
 8010a06:	f000 f9c3 	bl	8010d90 <__multadd>
 8010a0a:	4639      	mov	r1, r7
 8010a0c:	4680      	mov	r8, r0
 8010a0e:	2300      	movs	r3, #0
 8010a10:	220a      	movs	r2, #10
 8010a12:	4620      	mov	r0, r4
 8010a14:	f000 f9bc 	bl	8010d90 <__multadd>
 8010a18:	4607      	mov	r7, r0
 8010a1a:	e7f0      	b.n	80109fe <_dtoa_r+0xb16>
 8010a1c:	9b04      	ldr	r3, [sp, #16]
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	9d00      	ldr	r5, [sp, #0]
 8010a22:	4631      	mov	r1, r6
 8010a24:	4650      	mov	r0, sl
 8010a26:	f7ff f9d7 	bl	800fdd8 <quorem>
 8010a2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010a2e:	9b00      	ldr	r3, [sp, #0]
 8010a30:	f805 9b01 	strb.w	r9, [r5], #1
 8010a34:	1aea      	subs	r2, r5, r3
 8010a36:	9b01      	ldr	r3, [sp, #4]
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	dd07      	ble.n	8010a4c <_dtoa_r+0xb64>
 8010a3c:	4651      	mov	r1, sl
 8010a3e:	2300      	movs	r3, #0
 8010a40:	220a      	movs	r2, #10
 8010a42:	4620      	mov	r0, r4
 8010a44:	f000 f9a4 	bl	8010d90 <__multadd>
 8010a48:	4682      	mov	sl, r0
 8010a4a:	e7ea      	b.n	8010a22 <_dtoa_r+0xb3a>
 8010a4c:	9b01      	ldr	r3, [sp, #4]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	bfc8      	it	gt
 8010a52:	461d      	movgt	r5, r3
 8010a54:	9b00      	ldr	r3, [sp, #0]
 8010a56:	bfd8      	it	le
 8010a58:	2501      	movle	r5, #1
 8010a5a:	441d      	add	r5, r3
 8010a5c:	f04f 0800 	mov.w	r8, #0
 8010a60:	4651      	mov	r1, sl
 8010a62:	2201      	movs	r2, #1
 8010a64:	4620      	mov	r0, r4
 8010a66:	f000 fb8b 	bl	8011180 <__lshift>
 8010a6a:	4631      	mov	r1, r6
 8010a6c:	4682      	mov	sl, r0
 8010a6e:	f000 fbf3 	bl	8011258 <__mcmp>
 8010a72:	2800      	cmp	r0, #0
 8010a74:	dc96      	bgt.n	80109a4 <_dtoa_r+0xabc>
 8010a76:	d102      	bne.n	8010a7e <_dtoa_r+0xb96>
 8010a78:	f019 0f01 	tst.w	r9, #1
 8010a7c:	d192      	bne.n	80109a4 <_dtoa_r+0xabc>
 8010a7e:	462b      	mov	r3, r5
 8010a80:	461d      	mov	r5, r3
 8010a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010a86:	2a30      	cmp	r2, #48	; 0x30
 8010a88:	d0fa      	beq.n	8010a80 <_dtoa_r+0xb98>
 8010a8a:	e6dd      	b.n	8010848 <_dtoa_r+0x960>
 8010a8c:	9a00      	ldr	r2, [sp, #0]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d189      	bne.n	80109a6 <_dtoa_r+0xabe>
 8010a92:	f10b 0b01 	add.w	fp, fp, #1
 8010a96:	2331      	movs	r3, #49	; 0x31
 8010a98:	e796      	b.n	80109c8 <_dtoa_r+0xae0>
 8010a9a:	4b0a      	ldr	r3, [pc, #40]	; (8010ac4 <_dtoa_r+0xbdc>)
 8010a9c:	f7ff ba99 	b.w	800ffd2 <_dtoa_r+0xea>
 8010aa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f47f aa6d 	bne.w	800ff82 <_dtoa_r+0x9a>
 8010aa8:	4b07      	ldr	r3, [pc, #28]	; (8010ac8 <_dtoa_r+0xbe0>)
 8010aaa:	f7ff ba92 	b.w	800ffd2 <_dtoa_r+0xea>
 8010aae:	9b01      	ldr	r3, [sp, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	dcb5      	bgt.n	8010a20 <_dtoa_r+0xb38>
 8010ab4:	9b07      	ldr	r3, [sp, #28]
 8010ab6:	2b02      	cmp	r3, #2
 8010ab8:	f73f aeb1 	bgt.w	801081e <_dtoa_r+0x936>
 8010abc:	e7b0      	b.n	8010a20 <_dtoa_r+0xb38>
 8010abe:	bf00      	nop
 8010ac0:	080138b1 	.word	0x080138b1
 8010ac4:	0801380c 	.word	0x0801380c
 8010ac8:	08013835 	.word	0x08013835

08010acc <_free_r>:
 8010acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ace:	2900      	cmp	r1, #0
 8010ad0:	d044      	beq.n	8010b5c <_free_r+0x90>
 8010ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ad6:	9001      	str	r0, [sp, #4]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f1a1 0404 	sub.w	r4, r1, #4
 8010ade:	bfb8      	it	lt
 8010ae0:	18e4      	addlt	r4, r4, r3
 8010ae2:	f000 f8e7 	bl	8010cb4 <__malloc_lock>
 8010ae6:	4a1e      	ldr	r2, [pc, #120]	; (8010b60 <_free_r+0x94>)
 8010ae8:	9801      	ldr	r0, [sp, #4]
 8010aea:	6813      	ldr	r3, [r2, #0]
 8010aec:	b933      	cbnz	r3, 8010afc <_free_r+0x30>
 8010aee:	6063      	str	r3, [r4, #4]
 8010af0:	6014      	str	r4, [r2, #0]
 8010af2:	b003      	add	sp, #12
 8010af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010af8:	f000 b8e2 	b.w	8010cc0 <__malloc_unlock>
 8010afc:	42a3      	cmp	r3, r4
 8010afe:	d908      	bls.n	8010b12 <_free_r+0x46>
 8010b00:	6825      	ldr	r5, [r4, #0]
 8010b02:	1961      	adds	r1, r4, r5
 8010b04:	428b      	cmp	r3, r1
 8010b06:	bf01      	itttt	eq
 8010b08:	6819      	ldreq	r1, [r3, #0]
 8010b0a:	685b      	ldreq	r3, [r3, #4]
 8010b0c:	1949      	addeq	r1, r1, r5
 8010b0e:	6021      	streq	r1, [r4, #0]
 8010b10:	e7ed      	b.n	8010aee <_free_r+0x22>
 8010b12:	461a      	mov	r2, r3
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	b10b      	cbz	r3, 8010b1c <_free_r+0x50>
 8010b18:	42a3      	cmp	r3, r4
 8010b1a:	d9fa      	bls.n	8010b12 <_free_r+0x46>
 8010b1c:	6811      	ldr	r1, [r2, #0]
 8010b1e:	1855      	adds	r5, r2, r1
 8010b20:	42a5      	cmp	r5, r4
 8010b22:	d10b      	bne.n	8010b3c <_free_r+0x70>
 8010b24:	6824      	ldr	r4, [r4, #0]
 8010b26:	4421      	add	r1, r4
 8010b28:	1854      	adds	r4, r2, r1
 8010b2a:	42a3      	cmp	r3, r4
 8010b2c:	6011      	str	r1, [r2, #0]
 8010b2e:	d1e0      	bne.n	8010af2 <_free_r+0x26>
 8010b30:	681c      	ldr	r4, [r3, #0]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	6053      	str	r3, [r2, #4]
 8010b36:	440c      	add	r4, r1
 8010b38:	6014      	str	r4, [r2, #0]
 8010b3a:	e7da      	b.n	8010af2 <_free_r+0x26>
 8010b3c:	d902      	bls.n	8010b44 <_free_r+0x78>
 8010b3e:	230c      	movs	r3, #12
 8010b40:	6003      	str	r3, [r0, #0]
 8010b42:	e7d6      	b.n	8010af2 <_free_r+0x26>
 8010b44:	6825      	ldr	r5, [r4, #0]
 8010b46:	1961      	adds	r1, r4, r5
 8010b48:	428b      	cmp	r3, r1
 8010b4a:	bf04      	itt	eq
 8010b4c:	6819      	ldreq	r1, [r3, #0]
 8010b4e:	685b      	ldreq	r3, [r3, #4]
 8010b50:	6063      	str	r3, [r4, #4]
 8010b52:	bf04      	itt	eq
 8010b54:	1949      	addeq	r1, r1, r5
 8010b56:	6021      	streq	r1, [r4, #0]
 8010b58:	6054      	str	r4, [r2, #4]
 8010b5a:	e7ca      	b.n	8010af2 <_free_r+0x26>
 8010b5c:	b003      	add	sp, #12
 8010b5e:	bd30      	pop	{r4, r5, pc}
 8010b60:	20003b7c 	.word	0x20003b7c

08010b64 <malloc>:
 8010b64:	4b02      	ldr	r3, [pc, #8]	; (8010b70 <malloc+0xc>)
 8010b66:	4601      	mov	r1, r0
 8010b68:	6818      	ldr	r0, [r3, #0]
 8010b6a:	f000 b823 	b.w	8010bb4 <_malloc_r>
 8010b6e:	bf00      	nop
 8010b70:	20000164 	.word	0x20000164

08010b74 <sbrk_aligned>:
 8010b74:	b570      	push	{r4, r5, r6, lr}
 8010b76:	4e0e      	ldr	r6, [pc, #56]	; (8010bb0 <sbrk_aligned+0x3c>)
 8010b78:	460c      	mov	r4, r1
 8010b7a:	6831      	ldr	r1, [r6, #0]
 8010b7c:	4605      	mov	r5, r0
 8010b7e:	b911      	cbnz	r1, 8010b86 <sbrk_aligned+0x12>
 8010b80:	f001 fe1a 	bl	80127b8 <_sbrk_r>
 8010b84:	6030      	str	r0, [r6, #0]
 8010b86:	4621      	mov	r1, r4
 8010b88:	4628      	mov	r0, r5
 8010b8a:	f001 fe15 	bl	80127b8 <_sbrk_r>
 8010b8e:	1c43      	adds	r3, r0, #1
 8010b90:	d00a      	beq.n	8010ba8 <sbrk_aligned+0x34>
 8010b92:	1cc4      	adds	r4, r0, #3
 8010b94:	f024 0403 	bic.w	r4, r4, #3
 8010b98:	42a0      	cmp	r0, r4
 8010b9a:	d007      	beq.n	8010bac <sbrk_aligned+0x38>
 8010b9c:	1a21      	subs	r1, r4, r0
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	f001 fe0a 	bl	80127b8 <_sbrk_r>
 8010ba4:	3001      	adds	r0, #1
 8010ba6:	d101      	bne.n	8010bac <sbrk_aligned+0x38>
 8010ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8010bac:	4620      	mov	r0, r4
 8010bae:	bd70      	pop	{r4, r5, r6, pc}
 8010bb0:	20003b80 	.word	0x20003b80

08010bb4 <_malloc_r>:
 8010bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bb8:	1ccd      	adds	r5, r1, #3
 8010bba:	f025 0503 	bic.w	r5, r5, #3
 8010bbe:	3508      	adds	r5, #8
 8010bc0:	2d0c      	cmp	r5, #12
 8010bc2:	bf38      	it	cc
 8010bc4:	250c      	movcc	r5, #12
 8010bc6:	2d00      	cmp	r5, #0
 8010bc8:	4607      	mov	r7, r0
 8010bca:	db01      	blt.n	8010bd0 <_malloc_r+0x1c>
 8010bcc:	42a9      	cmp	r1, r5
 8010bce:	d905      	bls.n	8010bdc <_malloc_r+0x28>
 8010bd0:	230c      	movs	r3, #12
 8010bd2:	603b      	str	r3, [r7, #0]
 8010bd4:	2600      	movs	r6, #0
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010cb0 <_malloc_r+0xfc>
 8010be0:	f000 f868 	bl	8010cb4 <__malloc_lock>
 8010be4:	f8d8 3000 	ldr.w	r3, [r8]
 8010be8:	461c      	mov	r4, r3
 8010bea:	bb5c      	cbnz	r4, 8010c44 <_malloc_r+0x90>
 8010bec:	4629      	mov	r1, r5
 8010bee:	4638      	mov	r0, r7
 8010bf0:	f7ff ffc0 	bl	8010b74 <sbrk_aligned>
 8010bf4:	1c43      	adds	r3, r0, #1
 8010bf6:	4604      	mov	r4, r0
 8010bf8:	d155      	bne.n	8010ca6 <_malloc_r+0xf2>
 8010bfa:	f8d8 4000 	ldr.w	r4, [r8]
 8010bfe:	4626      	mov	r6, r4
 8010c00:	2e00      	cmp	r6, #0
 8010c02:	d145      	bne.n	8010c90 <_malloc_r+0xdc>
 8010c04:	2c00      	cmp	r4, #0
 8010c06:	d048      	beq.n	8010c9a <_malloc_r+0xe6>
 8010c08:	6823      	ldr	r3, [r4, #0]
 8010c0a:	4631      	mov	r1, r6
 8010c0c:	4638      	mov	r0, r7
 8010c0e:	eb04 0903 	add.w	r9, r4, r3
 8010c12:	f001 fdd1 	bl	80127b8 <_sbrk_r>
 8010c16:	4581      	cmp	r9, r0
 8010c18:	d13f      	bne.n	8010c9a <_malloc_r+0xe6>
 8010c1a:	6821      	ldr	r1, [r4, #0]
 8010c1c:	1a6d      	subs	r5, r5, r1
 8010c1e:	4629      	mov	r1, r5
 8010c20:	4638      	mov	r0, r7
 8010c22:	f7ff ffa7 	bl	8010b74 <sbrk_aligned>
 8010c26:	3001      	adds	r0, #1
 8010c28:	d037      	beq.n	8010c9a <_malloc_r+0xe6>
 8010c2a:	6823      	ldr	r3, [r4, #0]
 8010c2c:	442b      	add	r3, r5
 8010c2e:	6023      	str	r3, [r4, #0]
 8010c30:	f8d8 3000 	ldr.w	r3, [r8]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d038      	beq.n	8010caa <_malloc_r+0xf6>
 8010c38:	685a      	ldr	r2, [r3, #4]
 8010c3a:	42a2      	cmp	r2, r4
 8010c3c:	d12b      	bne.n	8010c96 <_malloc_r+0xe2>
 8010c3e:	2200      	movs	r2, #0
 8010c40:	605a      	str	r2, [r3, #4]
 8010c42:	e00f      	b.n	8010c64 <_malloc_r+0xb0>
 8010c44:	6822      	ldr	r2, [r4, #0]
 8010c46:	1b52      	subs	r2, r2, r5
 8010c48:	d41f      	bmi.n	8010c8a <_malloc_r+0xd6>
 8010c4a:	2a0b      	cmp	r2, #11
 8010c4c:	d917      	bls.n	8010c7e <_malloc_r+0xca>
 8010c4e:	1961      	adds	r1, r4, r5
 8010c50:	42a3      	cmp	r3, r4
 8010c52:	6025      	str	r5, [r4, #0]
 8010c54:	bf18      	it	ne
 8010c56:	6059      	strne	r1, [r3, #4]
 8010c58:	6863      	ldr	r3, [r4, #4]
 8010c5a:	bf08      	it	eq
 8010c5c:	f8c8 1000 	streq.w	r1, [r8]
 8010c60:	5162      	str	r2, [r4, r5]
 8010c62:	604b      	str	r3, [r1, #4]
 8010c64:	4638      	mov	r0, r7
 8010c66:	f104 060b 	add.w	r6, r4, #11
 8010c6a:	f000 f829 	bl	8010cc0 <__malloc_unlock>
 8010c6e:	f026 0607 	bic.w	r6, r6, #7
 8010c72:	1d23      	adds	r3, r4, #4
 8010c74:	1af2      	subs	r2, r6, r3
 8010c76:	d0ae      	beq.n	8010bd6 <_malloc_r+0x22>
 8010c78:	1b9b      	subs	r3, r3, r6
 8010c7a:	50a3      	str	r3, [r4, r2]
 8010c7c:	e7ab      	b.n	8010bd6 <_malloc_r+0x22>
 8010c7e:	42a3      	cmp	r3, r4
 8010c80:	6862      	ldr	r2, [r4, #4]
 8010c82:	d1dd      	bne.n	8010c40 <_malloc_r+0x8c>
 8010c84:	f8c8 2000 	str.w	r2, [r8]
 8010c88:	e7ec      	b.n	8010c64 <_malloc_r+0xb0>
 8010c8a:	4623      	mov	r3, r4
 8010c8c:	6864      	ldr	r4, [r4, #4]
 8010c8e:	e7ac      	b.n	8010bea <_malloc_r+0x36>
 8010c90:	4634      	mov	r4, r6
 8010c92:	6876      	ldr	r6, [r6, #4]
 8010c94:	e7b4      	b.n	8010c00 <_malloc_r+0x4c>
 8010c96:	4613      	mov	r3, r2
 8010c98:	e7cc      	b.n	8010c34 <_malloc_r+0x80>
 8010c9a:	230c      	movs	r3, #12
 8010c9c:	603b      	str	r3, [r7, #0]
 8010c9e:	4638      	mov	r0, r7
 8010ca0:	f000 f80e 	bl	8010cc0 <__malloc_unlock>
 8010ca4:	e797      	b.n	8010bd6 <_malloc_r+0x22>
 8010ca6:	6025      	str	r5, [r4, #0]
 8010ca8:	e7dc      	b.n	8010c64 <_malloc_r+0xb0>
 8010caa:	605b      	str	r3, [r3, #4]
 8010cac:	deff      	udf	#255	; 0xff
 8010cae:	bf00      	nop
 8010cb0:	20003b7c 	.word	0x20003b7c

08010cb4 <__malloc_lock>:
 8010cb4:	4801      	ldr	r0, [pc, #4]	; (8010cbc <__malloc_lock+0x8>)
 8010cb6:	f7ff b879 	b.w	800fdac <__retarget_lock_acquire_recursive>
 8010cba:	bf00      	nop
 8010cbc:	20003b78 	.word	0x20003b78

08010cc0 <__malloc_unlock>:
 8010cc0:	4801      	ldr	r0, [pc, #4]	; (8010cc8 <__malloc_unlock+0x8>)
 8010cc2:	f7ff b874 	b.w	800fdae <__retarget_lock_release_recursive>
 8010cc6:	bf00      	nop
 8010cc8:	20003b78 	.word	0x20003b78

08010ccc <_Balloc>:
 8010ccc:	b570      	push	{r4, r5, r6, lr}
 8010cce:	69c6      	ldr	r6, [r0, #28]
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	460d      	mov	r5, r1
 8010cd4:	b976      	cbnz	r6, 8010cf4 <_Balloc+0x28>
 8010cd6:	2010      	movs	r0, #16
 8010cd8:	f7ff ff44 	bl	8010b64 <malloc>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	61e0      	str	r0, [r4, #28]
 8010ce0:	b920      	cbnz	r0, 8010cec <_Balloc+0x20>
 8010ce2:	4b18      	ldr	r3, [pc, #96]	; (8010d44 <_Balloc+0x78>)
 8010ce4:	4818      	ldr	r0, [pc, #96]	; (8010d48 <_Balloc+0x7c>)
 8010ce6:	216b      	movs	r1, #107	; 0x6b
 8010ce8:	f001 fd7e 	bl	80127e8 <__assert_func>
 8010cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cf0:	6006      	str	r6, [r0, #0]
 8010cf2:	60c6      	str	r6, [r0, #12]
 8010cf4:	69e6      	ldr	r6, [r4, #28]
 8010cf6:	68f3      	ldr	r3, [r6, #12]
 8010cf8:	b183      	cbz	r3, 8010d1c <_Balloc+0x50>
 8010cfa:	69e3      	ldr	r3, [r4, #28]
 8010cfc:	68db      	ldr	r3, [r3, #12]
 8010cfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d02:	b9b8      	cbnz	r0, 8010d34 <_Balloc+0x68>
 8010d04:	2101      	movs	r1, #1
 8010d06:	fa01 f605 	lsl.w	r6, r1, r5
 8010d0a:	1d72      	adds	r2, r6, #5
 8010d0c:	0092      	lsls	r2, r2, #2
 8010d0e:	4620      	mov	r0, r4
 8010d10:	f001 fd88 	bl	8012824 <_calloc_r>
 8010d14:	b160      	cbz	r0, 8010d30 <_Balloc+0x64>
 8010d16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d1a:	e00e      	b.n	8010d3a <_Balloc+0x6e>
 8010d1c:	2221      	movs	r2, #33	; 0x21
 8010d1e:	2104      	movs	r1, #4
 8010d20:	4620      	mov	r0, r4
 8010d22:	f001 fd7f 	bl	8012824 <_calloc_r>
 8010d26:	69e3      	ldr	r3, [r4, #28]
 8010d28:	60f0      	str	r0, [r6, #12]
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d1e4      	bne.n	8010cfa <_Balloc+0x2e>
 8010d30:	2000      	movs	r0, #0
 8010d32:	bd70      	pop	{r4, r5, r6, pc}
 8010d34:	6802      	ldr	r2, [r0, #0]
 8010d36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d40:	e7f7      	b.n	8010d32 <_Balloc+0x66>
 8010d42:	bf00      	nop
 8010d44:	08013842 	.word	0x08013842
 8010d48:	080138c2 	.word	0x080138c2

08010d4c <_Bfree>:
 8010d4c:	b570      	push	{r4, r5, r6, lr}
 8010d4e:	69c6      	ldr	r6, [r0, #28]
 8010d50:	4605      	mov	r5, r0
 8010d52:	460c      	mov	r4, r1
 8010d54:	b976      	cbnz	r6, 8010d74 <_Bfree+0x28>
 8010d56:	2010      	movs	r0, #16
 8010d58:	f7ff ff04 	bl	8010b64 <malloc>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	61e8      	str	r0, [r5, #28]
 8010d60:	b920      	cbnz	r0, 8010d6c <_Bfree+0x20>
 8010d62:	4b09      	ldr	r3, [pc, #36]	; (8010d88 <_Bfree+0x3c>)
 8010d64:	4809      	ldr	r0, [pc, #36]	; (8010d8c <_Bfree+0x40>)
 8010d66:	218f      	movs	r1, #143	; 0x8f
 8010d68:	f001 fd3e 	bl	80127e8 <__assert_func>
 8010d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d70:	6006      	str	r6, [r0, #0]
 8010d72:	60c6      	str	r6, [r0, #12]
 8010d74:	b13c      	cbz	r4, 8010d86 <_Bfree+0x3a>
 8010d76:	69eb      	ldr	r3, [r5, #28]
 8010d78:	6862      	ldr	r2, [r4, #4]
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d80:	6021      	str	r1, [r4, #0]
 8010d82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d86:	bd70      	pop	{r4, r5, r6, pc}
 8010d88:	08013842 	.word	0x08013842
 8010d8c:	080138c2 	.word	0x080138c2

08010d90 <__multadd>:
 8010d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d94:	690d      	ldr	r5, [r1, #16]
 8010d96:	4607      	mov	r7, r0
 8010d98:	460c      	mov	r4, r1
 8010d9a:	461e      	mov	r6, r3
 8010d9c:	f101 0c14 	add.w	ip, r1, #20
 8010da0:	2000      	movs	r0, #0
 8010da2:	f8dc 3000 	ldr.w	r3, [ip]
 8010da6:	b299      	uxth	r1, r3
 8010da8:	fb02 6101 	mla	r1, r2, r1, r6
 8010dac:	0c1e      	lsrs	r6, r3, #16
 8010dae:	0c0b      	lsrs	r3, r1, #16
 8010db0:	fb02 3306 	mla	r3, r2, r6, r3
 8010db4:	b289      	uxth	r1, r1
 8010db6:	3001      	adds	r0, #1
 8010db8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010dbc:	4285      	cmp	r5, r0
 8010dbe:	f84c 1b04 	str.w	r1, [ip], #4
 8010dc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010dc6:	dcec      	bgt.n	8010da2 <__multadd+0x12>
 8010dc8:	b30e      	cbz	r6, 8010e0e <__multadd+0x7e>
 8010dca:	68a3      	ldr	r3, [r4, #8]
 8010dcc:	42ab      	cmp	r3, r5
 8010dce:	dc19      	bgt.n	8010e04 <__multadd+0x74>
 8010dd0:	6861      	ldr	r1, [r4, #4]
 8010dd2:	4638      	mov	r0, r7
 8010dd4:	3101      	adds	r1, #1
 8010dd6:	f7ff ff79 	bl	8010ccc <_Balloc>
 8010dda:	4680      	mov	r8, r0
 8010ddc:	b928      	cbnz	r0, 8010dea <__multadd+0x5a>
 8010dde:	4602      	mov	r2, r0
 8010de0:	4b0c      	ldr	r3, [pc, #48]	; (8010e14 <__multadd+0x84>)
 8010de2:	480d      	ldr	r0, [pc, #52]	; (8010e18 <__multadd+0x88>)
 8010de4:	21ba      	movs	r1, #186	; 0xba
 8010de6:	f001 fcff 	bl	80127e8 <__assert_func>
 8010dea:	6922      	ldr	r2, [r4, #16]
 8010dec:	3202      	adds	r2, #2
 8010dee:	f104 010c 	add.w	r1, r4, #12
 8010df2:	0092      	lsls	r2, r2, #2
 8010df4:	300c      	adds	r0, #12
 8010df6:	f7fe ffdb 	bl	800fdb0 <memcpy>
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	4638      	mov	r0, r7
 8010dfe:	f7ff ffa5 	bl	8010d4c <_Bfree>
 8010e02:	4644      	mov	r4, r8
 8010e04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e08:	3501      	adds	r5, #1
 8010e0a:	615e      	str	r6, [r3, #20]
 8010e0c:	6125      	str	r5, [r4, #16]
 8010e0e:	4620      	mov	r0, r4
 8010e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e14:	080138b1 	.word	0x080138b1
 8010e18:	080138c2 	.word	0x080138c2

08010e1c <__s2b>:
 8010e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e20:	460c      	mov	r4, r1
 8010e22:	4615      	mov	r5, r2
 8010e24:	461f      	mov	r7, r3
 8010e26:	2209      	movs	r2, #9
 8010e28:	3308      	adds	r3, #8
 8010e2a:	4606      	mov	r6, r0
 8010e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e30:	2100      	movs	r1, #0
 8010e32:	2201      	movs	r2, #1
 8010e34:	429a      	cmp	r2, r3
 8010e36:	db09      	blt.n	8010e4c <__s2b+0x30>
 8010e38:	4630      	mov	r0, r6
 8010e3a:	f7ff ff47 	bl	8010ccc <_Balloc>
 8010e3e:	b940      	cbnz	r0, 8010e52 <__s2b+0x36>
 8010e40:	4602      	mov	r2, r0
 8010e42:	4b19      	ldr	r3, [pc, #100]	; (8010ea8 <__s2b+0x8c>)
 8010e44:	4819      	ldr	r0, [pc, #100]	; (8010eac <__s2b+0x90>)
 8010e46:	21d3      	movs	r1, #211	; 0xd3
 8010e48:	f001 fcce 	bl	80127e8 <__assert_func>
 8010e4c:	0052      	lsls	r2, r2, #1
 8010e4e:	3101      	adds	r1, #1
 8010e50:	e7f0      	b.n	8010e34 <__s2b+0x18>
 8010e52:	9b08      	ldr	r3, [sp, #32]
 8010e54:	6143      	str	r3, [r0, #20]
 8010e56:	2d09      	cmp	r5, #9
 8010e58:	f04f 0301 	mov.w	r3, #1
 8010e5c:	6103      	str	r3, [r0, #16]
 8010e5e:	dd16      	ble.n	8010e8e <__s2b+0x72>
 8010e60:	f104 0909 	add.w	r9, r4, #9
 8010e64:	46c8      	mov	r8, r9
 8010e66:	442c      	add	r4, r5
 8010e68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010e6c:	4601      	mov	r1, r0
 8010e6e:	3b30      	subs	r3, #48	; 0x30
 8010e70:	220a      	movs	r2, #10
 8010e72:	4630      	mov	r0, r6
 8010e74:	f7ff ff8c 	bl	8010d90 <__multadd>
 8010e78:	45a0      	cmp	r8, r4
 8010e7a:	d1f5      	bne.n	8010e68 <__s2b+0x4c>
 8010e7c:	f1a5 0408 	sub.w	r4, r5, #8
 8010e80:	444c      	add	r4, r9
 8010e82:	1b2d      	subs	r5, r5, r4
 8010e84:	1963      	adds	r3, r4, r5
 8010e86:	42bb      	cmp	r3, r7
 8010e88:	db04      	blt.n	8010e94 <__s2b+0x78>
 8010e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e8e:	340a      	adds	r4, #10
 8010e90:	2509      	movs	r5, #9
 8010e92:	e7f6      	b.n	8010e82 <__s2b+0x66>
 8010e94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e98:	4601      	mov	r1, r0
 8010e9a:	3b30      	subs	r3, #48	; 0x30
 8010e9c:	220a      	movs	r2, #10
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	f7ff ff76 	bl	8010d90 <__multadd>
 8010ea4:	e7ee      	b.n	8010e84 <__s2b+0x68>
 8010ea6:	bf00      	nop
 8010ea8:	080138b1 	.word	0x080138b1
 8010eac:	080138c2 	.word	0x080138c2

08010eb0 <__hi0bits>:
 8010eb0:	0c03      	lsrs	r3, r0, #16
 8010eb2:	041b      	lsls	r3, r3, #16
 8010eb4:	b9d3      	cbnz	r3, 8010eec <__hi0bits+0x3c>
 8010eb6:	0400      	lsls	r0, r0, #16
 8010eb8:	2310      	movs	r3, #16
 8010eba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010ebe:	bf04      	itt	eq
 8010ec0:	0200      	lsleq	r0, r0, #8
 8010ec2:	3308      	addeq	r3, #8
 8010ec4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010ec8:	bf04      	itt	eq
 8010eca:	0100      	lsleq	r0, r0, #4
 8010ecc:	3304      	addeq	r3, #4
 8010ece:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ed2:	bf04      	itt	eq
 8010ed4:	0080      	lsleq	r0, r0, #2
 8010ed6:	3302      	addeq	r3, #2
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	db05      	blt.n	8010ee8 <__hi0bits+0x38>
 8010edc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010ee0:	f103 0301 	add.w	r3, r3, #1
 8010ee4:	bf08      	it	eq
 8010ee6:	2320      	moveq	r3, #32
 8010ee8:	4618      	mov	r0, r3
 8010eea:	4770      	bx	lr
 8010eec:	2300      	movs	r3, #0
 8010eee:	e7e4      	b.n	8010eba <__hi0bits+0xa>

08010ef0 <__lo0bits>:
 8010ef0:	6803      	ldr	r3, [r0, #0]
 8010ef2:	f013 0207 	ands.w	r2, r3, #7
 8010ef6:	d00c      	beq.n	8010f12 <__lo0bits+0x22>
 8010ef8:	07d9      	lsls	r1, r3, #31
 8010efa:	d422      	bmi.n	8010f42 <__lo0bits+0x52>
 8010efc:	079a      	lsls	r2, r3, #30
 8010efe:	bf49      	itett	mi
 8010f00:	085b      	lsrmi	r3, r3, #1
 8010f02:	089b      	lsrpl	r3, r3, #2
 8010f04:	6003      	strmi	r3, [r0, #0]
 8010f06:	2201      	movmi	r2, #1
 8010f08:	bf5c      	itt	pl
 8010f0a:	6003      	strpl	r3, [r0, #0]
 8010f0c:	2202      	movpl	r2, #2
 8010f0e:	4610      	mov	r0, r2
 8010f10:	4770      	bx	lr
 8010f12:	b299      	uxth	r1, r3
 8010f14:	b909      	cbnz	r1, 8010f1a <__lo0bits+0x2a>
 8010f16:	0c1b      	lsrs	r3, r3, #16
 8010f18:	2210      	movs	r2, #16
 8010f1a:	b2d9      	uxtb	r1, r3
 8010f1c:	b909      	cbnz	r1, 8010f22 <__lo0bits+0x32>
 8010f1e:	3208      	adds	r2, #8
 8010f20:	0a1b      	lsrs	r3, r3, #8
 8010f22:	0719      	lsls	r1, r3, #28
 8010f24:	bf04      	itt	eq
 8010f26:	091b      	lsreq	r3, r3, #4
 8010f28:	3204      	addeq	r2, #4
 8010f2a:	0799      	lsls	r1, r3, #30
 8010f2c:	bf04      	itt	eq
 8010f2e:	089b      	lsreq	r3, r3, #2
 8010f30:	3202      	addeq	r2, #2
 8010f32:	07d9      	lsls	r1, r3, #31
 8010f34:	d403      	bmi.n	8010f3e <__lo0bits+0x4e>
 8010f36:	085b      	lsrs	r3, r3, #1
 8010f38:	f102 0201 	add.w	r2, r2, #1
 8010f3c:	d003      	beq.n	8010f46 <__lo0bits+0x56>
 8010f3e:	6003      	str	r3, [r0, #0]
 8010f40:	e7e5      	b.n	8010f0e <__lo0bits+0x1e>
 8010f42:	2200      	movs	r2, #0
 8010f44:	e7e3      	b.n	8010f0e <__lo0bits+0x1e>
 8010f46:	2220      	movs	r2, #32
 8010f48:	e7e1      	b.n	8010f0e <__lo0bits+0x1e>
	...

08010f4c <__i2b>:
 8010f4c:	b510      	push	{r4, lr}
 8010f4e:	460c      	mov	r4, r1
 8010f50:	2101      	movs	r1, #1
 8010f52:	f7ff febb 	bl	8010ccc <_Balloc>
 8010f56:	4602      	mov	r2, r0
 8010f58:	b928      	cbnz	r0, 8010f66 <__i2b+0x1a>
 8010f5a:	4b05      	ldr	r3, [pc, #20]	; (8010f70 <__i2b+0x24>)
 8010f5c:	4805      	ldr	r0, [pc, #20]	; (8010f74 <__i2b+0x28>)
 8010f5e:	f240 1145 	movw	r1, #325	; 0x145
 8010f62:	f001 fc41 	bl	80127e8 <__assert_func>
 8010f66:	2301      	movs	r3, #1
 8010f68:	6144      	str	r4, [r0, #20]
 8010f6a:	6103      	str	r3, [r0, #16]
 8010f6c:	bd10      	pop	{r4, pc}
 8010f6e:	bf00      	nop
 8010f70:	080138b1 	.word	0x080138b1
 8010f74:	080138c2 	.word	0x080138c2

08010f78 <__multiply>:
 8010f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7c:	4691      	mov	r9, r2
 8010f7e:	690a      	ldr	r2, [r1, #16]
 8010f80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	bfb8      	it	lt
 8010f88:	460b      	movlt	r3, r1
 8010f8a:	460c      	mov	r4, r1
 8010f8c:	bfbc      	itt	lt
 8010f8e:	464c      	movlt	r4, r9
 8010f90:	4699      	movlt	r9, r3
 8010f92:	6927      	ldr	r7, [r4, #16]
 8010f94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010f98:	68a3      	ldr	r3, [r4, #8]
 8010f9a:	6861      	ldr	r1, [r4, #4]
 8010f9c:	eb07 060a 	add.w	r6, r7, sl
 8010fa0:	42b3      	cmp	r3, r6
 8010fa2:	b085      	sub	sp, #20
 8010fa4:	bfb8      	it	lt
 8010fa6:	3101      	addlt	r1, #1
 8010fa8:	f7ff fe90 	bl	8010ccc <_Balloc>
 8010fac:	b930      	cbnz	r0, 8010fbc <__multiply+0x44>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	4b44      	ldr	r3, [pc, #272]	; (80110c4 <__multiply+0x14c>)
 8010fb2:	4845      	ldr	r0, [pc, #276]	; (80110c8 <__multiply+0x150>)
 8010fb4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010fb8:	f001 fc16 	bl	80127e8 <__assert_func>
 8010fbc:	f100 0514 	add.w	r5, r0, #20
 8010fc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010fc4:	462b      	mov	r3, r5
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	4543      	cmp	r3, r8
 8010fca:	d321      	bcc.n	8011010 <__multiply+0x98>
 8010fcc:	f104 0314 	add.w	r3, r4, #20
 8010fd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010fd4:	f109 0314 	add.w	r3, r9, #20
 8010fd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010fdc:	9202      	str	r2, [sp, #8]
 8010fde:	1b3a      	subs	r2, r7, r4
 8010fe0:	3a15      	subs	r2, #21
 8010fe2:	f022 0203 	bic.w	r2, r2, #3
 8010fe6:	3204      	adds	r2, #4
 8010fe8:	f104 0115 	add.w	r1, r4, #21
 8010fec:	428f      	cmp	r7, r1
 8010fee:	bf38      	it	cc
 8010ff0:	2204      	movcc	r2, #4
 8010ff2:	9201      	str	r2, [sp, #4]
 8010ff4:	9a02      	ldr	r2, [sp, #8]
 8010ff6:	9303      	str	r3, [sp, #12]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d80c      	bhi.n	8011016 <__multiply+0x9e>
 8010ffc:	2e00      	cmp	r6, #0
 8010ffe:	dd03      	ble.n	8011008 <__multiply+0x90>
 8011000:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011004:	2b00      	cmp	r3, #0
 8011006:	d05b      	beq.n	80110c0 <__multiply+0x148>
 8011008:	6106      	str	r6, [r0, #16]
 801100a:	b005      	add	sp, #20
 801100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011010:	f843 2b04 	str.w	r2, [r3], #4
 8011014:	e7d8      	b.n	8010fc8 <__multiply+0x50>
 8011016:	f8b3 a000 	ldrh.w	sl, [r3]
 801101a:	f1ba 0f00 	cmp.w	sl, #0
 801101e:	d024      	beq.n	801106a <__multiply+0xf2>
 8011020:	f104 0e14 	add.w	lr, r4, #20
 8011024:	46a9      	mov	r9, r5
 8011026:	f04f 0c00 	mov.w	ip, #0
 801102a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801102e:	f8d9 1000 	ldr.w	r1, [r9]
 8011032:	fa1f fb82 	uxth.w	fp, r2
 8011036:	b289      	uxth	r1, r1
 8011038:	fb0a 110b 	mla	r1, sl, fp, r1
 801103c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011040:	f8d9 2000 	ldr.w	r2, [r9]
 8011044:	4461      	add	r1, ip
 8011046:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801104a:	fb0a c20b 	mla	r2, sl, fp, ip
 801104e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011052:	b289      	uxth	r1, r1
 8011054:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011058:	4577      	cmp	r7, lr
 801105a:	f849 1b04 	str.w	r1, [r9], #4
 801105e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011062:	d8e2      	bhi.n	801102a <__multiply+0xb2>
 8011064:	9a01      	ldr	r2, [sp, #4]
 8011066:	f845 c002 	str.w	ip, [r5, r2]
 801106a:	9a03      	ldr	r2, [sp, #12]
 801106c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011070:	3304      	adds	r3, #4
 8011072:	f1b9 0f00 	cmp.w	r9, #0
 8011076:	d021      	beq.n	80110bc <__multiply+0x144>
 8011078:	6829      	ldr	r1, [r5, #0]
 801107a:	f104 0c14 	add.w	ip, r4, #20
 801107e:	46ae      	mov	lr, r5
 8011080:	f04f 0a00 	mov.w	sl, #0
 8011084:	f8bc b000 	ldrh.w	fp, [ip]
 8011088:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801108c:	fb09 220b 	mla	r2, r9, fp, r2
 8011090:	4452      	add	r2, sl
 8011092:	b289      	uxth	r1, r1
 8011094:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011098:	f84e 1b04 	str.w	r1, [lr], #4
 801109c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80110a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80110a4:	f8be 1000 	ldrh.w	r1, [lr]
 80110a8:	fb09 110a 	mla	r1, r9, sl, r1
 80110ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80110b0:	4567      	cmp	r7, ip
 80110b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80110b6:	d8e5      	bhi.n	8011084 <__multiply+0x10c>
 80110b8:	9a01      	ldr	r2, [sp, #4]
 80110ba:	50a9      	str	r1, [r5, r2]
 80110bc:	3504      	adds	r5, #4
 80110be:	e799      	b.n	8010ff4 <__multiply+0x7c>
 80110c0:	3e01      	subs	r6, #1
 80110c2:	e79b      	b.n	8010ffc <__multiply+0x84>
 80110c4:	080138b1 	.word	0x080138b1
 80110c8:	080138c2 	.word	0x080138c2

080110cc <__pow5mult>:
 80110cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110d0:	4615      	mov	r5, r2
 80110d2:	f012 0203 	ands.w	r2, r2, #3
 80110d6:	4606      	mov	r6, r0
 80110d8:	460f      	mov	r7, r1
 80110da:	d007      	beq.n	80110ec <__pow5mult+0x20>
 80110dc:	4c25      	ldr	r4, [pc, #148]	; (8011174 <__pow5mult+0xa8>)
 80110de:	3a01      	subs	r2, #1
 80110e0:	2300      	movs	r3, #0
 80110e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110e6:	f7ff fe53 	bl	8010d90 <__multadd>
 80110ea:	4607      	mov	r7, r0
 80110ec:	10ad      	asrs	r5, r5, #2
 80110ee:	d03d      	beq.n	801116c <__pow5mult+0xa0>
 80110f0:	69f4      	ldr	r4, [r6, #28]
 80110f2:	b97c      	cbnz	r4, 8011114 <__pow5mult+0x48>
 80110f4:	2010      	movs	r0, #16
 80110f6:	f7ff fd35 	bl	8010b64 <malloc>
 80110fa:	4602      	mov	r2, r0
 80110fc:	61f0      	str	r0, [r6, #28]
 80110fe:	b928      	cbnz	r0, 801110c <__pow5mult+0x40>
 8011100:	4b1d      	ldr	r3, [pc, #116]	; (8011178 <__pow5mult+0xac>)
 8011102:	481e      	ldr	r0, [pc, #120]	; (801117c <__pow5mult+0xb0>)
 8011104:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011108:	f001 fb6e 	bl	80127e8 <__assert_func>
 801110c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011110:	6004      	str	r4, [r0, #0]
 8011112:	60c4      	str	r4, [r0, #12]
 8011114:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801111c:	b94c      	cbnz	r4, 8011132 <__pow5mult+0x66>
 801111e:	f240 2171 	movw	r1, #625	; 0x271
 8011122:	4630      	mov	r0, r6
 8011124:	f7ff ff12 	bl	8010f4c <__i2b>
 8011128:	2300      	movs	r3, #0
 801112a:	f8c8 0008 	str.w	r0, [r8, #8]
 801112e:	4604      	mov	r4, r0
 8011130:	6003      	str	r3, [r0, #0]
 8011132:	f04f 0900 	mov.w	r9, #0
 8011136:	07eb      	lsls	r3, r5, #31
 8011138:	d50a      	bpl.n	8011150 <__pow5mult+0x84>
 801113a:	4639      	mov	r1, r7
 801113c:	4622      	mov	r2, r4
 801113e:	4630      	mov	r0, r6
 8011140:	f7ff ff1a 	bl	8010f78 <__multiply>
 8011144:	4639      	mov	r1, r7
 8011146:	4680      	mov	r8, r0
 8011148:	4630      	mov	r0, r6
 801114a:	f7ff fdff 	bl	8010d4c <_Bfree>
 801114e:	4647      	mov	r7, r8
 8011150:	106d      	asrs	r5, r5, #1
 8011152:	d00b      	beq.n	801116c <__pow5mult+0xa0>
 8011154:	6820      	ldr	r0, [r4, #0]
 8011156:	b938      	cbnz	r0, 8011168 <__pow5mult+0x9c>
 8011158:	4622      	mov	r2, r4
 801115a:	4621      	mov	r1, r4
 801115c:	4630      	mov	r0, r6
 801115e:	f7ff ff0b 	bl	8010f78 <__multiply>
 8011162:	6020      	str	r0, [r4, #0]
 8011164:	f8c0 9000 	str.w	r9, [r0]
 8011168:	4604      	mov	r4, r0
 801116a:	e7e4      	b.n	8011136 <__pow5mult+0x6a>
 801116c:	4638      	mov	r0, r7
 801116e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011172:	bf00      	nop
 8011174:	08013a10 	.word	0x08013a10
 8011178:	08013842 	.word	0x08013842
 801117c:	080138c2 	.word	0x080138c2

08011180 <__lshift>:
 8011180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011184:	460c      	mov	r4, r1
 8011186:	6849      	ldr	r1, [r1, #4]
 8011188:	6923      	ldr	r3, [r4, #16]
 801118a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801118e:	68a3      	ldr	r3, [r4, #8]
 8011190:	4607      	mov	r7, r0
 8011192:	4691      	mov	r9, r2
 8011194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011198:	f108 0601 	add.w	r6, r8, #1
 801119c:	42b3      	cmp	r3, r6
 801119e:	db0b      	blt.n	80111b8 <__lshift+0x38>
 80111a0:	4638      	mov	r0, r7
 80111a2:	f7ff fd93 	bl	8010ccc <_Balloc>
 80111a6:	4605      	mov	r5, r0
 80111a8:	b948      	cbnz	r0, 80111be <__lshift+0x3e>
 80111aa:	4602      	mov	r2, r0
 80111ac:	4b28      	ldr	r3, [pc, #160]	; (8011250 <__lshift+0xd0>)
 80111ae:	4829      	ldr	r0, [pc, #164]	; (8011254 <__lshift+0xd4>)
 80111b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80111b4:	f001 fb18 	bl	80127e8 <__assert_func>
 80111b8:	3101      	adds	r1, #1
 80111ba:	005b      	lsls	r3, r3, #1
 80111bc:	e7ee      	b.n	801119c <__lshift+0x1c>
 80111be:	2300      	movs	r3, #0
 80111c0:	f100 0114 	add.w	r1, r0, #20
 80111c4:	f100 0210 	add.w	r2, r0, #16
 80111c8:	4618      	mov	r0, r3
 80111ca:	4553      	cmp	r3, sl
 80111cc:	db33      	blt.n	8011236 <__lshift+0xb6>
 80111ce:	6920      	ldr	r0, [r4, #16]
 80111d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111d4:	f104 0314 	add.w	r3, r4, #20
 80111d8:	f019 091f 	ands.w	r9, r9, #31
 80111dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111e4:	d02b      	beq.n	801123e <__lshift+0xbe>
 80111e6:	f1c9 0e20 	rsb	lr, r9, #32
 80111ea:	468a      	mov	sl, r1
 80111ec:	2200      	movs	r2, #0
 80111ee:	6818      	ldr	r0, [r3, #0]
 80111f0:	fa00 f009 	lsl.w	r0, r0, r9
 80111f4:	4310      	orrs	r0, r2
 80111f6:	f84a 0b04 	str.w	r0, [sl], #4
 80111fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80111fe:	459c      	cmp	ip, r3
 8011200:	fa22 f20e 	lsr.w	r2, r2, lr
 8011204:	d8f3      	bhi.n	80111ee <__lshift+0x6e>
 8011206:	ebac 0304 	sub.w	r3, ip, r4
 801120a:	3b15      	subs	r3, #21
 801120c:	f023 0303 	bic.w	r3, r3, #3
 8011210:	3304      	adds	r3, #4
 8011212:	f104 0015 	add.w	r0, r4, #21
 8011216:	4584      	cmp	ip, r0
 8011218:	bf38      	it	cc
 801121a:	2304      	movcc	r3, #4
 801121c:	50ca      	str	r2, [r1, r3]
 801121e:	b10a      	cbz	r2, 8011224 <__lshift+0xa4>
 8011220:	f108 0602 	add.w	r6, r8, #2
 8011224:	3e01      	subs	r6, #1
 8011226:	4638      	mov	r0, r7
 8011228:	612e      	str	r6, [r5, #16]
 801122a:	4621      	mov	r1, r4
 801122c:	f7ff fd8e 	bl	8010d4c <_Bfree>
 8011230:	4628      	mov	r0, r5
 8011232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011236:	f842 0f04 	str.w	r0, [r2, #4]!
 801123a:	3301      	adds	r3, #1
 801123c:	e7c5      	b.n	80111ca <__lshift+0x4a>
 801123e:	3904      	subs	r1, #4
 8011240:	f853 2b04 	ldr.w	r2, [r3], #4
 8011244:	f841 2f04 	str.w	r2, [r1, #4]!
 8011248:	459c      	cmp	ip, r3
 801124a:	d8f9      	bhi.n	8011240 <__lshift+0xc0>
 801124c:	e7ea      	b.n	8011224 <__lshift+0xa4>
 801124e:	bf00      	nop
 8011250:	080138b1 	.word	0x080138b1
 8011254:	080138c2 	.word	0x080138c2

08011258 <__mcmp>:
 8011258:	b530      	push	{r4, r5, lr}
 801125a:	6902      	ldr	r2, [r0, #16]
 801125c:	690c      	ldr	r4, [r1, #16]
 801125e:	1b12      	subs	r2, r2, r4
 8011260:	d10e      	bne.n	8011280 <__mcmp+0x28>
 8011262:	f100 0314 	add.w	r3, r0, #20
 8011266:	3114      	adds	r1, #20
 8011268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801126c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011278:	42a5      	cmp	r5, r4
 801127a:	d003      	beq.n	8011284 <__mcmp+0x2c>
 801127c:	d305      	bcc.n	801128a <__mcmp+0x32>
 801127e:	2201      	movs	r2, #1
 8011280:	4610      	mov	r0, r2
 8011282:	bd30      	pop	{r4, r5, pc}
 8011284:	4283      	cmp	r3, r0
 8011286:	d3f3      	bcc.n	8011270 <__mcmp+0x18>
 8011288:	e7fa      	b.n	8011280 <__mcmp+0x28>
 801128a:	f04f 32ff 	mov.w	r2, #4294967295
 801128e:	e7f7      	b.n	8011280 <__mcmp+0x28>

08011290 <__mdiff>:
 8011290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	460c      	mov	r4, r1
 8011296:	4606      	mov	r6, r0
 8011298:	4611      	mov	r1, r2
 801129a:	4620      	mov	r0, r4
 801129c:	4690      	mov	r8, r2
 801129e:	f7ff ffdb 	bl	8011258 <__mcmp>
 80112a2:	1e05      	subs	r5, r0, #0
 80112a4:	d110      	bne.n	80112c8 <__mdiff+0x38>
 80112a6:	4629      	mov	r1, r5
 80112a8:	4630      	mov	r0, r6
 80112aa:	f7ff fd0f 	bl	8010ccc <_Balloc>
 80112ae:	b930      	cbnz	r0, 80112be <__mdiff+0x2e>
 80112b0:	4b3a      	ldr	r3, [pc, #232]	; (801139c <__mdiff+0x10c>)
 80112b2:	4602      	mov	r2, r0
 80112b4:	f240 2137 	movw	r1, #567	; 0x237
 80112b8:	4839      	ldr	r0, [pc, #228]	; (80113a0 <__mdiff+0x110>)
 80112ba:	f001 fa95 	bl	80127e8 <__assert_func>
 80112be:	2301      	movs	r3, #1
 80112c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112c8:	bfa4      	itt	ge
 80112ca:	4643      	movge	r3, r8
 80112cc:	46a0      	movge	r8, r4
 80112ce:	4630      	mov	r0, r6
 80112d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80112d4:	bfa6      	itte	ge
 80112d6:	461c      	movge	r4, r3
 80112d8:	2500      	movge	r5, #0
 80112da:	2501      	movlt	r5, #1
 80112dc:	f7ff fcf6 	bl	8010ccc <_Balloc>
 80112e0:	b920      	cbnz	r0, 80112ec <__mdiff+0x5c>
 80112e2:	4b2e      	ldr	r3, [pc, #184]	; (801139c <__mdiff+0x10c>)
 80112e4:	4602      	mov	r2, r0
 80112e6:	f240 2145 	movw	r1, #581	; 0x245
 80112ea:	e7e5      	b.n	80112b8 <__mdiff+0x28>
 80112ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80112f0:	6926      	ldr	r6, [r4, #16]
 80112f2:	60c5      	str	r5, [r0, #12]
 80112f4:	f104 0914 	add.w	r9, r4, #20
 80112f8:	f108 0514 	add.w	r5, r8, #20
 80112fc:	f100 0e14 	add.w	lr, r0, #20
 8011300:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011304:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011308:	f108 0210 	add.w	r2, r8, #16
 801130c:	46f2      	mov	sl, lr
 801130e:	2100      	movs	r1, #0
 8011310:	f859 3b04 	ldr.w	r3, [r9], #4
 8011314:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011318:	fa11 f88b 	uxtah	r8, r1, fp
 801131c:	b299      	uxth	r1, r3
 801131e:	0c1b      	lsrs	r3, r3, #16
 8011320:	eba8 0801 	sub.w	r8, r8, r1
 8011324:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011328:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801132c:	fa1f f888 	uxth.w	r8, r8
 8011330:	1419      	asrs	r1, r3, #16
 8011332:	454e      	cmp	r6, r9
 8011334:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011338:	f84a 3b04 	str.w	r3, [sl], #4
 801133c:	d8e8      	bhi.n	8011310 <__mdiff+0x80>
 801133e:	1b33      	subs	r3, r6, r4
 8011340:	3b15      	subs	r3, #21
 8011342:	f023 0303 	bic.w	r3, r3, #3
 8011346:	3304      	adds	r3, #4
 8011348:	3415      	adds	r4, #21
 801134a:	42a6      	cmp	r6, r4
 801134c:	bf38      	it	cc
 801134e:	2304      	movcc	r3, #4
 8011350:	441d      	add	r5, r3
 8011352:	4473      	add	r3, lr
 8011354:	469e      	mov	lr, r3
 8011356:	462e      	mov	r6, r5
 8011358:	4566      	cmp	r6, ip
 801135a:	d30e      	bcc.n	801137a <__mdiff+0xea>
 801135c:	f10c 0203 	add.w	r2, ip, #3
 8011360:	1b52      	subs	r2, r2, r5
 8011362:	f022 0203 	bic.w	r2, r2, #3
 8011366:	3d03      	subs	r5, #3
 8011368:	45ac      	cmp	ip, r5
 801136a:	bf38      	it	cc
 801136c:	2200      	movcc	r2, #0
 801136e:	4413      	add	r3, r2
 8011370:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011374:	b17a      	cbz	r2, 8011396 <__mdiff+0x106>
 8011376:	6107      	str	r7, [r0, #16]
 8011378:	e7a4      	b.n	80112c4 <__mdiff+0x34>
 801137a:	f856 8b04 	ldr.w	r8, [r6], #4
 801137e:	fa11 f288 	uxtah	r2, r1, r8
 8011382:	1414      	asrs	r4, r2, #16
 8011384:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011388:	b292      	uxth	r2, r2
 801138a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801138e:	f84e 2b04 	str.w	r2, [lr], #4
 8011392:	1421      	asrs	r1, r4, #16
 8011394:	e7e0      	b.n	8011358 <__mdiff+0xc8>
 8011396:	3f01      	subs	r7, #1
 8011398:	e7ea      	b.n	8011370 <__mdiff+0xe0>
 801139a:	bf00      	nop
 801139c:	080138b1 	.word	0x080138b1
 80113a0:	080138c2 	.word	0x080138c2

080113a4 <__ulp>:
 80113a4:	b082      	sub	sp, #8
 80113a6:	ed8d 0b00 	vstr	d0, [sp]
 80113aa:	9a01      	ldr	r2, [sp, #4]
 80113ac:	4b0f      	ldr	r3, [pc, #60]	; (80113ec <__ulp+0x48>)
 80113ae:	4013      	ands	r3, r2
 80113b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	dc08      	bgt.n	80113ca <__ulp+0x26>
 80113b8:	425b      	negs	r3, r3
 80113ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80113be:	ea4f 5223 	mov.w	r2, r3, asr #20
 80113c2:	da04      	bge.n	80113ce <__ulp+0x2a>
 80113c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80113c8:	4113      	asrs	r3, r2
 80113ca:	2200      	movs	r2, #0
 80113cc:	e008      	b.n	80113e0 <__ulp+0x3c>
 80113ce:	f1a2 0314 	sub.w	r3, r2, #20
 80113d2:	2b1e      	cmp	r3, #30
 80113d4:	bfda      	itte	le
 80113d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80113da:	40da      	lsrle	r2, r3
 80113dc:	2201      	movgt	r2, #1
 80113de:	2300      	movs	r3, #0
 80113e0:	4619      	mov	r1, r3
 80113e2:	4610      	mov	r0, r2
 80113e4:	ec41 0b10 	vmov	d0, r0, r1
 80113e8:	b002      	add	sp, #8
 80113ea:	4770      	bx	lr
 80113ec:	7ff00000 	.word	0x7ff00000

080113f0 <__b2d>:
 80113f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113f4:	6906      	ldr	r6, [r0, #16]
 80113f6:	f100 0814 	add.w	r8, r0, #20
 80113fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80113fe:	1f37      	subs	r7, r6, #4
 8011400:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011404:	4610      	mov	r0, r2
 8011406:	f7ff fd53 	bl	8010eb0 <__hi0bits>
 801140a:	f1c0 0320 	rsb	r3, r0, #32
 801140e:	280a      	cmp	r0, #10
 8011410:	600b      	str	r3, [r1, #0]
 8011412:	491b      	ldr	r1, [pc, #108]	; (8011480 <__b2d+0x90>)
 8011414:	dc15      	bgt.n	8011442 <__b2d+0x52>
 8011416:	f1c0 0c0b 	rsb	ip, r0, #11
 801141a:	fa22 f30c 	lsr.w	r3, r2, ip
 801141e:	45b8      	cmp	r8, r7
 8011420:	ea43 0501 	orr.w	r5, r3, r1
 8011424:	bf34      	ite	cc
 8011426:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801142a:	2300      	movcs	r3, #0
 801142c:	3015      	adds	r0, #21
 801142e:	fa02 f000 	lsl.w	r0, r2, r0
 8011432:	fa23 f30c 	lsr.w	r3, r3, ip
 8011436:	4303      	orrs	r3, r0
 8011438:	461c      	mov	r4, r3
 801143a:	ec45 4b10 	vmov	d0, r4, r5
 801143e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011442:	45b8      	cmp	r8, r7
 8011444:	bf3a      	itte	cc
 8011446:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801144a:	f1a6 0708 	subcc.w	r7, r6, #8
 801144e:	2300      	movcs	r3, #0
 8011450:	380b      	subs	r0, #11
 8011452:	d012      	beq.n	801147a <__b2d+0x8a>
 8011454:	f1c0 0120 	rsb	r1, r0, #32
 8011458:	fa23 f401 	lsr.w	r4, r3, r1
 801145c:	4082      	lsls	r2, r0
 801145e:	4322      	orrs	r2, r4
 8011460:	4547      	cmp	r7, r8
 8011462:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011466:	bf8c      	ite	hi
 8011468:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801146c:	2200      	movls	r2, #0
 801146e:	4083      	lsls	r3, r0
 8011470:	40ca      	lsrs	r2, r1
 8011472:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011476:	4313      	orrs	r3, r2
 8011478:	e7de      	b.n	8011438 <__b2d+0x48>
 801147a:	ea42 0501 	orr.w	r5, r2, r1
 801147e:	e7db      	b.n	8011438 <__b2d+0x48>
 8011480:	3ff00000 	.word	0x3ff00000

08011484 <__d2b>:
 8011484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011488:	460f      	mov	r7, r1
 801148a:	2101      	movs	r1, #1
 801148c:	ec59 8b10 	vmov	r8, r9, d0
 8011490:	4616      	mov	r6, r2
 8011492:	f7ff fc1b 	bl	8010ccc <_Balloc>
 8011496:	4604      	mov	r4, r0
 8011498:	b930      	cbnz	r0, 80114a8 <__d2b+0x24>
 801149a:	4602      	mov	r2, r0
 801149c:	4b24      	ldr	r3, [pc, #144]	; (8011530 <__d2b+0xac>)
 801149e:	4825      	ldr	r0, [pc, #148]	; (8011534 <__d2b+0xb0>)
 80114a0:	f240 310f 	movw	r1, #783	; 0x30f
 80114a4:	f001 f9a0 	bl	80127e8 <__assert_func>
 80114a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80114ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114b0:	bb2d      	cbnz	r5, 80114fe <__d2b+0x7a>
 80114b2:	9301      	str	r3, [sp, #4]
 80114b4:	f1b8 0300 	subs.w	r3, r8, #0
 80114b8:	d026      	beq.n	8011508 <__d2b+0x84>
 80114ba:	4668      	mov	r0, sp
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	f7ff fd17 	bl	8010ef0 <__lo0bits>
 80114c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80114c6:	b1e8      	cbz	r0, 8011504 <__d2b+0x80>
 80114c8:	f1c0 0320 	rsb	r3, r0, #32
 80114cc:	fa02 f303 	lsl.w	r3, r2, r3
 80114d0:	430b      	orrs	r3, r1
 80114d2:	40c2      	lsrs	r2, r0
 80114d4:	6163      	str	r3, [r4, #20]
 80114d6:	9201      	str	r2, [sp, #4]
 80114d8:	9b01      	ldr	r3, [sp, #4]
 80114da:	61a3      	str	r3, [r4, #24]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	bf14      	ite	ne
 80114e0:	2202      	movne	r2, #2
 80114e2:	2201      	moveq	r2, #1
 80114e4:	6122      	str	r2, [r4, #16]
 80114e6:	b1bd      	cbz	r5, 8011518 <__d2b+0x94>
 80114e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80114ec:	4405      	add	r5, r0
 80114ee:	603d      	str	r5, [r7, #0]
 80114f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80114f4:	6030      	str	r0, [r6, #0]
 80114f6:	4620      	mov	r0, r4
 80114f8:	b003      	add	sp, #12
 80114fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011502:	e7d6      	b.n	80114b2 <__d2b+0x2e>
 8011504:	6161      	str	r1, [r4, #20]
 8011506:	e7e7      	b.n	80114d8 <__d2b+0x54>
 8011508:	a801      	add	r0, sp, #4
 801150a:	f7ff fcf1 	bl	8010ef0 <__lo0bits>
 801150e:	9b01      	ldr	r3, [sp, #4]
 8011510:	6163      	str	r3, [r4, #20]
 8011512:	3020      	adds	r0, #32
 8011514:	2201      	movs	r2, #1
 8011516:	e7e5      	b.n	80114e4 <__d2b+0x60>
 8011518:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801151c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011520:	6038      	str	r0, [r7, #0]
 8011522:	6918      	ldr	r0, [r3, #16]
 8011524:	f7ff fcc4 	bl	8010eb0 <__hi0bits>
 8011528:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801152c:	e7e2      	b.n	80114f4 <__d2b+0x70>
 801152e:	bf00      	nop
 8011530:	080138b1 	.word	0x080138b1
 8011534:	080138c2 	.word	0x080138c2

08011538 <__ratio>:
 8011538:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801153c:	4688      	mov	r8, r1
 801153e:	4669      	mov	r1, sp
 8011540:	4681      	mov	r9, r0
 8011542:	f7ff ff55 	bl	80113f0 <__b2d>
 8011546:	a901      	add	r1, sp, #4
 8011548:	4640      	mov	r0, r8
 801154a:	ec55 4b10 	vmov	r4, r5, d0
 801154e:	f7ff ff4f 	bl	80113f0 <__b2d>
 8011552:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011556:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801155a:	eba3 0c02 	sub.w	ip, r3, r2
 801155e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011562:	1a9b      	subs	r3, r3, r2
 8011564:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011568:	ec51 0b10 	vmov	r0, r1, d0
 801156c:	2b00      	cmp	r3, #0
 801156e:	bfd6      	itet	le
 8011570:	460a      	movle	r2, r1
 8011572:	462a      	movgt	r2, r5
 8011574:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011578:	468b      	mov	fp, r1
 801157a:	462f      	mov	r7, r5
 801157c:	bfd4      	ite	le
 801157e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011582:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011586:	4620      	mov	r0, r4
 8011588:	ee10 2a10 	vmov	r2, s0
 801158c:	465b      	mov	r3, fp
 801158e:	4639      	mov	r1, r7
 8011590:	f7ef f95c 	bl	800084c <__aeabi_ddiv>
 8011594:	ec41 0b10 	vmov	d0, r0, r1
 8011598:	b003      	add	sp, #12
 801159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801159e <__copybits>:
 801159e:	3901      	subs	r1, #1
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	1149      	asrs	r1, r1, #5
 80115a4:	6914      	ldr	r4, [r2, #16]
 80115a6:	3101      	adds	r1, #1
 80115a8:	f102 0314 	add.w	r3, r2, #20
 80115ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80115b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80115b4:	1f05      	subs	r5, r0, #4
 80115b6:	42a3      	cmp	r3, r4
 80115b8:	d30c      	bcc.n	80115d4 <__copybits+0x36>
 80115ba:	1aa3      	subs	r3, r4, r2
 80115bc:	3b11      	subs	r3, #17
 80115be:	f023 0303 	bic.w	r3, r3, #3
 80115c2:	3211      	adds	r2, #17
 80115c4:	42a2      	cmp	r2, r4
 80115c6:	bf88      	it	hi
 80115c8:	2300      	movhi	r3, #0
 80115ca:	4418      	add	r0, r3
 80115cc:	2300      	movs	r3, #0
 80115ce:	4288      	cmp	r0, r1
 80115d0:	d305      	bcc.n	80115de <__copybits+0x40>
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	f853 6b04 	ldr.w	r6, [r3], #4
 80115d8:	f845 6f04 	str.w	r6, [r5, #4]!
 80115dc:	e7eb      	b.n	80115b6 <__copybits+0x18>
 80115de:	f840 3b04 	str.w	r3, [r0], #4
 80115e2:	e7f4      	b.n	80115ce <__copybits+0x30>

080115e4 <__any_on>:
 80115e4:	f100 0214 	add.w	r2, r0, #20
 80115e8:	6900      	ldr	r0, [r0, #16]
 80115ea:	114b      	asrs	r3, r1, #5
 80115ec:	4298      	cmp	r0, r3
 80115ee:	b510      	push	{r4, lr}
 80115f0:	db11      	blt.n	8011616 <__any_on+0x32>
 80115f2:	dd0a      	ble.n	801160a <__any_on+0x26>
 80115f4:	f011 011f 	ands.w	r1, r1, #31
 80115f8:	d007      	beq.n	801160a <__any_on+0x26>
 80115fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80115fe:	fa24 f001 	lsr.w	r0, r4, r1
 8011602:	fa00 f101 	lsl.w	r1, r0, r1
 8011606:	428c      	cmp	r4, r1
 8011608:	d10b      	bne.n	8011622 <__any_on+0x3e>
 801160a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801160e:	4293      	cmp	r3, r2
 8011610:	d803      	bhi.n	801161a <__any_on+0x36>
 8011612:	2000      	movs	r0, #0
 8011614:	bd10      	pop	{r4, pc}
 8011616:	4603      	mov	r3, r0
 8011618:	e7f7      	b.n	801160a <__any_on+0x26>
 801161a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801161e:	2900      	cmp	r1, #0
 8011620:	d0f5      	beq.n	801160e <__any_on+0x2a>
 8011622:	2001      	movs	r0, #1
 8011624:	e7f6      	b.n	8011614 <__any_on+0x30>

08011626 <sulp>:
 8011626:	b570      	push	{r4, r5, r6, lr}
 8011628:	4604      	mov	r4, r0
 801162a:	460d      	mov	r5, r1
 801162c:	ec45 4b10 	vmov	d0, r4, r5
 8011630:	4616      	mov	r6, r2
 8011632:	f7ff feb7 	bl	80113a4 <__ulp>
 8011636:	ec51 0b10 	vmov	r0, r1, d0
 801163a:	b17e      	cbz	r6, 801165c <sulp+0x36>
 801163c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011640:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011644:	2b00      	cmp	r3, #0
 8011646:	dd09      	ble.n	801165c <sulp+0x36>
 8011648:	051b      	lsls	r3, r3, #20
 801164a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801164e:	2400      	movs	r4, #0
 8011650:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011654:	4622      	mov	r2, r4
 8011656:	462b      	mov	r3, r5
 8011658:	f7ee ffce 	bl	80005f8 <__aeabi_dmul>
 801165c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011660 <_strtod_l>:
 8011660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011664:	ed2d 8b02 	vpush	{d8}
 8011668:	b09b      	sub	sp, #108	; 0x6c
 801166a:	4604      	mov	r4, r0
 801166c:	9213      	str	r2, [sp, #76]	; 0x4c
 801166e:	2200      	movs	r2, #0
 8011670:	9216      	str	r2, [sp, #88]	; 0x58
 8011672:	460d      	mov	r5, r1
 8011674:	f04f 0800 	mov.w	r8, #0
 8011678:	f04f 0900 	mov.w	r9, #0
 801167c:	460a      	mov	r2, r1
 801167e:	9215      	str	r2, [sp, #84]	; 0x54
 8011680:	7811      	ldrb	r1, [r2, #0]
 8011682:	292b      	cmp	r1, #43	; 0x2b
 8011684:	d04c      	beq.n	8011720 <_strtod_l+0xc0>
 8011686:	d83a      	bhi.n	80116fe <_strtod_l+0x9e>
 8011688:	290d      	cmp	r1, #13
 801168a:	d834      	bhi.n	80116f6 <_strtod_l+0x96>
 801168c:	2908      	cmp	r1, #8
 801168e:	d834      	bhi.n	80116fa <_strtod_l+0x9a>
 8011690:	2900      	cmp	r1, #0
 8011692:	d03d      	beq.n	8011710 <_strtod_l+0xb0>
 8011694:	2200      	movs	r2, #0
 8011696:	920a      	str	r2, [sp, #40]	; 0x28
 8011698:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801169a:	7832      	ldrb	r2, [r6, #0]
 801169c:	2a30      	cmp	r2, #48	; 0x30
 801169e:	f040 80b4 	bne.w	801180a <_strtod_l+0x1aa>
 80116a2:	7872      	ldrb	r2, [r6, #1]
 80116a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80116a8:	2a58      	cmp	r2, #88	; 0x58
 80116aa:	d170      	bne.n	801178e <_strtod_l+0x12e>
 80116ac:	9302      	str	r3, [sp, #8]
 80116ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116b0:	9301      	str	r3, [sp, #4]
 80116b2:	ab16      	add	r3, sp, #88	; 0x58
 80116b4:	9300      	str	r3, [sp, #0]
 80116b6:	4a8e      	ldr	r2, [pc, #568]	; (80118f0 <_strtod_l+0x290>)
 80116b8:	ab17      	add	r3, sp, #92	; 0x5c
 80116ba:	a915      	add	r1, sp, #84	; 0x54
 80116bc:	4620      	mov	r0, r4
 80116be:	f001 f92f 	bl	8012920 <__gethex>
 80116c2:	f010 070f 	ands.w	r7, r0, #15
 80116c6:	4605      	mov	r5, r0
 80116c8:	d005      	beq.n	80116d6 <_strtod_l+0x76>
 80116ca:	2f06      	cmp	r7, #6
 80116cc:	d12a      	bne.n	8011724 <_strtod_l+0xc4>
 80116ce:	3601      	adds	r6, #1
 80116d0:	2300      	movs	r3, #0
 80116d2:	9615      	str	r6, [sp, #84]	; 0x54
 80116d4:	930a      	str	r3, [sp, #40]	; 0x28
 80116d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80116d8:	2b00      	cmp	r3, #0
 80116da:	f040 857f 	bne.w	80121dc <_strtod_l+0xb7c>
 80116de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116e0:	b1db      	cbz	r3, 801171a <_strtod_l+0xba>
 80116e2:	4642      	mov	r2, r8
 80116e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80116e8:	ec43 2b10 	vmov	d0, r2, r3
 80116ec:	b01b      	add	sp, #108	; 0x6c
 80116ee:	ecbd 8b02 	vpop	{d8}
 80116f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f6:	2920      	cmp	r1, #32
 80116f8:	d1cc      	bne.n	8011694 <_strtod_l+0x34>
 80116fa:	3201      	adds	r2, #1
 80116fc:	e7bf      	b.n	801167e <_strtod_l+0x1e>
 80116fe:	292d      	cmp	r1, #45	; 0x2d
 8011700:	d1c8      	bne.n	8011694 <_strtod_l+0x34>
 8011702:	2101      	movs	r1, #1
 8011704:	910a      	str	r1, [sp, #40]	; 0x28
 8011706:	1c51      	adds	r1, r2, #1
 8011708:	9115      	str	r1, [sp, #84]	; 0x54
 801170a:	7852      	ldrb	r2, [r2, #1]
 801170c:	2a00      	cmp	r2, #0
 801170e:	d1c3      	bne.n	8011698 <_strtod_l+0x38>
 8011710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011712:	9515      	str	r5, [sp, #84]	; 0x54
 8011714:	2b00      	cmp	r3, #0
 8011716:	f040 855f 	bne.w	80121d8 <_strtod_l+0xb78>
 801171a:	4642      	mov	r2, r8
 801171c:	464b      	mov	r3, r9
 801171e:	e7e3      	b.n	80116e8 <_strtod_l+0x88>
 8011720:	2100      	movs	r1, #0
 8011722:	e7ef      	b.n	8011704 <_strtod_l+0xa4>
 8011724:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011726:	b13a      	cbz	r2, 8011738 <_strtod_l+0xd8>
 8011728:	2135      	movs	r1, #53	; 0x35
 801172a:	a818      	add	r0, sp, #96	; 0x60
 801172c:	f7ff ff37 	bl	801159e <__copybits>
 8011730:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011732:	4620      	mov	r0, r4
 8011734:	f7ff fb0a 	bl	8010d4c <_Bfree>
 8011738:	3f01      	subs	r7, #1
 801173a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801173c:	2f04      	cmp	r7, #4
 801173e:	d806      	bhi.n	801174e <_strtod_l+0xee>
 8011740:	e8df f007 	tbb	[pc, r7]
 8011744:	201d0314 	.word	0x201d0314
 8011748:	14          	.byte	0x14
 8011749:	00          	.byte	0x00
 801174a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801174e:	05e9      	lsls	r1, r5, #23
 8011750:	bf48      	it	mi
 8011752:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011756:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801175a:	0d1b      	lsrs	r3, r3, #20
 801175c:	051b      	lsls	r3, r3, #20
 801175e:	2b00      	cmp	r3, #0
 8011760:	d1b9      	bne.n	80116d6 <_strtod_l+0x76>
 8011762:	f7fe faf9 	bl	800fd58 <__errno>
 8011766:	2322      	movs	r3, #34	; 0x22
 8011768:	6003      	str	r3, [r0, #0]
 801176a:	e7b4      	b.n	80116d6 <_strtod_l+0x76>
 801176c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011770:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011774:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011778:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801177c:	e7e7      	b.n	801174e <_strtod_l+0xee>
 801177e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80118f8 <_strtod_l+0x298>
 8011782:	e7e4      	b.n	801174e <_strtod_l+0xee>
 8011784:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011788:	f04f 38ff 	mov.w	r8, #4294967295
 801178c:	e7df      	b.n	801174e <_strtod_l+0xee>
 801178e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011790:	1c5a      	adds	r2, r3, #1
 8011792:	9215      	str	r2, [sp, #84]	; 0x54
 8011794:	785b      	ldrb	r3, [r3, #1]
 8011796:	2b30      	cmp	r3, #48	; 0x30
 8011798:	d0f9      	beq.n	801178e <_strtod_l+0x12e>
 801179a:	2b00      	cmp	r3, #0
 801179c:	d09b      	beq.n	80116d6 <_strtod_l+0x76>
 801179e:	2301      	movs	r3, #1
 80117a0:	f04f 0a00 	mov.w	sl, #0
 80117a4:	9304      	str	r3, [sp, #16]
 80117a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80117aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80117ae:	46d3      	mov	fp, sl
 80117b0:	220a      	movs	r2, #10
 80117b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80117b4:	7806      	ldrb	r6, [r0, #0]
 80117b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80117ba:	b2d9      	uxtb	r1, r3
 80117bc:	2909      	cmp	r1, #9
 80117be:	d926      	bls.n	801180e <_strtod_l+0x1ae>
 80117c0:	494c      	ldr	r1, [pc, #304]	; (80118f4 <_strtod_l+0x294>)
 80117c2:	2201      	movs	r2, #1
 80117c4:	f000 ffe6 	bl	8012794 <strncmp>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	d030      	beq.n	801182e <_strtod_l+0x1ce>
 80117cc:	2000      	movs	r0, #0
 80117ce:	4632      	mov	r2, r6
 80117d0:	9005      	str	r0, [sp, #20]
 80117d2:	465e      	mov	r6, fp
 80117d4:	4603      	mov	r3, r0
 80117d6:	2a65      	cmp	r2, #101	; 0x65
 80117d8:	d001      	beq.n	80117de <_strtod_l+0x17e>
 80117da:	2a45      	cmp	r2, #69	; 0x45
 80117dc:	d113      	bne.n	8011806 <_strtod_l+0x1a6>
 80117de:	b91e      	cbnz	r6, 80117e8 <_strtod_l+0x188>
 80117e0:	9a04      	ldr	r2, [sp, #16]
 80117e2:	4302      	orrs	r2, r0
 80117e4:	d094      	beq.n	8011710 <_strtod_l+0xb0>
 80117e6:	2600      	movs	r6, #0
 80117e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80117ea:	1c6a      	adds	r2, r5, #1
 80117ec:	9215      	str	r2, [sp, #84]	; 0x54
 80117ee:	786a      	ldrb	r2, [r5, #1]
 80117f0:	2a2b      	cmp	r2, #43	; 0x2b
 80117f2:	d074      	beq.n	80118de <_strtod_l+0x27e>
 80117f4:	2a2d      	cmp	r2, #45	; 0x2d
 80117f6:	d078      	beq.n	80118ea <_strtod_l+0x28a>
 80117f8:	f04f 0c00 	mov.w	ip, #0
 80117fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011800:	2909      	cmp	r1, #9
 8011802:	d97f      	bls.n	8011904 <_strtod_l+0x2a4>
 8011804:	9515      	str	r5, [sp, #84]	; 0x54
 8011806:	2700      	movs	r7, #0
 8011808:	e09e      	b.n	8011948 <_strtod_l+0x2e8>
 801180a:	2300      	movs	r3, #0
 801180c:	e7c8      	b.n	80117a0 <_strtod_l+0x140>
 801180e:	f1bb 0f08 	cmp.w	fp, #8
 8011812:	bfd8      	it	le
 8011814:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011816:	f100 0001 	add.w	r0, r0, #1
 801181a:	bfda      	itte	le
 801181c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011820:	9309      	strle	r3, [sp, #36]	; 0x24
 8011822:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011826:	f10b 0b01 	add.w	fp, fp, #1
 801182a:	9015      	str	r0, [sp, #84]	; 0x54
 801182c:	e7c1      	b.n	80117b2 <_strtod_l+0x152>
 801182e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011830:	1c5a      	adds	r2, r3, #1
 8011832:	9215      	str	r2, [sp, #84]	; 0x54
 8011834:	785a      	ldrb	r2, [r3, #1]
 8011836:	f1bb 0f00 	cmp.w	fp, #0
 801183a:	d037      	beq.n	80118ac <_strtod_l+0x24c>
 801183c:	9005      	str	r0, [sp, #20]
 801183e:	465e      	mov	r6, fp
 8011840:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011844:	2b09      	cmp	r3, #9
 8011846:	d912      	bls.n	801186e <_strtod_l+0x20e>
 8011848:	2301      	movs	r3, #1
 801184a:	e7c4      	b.n	80117d6 <_strtod_l+0x176>
 801184c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801184e:	1c5a      	adds	r2, r3, #1
 8011850:	9215      	str	r2, [sp, #84]	; 0x54
 8011852:	785a      	ldrb	r2, [r3, #1]
 8011854:	3001      	adds	r0, #1
 8011856:	2a30      	cmp	r2, #48	; 0x30
 8011858:	d0f8      	beq.n	801184c <_strtod_l+0x1ec>
 801185a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801185e:	2b08      	cmp	r3, #8
 8011860:	f200 84c1 	bhi.w	80121e6 <_strtod_l+0xb86>
 8011864:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011866:	9005      	str	r0, [sp, #20]
 8011868:	2000      	movs	r0, #0
 801186a:	930b      	str	r3, [sp, #44]	; 0x2c
 801186c:	4606      	mov	r6, r0
 801186e:	3a30      	subs	r2, #48	; 0x30
 8011870:	f100 0301 	add.w	r3, r0, #1
 8011874:	d014      	beq.n	80118a0 <_strtod_l+0x240>
 8011876:	9905      	ldr	r1, [sp, #20]
 8011878:	4419      	add	r1, r3
 801187a:	9105      	str	r1, [sp, #20]
 801187c:	4633      	mov	r3, r6
 801187e:	eb00 0c06 	add.w	ip, r0, r6
 8011882:	210a      	movs	r1, #10
 8011884:	4563      	cmp	r3, ip
 8011886:	d113      	bne.n	80118b0 <_strtod_l+0x250>
 8011888:	1833      	adds	r3, r6, r0
 801188a:	2b08      	cmp	r3, #8
 801188c:	f106 0601 	add.w	r6, r6, #1
 8011890:	4406      	add	r6, r0
 8011892:	dc1a      	bgt.n	80118ca <_strtod_l+0x26a>
 8011894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011896:	230a      	movs	r3, #10
 8011898:	fb03 2301 	mla	r3, r3, r1, r2
 801189c:	9309      	str	r3, [sp, #36]	; 0x24
 801189e:	2300      	movs	r3, #0
 80118a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80118a2:	1c51      	adds	r1, r2, #1
 80118a4:	9115      	str	r1, [sp, #84]	; 0x54
 80118a6:	7852      	ldrb	r2, [r2, #1]
 80118a8:	4618      	mov	r0, r3
 80118aa:	e7c9      	b.n	8011840 <_strtod_l+0x1e0>
 80118ac:	4658      	mov	r0, fp
 80118ae:	e7d2      	b.n	8011856 <_strtod_l+0x1f6>
 80118b0:	2b08      	cmp	r3, #8
 80118b2:	f103 0301 	add.w	r3, r3, #1
 80118b6:	dc03      	bgt.n	80118c0 <_strtod_l+0x260>
 80118b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80118ba:	434f      	muls	r7, r1
 80118bc:	9709      	str	r7, [sp, #36]	; 0x24
 80118be:	e7e1      	b.n	8011884 <_strtod_l+0x224>
 80118c0:	2b10      	cmp	r3, #16
 80118c2:	bfd8      	it	le
 80118c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80118c8:	e7dc      	b.n	8011884 <_strtod_l+0x224>
 80118ca:	2e10      	cmp	r6, #16
 80118cc:	bfdc      	itt	le
 80118ce:	230a      	movle	r3, #10
 80118d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80118d4:	e7e3      	b.n	801189e <_strtod_l+0x23e>
 80118d6:	2300      	movs	r3, #0
 80118d8:	9305      	str	r3, [sp, #20]
 80118da:	2301      	movs	r3, #1
 80118dc:	e780      	b.n	80117e0 <_strtod_l+0x180>
 80118de:	f04f 0c00 	mov.w	ip, #0
 80118e2:	1caa      	adds	r2, r5, #2
 80118e4:	9215      	str	r2, [sp, #84]	; 0x54
 80118e6:	78aa      	ldrb	r2, [r5, #2]
 80118e8:	e788      	b.n	80117fc <_strtod_l+0x19c>
 80118ea:	f04f 0c01 	mov.w	ip, #1
 80118ee:	e7f8      	b.n	80118e2 <_strtod_l+0x282>
 80118f0:	08013a20 	.word	0x08013a20
 80118f4:	08013a1c 	.word	0x08013a1c
 80118f8:	7ff00000 	.word	0x7ff00000
 80118fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80118fe:	1c51      	adds	r1, r2, #1
 8011900:	9115      	str	r1, [sp, #84]	; 0x54
 8011902:	7852      	ldrb	r2, [r2, #1]
 8011904:	2a30      	cmp	r2, #48	; 0x30
 8011906:	d0f9      	beq.n	80118fc <_strtod_l+0x29c>
 8011908:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801190c:	2908      	cmp	r1, #8
 801190e:	f63f af7a 	bhi.w	8011806 <_strtod_l+0x1a6>
 8011912:	3a30      	subs	r2, #48	; 0x30
 8011914:	9208      	str	r2, [sp, #32]
 8011916:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011918:	920c      	str	r2, [sp, #48]	; 0x30
 801191a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801191c:	1c57      	adds	r7, r2, #1
 801191e:	9715      	str	r7, [sp, #84]	; 0x54
 8011920:	7852      	ldrb	r2, [r2, #1]
 8011922:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011926:	f1be 0f09 	cmp.w	lr, #9
 801192a:	d938      	bls.n	801199e <_strtod_l+0x33e>
 801192c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801192e:	1a7f      	subs	r7, r7, r1
 8011930:	2f08      	cmp	r7, #8
 8011932:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011936:	dc03      	bgt.n	8011940 <_strtod_l+0x2e0>
 8011938:	9908      	ldr	r1, [sp, #32]
 801193a:	428f      	cmp	r7, r1
 801193c:	bfa8      	it	ge
 801193e:	460f      	movge	r7, r1
 8011940:	f1bc 0f00 	cmp.w	ip, #0
 8011944:	d000      	beq.n	8011948 <_strtod_l+0x2e8>
 8011946:	427f      	negs	r7, r7
 8011948:	2e00      	cmp	r6, #0
 801194a:	d14f      	bne.n	80119ec <_strtod_l+0x38c>
 801194c:	9904      	ldr	r1, [sp, #16]
 801194e:	4301      	orrs	r1, r0
 8011950:	f47f aec1 	bne.w	80116d6 <_strtod_l+0x76>
 8011954:	2b00      	cmp	r3, #0
 8011956:	f47f aedb 	bne.w	8011710 <_strtod_l+0xb0>
 801195a:	2a69      	cmp	r2, #105	; 0x69
 801195c:	d029      	beq.n	80119b2 <_strtod_l+0x352>
 801195e:	dc26      	bgt.n	80119ae <_strtod_l+0x34e>
 8011960:	2a49      	cmp	r2, #73	; 0x49
 8011962:	d026      	beq.n	80119b2 <_strtod_l+0x352>
 8011964:	2a4e      	cmp	r2, #78	; 0x4e
 8011966:	f47f aed3 	bne.w	8011710 <_strtod_l+0xb0>
 801196a:	499b      	ldr	r1, [pc, #620]	; (8011bd8 <_strtod_l+0x578>)
 801196c:	a815      	add	r0, sp, #84	; 0x54
 801196e:	f001 fa17 	bl	8012da0 <__match>
 8011972:	2800      	cmp	r0, #0
 8011974:	f43f aecc 	beq.w	8011710 <_strtod_l+0xb0>
 8011978:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	2b28      	cmp	r3, #40	; 0x28
 801197e:	d12f      	bne.n	80119e0 <_strtod_l+0x380>
 8011980:	4996      	ldr	r1, [pc, #600]	; (8011bdc <_strtod_l+0x57c>)
 8011982:	aa18      	add	r2, sp, #96	; 0x60
 8011984:	a815      	add	r0, sp, #84	; 0x54
 8011986:	f001 fa1f 	bl	8012dc8 <__hexnan>
 801198a:	2805      	cmp	r0, #5
 801198c:	d128      	bne.n	80119e0 <_strtod_l+0x380>
 801198e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011990:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011994:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011998:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801199c:	e69b      	b.n	80116d6 <_strtod_l+0x76>
 801199e:	9f08      	ldr	r7, [sp, #32]
 80119a0:	210a      	movs	r1, #10
 80119a2:	fb01 2107 	mla	r1, r1, r7, r2
 80119a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80119aa:	9208      	str	r2, [sp, #32]
 80119ac:	e7b5      	b.n	801191a <_strtod_l+0x2ba>
 80119ae:	2a6e      	cmp	r2, #110	; 0x6e
 80119b0:	e7d9      	b.n	8011966 <_strtod_l+0x306>
 80119b2:	498b      	ldr	r1, [pc, #556]	; (8011be0 <_strtod_l+0x580>)
 80119b4:	a815      	add	r0, sp, #84	; 0x54
 80119b6:	f001 f9f3 	bl	8012da0 <__match>
 80119ba:	2800      	cmp	r0, #0
 80119bc:	f43f aea8 	beq.w	8011710 <_strtod_l+0xb0>
 80119c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119c2:	4988      	ldr	r1, [pc, #544]	; (8011be4 <_strtod_l+0x584>)
 80119c4:	3b01      	subs	r3, #1
 80119c6:	a815      	add	r0, sp, #84	; 0x54
 80119c8:	9315      	str	r3, [sp, #84]	; 0x54
 80119ca:	f001 f9e9 	bl	8012da0 <__match>
 80119ce:	b910      	cbnz	r0, 80119d6 <_strtod_l+0x376>
 80119d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119d2:	3301      	adds	r3, #1
 80119d4:	9315      	str	r3, [sp, #84]	; 0x54
 80119d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8011bf4 <_strtod_l+0x594>
 80119da:	f04f 0800 	mov.w	r8, #0
 80119de:	e67a      	b.n	80116d6 <_strtod_l+0x76>
 80119e0:	4881      	ldr	r0, [pc, #516]	; (8011be8 <_strtod_l+0x588>)
 80119e2:	f000 fef9 	bl	80127d8 <nan>
 80119e6:	ec59 8b10 	vmov	r8, r9, d0
 80119ea:	e674      	b.n	80116d6 <_strtod_l+0x76>
 80119ec:	9b05      	ldr	r3, [sp, #20]
 80119ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119f0:	1afb      	subs	r3, r7, r3
 80119f2:	f1bb 0f00 	cmp.w	fp, #0
 80119f6:	bf08      	it	eq
 80119f8:	46b3      	moveq	fp, r6
 80119fa:	2e10      	cmp	r6, #16
 80119fc:	9308      	str	r3, [sp, #32]
 80119fe:	4635      	mov	r5, r6
 8011a00:	bfa8      	it	ge
 8011a02:	2510      	movge	r5, #16
 8011a04:	f7ee fd7e 	bl	8000504 <__aeabi_ui2d>
 8011a08:	2e09      	cmp	r6, #9
 8011a0a:	4680      	mov	r8, r0
 8011a0c:	4689      	mov	r9, r1
 8011a0e:	dd13      	ble.n	8011a38 <_strtod_l+0x3d8>
 8011a10:	4b76      	ldr	r3, [pc, #472]	; (8011bec <_strtod_l+0x58c>)
 8011a12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011a16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011a1a:	f7ee fded 	bl	80005f8 <__aeabi_dmul>
 8011a1e:	4680      	mov	r8, r0
 8011a20:	4650      	mov	r0, sl
 8011a22:	4689      	mov	r9, r1
 8011a24:	f7ee fd6e 	bl	8000504 <__aeabi_ui2d>
 8011a28:	4602      	mov	r2, r0
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	4640      	mov	r0, r8
 8011a2e:	4649      	mov	r1, r9
 8011a30:	f7ee fc2c 	bl	800028c <__adddf3>
 8011a34:	4680      	mov	r8, r0
 8011a36:	4689      	mov	r9, r1
 8011a38:	2e0f      	cmp	r6, #15
 8011a3a:	dc38      	bgt.n	8011aae <_strtod_l+0x44e>
 8011a3c:	9b08      	ldr	r3, [sp, #32]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f43f ae49 	beq.w	80116d6 <_strtod_l+0x76>
 8011a44:	dd24      	ble.n	8011a90 <_strtod_l+0x430>
 8011a46:	2b16      	cmp	r3, #22
 8011a48:	dc0b      	bgt.n	8011a62 <_strtod_l+0x402>
 8011a4a:	4968      	ldr	r1, [pc, #416]	; (8011bec <_strtod_l+0x58c>)
 8011a4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a54:	4642      	mov	r2, r8
 8011a56:	464b      	mov	r3, r9
 8011a58:	f7ee fdce 	bl	80005f8 <__aeabi_dmul>
 8011a5c:	4680      	mov	r8, r0
 8011a5e:	4689      	mov	r9, r1
 8011a60:	e639      	b.n	80116d6 <_strtod_l+0x76>
 8011a62:	9a08      	ldr	r2, [sp, #32]
 8011a64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	db20      	blt.n	8011aae <_strtod_l+0x44e>
 8011a6c:	4c5f      	ldr	r4, [pc, #380]	; (8011bec <_strtod_l+0x58c>)
 8011a6e:	f1c6 060f 	rsb	r6, r6, #15
 8011a72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8011a76:	4642      	mov	r2, r8
 8011a78:	464b      	mov	r3, r9
 8011a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a7e:	f7ee fdbb 	bl	80005f8 <__aeabi_dmul>
 8011a82:	9b08      	ldr	r3, [sp, #32]
 8011a84:	1b9e      	subs	r6, r3, r6
 8011a86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011a8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011a8e:	e7e3      	b.n	8011a58 <_strtod_l+0x3f8>
 8011a90:	9b08      	ldr	r3, [sp, #32]
 8011a92:	3316      	adds	r3, #22
 8011a94:	db0b      	blt.n	8011aae <_strtod_l+0x44e>
 8011a96:	9b05      	ldr	r3, [sp, #20]
 8011a98:	1bdf      	subs	r7, r3, r7
 8011a9a:	4b54      	ldr	r3, [pc, #336]	; (8011bec <_strtod_l+0x58c>)
 8011a9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011aa4:	4640      	mov	r0, r8
 8011aa6:	4649      	mov	r1, r9
 8011aa8:	f7ee fed0 	bl	800084c <__aeabi_ddiv>
 8011aac:	e7d6      	b.n	8011a5c <_strtod_l+0x3fc>
 8011aae:	9b08      	ldr	r3, [sp, #32]
 8011ab0:	1b75      	subs	r5, r6, r5
 8011ab2:	441d      	add	r5, r3
 8011ab4:	2d00      	cmp	r5, #0
 8011ab6:	dd70      	ble.n	8011b9a <_strtod_l+0x53a>
 8011ab8:	f015 030f 	ands.w	r3, r5, #15
 8011abc:	d00a      	beq.n	8011ad4 <_strtod_l+0x474>
 8011abe:	494b      	ldr	r1, [pc, #300]	; (8011bec <_strtod_l+0x58c>)
 8011ac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ac4:	4642      	mov	r2, r8
 8011ac6:	464b      	mov	r3, r9
 8011ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011acc:	f7ee fd94 	bl	80005f8 <__aeabi_dmul>
 8011ad0:	4680      	mov	r8, r0
 8011ad2:	4689      	mov	r9, r1
 8011ad4:	f035 050f 	bics.w	r5, r5, #15
 8011ad8:	d04d      	beq.n	8011b76 <_strtod_l+0x516>
 8011ada:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8011ade:	dd22      	ble.n	8011b26 <_strtod_l+0x4c6>
 8011ae0:	2500      	movs	r5, #0
 8011ae2:	46ab      	mov	fp, r5
 8011ae4:	9509      	str	r5, [sp, #36]	; 0x24
 8011ae6:	9505      	str	r5, [sp, #20]
 8011ae8:	2322      	movs	r3, #34	; 0x22
 8011aea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011bf4 <_strtod_l+0x594>
 8011aee:	6023      	str	r3, [r4, #0]
 8011af0:	f04f 0800 	mov.w	r8, #0
 8011af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	f43f aded 	beq.w	80116d6 <_strtod_l+0x76>
 8011afc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011afe:	4620      	mov	r0, r4
 8011b00:	f7ff f924 	bl	8010d4c <_Bfree>
 8011b04:	9905      	ldr	r1, [sp, #20]
 8011b06:	4620      	mov	r0, r4
 8011b08:	f7ff f920 	bl	8010d4c <_Bfree>
 8011b0c:	4659      	mov	r1, fp
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f7ff f91c 	bl	8010d4c <_Bfree>
 8011b14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b16:	4620      	mov	r0, r4
 8011b18:	f7ff f918 	bl	8010d4c <_Bfree>
 8011b1c:	4629      	mov	r1, r5
 8011b1e:	4620      	mov	r0, r4
 8011b20:	f7ff f914 	bl	8010d4c <_Bfree>
 8011b24:	e5d7      	b.n	80116d6 <_strtod_l+0x76>
 8011b26:	4b32      	ldr	r3, [pc, #200]	; (8011bf0 <_strtod_l+0x590>)
 8011b28:	9304      	str	r3, [sp, #16]
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	112d      	asrs	r5, r5, #4
 8011b2e:	4640      	mov	r0, r8
 8011b30:	4649      	mov	r1, r9
 8011b32:	469a      	mov	sl, r3
 8011b34:	2d01      	cmp	r5, #1
 8011b36:	dc21      	bgt.n	8011b7c <_strtod_l+0x51c>
 8011b38:	b10b      	cbz	r3, 8011b3e <_strtod_l+0x4de>
 8011b3a:	4680      	mov	r8, r0
 8011b3c:	4689      	mov	r9, r1
 8011b3e:	492c      	ldr	r1, [pc, #176]	; (8011bf0 <_strtod_l+0x590>)
 8011b40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011b44:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011b48:	4642      	mov	r2, r8
 8011b4a:	464b      	mov	r3, r9
 8011b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b50:	f7ee fd52 	bl	80005f8 <__aeabi_dmul>
 8011b54:	4b27      	ldr	r3, [pc, #156]	; (8011bf4 <_strtod_l+0x594>)
 8011b56:	460a      	mov	r2, r1
 8011b58:	400b      	ands	r3, r1
 8011b5a:	4927      	ldr	r1, [pc, #156]	; (8011bf8 <_strtod_l+0x598>)
 8011b5c:	428b      	cmp	r3, r1
 8011b5e:	4680      	mov	r8, r0
 8011b60:	d8be      	bhi.n	8011ae0 <_strtod_l+0x480>
 8011b62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011b66:	428b      	cmp	r3, r1
 8011b68:	bf86      	itte	hi
 8011b6a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8011bfc <_strtod_l+0x59c>
 8011b6e:	f04f 38ff 	movhi.w	r8, #4294967295
 8011b72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8011b76:	2300      	movs	r3, #0
 8011b78:	9304      	str	r3, [sp, #16]
 8011b7a:	e07b      	b.n	8011c74 <_strtod_l+0x614>
 8011b7c:	07ea      	lsls	r2, r5, #31
 8011b7e:	d505      	bpl.n	8011b8c <_strtod_l+0x52c>
 8011b80:	9b04      	ldr	r3, [sp, #16]
 8011b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b86:	f7ee fd37 	bl	80005f8 <__aeabi_dmul>
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	9a04      	ldr	r2, [sp, #16]
 8011b8e:	3208      	adds	r2, #8
 8011b90:	f10a 0a01 	add.w	sl, sl, #1
 8011b94:	106d      	asrs	r5, r5, #1
 8011b96:	9204      	str	r2, [sp, #16]
 8011b98:	e7cc      	b.n	8011b34 <_strtod_l+0x4d4>
 8011b9a:	d0ec      	beq.n	8011b76 <_strtod_l+0x516>
 8011b9c:	426d      	negs	r5, r5
 8011b9e:	f015 020f 	ands.w	r2, r5, #15
 8011ba2:	d00a      	beq.n	8011bba <_strtod_l+0x55a>
 8011ba4:	4b11      	ldr	r3, [pc, #68]	; (8011bec <_strtod_l+0x58c>)
 8011ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011baa:	4640      	mov	r0, r8
 8011bac:	4649      	mov	r1, r9
 8011bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb2:	f7ee fe4b 	bl	800084c <__aeabi_ddiv>
 8011bb6:	4680      	mov	r8, r0
 8011bb8:	4689      	mov	r9, r1
 8011bba:	112d      	asrs	r5, r5, #4
 8011bbc:	d0db      	beq.n	8011b76 <_strtod_l+0x516>
 8011bbe:	2d1f      	cmp	r5, #31
 8011bc0:	dd1e      	ble.n	8011c00 <_strtod_l+0x5a0>
 8011bc2:	2500      	movs	r5, #0
 8011bc4:	46ab      	mov	fp, r5
 8011bc6:	9509      	str	r5, [sp, #36]	; 0x24
 8011bc8:	9505      	str	r5, [sp, #20]
 8011bca:	2322      	movs	r3, #34	; 0x22
 8011bcc:	f04f 0800 	mov.w	r8, #0
 8011bd0:	f04f 0900 	mov.w	r9, #0
 8011bd4:	6023      	str	r3, [r4, #0]
 8011bd6:	e78d      	b.n	8011af4 <_strtod_l+0x494>
 8011bd8:	08013809 	.word	0x08013809
 8011bdc:	08013a34 	.word	0x08013a34
 8011be0:	08013801 	.word	0x08013801
 8011be4:	08013838 	.word	0x08013838
 8011be8:	08013bc5 	.word	0x08013bc5
 8011bec:	08013948 	.word	0x08013948
 8011bf0:	08013920 	.word	0x08013920
 8011bf4:	7ff00000 	.word	0x7ff00000
 8011bf8:	7ca00000 	.word	0x7ca00000
 8011bfc:	7fefffff 	.word	0x7fefffff
 8011c00:	f015 0310 	ands.w	r3, r5, #16
 8011c04:	bf18      	it	ne
 8011c06:	236a      	movne	r3, #106	; 0x6a
 8011c08:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8011fac <_strtod_l+0x94c>
 8011c0c:	9304      	str	r3, [sp, #16]
 8011c0e:	4640      	mov	r0, r8
 8011c10:	4649      	mov	r1, r9
 8011c12:	2300      	movs	r3, #0
 8011c14:	07ea      	lsls	r2, r5, #31
 8011c16:	d504      	bpl.n	8011c22 <_strtod_l+0x5c2>
 8011c18:	e9da 2300 	ldrd	r2, r3, [sl]
 8011c1c:	f7ee fcec 	bl	80005f8 <__aeabi_dmul>
 8011c20:	2301      	movs	r3, #1
 8011c22:	106d      	asrs	r5, r5, #1
 8011c24:	f10a 0a08 	add.w	sl, sl, #8
 8011c28:	d1f4      	bne.n	8011c14 <_strtod_l+0x5b4>
 8011c2a:	b10b      	cbz	r3, 8011c30 <_strtod_l+0x5d0>
 8011c2c:	4680      	mov	r8, r0
 8011c2e:	4689      	mov	r9, r1
 8011c30:	9b04      	ldr	r3, [sp, #16]
 8011c32:	b1bb      	cbz	r3, 8011c64 <_strtod_l+0x604>
 8011c34:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011c38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	4649      	mov	r1, r9
 8011c40:	dd10      	ble.n	8011c64 <_strtod_l+0x604>
 8011c42:	2b1f      	cmp	r3, #31
 8011c44:	f340 811e 	ble.w	8011e84 <_strtod_l+0x824>
 8011c48:	2b34      	cmp	r3, #52	; 0x34
 8011c4a:	bfde      	ittt	le
 8011c4c:	f04f 33ff 	movle.w	r3, #4294967295
 8011c50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011c54:	4093      	lslle	r3, r2
 8011c56:	f04f 0800 	mov.w	r8, #0
 8011c5a:	bfcc      	ite	gt
 8011c5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011c60:	ea03 0901 	andle.w	r9, r3, r1
 8011c64:	2200      	movs	r2, #0
 8011c66:	2300      	movs	r3, #0
 8011c68:	4640      	mov	r0, r8
 8011c6a:	4649      	mov	r1, r9
 8011c6c:	f7ee ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d1a6      	bne.n	8011bc2 <_strtod_l+0x562>
 8011c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011c7a:	4633      	mov	r3, r6
 8011c7c:	465a      	mov	r2, fp
 8011c7e:	4620      	mov	r0, r4
 8011c80:	f7ff f8cc 	bl	8010e1c <__s2b>
 8011c84:	9009      	str	r0, [sp, #36]	; 0x24
 8011c86:	2800      	cmp	r0, #0
 8011c88:	f43f af2a 	beq.w	8011ae0 <_strtod_l+0x480>
 8011c8c:	9a08      	ldr	r2, [sp, #32]
 8011c8e:	9b05      	ldr	r3, [sp, #20]
 8011c90:	2a00      	cmp	r2, #0
 8011c92:	eba3 0307 	sub.w	r3, r3, r7
 8011c96:	bfa8      	it	ge
 8011c98:	2300      	movge	r3, #0
 8011c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8011c9c:	2500      	movs	r5, #0
 8011c9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011ca2:	9312      	str	r3, [sp, #72]	; 0x48
 8011ca4:	46ab      	mov	fp, r5
 8011ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ca8:	4620      	mov	r0, r4
 8011caa:	6859      	ldr	r1, [r3, #4]
 8011cac:	f7ff f80e 	bl	8010ccc <_Balloc>
 8011cb0:	9005      	str	r0, [sp, #20]
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	f43f af18 	beq.w	8011ae8 <_strtod_l+0x488>
 8011cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cba:	691a      	ldr	r2, [r3, #16]
 8011cbc:	3202      	adds	r2, #2
 8011cbe:	f103 010c 	add.w	r1, r3, #12
 8011cc2:	0092      	lsls	r2, r2, #2
 8011cc4:	300c      	adds	r0, #12
 8011cc6:	f7fe f873 	bl	800fdb0 <memcpy>
 8011cca:	ec49 8b10 	vmov	d0, r8, r9
 8011cce:	aa18      	add	r2, sp, #96	; 0x60
 8011cd0:	a917      	add	r1, sp, #92	; 0x5c
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f7ff fbd6 	bl	8011484 <__d2b>
 8011cd8:	ec49 8b18 	vmov	d8, r8, r9
 8011cdc:	9016      	str	r0, [sp, #88]	; 0x58
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	f43f af02 	beq.w	8011ae8 <_strtod_l+0x488>
 8011ce4:	2101      	movs	r1, #1
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f7ff f930 	bl	8010f4c <__i2b>
 8011cec:	4683      	mov	fp, r0
 8011cee:	2800      	cmp	r0, #0
 8011cf0:	f43f aefa 	beq.w	8011ae8 <_strtod_l+0x488>
 8011cf4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011cf6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011cf8:	2e00      	cmp	r6, #0
 8011cfa:	bfab      	itete	ge
 8011cfc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8011cfe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8011d00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8011d02:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8011d06:	bfac      	ite	ge
 8011d08:	eb06 0a03 	addge.w	sl, r6, r3
 8011d0c:	1b9f      	sublt	r7, r3, r6
 8011d0e:	9b04      	ldr	r3, [sp, #16]
 8011d10:	1af6      	subs	r6, r6, r3
 8011d12:	4416      	add	r6, r2
 8011d14:	4ba0      	ldr	r3, [pc, #640]	; (8011f98 <_strtod_l+0x938>)
 8011d16:	3e01      	subs	r6, #1
 8011d18:	429e      	cmp	r6, r3
 8011d1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011d1e:	f280 80c4 	bge.w	8011eaa <_strtod_l+0x84a>
 8011d22:	1b9b      	subs	r3, r3, r6
 8011d24:	2b1f      	cmp	r3, #31
 8011d26:	eba2 0203 	sub.w	r2, r2, r3
 8011d2a:	f04f 0101 	mov.w	r1, #1
 8011d2e:	f300 80b0 	bgt.w	8011e92 <_strtod_l+0x832>
 8011d32:	fa01 f303 	lsl.w	r3, r1, r3
 8011d36:	930e      	str	r3, [sp, #56]	; 0x38
 8011d38:	2300      	movs	r3, #0
 8011d3a:	930d      	str	r3, [sp, #52]	; 0x34
 8011d3c:	eb0a 0602 	add.w	r6, sl, r2
 8011d40:	9b04      	ldr	r3, [sp, #16]
 8011d42:	45b2      	cmp	sl, r6
 8011d44:	4417      	add	r7, r2
 8011d46:	441f      	add	r7, r3
 8011d48:	4653      	mov	r3, sl
 8011d4a:	bfa8      	it	ge
 8011d4c:	4633      	movge	r3, r6
 8011d4e:	42bb      	cmp	r3, r7
 8011d50:	bfa8      	it	ge
 8011d52:	463b      	movge	r3, r7
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	bfc2      	ittt	gt
 8011d58:	1af6      	subgt	r6, r6, r3
 8011d5a:	1aff      	subgt	r7, r7, r3
 8011d5c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8011d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	dd17      	ble.n	8011d96 <_strtod_l+0x736>
 8011d66:	4659      	mov	r1, fp
 8011d68:	461a      	mov	r2, r3
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f7ff f9ae 	bl	80110cc <__pow5mult>
 8011d70:	4683      	mov	fp, r0
 8011d72:	2800      	cmp	r0, #0
 8011d74:	f43f aeb8 	beq.w	8011ae8 <_strtod_l+0x488>
 8011d78:	4601      	mov	r1, r0
 8011d7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	f7ff f8fb 	bl	8010f78 <__multiply>
 8011d82:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d84:	2800      	cmp	r0, #0
 8011d86:	f43f aeaf 	beq.w	8011ae8 <_strtod_l+0x488>
 8011d8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	f7fe ffdd 	bl	8010d4c <_Bfree>
 8011d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d94:	9316      	str	r3, [sp, #88]	; 0x58
 8011d96:	2e00      	cmp	r6, #0
 8011d98:	f300 808c 	bgt.w	8011eb4 <_strtod_l+0x854>
 8011d9c:	9b08      	ldr	r3, [sp, #32]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	dd08      	ble.n	8011db4 <_strtod_l+0x754>
 8011da2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011da4:	9905      	ldr	r1, [sp, #20]
 8011da6:	4620      	mov	r0, r4
 8011da8:	f7ff f990 	bl	80110cc <__pow5mult>
 8011dac:	9005      	str	r0, [sp, #20]
 8011dae:	2800      	cmp	r0, #0
 8011db0:	f43f ae9a 	beq.w	8011ae8 <_strtod_l+0x488>
 8011db4:	2f00      	cmp	r7, #0
 8011db6:	dd08      	ble.n	8011dca <_strtod_l+0x76a>
 8011db8:	9905      	ldr	r1, [sp, #20]
 8011dba:	463a      	mov	r2, r7
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	f7ff f9df 	bl	8011180 <__lshift>
 8011dc2:	9005      	str	r0, [sp, #20]
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	f43f ae8f 	beq.w	8011ae8 <_strtod_l+0x488>
 8011dca:	f1ba 0f00 	cmp.w	sl, #0
 8011dce:	dd08      	ble.n	8011de2 <_strtod_l+0x782>
 8011dd0:	4659      	mov	r1, fp
 8011dd2:	4652      	mov	r2, sl
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f7ff f9d3 	bl	8011180 <__lshift>
 8011dda:	4683      	mov	fp, r0
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	f43f ae83 	beq.w	8011ae8 <_strtod_l+0x488>
 8011de2:	9a05      	ldr	r2, [sp, #20]
 8011de4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011de6:	4620      	mov	r0, r4
 8011de8:	f7ff fa52 	bl	8011290 <__mdiff>
 8011dec:	4605      	mov	r5, r0
 8011dee:	2800      	cmp	r0, #0
 8011df0:	f43f ae7a 	beq.w	8011ae8 <_strtod_l+0x488>
 8011df4:	68c3      	ldr	r3, [r0, #12]
 8011df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011df8:	2300      	movs	r3, #0
 8011dfa:	60c3      	str	r3, [r0, #12]
 8011dfc:	4659      	mov	r1, fp
 8011dfe:	f7ff fa2b 	bl	8011258 <__mcmp>
 8011e02:	2800      	cmp	r0, #0
 8011e04:	da60      	bge.n	8011ec8 <_strtod_l+0x868>
 8011e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e08:	ea53 0308 	orrs.w	r3, r3, r8
 8011e0c:	f040 8084 	bne.w	8011f18 <_strtod_l+0x8b8>
 8011e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d17f      	bne.n	8011f18 <_strtod_l+0x8b8>
 8011e18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011e1c:	0d1b      	lsrs	r3, r3, #20
 8011e1e:	051b      	lsls	r3, r3, #20
 8011e20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011e24:	d978      	bls.n	8011f18 <_strtod_l+0x8b8>
 8011e26:	696b      	ldr	r3, [r5, #20]
 8011e28:	b913      	cbnz	r3, 8011e30 <_strtod_l+0x7d0>
 8011e2a:	692b      	ldr	r3, [r5, #16]
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	dd73      	ble.n	8011f18 <_strtod_l+0x8b8>
 8011e30:	4629      	mov	r1, r5
 8011e32:	2201      	movs	r2, #1
 8011e34:	4620      	mov	r0, r4
 8011e36:	f7ff f9a3 	bl	8011180 <__lshift>
 8011e3a:	4659      	mov	r1, fp
 8011e3c:	4605      	mov	r5, r0
 8011e3e:	f7ff fa0b 	bl	8011258 <__mcmp>
 8011e42:	2800      	cmp	r0, #0
 8011e44:	dd68      	ble.n	8011f18 <_strtod_l+0x8b8>
 8011e46:	9904      	ldr	r1, [sp, #16]
 8011e48:	4a54      	ldr	r2, [pc, #336]	; (8011f9c <_strtod_l+0x93c>)
 8011e4a:	464b      	mov	r3, r9
 8011e4c:	2900      	cmp	r1, #0
 8011e4e:	f000 8084 	beq.w	8011f5a <_strtod_l+0x8fa>
 8011e52:	ea02 0109 	and.w	r1, r2, r9
 8011e56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011e5a:	dc7e      	bgt.n	8011f5a <_strtod_l+0x8fa>
 8011e5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011e60:	f77f aeb3 	ble.w	8011bca <_strtod_l+0x56a>
 8011e64:	4b4e      	ldr	r3, [pc, #312]	; (8011fa0 <_strtod_l+0x940>)
 8011e66:	4640      	mov	r0, r8
 8011e68:	4649      	mov	r1, r9
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	f7ee fbc4 	bl	80005f8 <__aeabi_dmul>
 8011e70:	4b4a      	ldr	r3, [pc, #296]	; (8011f9c <_strtod_l+0x93c>)
 8011e72:	400b      	ands	r3, r1
 8011e74:	4680      	mov	r8, r0
 8011e76:	4689      	mov	r9, r1
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f47f ae3f 	bne.w	8011afc <_strtod_l+0x49c>
 8011e7e:	2322      	movs	r3, #34	; 0x22
 8011e80:	6023      	str	r3, [r4, #0]
 8011e82:	e63b      	b.n	8011afc <_strtod_l+0x49c>
 8011e84:	f04f 32ff 	mov.w	r2, #4294967295
 8011e88:	fa02 f303 	lsl.w	r3, r2, r3
 8011e8c:	ea03 0808 	and.w	r8, r3, r8
 8011e90:	e6e8      	b.n	8011c64 <_strtod_l+0x604>
 8011e92:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011e96:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011e9a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011e9e:	36e2      	adds	r6, #226	; 0xe2
 8011ea0:	fa01 f306 	lsl.w	r3, r1, r6
 8011ea4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8011ea8:	e748      	b.n	8011d3c <_strtod_l+0x6dc>
 8011eaa:	2100      	movs	r1, #0
 8011eac:	2301      	movs	r3, #1
 8011eae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8011eb2:	e743      	b.n	8011d3c <_strtod_l+0x6dc>
 8011eb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011eb6:	4632      	mov	r2, r6
 8011eb8:	4620      	mov	r0, r4
 8011eba:	f7ff f961 	bl	8011180 <__lshift>
 8011ebe:	9016      	str	r0, [sp, #88]	; 0x58
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	f47f af6b 	bne.w	8011d9c <_strtod_l+0x73c>
 8011ec6:	e60f      	b.n	8011ae8 <_strtod_l+0x488>
 8011ec8:	46ca      	mov	sl, r9
 8011eca:	d171      	bne.n	8011fb0 <_strtod_l+0x950>
 8011ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011ece:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ed2:	b352      	cbz	r2, 8011f2a <_strtod_l+0x8ca>
 8011ed4:	4a33      	ldr	r2, [pc, #204]	; (8011fa4 <_strtod_l+0x944>)
 8011ed6:	4293      	cmp	r3, r2
 8011ed8:	d12a      	bne.n	8011f30 <_strtod_l+0x8d0>
 8011eda:	9b04      	ldr	r3, [sp, #16]
 8011edc:	4641      	mov	r1, r8
 8011ede:	b1fb      	cbz	r3, 8011f20 <_strtod_l+0x8c0>
 8011ee0:	4b2e      	ldr	r3, [pc, #184]	; (8011f9c <_strtod_l+0x93c>)
 8011ee2:	ea09 0303 	and.w	r3, r9, r3
 8011ee6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011eea:	f04f 32ff 	mov.w	r2, #4294967295
 8011eee:	d81a      	bhi.n	8011f26 <_strtod_l+0x8c6>
 8011ef0:	0d1b      	lsrs	r3, r3, #20
 8011ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8011efa:	4299      	cmp	r1, r3
 8011efc:	d118      	bne.n	8011f30 <_strtod_l+0x8d0>
 8011efe:	4b2a      	ldr	r3, [pc, #168]	; (8011fa8 <_strtod_l+0x948>)
 8011f00:	459a      	cmp	sl, r3
 8011f02:	d102      	bne.n	8011f0a <_strtod_l+0x8aa>
 8011f04:	3101      	adds	r1, #1
 8011f06:	f43f adef 	beq.w	8011ae8 <_strtod_l+0x488>
 8011f0a:	4b24      	ldr	r3, [pc, #144]	; (8011f9c <_strtod_l+0x93c>)
 8011f0c:	ea0a 0303 	and.w	r3, sl, r3
 8011f10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8011f14:	f04f 0800 	mov.w	r8, #0
 8011f18:	9b04      	ldr	r3, [sp, #16]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d1a2      	bne.n	8011e64 <_strtod_l+0x804>
 8011f1e:	e5ed      	b.n	8011afc <_strtod_l+0x49c>
 8011f20:	f04f 33ff 	mov.w	r3, #4294967295
 8011f24:	e7e9      	b.n	8011efa <_strtod_l+0x89a>
 8011f26:	4613      	mov	r3, r2
 8011f28:	e7e7      	b.n	8011efa <_strtod_l+0x89a>
 8011f2a:	ea53 0308 	orrs.w	r3, r3, r8
 8011f2e:	d08a      	beq.n	8011e46 <_strtod_l+0x7e6>
 8011f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f32:	b1e3      	cbz	r3, 8011f6e <_strtod_l+0x90e>
 8011f34:	ea13 0f0a 	tst.w	r3, sl
 8011f38:	d0ee      	beq.n	8011f18 <_strtod_l+0x8b8>
 8011f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f3c:	9a04      	ldr	r2, [sp, #16]
 8011f3e:	4640      	mov	r0, r8
 8011f40:	4649      	mov	r1, r9
 8011f42:	b1c3      	cbz	r3, 8011f76 <_strtod_l+0x916>
 8011f44:	f7ff fb6f 	bl	8011626 <sulp>
 8011f48:	4602      	mov	r2, r0
 8011f4a:	460b      	mov	r3, r1
 8011f4c:	ec51 0b18 	vmov	r0, r1, d8
 8011f50:	f7ee f99c 	bl	800028c <__adddf3>
 8011f54:	4680      	mov	r8, r0
 8011f56:	4689      	mov	r9, r1
 8011f58:	e7de      	b.n	8011f18 <_strtod_l+0x8b8>
 8011f5a:	4013      	ands	r3, r2
 8011f5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011f60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011f64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011f68:	f04f 38ff 	mov.w	r8, #4294967295
 8011f6c:	e7d4      	b.n	8011f18 <_strtod_l+0x8b8>
 8011f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f70:	ea13 0f08 	tst.w	r3, r8
 8011f74:	e7e0      	b.n	8011f38 <_strtod_l+0x8d8>
 8011f76:	f7ff fb56 	bl	8011626 <sulp>
 8011f7a:	4602      	mov	r2, r0
 8011f7c:	460b      	mov	r3, r1
 8011f7e:	ec51 0b18 	vmov	r0, r1, d8
 8011f82:	f7ee f981 	bl	8000288 <__aeabi_dsub>
 8011f86:	2200      	movs	r2, #0
 8011f88:	2300      	movs	r3, #0
 8011f8a:	4680      	mov	r8, r0
 8011f8c:	4689      	mov	r9, r1
 8011f8e:	f7ee fd9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d0c0      	beq.n	8011f18 <_strtod_l+0x8b8>
 8011f96:	e618      	b.n	8011bca <_strtod_l+0x56a>
 8011f98:	fffffc02 	.word	0xfffffc02
 8011f9c:	7ff00000 	.word	0x7ff00000
 8011fa0:	39500000 	.word	0x39500000
 8011fa4:	000fffff 	.word	0x000fffff
 8011fa8:	7fefffff 	.word	0x7fefffff
 8011fac:	08013a48 	.word	0x08013a48
 8011fb0:	4659      	mov	r1, fp
 8011fb2:	4628      	mov	r0, r5
 8011fb4:	f7ff fac0 	bl	8011538 <__ratio>
 8011fb8:	ec57 6b10 	vmov	r6, r7, d0
 8011fbc:	ee10 0a10 	vmov	r0, s0
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011fc6:	4639      	mov	r1, r7
 8011fc8:	f7ee fd92 	bl	8000af0 <__aeabi_dcmple>
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d071      	beq.n	80120b4 <_strtod_l+0xa54>
 8011fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d17c      	bne.n	80120d0 <_strtod_l+0xa70>
 8011fd6:	f1b8 0f00 	cmp.w	r8, #0
 8011fda:	d15a      	bne.n	8012092 <_strtod_l+0xa32>
 8011fdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d15d      	bne.n	80120a0 <_strtod_l+0xa40>
 8011fe4:	4b90      	ldr	r3, [pc, #576]	; (8012228 <_strtod_l+0xbc8>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	4630      	mov	r0, r6
 8011fea:	4639      	mov	r1, r7
 8011fec:	f7ee fd76 	bl	8000adc <__aeabi_dcmplt>
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	d15c      	bne.n	80120ae <_strtod_l+0xa4e>
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	4639      	mov	r1, r7
 8011ff8:	4b8c      	ldr	r3, [pc, #560]	; (801222c <_strtod_l+0xbcc>)
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	f7ee fafc 	bl	80005f8 <__aeabi_dmul>
 8012000:	4606      	mov	r6, r0
 8012002:	460f      	mov	r7, r1
 8012004:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012008:	9606      	str	r6, [sp, #24]
 801200a:	9307      	str	r3, [sp, #28]
 801200c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012010:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012014:	4b86      	ldr	r3, [pc, #536]	; (8012230 <_strtod_l+0xbd0>)
 8012016:	ea0a 0303 	and.w	r3, sl, r3
 801201a:	930d      	str	r3, [sp, #52]	; 0x34
 801201c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801201e:	4b85      	ldr	r3, [pc, #532]	; (8012234 <_strtod_l+0xbd4>)
 8012020:	429a      	cmp	r2, r3
 8012022:	f040 8090 	bne.w	8012146 <_strtod_l+0xae6>
 8012026:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801202a:	ec49 8b10 	vmov	d0, r8, r9
 801202e:	f7ff f9b9 	bl	80113a4 <__ulp>
 8012032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012036:	ec51 0b10 	vmov	r0, r1, d0
 801203a:	f7ee fadd 	bl	80005f8 <__aeabi_dmul>
 801203e:	4642      	mov	r2, r8
 8012040:	464b      	mov	r3, r9
 8012042:	f7ee f923 	bl	800028c <__adddf3>
 8012046:	460b      	mov	r3, r1
 8012048:	4979      	ldr	r1, [pc, #484]	; (8012230 <_strtod_l+0xbd0>)
 801204a:	4a7b      	ldr	r2, [pc, #492]	; (8012238 <_strtod_l+0xbd8>)
 801204c:	4019      	ands	r1, r3
 801204e:	4291      	cmp	r1, r2
 8012050:	4680      	mov	r8, r0
 8012052:	d944      	bls.n	80120de <_strtod_l+0xa7e>
 8012054:	ee18 2a90 	vmov	r2, s17
 8012058:	4b78      	ldr	r3, [pc, #480]	; (801223c <_strtod_l+0xbdc>)
 801205a:	429a      	cmp	r2, r3
 801205c:	d104      	bne.n	8012068 <_strtod_l+0xa08>
 801205e:	ee18 3a10 	vmov	r3, s16
 8012062:	3301      	adds	r3, #1
 8012064:	f43f ad40 	beq.w	8011ae8 <_strtod_l+0x488>
 8012068:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801223c <_strtod_l+0xbdc>
 801206c:	f04f 38ff 	mov.w	r8, #4294967295
 8012070:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012072:	4620      	mov	r0, r4
 8012074:	f7fe fe6a 	bl	8010d4c <_Bfree>
 8012078:	9905      	ldr	r1, [sp, #20]
 801207a:	4620      	mov	r0, r4
 801207c:	f7fe fe66 	bl	8010d4c <_Bfree>
 8012080:	4659      	mov	r1, fp
 8012082:	4620      	mov	r0, r4
 8012084:	f7fe fe62 	bl	8010d4c <_Bfree>
 8012088:	4629      	mov	r1, r5
 801208a:	4620      	mov	r0, r4
 801208c:	f7fe fe5e 	bl	8010d4c <_Bfree>
 8012090:	e609      	b.n	8011ca6 <_strtod_l+0x646>
 8012092:	f1b8 0f01 	cmp.w	r8, #1
 8012096:	d103      	bne.n	80120a0 <_strtod_l+0xa40>
 8012098:	f1b9 0f00 	cmp.w	r9, #0
 801209c:	f43f ad95 	beq.w	8011bca <_strtod_l+0x56a>
 80120a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80121f8 <_strtod_l+0xb98>
 80120a4:	4f60      	ldr	r7, [pc, #384]	; (8012228 <_strtod_l+0xbc8>)
 80120a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80120aa:	2600      	movs	r6, #0
 80120ac:	e7ae      	b.n	801200c <_strtod_l+0x9ac>
 80120ae:	4f5f      	ldr	r7, [pc, #380]	; (801222c <_strtod_l+0xbcc>)
 80120b0:	2600      	movs	r6, #0
 80120b2:	e7a7      	b.n	8012004 <_strtod_l+0x9a4>
 80120b4:	4b5d      	ldr	r3, [pc, #372]	; (801222c <_strtod_l+0xbcc>)
 80120b6:	4630      	mov	r0, r6
 80120b8:	4639      	mov	r1, r7
 80120ba:	2200      	movs	r2, #0
 80120bc:	f7ee fa9c 	bl	80005f8 <__aeabi_dmul>
 80120c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120c2:	4606      	mov	r6, r0
 80120c4:	460f      	mov	r7, r1
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d09c      	beq.n	8012004 <_strtod_l+0x9a4>
 80120ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80120ce:	e79d      	b.n	801200c <_strtod_l+0x9ac>
 80120d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012200 <_strtod_l+0xba0>
 80120d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80120d8:	ec57 6b17 	vmov	r6, r7, d7
 80120dc:	e796      	b.n	801200c <_strtod_l+0x9ac>
 80120de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80120e2:	9b04      	ldr	r3, [sp, #16]
 80120e4:	46ca      	mov	sl, r9
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1c2      	bne.n	8012070 <_strtod_l+0xa10>
 80120ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80120f0:	0d1b      	lsrs	r3, r3, #20
 80120f2:	051b      	lsls	r3, r3, #20
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d1bb      	bne.n	8012070 <_strtod_l+0xa10>
 80120f8:	4630      	mov	r0, r6
 80120fa:	4639      	mov	r1, r7
 80120fc:	f7ee fdc4 	bl	8000c88 <__aeabi_d2lz>
 8012100:	f7ee fa4c 	bl	800059c <__aeabi_l2d>
 8012104:	4602      	mov	r2, r0
 8012106:	460b      	mov	r3, r1
 8012108:	4630      	mov	r0, r6
 801210a:	4639      	mov	r1, r7
 801210c:	f7ee f8bc 	bl	8000288 <__aeabi_dsub>
 8012110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012112:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012116:	ea43 0308 	orr.w	r3, r3, r8
 801211a:	4313      	orrs	r3, r2
 801211c:	4606      	mov	r6, r0
 801211e:	460f      	mov	r7, r1
 8012120:	d054      	beq.n	80121cc <_strtod_l+0xb6c>
 8012122:	a339      	add	r3, pc, #228	; (adr r3, 8012208 <_strtod_l+0xba8>)
 8012124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012128:	f7ee fcd8 	bl	8000adc <__aeabi_dcmplt>
 801212c:	2800      	cmp	r0, #0
 801212e:	f47f ace5 	bne.w	8011afc <_strtod_l+0x49c>
 8012132:	a337      	add	r3, pc, #220	; (adr r3, 8012210 <_strtod_l+0xbb0>)
 8012134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012138:	4630      	mov	r0, r6
 801213a:	4639      	mov	r1, r7
 801213c:	f7ee fcec 	bl	8000b18 <__aeabi_dcmpgt>
 8012140:	2800      	cmp	r0, #0
 8012142:	d095      	beq.n	8012070 <_strtod_l+0xa10>
 8012144:	e4da      	b.n	8011afc <_strtod_l+0x49c>
 8012146:	9b04      	ldr	r3, [sp, #16]
 8012148:	b333      	cbz	r3, 8012198 <_strtod_l+0xb38>
 801214a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801214c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012150:	d822      	bhi.n	8012198 <_strtod_l+0xb38>
 8012152:	a331      	add	r3, pc, #196	; (adr r3, 8012218 <_strtod_l+0xbb8>)
 8012154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012158:	4630      	mov	r0, r6
 801215a:	4639      	mov	r1, r7
 801215c:	f7ee fcc8 	bl	8000af0 <__aeabi_dcmple>
 8012160:	b1a0      	cbz	r0, 801218c <_strtod_l+0xb2c>
 8012162:	4639      	mov	r1, r7
 8012164:	4630      	mov	r0, r6
 8012166:	f7ee fd1f 	bl	8000ba8 <__aeabi_d2uiz>
 801216a:	2801      	cmp	r0, #1
 801216c:	bf38      	it	cc
 801216e:	2001      	movcc	r0, #1
 8012170:	f7ee f9c8 	bl	8000504 <__aeabi_ui2d>
 8012174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012176:	4606      	mov	r6, r0
 8012178:	460f      	mov	r7, r1
 801217a:	bb23      	cbnz	r3, 80121c6 <_strtod_l+0xb66>
 801217c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012180:	9010      	str	r0, [sp, #64]	; 0x40
 8012182:	9311      	str	r3, [sp, #68]	; 0x44
 8012184:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012188:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801218c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801218e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012190:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012194:	1a9b      	subs	r3, r3, r2
 8012196:	930f      	str	r3, [sp, #60]	; 0x3c
 8012198:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801219c:	eeb0 0a48 	vmov.f32	s0, s16
 80121a0:	eef0 0a68 	vmov.f32	s1, s17
 80121a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80121a8:	f7ff f8fc 	bl	80113a4 <__ulp>
 80121ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80121b0:	ec53 2b10 	vmov	r2, r3, d0
 80121b4:	f7ee fa20 	bl	80005f8 <__aeabi_dmul>
 80121b8:	ec53 2b18 	vmov	r2, r3, d8
 80121bc:	f7ee f866 	bl	800028c <__adddf3>
 80121c0:	4680      	mov	r8, r0
 80121c2:	4689      	mov	r9, r1
 80121c4:	e78d      	b.n	80120e2 <_strtod_l+0xa82>
 80121c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80121ca:	e7db      	b.n	8012184 <_strtod_l+0xb24>
 80121cc:	a314      	add	r3, pc, #80	; (adr r3, 8012220 <_strtod_l+0xbc0>)
 80121ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d2:	f7ee fc83 	bl	8000adc <__aeabi_dcmplt>
 80121d6:	e7b3      	b.n	8012140 <_strtod_l+0xae0>
 80121d8:	2300      	movs	r3, #0
 80121da:	930a      	str	r3, [sp, #40]	; 0x28
 80121dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80121de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121e0:	6013      	str	r3, [r2, #0]
 80121e2:	f7ff ba7c 	b.w	80116de <_strtod_l+0x7e>
 80121e6:	2a65      	cmp	r2, #101	; 0x65
 80121e8:	f43f ab75 	beq.w	80118d6 <_strtod_l+0x276>
 80121ec:	2a45      	cmp	r2, #69	; 0x45
 80121ee:	f43f ab72 	beq.w	80118d6 <_strtod_l+0x276>
 80121f2:	2301      	movs	r3, #1
 80121f4:	f7ff bbaa 	b.w	801194c <_strtod_l+0x2ec>
 80121f8:	00000000 	.word	0x00000000
 80121fc:	bff00000 	.word	0xbff00000
 8012200:	00000000 	.word	0x00000000
 8012204:	3ff00000 	.word	0x3ff00000
 8012208:	94a03595 	.word	0x94a03595
 801220c:	3fdfffff 	.word	0x3fdfffff
 8012210:	35afe535 	.word	0x35afe535
 8012214:	3fe00000 	.word	0x3fe00000
 8012218:	ffc00000 	.word	0xffc00000
 801221c:	41dfffff 	.word	0x41dfffff
 8012220:	94a03595 	.word	0x94a03595
 8012224:	3fcfffff 	.word	0x3fcfffff
 8012228:	3ff00000 	.word	0x3ff00000
 801222c:	3fe00000 	.word	0x3fe00000
 8012230:	7ff00000 	.word	0x7ff00000
 8012234:	7fe00000 	.word	0x7fe00000
 8012238:	7c9fffff 	.word	0x7c9fffff
 801223c:	7fefffff 	.word	0x7fefffff

08012240 <_strtod_r>:
 8012240:	4b01      	ldr	r3, [pc, #4]	; (8012248 <_strtod_r+0x8>)
 8012242:	f7ff ba0d 	b.w	8011660 <_strtod_l>
 8012246:	bf00      	nop
 8012248:	20000168 	.word	0x20000168

0801224c <_strtol_l.constprop.0>:
 801224c:	2b01      	cmp	r3, #1
 801224e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012252:	d001      	beq.n	8012258 <_strtol_l.constprop.0+0xc>
 8012254:	2b24      	cmp	r3, #36	; 0x24
 8012256:	d906      	bls.n	8012266 <_strtol_l.constprop.0+0x1a>
 8012258:	f7fd fd7e 	bl	800fd58 <__errno>
 801225c:	2316      	movs	r3, #22
 801225e:	6003      	str	r3, [r0, #0]
 8012260:	2000      	movs	r0, #0
 8012262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012266:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801234c <_strtol_l.constprop.0+0x100>
 801226a:	460d      	mov	r5, r1
 801226c:	462e      	mov	r6, r5
 801226e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012272:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012276:	f017 0708 	ands.w	r7, r7, #8
 801227a:	d1f7      	bne.n	801226c <_strtol_l.constprop.0+0x20>
 801227c:	2c2d      	cmp	r4, #45	; 0x2d
 801227e:	d132      	bne.n	80122e6 <_strtol_l.constprop.0+0x9a>
 8012280:	782c      	ldrb	r4, [r5, #0]
 8012282:	2701      	movs	r7, #1
 8012284:	1cb5      	adds	r5, r6, #2
 8012286:	2b00      	cmp	r3, #0
 8012288:	d05b      	beq.n	8012342 <_strtol_l.constprop.0+0xf6>
 801228a:	2b10      	cmp	r3, #16
 801228c:	d109      	bne.n	80122a2 <_strtol_l.constprop.0+0x56>
 801228e:	2c30      	cmp	r4, #48	; 0x30
 8012290:	d107      	bne.n	80122a2 <_strtol_l.constprop.0+0x56>
 8012292:	782c      	ldrb	r4, [r5, #0]
 8012294:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012298:	2c58      	cmp	r4, #88	; 0x58
 801229a:	d14d      	bne.n	8012338 <_strtol_l.constprop.0+0xec>
 801229c:	786c      	ldrb	r4, [r5, #1]
 801229e:	2310      	movs	r3, #16
 80122a0:	3502      	adds	r5, #2
 80122a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80122a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80122aa:	f04f 0e00 	mov.w	lr, #0
 80122ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80122b2:	4676      	mov	r6, lr
 80122b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80122b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80122bc:	f1bc 0f09 	cmp.w	ip, #9
 80122c0:	d816      	bhi.n	80122f0 <_strtol_l.constprop.0+0xa4>
 80122c2:	4664      	mov	r4, ip
 80122c4:	42a3      	cmp	r3, r4
 80122c6:	dd24      	ble.n	8012312 <_strtol_l.constprop.0+0xc6>
 80122c8:	f1be 3fff 	cmp.w	lr, #4294967295
 80122cc:	d008      	beq.n	80122e0 <_strtol_l.constprop.0+0x94>
 80122ce:	45b1      	cmp	r9, r6
 80122d0:	d31c      	bcc.n	801230c <_strtol_l.constprop.0+0xc0>
 80122d2:	d101      	bne.n	80122d8 <_strtol_l.constprop.0+0x8c>
 80122d4:	45a2      	cmp	sl, r4
 80122d6:	db19      	blt.n	801230c <_strtol_l.constprop.0+0xc0>
 80122d8:	fb06 4603 	mla	r6, r6, r3, r4
 80122dc:	f04f 0e01 	mov.w	lr, #1
 80122e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122e4:	e7e8      	b.n	80122b8 <_strtol_l.constprop.0+0x6c>
 80122e6:	2c2b      	cmp	r4, #43	; 0x2b
 80122e8:	bf04      	itt	eq
 80122ea:	782c      	ldrbeq	r4, [r5, #0]
 80122ec:	1cb5      	addeq	r5, r6, #2
 80122ee:	e7ca      	b.n	8012286 <_strtol_l.constprop.0+0x3a>
 80122f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80122f4:	f1bc 0f19 	cmp.w	ip, #25
 80122f8:	d801      	bhi.n	80122fe <_strtol_l.constprop.0+0xb2>
 80122fa:	3c37      	subs	r4, #55	; 0x37
 80122fc:	e7e2      	b.n	80122c4 <_strtol_l.constprop.0+0x78>
 80122fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012302:	f1bc 0f19 	cmp.w	ip, #25
 8012306:	d804      	bhi.n	8012312 <_strtol_l.constprop.0+0xc6>
 8012308:	3c57      	subs	r4, #87	; 0x57
 801230a:	e7db      	b.n	80122c4 <_strtol_l.constprop.0+0x78>
 801230c:	f04f 3eff 	mov.w	lr, #4294967295
 8012310:	e7e6      	b.n	80122e0 <_strtol_l.constprop.0+0x94>
 8012312:	f1be 3fff 	cmp.w	lr, #4294967295
 8012316:	d105      	bne.n	8012324 <_strtol_l.constprop.0+0xd8>
 8012318:	2322      	movs	r3, #34	; 0x22
 801231a:	6003      	str	r3, [r0, #0]
 801231c:	4646      	mov	r6, r8
 801231e:	b942      	cbnz	r2, 8012332 <_strtol_l.constprop.0+0xe6>
 8012320:	4630      	mov	r0, r6
 8012322:	e79e      	b.n	8012262 <_strtol_l.constprop.0+0x16>
 8012324:	b107      	cbz	r7, 8012328 <_strtol_l.constprop.0+0xdc>
 8012326:	4276      	negs	r6, r6
 8012328:	2a00      	cmp	r2, #0
 801232a:	d0f9      	beq.n	8012320 <_strtol_l.constprop.0+0xd4>
 801232c:	f1be 0f00 	cmp.w	lr, #0
 8012330:	d000      	beq.n	8012334 <_strtol_l.constprop.0+0xe8>
 8012332:	1e69      	subs	r1, r5, #1
 8012334:	6011      	str	r1, [r2, #0]
 8012336:	e7f3      	b.n	8012320 <_strtol_l.constprop.0+0xd4>
 8012338:	2430      	movs	r4, #48	; 0x30
 801233a:	2b00      	cmp	r3, #0
 801233c:	d1b1      	bne.n	80122a2 <_strtol_l.constprop.0+0x56>
 801233e:	2308      	movs	r3, #8
 8012340:	e7af      	b.n	80122a2 <_strtol_l.constprop.0+0x56>
 8012342:	2c30      	cmp	r4, #48	; 0x30
 8012344:	d0a5      	beq.n	8012292 <_strtol_l.constprop.0+0x46>
 8012346:	230a      	movs	r3, #10
 8012348:	e7ab      	b.n	80122a2 <_strtol_l.constprop.0+0x56>
 801234a:	bf00      	nop
 801234c:	08013a71 	.word	0x08013a71

08012350 <_strtol_r>:
 8012350:	f7ff bf7c 	b.w	801224c <_strtol_l.constprop.0>

08012354 <__ssputs_r>:
 8012354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012358:	688e      	ldr	r6, [r1, #8]
 801235a:	461f      	mov	r7, r3
 801235c:	42be      	cmp	r6, r7
 801235e:	680b      	ldr	r3, [r1, #0]
 8012360:	4682      	mov	sl, r0
 8012362:	460c      	mov	r4, r1
 8012364:	4690      	mov	r8, r2
 8012366:	d82c      	bhi.n	80123c2 <__ssputs_r+0x6e>
 8012368:	898a      	ldrh	r2, [r1, #12]
 801236a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801236e:	d026      	beq.n	80123be <__ssputs_r+0x6a>
 8012370:	6965      	ldr	r5, [r4, #20]
 8012372:	6909      	ldr	r1, [r1, #16]
 8012374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012378:	eba3 0901 	sub.w	r9, r3, r1
 801237c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012380:	1c7b      	adds	r3, r7, #1
 8012382:	444b      	add	r3, r9
 8012384:	106d      	asrs	r5, r5, #1
 8012386:	429d      	cmp	r5, r3
 8012388:	bf38      	it	cc
 801238a:	461d      	movcc	r5, r3
 801238c:	0553      	lsls	r3, r2, #21
 801238e:	d527      	bpl.n	80123e0 <__ssputs_r+0x8c>
 8012390:	4629      	mov	r1, r5
 8012392:	f7fe fc0f 	bl	8010bb4 <_malloc_r>
 8012396:	4606      	mov	r6, r0
 8012398:	b360      	cbz	r0, 80123f4 <__ssputs_r+0xa0>
 801239a:	6921      	ldr	r1, [r4, #16]
 801239c:	464a      	mov	r2, r9
 801239e:	f7fd fd07 	bl	800fdb0 <memcpy>
 80123a2:	89a3      	ldrh	r3, [r4, #12]
 80123a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80123a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123ac:	81a3      	strh	r3, [r4, #12]
 80123ae:	6126      	str	r6, [r4, #16]
 80123b0:	6165      	str	r5, [r4, #20]
 80123b2:	444e      	add	r6, r9
 80123b4:	eba5 0509 	sub.w	r5, r5, r9
 80123b8:	6026      	str	r6, [r4, #0]
 80123ba:	60a5      	str	r5, [r4, #8]
 80123bc:	463e      	mov	r6, r7
 80123be:	42be      	cmp	r6, r7
 80123c0:	d900      	bls.n	80123c4 <__ssputs_r+0x70>
 80123c2:	463e      	mov	r6, r7
 80123c4:	6820      	ldr	r0, [r4, #0]
 80123c6:	4632      	mov	r2, r6
 80123c8:	4641      	mov	r1, r8
 80123ca:	f000 f9c9 	bl	8012760 <memmove>
 80123ce:	68a3      	ldr	r3, [r4, #8]
 80123d0:	1b9b      	subs	r3, r3, r6
 80123d2:	60a3      	str	r3, [r4, #8]
 80123d4:	6823      	ldr	r3, [r4, #0]
 80123d6:	4433      	add	r3, r6
 80123d8:	6023      	str	r3, [r4, #0]
 80123da:	2000      	movs	r0, #0
 80123dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e0:	462a      	mov	r2, r5
 80123e2:	f000 fd9e 	bl	8012f22 <_realloc_r>
 80123e6:	4606      	mov	r6, r0
 80123e8:	2800      	cmp	r0, #0
 80123ea:	d1e0      	bne.n	80123ae <__ssputs_r+0x5a>
 80123ec:	6921      	ldr	r1, [r4, #16]
 80123ee:	4650      	mov	r0, sl
 80123f0:	f7fe fb6c 	bl	8010acc <_free_r>
 80123f4:	230c      	movs	r3, #12
 80123f6:	f8ca 3000 	str.w	r3, [sl]
 80123fa:	89a3      	ldrh	r3, [r4, #12]
 80123fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012400:	81a3      	strh	r3, [r4, #12]
 8012402:	f04f 30ff 	mov.w	r0, #4294967295
 8012406:	e7e9      	b.n	80123dc <__ssputs_r+0x88>

08012408 <_svfiprintf_r>:
 8012408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801240c:	4698      	mov	r8, r3
 801240e:	898b      	ldrh	r3, [r1, #12]
 8012410:	061b      	lsls	r3, r3, #24
 8012412:	b09d      	sub	sp, #116	; 0x74
 8012414:	4607      	mov	r7, r0
 8012416:	460d      	mov	r5, r1
 8012418:	4614      	mov	r4, r2
 801241a:	d50e      	bpl.n	801243a <_svfiprintf_r+0x32>
 801241c:	690b      	ldr	r3, [r1, #16]
 801241e:	b963      	cbnz	r3, 801243a <_svfiprintf_r+0x32>
 8012420:	2140      	movs	r1, #64	; 0x40
 8012422:	f7fe fbc7 	bl	8010bb4 <_malloc_r>
 8012426:	6028      	str	r0, [r5, #0]
 8012428:	6128      	str	r0, [r5, #16]
 801242a:	b920      	cbnz	r0, 8012436 <_svfiprintf_r+0x2e>
 801242c:	230c      	movs	r3, #12
 801242e:	603b      	str	r3, [r7, #0]
 8012430:	f04f 30ff 	mov.w	r0, #4294967295
 8012434:	e0d0      	b.n	80125d8 <_svfiprintf_r+0x1d0>
 8012436:	2340      	movs	r3, #64	; 0x40
 8012438:	616b      	str	r3, [r5, #20]
 801243a:	2300      	movs	r3, #0
 801243c:	9309      	str	r3, [sp, #36]	; 0x24
 801243e:	2320      	movs	r3, #32
 8012440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012444:	f8cd 800c 	str.w	r8, [sp, #12]
 8012448:	2330      	movs	r3, #48	; 0x30
 801244a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80125f0 <_svfiprintf_r+0x1e8>
 801244e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012452:	f04f 0901 	mov.w	r9, #1
 8012456:	4623      	mov	r3, r4
 8012458:	469a      	mov	sl, r3
 801245a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801245e:	b10a      	cbz	r2, 8012464 <_svfiprintf_r+0x5c>
 8012460:	2a25      	cmp	r2, #37	; 0x25
 8012462:	d1f9      	bne.n	8012458 <_svfiprintf_r+0x50>
 8012464:	ebba 0b04 	subs.w	fp, sl, r4
 8012468:	d00b      	beq.n	8012482 <_svfiprintf_r+0x7a>
 801246a:	465b      	mov	r3, fp
 801246c:	4622      	mov	r2, r4
 801246e:	4629      	mov	r1, r5
 8012470:	4638      	mov	r0, r7
 8012472:	f7ff ff6f 	bl	8012354 <__ssputs_r>
 8012476:	3001      	adds	r0, #1
 8012478:	f000 80a9 	beq.w	80125ce <_svfiprintf_r+0x1c6>
 801247c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801247e:	445a      	add	r2, fp
 8012480:	9209      	str	r2, [sp, #36]	; 0x24
 8012482:	f89a 3000 	ldrb.w	r3, [sl]
 8012486:	2b00      	cmp	r3, #0
 8012488:	f000 80a1 	beq.w	80125ce <_svfiprintf_r+0x1c6>
 801248c:	2300      	movs	r3, #0
 801248e:	f04f 32ff 	mov.w	r2, #4294967295
 8012492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012496:	f10a 0a01 	add.w	sl, sl, #1
 801249a:	9304      	str	r3, [sp, #16]
 801249c:	9307      	str	r3, [sp, #28]
 801249e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80124a2:	931a      	str	r3, [sp, #104]	; 0x68
 80124a4:	4654      	mov	r4, sl
 80124a6:	2205      	movs	r2, #5
 80124a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124ac:	4850      	ldr	r0, [pc, #320]	; (80125f0 <_svfiprintf_r+0x1e8>)
 80124ae:	f7ed fe8f 	bl	80001d0 <memchr>
 80124b2:	9a04      	ldr	r2, [sp, #16]
 80124b4:	b9d8      	cbnz	r0, 80124ee <_svfiprintf_r+0xe6>
 80124b6:	06d0      	lsls	r0, r2, #27
 80124b8:	bf44      	itt	mi
 80124ba:	2320      	movmi	r3, #32
 80124bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124c0:	0711      	lsls	r1, r2, #28
 80124c2:	bf44      	itt	mi
 80124c4:	232b      	movmi	r3, #43	; 0x2b
 80124c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80124ca:	f89a 3000 	ldrb.w	r3, [sl]
 80124ce:	2b2a      	cmp	r3, #42	; 0x2a
 80124d0:	d015      	beq.n	80124fe <_svfiprintf_r+0xf6>
 80124d2:	9a07      	ldr	r2, [sp, #28]
 80124d4:	4654      	mov	r4, sl
 80124d6:	2000      	movs	r0, #0
 80124d8:	f04f 0c0a 	mov.w	ip, #10
 80124dc:	4621      	mov	r1, r4
 80124de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124e2:	3b30      	subs	r3, #48	; 0x30
 80124e4:	2b09      	cmp	r3, #9
 80124e6:	d94d      	bls.n	8012584 <_svfiprintf_r+0x17c>
 80124e8:	b1b0      	cbz	r0, 8012518 <_svfiprintf_r+0x110>
 80124ea:	9207      	str	r2, [sp, #28]
 80124ec:	e014      	b.n	8012518 <_svfiprintf_r+0x110>
 80124ee:	eba0 0308 	sub.w	r3, r0, r8
 80124f2:	fa09 f303 	lsl.w	r3, r9, r3
 80124f6:	4313      	orrs	r3, r2
 80124f8:	9304      	str	r3, [sp, #16]
 80124fa:	46a2      	mov	sl, r4
 80124fc:	e7d2      	b.n	80124a4 <_svfiprintf_r+0x9c>
 80124fe:	9b03      	ldr	r3, [sp, #12]
 8012500:	1d19      	adds	r1, r3, #4
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	9103      	str	r1, [sp, #12]
 8012506:	2b00      	cmp	r3, #0
 8012508:	bfbb      	ittet	lt
 801250a:	425b      	neglt	r3, r3
 801250c:	f042 0202 	orrlt.w	r2, r2, #2
 8012510:	9307      	strge	r3, [sp, #28]
 8012512:	9307      	strlt	r3, [sp, #28]
 8012514:	bfb8      	it	lt
 8012516:	9204      	strlt	r2, [sp, #16]
 8012518:	7823      	ldrb	r3, [r4, #0]
 801251a:	2b2e      	cmp	r3, #46	; 0x2e
 801251c:	d10c      	bne.n	8012538 <_svfiprintf_r+0x130>
 801251e:	7863      	ldrb	r3, [r4, #1]
 8012520:	2b2a      	cmp	r3, #42	; 0x2a
 8012522:	d134      	bne.n	801258e <_svfiprintf_r+0x186>
 8012524:	9b03      	ldr	r3, [sp, #12]
 8012526:	1d1a      	adds	r2, r3, #4
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	9203      	str	r2, [sp, #12]
 801252c:	2b00      	cmp	r3, #0
 801252e:	bfb8      	it	lt
 8012530:	f04f 33ff 	movlt.w	r3, #4294967295
 8012534:	3402      	adds	r4, #2
 8012536:	9305      	str	r3, [sp, #20]
 8012538:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012600 <_svfiprintf_r+0x1f8>
 801253c:	7821      	ldrb	r1, [r4, #0]
 801253e:	2203      	movs	r2, #3
 8012540:	4650      	mov	r0, sl
 8012542:	f7ed fe45 	bl	80001d0 <memchr>
 8012546:	b138      	cbz	r0, 8012558 <_svfiprintf_r+0x150>
 8012548:	9b04      	ldr	r3, [sp, #16]
 801254a:	eba0 000a 	sub.w	r0, r0, sl
 801254e:	2240      	movs	r2, #64	; 0x40
 8012550:	4082      	lsls	r2, r0
 8012552:	4313      	orrs	r3, r2
 8012554:	3401      	adds	r4, #1
 8012556:	9304      	str	r3, [sp, #16]
 8012558:	f814 1b01 	ldrb.w	r1, [r4], #1
 801255c:	4825      	ldr	r0, [pc, #148]	; (80125f4 <_svfiprintf_r+0x1ec>)
 801255e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012562:	2206      	movs	r2, #6
 8012564:	f7ed fe34 	bl	80001d0 <memchr>
 8012568:	2800      	cmp	r0, #0
 801256a:	d038      	beq.n	80125de <_svfiprintf_r+0x1d6>
 801256c:	4b22      	ldr	r3, [pc, #136]	; (80125f8 <_svfiprintf_r+0x1f0>)
 801256e:	bb1b      	cbnz	r3, 80125b8 <_svfiprintf_r+0x1b0>
 8012570:	9b03      	ldr	r3, [sp, #12]
 8012572:	3307      	adds	r3, #7
 8012574:	f023 0307 	bic.w	r3, r3, #7
 8012578:	3308      	adds	r3, #8
 801257a:	9303      	str	r3, [sp, #12]
 801257c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801257e:	4433      	add	r3, r6
 8012580:	9309      	str	r3, [sp, #36]	; 0x24
 8012582:	e768      	b.n	8012456 <_svfiprintf_r+0x4e>
 8012584:	fb0c 3202 	mla	r2, ip, r2, r3
 8012588:	460c      	mov	r4, r1
 801258a:	2001      	movs	r0, #1
 801258c:	e7a6      	b.n	80124dc <_svfiprintf_r+0xd4>
 801258e:	2300      	movs	r3, #0
 8012590:	3401      	adds	r4, #1
 8012592:	9305      	str	r3, [sp, #20]
 8012594:	4619      	mov	r1, r3
 8012596:	f04f 0c0a 	mov.w	ip, #10
 801259a:	4620      	mov	r0, r4
 801259c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125a0:	3a30      	subs	r2, #48	; 0x30
 80125a2:	2a09      	cmp	r2, #9
 80125a4:	d903      	bls.n	80125ae <_svfiprintf_r+0x1a6>
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d0c6      	beq.n	8012538 <_svfiprintf_r+0x130>
 80125aa:	9105      	str	r1, [sp, #20]
 80125ac:	e7c4      	b.n	8012538 <_svfiprintf_r+0x130>
 80125ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80125b2:	4604      	mov	r4, r0
 80125b4:	2301      	movs	r3, #1
 80125b6:	e7f0      	b.n	801259a <_svfiprintf_r+0x192>
 80125b8:	ab03      	add	r3, sp, #12
 80125ba:	9300      	str	r3, [sp, #0]
 80125bc:	462a      	mov	r2, r5
 80125be:	4b0f      	ldr	r3, [pc, #60]	; (80125fc <_svfiprintf_r+0x1f4>)
 80125c0:	a904      	add	r1, sp, #16
 80125c2:	4638      	mov	r0, r7
 80125c4:	f7fc fc8c 	bl	800eee0 <_printf_float>
 80125c8:	1c42      	adds	r2, r0, #1
 80125ca:	4606      	mov	r6, r0
 80125cc:	d1d6      	bne.n	801257c <_svfiprintf_r+0x174>
 80125ce:	89ab      	ldrh	r3, [r5, #12]
 80125d0:	065b      	lsls	r3, r3, #25
 80125d2:	f53f af2d 	bmi.w	8012430 <_svfiprintf_r+0x28>
 80125d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80125d8:	b01d      	add	sp, #116	; 0x74
 80125da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125de:	ab03      	add	r3, sp, #12
 80125e0:	9300      	str	r3, [sp, #0]
 80125e2:	462a      	mov	r2, r5
 80125e4:	4b05      	ldr	r3, [pc, #20]	; (80125fc <_svfiprintf_r+0x1f4>)
 80125e6:	a904      	add	r1, sp, #16
 80125e8:	4638      	mov	r0, r7
 80125ea:	f7fc ff1d 	bl	800f428 <_printf_i>
 80125ee:	e7eb      	b.n	80125c8 <_svfiprintf_r+0x1c0>
 80125f0:	08013b71 	.word	0x08013b71
 80125f4:	08013b7b 	.word	0x08013b7b
 80125f8:	0800eee1 	.word	0x0800eee1
 80125fc:	08012355 	.word	0x08012355
 8012600:	08013b77 	.word	0x08013b77

08012604 <__sflush_r>:
 8012604:	898a      	ldrh	r2, [r1, #12]
 8012606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801260a:	4605      	mov	r5, r0
 801260c:	0710      	lsls	r0, r2, #28
 801260e:	460c      	mov	r4, r1
 8012610:	d458      	bmi.n	80126c4 <__sflush_r+0xc0>
 8012612:	684b      	ldr	r3, [r1, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	dc05      	bgt.n	8012624 <__sflush_r+0x20>
 8012618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801261a:	2b00      	cmp	r3, #0
 801261c:	dc02      	bgt.n	8012624 <__sflush_r+0x20>
 801261e:	2000      	movs	r0, #0
 8012620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012626:	2e00      	cmp	r6, #0
 8012628:	d0f9      	beq.n	801261e <__sflush_r+0x1a>
 801262a:	2300      	movs	r3, #0
 801262c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012630:	682f      	ldr	r7, [r5, #0]
 8012632:	6a21      	ldr	r1, [r4, #32]
 8012634:	602b      	str	r3, [r5, #0]
 8012636:	d032      	beq.n	801269e <__sflush_r+0x9a>
 8012638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801263a:	89a3      	ldrh	r3, [r4, #12]
 801263c:	075a      	lsls	r2, r3, #29
 801263e:	d505      	bpl.n	801264c <__sflush_r+0x48>
 8012640:	6863      	ldr	r3, [r4, #4]
 8012642:	1ac0      	subs	r0, r0, r3
 8012644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012646:	b10b      	cbz	r3, 801264c <__sflush_r+0x48>
 8012648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801264a:	1ac0      	subs	r0, r0, r3
 801264c:	2300      	movs	r3, #0
 801264e:	4602      	mov	r2, r0
 8012650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012652:	6a21      	ldr	r1, [r4, #32]
 8012654:	4628      	mov	r0, r5
 8012656:	47b0      	blx	r6
 8012658:	1c43      	adds	r3, r0, #1
 801265a:	89a3      	ldrh	r3, [r4, #12]
 801265c:	d106      	bne.n	801266c <__sflush_r+0x68>
 801265e:	6829      	ldr	r1, [r5, #0]
 8012660:	291d      	cmp	r1, #29
 8012662:	d82b      	bhi.n	80126bc <__sflush_r+0xb8>
 8012664:	4a29      	ldr	r2, [pc, #164]	; (801270c <__sflush_r+0x108>)
 8012666:	410a      	asrs	r2, r1
 8012668:	07d6      	lsls	r6, r2, #31
 801266a:	d427      	bmi.n	80126bc <__sflush_r+0xb8>
 801266c:	2200      	movs	r2, #0
 801266e:	6062      	str	r2, [r4, #4]
 8012670:	04d9      	lsls	r1, r3, #19
 8012672:	6922      	ldr	r2, [r4, #16]
 8012674:	6022      	str	r2, [r4, #0]
 8012676:	d504      	bpl.n	8012682 <__sflush_r+0x7e>
 8012678:	1c42      	adds	r2, r0, #1
 801267a:	d101      	bne.n	8012680 <__sflush_r+0x7c>
 801267c:	682b      	ldr	r3, [r5, #0]
 801267e:	b903      	cbnz	r3, 8012682 <__sflush_r+0x7e>
 8012680:	6560      	str	r0, [r4, #84]	; 0x54
 8012682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012684:	602f      	str	r7, [r5, #0]
 8012686:	2900      	cmp	r1, #0
 8012688:	d0c9      	beq.n	801261e <__sflush_r+0x1a>
 801268a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801268e:	4299      	cmp	r1, r3
 8012690:	d002      	beq.n	8012698 <__sflush_r+0x94>
 8012692:	4628      	mov	r0, r5
 8012694:	f7fe fa1a 	bl	8010acc <_free_r>
 8012698:	2000      	movs	r0, #0
 801269a:	6360      	str	r0, [r4, #52]	; 0x34
 801269c:	e7c0      	b.n	8012620 <__sflush_r+0x1c>
 801269e:	2301      	movs	r3, #1
 80126a0:	4628      	mov	r0, r5
 80126a2:	47b0      	blx	r6
 80126a4:	1c41      	adds	r1, r0, #1
 80126a6:	d1c8      	bne.n	801263a <__sflush_r+0x36>
 80126a8:	682b      	ldr	r3, [r5, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d0c5      	beq.n	801263a <__sflush_r+0x36>
 80126ae:	2b1d      	cmp	r3, #29
 80126b0:	d001      	beq.n	80126b6 <__sflush_r+0xb2>
 80126b2:	2b16      	cmp	r3, #22
 80126b4:	d101      	bne.n	80126ba <__sflush_r+0xb6>
 80126b6:	602f      	str	r7, [r5, #0]
 80126b8:	e7b1      	b.n	801261e <__sflush_r+0x1a>
 80126ba:	89a3      	ldrh	r3, [r4, #12]
 80126bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126c0:	81a3      	strh	r3, [r4, #12]
 80126c2:	e7ad      	b.n	8012620 <__sflush_r+0x1c>
 80126c4:	690f      	ldr	r7, [r1, #16]
 80126c6:	2f00      	cmp	r7, #0
 80126c8:	d0a9      	beq.n	801261e <__sflush_r+0x1a>
 80126ca:	0793      	lsls	r3, r2, #30
 80126cc:	680e      	ldr	r6, [r1, #0]
 80126ce:	bf08      	it	eq
 80126d0:	694b      	ldreq	r3, [r1, #20]
 80126d2:	600f      	str	r7, [r1, #0]
 80126d4:	bf18      	it	ne
 80126d6:	2300      	movne	r3, #0
 80126d8:	eba6 0807 	sub.w	r8, r6, r7
 80126dc:	608b      	str	r3, [r1, #8]
 80126de:	f1b8 0f00 	cmp.w	r8, #0
 80126e2:	dd9c      	ble.n	801261e <__sflush_r+0x1a>
 80126e4:	6a21      	ldr	r1, [r4, #32]
 80126e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80126e8:	4643      	mov	r3, r8
 80126ea:	463a      	mov	r2, r7
 80126ec:	4628      	mov	r0, r5
 80126ee:	47b0      	blx	r6
 80126f0:	2800      	cmp	r0, #0
 80126f2:	dc06      	bgt.n	8012702 <__sflush_r+0xfe>
 80126f4:	89a3      	ldrh	r3, [r4, #12]
 80126f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126fa:	81a3      	strh	r3, [r4, #12]
 80126fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012700:	e78e      	b.n	8012620 <__sflush_r+0x1c>
 8012702:	4407      	add	r7, r0
 8012704:	eba8 0800 	sub.w	r8, r8, r0
 8012708:	e7e9      	b.n	80126de <__sflush_r+0xda>
 801270a:	bf00      	nop
 801270c:	dfbffffe 	.word	0xdfbffffe

08012710 <_fflush_r>:
 8012710:	b538      	push	{r3, r4, r5, lr}
 8012712:	690b      	ldr	r3, [r1, #16]
 8012714:	4605      	mov	r5, r0
 8012716:	460c      	mov	r4, r1
 8012718:	b913      	cbnz	r3, 8012720 <_fflush_r+0x10>
 801271a:	2500      	movs	r5, #0
 801271c:	4628      	mov	r0, r5
 801271e:	bd38      	pop	{r3, r4, r5, pc}
 8012720:	b118      	cbz	r0, 801272a <_fflush_r+0x1a>
 8012722:	6a03      	ldr	r3, [r0, #32]
 8012724:	b90b      	cbnz	r3, 801272a <_fflush_r+0x1a>
 8012726:	f7fd fa2b 	bl	800fb80 <__sinit>
 801272a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d0f3      	beq.n	801271a <_fflush_r+0xa>
 8012732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012734:	07d0      	lsls	r0, r2, #31
 8012736:	d404      	bmi.n	8012742 <_fflush_r+0x32>
 8012738:	0599      	lsls	r1, r3, #22
 801273a:	d402      	bmi.n	8012742 <_fflush_r+0x32>
 801273c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801273e:	f7fd fb35 	bl	800fdac <__retarget_lock_acquire_recursive>
 8012742:	4628      	mov	r0, r5
 8012744:	4621      	mov	r1, r4
 8012746:	f7ff ff5d 	bl	8012604 <__sflush_r>
 801274a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801274c:	07da      	lsls	r2, r3, #31
 801274e:	4605      	mov	r5, r0
 8012750:	d4e4      	bmi.n	801271c <_fflush_r+0xc>
 8012752:	89a3      	ldrh	r3, [r4, #12]
 8012754:	059b      	lsls	r3, r3, #22
 8012756:	d4e1      	bmi.n	801271c <_fflush_r+0xc>
 8012758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801275a:	f7fd fb28 	bl	800fdae <__retarget_lock_release_recursive>
 801275e:	e7dd      	b.n	801271c <_fflush_r+0xc>

08012760 <memmove>:
 8012760:	4288      	cmp	r0, r1
 8012762:	b510      	push	{r4, lr}
 8012764:	eb01 0402 	add.w	r4, r1, r2
 8012768:	d902      	bls.n	8012770 <memmove+0x10>
 801276a:	4284      	cmp	r4, r0
 801276c:	4623      	mov	r3, r4
 801276e:	d807      	bhi.n	8012780 <memmove+0x20>
 8012770:	1e43      	subs	r3, r0, #1
 8012772:	42a1      	cmp	r1, r4
 8012774:	d008      	beq.n	8012788 <memmove+0x28>
 8012776:	f811 2b01 	ldrb.w	r2, [r1], #1
 801277a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801277e:	e7f8      	b.n	8012772 <memmove+0x12>
 8012780:	4402      	add	r2, r0
 8012782:	4601      	mov	r1, r0
 8012784:	428a      	cmp	r2, r1
 8012786:	d100      	bne.n	801278a <memmove+0x2a>
 8012788:	bd10      	pop	{r4, pc}
 801278a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801278e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012792:	e7f7      	b.n	8012784 <memmove+0x24>

08012794 <strncmp>:
 8012794:	b510      	push	{r4, lr}
 8012796:	b16a      	cbz	r2, 80127b4 <strncmp+0x20>
 8012798:	3901      	subs	r1, #1
 801279a:	1884      	adds	r4, r0, r2
 801279c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d103      	bne.n	80127b0 <strncmp+0x1c>
 80127a8:	42a0      	cmp	r0, r4
 80127aa:	d001      	beq.n	80127b0 <strncmp+0x1c>
 80127ac:	2a00      	cmp	r2, #0
 80127ae:	d1f5      	bne.n	801279c <strncmp+0x8>
 80127b0:	1ad0      	subs	r0, r2, r3
 80127b2:	bd10      	pop	{r4, pc}
 80127b4:	4610      	mov	r0, r2
 80127b6:	e7fc      	b.n	80127b2 <strncmp+0x1e>

080127b8 <_sbrk_r>:
 80127b8:	b538      	push	{r3, r4, r5, lr}
 80127ba:	4d06      	ldr	r5, [pc, #24]	; (80127d4 <_sbrk_r+0x1c>)
 80127bc:	2300      	movs	r3, #0
 80127be:	4604      	mov	r4, r0
 80127c0:	4608      	mov	r0, r1
 80127c2:	602b      	str	r3, [r5, #0]
 80127c4:	f7f0 fd86 	bl	80032d4 <_sbrk>
 80127c8:	1c43      	adds	r3, r0, #1
 80127ca:	d102      	bne.n	80127d2 <_sbrk_r+0x1a>
 80127cc:	682b      	ldr	r3, [r5, #0]
 80127ce:	b103      	cbz	r3, 80127d2 <_sbrk_r+0x1a>
 80127d0:	6023      	str	r3, [r4, #0]
 80127d2:	bd38      	pop	{r3, r4, r5, pc}
 80127d4:	20003b74 	.word	0x20003b74

080127d8 <nan>:
 80127d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80127e0 <nan+0x8>
 80127dc:	4770      	bx	lr
 80127de:	bf00      	nop
 80127e0:	00000000 	.word	0x00000000
 80127e4:	7ff80000 	.word	0x7ff80000

080127e8 <__assert_func>:
 80127e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127ea:	4614      	mov	r4, r2
 80127ec:	461a      	mov	r2, r3
 80127ee:	4b09      	ldr	r3, [pc, #36]	; (8012814 <__assert_func+0x2c>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	4605      	mov	r5, r0
 80127f4:	68d8      	ldr	r0, [r3, #12]
 80127f6:	b14c      	cbz	r4, 801280c <__assert_func+0x24>
 80127f8:	4b07      	ldr	r3, [pc, #28]	; (8012818 <__assert_func+0x30>)
 80127fa:	9100      	str	r1, [sp, #0]
 80127fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012800:	4906      	ldr	r1, [pc, #24]	; (801281c <__assert_func+0x34>)
 8012802:	462b      	mov	r3, r5
 8012804:	f000 fbca 	bl	8012f9c <fiprintf>
 8012808:	f000 fbda 	bl	8012fc0 <abort>
 801280c:	4b04      	ldr	r3, [pc, #16]	; (8012820 <__assert_func+0x38>)
 801280e:	461c      	mov	r4, r3
 8012810:	e7f3      	b.n	80127fa <__assert_func+0x12>
 8012812:	bf00      	nop
 8012814:	20000164 	.word	0x20000164
 8012818:	08013b8a 	.word	0x08013b8a
 801281c:	08013b97 	.word	0x08013b97
 8012820:	08013bc5 	.word	0x08013bc5

08012824 <_calloc_r>:
 8012824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012826:	fba1 2402 	umull	r2, r4, r1, r2
 801282a:	b94c      	cbnz	r4, 8012840 <_calloc_r+0x1c>
 801282c:	4611      	mov	r1, r2
 801282e:	9201      	str	r2, [sp, #4]
 8012830:	f7fe f9c0 	bl	8010bb4 <_malloc_r>
 8012834:	9a01      	ldr	r2, [sp, #4]
 8012836:	4605      	mov	r5, r0
 8012838:	b930      	cbnz	r0, 8012848 <_calloc_r+0x24>
 801283a:	4628      	mov	r0, r5
 801283c:	b003      	add	sp, #12
 801283e:	bd30      	pop	{r4, r5, pc}
 8012840:	220c      	movs	r2, #12
 8012842:	6002      	str	r2, [r0, #0]
 8012844:	2500      	movs	r5, #0
 8012846:	e7f8      	b.n	801283a <_calloc_r+0x16>
 8012848:	4621      	mov	r1, r4
 801284a:	f7fd fa32 	bl	800fcb2 <memset>
 801284e:	e7f4      	b.n	801283a <_calloc_r+0x16>

08012850 <rshift>:
 8012850:	6903      	ldr	r3, [r0, #16]
 8012852:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012856:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801285a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801285e:	f100 0414 	add.w	r4, r0, #20
 8012862:	dd45      	ble.n	80128f0 <rshift+0xa0>
 8012864:	f011 011f 	ands.w	r1, r1, #31
 8012868:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801286c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012870:	d10c      	bne.n	801288c <rshift+0x3c>
 8012872:	f100 0710 	add.w	r7, r0, #16
 8012876:	4629      	mov	r1, r5
 8012878:	42b1      	cmp	r1, r6
 801287a:	d334      	bcc.n	80128e6 <rshift+0x96>
 801287c:	1a9b      	subs	r3, r3, r2
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	1eea      	subs	r2, r5, #3
 8012882:	4296      	cmp	r6, r2
 8012884:	bf38      	it	cc
 8012886:	2300      	movcc	r3, #0
 8012888:	4423      	add	r3, r4
 801288a:	e015      	b.n	80128b8 <rshift+0x68>
 801288c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012890:	f1c1 0820 	rsb	r8, r1, #32
 8012894:	40cf      	lsrs	r7, r1
 8012896:	f105 0e04 	add.w	lr, r5, #4
 801289a:	46a1      	mov	r9, r4
 801289c:	4576      	cmp	r6, lr
 801289e:	46f4      	mov	ip, lr
 80128a0:	d815      	bhi.n	80128ce <rshift+0x7e>
 80128a2:	1a9a      	subs	r2, r3, r2
 80128a4:	0092      	lsls	r2, r2, #2
 80128a6:	3a04      	subs	r2, #4
 80128a8:	3501      	adds	r5, #1
 80128aa:	42ae      	cmp	r6, r5
 80128ac:	bf38      	it	cc
 80128ae:	2200      	movcc	r2, #0
 80128b0:	18a3      	adds	r3, r4, r2
 80128b2:	50a7      	str	r7, [r4, r2]
 80128b4:	b107      	cbz	r7, 80128b8 <rshift+0x68>
 80128b6:	3304      	adds	r3, #4
 80128b8:	1b1a      	subs	r2, r3, r4
 80128ba:	42a3      	cmp	r3, r4
 80128bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80128c0:	bf08      	it	eq
 80128c2:	2300      	moveq	r3, #0
 80128c4:	6102      	str	r2, [r0, #16]
 80128c6:	bf08      	it	eq
 80128c8:	6143      	streq	r3, [r0, #20]
 80128ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128ce:	f8dc c000 	ldr.w	ip, [ip]
 80128d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80128d6:	ea4c 0707 	orr.w	r7, ip, r7
 80128da:	f849 7b04 	str.w	r7, [r9], #4
 80128de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80128e2:	40cf      	lsrs	r7, r1
 80128e4:	e7da      	b.n	801289c <rshift+0x4c>
 80128e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80128ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80128ee:	e7c3      	b.n	8012878 <rshift+0x28>
 80128f0:	4623      	mov	r3, r4
 80128f2:	e7e1      	b.n	80128b8 <rshift+0x68>

080128f4 <__hexdig_fun>:
 80128f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80128f8:	2b09      	cmp	r3, #9
 80128fa:	d802      	bhi.n	8012902 <__hexdig_fun+0xe>
 80128fc:	3820      	subs	r0, #32
 80128fe:	b2c0      	uxtb	r0, r0
 8012900:	4770      	bx	lr
 8012902:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012906:	2b05      	cmp	r3, #5
 8012908:	d801      	bhi.n	801290e <__hexdig_fun+0x1a>
 801290a:	3847      	subs	r0, #71	; 0x47
 801290c:	e7f7      	b.n	80128fe <__hexdig_fun+0xa>
 801290e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012912:	2b05      	cmp	r3, #5
 8012914:	d801      	bhi.n	801291a <__hexdig_fun+0x26>
 8012916:	3827      	subs	r0, #39	; 0x27
 8012918:	e7f1      	b.n	80128fe <__hexdig_fun+0xa>
 801291a:	2000      	movs	r0, #0
 801291c:	4770      	bx	lr
	...

08012920 <__gethex>:
 8012920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012924:	4617      	mov	r7, r2
 8012926:	680a      	ldr	r2, [r1, #0]
 8012928:	b085      	sub	sp, #20
 801292a:	f102 0b02 	add.w	fp, r2, #2
 801292e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012932:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012936:	4681      	mov	r9, r0
 8012938:	468a      	mov	sl, r1
 801293a:	9302      	str	r3, [sp, #8]
 801293c:	32fe      	adds	r2, #254	; 0xfe
 801293e:	eb02 030b 	add.w	r3, r2, fp
 8012942:	46d8      	mov	r8, fp
 8012944:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012948:	9301      	str	r3, [sp, #4]
 801294a:	2830      	cmp	r0, #48	; 0x30
 801294c:	d0f7      	beq.n	801293e <__gethex+0x1e>
 801294e:	f7ff ffd1 	bl	80128f4 <__hexdig_fun>
 8012952:	4604      	mov	r4, r0
 8012954:	2800      	cmp	r0, #0
 8012956:	d138      	bne.n	80129ca <__gethex+0xaa>
 8012958:	49a7      	ldr	r1, [pc, #668]	; (8012bf8 <__gethex+0x2d8>)
 801295a:	2201      	movs	r2, #1
 801295c:	4640      	mov	r0, r8
 801295e:	f7ff ff19 	bl	8012794 <strncmp>
 8012962:	4606      	mov	r6, r0
 8012964:	2800      	cmp	r0, #0
 8012966:	d169      	bne.n	8012a3c <__gethex+0x11c>
 8012968:	f898 0001 	ldrb.w	r0, [r8, #1]
 801296c:	465d      	mov	r5, fp
 801296e:	f7ff ffc1 	bl	80128f4 <__hexdig_fun>
 8012972:	2800      	cmp	r0, #0
 8012974:	d064      	beq.n	8012a40 <__gethex+0x120>
 8012976:	465a      	mov	r2, fp
 8012978:	7810      	ldrb	r0, [r2, #0]
 801297a:	2830      	cmp	r0, #48	; 0x30
 801297c:	4690      	mov	r8, r2
 801297e:	f102 0201 	add.w	r2, r2, #1
 8012982:	d0f9      	beq.n	8012978 <__gethex+0x58>
 8012984:	f7ff ffb6 	bl	80128f4 <__hexdig_fun>
 8012988:	2301      	movs	r3, #1
 801298a:	fab0 f480 	clz	r4, r0
 801298e:	0964      	lsrs	r4, r4, #5
 8012990:	465e      	mov	r6, fp
 8012992:	9301      	str	r3, [sp, #4]
 8012994:	4642      	mov	r2, r8
 8012996:	4615      	mov	r5, r2
 8012998:	3201      	adds	r2, #1
 801299a:	7828      	ldrb	r0, [r5, #0]
 801299c:	f7ff ffaa 	bl	80128f4 <__hexdig_fun>
 80129a0:	2800      	cmp	r0, #0
 80129a2:	d1f8      	bne.n	8012996 <__gethex+0x76>
 80129a4:	4994      	ldr	r1, [pc, #592]	; (8012bf8 <__gethex+0x2d8>)
 80129a6:	2201      	movs	r2, #1
 80129a8:	4628      	mov	r0, r5
 80129aa:	f7ff fef3 	bl	8012794 <strncmp>
 80129ae:	b978      	cbnz	r0, 80129d0 <__gethex+0xb0>
 80129b0:	b946      	cbnz	r6, 80129c4 <__gethex+0xa4>
 80129b2:	1c6e      	adds	r6, r5, #1
 80129b4:	4632      	mov	r2, r6
 80129b6:	4615      	mov	r5, r2
 80129b8:	3201      	adds	r2, #1
 80129ba:	7828      	ldrb	r0, [r5, #0]
 80129bc:	f7ff ff9a 	bl	80128f4 <__hexdig_fun>
 80129c0:	2800      	cmp	r0, #0
 80129c2:	d1f8      	bne.n	80129b6 <__gethex+0x96>
 80129c4:	1b73      	subs	r3, r6, r5
 80129c6:	009e      	lsls	r6, r3, #2
 80129c8:	e004      	b.n	80129d4 <__gethex+0xb4>
 80129ca:	2400      	movs	r4, #0
 80129cc:	4626      	mov	r6, r4
 80129ce:	e7e1      	b.n	8012994 <__gethex+0x74>
 80129d0:	2e00      	cmp	r6, #0
 80129d2:	d1f7      	bne.n	80129c4 <__gethex+0xa4>
 80129d4:	782b      	ldrb	r3, [r5, #0]
 80129d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80129da:	2b50      	cmp	r3, #80	; 0x50
 80129dc:	d13d      	bne.n	8012a5a <__gethex+0x13a>
 80129de:	786b      	ldrb	r3, [r5, #1]
 80129e0:	2b2b      	cmp	r3, #43	; 0x2b
 80129e2:	d02f      	beq.n	8012a44 <__gethex+0x124>
 80129e4:	2b2d      	cmp	r3, #45	; 0x2d
 80129e6:	d031      	beq.n	8012a4c <__gethex+0x12c>
 80129e8:	1c69      	adds	r1, r5, #1
 80129ea:	f04f 0b00 	mov.w	fp, #0
 80129ee:	7808      	ldrb	r0, [r1, #0]
 80129f0:	f7ff ff80 	bl	80128f4 <__hexdig_fun>
 80129f4:	1e42      	subs	r2, r0, #1
 80129f6:	b2d2      	uxtb	r2, r2
 80129f8:	2a18      	cmp	r2, #24
 80129fa:	d82e      	bhi.n	8012a5a <__gethex+0x13a>
 80129fc:	f1a0 0210 	sub.w	r2, r0, #16
 8012a00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012a04:	f7ff ff76 	bl	80128f4 <__hexdig_fun>
 8012a08:	f100 3cff 	add.w	ip, r0, #4294967295
 8012a0c:	fa5f fc8c 	uxtb.w	ip, ip
 8012a10:	f1bc 0f18 	cmp.w	ip, #24
 8012a14:	d91d      	bls.n	8012a52 <__gethex+0x132>
 8012a16:	f1bb 0f00 	cmp.w	fp, #0
 8012a1a:	d000      	beq.n	8012a1e <__gethex+0xfe>
 8012a1c:	4252      	negs	r2, r2
 8012a1e:	4416      	add	r6, r2
 8012a20:	f8ca 1000 	str.w	r1, [sl]
 8012a24:	b1dc      	cbz	r4, 8012a5e <__gethex+0x13e>
 8012a26:	9b01      	ldr	r3, [sp, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	bf14      	ite	ne
 8012a2c:	f04f 0800 	movne.w	r8, #0
 8012a30:	f04f 0806 	moveq.w	r8, #6
 8012a34:	4640      	mov	r0, r8
 8012a36:	b005      	add	sp, #20
 8012a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a3c:	4645      	mov	r5, r8
 8012a3e:	4626      	mov	r6, r4
 8012a40:	2401      	movs	r4, #1
 8012a42:	e7c7      	b.n	80129d4 <__gethex+0xb4>
 8012a44:	f04f 0b00 	mov.w	fp, #0
 8012a48:	1ca9      	adds	r1, r5, #2
 8012a4a:	e7d0      	b.n	80129ee <__gethex+0xce>
 8012a4c:	f04f 0b01 	mov.w	fp, #1
 8012a50:	e7fa      	b.n	8012a48 <__gethex+0x128>
 8012a52:	230a      	movs	r3, #10
 8012a54:	fb03 0002 	mla	r0, r3, r2, r0
 8012a58:	e7d0      	b.n	80129fc <__gethex+0xdc>
 8012a5a:	4629      	mov	r1, r5
 8012a5c:	e7e0      	b.n	8012a20 <__gethex+0x100>
 8012a5e:	eba5 0308 	sub.w	r3, r5, r8
 8012a62:	3b01      	subs	r3, #1
 8012a64:	4621      	mov	r1, r4
 8012a66:	2b07      	cmp	r3, #7
 8012a68:	dc0a      	bgt.n	8012a80 <__gethex+0x160>
 8012a6a:	4648      	mov	r0, r9
 8012a6c:	f7fe f92e 	bl	8010ccc <_Balloc>
 8012a70:	4604      	mov	r4, r0
 8012a72:	b940      	cbnz	r0, 8012a86 <__gethex+0x166>
 8012a74:	4b61      	ldr	r3, [pc, #388]	; (8012bfc <__gethex+0x2dc>)
 8012a76:	4602      	mov	r2, r0
 8012a78:	21e4      	movs	r1, #228	; 0xe4
 8012a7a:	4861      	ldr	r0, [pc, #388]	; (8012c00 <__gethex+0x2e0>)
 8012a7c:	f7ff feb4 	bl	80127e8 <__assert_func>
 8012a80:	3101      	adds	r1, #1
 8012a82:	105b      	asrs	r3, r3, #1
 8012a84:	e7ef      	b.n	8012a66 <__gethex+0x146>
 8012a86:	f100 0a14 	add.w	sl, r0, #20
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	495a      	ldr	r1, [pc, #360]	; (8012bf8 <__gethex+0x2d8>)
 8012a8e:	f8cd a004 	str.w	sl, [sp, #4]
 8012a92:	469b      	mov	fp, r3
 8012a94:	45a8      	cmp	r8, r5
 8012a96:	d342      	bcc.n	8012b1e <__gethex+0x1fe>
 8012a98:	9801      	ldr	r0, [sp, #4]
 8012a9a:	f840 bb04 	str.w	fp, [r0], #4
 8012a9e:	eba0 000a 	sub.w	r0, r0, sl
 8012aa2:	1080      	asrs	r0, r0, #2
 8012aa4:	6120      	str	r0, [r4, #16]
 8012aa6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012aaa:	4658      	mov	r0, fp
 8012aac:	f7fe fa00 	bl	8010eb0 <__hi0bits>
 8012ab0:	683d      	ldr	r5, [r7, #0]
 8012ab2:	eba8 0000 	sub.w	r0, r8, r0
 8012ab6:	42a8      	cmp	r0, r5
 8012ab8:	dd59      	ble.n	8012b6e <__gethex+0x24e>
 8012aba:	eba0 0805 	sub.w	r8, r0, r5
 8012abe:	4641      	mov	r1, r8
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f7fe fd8f 	bl	80115e4 <__any_on>
 8012ac6:	4683      	mov	fp, r0
 8012ac8:	b1b8      	cbz	r0, 8012afa <__gethex+0x1da>
 8012aca:	f108 33ff 	add.w	r3, r8, #4294967295
 8012ace:	1159      	asrs	r1, r3, #5
 8012ad0:	f003 021f 	and.w	r2, r3, #31
 8012ad4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012ad8:	f04f 0b01 	mov.w	fp, #1
 8012adc:	fa0b f202 	lsl.w	r2, fp, r2
 8012ae0:	420a      	tst	r2, r1
 8012ae2:	d00a      	beq.n	8012afa <__gethex+0x1da>
 8012ae4:	455b      	cmp	r3, fp
 8012ae6:	dd06      	ble.n	8012af6 <__gethex+0x1d6>
 8012ae8:	f1a8 0102 	sub.w	r1, r8, #2
 8012aec:	4620      	mov	r0, r4
 8012aee:	f7fe fd79 	bl	80115e4 <__any_on>
 8012af2:	2800      	cmp	r0, #0
 8012af4:	d138      	bne.n	8012b68 <__gethex+0x248>
 8012af6:	f04f 0b02 	mov.w	fp, #2
 8012afa:	4641      	mov	r1, r8
 8012afc:	4620      	mov	r0, r4
 8012afe:	f7ff fea7 	bl	8012850 <rshift>
 8012b02:	4446      	add	r6, r8
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	42b3      	cmp	r3, r6
 8012b08:	da41      	bge.n	8012b8e <__gethex+0x26e>
 8012b0a:	4621      	mov	r1, r4
 8012b0c:	4648      	mov	r0, r9
 8012b0e:	f7fe f91d 	bl	8010d4c <_Bfree>
 8012b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b14:	2300      	movs	r3, #0
 8012b16:	6013      	str	r3, [r2, #0]
 8012b18:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8012b1c:	e78a      	b.n	8012a34 <__gethex+0x114>
 8012b1e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8012b22:	2a2e      	cmp	r2, #46	; 0x2e
 8012b24:	d014      	beq.n	8012b50 <__gethex+0x230>
 8012b26:	2b20      	cmp	r3, #32
 8012b28:	d106      	bne.n	8012b38 <__gethex+0x218>
 8012b2a:	9b01      	ldr	r3, [sp, #4]
 8012b2c:	f843 bb04 	str.w	fp, [r3], #4
 8012b30:	f04f 0b00 	mov.w	fp, #0
 8012b34:	9301      	str	r3, [sp, #4]
 8012b36:	465b      	mov	r3, fp
 8012b38:	7828      	ldrb	r0, [r5, #0]
 8012b3a:	9303      	str	r3, [sp, #12]
 8012b3c:	f7ff feda 	bl	80128f4 <__hexdig_fun>
 8012b40:	9b03      	ldr	r3, [sp, #12]
 8012b42:	f000 000f 	and.w	r0, r0, #15
 8012b46:	4098      	lsls	r0, r3
 8012b48:	ea4b 0b00 	orr.w	fp, fp, r0
 8012b4c:	3304      	adds	r3, #4
 8012b4e:	e7a1      	b.n	8012a94 <__gethex+0x174>
 8012b50:	45a8      	cmp	r8, r5
 8012b52:	d8e8      	bhi.n	8012b26 <__gethex+0x206>
 8012b54:	2201      	movs	r2, #1
 8012b56:	4628      	mov	r0, r5
 8012b58:	9303      	str	r3, [sp, #12]
 8012b5a:	f7ff fe1b 	bl	8012794 <strncmp>
 8012b5e:	4926      	ldr	r1, [pc, #152]	; (8012bf8 <__gethex+0x2d8>)
 8012b60:	9b03      	ldr	r3, [sp, #12]
 8012b62:	2800      	cmp	r0, #0
 8012b64:	d1df      	bne.n	8012b26 <__gethex+0x206>
 8012b66:	e795      	b.n	8012a94 <__gethex+0x174>
 8012b68:	f04f 0b03 	mov.w	fp, #3
 8012b6c:	e7c5      	b.n	8012afa <__gethex+0x1da>
 8012b6e:	da0b      	bge.n	8012b88 <__gethex+0x268>
 8012b70:	eba5 0800 	sub.w	r8, r5, r0
 8012b74:	4621      	mov	r1, r4
 8012b76:	4642      	mov	r2, r8
 8012b78:	4648      	mov	r0, r9
 8012b7a:	f7fe fb01 	bl	8011180 <__lshift>
 8012b7e:	eba6 0608 	sub.w	r6, r6, r8
 8012b82:	4604      	mov	r4, r0
 8012b84:	f100 0a14 	add.w	sl, r0, #20
 8012b88:	f04f 0b00 	mov.w	fp, #0
 8012b8c:	e7ba      	b.n	8012b04 <__gethex+0x1e4>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	42b3      	cmp	r3, r6
 8012b92:	dd73      	ble.n	8012c7c <__gethex+0x35c>
 8012b94:	1b9e      	subs	r6, r3, r6
 8012b96:	42b5      	cmp	r5, r6
 8012b98:	dc34      	bgt.n	8012c04 <__gethex+0x2e4>
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	2b02      	cmp	r3, #2
 8012b9e:	d023      	beq.n	8012be8 <__gethex+0x2c8>
 8012ba0:	2b03      	cmp	r3, #3
 8012ba2:	d025      	beq.n	8012bf0 <__gethex+0x2d0>
 8012ba4:	2b01      	cmp	r3, #1
 8012ba6:	d115      	bne.n	8012bd4 <__gethex+0x2b4>
 8012ba8:	42b5      	cmp	r5, r6
 8012baa:	d113      	bne.n	8012bd4 <__gethex+0x2b4>
 8012bac:	2d01      	cmp	r5, #1
 8012bae:	d10b      	bne.n	8012bc8 <__gethex+0x2a8>
 8012bb0:	9a02      	ldr	r2, [sp, #8]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6013      	str	r3, [r2, #0]
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	6123      	str	r3, [r4, #16]
 8012bba:	f8ca 3000 	str.w	r3, [sl]
 8012bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012bc0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8012bc4:	601c      	str	r4, [r3, #0]
 8012bc6:	e735      	b.n	8012a34 <__gethex+0x114>
 8012bc8:	1e69      	subs	r1, r5, #1
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f7fe fd0a 	bl	80115e4 <__any_on>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	d1ed      	bne.n	8012bb0 <__gethex+0x290>
 8012bd4:	4621      	mov	r1, r4
 8012bd6:	4648      	mov	r0, r9
 8012bd8:	f7fe f8b8 	bl	8010d4c <_Bfree>
 8012bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012bde:	2300      	movs	r3, #0
 8012be0:	6013      	str	r3, [r2, #0]
 8012be2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8012be6:	e725      	b.n	8012a34 <__gethex+0x114>
 8012be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d1f2      	bne.n	8012bd4 <__gethex+0x2b4>
 8012bee:	e7df      	b.n	8012bb0 <__gethex+0x290>
 8012bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d1dc      	bne.n	8012bb0 <__gethex+0x290>
 8012bf6:	e7ed      	b.n	8012bd4 <__gethex+0x2b4>
 8012bf8:	08013a1c 	.word	0x08013a1c
 8012bfc:	080138b1 	.word	0x080138b1
 8012c00:	08013bc6 	.word	0x08013bc6
 8012c04:	f106 38ff 	add.w	r8, r6, #4294967295
 8012c08:	f1bb 0f00 	cmp.w	fp, #0
 8012c0c:	d133      	bne.n	8012c76 <__gethex+0x356>
 8012c0e:	f1b8 0f00 	cmp.w	r8, #0
 8012c12:	d004      	beq.n	8012c1e <__gethex+0x2fe>
 8012c14:	4641      	mov	r1, r8
 8012c16:	4620      	mov	r0, r4
 8012c18:	f7fe fce4 	bl	80115e4 <__any_on>
 8012c1c:	4683      	mov	fp, r0
 8012c1e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8012c22:	2301      	movs	r3, #1
 8012c24:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012c28:	f008 081f 	and.w	r8, r8, #31
 8012c2c:	fa03 f308 	lsl.w	r3, r3, r8
 8012c30:	4213      	tst	r3, r2
 8012c32:	4631      	mov	r1, r6
 8012c34:	4620      	mov	r0, r4
 8012c36:	bf18      	it	ne
 8012c38:	f04b 0b02 	orrne.w	fp, fp, #2
 8012c3c:	1bad      	subs	r5, r5, r6
 8012c3e:	f7ff fe07 	bl	8012850 <rshift>
 8012c42:	687e      	ldr	r6, [r7, #4]
 8012c44:	f04f 0802 	mov.w	r8, #2
 8012c48:	f1bb 0f00 	cmp.w	fp, #0
 8012c4c:	d04a      	beq.n	8012ce4 <__gethex+0x3c4>
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	2b02      	cmp	r3, #2
 8012c52:	d016      	beq.n	8012c82 <__gethex+0x362>
 8012c54:	2b03      	cmp	r3, #3
 8012c56:	d018      	beq.n	8012c8a <__gethex+0x36a>
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d109      	bne.n	8012c70 <__gethex+0x350>
 8012c5c:	f01b 0f02 	tst.w	fp, #2
 8012c60:	d006      	beq.n	8012c70 <__gethex+0x350>
 8012c62:	f8da 3000 	ldr.w	r3, [sl]
 8012c66:	ea4b 0b03 	orr.w	fp, fp, r3
 8012c6a:	f01b 0f01 	tst.w	fp, #1
 8012c6e:	d10f      	bne.n	8012c90 <__gethex+0x370>
 8012c70:	f048 0810 	orr.w	r8, r8, #16
 8012c74:	e036      	b.n	8012ce4 <__gethex+0x3c4>
 8012c76:	f04f 0b01 	mov.w	fp, #1
 8012c7a:	e7d0      	b.n	8012c1e <__gethex+0x2fe>
 8012c7c:	f04f 0801 	mov.w	r8, #1
 8012c80:	e7e2      	b.n	8012c48 <__gethex+0x328>
 8012c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c84:	f1c3 0301 	rsb	r3, r3, #1
 8012c88:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d0ef      	beq.n	8012c70 <__gethex+0x350>
 8012c90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012c94:	f104 0214 	add.w	r2, r4, #20
 8012c98:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012c9c:	9301      	str	r3, [sp, #4]
 8012c9e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	4694      	mov	ip, r2
 8012ca6:	f852 1b04 	ldr.w	r1, [r2], #4
 8012caa:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012cae:	d01e      	beq.n	8012cee <__gethex+0x3ce>
 8012cb0:	3101      	adds	r1, #1
 8012cb2:	f8cc 1000 	str.w	r1, [ip]
 8012cb6:	f1b8 0f02 	cmp.w	r8, #2
 8012cba:	f104 0214 	add.w	r2, r4, #20
 8012cbe:	d13d      	bne.n	8012d3c <__gethex+0x41c>
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	3b01      	subs	r3, #1
 8012cc4:	42ab      	cmp	r3, r5
 8012cc6:	d10b      	bne.n	8012ce0 <__gethex+0x3c0>
 8012cc8:	1169      	asrs	r1, r5, #5
 8012cca:	2301      	movs	r3, #1
 8012ccc:	f005 051f 	and.w	r5, r5, #31
 8012cd0:	fa03 f505 	lsl.w	r5, r3, r5
 8012cd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012cd8:	421d      	tst	r5, r3
 8012cda:	bf18      	it	ne
 8012cdc:	f04f 0801 	movne.w	r8, #1
 8012ce0:	f048 0820 	orr.w	r8, r8, #32
 8012ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ce6:	601c      	str	r4, [r3, #0]
 8012ce8:	9b02      	ldr	r3, [sp, #8]
 8012cea:	601e      	str	r6, [r3, #0]
 8012cec:	e6a2      	b.n	8012a34 <__gethex+0x114>
 8012cee:	4290      	cmp	r0, r2
 8012cf0:	f842 3c04 	str.w	r3, [r2, #-4]
 8012cf4:	d8d6      	bhi.n	8012ca4 <__gethex+0x384>
 8012cf6:	68a2      	ldr	r2, [r4, #8]
 8012cf8:	4593      	cmp	fp, r2
 8012cfa:	db17      	blt.n	8012d2c <__gethex+0x40c>
 8012cfc:	6861      	ldr	r1, [r4, #4]
 8012cfe:	4648      	mov	r0, r9
 8012d00:	3101      	adds	r1, #1
 8012d02:	f7fd ffe3 	bl	8010ccc <_Balloc>
 8012d06:	4682      	mov	sl, r0
 8012d08:	b918      	cbnz	r0, 8012d12 <__gethex+0x3f2>
 8012d0a:	4b1b      	ldr	r3, [pc, #108]	; (8012d78 <__gethex+0x458>)
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	2184      	movs	r1, #132	; 0x84
 8012d10:	e6b3      	b.n	8012a7a <__gethex+0x15a>
 8012d12:	6922      	ldr	r2, [r4, #16]
 8012d14:	3202      	adds	r2, #2
 8012d16:	f104 010c 	add.w	r1, r4, #12
 8012d1a:	0092      	lsls	r2, r2, #2
 8012d1c:	300c      	adds	r0, #12
 8012d1e:	f7fd f847 	bl	800fdb0 <memcpy>
 8012d22:	4621      	mov	r1, r4
 8012d24:	4648      	mov	r0, r9
 8012d26:	f7fe f811 	bl	8010d4c <_Bfree>
 8012d2a:	4654      	mov	r4, sl
 8012d2c:	6922      	ldr	r2, [r4, #16]
 8012d2e:	1c51      	adds	r1, r2, #1
 8012d30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012d34:	6121      	str	r1, [r4, #16]
 8012d36:	2101      	movs	r1, #1
 8012d38:	6151      	str	r1, [r2, #20]
 8012d3a:	e7bc      	b.n	8012cb6 <__gethex+0x396>
 8012d3c:	6921      	ldr	r1, [r4, #16]
 8012d3e:	4559      	cmp	r1, fp
 8012d40:	dd0b      	ble.n	8012d5a <__gethex+0x43a>
 8012d42:	2101      	movs	r1, #1
 8012d44:	4620      	mov	r0, r4
 8012d46:	f7ff fd83 	bl	8012850 <rshift>
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	3601      	adds	r6, #1
 8012d4e:	42b3      	cmp	r3, r6
 8012d50:	f6ff aedb 	blt.w	8012b0a <__gethex+0x1ea>
 8012d54:	f04f 0801 	mov.w	r8, #1
 8012d58:	e7c2      	b.n	8012ce0 <__gethex+0x3c0>
 8012d5a:	f015 051f 	ands.w	r5, r5, #31
 8012d5e:	d0f9      	beq.n	8012d54 <__gethex+0x434>
 8012d60:	9b01      	ldr	r3, [sp, #4]
 8012d62:	441a      	add	r2, r3
 8012d64:	f1c5 0520 	rsb	r5, r5, #32
 8012d68:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012d6c:	f7fe f8a0 	bl	8010eb0 <__hi0bits>
 8012d70:	42a8      	cmp	r0, r5
 8012d72:	dbe6      	blt.n	8012d42 <__gethex+0x422>
 8012d74:	e7ee      	b.n	8012d54 <__gethex+0x434>
 8012d76:	bf00      	nop
 8012d78:	080138b1 	.word	0x080138b1

08012d7c <L_shift>:
 8012d7c:	f1c2 0208 	rsb	r2, r2, #8
 8012d80:	0092      	lsls	r2, r2, #2
 8012d82:	b570      	push	{r4, r5, r6, lr}
 8012d84:	f1c2 0620 	rsb	r6, r2, #32
 8012d88:	6843      	ldr	r3, [r0, #4]
 8012d8a:	6804      	ldr	r4, [r0, #0]
 8012d8c:	fa03 f506 	lsl.w	r5, r3, r6
 8012d90:	432c      	orrs	r4, r5
 8012d92:	40d3      	lsrs	r3, r2
 8012d94:	6004      	str	r4, [r0, #0]
 8012d96:	f840 3f04 	str.w	r3, [r0, #4]!
 8012d9a:	4288      	cmp	r0, r1
 8012d9c:	d3f4      	bcc.n	8012d88 <L_shift+0xc>
 8012d9e:	bd70      	pop	{r4, r5, r6, pc}

08012da0 <__match>:
 8012da0:	b530      	push	{r4, r5, lr}
 8012da2:	6803      	ldr	r3, [r0, #0]
 8012da4:	3301      	adds	r3, #1
 8012da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012daa:	b914      	cbnz	r4, 8012db2 <__match+0x12>
 8012dac:	6003      	str	r3, [r0, #0]
 8012dae:	2001      	movs	r0, #1
 8012db0:	bd30      	pop	{r4, r5, pc}
 8012db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012db6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012dba:	2d19      	cmp	r5, #25
 8012dbc:	bf98      	it	ls
 8012dbe:	3220      	addls	r2, #32
 8012dc0:	42a2      	cmp	r2, r4
 8012dc2:	d0f0      	beq.n	8012da6 <__match+0x6>
 8012dc4:	2000      	movs	r0, #0
 8012dc6:	e7f3      	b.n	8012db0 <__match+0x10>

08012dc8 <__hexnan>:
 8012dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dcc:	680b      	ldr	r3, [r1, #0]
 8012dce:	6801      	ldr	r1, [r0, #0]
 8012dd0:	115e      	asrs	r6, r3, #5
 8012dd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012dd6:	f013 031f 	ands.w	r3, r3, #31
 8012dda:	b087      	sub	sp, #28
 8012ddc:	bf18      	it	ne
 8012dde:	3604      	addne	r6, #4
 8012de0:	2500      	movs	r5, #0
 8012de2:	1f37      	subs	r7, r6, #4
 8012de4:	4682      	mov	sl, r0
 8012de6:	4690      	mov	r8, r2
 8012de8:	9301      	str	r3, [sp, #4]
 8012dea:	f846 5c04 	str.w	r5, [r6, #-4]
 8012dee:	46b9      	mov	r9, r7
 8012df0:	463c      	mov	r4, r7
 8012df2:	9502      	str	r5, [sp, #8]
 8012df4:	46ab      	mov	fp, r5
 8012df6:	784a      	ldrb	r2, [r1, #1]
 8012df8:	1c4b      	adds	r3, r1, #1
 8012dfa:	9303      	str	r3, [sp, #12]
 8012dfc:	b342      	cbz	r2, 8012e50 <__hexnan+0x88>
 8012dfe:	4610      	mov	r0, r2
 8012e00:	9105      	str	r1, [sp, #20]
 8012e02:	9204      	str	r2, [sp, #16]
 8012e04:	f7ff fd76 	bl	80128f4 <__hexdig_fun>
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	d14f      	bne.n	8012eac <__hexnan+0xe4>
 8012e0c:	9a04      	ldr	r2, [sp, #16]
 8012e0e:	9905      	ldr	r1, [sp, #20]
 8012e10:	2a20      	cmp	r2, #32
 8012e12:	d818      	bhi.n	8012e46 <__hexnan+0x7e>
 8012e14:	9b02      	ldr	r3, [sp, #8]
 8012e16:	459b      	cmp	fp, r3
 8012e18:	dd13      	ble.n	8012e42 <__hexnan+0x7a>
 8012e1a:	454c      	cmp	r4, r9
 8012e1c:	d206      	bcs.n	8012e2c <__hexnan+0x64>
 8012e1e:	2d07      	cmp	r5, #7
 8012e20:	dc04      	bgt.n	8012e2c <__hexnan+0x64>
 8012e22:	462a      	mov	r2, r5
 8012e24:	4649      	mov	r1, r9
 8012e26:	4620      	mov	r0, r4
 8012e28:	f7ff ffa8 	bl	8012d7c <L_shift>
 8012e2c:	4544      	cmp	r4, r8
 8012e2e:	d950      	bls.n	8012ed2 <__hexnan+0x10a>
 8012e30:	2300      	movs	r3, #0
 8012e32:	f1a4 0904 	sub.w	r9, r4, #4
 8012e36:	f844 3c04 	str.w	r3, [r4, #-4]
 8012e3a:	f8cd b008 	str.w	fp, [sp, #8]
 8012e3e:	464c      	mov	r4, r9
 8012e40:	461d      	mov	r5, r3
 8012e42:	9903      	ldr	r1, [sp, #12]
 8012e44:	e7d7      	b.n	8012df6 <__hexnan+0x2e>
 8012e46:	2a29      	cmp	r2, #41	; 0x29
 8012e48:	d155      	bne.n	8012ef6 <__hexnan+0x12e>
 8012e4a:	3102      	adds	r1, #2
 8012e4c:	f8ca 1000 	str.w	r1, [sl]
 8012e50:	f1bb 0f00 	cmp.w	fp, #0
 8012e54:	d04f      	beq.n	8012ef6 <__hexnan+0x12e>
 8012e56:	454c      	cmp	r4, r9
 8012e58:	d206      	bcs.n	8012e68 <__hexnan+0xa0>
 8012e5a:	2d07      	cmp	r5, #7
 8012e5c:	dc04      	bgt.n	8012e68 <__hexnan+0xa0>
 8012e5e:	462a      	mov	r2, r5
 8012e60:	4649      	mov	r1, r9
 8012e62:	4620      	mov	r0, r4
 8012e64:	f7ff ff8a 	bl	8012d7c <L_shift>
 8012e68:	4544      	cmp	r4, r8
 8012e6a:	d934      	bls.n	8012ed6 <__hexnan+0x10e>
 8012e6c:	f1a8 0204 	sub.w	r2, r8, #4
 8012e70:	4623      	mov	r3, r4
 8012e72:	f853 1b04 	ldr.w	r1, [r3], #4
 8012e76:	f842 1f04 	str.w	r1, [r2, #4]!
 8012e7a:	429f      	cmp	r7, r3
 8012e7c:	d2f9      	bcs.n	8012e72 <__hexnan+0xaa>
 8012e7e:	1b3b      	subs	r3, r7, r4
 8012e80:	f023 0303 	bic.w	r3, r3, #3
 8012e84:	3304      	adds	r3, #4
 8012e86:	3e03      	subs	r6, #3
 8012e88:	3401      	adds	r4, #1
 8012e8a:	42a6      	cmp	r6, r4
 8012e8c:	bf38      	it	cc
 8012e8e:	2304      	movcc	r3, #4
 8012e90:	4443      	add	r3, r8
 8012e92:	2200      	movs	r2, #0
 8012e94:	f843 2b04 	str.w	r2, [r3], #4
 8012e98:	429f      	cmp	r7, r3
 8012e9a:	d2fb      	bcs.n	8012e94 <__hexnan+0xcc>
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	b91b      	cbnz	r3, 8012ea8 <__hexnan+0xe0>
 8012ea0:	4547      	cmp	r7, r8
 8012ea2:	d126      	bne.n	8012ef2 <__hexnan+0x12a>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	603b      	str	r3, [r7, #0]
 8012ea8:	2005      	movs	r0, #5
 8012eaa:	e025      	b.n	8012ef8 <__hexnan+0x130>
 8012eac:	3501      	adds	r5, #1
 8012eae:	2d08      	cmp	r5, #8
 8012eb0:	f10b 0b01 	add.w	fp, fp, #1
 8012eb4:	dd06      	ble.n	8012ec4 <__hexnan+0xfc>
 8012eb6:	4544      	cmp	r4, r8
 8012eb8:	d9c3      	bls.n	8012e42 <__hexnan+0x7a>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ec0:	2501      	movs	r5, #1
 8012ec2:	3c04      	subs	r4, #4
 8012ec4:	6822      	ldr	r2, [r4, #0]
 8012ec6:	f000 000f 	and.w	r0, r0, #15
 8012eca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012ece:	6020      	str	r0, [r4, #0]
 8012ed0:	e7b7      	b.n	8012e42 <__hexnan+0x7a>
 8012ed2:	2508      	movs	r5, #8
 8012ed4:	e7b5      	b.n	8012e42 <__hexnan+0x7a>
 8012ed6:	9b01      	ldr	r3, [sp, #4]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d0df      	beq.n	8012e9c <__hexnan+0xd4>
 8012edc:	f1c3 0320 	rsb	r3, r3, #32
 8012ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ee4:	40da      	lsrs	r2, r3
 8012ee6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012eea:	4013      	ands	r3, r2
 8012eec:	f846 3c04 	str.w	r3, [r6, #-4]
 8012ef0:	e7d4      	b.n	8012e9c <__hexnan+0xd4>
 8012ef2:	3f04      	subs	r7, #4
 8012ef4:	e7d2      	b.n	8012e9c <__hexnan+0xd4>
 8012ef6:	2004      	movs	r0, #4
 8012ef8:	b007      	add	sp, #28
 8012efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012efe <__ascii_mbtowc>:
 8012efe:	b082      	sub	sp, #8
 8012f00:	b901      	cbnz	r1, 8012f04 <__ascii_mbtowc+0x6>
 8012f02:	a901      	add	r1, sp, #4
 8012f04:	b142      	cbz	r2, 8012f18 <__ascii_mbtowc+0x1a>
 8012f06:	b14b      	cbz	r3, 8012f1c <__ascii_mbtowc+0x1e>
 8012f08:	7813      	ldrb	r3, [r2, #0]
 8012f0a:	600b      	str	r3, [r1, #0]
 8012f0c:	7812      	ldrb	r2, [r2, #0]
 8012f0e:	1e10      	subs	r0, r2, #0
 8012f10:	bf18      	it	ne
 8012f12:	2001      	movne	r0, #1
 8012f14:	b002      	add	sp, #8
 8012f16:	4770      	bx	lr
 8012f18:	4610      	mov	r0, r2
 8012f1a:	e7fb      	b.n	8012f14 <__ascii_mbtowc+0x16>
 8012f1c:	f06f 0001 	mvn.w	r0, #1
 8012f20:	e7f8      	b.n	8012f14 <__ascii_mbtowc+0x16>

08012f22 <_realloc_r>:
 8012f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f26:	4680      	mov	r8, r0
 8012f28:	4614      	mov	r4, r2
 8012f2a:	460e      	mov	r6, r1
 8012f2c:	b921      	cbnz	r1, 8012f38 <_realloc_r+0x16>
 8012f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f32:	4611      	mov	r1, r2
 8012f34:	f7fd be3e 	b.w	8010bb4 <_malloc_r>
 8012f38:	b92a      	cbnz	r2, 8012f46 <_realloc_r+0x24>
 8012f3a:	f7fd fdc7 	bl	8010acc <_free_r>
 8012f3e:	4625      	mov	r5, r4
 8012f40:	4628      	mov	r0, r5
 8012f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f46:	f000 f842 	bl	8012fce <_malloc_usable_size_r>
 8012f4a:	4284      	cmp	r4, r0
 8012f4c:	4607      	mov	r7, r0
 8012f4e:	d802      	bhi.n	8012f56 <_realloc_r+0x34>
 8012f50:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012f54:	d812      	bhi.n	8012f7c <_realloc_r+0x5a>
 8012f56:	4621      	mov	r1, r4
 8012f58:	4640      	mov	r0, r8
 8012f5a:	f7fd fe2b 	bl	8010bb4 <_malloc_r>
 8012f5e:	4605      	mov	r5, r0
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d0ed      	beq.n	8012f40 <_realloc_r+0x1e>
 8012f64:	42bc      	cmp	r4, r7
 8012f66:	4622      	mov	r2, r4
 8012f68:	4631      	mov	r1, r6
 8012f6a:	bf28      	it	cs
 8012f6c:	463a      	movcs	r2, r7
 8012f6e:	f7fc ff1f 	bl	800fdb0 <memcpy>
 8012f72:	4631      	mov	r1, r6
 8012f74:	4640      	mov	r0, r8
 8012f76:	f7fd fda9 	bl	8010acc <_free_r>
 8012f7a:	e7e1      	b.n	8012f40 <_realloc_r+0x1e>
 8012f7c:	4635      	mov	r5, r6
 8012f7e:	e7df      	b.n	8012f40 <_realloc_r+0x1e>

08012f80 <__ascii_wctomb>:
 8012f80:	b149      	cbz	r1, 8012f96 <__ascii_wctomb+0x16>
 8012f82:	2aff      	cmp	r2, #255	; 0xff
 8012f84:	bf85      	ittet	hi
 8012f86:	238a      	movhi	r3, #138	; 0x8a
 8012f88:	6003      	strhi	r3, [r0, #0]
 8012f8a:	700a      	strbls	r2, [r1, #0]
 8012f8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012f90:	bf98      	it	ls
 8012f92:	2001      	movls	r0, #1
 8012f94:	4770      	bx	lr
 8012f96:	4608      	mov	r0, r1
 8012f98:	4770      	bx	lr
	...

08012f9c <fiprintf>:
 8012f9c:	b40e      	push	{r1, r2, r3}
 8012f9e:	b503      	push	{r0, r1, lr}
 8012fa0:	4601      	mov	r1, r0
 8012fa2:	ab03      	add	r3, sp, #12
 8012fa4:	4805      	ldr	r0, [pc, #20]	; (8012fbc <fiprintf+0x20>)
 8012fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012faa:	6800      	ldr	r0, [r0, #0]
 8012fac:	9301      	str	r3, [sp, #4]
 8012fae:	f000 f83f 	bl	8013030 <_vfiprintf_r>
 8012fb2:	b002      	add	sp, #8
 8012fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fb8:	b003      	add	sp, #12
 8012fba:	4770      	bx	lr
 8012fbc:	20000164 	.word	0x20000164

08012fc0 <abort>:
 8012fc0:	b508      	push	{r3, lr}
 8012fc2:	2006      	movs	r0, #6
 8012fc4:	f000 fa0c 	bl	80133e0 <raise>
 8012fc8:	2001      	movs	r0, #1
 8012fca:	f7f0 f90b 	bl	80031e4 <_exit>

08012fce <_malloc_usable_size_r>:
 8012fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fd2:	1f18      	subs	r0, r3, #4
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	bfbc      	itt	lt
 8012fd8:	580b      	ldrlt	r3, [r1, r0]
 8012fda:	18c0      	addlt	r0, r0, r3
 8012fdc:	4770      	bx	lr

08012fde <__sfputc_r>:
 8012fde:	6893      	ldr	r3, [r2, #8]
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	b410      	push	{r4}
 8012fe6:	6093      	str	r3, [r2, #8]
 8012fe8:	da08      	bge.n	8012ffc <__sfputc_r+0x1e>
 8012fea:	6994      	ldr	r4, [r2, #24]
 8012fec:	42a3      	cmp	r3, r4
 8012fee:	db01      	blt.n	8012ff4 <__sfputc_r+0x16>
 8012ff0:	290a      	cmp	r1, #10
 8012ff2:	d103      	bne.n	8012ffc <__sfputc_r+0x1e>
 8012ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ff8:	f000 b934 	b.w	8013264 <__swbuf_r>
 8012ffc:	6813      	ldr	r3, [r2, #0]
 8012ffe:	1c58      	adds	r0, r3, #1
 8013000:	6010      	str	r0, [r2, #0]
 8013002:	7019      	strb	r1, [r3, #0]
 8013004:	4608      	mov	r0, r1
 8013006:	f85d 4b04 	ldr.w	r4, [sp], #4
 801300a:	4770      	bx	lr

0801300c <__sfputs_r>:
 801300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300e:	4606      	mov	r6, r0
 8013010:	460f      	mov	r7, r1
 8013012:	4614      	mov	r4, r2
 8013014:	18d5      	adds	r5, r2, r3
 8013016:	42ac      	cmp	r4, r5
 8013018:	d101      	bne.n	801301e <__sfputs_r+0x12>
 801301a:	2000      	movs	r0, #0
 801301c:	e007      	b.n	801302e <__sfputs_r+0x22>
 801301e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013022:	463a      	mov	r2, r7
 8013024:	4630      	mov	r0, r6
 8013026:	f7ff ffda 	bl	8012fde <__sfputc_r>
 801302a:	1c43      	adds	r3, r0, #1
 801302c:	d1f3      	bne.n	8013016 <__sfputs_r+0xa>
 801302e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013030 <_vfiprintf_r>:
 8013030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013034:	460d      	mov	r5, r1
 8013036:	b09d      	sub	sp, #116	; 0x74
 8013038:	4614      	mov	r4, r2
 801303a:	4698      	mov	r8, r3
 801303c:	4606      	mov	r6, r0
 801303e:	b118      	cbz	r0, 8013048 <_vfiprintf_r+0x18>
 8013040:	6a03      	ldr	r3, [r0, #32]
 8013042:	b90b      	cbnz	r3, 8013048 <_vfiprintf_r+0x18>
 8013044:	f7fc fd9c 	bl	800fb80 <__sinit>
 8013048:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801304a:	07d9      	lsls	r1, r3, #31
 801304c:	d405      	bmi.n	801305a <_vfiprintf_r+0x2a>
 801304e:	89ab      	ldrh	r3, [r5, #12]
 8013050:	059a      	lsls	r2, r3, #22
 8013052:	d402      	bmi.n	801305a <_vfiprintf_r+0x2a>
 8013054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013056:	f7fc fea9 	bl	800fdac <__retarget_lock_acquire_recursive>
 801305a:	89ab      	ldrh	r3, [r5, #12]
 801305c:	071b      	lsls	r3, r3, #28
 801305e:	d501      	bpl.n	8013064 <_vfiprintf_r+0x34>
 8013060:	692b      	ldr	r3, [r5, #16]
 8013062:	b99b      	cbnz	r3, 801308c <_vfiprintf_r+0x5c>
 8013064:	4629      	mov	r1, r5
 8013066:	4630      	mov	r0, r6
 8013068:	f000 f93a 	bl	80132e0 <__swsetup_r>
 801306c:	b170      	cbz	r0, 801308c <_vfiprintf_r+0x5c>
 801306e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013070:	07dc      	lsls	r4, r3, #31
 8013072:	d504      	bpl.n	801307e <_vfiprintf_r+0x4e>
 8013074:	f04f 30ff 	mov.w	r0, #4294967295
 8013078:	b01d      	add	sp, #116	; 0x74
 801307a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801307e:	89ab      	ldrh	r3, [r5, #12]
 8013080:	0598      	lsls	r0, r3, #22
 8013082:	d4f7      	bmi.n	8013074 <_vfiprintf_r+0x44>
 8013084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013086:	f7fc fe92 	bl	800fdae <__retarget_lock_release_recursive>
 801308a:	e7f3      	b.n	8013074 <_vfiprintf_r+0x44>
 801308c:	2300      	movs	r3, #0
 801308e:	9309      	str	r3, [sp, #36]	; 0x24
 8013090:	2320      	movs	r3, #32
 8013092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013096:	f8cd 800c 	str.w	r8, [sp, #12]
 801309a:	2330      	movs	r3, #48	; 0x30
 801309c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013250 <_vfiprintf_r+0x220>
 80130a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130a4:	f04f 0901 	mov.w	r9, #1
 80130a8:	4623      	mov	r3, r4
 80130aa:	469a      	mov	sl, r3
 80130ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130b0:	b10a      	cbz	r2, 80130b6 <_vfiprintf_r+0x86>
 80130b2:	2a25      	cmp	r2, #37	; 0x25
 80130b4:	d1f9      	bne.n	80130aa <_vfiprintf_r+0x7a>
 80130b6:	ebba 0b04 	subs.w	fp, sl, r4
 80130ba:	d00b      	beq.n	80130d4 <_vfiprintf_r+0xa4>
 80130bc:	465b      	mov	r3, fp
 80130be:	4622      	mov	r2, r4
 80130c0:	4629      	mov	r1, r5
 80130c2:	4630      	mov	r0, r6
 80130c4:	f7ff ffa2 	bl	801300c <__sfputs_r>
 80130c8:	3001      	adds	r0, #1
 80130ca:	f000 80a9 	beq.w	8013220 <_vfiprintf_r+0x1f0>
 80130ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130d0:	445a      	add	r2, fp
 80130d2:	9209      	str	r2, [sp, #36]	; 0x24
 80130d4:	f89a 3000 	ldrb.w	r3, [sl]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	f000 80a1 	beq.w	8013220 <_vfiprintf_r+0x1f0>
 80130de:	2300      	movs	r3, #0
 80130e0:	f04f 32ff 	mov.w	r2, #4294967295
 80130e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130e8:	f10a 0a01 	add.w	sl, sl, #1
 80130ec:	9304      	str	r3, [sp, #16]
 80130ee:	9307      	str	r3, [sp, #28]
 80130f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130f4:	931a      	str	r3, [sp, #104]	; 0x68
 80130f6:	4654      	mov	r4, sl
 80130f8:	2205      	movs	r2, #5
 80130fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130fe:	4854      	ldr	r0, [pc, #336]	; (8013250 <_vfiprintf_r+0x220>)
 8013100:	f7ed f866 	bl	80001d0 <memchr>
 8013104:	9a04      	ldr	r2, [sp, #16]
 8013106:	b9d8      	cbnz	r0, 8013140 <_vfiprintf_r+0x110>
 8013108:	06d1      	lsls	r1, r2, #27
 801310a:	bf44      	itt	mi
 801310c:	2320      	movmi	r3, #32
 801310e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013112:	0713      	lsls	r3, r2, #28
 8013114:	bf44      	itt	mi
 8013116:	232b      	movmi	r3, #43	; 0x2b
 8013118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801311c:	f89a 3000 	ldrb.w	r3, [sl]
 8013120:	2b2a      	cmp	r3, #42	; 0x2a
 8013122:	d015      	beq.n	8013150 <_vfiprintf_r+0x120>
 8013124:	9a07      	ldr	r2, [sp, #28]
 8013126:	4654      	mov	r4, sl
 8013128:	2000      	movs	r0, #0
 801312a:	f04f 0c0a 	mov.w	ip, #10
 801312e:	4621      	mov	r1, r4
 8013130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013134:	3b30      	subs	r3, #48	; 0x30
 8013136:	2b09      	cmp	r3, #9
 8013138:	d94d      	bls.n	80131d6 <_vfiprintf_r+0x1a6>
 801313a:	b1b0      	cbz	r0, 801316a <_vfiprintf_r+0x13a>
 801313c:	9207      	str	r2, [sp, #28]
 801313e:	e014      	b.n	801316a <_vfiprintf_r+0x13a>
 8013140:	eba0 0308 	sub.w	r3, r0, r8
 8013144:	fa09 f303 	lsl.w	r3, r9, r3
 8013148:	4313      	orrs	r3, r2
 801314a:	9304      	str	r3, [sp, #16]
 801314c:	46a2      	mov	sl, r4
 801314e:	e7d2      	b.n	80130f6 <_vfiprintf_r+0xc6>
 8013150:	9b03      	ldr	r3, [sp, #12]
 8013152:	1d19      	adds	r1, r3, #4
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	9103      	str	r1, [sp, #12]
 8013158:	2b00      	cmp	r3, #0
 801315a:	bfbb      	ittet	lt
 801315c:	425b      	neglt	r3, r3
 801315e:	f042 0202 	orrlt.w	r2, r2, #2
 8013162:	9307      	strge	r3, [sp, #28]
 8013164:	9307      	strlt	r3, [sp, #28]
 8013166:	bfb8      	it	lt
 8013168:	9204      	strlt	r2, [sp, #16]
 801316a:	7823      	ldrb	r3, [r4, #0]
 801316c:	2b2e      	cmp	r3, #46	; 0x2e
 801316e:	d10c      	bne.n	801318a <_vfiprintf_r+0x15a>
 8013170:	7863      	ldrb	r3, [r4, #1]
 8013172:	2b2a      	cmp	r3, #42	; 0x2a
 8013174:	d134      	bne.n	80131e0 <_vfiprintf_r+0x1b0>
 8013176:	9b03      	ldr	r3, [sp, #12]
 8013178:	1d1a      	adds	r2, r3, #4
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	9203      	str	r2, [sp, #12]
 801317e:	2b00      	cmp	r3, #0
 8013180:	bfb8      	it	lt
 8013182:	f04f 33ff 	movlt.w	r3, #4294967295
 8013186:	3402      	adds	r4, #2
 8013188:	9305      	str	r3, [sp, #20]
 801318a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013260 <_vfiprintf_r+0x230>
 801318e:	7821      	ldrb	r1, [r4, #0]
 8013190:	2203      	movs	r2, #3
 8013192:	4650      	mov	r0, sl
 8013194:	f7ed f81c 	bl	80001d0 <memchr>
 8013198:	b138      	cbz	r0, 80131aa <_vfiprintf_r+0x17a>
 801319a:	9b04      	ldr	r3, [sp, #16]
 801319c:	eba0 000a 	sub.w	r0, r0, sl
 80131a0:	2240      	movs	r2, #64	; 0x40
 80131a2:	4082      	lsls	r2, r0
 80131a4:	4313      	orrs	r3, r2
 80131a6:	3401      	adds	r4, #1
 80131a8:	9304      	str	r3, [sp, #16]
 80131aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ae:	4829      	ldr	r0, [pc, #164]	; (8013254 <_vfiprintf_r+0x224>)
 80131b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131b4:	2206      	movs	r2, #6
 80131b6:	f7ed f80b 	bl	80001d0 <memchr>
 80131ba:	2800      	cmp	r0, #0
 80131bc:	d03f      	beq.n	801323e <_vfiprintf_r+0x20e>
 80131be:	4b26      	ldr	r3, [pc, #152]	; (8013258 <_vfiprintf_r+0x228>)
 80131c0:	bb1b      	cbnz	r3, 801320a <_vfiprintf_r+0x1da>
 80131c2:	9b03      	ldr	r3, [sp, #12]
 80131c4:	3307      	adds	r3, #7
 80131c6:	f023 0307 	bic.w	r3, r3, #7
 80131ca:	3308      	adds	r3, #8
 80131cc:	9303      	str	r3, [sp, #12]
 80131ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131d0:	443b      	add	r3, r7
 80131d2:	9309      	str	r3, [sp, #36]	; 0x24
 80131d4:	e768      	b.n	80130a8 <_vfiprintf_r+0x78>
 80131d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80131da:	460c      	mov	r4, r1
 80131dc:	2001      	movs	r0, #1
 80131de:	e7a6      	b.n	801312e <_vfiprintf_r+0xfe>
 80131e0:	2300      	movs	r3, #0
 80131e2:	3401      	adds	r4, #1
 80131e4:	9305      	str	r3, [sp, #20]
 80131e6:	4619      	mov	r1, r3
 80131e8:	f04f 0c0a 	mov.w	ip, #10
 80131ec:	4620      	mov	r0, r4
 80131ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131f2:	3a30      	subs	r2, #48	; 0x30
 80131f4:	2a09      	cmp	r2, #9
 80131f6:	d903      	bls.n	8013200 <_vfiprintf_r+0x1d0>
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d0c6      	beq.n	801318a <_vfiprintf_r+0x15a>
 80131fc:	9105      	str	r1, [sp, #20]
 80131fe:	e7c4      	b.n	801318a <_vfiprintf_r+0x15a>
 8013200:	fb0c 2101 	mla	r1, ip, r1, r2
 8013204:	4604      	mov	r4, r0
 8013206:	2301      	movs	r3, #1
 8013208:	e7f0      	b.n	80131ec <_vfiprintf_r+0x1bc>
 801320a:	ab03      	add	r3, sp, #12
 801320c:	9300      	str	r3, [sp, #0]
 801320e:	462a      	mov	r2, r5
 8013210:	4b12      	ldr	r3, [pc, #72]	; (801325c <_vfiprintf_r+0x22c>)
 8013212:	a904      	add	r1, sp, #16
 8013214:	4630      	mov	r0, r6
 8013216:	f7fb fe63 	bl	800eee0 <_printf_float>
 801321a:	4607      	mov	r7, r0
 801321c:	1c78      	adds	r0, r7, #1
 801321e:	d1d6      	bne.n	80131ce <_vfiprintf_r+0x19e>
 8013220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013222:	07d9      	lsls	r1, r3, #31
 8013224:	d405      	bmi.n	8013232 <_vfiprintf_r+0x202>
 8013226:	89ab      	ldrh	r3, [r5, #12]
 8013228:	059a      	lsls	r2, r3, #22
 801322a:	d402      	bmi.n	8013232 <_vfiprintf_r+0x202>
 801322c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801322e:	f7fc fdbe 	bl	800fdae <__retarget_lock_release_recursive>
 8013232:	89ab      	ldrh	r3, [r5, #12]
 8013234:	065b      	lsls	r3, r3, #25
 8013236:	f53f af1d 	bmi.w	8013074 <_vfiprintf_r+0x44>
 801323a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801323c:	e71c      	b.n	8013078 <_vfiprintf_r+0x48>
 801323e:	ab03      	add	r3, sp, #12
 8013240:	9300      	str	r3, [sp, #0]
 8013242:	462a      	mov	r2, r5
 8013244:	4b05      	ldr	r3, [pc, #20]	; (801325c <_vfiprintf_r+0x22c>)
 8013246:	a904      	add	r1, sp, #16
 8013248:	4630      	mov	r0, r6
 801324a:	f7fc f8ed 	bl	800f428 <_printf_i>
 801324e:	e7e4      	b.n	801321a <_vfiprintf_r+0x1ea>
 8013250:	08013b71 	.word	0x08013b71
 8013254:	08013b7b 	.word	0x08013b7b
 8013258:	0800eee1 	.word	0x0800eee1
 801325c:	0801300d 	.word	0x0801300d
 8013260:	08013b77 	.word	0x08013b77

08013264 <__swbuf_r>:
 8013264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013266:	460e      	mov	r6, r1
 8013268:	4614      	mov	r4, r2
 801326a:	4605      	mov	r5, r0
 801326c:	b118      	cbz	r0, 8013276 <__swbuf_r+0x12>
 801326e:	6a03      	ldr	r3, [r0, #32]
 8013270:	b90b      	cbnz	r3, 8013276 <__swbuf_r+0x12>
 8013272:	f7fc fc85 	bl	800fb80 <__sinit>
 8013276:	69a3      	ldr	r3, [r4, #24]
 8013278:	60a3      	str	r3, [r4, #8]
 801327a:	89a3      	ldrh	r3, [r4, #12]
 801327c:	071a      	lsls	r2, r3, #28
 801327e:	d525      	bpl.n	80132cc <__swbuf_r+0x68>
 8013280:	6923      	ldr	r3, [r4, #16]
 8013282:	b31b      	cbz	r3, 80132cc <__swbuf_r+0x68>
 8013284:	6823      	ldr	r3, [r4, #0]
 8013286:	6922      	ldr	r2, [r4, #16]
 8013288:	1a98      	subs	r0, r3, r2
 801328a:	6963      	ldr	r3, [r4, #20]
 801328c:	b2f6      	uxtb	r6, r6
 801328e:	4283      	cmp	r3, r0
 8013290:	4637      	mov	r7, r6
 8013292:	dc04      	bgt.n	801329e <__swbuf_r+0x3a>
 8013294:	4621      	mov	r1, r4
 8013296:	4628      	mov	r0, r5
 8013298:	f7ff fa3a 	bl	8012710 <_fflush_r>
 801329c:	b9e0      	cbnz	r0, 80132d8 <__swbuf_r+0x74>
 801329e:	68a3      	ldr	r3, [r4, #8]
 80132a0:	3b01      	subs	r3, #1
 80132a2:	60a3      	str	r3, [r4, #8]
 80132a4:	6823      	ldr	r3, [r4, #0]
 80132a6:	1c5a      	adds	r2, r3, #1
 80132a8:	6022      	str	r2, [r4, #0]
 80132aa:	701e      	strb	r6, [r3, #0]
 80132ac:	6962      	ldr	r2, [r4, #20]
 80132ae:	1c43      	adds	r3, r0, #1
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d004      	beq.n	80132be <__swbuf_r+0x5a>
 80132b4:	89a3      	ldrh	r3, [r4, #12]
 80132b6:	07db      	lsls	r3, r3, #31
 80132b8:	d506      	bpl.n	80132c8 <__swbuf_r+0x64>
 80132ba:	2e0a      	cmp	r6, #10
 80132bc:	d104      	bne.n	80132c8 <__swbuf_r+0x64>
 80132be:	4621      	mov	r1, r4
 80132c0:	4628      	mov	r0, r5
 80132c2:	f7ff fa25 	bl	8012710 <_fflush_r>
 80132c6:	b938      	cbnz	r0, 80132d8 <__swbuf_r+0x74>
 80132c8:	4638      	mov	r0, r7
 80132ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132cc:	4621      	mov	r1, r4
 80132ce:	4628      	mov	r0, r5
 80132d0:	f000 f806 	bl	80132e0 <__swsetup_r>
 80132d4:	2800      	cmp	r0, #0
 80132d6:	d0d5      	beq.n	8013284 <__swbuf_r+0x20>
 80132d8:	f04f 37ff 	mov.w	r7, #4294967295
 80132dc:	e7f4      	b.n	80132c8 <__swbuf_r+0x64>
	...

080132e0 <__swsetup_r>:
 80132e0:	b538      	push	{r3, r4, r5, lr}
 80132e2:	4b2a      	ldr	r3, [pc, #168]	; (801338c <__swsetup_r+0xac>)
 80132e4:	4605      	mov	r5, r0
 80132e6:	6818      	ldr	r0, [r3, #0]
 80132e8:	460c      	mov	r4, r1
 80132ea:	b118      	cbz	r0, 80132f4 <__swsetup_r+0x14>
 80132ec:	6a03      	ldr	r3, [r0, #32]
 80132ee:	b90b      	cbnz	r3, 80132f4 <__swsetup_r+0x14>
 80132f0:	f7fc fc46 	bl	800fb80 <__sinit>
 80132f4:	89a3      	ldrh	r3, [r4, #12]
 80132f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132fa:	0718      	lsls	r0, r3, #28
 80132fc:	d422      	bmi.n	8013344 <__swsetup_r+0x64>
 80132fe:	06d9      	lsls	r1, r3, #27
 8013300:	d407      	bmi.n	8013312 <__swsetup_r+0x32>
 8013302:	2309      	movs	r3, #9
 8013304:	602b      	str	r3, [r5, #0]
 8013306:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801330a:	81a3      	strh	r3, [r4, #12]
 801330c:	f04f 30ff 	mov.w	r0, #4294967295
 8013310:	e034      	b.n	801337c <__swsetup_r+0x9c>
 8013312:	0758      	lsls	r0, r3, #29
 8013314:	d512      	bpl.n	801333c <__swsetup_r+0x5c>
 8013316:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013318:	b141      	cbz	r1, 801332c <__swsetup_r+0x4c>
 801331a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801331e:	4299      	cmp	r1, r3
 8013320:	d002      	beq.n	8013328 <__swsetup_r+0x48>
 8013322:	4628      	mov	r0, r5
 8013324:	f7fd fbd2 	bl	8010acc <_free_r>
 8013328:	2300      	movs	r3, #0
 801332a:	6363      	str	r3, [r4, #52]	; 0x34
 801332c:	89a3      	ldrh	r3, [r4, #12]
 801332e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013332:	81a3      	strh	r3, [r4, #12]
 8013334:	2300      	movs	r3, #0
 8013336:	6063      	str	r3, [r4, #4]
 8013338:	6923      	ldr	r3, [r4, #16]
 801333a:	6023      	str	r3, [r4, #0]
 801333c:	89a3      	ldrh	r3, [r4, #12]
 801333e:	f043 0308 	orr.w	r3, r3, #8
 8013342:	81a3      	strh	r3, [r4, #12]
 8013344:	6923      	ldr	r3, [r4, #16]
 8013346:	b94b      	cbnz	r3, 801335c <__swsetup_r+0x7c>
 8013348:	89a3      	ldrh	r3, [r4, #12]
 801334a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801334e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013352:	d003      	beq.n	801335c <__swsetup_r+0x7c>
 8013354:	4621      	mov	r1, r4
 8013356:	4628      	mov	r0, r5
 8013358:	f000 f884 	bl	8013464 <__smakebuf_r>
 801335c:	89a0      	ldrh	r0, [r4, #12]
 801335e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013362:	f010 0301 	ands.w	r3, r0, #1
 8013366:	d00a      	beq.n	801337e <__swsetup_r+0x9e>
 8013368:	2300      	movs	r3, #0
 801336a:	60a3      	str	r3, [r4, #8]
 801336c:	6963      	ldr	r3, [r4, #20]
 801336e:	425b      	negs	r3, r3
 8013370:	61a3      	str	r3, [r4, #24]
 8013372:	6923      	ldr	r3, [r4, #16]
 8013374:	b943      	cbnz	r3, 8013388 <__swsetup_r+0xa8>
 8013376:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801337a:	d1c4      	bne.n	8013306 <__swsetup_r+0x26>
 801337c:	bd38      	pop	{r3, r4, r5, pc}
 801337e:	0781      	lsls	r1, r0, #30
 8013380:	bf58      	it	pl
 8013382:	6963      	ldrpl	r3, [r4, #20]
 8013384:	60a3      	str	r3, [r4, #8]
 8013386:	e7f4      	b.n	8013372 <__swsetup_r+0x92>
 8013388:	2000      	movs	r0, #0
 801338a:	e7f7      	b.n	801337c <__swsetup_r+0x9c>
 801338c:	20000164 	.word	0x20000164

08013390 <_raise_r>:
 8013390:	291f      	cmp	r1, #31
 8013392:	b538      	push	{r3, r4, r5, lr}
 8013394:	4604      	mov	r4, r0
 8013396:	460d      	mov	r5, r1
 8013398:	d904      	bls.n	80133a4 <_raise_r+0x14>
 801339a:	2316      	movs	r3, #22
 801339c:	6003      	str	r3, [r0, #0]
 801339e:	f04f 30ff 	mov.w	r0, #4294967295
 80133a2:	bd38      	pop	{r3, r4, r5, pc}
 80133a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80133a6:	b112      	cbz	r2, 80133ae <_raise_r+0x1e>
 80133a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133ac:	b94b      	cbnz	r3, 80133c2 <_raise_r+0x32>
 80133ae:	4620      	mov	r0, r4
 80133b0:	f000 f830 	bl	8013414 <_getpid_r>
 80133b4:	462a      	mov	r2, r5
 80133b6:	4601      	mov	r1, r0
 80133b8:	4620      	mov	r0, r4
 80133ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133be:	f000 b817 	b.w	80133f0 <_kill_r>
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d00a      	beq.n	80133dc <_raise_r+0x4c>
 80133c6:	1c59      	adds	r1, r3, #1
 80133c8:	d103      	bne.n	80133d2 <_raise_r+0x42>
 80133ca:	2316      	movs	r3, #22
 80133cc:	6003      	str	r3, [r0, #0]
 80133ce:	2001      	movs	r0, #1
 80133d0:	e7e7      	b.n	80133a2 <_raise_r+0x12>
 80133d2:	2400      	movs	r4, #0
 80133d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133d8:	4628      	mov	r0, r5
 80133da:	4798      	blx	r3
 80133dc:	2000      	movs	r0, #0
 80133de:	e7e0      	b.n	80133a2 <_raise_r+0x12>

080133e0 <raise>:
 80133e0:	4b02      	ldr	r3, [pc, #8]	; (80133ec <raise+0xc>)
 80133e2:	4601      	mov	r1, r0
 80133e4:	6818      	ldr	r0, [r3, #0]
 80133e6:	f7ff bfd3 	b.w	8013390 <_raise_r>
 80133ea:	bf00      	nop
 80133ec:	20000164 	.word	0x20000164

080133f0 <_kill_r>:
 80133f0:	b538      	push	{r3, r4, r5, lr}
 80133f2:	4d07      	ldr	r5, [pc, #28]	; (8013410 <_kill_r+0x20>)
 80133f4:	2300      	movs	r3, #0
 80133f6:	4604      	mov	r4, r0
 80133f8:	4608      	mov	r0, r1
 80133fa:	4611      	mov	r1, r2
 80133fc:	602b      	str	r3, [r5, #0]
 80133fe:	f7ef fee1 	bl	80031c4 <_kill>
 8013402:	1c43      	adds	r3, r0, #1
 8013404:	d102      	bne.n	801340c <_kill_r+0x1c>
 8013406:	682b      	ldr	r3, [r5, #0]
 8013408:	b103      	cbz	r3, 801340c <_kill_r+0x1c>
 801340a:	6023      	str	r3, [r4, #0]
 801340c:	bd38      	pop	{r3, r4, r5, pc}
 801340e:	bf00      	nop
 8013410:	20003b74 	.word	0x20003b74

08013414 <_getpid_r>:
 8013414:	f7ef bece 	b.w	80031b4 <_getpid>

08013418 <__swhatbuf_r>:
 8013418:	b570      	push	{r4, r5, r6, lr}
 801341a:	460c      	mov	r4, r1
 801341c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013420:	2900      	cmp	r1, #0
 8013422:	b096      	sub	sp, #88	; 0x58
 8013424:	4615      	mov	r5, r2
 8013426:	461e      	mov	r6, r3
 8013428:	da0d      	bge.n	8013446 <__swhatbuf_r+0x2e>
 801342a:	89a3      	ldrh	r3, [r4, #12]
 801342c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013430:	f04f 0100 	mov.w	r1, #0
 8013434:	bf0c      	ite	eq
 8013436:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801343a:	2340      	movne	r3, #64	; 0x40
 801343c:	2000      	movs	r0, #0
 801343e:	6031      	str	r1, [r6, #0]
 8013440:	602b      	str	r3, [r5, #0]
 8013442:	b016      	add	sp, #88	; 0x58
 8013444:	bd70      	pop	{r4, r5, r6, pc}
 8013446:	466a      	mov	r2, sp
 8013448:	f000 f848 	bl	80134dc <_fstat_r>
 801344c:	2800      	cmp	r0, #0
 801344e:	dbec      	blt.n	801342a <__swhatbuf_r+0x12>
 8013450:	9901      	ldr	r1, [sp, #4]
 8013452:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013456:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801345a:	4259      	negs	r1, r3
 801345c:	4159      	adcs	r1, r3
 801345e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013462:	e7eb      	b.n	801343c <__swhatbuf_r+0x24>

08013464 <__smakebuf_r>:
 8013464:	898b      	ldrh	r3, [r1, #12]
 8013466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013468:	079d      	lsls	r5, r3, #30
 801346a:	4606      	mov	r6, r0
 801346c:	460c      	mov	r4, r1
 801346e:	d507      	bpl.n	8013480 <__smakebuf_r+0x1c>
 8013470:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013474:	6023      	str	r3, [r4, #0]
 8013476:	6123      	str	r3, [r4, #16]
 8013478:	2301      	movs	r3, #1
 801347a:	6163      	str	r3, [r4, #20]
 801347c:	b002      	add	sp, #8
 801347e:	bd70      	pop	{r4, r5, r6, pc}
 8013480:	ab01      	add	r3, sp, #4
 8013482:	466a      	mov	r2, sp
 8013484:	f7ff ffc8 	bl	8013418 <__swhatbuf_r>
 8013488:	9900      	ldr	r1, [sp, #0]
 801348a:	4605      	mov	r5, r0
 801348c:	4630      	mov	r0, r6
 801348e:	f7fd fb91 	bl	8010bb4 <_malloc_r>
 8013492:	b948      	cbnz	r0, 80134a8 <__smakebuf_r+0x44>
 8013494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013498:	059a      	lsls	r2, r3, #22
 801349a:	d4ef      	bmi.n	801347c <__smakebuf_r+0x18>
 801349c:	f023 0303 	bic.w	r3, r3, #3
 80134a0:	f043 0302 	orr.w	r3, r3, #2
 80134a4:	81a3      	strh	r3, [r4, #12]
 80134a6:	e7e3      	b.n	8013470 <__smakebuf_r+0xc>
 80134a8:	89a3      	ldrh	r3, [r4, #12]
 80134aa:	6020      	str	r0, [r4, #0]
 80134ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134b0:	81a3      	strh	r3, [r4, #12]
 80134b2:	9b00      	ldr	r3, [sp, #0]
 80134b4:	6163      	str	r3, [r4, #20]
 80134b6:	9b01      	ldr	r3, [sp, #4]
 80134b8:	6120      	str	r0, [r4, #16]
 80134ba:	b15b      	cbz	r3, 80134d4 <__smakebuf_r+0x70>
 80134bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134c0:	4630      	mov	r0, r6
 80134c2:	f000 f81d 	bl	8013500 <_isatty_r>
 80134c6:	b128      	cbz	r0, 80134d4 <__smakebuf_r+0x70>
 80134c8:	89a3      	ldrh	r3, [r4, #12]
 80134ca:	f023 0303 	bic.w	r3, r3, #3
 80134ce:	f043 0301 	orr.w	r3, r3, #1
 80134d2:	81a3      	strh	r3, [r4, #12]
 80134d4:	89a3      	ldrh	r3, [r4, #12]
 80134d6:	431d      	orrs	r5, r3
 80134d8:	81a5      	strh	r5, [r4, #12]
 80134da:	e7cf      	b.n	801347c <__smakebuf_r+0x18>

080134dc <_fstat_r>:
 80134dc:	b538      	push	{r3, r4, r5, lr}
 80134de:	4d07      	ldr	r5, [pc, #28]	; (80134fc <_fstat_r+0x20>)
 80134e0:	2300      	movs	r3, #0
 80134e2:	4604      	mov	r4, r0
 80134e4:	4608      	mov	r0, r1
 80134e6:	4611      	mov	r1, r2
 80134e8:	602b      	str	r3, [r5, #0]
 80134ea:	f7ef feca 	bl	8003282 <_fstat>
 80134ee:	1c43      	adds	r3, r0, #1
 80134f0:	d102      	bne.n	80134f8 <_fstat_r+0x1c>
 80134f2:	682b      	ldr	r3, [r5, #0]
 80134f4:	b103      	cbz	r3, 80134f8 <_fstat_r+0x1c>
 80134f6:	6023      	str	r3, [r4, #0]
 80134f8:	bd38      	pop	{r3, r4, r5, pc}
 80134fa:	bf00      	nop
 80134fc:	20003b74 	.word	0x20003b74

08013500 <_isatty_r>:
 8013500:	b538      	push	{r3, r4, r5, lr}
 8013502:	4d06      	ldr	r5, [pc, #24]	; (801351c <_isatty_r+0x1c>)
 8013504:	2300      	movs	r3, #0
 8013506:	4604      	mov	r4, r0
 8013508:	4608      	mov	r0, r1
 801350a:	602b      	str	r3, [r5, #0]
 801350c:	f7ef fec9 	bl	80032a2 <_isatty>
 8013510:	1c43      	adds	r3, r0, #1
 8013512:	d102      	bne.n	801351a <_isatty_r+0x1a>
 8013514:	682b      	ldr	r3, [r5, #0]
 8013516:	b103      	cbz	r3, 801351a <_isatty_r+0x1a>
 8013518:	6023      	str	r3, [r4, #0]
 801351a:	bd38      	pop	{r3, r4, r5, pc}
 801351c:	20003b74 	.word	0x20003b74

08013520 <_init>:
 8013520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013522:	bf00      	nop
 8013524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013526:	bc08      	pop	{r3}
 8013528:	469e      	mov	lr, r3
 801352a:	4770      	bx	lr

0801352c <_fini>:
 801352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801352e:	bf00      	nop
 8013530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013532:	bc08      	pop	{r3}
 8013534:	469e      	mov	lr, r3
 8013536:	4770      	bx	lr
