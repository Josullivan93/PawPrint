
PPV1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08015108  08015108  00025108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015748  08015748  000302d4  2**0
                  CONTENTS
  4 .ARM          00000000  08015748  08015748  000302d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015748  08015748  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015748  08015748  00025748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801574c  0801574c  0002574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08015750  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c228  200002d4  08015a24  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000c4fc  08015a24  0003c4fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ffa7  00000000  00000000  00030347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005495  00000000  00000000  000502ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  00055788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000144f  00000000  00000000  00057280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ea6a  00000000  00000000  000586cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d27  00000000  00000000  00087139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fafc1  00000000  00000000  000ace60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008378  00000000  00000000  001a7e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  001b019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080150f0 	.word	0x080150f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	080150f0 	.word	0x080150f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <LIS2MDL_ReadReg>:
/*
 * Low level functions to read/write to LIS2MDL
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LIS2MDL_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9302      	str	r3, [sp, #8]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2301      	movs	r3, #1
 8000d16:	213d      	movs	r1, #61	; 0x3d
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f002 fa39 	bl	8003190 <HAL_I2C_Mem_Read>
 8000d1e:	4603      	mov	r3, r0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LIS2MDL_WriteReg>:
HAL_StatusTypeDef	LIS2MDL_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){

	return HAL_I2C_Mem_Read( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
}

HAL_StatusTypeDef	LIS2MDL_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	460b      	mov	r3, r1
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LIS2MDL_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	2301      	movs	r3, #1
 8000d42:	9301      	str	r3, [sp, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	213d      	movs	r1, #61	; 0x3d
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f002 f907 	bl	8002f60 <HAL_I2C_Mem_Write>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <LSM6DSO_ReadReg>:
/*
 * Low level functions to read/write to LSM6DSO
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	LSM6DSO_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af04      	add	r7, sp, #16
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	460b      	mov	r3, r1
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	21d7      	movs	r1, #215	; 0xd7
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f002 fa05 	bl	8003190 <HAL_I2C_Mem_Read>
 8000d86:	4603      	mov	r3, r0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LSM6DSO_ReadRegs>:

HAL_StatusTypeDef	LSM6DSO_ReadRegs( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data, uint8_t len ){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
 8000da0:	4613      	mov	r3, r2
 8000da2:	72bb      	strb	r3, [r7, #10]

	return HAL_I2C_Mem_Read( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY );
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7abb      	ldrb	r3, [r7, #10]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	21d7      	movs	r1, #215	; 0xd7
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f002 f9e7 	bl	8003190 <HAL_I2C_Mem_Read>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <LSM6DSO_WriteReg>:

HAL_StatusTypeDef	LSM6DSO_WriteReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af04      	add	r7, sp, #16
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Write( i2cHandle, LSM6DSO_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	9302      	str	r3, [sp, #8]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	21d7      	movs	r1, #215	; 0xd7
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f002 f8b5 	bl	8002f60 <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t inBuff[64];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
//	else if (GPIO_Pin == IMU_INT_Pin){
//
//		LSM6DSO_FIFO_RDY = 1;
//
//	}
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f001 fa46 	bl	80022ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f8e7 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 fa15 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2a:	f000 f9f5 	bl	8001218 <MX_DMA_Init>
  MX_I2C3_Init();
 8000e2e:	f000 f933 	bl	8001098 <MX_I2C3_Init>
  MX_SDMMC1_SD_Init();
 8000e32:	f000 f9cd 	bl	80011d0 <MX_SDMMC1_SD_Init>
  MX_USB_DEVICE_Init();
 8000e36:	f00e feef 	bl	800fc18 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8000e3a:	f000 f96d 	bl	8001118 <MX_RTC_Init>
  MX_FATFS_Init();
 8000e3e:	f009 fec1 	bl	800abc4 <MX_FATFS_Init>

  /* USER CODE BEGIN 2 */
  int attempts = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	4956      	ldr	r1, [pc, #344]	; (8000fa4 <main+0x18c>)
 8000e4a:	4857      	ldr	r0, [pc, #348]	; (8000fa8 <main+0x190>)
 8000e4c:	f00d fe3a 	bl	800eac4 <f_mount>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b55      	ldr	r3, [pc, #340]	; (8000fac <main+0x194>)
 8000e56:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e58:	e008      	b.n	8000e6c <main+0x54>
	  mountStatus = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4951      	ldr	r1, [pc, #324]	; (8000fa4 <main+0x18c>)
 8000e5e:	4852      	ldr	r0, [pc, #328]	; (8000fa8 <main+0x190>)
 8000e60:	f00d fe30 	bl	800eac4 <f_mount>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b50      	ldr	r3, [pc, #320]	; (8000fac <main+0x194>)
 8000e6a:	701a      	strb	r2, [r3, #0]
  while ( mountStatus != FR_OK && attempts < 3){
 8000e6c:	4b4f      	ldr	r3, [pc, #316]	; (8000fac <main+0x194>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <main+0x62>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	ddef      	ble.n	8000e5a <main+0x42>
  }

 HAL_Delay(500);
 8000e7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7e:	f001 fa8b 	bl	8002398 <HAL_Delay>

  volMakeStatus = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 8000e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <main+0x198>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	4845      	ldr	r0, [pc, #276]	; (8000fa4 <main+0x18c>)
 8000e90:	f00e fa3a 	bl	800f308 <f_mkfs>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <main+0x19c>)
 8000e9a:	701a      	strb	r2, [r3, #0]
  if ( volMakeStatus != FR_OK){
 8000e9c:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <main+0x19c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <main+0x90>
	  Error_Handler();
 8000ea4:	f000 fa50 	bl	8001348 <Error_Handler>
  }
  HAL_Delay(500);
 8000ea8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eac:	f001 fa74 	bl	8002398 <HAL_Delay>

  fileCreateStatus = f_open(&SDFile, "Out.csv", FA_CREATE_ALWAYS | FA_WRITE);
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	4941      	ldr	r1, [pc, #260]	; (8000fb8 <main+0x1a0>)
 8000eb4:	4841      	ldr	r0, [pc, #260]	; (8000fbc <main+0x1a4>)
 8000eb6:	f00d fe4b 	bl	800eb50 <f_open>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <main+0x1a8>)
 8000ec0:	701a      	strb	r2, [r3, #0]
  if ( fileCreateStatus != FR_OK){
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <main+0x1a8>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <main+0xb6>
	  Error_Handler();
 8000eca:	f000 fa3d 	bl	8001348 <Error_Handler>
  }

  maxoutLength = snprintf((char *) &buffer[writeIndex],40000-writeIndex ,"TimeStamp,XL_X,XL_Y,XL_Z,GYR_X,GYR_Y,GYR_Z,MAG_X,MAG_Y,MAG_Z\n");
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <main+0x1ac>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a3d      	ldr	r2, [pc, #244]	; (8000fc8 <main+0x1b0>)
 8000ed4:	1898      	adds	r0, r3, r2
 8000ed6:	4b3b      	ldr	r3, [pc, #236]	; (8000fc4 <main+0x1ac>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f5c3 431c 	rsb	r3, r3, #39936	; 0x9c00
 8000ede:	3340      	adds	r3, #64	; 0x40
 8000ee0:	4a3a      	ldr	r2, [pc, #232]	; (8000fcc <main+0x1b4>)
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f010 fbfc 	bl	80116e0 <sniprintf>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a39      	ldr	r2, [pc, #228]	; (8000fd0 <main+0x1b8>)
 8000eec:	6013      	str	r3, [r2, #0]
  writeIndex += maxoutLength;
 8000eee:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <main+0x1ac>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <main+0x1b8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a32      	ldr	r2, [pc, #200]	; (8000fc4 <main+0x1ac>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* Search for connection via USB */
  /* Once Received proceed to init and data collection */

  // Initialise Sensor
  pawprint_init(&hi2c3);
 8000efc:	4835      	ldr	r0, [pc, #212]	; (8000fd4 <main+0x1bc>)
 8000efe:	f000 fa28 	bl	8001352 <pawprint_init>

  LSM6DSO_FIFO_RDY = 0;
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <main+0x1c0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ( OVERTEMP == 1){
 8000f08:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <main+0x1c4>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d101      	bne.n	8000f14 <main+0xfc>
		  HAL_PWREx_EnterSHUTDOWNMode(); // Future iterations should have physical control here - skip MCU and cut power from battery with Temp_INT
 8000f10:	f003 ffc2 	bl	8004e98 <HAL_PWREx_EnterSHUTDOWNMode>
	  }

	  pawprint_readFIFO(&hi2c3, (char *) buffer, &writeIndex, &maxoutLength, &tag_counter, &FIFOout); // Combine some features input here into structs for simplicity
 8000f14:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <main+0x1c8>)
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <main+0x1cc>)
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <main+0x1b8>)
 8000f1e:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <main+0x1ac>)
 8000f20:	4929      	ldr	r1, [pc, #164]	; (8000fc8 <main+0x1b0>)
 8000f22:	482c      	ldr	r0, [pc, #176]	; (8000fd4 <main+0x1bc>)
 8000f24:	f000 fc08 	bl	8001738 <pawprint_readFIFO>

	  // Check buffer fill
	  if (writeIndex >= 32768){
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <main+0x1ac>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f30:	dbea      	blt.n	8000f08 <main+0xf0>
		 // memset(writeBuff, '\0', (size_t) 32000);
		//  memcpy(writeBuff, (char *)&buffer, (size_t) 32000);

		 // f_write(&SDFile, writeBuff, (size_t) 32000, &byteCount);

		  f_write(&SDFile, (char *)&buffer, (size_t) 32768, &byteCount);
 8000f32:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <main+0x1d0>)
 8000f34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f38:	4923      	ldr	r1, [pc, #140]	; (8000fc8 <main+0x1b0>)
 8000f3a:	4820      	ldr	r0, [pc, #128]	; (8000fbc <main+0x1a4>)
 8000f3c:	f00d ffc6 	bl	800eecc <f_write>
		  // Copy end of buffer to beginning and clear
		  //memcpy(tempBuff,(char *) &buffer[32000],(size_t) 8000);
		  //memset((char *) &buffer[0], '\0', sizeof(buffer));
		  //memcpy((char *) &buffer, tempBuff,(size_t) 8000);
		  //memset(&tempBuff[0], '\0', sizeof(tempBuff));
		  size_t overBuff = strlen((char *) &buffer[32768]);
 8000f40:	482a      	ldr	r0, [pc, #168]	; (8000fec <main+0x1d4>)
 8000f42:	f7ff f995 	bl	8000270 <strlen>
 8000f46:	6038      	str	r0, [r7, #0]
		  memcpy((char *) &buffer[0],(char *) &buffer[32768], overBuff);
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4928      	ldr	r1, [pc, #160]	; (8000fec <main+0x1d4>)
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <main+0x1b0>)
 8000f4e:	f010 fcdd 	bl	801190c <memcpy>
		  memset((char *) &buffer[overBuff], '\0', sizeof(buffer)-overBuff);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <main+0x1b0>)
 8000f56:	1898      	adds	r0, r3, r2
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f5c3 431c 	rsb	r3, r3, #39936	; 0x9c00
 8000f5e:	3340      	adds	r3, #64	; 0x40
 8000f60:	461a      	mov	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	f010 fc53 	bl	801180e <memset>
		  // Set writeIndex to remainder length
		  writeIndex -= byteCount;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <main+0x1ac>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <main+0x1d0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <main+0x1ac>)
 8000f78:	601a      	str	r2, [r3, #0]
		  writeNum++;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <main+0x1d8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <main+0x1d8>)
 8000f82:	6013      	str	r3, [r2, #0]

		  // fsync every ~1MB to ensure SD buffer is being written
		  if( writeNum >= 3){
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <main+0x1d8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d9bd      	bls.n	8000f08 <main+0xf0>

			  f_close(&SDFile);
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <main+0x1a4>)
 8000f8e:	f00e f990 	bl	800f2b2 <f_close>
			  f_open(&SDFile, "Out.csv", FA_OPEN_APPEND | FA_WRITE);
 8000f92:	2232      	movs	r2, #50	; 0x32
 8000f94:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <main+0x1a0>)
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <main+0x1a4>)
 8000f98:	f00d fdda 	bl	800eb50 <f_open>

			 //f_sync(&SDFile);


			 writeNum = 0;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <main+0x1d8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
	  if ( OVERTEMP == 1){
 8000fa2:	e7b1      	b.n	8000f08 <main+0xf0>
 8000fa4:	2000a304 	.word	0x2000a304
 8000fa8:	2000a308 	.word	0x2000a308
 8000fac:	2000a0b4 	.word	0x2000a0b4
 8000fb0:	2000a0b8 	.word	0x2000a0b8
 8000fb4:	2000a0b5 	.word	0x2000a0b5
 8000fb8:	08015108 	.word	0x08015108
 8000fbc:	2000a538 	.word	0x2000a538
 8000fc0:	2000a0b6 	.word	0x2000a0b6
 8000fc4:	2000a078 	.word	0x2000a078
 8000fc8:	20000438 	.word	0x20000438
 8000fcc:	08015110 	.word	0x08015110
 8000fd0:	2000a07c 	.word	0x2000a07c
 8000fd4:	200002f0 	.word	0x200002f0
 8000fd8:	20000434 	.word	0x20000434
 8000fdc:	20000435 	.word	0x20000435
 8000fe0:	2000a084 	.word	0x2000a084
 8000fe4:	2000a080 	.word	0x2000a080
 8000fe8:	2000a0ac 	.word	0x2000a0ac
 8000fec:	20008438 	.word	0x20008438
 8000ff0:	2000a0b0 	.word	0x2000a0b0

08000ff4 <SystemClock_Config>:
	/**
	  * @brief System Clock Configuration
	  * @retval None
	  */
	void SystemClock_Config(void)
	{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b096      	sub	sp, #88	; 0x58
 8000ff8:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2244      	movs	r2, #68	; 0x44
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f010 fc03 	bl	801180e <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001016:	f44f 7000 	mov.w	r0, #512	; 0x200
 800101a:	f003 fed7 	bl	8004dcc <HAL_PWREx_ControlVoltageScaling>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x34>
	  {
	    Error_Handler();
 8001024:	f000 f990 	bl	8001348 <Error_Handler>
	  }

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001028:	2309      	movs	r3, #9
 800102a:	617b      	str	r3, [r7, #20]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	61bb      	str	r3, [r7, #24]
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	2303      	movs	r3, #3
 800103c:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLM = 1;
 800103e:	2301      	movs	r3, #1
 8001040:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLN = 8;
 8001042:	2308      	movs	r3, #8
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001046:	2307      	movs	r3, #7
 8001048:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104a:	2302      	movs	r3, #2
 800104c:	653b      	str	r3, [r7, #80]	; 0x50
	  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	657b      	str	r3, [r7, #84]	; 0x54
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4618      	mov	r0, r3
 8001058:	f003 ff38 	bl	8004ecc <HAL_RCC_OscConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x72>
	  {
	    Error_Handler();
 8001062:	f000 f971 	bl	8001348 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001066:	230f      	movs	r3, #15
 8001068:	603b      	str	r3, [r7, #0]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106a:	2303      	movs	r3, #3
 800106c:	607b      	str	r3, [r7, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f004 fb00 	bl	8005684 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x9a>
	  {
	    Error_Handler();
 800108a:	f000 f95d 	bl	8001348 <Error_Handler>
	  }
	}
 800108e:	bf00      	nop
 8001090:	3758      	adds	r7, #88	; 0x58
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <MX_I2C3_Init>:
	  * @brief I2C3 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_I2C3_Init(void)
	{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C3_Init 0 */

	  /* USER CODE BEGIN I2C3_Init 1 */

	  /* USER CODE END I2C3_Init 1 */
	  hi2c3.Instance = I2C3;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_I2C3_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_I2C3_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
	  hi2c3.Init.Timing = 0x20303E5D;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_I2C3_Init+0x74>)
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <MX_I2C3_Init+0x7c>)
 80010a6:	605a      	str	r2, [r3, #4]
	  hi2c3.Init.OwnAddress1 = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_I2C3_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
	  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_I2C3_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
	  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_I2C3_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
	  hi2c3.Init.OwnAddress2 = 0;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_I2C3_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
	  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C3_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
	  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C3_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
	  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C3_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <MX_I2C3_Init+0x74>)
 80010d4:	f001 fea8 	bl	8002e28 <HAL_I2C_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C3_Init+0x4a>
	  {
	    Error_Handler();
 80010de:	f000 f933 	bl	8001348 <Error_Handler>
	  }

	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <MX_I2C3_Init+0x74>)
 80010e6:	f002 fc25 	bl	8003934 <HAL_I2CEx_ConfigAnalogFilter>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C3_Init+0x5c>
	  {
	    Error_Handler();
 80010f0:	f000 f92a 	bl	8001348 <Error_Handler>
	  }

	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_I2C3_Init+0x74>)
 80010f8:	f002 fc67 	bl	80039ca <HAL_I2CEx_ConfigDigitalFilter>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C3_Init+0x6e>
	  {
	    Error_Handler();
 8001102:	f000 f921 	bl	8001348 <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C3_Init 2 */

	  /* USER CODE END I2C3_Init 2 */

	}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002f0 	.word	0x200002f0
 8001110:	40005c00 	.word	0x40005c00
 8001114:	20303e5d 	.word	0x20303e5d

08001118 <MX_RTC_Init>:
	  * @brief RTC Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_RTC_Init(void)
	{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN RTC_Init 0 */

	  /* USER CODE END RTC_Init 0 */

	  RTC_TimeTypeDef sTime = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]

	  /* USER CODE END RTC_Init 1 */

	  /** Initialize RTC Only
	  */
	  hrtc.Instance = RTC;
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001132:	4a26      	ldr	r2, [pc, #152]	; (80011cc <MX_RTC_Init+0xb4>)
 8001134:	601a      	str	r2, [r3, #0]
	  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
	  hrtc.Init.AsynchPrediv = 127;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_RTC_Init+0xb0>)
 800113e:	227f      	movs	r2, #127	; 0x7f
 8001140:	609a      	str	r2, [r3, #8]
	  hrtc.Init.SynchPrediv = 255;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001144:	22ff      	movs	r2, #255	; 0xff
 8001146:	60da      	str	r2, [r3, #12]
	  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_RTC_Init+0xb0>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
	  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
	  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
	  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_RTC_Init+0xb0>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001160:	4819      	ldr	r0, [pc, #100]	; (80011c8 <MX_RTC_Init+0xb0>)
 8001162:	f005 ffcd 	bl	8007100 <HAL_RTC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_RTC_Init+0x58>
	  {
	    Error_Handler();
 800116c:	f000 f8ec 	bl	8001348 <Error_Handler>

	  /* USER CODE END Check_RTC_BKUP */

	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <MX_RTC_Init+0xb0>)
 800118c:	f006 f840 	bl	8007210 <HAL_RTC_SetTime>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_RTC_Init+0x82>
	  {
	    Error_Handler();
 8001196:	f000 f8d7 	bl	8001348 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800119a:	2301      	movs	r3, #1
 800119c:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 800119e:	2301      	movs	r3, #1
 80011a0:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011aa:	463b      	mov	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_RTC_Init+0xb0>)
 80011b2:	f006 f8ca 	bl	800734a <HAL_RTC_SetDate>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_RTC_Init+0xa8>
	  {
	    Error_Handler();
 80011bc:	f000 f8c4 	bl	8001348 <Error_Handler>
	  }
	  /* USER CODE BEGIN RTC_Init 2 */

	  /* USER CODE END RTC_Init 2 */

	}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000344 	.word	0x20000344
 80011cc:	40002800 	.word	0x40002800

080011d0 <MX_SDMMC1_SD_Init>:
	  * @brief SDMMC1 Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_SDMMC1_SD_Init(void)
	{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
	  /* USER CODE END SDMMC1_Init 0 */

	  /* USER CODE BEGIN SDMMC1_Init 1 */

	  /* USER CODE END SDMMC1_Init 1 */
	  hsd1.Instance = SDMMC1;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_SDMMC1_SD_Init+0x40>)
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <MX_SDMMC1_SD_Init+0x44>)
 80011d8:	601a      	str	r2, [r3, #0]
	  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <MX_SDMMC1_SD_Init+0x40>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
	  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_SDMMC1_SD_Init+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
	  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_SDMMC1_SD_Init+0x40>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
	  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_SDMMC1_SD_Init+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
	  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_SDMMC1_SD_Init+0x40>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
	  hsd1.Init.ClockDiv = 1;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <MX_SDMMC1_SD_Init+0x40>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	619a      	str	r2, [r3, #24]
	  /* USER CODE BEGIN SDMMC1_Init 2 */
	  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <MX_SDMMC1_SD_Init+0x40>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
	  /* USER CODE END SDMMC1_Init 2 */

	}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000368 	.word	0x20000368
 8001214:	40012800 	.word	0x40012800

08001218 <MX_DMA_Init>:

	/**
	  * Enable DMA controller clock
	  */
	static void MX_DMA_Init(void)
	{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_DMA_Init+0x38>)
 8001220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <MX_DMA_Init+0x38>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6493      	str	r3, [r2, #72]	; 0x48
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_DMA_Init+0x38>)
 800122c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA2_Channel4_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	203b      	movs	r0, #59	; 0x3b
 800123c:	f001 f9ab 	bl	8002596 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001240:	203b      	movs	r0, #59	; 0x3b
 8001242:	f001 f9c4 	bl	80025ce <HAL_NVIC_EnableIRQ>

	}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <MX_GPIO_Init>:
	  * @brief GPIO Initialization Function
	  * @param None
	  * @retval None
	  */
	static void MX_GPIO_Init(void)
	{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	4b35      	ldr	r3, [pc, #212]	; (8001340 <MX_GPIO_Init+0xec>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a34      	ldr	r2, [pc, #208]	; (8001340 <MX_GPIO_Init+0xec>)
 8001270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b32      	ldr	r3, [pc, #200]	; (8001340 <MX_GPIO_Init+0xec>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <MX_GPIO_Init+0xec>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <MX_GPIO_Init+0xec>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <MX_GPIO_Init+0xec>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <MX_GPIO_Init+0xec>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a28      	ldr	r2, [pc, #160]	; (8001340 <MX_GPIO_Init+0xec>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_GPIO_Init+0xec>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <MX_GPIO_Init+0xec>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a22      	ldr	r2, [pc, #136]	; (8001340 <MX_GPIO_Init+0xec>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_GPIO_Init+0xec>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : IMU_INT_Pin */
	  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80012ca:	2304      	movs	r3, #4
 80012cc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d2:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4819      	ldr	r0, [pc, #100]	; (8001344 <MX_GPIO_Init+0xf0>)
 80012e0:	f001 fbc8 	bl	8002a74 <HAL_GPIO_Init>

	  /*Configure GPIO pin : TEMP_INT_Pin */
	  GPIO_InitStruct.Pin = TEMP_INT_Pin;
 80012e4:	2308      	movs	r3, #8
 80012e6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012ec:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(TEMP_INT_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4812      	ldr	r0, [pc, #72]	; (8001344 <MX_GPIO_Init+0xf0>)
 80012fa:	f001 fbbb 	bl	8002a74 <HAL_GPIO_Init>

	  /*Configure GPIO pin : SDMMC_Detect_Pin */
	  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
	  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_GPIO_Init+0xf0>)
 8001312:	f001 fbaf 	bl	8002a74 <HAL_GPIO_Init>

	  /* EXTI interrupt init*/
	  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2008      	movs	r0, #8
 800131c:	f001 f93b 	bl	8002596 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001320:	2008      	movs	r0, #8
 8001322:	f001 f954 	bl	80025ce <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2009      	movs	r0, #9
 800132c:	f001 f933 	bl	8002596 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001330:	2009      	movs	r0, #9
 8001332:	f001 f94c 	bl	80025ce <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
	}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	48000800 	.word	0x48000800

08001348 <Error_Handler>:
	/**
	  * @brief  This function is executed in case of error occurrence.
	  * @retval None
	  */
	void Error_Handler(void)
	{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
	  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>

08001352 <pawprint_init>:

/* Private Variables */

/* Initialisation */

void pawprint_init( I2C_HandleTypeDef *i2cHandle ){
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]

	//Create required variables
	uint8_t LSM6DSO_WHO,MasterTemp, RegDat, LIS2MDL_WHO, STTS_PROD, STTS_MAN;

	// Boot Delay
	HAL_Delay(20);
 800135a:	2014      	movs	r0, #20
 800135c:	f001 f81c 	bl	8002398 <HAL_Delay>
	/* Reset Sensor to defaults*/
	RegDat = 0x00;
 8001360:	2300      	movs	r3, #0
 8001362:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Ensure accessing correct registers
 8001364:	f107 030d 	add.w	r3, r7, #13
 8001368:	461a      	mov	r2, r3
 800136a:	2101      	movs	r1, #1
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fd2d 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x05;
 8001372:	2305      	movs	r3, #5
 8001374:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat); // Software reset
 8001376:	f107 030d 	add.w	r3, r7, #13
 800137a:	461a      	mov	r2, r3
 800137c:	2112      	movs	r1, #18
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fd24 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);
 8001384:	2064      	movs	r0, #100	; 0x64
 8001386:	f001 f807 	bl	8002398 <HAL_Delay>

	// Check LSM6DSO WhoAmI
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_WHO_AM_I, &LSM6DSO_WHO);
 800138a:	f107 030f 	add.w	r3, r7, #15
 800138e:	461a      	mov	r2, r3
 8001390:	210f      	movs	r1, #15
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fce2 	bl	8000d5c <LSM6DSO_ReadReg>

	/****** Enable PassThrough ******/
	RegDat = 0x40;
 8001398:	2340      	movs	r3, #64	; 0x40
 800139a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 800139c:	f107 030d 	add.w	r3, r7, #13
 80013a0:	461a      	mov	r2, r3
 80013a2:	2101      	movs	r1, #1
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fd11 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_ReadReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG, &MasterTemp);// Save Master Config to MasterTemp
 80013aa:	f107 030e 	add.w	r3, r7, #14
 80013ae:	461a      	mov	r2, r3
 80013b0:	2114      	movs	r1, #20
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fcd2 	bl	8000d5c <LSM6DSO_ReadReg>
	MasterTemp |= 0x20;
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 1 - sensor hub signal disable
 80013c2:	f107 030e 	add.w	r3, r7, #14
 80013c6:	461a      	mov	r2, r3
 80013c8:	2114      	movs	r1, #20
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fcfe 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(5);																							// Delay
 80013d0:	2005      	movs	r0, #5
 80013d2:	f000 ffe1 	bl	8002398 <HAL_Delay>
	MasterTemp = (MasterTemp | 0x20) & ~(0x04);
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f023 0304 	bic.w	r3, r3, #4
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Master On bit to 0 to enable
 80013e6:	f107 030e 	add.w	r3, r7, #14
 80013ea:	461a      	mov	r2, r3
 80013ec:	2114      	movs	r1, #20
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fcec 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp =  MasterTemp & ~(0x04) & ~(0x20);
 80013f4:	7bbb      	ldrb	r3, [r7, #14]
 80013f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Start Config to 0 to restore trigger
 80013fe:	f107 030e 	add.w	r3, r7, #14
 8001402:	461a      	mov	r2, r3
 8001404:	2114      	movs	r1, #20
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fce0 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = MasterTemp & ~(0x04) & ~(0x20) & ~(0x08);
 800140c:	7bbb      	ldrb	r3, [r7, #14]
 800140e:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 8001412:	b2db      	uxtb	r3, r3
 8001414:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);// Set Pullup to 0 to disable internal pullup
 8001416:	f107 030e 	add.w	r3, r7, #14
 800141a:	461a      	mov	r2, r3
 800141c:	2114      	movs	r1, #20
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fcd4 	bl	8000dcc <LSM6DSO_WriteReg>
	MasterTemp = 0x10;
 8001424:	2310      	movs	r3, #16
 8001426:	73bb      	strb	r3, [r7, #14]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &MasterTemp);											// Pass Through Enabled
 8001428:	f107 030e 	add.w	r3, r7, #14
 800142c:	461a      	mov	r2, r3
 800142e:	2114      	movs	r1, #20
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fccb 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);										// Disable access to SHUB registers
 800143a:	f107 030d 	add.w	r3, r7, #13
 800143e:	461a      	mov	r2, r3
 8001440:	2101      	movs	r1, #1
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fcc2 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** LIS2MDL Configuration ***/

	LIS2MDL_ReadReg(i2cHandle, LIS2MDL_REG_WHO_AM_I, &LIS2MDL_WHO);
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	461a      	mov	r2, r3
 800144e:	214f      	movs	r1, #79	; 0x4f
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fc4f 	bl	8000cf4 <LIS2MDL_ReadReg>

	while( LIS2MDL_WHO != LIS2MDL_ID)
 8001456:	e001      	b.n	800145c <pawprint_init+0x10a>

	/* Reset sensor to defaults */
	RegDat = 0x23;
 8001458:	2323      	movs	r3, #35	; 0x23
 800145a:	737b      	strb	r3, [r7, #13]
	while( LIS2MDL_WHO != LIS2MDL_ID)
 800145c:	7b3b      	ldrb	r3, [r7, #12]
 800145e:	2b40      	cmp	r3, #64	; 0x40
 8001460:	d1fa      	bne.n	8001458 <pawprint_init+0x106>
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //Reset registers by soft rst of cfg A to 1
 8001462:	f107 030d 	add.w	r3, r7, #13
 8001466:	461a      	mov	r2, r3
 8001468:	2160      	movs	r1, #96	; 0x60
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fc5c 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(5);
 8001470:	2005      	movs	r0, #5
 8001472:	f000 ff91 	bl	8002398 <HAL_Delay>
	RegDat = 0x43;
 8001476:	2343      	movs	r3, #67	; 0x43
 8001478:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat); //ReBOOT of cfg A to 1
 800147a:	f107 030d 	add.w	r3, r7, #13
 800147e:	461a      	mov	r2, r3
 8001480:	2160      	movs	r1, #96	; 0x60
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fc50 	bl	8000d28 <LIS2MDL_WriteReg>
	HAL_Delay(20);
 8001488:	2014      	movs	r0, #20
 800148a:	f000 ff85 	bl	8002398 <HAL_Delay>

	/* Setup */
	RegDat = 0x10;
 800148e:	2310      	movs	r3, #16
 8001490:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_C, &RegDat);// bdu set 1
 8001492:	f107 030d 	add.w	r3, r7, #13
 8001496:	461a      	mov	r2, r3
 8001498:	2162      	movs	r1, #98	; 0x62
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fc44 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x8C;
 80014a0:	238c      	movs	r3, #140	; 0x8c
 80014a2:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, LIS2MDL_REG_CFG_A, &RegDat);// offset temp on, operating mode Default, & data rate  100Hz
 80014a4:	f107 030d 	add.w	r3, r7, #13
 80014a8:	461a      	mov	r2, r3
 80014aa:	2160      	movs	r1, #96	; 0x60
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fc3b 	bl	8000d28 <LIS2MDL_WriteReg>

	/**** Insert Calibration Code here - Requires Moving and Input trigger via USB ******/

	/*** STTS Setup ***/

	STTS751_ReadReg(i2cHandle, STTS751_REG_PROD_ID, &STTS_PROD); // ProdID is 00 for this version of therm - therefore also use manID
 80014b2:	f107 030b 	add.w	r3, r7, #11
 80014b6:	461a      	mov	r2, r3
 80014b8:	21fd      	movs	r1, #253	; 0xfd
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fddc 	bl	8002078 <STTS751_ReadReg>
	STTS751_ReadReg(i2cHandle, STTS751_REG_MAN_ID, &STTS_MAN);
 80014c0:	f107 030a 	add.w	r3, r7, #10
 80014c4:	461a      	mov	r2, r3
 80014c6:	21fe      	movs	r1, #254	; 0xfe
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fdd5 	bl	8002078 <STTS751_ReadReg>

	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80014ce:	e001      	b.n	80014d4 <pawprint_init+0x182>

	RegDat = 0x04;
 80014d0:	2304      	movs	r3, #4
 80014d2:	737b      	strb	r3, [r7, #13]
	while( STTS_PROD != STTS751_PROD_ID && STTS_MAN != STTS751_MAN_ID)
 80014d4:	7afb      	ldrb	r3, [r7, #11]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <pawprint_init+0x18e>
 80014da:	7abb      	ldrb	r3, [r7, #10]
 80014dc:	2b53      	cmp	r3, #83	; 0x53
 80014de:	d1f7      	bne.n	80014d0 <pawprint_init+0x17e>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONV_RATE, &RegDat); // 1Hz
 80014e0:	f107 030d 	add.w	r3, r7, #13
 80014e4:	461a      	mov	r2, r3
 80014e6:	2104      	movs	r1, #4
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fc1d 	bl	8000d28 <LIS2MDL_WriteReg>
	RegDat = 0x4B;
 80014ee:	234b      	movs	r3, #75	; 0x4b
 80014f0:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_H, &RegDat); // Thermal Limit - default is 85 lowered to 75, low limit at freezing
 80014f2:	f107 030d 	add.w	r3, r7, #13
 80014f6:	461a      	mov	r2, r3
 80014f8:	2105      	movs	r1, #5
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fc14 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_THERM_LIMIT, &RegDat); //Therm limit for THERM pin - not used in this design but set regardless for consistency
 8001500:	f107 030d 	add.w	r3, r7, #13
 8001504:	461a      	mov	r2, r3
 8001506:	2120      	movs	r1, #32
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fc0d 	bl	8000d28 <LIS2MDL_WriteReg>

	// No reset function - for safety ensure all thermal registers are set and not assumed to be correct
	RegDat = 0x00;
 800150e:	2300      	movs	r3, #0
 8001510:	737b      	strb	r3, [r7, #13]
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_H_LIMIT_L, &RegDat);
 8001512:	f107 030d 	add.w	r3, r7, #13
 8001516:	461a      	mov	r2, r3
 8001518:	2106      	movs	r1, #6
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fc04 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_H, &RegDat);
 8001520:	f107 030d 	add.w	r3, r7, #13
 8001524:	461a      	mov	r2, r3
 8001526:	2107      	movs	r1, #7
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fbfd 	bl	8000d28 <LIS2MDL_WriteReg>
	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_TEMP_L_LIMIT_L, &RegDat);
 800152e:	f107 030d 	add.w	r3, r7, #13
 8001532:	461a      	mov	r2, r3
 8001534:	2108      	movs	r1, #8
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fbf6 	bl	8000d28 <LIS2MDL_WriteReg>

	LIS2MDL_WriteReg(i2cHandle, STTS751_REG_CONFIG, &RegDat);// Mask1 enabled - event pin active (b7), Run/standby mode (b6)
 800153c:	f107 030d 	add.w	r3, r7, #13
 8001540:	461a      	mov	r2, r3
 8001542:	2103      	movs	r1, #3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fbef 	bl	8000d28 <LIS2MDL_WriteReg>

	/*** Disable Pass Through ***/
	RegDat = 0x40;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Enable access to SHUB registers
 800154e:	f107 030d 	add.w	r3, r7, #13
 8001552:	461a      	mov	r2, r3
 8001554:	2101      	movs	r1, #1
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fc38 	bl	8000dcc <LSM6DSO_WriteReg>
	HAL_Delay(100);		// delay 100
 800155c:	2064      	movs	r0, #100	; 0x64
 800155e:	f000 ff1b 	bl	8002398 <HAL_Delay>
	RegDat = 0x00;
 8001562:	2300      	movs	r3, #0
 8001564:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);	// Disable pass through
 8001566:	f107 030d 	add.w	r3, r7, #13
 800156a:	461a      	mov	r2, r3
 800156c:	2114      	movs	r1, #20
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fc2c 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);	// Disable SHUB access
 8001574:	f107 030d 	add.w	r3, r7, #13
 8001578:	461a      	mov	r2, r3
 800157a:	2101      	movs	r1, #1
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fc25 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Configure LSM6DSO ***/
	RegDat = 0xE2;
 8001582:	23e2      	movs	r3, #226	; 0xe2
 8001584:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL9_XL , &RegDat); // Disable I3C MIPI
 8001586:	f107 030d 	add.w	r3, r7, #13
 800158a:	461a      	mov	r2, r3
 800158c:	2118      	movs	r1, #24
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fc1c 	bl	8000dcc <LSM6DSO_WriteReg>

	RegDat = 0x00;
 8001594:	2300      	movs	r3, #0
 8001596:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL , &RegDat); // Ensure Acc and Gyro Powered down
 8001598:	f107 030d 	add.w	r3, r7, #13
 800159c:	461a      	mov	r2, r3
 800159e:	2110      	movs	r1, #16
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fc13 	bl	8000dcc <LSM6DSO_WriteReg>
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G , &RegDat);
 80015a6:	f107 030d 	add.w	r3, r7, #13
 80015aa:	461a      	mov	r2, r3
 80015ac:	2111      	movs	r1, #17
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fc0c 	bl	8000dcc <LSM6DSO_WriteReg>

	/**** FIFO set up ****/
	RegDat = 0x32;
 80015b4:	2332      	movs	r3, #50	; 0x32
 80015b6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL1 , &RegDat);// Set Watermark level to 50
 80015b8:	f107 030d 	add.w	r3, r7, #13
 80015bc:	461a      	mov	r2, r3
 80015be:	2107      	movs	r1, #7
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fc03 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL2 , &RegDat);
 80015ca:	f107 030d 	add.w	r3, r7, #13
 80015ce:	461a      	mov	r2, r3
 80015d0:	2108      	movs	r1, #8
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fbfa 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x44;
 80015d8:	2344      	movs	r3, #68	; 0x44
 80015da:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL3 , &RegDat); // Set BDR for XL and Gyro (104Hz both)
 80015dc:	f107 030d 	add.w	r3, r7, #13
 80015e0:	461a      	mov	r2, r3
 80015e2:	2109      	movs	r1, #9
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fbf1 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x41;
 80015ea:	2341      	movs	r3, #65	; 0x41
 80015ec:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FIFO_CTRL4 , &RegDat);//41: FIFO mode, bqtch Timestamp, no temp   56: Set to continuous mode & batch Temp and Timestamp
 80015ee:	f107 030d 	add.w	r3, r7, #13
 80015f2:	461a      	mov	r2, r3
 80015f4:	210a      	movs	r1, #10
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fbe8 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 80015fc:	2300      	movs	r3, #0
 80015fe:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_TAP_CFG0 , &RegDat); // Latch interrupt & clear on read
 8001600:	f107 030d 	add.w	r3, r7, #13
 8001604:	461a      	mov	r2, r3
 8001606:	2156      	movs	r1, #86	; 0x56
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fbdf 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x38;
 800160e:	2338      	movs	r3, #56	; 0x38
 8001610:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_INT1_CTRL , &RegDat); // FIFO int on INT1
 8001612:	f107 030d 	add.w	r3, r7, #13
 8001616:	461a      	mov	r2, r3
 8001618:	210d      	movs	r1, #13
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fbd6 	bl	8000dcc <LSM6DSO_WriteReg>

	/*** Peripheral address / subaddress config ***/
	RegDat = 0x40;
 8001620:	2340      	movs	r3, #64	; 0x40
 8001622:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB access
 8001624:	f107 030d 	add.w	r3, r7, #13
 8001628:	461a      	mov	r2, r3
 800162a:	2101      	movs	r1, #1
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fbcd 	bl	8000dcc <LSM6DSO_WriteReg>

	// LIS2MDL Peripheral enable
	RegDat = LIS2MDL_I2C_ADDR;
 8001632:	233d      	movs	r3, #61	; 0x3d
 8001634:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_ADD, &RegDat);// Set address slv0
 8001636:	f107 030d 	add.w	r3, r7, #13
 800163a:	461a      	mov	r2, r3
 800163c:	2115      	movs	r1, #21
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fbc4 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = LIS2MDL_REG_OUTX_L;
 8001644:	2368      	movs	r3, #104	; 0x68
 8001646:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_SUBADD, &RegDat);// Set start register for data output
 8001648:	f107 030d 	add.w	r3, r7, #13
 800164c:	461a      	mov	r2, r3
 800164e:	2116      	movs	r1, #22
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fbbb 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0xCE;
 8001656:	23ce      	movs	r3, #206	; 0xce
 8001658:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV0_CONFIG, &RegDat);// Set bytes to read 0E Default 104Hz
 800165a:	f107 030d 	add.w	r3, r7, #13
 800165e:	461a      	mov	r2, r3
 8001660:	2117      	movs	r1, #23
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fbb2 	bl	8000dcc <LSM6DSO_WriteReg>
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_ADD, &RegDat);// Set address slv1
//	RegDat = STTS751_REG_TEMP_H;
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_SUBADD, &RegDat);// Set start register for data output
//	RegDat = 0x0B;
//	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_SLV1_CONFIG, &RegDat);// Set bytes to read - status between L and H registers so need to read 3
	RegDat = 0x00;
 8001668:	2300      	movs	r3, #0
 800166a:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);// Disable SHUB access
 800166c:	f107 030d 	add.w	r3, r7, #13
 8001670:	461a      	mov	r2, r3
 8001672:	2101      	movs	r1, #1
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fba9 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Configure Xl and Gyro */
	RegDat = 0x44;
 800167a:	2344      	movs	r3, #68	; 0x44
 800167c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL3_C, &RegDat);// Enable block update and auto increment registers
 800167e:	f107 030d 	add.w	r3, r7, #13
 8001682:	461a      	mov	r2, r3
 8001684:	2112      	movs	r1, #18
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fba0 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x28;
 800168c:	2328      	movs	r3, #40	; 0x28
 800168e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL4_C, &RegDat);	// Int 1 and mask DRDY until Filter settles
 8001690:	f107 030d 	add.w	r3, r7, #13
 8001694:	461a      	mov	r2, r3
 8001696:	2113      	movs	r1, #19
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fb97 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x10;
 800169e:	2310      	movs	r3, #16
 80016a0:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL6_C, &RegDat);// XL High performance disabled
 80016a2:	f107 030d 	add.w	r3, r7, #13
 80016a6:	461a      	mov	r2, r3
 80016a8:	2115      	movs	r1, #21
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fb8e 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x80;
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL7_G, &RegDat);// Gyro High performance disabled
 80016b4:	f107 030d 	add.w	r3, r7, #13
 80016b8:	461a      	mov	r2, r3
 80016ba:	2116      	movs	r1, #22
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fb85 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x20;
 80016c2:	2320      	movs	r3, #32
 80016c4:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL10_C, &RegDat);// enable timestamps
 80016c6:	f107 030d 	add.w	r3, r7, #13
 80016ca:	461a      	mov	r2, r3
 80016cc:	2119      	movs	r1, #25
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fb7c 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80016d4:	2340      	movs	r3, #64	; 0x40
 80016d6:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL1_XL, &RegDat);//Set acc scale and sample rate  - ctrl 1 xl
 80016d8:	f107 030d 	add.w	r3, r7, #13
 80016dc:	461a      	mov	r2, r3
 80016de:	2110      	movs	r1, #16
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fb73 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x40;
 80016e6:	2340      	movs	r3, #64	; 0x40
 80016e8:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_CTRL2_G, &RegDat);// Gyro scale and sample rate - ctrl 2 g
 80016ea:	f107 030d 	add.w	r3, r7, #13
 80016ee:	461a      	mov	r2, r3
 80016f0:	2111      	movs	r1, #17
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fb6a 	bl	8000dcc <LSM6DSO_WriteReg>

	/* Enable I2C Master to begin Data collection */
	RegDat = 0x40;
 80016f8:	2340      	movs	r3, #64	; 0x40
 80016fa:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat); // Enable SHUB Reg Access
 80016fc:	f107 030d 	add.w	r3, r7, #13
 8001700:	461a      	mov	r2, r3
 8001702:	2101      	movs	r1, #1
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fb61 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x4C;
 800170a:	234c      	movs	r3, #76	; 0x4c
 800170c:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_MASTER_CONFIG , &RegDat);// Master config - enable pullups & accel trigger drdy & number external sensors
 800170e:	f107 030d 	add.w	r3, r7, #13
 8001712:	461a      	mov	r2, r3
 8001714:	2114      	movs	r1, #20
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fb58 	bl	8000dcc <LSM6DSO_WriteReg>
	RegDat = 0x00;
 800171c:	2300      	movs	r3, #0
 800171e:	737b      	strb	r3, [r7, #13]
	LSM6DSO_WriteReg(i2cHandle, LSM6DSO_REG_FUNC_CFG_ACCESS, &RegDat);
 8001720:	f107 030d 	add.w	r3, r7, #13
 8001724:	461a      	mov	r2, r3
 8001726:	2101      	movs	r1, #1
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fb4f 	bl	8000dcc <LSM6DSO_WriteReg>

}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <pawprint_readFIFO>:
// Custom FIFO read function with single additional buffer - Trying to address missing data issue
// Will attempt to align on single line per time stamp
// SD write file incorporated to ensure  buffer is unloaded ASAP and does not overrun due to FIFO depth
// Perhaps add line to get maximum line size and check that if added to buffer would not overflow

void pawprint_readFIFO (I2C_HandleTypeDef *i2cHandle, char *buffer, int *writeIndex, int *maxoutLength, int *tag_counter, sensor_out *FIFOout) {
 8001738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800173c:	b0b1      	sub	sp, #196	; 0xc4
 800173e:	af14      	add	r7, sp, #80	; 0x50
 8001740:	6478      	str	r0, [r7, #68]	; 0x44
 8001742:	6439      	str	r1, [r7, #64]	; 0x40
 8001744:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
	// Time at start of timer in UNIX to microsecond - reset by writing AAh to TIMESTAMP2 register when grabbing RTC time to sync
	// BDR value
	// Previous Timestamp
	// Previous Tag count

	HAL_StatusTypeDef statusOut = 0x00; // Success/Fail for each read/write
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t FIFOstatus[2];
	uint16_t FIFOdepth = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int outLength = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	66bb      	str	r3, [r7, #104]	; 0x68

	// Set Sensor BDR - Move to external input
	float bdr_xl = 104.0f;
 8001758:	4bac      	ldr	r3, [pc, #688]	; (8001a0c <pawprint_readFIFO+0x2d4>)
 800175a:	663b      	str	r3, [r7, #96]	; 0x60
	float bdr_gyr = 104.0f;
 800175c:	4bab      	ldr	r3, [pc, #684]	; (8001a0c <pawprint_readFIFO+0x2d4>)
 800175e:	65fb      	str	r3, [r7, #92]	; 0x5c
	float bdr_max = fmaxf(bdr_xl, bdr_gyr);
 8001760:	edd7 0a17 	vldr	s1, [r7, #92]	; 0x5c
 8001764:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8001768:	f013 fc8a 	bl	8015080 <fmaxf>
 800176c:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58

	// Period length converted to LSB - 1lsb = 25us
	float batch_period = (1000000*(1/bdr_max))/25;
 8001770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001774:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800177c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001a18 <pawprint_readFIFO+0x2e0>
 8001780:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001784:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Read timestamp_endcount bit to check for timestamp overrun
		// Enable a bit that forces a check for timestamp < old timestamp? Or other overrun check?

	// Read watermark flag and if/else
	LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_STATUS1, FIFOstatus,2);
 8001790:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001794:	2302      	movs	r3, #2
 8001796:	213a      	movs	r1, #58	; 0x3a
 8001798:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800179a:	f7ff faf9 	bl	8000d90 <LSM6DSO_ReadRegs>

	if( ((FIFOstatus[1] >> 7) & 0x01) || ((FIFOstatus[1] >> 6) & 0x01) || ((FIFOstatus[1] >> 5) & 0x01) ){
 800179e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80017a2:	09db      	lsrs	r3, r3, #7
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d110      	bne.n	80017d0 <pawprint_readFIFO+0x98>
 80017ae:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80017b2:	099b      	lsrs	r3, r3, #6
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d108      	bne.n	80017d0 <pawprint_readFIFO+0x98>
 80017be:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 823a 	beq.w	8001c44 <pawprint_readFIFO+0x50c>
		//if ((FIFOstatus[1] >> 6) & 0x01) {
		//	overrunStatus = 1;
		//}

		// get fifo depth
		FIFOdepth = (((uint16_t)FIFOstatus[1] & 0x03) << 8 ) + (uint16_t)FIFOstatus[0];
 80017d0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017dc:	b29a      	uxth	r2, r3
 80017de:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		while(FIFOdepth--){
 80017ea:	e223      	b.n	8001c34 <pawprint_readFIFO+0x4fc>

			uint8_t FIFOdat[7] = {0};
 80017ec:	2300      	movs	r3, #0
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80017f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f4:	2100      	movs	r1, #0
 80017f6:	460a      	mov	r2, r1
 80017f8:	801a      	strh	r2, [r3, #0]
 80017fa:	460a      	mov	r2, r1
 80017fc:	709a      	strb	r2, [r3, #2]

			statusOut = LSM6DSO_ReadRegs(i2cHandle, LSM6DSO_REG_FIFO_DATA_OUT_TAG, &FIFOdat[0], 7);
 80017fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001802:	2307      	movs	r3, #7
 8001804:	2178      	movs	r1, #120	; 0x78
 8001806:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001808:	f7ff fac2 	bl	8000d90 <LSM6DSO_ReadRegs>
 800180c:	4603      	mov	r3, r0
 800180e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

			// Get tag type & counter
			uint8_t tag = (FIFOdat[0] & 0xF8) >> 0x03;
 8001812:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001816:	08db      	lsrs	r3, r3, #3
 8001818:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			uint8_t new_tag_counter = (FIFOdat[0] & 0x06) >> 0x01;
 800181c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001820:	105b      	asrs	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

			// Is tag_counter same as previous?
			if ((new_tag_counter != *tag_counter)){
 800182c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	f000 8112 	beq.w	8001a60 <pawprint_readFIFO+0x328>

				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 800183c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001844:	189e      	adds	r6, r3, r2
 8001846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f5c3 431c 	rsb	r3, r3, #39936	; 0x9c00
 800184e:	3340      	adds	r3, #64	; 0x40
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
																	FIFOout->timestamp,
 8001852:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001856:	681b      	ldr	r3, [r3, #0]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe75 	bl	8000548 <__aeabi_f2d>
 800185e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
							        								FIFOout->XLdat.x,
 8001862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001866:	685b      	ldr	r3, [r3, #4]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe6d 	bl	8000548 <__aeabi_f2d>
 800186e:	e9c7 0108 	strd	r0, r1, [r7, #32]
							        								FIFOout->XLdat.y,
 8001872:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001876:	689b      	ldr	r3, [r3, #8]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe65 	bl	8000548 <__aeabi_f2d>
 800187e:	e9c7 0106 	strd	r0, r1, [r7, #24]
							        								FIFOout->XLdat.z,
 8001882:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001886:	68db      	ldr	r3, [r3, #12]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe5d 	bl	8000548 <__aeabi_f2d>
 800188e:	e9c7 0104 	strd	r0, r1, [r7, #16]

									        						FIFOout->GYRdat.x,
 8001892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001896:	691b      	ldr	r3, [r3, #16]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe55 	bl	8000548 <__aeabi_f2d>
 800189e:	e9c7 0102 	strd	r0, r1, [r7, #8]
																	FIFOout->GYRdat.y,
 80018a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018a6:	695b      	ldr	r3, [r3, #20]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe4d 	bl	8000548 <__aeabi_f2d>
 80018ae:	e9c7 0100 	strd	r0, r1, [r7]
																	FIFOout->GYRdat.z,
 80018b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018b6:	699b      	ldr	r3, [r3, #24]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe45 	bl	8000548 <__aeabi_f2d>
 80018be:	4682      	mov	sl, r0
 80018c0:	468b      	mov	fp, r1

																	FIFOout->MAGdat.x,
 80018c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018c6:	69db      	ldr	r3, [r3, #28]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe3d 	bl	8000548 <__aeabi_f2d>
 80018ce:	4680      	mov	r8, r0
 80018d0:	4689      	mov	r9, r1
																	FIFOout->MAGdat.y,
 80018d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018d6:	6a1b      	ldr	r3, [r3, #32]
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	4604      	mov	r4, r0
 80018e0:	460d      	mov	r5, r1
																	FIFOout->MAGdat.z);
 80018e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				outLength = snprintf(&buffer[*writeIndex],40000-*writeIndex ,"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fe2d 	bl	8000548 <__aeabi_f2d>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80018f6:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80018fa:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80018fe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8001902:	ed97 7b00 	vldr	d7, [r7]
 8001906:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800190a:	ed97 7b02 	vldr	d7, [r7, #8]
 800190e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001912:	ed97 7b04 	vldr	d7, [r7, #16]
 8001916:	ed8d 7b06 	vstr	d7, [sp, #24]
 800191a:	ed97 7b06 	vldr	d7, [r7, #24]
 800191e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001922:	ed97 7b08 	vldr	d7, [r7, #32]
 8001926:	ed8d 7b02 	vstr	d7, [sp, #8]
 800192a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800192e:	ed8d 7b00 	vstr	d7, [sp]
 8001932:	4a37      	ldr	r2, [pc, #220]	; (8001a10 <pawprint_readFIFO+0x2d8>)
 8001934:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001936:	4630      	mov	r0, r6
 8001938:	f00f fed2 	bl	80116e0 <sniprintf>
 800193c:	66b8      	str	r0, [r7, #104]	; 0x68

					if (outLength < 0){
 800193e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001940:	2b00      	cmp	r3, #0
 8001942:	da11      	bge.n	8001968 <pawprint_readFIFO+0x230>
						// Could be the reason for errors in output? Write if error occurs for inspection
						outLength += snprintf(&buffer[*writeIndex],40000-*writeIndex ,"~,~,E,R,R,O,R,!,~,~\n");
 8001944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194c:	1898      	adds	r0, r3, r2
 800194e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f5c3 431c 	rsb	r3, r3, #39936	; 0x9c00
 8001956:	3340      	adds	r3, #64	; 0x40
 8001958:	4a2e      	ldr	r2, [pc, #184]	; (8001a14 <pawprint_readFIFO+0x2dc>)
 800195a:	4619      	mov	r1, r3
 800195c:	f00f fec0 	bl	80116e0 <sniprintf>
 8001960:	4602      	mov	r2, r0
 8001962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001964:	4413      	add	r3, r2
 8001966:	66bb      	str	r3, [r7, #104]	; 0x68
					}

					// clear data - Can I assign this in one? As not changing TimeStamp couldnt work it out
					FIFOout->XLdat.x = 0 ;
 8001968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
					FIFOout->XLdat.y = 0 ;
 8001972:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
					FIFOout->XLdat.z = 0 ;
 800197c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
					FIFOout->GYRdat.x = 0 ;
 8001986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
					FIFOout->GYRdat.y = 0 ;
 8001990:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
					FIFOout->GYRdat.z = 0 ;
 800199a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
					FIFOout->MAGdat.x = 0 ;
 80019a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
					FIFOout->GYRdat.y = 0 ;
 80019ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
					FIFOout->GYRdat.z = 0 ;
 80019b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
					//*FIFOout = (sensor_out) {0};

					// update max line length - for debug and not used?
					if (outLength > *maxoutLength){
 80019c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dd02      	ble.n	80019d2 <pawprint_readFIFO+0x29a>
						*maxoutLength = outLength;
 80019cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80019d0:	601a      	str	r2, [r3, #0]
					}
					// update buffer write index
					*writeIndex += outLength;
 80019d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019d8:	441a      	add	r2, r3
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	601a      	str	r2, [r3, #0]

				uint8_t diff_tag_counter = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				if(new_tag_counter < *tag_counter)
 80019e4:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80019e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	da14      	bge.n	8001a1c <pawprint_readFIFO+0x2e4>
				{

					diff_tag_counter = new_tag_counter + 4u - *tag_counter;
 80019f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	3304      	adds	r3, #4
 8001a04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a08:	e011      	b.n	8001a2e <pawprint_readFIFO+0x2f6>
 8001a0a:	bf00      	nop
 8001a0c:	42d00000 	.word	0x42d00000
 8001a10:	08015150 	.word	0x08015150
 8001a14:	08015184 	.word	0x08015184
 8001a18:	49742400 	.word	0x49742400

				}
				else
				{
					diff_tag_counter = new_tag_counter - *tag_counter;
 8001a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}

				*tag_counter = new_tag_counter;
 8001a2e:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a36:	601a      	str	r2, [r3, #0]

				// Update Timestamp based on counter change - works reliably only where <4 batch periods have passed
				//uint32_t old_timestamp = FIFOout.timestamp;
				FIFOout->timestamp += (batch_period * diff_tag_counter);
 8001a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a4c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
				// Timestamp reset bit exists but do not see reason to use?

			}

			// switch to ID sensor from tag
			switch (tag)
 8001a60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001a64:	3b01      	subs	r3, #1
 8001a66:	2b0d      	cmp	r3, #13
 8001a68:	f200 80e4 	bhi.w	8001c34 <pawprint_readFIFO+0x4fc>
 8001a6c:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <pawprint_readFIFO+0x33c>)
 8001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a72:	bf00      	nop
 8001a74:	08001aad 	.word	0x08001aad
 8001a78:	08001b1b 	.word	0x08001b1b
 8001a7c:	08001c35 	.word	0x08001c35
 8001a80:	08001b89 	.word	0x08001b89
 8001a84:	08001c35 	.word	0x08001c35
 8001a88:	08001c35 	.word	0x08001c35
 8001a8c:	08001c35 	.word	0x08001c35
 8001a90:	08001c35 	.word	0x08001c35
 8001a94:	08001c35 	.word	0x08001c35
 8001a98:	08001c35 	.word	0x08001c35
 8001a9c:	08001c35 	.word	0x08001c35
 8001aa0:	08001c35 	.word	0x08001c35
 8001aa4:	08001c35 	.word	0x08001c35
 8001aa8:	08001bc7 	.word	0x08001bc7
			{
				case 0x01: // Gyroscope
					FIFOout->GYRdat.x = lsm6dso_from_fs125_to_mdps((FIFOdat[2] << 8) | FIFOdat[1]) ;
 8001aac:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f8de 	bl	8001c80 <lsm6dso_from_fs125_to_mdps>
 8001ac4:	eef0 7a40 	vmov.f32	s15, s0
 8001ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001acc:	edc3 7a04 	vstr	s15, [r3, #16]
					FIFOout->GYRdat.y = lsm6dso_from_fs125_to_mdps((FIFOdat[4] << 8) | FIFOdat[3]);
 8001ad0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001adc:	b21b      	sxth	r3, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f8cc 	bl	8001c80 <lsm6dso_from_fs125_to_mdps>
 8001ae8:	eef0 7a40 	vmov.f32	s15, s0
 8001aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001af0:	edc3 7a05 	vstr	s15, [r3, #20]
					FIFOout->GYRdat.z = lsm6dso_from_fs125_to_mdps((FIFOdat[6] << 8) | FIFOdat[5]);
 8001af4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f8ba 	bl	8001c80 <lsm6dso_from_fs125_to_mdps>
 8001b0c:	eef0 7a40 	vmov.f32	s15, s0
 8001b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b14:	edc3 7a06 	vstr	s15, [r3, #24]

					break;
 8001b18:	e08c      	b.n	8001c34 <pawprint_readFIFO+0x4fc>

				case 0x02: // Accelerometer
					FIFOout->XLdat.x =	lsm6dso_from_fs2_to_mg((FIFOdat[2] << 8) | FIFOdat[1]);
 8001b1a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f88f 	bl	8001c50 <lsm6dso_from_fs2_to_mg>
 8001b32:	eef0 7a40 	vmov.f32	s15, s0
 8001b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b3a:	edc3 7a01 	vstr	s15, [r3, #4]
					FIFOout->XLdat.y = lsm6dso_from_fs2_to_mg((FIFOdat[4] << 8) | FIFOdat[3]);
 8001b3e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f87d 	bl	8001c50 <lsm6dso_from_fs2_to_mg>
 8001b56:	eef0 7a40 	vmov.f32	s15, s0
 8001b5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b5e:	edc3 7a02 	vstr	s15, [r3, #8]
					FIFOout->XLdat.z = lsm6dso_from_fs2_to_mg((FIFOdat[6] << 8) | FIFOdat[5]);
 8001b62:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f86b 	bl	8001c50 <lsm6dso_from_fs2_to_mg>
 8001b7a:	eef0 7a40 	vmov.f32	s15, s0
 8001b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b82:	edc3 7a03 	vstr	s15, [r3, #12]

					break;
 8001b86:	e055      	b.n	8001c34 <pawprint_readFIFO+0x4fc>

				case 0x04: // Timestamp
					FIFOout->timestamp = (((FIFOdat[4] << 24) | (FIFOdat[3] << 16) | (FIFOdat[2] << 8) | FIFOdat[1])* 25.0f / 1000000.0f);
 8001b88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001b8c:	061a      	lsls	r2, r3, #24
 8001b8e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	431a      	orrs	r2, r3
 8001b96:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bac:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001bb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bb4:	ed5f 6a68 	vldr	s13, [pc, #-416]	; 8001a18 <pawprint_readFIFO+0x2e0>
 8001bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bc0:	edc3 7a00 	vstr	s15, [r3]

					break;
 8001bc4:	e036      	b.n	8001c34 <pawprint_readFIFO+0x4fc>

				case 0x0E: // Magnetometer
					FIFOout->MAGdat.x = lis2mdl_from_lsb_to_mgauss((FIFOdat[2] << 8) | FIFOdat[1]);
 8001bc6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	b21a      	sxth	r2, r3
 8001bce:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f869 	bl	8001cb0 <lis2mdl_from_lsb_to_mgauss>
 8001bde:	eef0 7a40 	vmov.f32	s15, s0
 8001be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001be6:	edc3 7a07 	vstr	s15, [r3, #28]
					FIFOout->MAGdat.y = lis2mdl_from_lsb_to_mgauss((FIFOdat[4] << 8) | FIFOdat[3]);
 8001bea:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f857 	bl	8001cb0 <lis2mdl_from_lsb_to_mgauss>
 8001c02:	eef0 7a40 	vmov.f32	s15, s0
 8001c06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c0a:	edc3 7a08 	vstr	s15, [r3, #32]
					FIFOout->MAGdat.z = lis2mdl_from_lsb_to_mgauss((FIFOdat[6] << 8) | FIFOdat[5]);
 8001c0e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f845 	bl	8001cb0 <lis2mdl_from_lsb_to_mgauss>
 8001c26:	eef0 7a40 	vmov.f32	s15, s0
 8001c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c2e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

					break;
 8001c32:	bf00      	nop
		while(FIFOdepth--){
 8001c34:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c38:	1e5a      	subs	r2, r3, #1
 8001c3a:	f8a7 206e 	strh.w	r2, [r7, #110]	; 0x6e
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f47f add4 	bne.w	80017ec <pawprint_readFIFO+0xb4>

		}

	}

}
 8001c44:	bf00      	nop
 8001c46:	3774      	adds	r7, #116	; 0x74
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c4e:	bf00      	nop

08001c50 <lsm6dso_from_fs2_to_mg>:


float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.061f;
 8001c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c66:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001c7c <lsm6dso_from_fs2_to_mg+0x2c>
 8001c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	3d79db23 	.word	0x3d79db23

08001c80 <lsm6dso_from_fs125_to_mdps>:

float_t lsm6dso_from_fs125_to_mdps(int16_t lsb)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 4.375f;
 8001c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c96:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001cac <lsm6dso_from_fs125_to_mdps+0x2c>
 8001c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	408c0000 	.word	0x408c0000

08001cb0 <lis2mdl_from_lsb_to_mgauss>:

float_t lis2mdl_from_lsb_to_mgauss(int16_t lsb)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 1.5f);
 8001cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001cca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001cce:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6613      	str	r3, [r2, #96]	; 0x60
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_MspInit+0x44>)
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_MspInit+0x44>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_MspInit+0x44>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_MspInit+0x44>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0ac      	sub	sp, #176	; 0xb0
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2288      	movs	r2, #136	; 0x88
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00f fd62 	bl	801180e <memset>
  if(hi2c->Instance==I2C3)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_I2C_MspInit+0xb0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d13b      	bne.n	8001dcc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d58:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 feb2 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d6e:	f7ff faeb 	bl	8001348 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d90:	2312      	movs	r3, #18
 8001d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001da2:	2304      	movs	r3, #4
 8001da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dac:	4619      	mov	r1, r3
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <HAL_I2C_MspInit+0xb8>)
 8001db0:	f000 fe60 	bl	8002a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_I2C_MspInit+0xb4>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	37b0      	adds	r7, #176	; 0xb0
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40005c00 	.word	0x40005c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000800 	.word	0x48000800

08001de0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b0a4      	sub	sp, #144	; 0x90
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	2288      	movs	r2, #136	; 0x88
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f00f fd0c 	bl	801180e <memset>
  if(hrtc->Instance==RTC)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a10      	ldr	r2, [pc, #64]	; (8001e3c <HAL_RTC_MspInit+0x5c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d118      	bne.n	8001e32 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fe5a 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001e1e:	f7ff fa93 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RTC_MspInit+0x60>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <HAL_RTC_MspInit+0x60>)
 8001e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3790      	adds	r7, #144	; 0x90
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40002800 	.word	0x40002800
 8001e40:	40021000 	.word	0x40021000

08001e44 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b0ac      	sub	sp, #176	; 0xb0
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2288      	movs	r2, #136	; 0x88
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00f fcd2 	bl	801180e <memset>
  if(hsd->Instance==SDMMC1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_SD_MspInit+0x170>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	f040 809a 	bne.w	8001faa <HAL_SD_MspInit+0x166>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001e76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 8001e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 fe1f 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001e94:	f7ff fa58 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001e98:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_SD_MspInit+0x174>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	4a46      	ldr	r2, [pc, #280]	; (8001fb8 <HAL_SD_MspInit+0x174>)
 8001e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea4:	4b44      	ldr	r3, [pc, #272]	; (8001fb8 <HAL_SD_MspInit+0x174>)
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb0:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_SD_MspInit+0x174>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	4a40      	ldr	r2, [pc, #256]	; (8001fb8 <HAL_SD_MspInit+0x174>)
 8001eb6:	f043 0304 	orr.w	r3, r3, #4
 8001eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <HAL_SD_MspInit+0x174>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <HAL_SD_MspInit+0x174>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ecc:	4a3a      	ldr	r2, [pc, #232]	; (8001fb8 <HAL_SD_MspInit+0x174>)
 8001ece:	f043 0308 	orr.w	r3, r3, #8
 8001ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_SD_MspInit+0x174>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ee0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001efa:	230c      	movs	r3, #12
 8001efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f04:	4619      	mov	r1, r3
 8001f06:	482d      	ldr	r0, [pc, #180]	; (8001fbc <HAL_SD_MspInit+0x178>)
 8001f08:	f000 fdb4 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f24:	230c      	movs	r3, #12
 8001f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4823      	ldr	r0, [pc, #140]	; (8001fc0 <HAL_SD_MspInit+0x17c>)
 8001f32:	f000 fd9f 	bl	8002a74 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f38:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <HAL_SD_MspInit+0x184>)
 8001f3a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f3e:	2207      	movs	r2, #7
 8001f40:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f62:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8001f72:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f74:	f000 fb46 	bl	8002604 <HAL_DMA_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_SD_MspInit+0x13e>
    {
      Error_Handler();
 8001f7e:	f7ff f9e3 	bl	8001348 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a0c      	ldr	r2, [pc, #48]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_SD_MspInit+0x180>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2031      	movs	r0, #49	; 0x31
 8001fa0:	f000 faf9 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001fa4:	2031      	movs	r0, #49	; 0x31
 8001fa6:	f000 fb12 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	37b0      	adds	r7, #176	; 0xb0
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40012800 	.word	0x40012800
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	48000800 	.word	0x48000800
 8001fc0:	48000c00 	.word	0x48000c00
 8001fc4:	200003ec 	.word	0x200003ec
 8001fc8:	40020444 	.word	0x40020444

08001fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <NMI_Handler+0x4>

08001fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <HardFault_Handler+0x4>

08001fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <MemManage_Handler+0x4>

08001fde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <BusFault_Handler+0x4>

08001fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <UsageFault_Handler+0x4>

08001fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002018:	f000 f99e 	bl	8002358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8002024:	2004      	movs	r0, #4
 8002026:	f000 fee7 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}

0800202e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TEMP_INT_Pin);
 8002032:	2008      	movs	r0, #8
 8002034:	f000 fee0 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <SDMMC1_IRQHandler+0x10>)
 8002042:	f005 fd29 	bl	8007a98 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000368 	.word	0x20000368

08002050 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <DMA2_Channel4_IRQHandler+0x10>)
 8002056:	f000 fc2e 	bl	80028b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200003ec 	.word	0x200003ec

08002064 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <OTG_FS_IRQHandler+0x10>)
 800206a:	f001 fe4d 	bl	8003d08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000bc84 	.word	0x2000bc84

08002078 <STTS751_ReadReg>:
/*
 * Low level functions to read/write to STTS751
 * Main functions held in PawPrint.c(.h)
 */

HAL_StatusTypeDef	STTS751_ReadReg( I2C_HandleTypeDef *i2cHandle, uint8_t reg, uint8_t *data ){
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af04      	add	r7, sp, #16
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	460b      	mov	r3, r1
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read( i2cHandle, STTS751_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY );
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	b29a      	uxth	r2, r3
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	9302      	str	r3, [sp, #8]
 8002090:	2301      	movs	r3, #1
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2301      	movs	r3, #1
 800209a:	2172      	movs	r1, #114	; 0x72
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f001 f877 	bl	8003190 <HAL_I2C_Mem_Read>
 80020a2:	4603      	mov	r3, r0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return 1;
 80020b0:	2301      	movs	r3, #1
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_kill>:

int _kill(int pid, int sig)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020c6:	f00f fbf5 	bl	80118b4 <__errno>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2216      	movs	r2, #22
 80020ce:	601a      	str	r2, [r3, #0]
  return -1;
 80020d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_exit>:

void _exit (int status)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ffe7 	bl	80020bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ee:	e7fe      	b.n	80020ee <_exit+0x12>

080020f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	e00a      	b.n	8002118 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002102:	f3af 8000 	nop.w
 8002106:	4601      	mov	r1, r0
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	b2ca      	uxtb	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf0      	blt.n	8002102 <_read+0x12>
  }

  return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e009      	b.n	8002150 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	3301      	adds	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	dbf1      	blt.n	800213c <_write+0x12>
  }
  return len;
 8002158:	687b      	ldr	r3, [r7, #4]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_close>:

int _close(int file)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218a:	605a      	str	r2, [r3, #4]
  return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_isatty>:

int _isatty(int file)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <_sbrk+0x5c>)
 80021d6:	4b15      	ldr	r3, [pc, #84]	; (800222c <_sbrk+0x60>)
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e0:	4b13      	ldr	r3, [pc, #76]	; (8002230 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <_sbrk+0x64>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <_sbrk+0x68>)
 80021ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d207      	bcs.n	800220c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021fc:	f00f fb5a 	bl	80118b4 <__errno>
 8002200:	4603      	mov	r3, r0
 8002202:	220c      	movs	r2, #12
 8002204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e009      	b.n	8002220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <_sbrk+0x64>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <_sbrk+0x64>)
 800221c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20018000 	.word	0x20018000
 800222c:	00000800 	.word	0x00000800
 8002230:	2000a2f8 	.word	0x2000a2f8
 8002234:	2000c500 	.word	0x2000c500

08002238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <SystemInit+0x20>)
 800223e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <SystemInit+0x20>)
 8002244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800225c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002294 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002260:	f7ff ffea 	bl	8002238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <LoopForever+0x6>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	; (800229c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <LoopForever+0xe>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <LoopForever+0x16>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228a:	f00f fb19 	bl	80118c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800228e:	f7fe fdc3 	bl	8000e18 <main>

08002292 <LoopForever>:

LoopForever:
    b LoopForever
 8002292:	e7fe      	b.n	8002292 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002294:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80022a0:	08015750 	.word	0x08015750
  ldr r2, =_sbss
 80022a4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80022a8:	2000c4fc 	.word	0x2000c4fc

080022ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC1_2_IRQHandler>

080022ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 f961 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022be:	200f      	movs	r0, #15
 80022c0:	f000 f80e 	bl	80022e0 <HAL_InitTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	71fb      	strb	r3, [r7, #7]
 80022ce:	e001      	b.n	80022d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022d0:	f7ff fd04 	bl	8001cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022d4:	79fb      	ldrb	r3, [r7, #7]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022ec:	4b17      	ldr	r3, [pc, #92]	; (800234c <HAL_InitTick+0x6c>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d023      	beq.n	800233c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022f4:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_InitTick+0x70>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_InitTick+0x6c>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002302:	fbb3 f3f1 	udiv	r3, r3, r1
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f96d 	bl	80025ea <HAL_SYSTICK_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d809      	bhi.n	8002330 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231c:	2200      	movs	r2, #0
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f000 f937 	bl	8002596 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <HAL_InitTick+0x74>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e007      	b.n	8002340 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e004      	b.n	8002340 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	e001      	b.n	8002340 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000008 	.word	0x20000008
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_IncTick+0x20>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_IncTick+0x24>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4413      	add	r3, r2
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <HAL_IncTick+0x24>)
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008
 800237c:	2000a2fc 	.word	0x2000a2fc

08002380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return uwTick;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_GetTick+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	2000a2fc 	.word	0x2000a2fc

08002398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a0:	f7ff ffee 	bl	8002380 <HAL_GetTick>
 80023a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d005      	beq.n	80023be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_Delay+0x44>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023be:	bf00      	nop
 80023c0:	f7ff ffde 	bl	8002380 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d8f7      	bhi.n	80023c0 <HAL_Delay+0x28>
  {
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000008 	.word	0x20000008

080023e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800240c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__NVIC_SetPriorityGrouping+0x44>)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	60d3      	str	r3, [r2, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <__NVIC_GetPriorityGrouping+0x18>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	f003 0307 	and.w	r3, r3, #7
}
 8002436:	4618      	mov	r0, r3
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db0b      	blt.n	800246e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <__NVIC_EnableIRQ+0x38>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000e100 	.word	0xe000e100

08002480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	490c      	ldr	r1, [pc, #48]	; (80024cc <__NVIC_SetPriority+0x4c>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a8:	e00a      	b.n	80024c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4908      	ldr	r1, [pc, #32]	; (80024d0 <__NVIC_SetPriority+0x50>)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3b04      	subs	r3, #4
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	440b      	add	r3, r1
 80024be:	761a      	strb	r2, [r3, #24]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f1c3 0307 	rsb	r3, r3, #7
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf28      	it	cs
 80024f2:	2304      	movcs	r3, #4
 80024f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d902      	bls.n	8002504 <NVIC_EncodePriority+0x30>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3b03      	subs	r3, #3
 8002502:	e000      	b.n	8002506 <NVIC_EncodePriority+0x32>
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	f04f 32ff 	mov.w	r2, #4294967295
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	401a      	ands	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800251c:	f04f 31ff 	mov.w	r1, #4294967295
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43d9      	mvns	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	4313      	orrs	r3, r2
         );
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff8e 	bl	8002480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff29 	bl	80023e0 <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff3e 	bl	8002428 <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ff8e 	bl	80024d4 <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff5d 	bl	8002480 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff31 	bl	8002444 <__NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffa2 	bl	800253c <SysTick_Config>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e098      	b.n	8002748 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <HAL_DMA_Init+0x150>)
 800261e:	429a      	cmp	r2, r3
 8002620:	d80f      	bhi.n	8002642 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <HAL_DMA_Init+0x154>)
 800262a:	4413      	add	r3, r2
 800262c:	4a4b      	ldr	r2, [pc, #300]	; (800275c <HAL_DMA_Init+0x158>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	009a      	lsls	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a48      	ldr	r2, [pc, #288]	; (8002760 <HAL_DMA_Init+0x15c>)
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
 8002640:	e00e      	b.n	8002660 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_DMA_Init+0x160>)
 800264a:	4413      	add	r3, r2
 800264c:	4a43      	ldr	r2, [pc, #268]	; (800275c <HAL_DMA_Init+0x158>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	009a      	lsls	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a42      	ldr	r2, [pc, #264]	; (8002768 <HAL_DMA_Init+0x164>)
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ba:	d039      	beq.n	8002730 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_DMA_Init+0x15c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d11a      	bne.n	80026fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <HAL_DMA_Init+0x168>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f003 031c 	and.w	r3, r3, #28
 80026d2:	210f      	movs	r1, #15
 80026d4:	fa01 f303 	lsl.w	r3, r1, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	4924      	ldr	r1, [pc, #144]	; (800276c <HAL_DMA_Init+0x168>)
 80026dc:	4013      	ands	r3, r2
 80026de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_DMA_Init+0x168>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ec:	f003 031c 	and.w	r3, r3, #28
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	491d      	ldr	r1, [pc, #116]	; (800276c <HAL_DMA_Init+0x168>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
 80026fa:	e019      	b.n	8002730 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026fc:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <HAL_DMA_Init+0x16c>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f003 031c 	and.w	r3, r3, #28
 8002708:	210f      	movs	r1, #15
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	4917      	ldr	r1, [pc, #92]	; (8002770 <HAL_DMA_Init+0x16c>)
 8002712:	4013      	ands	r3, r2
 8002714:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <HAL_DMA_Init+0x16c>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6859      	ldr	r1, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f003 031c 	and.w	r3, r3, #28
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	4911      	ldr	r1, [pc, #68]	; (8002770 <HAL_DMA_Init+0x16c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	40020407 	.word	0x40020407
 8002758:	bffdfff8 	.word	0xbffdfff8
 800275c:	cccccccd 	.word	0xcccccccd
 8002760:	40020000 	.word	0x40020000
 8002764:	bffdfbf8 	.word	0xbffdfbf8
 8002768:	40020400 	.word	0x40020400
 800276c:	400200a8 	.word	0x400200a8
 8002770:	400204a8 	.word	0x400204a8

08002774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_DMA_Start_IT+0x20>
 8002790:	2302      	movs	r3, #2
 8002792:	e04b      	b.n	800282c <HAL_DMA_Start_IT+0xb8>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d13a      	bne.n	800281e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f921 	bl	8002a14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 020e 	orr.w	r2, r2, #14
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e00f      	b.n	800280c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0204 	bic.w	r2, r2, #4
 80027fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 020a 	orr.w	r2, r2, #10
 800280a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e005      	b.n	800282a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002826:	2302      	movs	r3, #2
 8002828:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800282a:	7dfb      	ldrb	r3, [r7, #23]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d005      	beq.n	8002858 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2204      	movs	r2, #4
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e029      	b.n	80028ac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 020e 	bic.w	r2, r2, #14
 8002866:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	f003 021c 	and.w	r2, r3, #28
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f202 	lsl.w	r2, r1, r2
 800288a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
    }
  }
  return status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f003 031c 	and.w	r3, r3, #28
 80028d6:	2204      	movs	r2, #4
 80028d8:	409a      	lsls	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d026      	beq.n	8002930 <HAL_DMA_IRQHandler+0x7a>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d021      	beq.n	8002930 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d107      	bne.n	800290a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0204 	bic.w	r2, r2, #4
 8002908:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f003 021c 	and.w	r2, r3, #28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2104      	movs	r1, #4
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	2b00      	cmp	r3, #0
 8002924:	d071      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800292e:	e06c      	b.n	8002a0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f003 031c 	and.w	r3, r3, #28
 8002938:	2202      	movs	r2, #2
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d02e      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xec>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d029      	beq.n	80029a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 020a 	bic.w	r2, r2, #10
 800296a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	f003 021c 	and.w	r2, r3, #28
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	2102      	movs	r1, #2
 8002982:	fa01 f202 	lsl.w	r2, r1, r2
 8002986:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d038      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80029a0:	e033      	b.n	8002a0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f003 031c 	and.w	r3, r3, #28
 80029aa:	2208      	movs	r2, #8
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d02a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x156>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d025      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 020e 	bic.w	r2, r2, #14
 80029ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	f003 021c 	and.w	r2, r3, #28
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a0a:	bf00      	nop
 8002a0c:	bf00      	nop
}
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f003 021c 	and.w	r2, r3, #28
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d108      	bne.n	8002a58 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a56:	e007      	b.n	8002a68 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	60da      	str	r2, [r3, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a82:	e17f      	b.n	8002d84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	4013      	ands	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8171 	beq.w	8002d7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d005      	beq.n	8002ab4 <HAL_GPIO_Init+0x40>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d130      	bne.n	8002b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aea:	2201      	movs	r2, #1
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 0201 	and.w	r2, r3, #1
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d118      	bne.n	8002b54 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	08db      	lsrs	r3, r3, #3
 8002b3e:	f003 0201 	and.w	r2, r3, #1
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d017      	beq.n	8002b90 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d123      	bne.n	8002be4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	08da      	lsrs	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3208      	adds	r2, #8
 8002bde:	6939      	ldr	r1, [r7, #16]
 8002be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0203 	and.w	r2, r3, #3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80ac 	beq.w	8002d7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2a:	4a5e      	ldr	r2, [pc, #376]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6613      	str	r3, [r2, #96]	; 0x60
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c3e:	4a5a      	ldr	r2, [pc, #360]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	3302      	adds	r3, #2
 8002c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	220f      	movs	r2, #15
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c68:	d025      	beq.n	8002cb6 <HAL_GPIO_Init+0x242>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4f      	ldr	r2, [pc, #316]	; (8002dac <HAL_GPIO_Init+0x338>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d01f      	beq.n	8002cb2 <HAL_GPIO_Init+0x23e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4e      	ldr	r2, [pc, #312]	; (8002db0 <HAL_GPIO_Init+0x33c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d019      	beq.n	8002cae <HAL_GPIO_Init+0x23a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4d      	ldr	r2, [pc, #308]	; (8002db4 <HAL_GPIO_Init+0x340>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0x236>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4c      	ldr	r2, [pc, #304]	; (8002db8 <HAL_GPIO_Init+0x344>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00d      	beq.n	8002ca6 <HAL_GPIO_Init+0x232>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4b      	ldr	r2, [pc, #300]	; (8002dbc <HAL_GPIO_Init+0x348>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <HAL_GPIO_Init+0x22e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4a      	ldr	r2, [pc, #296]	; (8002dc0 <HAL_GPIO_Init+0x34c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_GPIO_Init+0x22a>
 8002c9a:	2306      	movs	r3, #6
 8002c9c:	e00c      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e00a      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	e008      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	e006      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002caa:	2303      	movs	r3, #3
 8002cac:	e004      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e002      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_GPIO_Init+0x244>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	f002 0203 	and.w	r2, r2, #3
 8002cbe:	0092      	lsls	r2, r2, #2
 8002cc0:	4093      	lsls	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cc8:	4937      	ldr	r1, [pc, #220]	; (8002da8 <HAL_GPIO_Init+0x334>)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	3302      	adds	r3, #2
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cfa:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d00:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d24:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d4e:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d78:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <HAL_GPIO_Init+0x350>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f47f ae78 	bne.w	8002a84 <HAL_GPIO_Init+0x10>
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40010000 	.word	0x40010000
 8002dac:	48000400 	.word	0x48000400
 8002db0:	48000800 	.word	0x48000800
 8002db4:	48000c00 	.word	0x48000c00
 8002db8:	48001000 	.word	0x48001000
 8002dbc:	48001400 	.word	0x48001400
 8002dc0:	48001800 	.word	0x48001800
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	e001      	b.n	8002dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fff2 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e08d      	b.n	8002f56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe ff68 	bl	8001d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e006      	b.n	8002eb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d108      	bne.n	8002eca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	e007      	b.n	8002eda <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002efc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69d9      	ldr	r1, [r3, #28]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	817b      	strh	r3, [r7, #10]
 8002f72:	460b      	mov	r3, r1
 8002f74:	813b      	strh	r3, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	f040 80fd 	bne.w	8003182 <HAL_I2C_Mem_Write+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x34>
 8002f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0f1      	b.n	8003184 <HAL_I2C_Mem_Write+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_I2C_Mem_Write+0x4e>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e0ea      	b.n	8003184 <HAL_I2C_Mem_Write+0x224>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fb6:	f7ff f9e3 	bl	8002380 <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2319      	movs	r3, #25
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fac7 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0d5      	b.n	8003184 <HAL_I2C_Mem_Write+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2221      	movs	r2, #33	; 0x21
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003000:	88f8      	ldrh	r0, [r7, #6]
 8003002:	893a      	ldrh	r2, [r7, #8]
 8003004:	8979      	ldrh	r1, [r7, #10]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	4603      	mov	r3, r0
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f9d7 	bl	80033c4 <I2C_RequestMemoryWrite>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0ad      	b.n	8003184 <HAL_I2C_Mem_Write+0x224>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2bff      	cmp	r3, #255	; 0xff
 8003030:	d90e      	bls.n	8003050 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	22ff      	movs	r2, #255	; 0xff
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	b2da      	uxtb	r2, r3
 800303e:	8979      	ldrh	r1, [r7, #10]
 8003040:	2300      	movs	r3, #0
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fc41 	bl	80038d0 <I2C_TransferConfig>
 800304e:	e00f      	b.n	8003070 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	b2da      	uxtb	r2, r3
 8003060:	8979      	ldrh	r1, [r7, #10]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fc30 	bl	80038d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fac0 	bl	80035fa <I2C_WaitOnTXISFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e07f      	b.n	8003184 <HAL_I2C_Mem_Write+0x224>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d034      	beq.n	8003128 <HAL_I2C_Mem_Write+0x1c8>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d130      	bne.n	8003128 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	2200      	movs	r2, #0
 80030ce:	2180      	movs	r1, #128	; 0x80
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fa43 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e051      	b.n	8003184 <HAL_I2C_Mem_Write+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2bff      	cmp	r3, #255	; 0xff
 80030e8:	d90e      	bls.n	8003108 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	8979      	ldrh	r1, [r7, #10]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fbe5 	bl	80038d0 <I2C_TransferConfig>
 8003106:	e00f      	b.n	8003128 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	b2da      	uxtb	r2, r3
 8003118:	8979      	ldrh	r1, [r7, #10]
 800311a:	2300      	movs	r3, #0
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fbd4 	bl	80038d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d19e      	bne.n	8003070 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 faa6 	bl	8003688 <I2C_WaitOnSTOPFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e01e      	b.n	8003184 <HAL_I2C_Mem_Write+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2220      	movs	r2, #32
 800314c:	61da      	str	r2, [r3, #28]

    /* Clear NAK flag */

    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2210      	movs	r2, #16
 8003154:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_I2C_Mem_Write+0x22c>)
 8003162:	400b      	ands	r3, r1
 8003164:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_I2C_Mem_Write+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	fe00e800 	.word	0xfe00e800

08003190 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	f040 80fd 	bne.w	80033b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_I2C_Mem_Read+0x34>
 80031be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0f1      	b.n	80033b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_I2C_Mem_Read+0x4e>
 80031da:	2302      	movs	r3, #2
 80031dc:	e0ea      	b.n	80033b4 <HAL_I2C_Mem_Read+0x224>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031e6:	f7ff f8cb 	bl	8002380 <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2319      	movs	r3, #25
 80031f2:	2201      	movs	r2, #1
 80031f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 f9af 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0d5      	b.n	80033b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2222      	movs	r2, #34	; 0x22
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2240      	movs	r2, #64	; 0x40
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003228:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003230:	88f8      	ldrh	r0, [r7, #6]
 8003232:	893a      	ldrh	r2, [r7, #8]
 8003234:	8979      	ldrh	r1, [r7, #10]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4603      	mov	r3, r0
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f913 	bl	800346c <I2C_RequestMemoryRead>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0ad      	b.n	80033b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2bff      	cmp	r3, #255	; 0xff
 8003260:	d90e      	bls.n	8003280 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	b2da      	uxtb	r2, r3
 800326e:	8979      	ldrh	r1, [r7, #10]
 8003270:	4b52      	ldr	r3, [pc, #328]	; (80033bc <HAL_I2C_Mem_Read+0x22c>)
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fb29 	bl	80038d0 <I2C_TransferConfig>
 800327e:	e00f      	b.n	80032a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	b2da      	uxtb	r2, r3
 8003290:	8979      	ldrh	r1, [r7, #10]
 8003292:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_I2C_Mem_Read+0x22c>)
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fb18 	bl	80038d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	2200      	movs	r2, #0
 80032a8:	2104      	movs	r1, #4
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f956 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07c      	b.n	80033b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d034      	beq.n	8003360 <HAL_I2C_Mem_Read+0x1d0>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d130      	bne.n	8003360 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	2200      	movs	r2, #0
 8003306:	2180      	movs	r1, #128	; 0x80
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f927 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e04d      	b.n	80033b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2bff      	cmp	r3, #255	; 0xff
 8003320:	d90e      	bls.n	8003340 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	22ff      	movs	r2, #255	; 0xff
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	b2da      	uxtb	r2, r3
 800332e:	8979      	ldrh	r1, [r7, #10]
 8003330:	2300      	movs	r3, #0
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 fac9 	bl	80038d0 <I2C_TransferConfig>
 800333e:	e00f      	b.n	8003360 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334e:	b2da      	uxtb	r2, r3
 8003350:	8979      	ldrh	r1, [r7, #10]
 8003352:	2300      	movs	r3, #0
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fab8 	bl	80038d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d19a      	bne.n	80032a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f98a 	bl	8003688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e01a      	b.n	80033b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2220      	movs	r2, #32
 8003384:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_I2C_Mem_Read+0x230>)
 8003392:	400b      	ands	r3, r1
 8003394:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
  }
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	80002400 	.word	0x80002400
 80033c0:	fe00e800 	.word	0xfe00e800

080033c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	4608      	mov	r0, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	461a      	mov	r2, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	817b      	strh	r3, [r7, #10]
 80033d6:	460b      	mov	r3, r1
 80033d8:	813b      	strh	r3, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	8979      	ldrh	r1, [r7, #10]
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <I2C_RequestMemoryWrite+0xa4>)
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fa6f 	bl	80038d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f2:	69fa      	ldr	r2, [r7, #28]
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f8ff 	bl	80035fa <I2C_WaitOnTXISFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e02c      	b.n	8003460 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d105      	bne.n	8003418 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800340c:	893b      	ldrh	r3, [r7, #8]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
 8003416:	e015      	b.n	8003444 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003418:	893b      	ldrh	r3, [r7, #8]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	b29b      	uxth	r3, r3
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	69b9      	ldr	r1, [r7, #24]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f8e5 	bl	80035fa <I2C_WaitOnTXISFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e012      	b.n	8003460 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800343a:	893b      	ldrh	r3, [r7, #8]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2200      	movs	r2, #0
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f884 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	80002000 	.word	0x80002000

0800346c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4603      	mov	r3, r0
 800347c:	817b      	strh	r3, [r7, #10]
 800347e:	460b      	mov	r3, r1
 8003480:	813b      	strh	r3, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	8979      	ldrh	r1, [r7, #10]
 800348c:	4b20      	ldr	r3, [pc, #128]	; (8003510 <I2C_RequestMemoryRead+0xa4>)
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2300      	movs	r3, #0
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fa1c 	bl	80038d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	69b9      	ldr	r1, [r7, #24]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f8ac 	bl	80035fa <I2C_WaitOnTXISFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e02c      	b.n	8003506 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d105      	bne.n	80034be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034b2:	893b      	ldrh	r3, [r7, #8]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	629a      	str	r2, [r3, #40]	; 0x28
 80034bc:	e015      	b.n	80034ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034be:	893b      	ldrh	r3, [r7, #8]
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	69b9      	ldr	r1, [r7, #24]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f892 	bl	80035fa <I2C_WaitOnTXISFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e012      	b.n	8003506 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034e0:	893b      	ldrh	r3, [r7, #8]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2140      	movs	r1, #64	; 0x40
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f831 	bl	800355c <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	80002000 	.word	0x80002000

08003514 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d103      	bne.n	8003532 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d007      	beq.n	8003550 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	619a      	str	r2, [r3, #24]
  }
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356c:	e031      	b.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d02d      	beq.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fe ff03 	bl	8002380 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d122      	bne.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	429a      	cmp	r2, r3
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d113      	bne.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00f      	b.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4013      	ands	r3, r2
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	429a      	cmp	r2, r3
 80035e0:	bf0c      	ite	eq
 80035e2:	2301      	moveq	r3, #1
 80035e4:	2300      	movne	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d0be      	beq.n	800356e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003606:	e033      	b.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f87f 	bl	8003710 <I2C_IsErrorOccurred>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e031      	b.n	8003680 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d025      	beq.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003624:	f7fe feac 	bl	8002380 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11a      	bne.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d013      	beq.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e007      	b.n	8003680 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d1c4      	bne.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003694:	e02f      	b.n	80036f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f838 	bl	8003710 <I2C_IsErrorOccurred>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e02d      	b.n	8003706 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe fe69 	bl	8002380 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d11a      	bne.n	80036f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d013      	beq.n	80036f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f043 0220 	orr.w	r2, r3, #32
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e007      	b.n	8003706 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b20      	cmp	r3, #32
 8003702:	d1c8      	bne.n	8003696 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d068      	beq.n	800380e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2210      	movs	r2, #16
 8003742:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003744:	e049      	b.n	80037da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d045      	beq.n	80037da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7fe fe17 	bl	8002380 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	d302      	bcc.n	8003764 <I2C_IsErrorOccurred+0x54>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d13a      	bne.n	80037da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003776:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003786:	d121      	bne.n	80037cc <I2C_IsErrorOccurred+0xbc>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800378e:	d01d      	beq.n	80037cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003790:	7cfb      	ldrb	r3, [r7, #19]
 8003792:	2b20      	cmp	r3, #32
 8003794:	d01a      	beq.n	80037cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80037a6:	f7fe fdeb 	bl	8002380 <HAL_GetTick>
 80037aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ac:	e00e      	b.n	80037cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80037ae:	f7fe fde7 	bl	8002380 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b19      	cmp	r3, #25
 80037ba:	d907      	bls.n	80037cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	f043 0320 	orr.w	r3, r3, #32
 80037c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80037ca:	e006      	b.n	80037da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d1e9      	bne.n	80037ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d003      	beq.n	80037f0 <I2C_IsErrorOccurred+0xe0>
 80037e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0aa      	beq.n	8003746 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d103      	bne.n	8003800 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2220      	movs	r2, #32
 80037fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003830:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003852:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003874:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800387c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01c      	beq.n	80038be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff fe45 	bl	8003514 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <I2C_IsErrorOccurred+0x1bc>)
 8003896:	400b      	ands	r3, r1
 8003898:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	431a      	orrs	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3728      	adds	r7, #40	; 0x28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	fe00e800 	.word	0xfe00e800

080038d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	817b      	strh	r3, [r7, #10]
 80038de:	4613      	mov	r3, r2
 80038e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e2:	897b      	ldrh	r3, [r7, #10]
 80038e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038e8:	7a7b      	ldrb	r3, [r7, #9]
 80038ea:	041b      	lsls	r3, r3, #16
 80038ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	0d5b      	lsrs	r3, r3, #21
 800390a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <I2C_TransferConfig+0x60>)
 8003910:	430b      	orrs	r3, r1
 8003912:	43db      	mvns	r3, r3
 8003914:	ea02 0103 	and.w	r1, r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	03ff63ff 	.word	0x03ff63ff

08003934 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b20      	cmp	r3, #32
 8003948:	d138      	bne.n	80039bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003954:	2302      	movs	r3, #2
 8003956:	e032      	b.n	80039be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2224      	movs	r2, #36	; 0x24
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003986:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6819      	ldr	r1, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b20      	cmp	r3, #32
 80039de:	d139      	bne.n	8003a54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e033      	b.n	8003a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2224      	movs	r2, #36	; 0x24
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	021b      	lsls	r3, r3, #8
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a64:	b08f      	sub	sp, #60	; 0x3c
 8003a66:	af0a      	add	r7, sp, #40	; 0x28
 8003a68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e116      	b.n	8003ca2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f00c faca 	bl	8010028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2203      	movs	r2, #3
 8003a98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f005 fefd 	bl	80098b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	687e      	ldr	r6, [r7, #4]
 8003ac0:	466d      	mov	r5, sp
 8003ac2:	f106 0410 	add.w	r4, r6, #16
 8003ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ace:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad6:	1d33      	adds	r3, r6, #4
 8003ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ada:	6838      	ldr	r0, [r7, #0]
 8003adc:	f005 fe10 	bl	8009700 <USB_CoreInit>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0d7      	b.n	8003ca2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f005 feeb 	bl	80098d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	e04a      	b.n	8003b9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	333d      	adds	r3, #61	; 0x3d
 8003b14:	2201      	movs	r2, #1
 8003b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	333c      	adds	r3, #60	; 0x3c
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	b298      	uxth	r0, r3
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3356      	adds	r3, #86	; 0x56
 8003b40:	4602      	mov	r2, r0
 8003b42:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	3340      	adds	r3, #64	; 0x40
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	3344      	adds	r3, #68	; 0x44
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	3348      	adds	r3, #72	; 0x48
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	334c      	adds	r3, #76	; 0x4c
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	3301      	adds	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d3af      	bcc.n	8003b04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e044      	b.n	8003c34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	3301      	adds	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3b5      	bcc.n	8003baa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	687e      	ldr	r6, [r7, #4]
 8003c46:	466d      	mov	r5, sp
 8003c48:	f106 0410 	add.w	r4, r6, #16
 8003c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c58:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c5c:	1d33      	adds	r3, r6, #4
 8003c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c60:	6838      	ldr	r0, [r7, #0]
 8003c62:	f005 fe83 	bl	800996c <USB_DevInit>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e014      	b.n	8003ca2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f001 f869 	bl	8004d68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f006 fe31 	bl	800a902 <USB_DevDisconnect>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003caa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_PCD_Start+0x1c>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e01c      	b.n	8003d00 <HAL_PCD_Start+0x56>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d105      	bne.n	8003ce2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f005 fdd2 	bl	8009890 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f006 fde5 	bl	800a8c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d08:	b590      	push	{r4, r7, lr}
 8003d0a:	b08d      	sub	sp, #52	; 0x34
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f006 fea3 	bl	800aa6a <USB_GetMode>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 847e 	bne.w	8004628 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f006 fe07 	bl	800a944 <USB_ReadInterrupts>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8474 	beq.w	8004626 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f006 fdf4 	bl	800a944 <USB_ReadInterrupts>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d107      	bne.n	8003d76 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f002 0202 	and.w	r2, r2, #2
 8003d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f006 fde2 	bl	800a944 <USB_ReadInterrupts>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d161      	bne.n	8003e4e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0210 	bic.w	r2, r2, #16
 8003d98:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	3304      	adds	r3, #4
 8003db8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	0c5b      	lsrs	r3, r3, #17
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d124      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d035      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ddc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	6a38      	ldr	r0, [r7, #32]
 8003de6:	f006 fc19 	bl	800a61c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003df6:	441a      	add	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e08:	441a      	add	r2, r3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	615a      	str	r2, [r3, #20]
 8003e0e:	e016      	b.n	8003e3e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	0c5b      	lsrs	r3, r3, #17
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	2b06      	cmp	r3, #6
 8003e1a:	d110      	bne.n	8003e3e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e22:	2208      	movs	r2, #8
 8003e24:	4619      	mov	r1, r3
 8003e26:	6a38      	ldr	r0, [r7, #32]
 8003e28:	f006 fbf8 	bl	800a61c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e38:	441a      	add	r2, r3
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f042 0210 	orr.w	r2, r2, #16
 8003e4c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f006 fd76 	bl	800a944 <USB_ReadInterrupts>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e62:	f040 80a7 	bne.w	8003fb4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f006 fd7b 	bl	800a96a <USB_ReadDevAllOutEpInterrupt>
 8003e74:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e76:	e099      	b.n	8003fac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 808e 	beq.w	8003fa0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f006 fd9f 	bl	800a9d2 <USB_ReadDevOutEPInterrupt>
 8003e94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00c      	beq.n	8003eba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	461a      	mov	r2, r3
 8003eae:	2301      	movs	r3, #1
 8003eb0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003eb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fe7d 	bl	8004bb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 feb9 	bl	8004c50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d030      	beq.n	8003f66 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0c:	2b80      	cmp	r3, #128	; 0x80
 8003f0e:	d109      	bne.n	8003f24 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f22:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	3304      	adds	r3, #4
 8003f38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	78db      	ldrb	r3, [r3, #3]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d108      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2200      	movs	r2, #0
 8003f46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f00c f9b0 	bl	80102b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	461a      	mov	r2, r3
 8003f62:	2302      	movs	r3, #2
 8003f64:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2320      	movs	r3, #32
 8003f80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d009      	beq.n	8003fa0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f9e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f47f af62 	bne.w	8003e78 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f006 fcc3 	bl	800a944 <USB_ReadInterrupts>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fc8:	f040 80a4 	bne.w	8004114 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f006 fce4 	bl	800a99e <USB_ReadDevAllInEpInterrupt>
 8003fd6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003fdc:	e096      	b.n	800410c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 808b 	beq.w	8004100 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f006 fd0a 	bl	800aa0e <USB_ReadDevInEPInterrupt>
 8003ffa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d020      	beq.n	8004048 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	2201      	movs	r2, #1
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	43db      	mvns	r3, r3
 8004020:	69f9      	ldr	r1, [r7, #28]
 8004022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004026:	4013      	ands	r3, r2
 8004028:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004036:	461a      	mov	r2, r3
 8004038:	2301      	movs	r3, #1
 800403a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	b2db      	uxtb	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f00c f8a1 	bl	801018a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405e:	461a      	mov	r2, r3
 8004060:	2308      	movs	r3, #8
 8004062:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407a:	461a      	mov	r2, r3
 800407c:	2310      	movs	r3, #16
 800407e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	461a      	mov	r2, r3
 8004098:	2340      	movs	r3, #64	; 0x40
 800409a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d023      	beq.n	80040ee <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80040a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a8:	6a38      	ldr	r0, [r7, #32]
 80040aa:	f005 fda1 	bl	8009bf0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	3338      	adds	r3, #56	; 0x38
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	3304      	adds	r3, #4
 80040c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	78db      	ldrb	r3, [r3, #3]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d108      	bne.n	80040dc <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f00c f8fe 	bl	80102d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	461a      	mov	r2, r3
 80040ea:	2302      	movs	r3, #2
 80040ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fcd2 	bl	8004aa4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	3301      	adds	r3, #1
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	f47f af65 	bne.w	8003fde <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f006 fc13 	bl	800a944 <USB_ReadInterrupts>
 800411e:	4603      	mov	r3, r0
 8004120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004128:	d122      	bne.n	8004170 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004144:	2b01      	cmp	r3, #1
 8004146:	d108      	bne.n	800415a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004150:	2100      	movs	r1, #0
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f00c fb32 	bl	80107bc <HAL_PCDEx_LPM_Callback>
 8004158:	e002      	b.n	8004160 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f00c f882 	bl	8010264 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800416e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f006 fbe5 	bl	800a944 <USB_ReadInterrupts>
 800417a:	4603      	mov	r3, r0
 800417c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004184:	d112      	bne.n	80041ac <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d102      	bne.n	800419c <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f00c f83e 	bl	8010218 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80041aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f006 fbc7 	bl	800a944 <USB_ReadInterrupts>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041c0:	d121      	bne.n	8004206 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80041d0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d111      	bne.n	8004200 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80041f6:	2101      	movs	r1, #1
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f00c fadf 	bl	80107bc <HAL_PCDEx_LPM_Callback>
 80041fe:	e002      	b.n	8004206 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f00c f809 	bl	8010218 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f006 fb9a 	bl	800a944 <USB_ReadInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421a:	f040 80b5 	bne.w	8004388 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2110      	movs	r1, #16
 8004238:	4618      	mov	r0, r3
 800423a:	f005 fcd9 	bl	8009bf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004242:	e046      	b.n	80042d2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	461a      	mov	r2, r3
 8004252:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004256:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	440a      	add	r2, r1
 800426e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004272:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004276:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	461a      	mov	r2, r3
 8004286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800428a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429c:	0151      	lsls	r1, r2, #5
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	440a      	add	r2, r1
 80042a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	3301      	adds	r3, #1
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d8:	429a      	cmp	r2, r3
 80042da:	d3b3      	bcc.n	8004244 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80042ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d016      	beq.n	8004326 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004308:	f043 030b 	orr.w	r3, r3, #11
 800430c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800431e:	f043 030b 	orr.w	r3, r3, #11
 8004322:	6453      	str	r3, [r2, #68]	; 0x44
 8004324:	e015      	b.n	8004352 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004338:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800433c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800434c:	f043 030b 	orr.w	r3, r3, #11
 8004350:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004360:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004364:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f006 fbaa 	bl	800aacc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f006 fad9 	bl	800a944 <USB_ReadInterrupts>
 8004392:	4603      	mov	r3, r0
 8004394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439c:	d124      	bne.n	80043e8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f006 fb6f 	bl	800aa86 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f005 fc9c 	bl	8009cea <USB_GetDevSpeed>
 80043b2:	4603      	mov	r3, r0
 80043b4:	461a      	mov	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681c      	ldr	r4, [r3, #0]
 80043be:	f001 faed 	bl	800599c <HAL_RCC_GetHCLKFreq>
 80043c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	4620      	mov	r0, r4
 80043ce:	f005 f9c3 	bl	8009758 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f00b ff01 	bl	80101da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80043e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f006 faa9 	bl	800a944 <USB_ReadInterrupts>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d10a      	bne.n	8004412 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f00b fede 	bl	80101be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f002 0208 	and.w	r2, r2, #8
 8004410:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f006 fa94 	bl	800a944 <USB_ReadInterrupts>
 800441c:	4603      	mov	r3, r0
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d122      	bne.n	800446c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004432:	2301      	movs	r3, #1
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e014      	b.n	8004462 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	b2db      	uxtb	r3, r3
 8004454:	4619      	mov	r1, r3
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 faf3 	bl	8004a42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	3301      	adds	r3, #1
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004468:	429a      	cmp	r2, r3
 800446a:	d3e5      	bcc.n	8004438 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f006 fa67 	bl	800a944 <USB_ReadInterrupts>
 8004476:	4603      	mov	r3, r0
 8004478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004480:	d13b      	bne.n	80044fa <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004482:	2301      	movs	r3, #1
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	e02b      	b.n	80044e0 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	3340      	adds	r3, #64	; 0x40
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d115      	bne.n	80044da <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80044ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	da12      	bge.n	80044da <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	333f      	adds	r3, #63	; 0x3f
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fab4 	bl	8004a42 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	3301      	adds	r3, #1
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d3ce      	bcc.n	8004488 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80044f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f006 fa20 	bl	800a944 <USB_ReadInterrupts>
 8004504:	4603      	mov	r3, r0
 8004506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800450a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800450e:	d155      	bne.n	80045bc <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004510:	2301      	movs	r3, #1
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
 8004514:	e045      	b.n	80045a2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	440b      	add	r3, r1
 8004534:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d12e      	bne.n	800459c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800453e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004540:	2b00      	cmp	r3, #0
 8004542:	da2b      	bge.n	800459c <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004550:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004554:	429a      	cmp	r2, r3
 8004556:	d121      	bne.n	800459c <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004598:	6053      	str	r3, [r2, #4]
            break;
 800459a:	e007      	b.n	80045ac <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	3301      	adds	r3, #1
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d3b4      	bcc.n	8004516 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80045ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f006 f9bf 	bl	800a944 <USB_ReadInterrupts>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d10a      	bne.n	80045e8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f00b fe92 	bl	80102fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80045e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f006 f9a9 	bl	800a944 <USB_ReadInterrupts>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d115      	bne.n	8004628 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f00b fe82 	bl	8010318 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]
 8004624:	e000      	b.n	8004628 <HAL_PCD_IRQHandler+0x920>
      return;
 8004626:	bf00      	nop
    }
  }
}
 8004628:	3734      	adds	r7, #52	; 0x34
 800462a:	46bd      	mov	sp, r7
 800462c:	bd90      	pop	{r4, r7, pc}

0800462e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_PCD_SetAddress+0x1a>
 8004644:	2302      	movs	r3, #2
 8004646:	e013      	b.n	8004670 <HAL_PCD_SetAddress+0x42>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f006 f907 	bl	800a874 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	4608      	mov	r0, r1
 8004682:	4611      	mov	r1, r2
 8004684:	461a      	mov	r2, r3
 8004686:	4603      	mov	r3, r0
 8004688:	70fb      	strb	r3, [r7, #3]
 800468a:	460b      	mov	r3, r1
 800468c:	803b      	strh	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da0f      	bge.n	80046be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	3338      	adds	r3, #56	; 0x38
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	3304      	adds	r3, #4
 80046b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	705a      	strb	r2, [r3, #1]
 80046bc:	e00f      	b.n	80046de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	3304      	adds	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046ea:	883a      	ldrh	r2, [r7, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	78ba      	ldrb	r2, [r7, #2]
 80046f4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004708:	78bb      	ldrb	r3, [r7, #2]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d102      	bne.n	8004714 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_PCD_EP_Open+0xaa>
 800471e:	2302      	movs	r3, #2
 8004720:	e00e      	b.n	8004740 <HAL_PCD_EP_Open+0xc8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	4618      	mov	r0, r3
 8004732:	f005 faf9 	bl	8009d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800473e:	7afb      	ldrb	r3, [r7, #11]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004758:	2b00      	cmp	r3, #0
 800475a:	da0f      	bge.n	800477c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	f003 020f 	and.w	r2, r3, #15
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	3338      	adds	r3, #56	; 0x38
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	4413      	add	r3, r2
 8004770:	3304      	adds	r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	705a      	strb	r2, [r3, #1]
 800477a:	e00f      	b.n	800479c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	4613      	mov	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	3304      	adds	r3, #4
 8004794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_PCD_EP_Close+0x6e>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e00e      	b.n	80047d4 <HAL_PCD_EP_Close+0x8c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f005 fb37 	bl	8009e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	460b      	mov	r3, r1
 80047ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047ec:	7afb      	ldrb	r3, [r7, #11]
 80047ee:	f003 020f 	and.w	r2, r3, #15
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4413      	add	r3, r2
 8004802:	3304      	adds	r3, #4
 8004804:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2200      	movs	r2, #0
 8004816:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800481e:	7afb      	ldrb	r3, [r7, #11]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	b2da      	uxtb	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6979      	ldr	r1, [r7, #20]
 8004830:	4618      	mov	r0, r3
 8004832:	f005 fbdd 	bl	8009ff0 <USB_EPStartXfer>

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	f003 020f 	and.w	r2, r3, #15
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004862:	681b      	ldr	r3, [r3, #0]
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	460b      	mov	r3, r1
 800487e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004880:	7afb      	ldrb	r3, [r7, #11]
 8004882:	f003 020f 	and.w	r2, r3, #15
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	3338      	adds	r3, #56	; 0x38
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	3304      	adds	r3, #4
 8004896:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2201      	movs	r2, #1
 80048ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048b0:	7afb      	ldrb	r3, [r7, #11]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6979      	ldr	r1, [r7, #20]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f005 fb94 	bl	8009ff0 <USB_EPStartXfer>

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	f003 020f 	and.w	r2, r3, #15
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d901      	bls.n	80048f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e04e      	b.n	800498e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da0f      	bge.n	8004918 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	f003 020f 	and.w	r2, r3, #15
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	3338      	adds	r3, #56	; 0x38
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4413      	add	r3, r2
 800490c:	3304      	adds	r3, #4
 800490e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	705a      	strb	r2, [r3, #1]
 8004916:	e00d      	b.n	8004934 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	4613      	mov	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4413      	add	r3, r2
 800492a:	3304      	adds	r3, #4
 800492c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_PCD_EP_SetStall+0x82>
 8004950:	2302      	movs	r3, #2
 8004952:	e01c      	b.n	800498e <HAL_PCD_EP_SetStall+0xbc>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68f9      	ldr	r1, [r7, #12]
 8004962:	4618      	mov	r0, r3
 8004964:	f005 feb2 	bl	800a6cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	2b00      	cmp	r3, #0
 8004970:	d108      	bne.n	8004984 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f006 f8a4 	bl	800aacc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	460b      	mov	r3, r1
 80049a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	f003 020f 	and.w	r2, r3, #15
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d901      	bls.n	80049b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e042      	b.n	8004a3a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	da0f      	bge.n	80049dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	3338      	adds	r3, #56	; 0x38
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	705a      	strb	r2, [r3, #1]
 80049da:	e00f      	b.n	80049fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 020f 	and.w	r2, r3, #15
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	3304      	adds	r3, #4
 80049f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_PCD_EP_ClrStall+0x86>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e00e      	b.n	8004a3a <HAL_PCD_EP_ClrStall+0xa4>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f005 febc 	bl	800a7a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	da0c      	bge.n	8004a70 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	f003 020f 	and.w	r2, r3, #15
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	3338      	adds	r3, #56	; 0x38
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e00c      	b.n	8004a8a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	f003 020f 	and.w	r2, r3, #15
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	3304      	adds	r3, #4
 8004a88:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f005 fcdf 	bl	800a454 <USB_EPStopXfer>
 8004a96:	4603      	mov	r3, r0
 8004a98:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a9a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	3338      	adds	r3, #56	; 0x38
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3304      	adds	r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d901      	bls.n	8004adc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e067      	b.n	8004bac <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d902      	bls.n	8004af8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	3303      	adds	r3, #3
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b00:	e026      	b.n	8004b50 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d902      	bls.n	8004b1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3303      	adds	r3, #3
 8004b22:	089b      	lsrs	r3, r3, #2
 8004b24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68d9      	ldr	r1, [r3, #12]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	f005 fd38 	bl	800a5a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	441a      	add	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	441a      	add	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d809      	bhi.n	8004b7a <PCD_WriteEmptyTxFifo+0xd6>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	695a      	ldr	r2, [r3, #20]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d203      	bcs.n	8004b7a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1c3      	bne.n	8004b02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d811      	bhi.n	8004baa <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	6939      	ldr	r1, [r7, #16]
 8004ba2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3720      	adds	r7, #32
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	333c      	adds	r3, #60	; 0x3c
 8004bcc:	3304      	adds	r3, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <PCD_EP_OutXfrComplete_int+0x98>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d124      	bne.n	8004c34 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	461a      	mov	r2, r3
 8004c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c06:	6093      	str	r3, [r2, #8]
 8004c08:	e01a      	b.n	8004c40 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	2320      	movs	r3, #32
 8004c24:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f00b fa91 	bl	8010154 <HAL_PCD_DataOutStageCallback>
 8004c32:	e005      	b.n	8004c40 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f00b fa8a 	bl	8010154 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	4f54310a 	.word	0x4f54310a

08004c50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	333c      	adds	r3, #60	; 0x3c
 8004c68:	3304      	adds	r3, #4
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <PCD_EP_OutSetupPacket_int+0x64>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d90e      	bls.n	8004ca4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f00b fa43 	bl	8010130 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	4f54300a 	.word	0x4f54300a

08004cb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004cd6:	883b      	ldrh	r3, [r7, #0]
 8004cd8:	0419      	lsls	r1, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ce4:	e028      	b.n	8004d38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e00d      	b.n	8004d16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	3340      	adds	r3, #64	; 0x40
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	3301      	adds	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
 8004d16:	7bfa      	ldrb	r2, [r7, #15]
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d3ec      	bcc.n	8004cfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d20:	883b      	ldrh	r3, [r7, #0]
 8004d22:	0418      	lsls	r0, r3, #16
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6819      	ldr	r1, [r3, #0]
 8004d28:	78fb      	ldrb	r3, [r7, #3]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	4302      	orrs	r2, r0
 8004d30:	3340      	adds	r3, #64	; 0x40
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	887a      	ldrh	r2, [r7, #2]
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	f043 0303 	orr.w	r3, r3, #3
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004db4:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40007000 	.word	0x40007000

08004dcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dda:	d130      	bne.n	8004e3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ddc:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de8:	d038      	beq.n	8004e5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dea:	4b20      	ldr	r3, [pc, #128]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004df2:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004df4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004df8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2232      	movs	r2, #50	; 0x32
 8004e00:	fb02 f303 	mul.w	r3, r2, r3
 8004e04:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	0c9b      	lsrs	r3, r3, #18
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e10:	e002      	b.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e24:	d102      	bne.n	8004e2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f2      	bne.n	8004e12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e38:	d110      	bne.n	8004e5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e00f      	b.n	8004e5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4a:	d007      	beq.n	8004e5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e54:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	20000000 	.word	0x20000000
 8004e74:	431bde83 	.word	0x431bde83

08004e78 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e86:	6053      	str	r3, [r2, #4]
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40007000 	.word	0x40007000

08004e98 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 0307 	bic.w	r3, r3, #7
 8004ea4:	4a07      	ldr	r2, [pc, #28]	; (8004ec4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8004ea6:	f043 0304 	orr.w	r3, r3, #4
 8004eaa:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	4a05      	ldr	r2, [pc, #20]	; (8004ec8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8004eb2:	f043 0304 	orr.w	r3, r3, #4
 8004eb6:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004eb8:	bf30      	wfi
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	e000ed00 	.word	0xe000ed00

08004ecc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e3ca      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ede:	4b97      	ldr	r3, [pc, #604]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ee8:	4b94      	ldr	r3, [pc, #592]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80e4 	beq.w	80050c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_RCC_OscConfig+0x4a>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	f040 808b 	bne.w	8005024 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	f040 8087 	bne.w	8005024 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f16:	4b89      	ldr	r3, [pc, #548]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_RCC_OscConfig+0x62>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e3a2      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1a      	ldr	r2, [r3, #32]
 8004f32:	4b82      	ldr	r3, [pc, #520]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <HAL_RCC_OscConfig+0x7c>
 8004f3e:	4b7f      	ldr	r3, [pc, #508]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f46:	e005      	b.n	8004f54 <HAL_RCC_OscConfig+0x88>
 8004f48:	4b7c      	ldr	r3, [pc, #496]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d223      	bcs.n	8004fa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fd55 	bl	8005a0c <RCC_SetFlashLatencyFromMSIRange>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e383      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f6c:	4b73      	ldr	r3, [pc, #460]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a72      	ldr	r2, [pc, #456]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f72:	f043 0308 	orr.w	r3, r3, #8
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	4b70      	ldr	r3, [pc, #448]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	496d      	ldr	r1, [pc, #436]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f8a:	4b6c      	ldr	r3, [pc, #432]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	4968      	ldr	r1, [pc, #416]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	604b      	str	r3, [r1, #4]
 8004f9e:	e025      	b.n	8004fec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fa0:	4b66      	ldr	r3, [pc, #408]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a65      	ldr	r2, [pc, #404]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004fa6:	f043 0308 	orr.w	r3, r3, #8
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	4b63      	ldr	r3, [pc, #396]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	4960      	ldr	r1, [pc, #384]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fbe:	4b5f      	ldr	r3, [pc, #380]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	495b      	ldr	r1, [pc, #364]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fd15 	bl	8005a0c <RCC_SetFlashLatencyFromMSIRange>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e343      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fec:	f000 fc4a 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b52      	ldr	r3, [pc, #328]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	4950      	ldr	r1, [pc, #320]	; (8005140 <HAL_RCC_OscConfig+0x274>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
 8005008:	4a4e      	ldr	r2, [pc, #312]	; (8005144 <HAL_RCC_OscConfig+0x278>)
 800500a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800500c:	4b4e      	ldr	r3, [pc, #312]	; (8005148 <HAL_RCC_OscConfig+0x27c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fd f965 	bl	80022e0 <HAL_InitTick>
 8005016:	4603      	mov	r3, r0
 8005018:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d052      	beq.n	80050c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	e327      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d032      	beq.n	8005092 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800502c:	4b43      	ldr	r3, [pc, #268]	; (800513c <HAL_RCC_OscConfig+0x270>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a42      	ldr	r2, [pc, #264]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005038:	f7fd f9a2 	bl	8002380 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005040:	f7fd f99e 	bl	8002380 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e310      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005052:	4b3a      	ldr	r3, [pc, #232]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800505e:	4b37      	ldr	r3, [pc, #220]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a36      	ldr	r2, [pc, #216]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005064:	f043 0308 	orr.w	r3, r3, #8
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b34      	ldr	r3, [pc, #208]	; (800513c <HAL_RCC_OscConfig+0x270>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4931      	ldr	r1, [pc, #196]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005078:	4313      	orrs	r3, r2
 800507a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800507c:	4b2f      	ldr	r3, [pc, #188]	; (800513c <HAL_RCC_OscConfig+0x270>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	492c      	ldr	r1, [pc, #176]	; (800513c <HAL_RCC_OscConfig+0x270>)
 800508c:	4313      	orrs	r3, r2
 800508e:	604b      	str	r3, [r1, #4]
 8005090:	e01a      	b.n	80050c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005092:	4b2a      	ldr	r3, [pc, #168]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a29      	ldr	r2, [pc, #164]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800509e:	f7fd f96f 	bl	8002380 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050a6:	f7fd f96b 	bl	8002380 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e2dd      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_RCC_OscConfig+0x270>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f0      	bne.n	80050a6 <HAL_RCC_OscConfig+0x1da>
 80050c4:	e000      	b.n	80050c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d074      	beq.n	80051be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d005      	beq.n	80050e6 <HAL_RCC_OscConfig+0x21a>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	d10e      	bne.n	80050fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d10b      	bne.n	80050fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <HAL_RCC_OscConfig+0x270>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d064      	beq.n	80051bc <HAL_RCC_OscConfig+0x2f0>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d160      	bne.n	80051bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e2ba      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005106:	d106      	bne.n	8005116 <HAL_RCC_OscConfig+0x24a>
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <HAL_RCC_OscConfig+0x270>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a0b      	ldr	r2, [pc, #44]	; (800513c <HAL_RCC_OscConfig+0x270>)
 800510e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	e026      	b.n	8005164 <HAL_RCC_OscConfig+0x298>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800511e:	d115      	bne.n	800514c <HAL_RCC_OscConfig+0x280>
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a05      	ldr	r2, [pc, #20]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_RCC_OscConfig+0x270>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a02      	ldr	r2, [pc, #8]	; (800513c <HAL_RCC_OscConfig+0x270>)
 8005132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e014      	b.n	8005164 <HAL_RCC_OscConfig+0x298>
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000
 8005140:	08015220 	.word	0x08015220
 8005144:	20000000 	.word	0x20000000
 8005148:	20000004 	.word	0x20000004
 800514c:	4ba0      	ldr	r3, [pc, #640]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a9f      	ldr	r2, [pc, #636]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	4b9d      	ldr	r3, [pc, #628]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a9c      	ldr	r2, [pc, #624]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 800515e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d013      	beq.n	8005194 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fd f908 	bl	8002380 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005174:	f7fd f904 	bl	8002380 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e276      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005186:	4b92      	ldr	r3, [pc, #584]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0x2a8>
 8005192:	e014      	b.n	80051be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005194:	f7fd f8f4 	bl	8002380 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800519c:	f7fd f8f0 	bl	8002380 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b64      	cmp	r3, #100	; 0x64
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e262      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051ae:	4b88      	ldr	r3, [pc, #544]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0x2d0>
 80051ba:	e000      	b.n	80051be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d060      	beq.n	800528c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_OscConfig+0x310>
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b0c      	cmp	r3, #12
 80051d4:	d119      	bne.n	800520a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d116      	bne.n	800520a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051dc:	4b7c      	ldr	r3, [pc, #496]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_OscConfig+0x328>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e23f      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f4:	4b76      	ldr	r3, [pc, #472]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	061b      	lsls	r3, r3, #24
 8005202:	4973      	ldr	r1, [pc, #460]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005204:	4313      	orrs	r3, r2
 8005206:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005208:	e040      	b.n	800528c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d023      	beq.n	800525a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005212:	4b6f      	ldr	r3, [pc, #444]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a6e      	ldr	r2, [pc, #440]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521e:	f7fd f8af 	bl	8002380 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005226:	f7fd f8ab 	bl	8002380 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e21d      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005238:	4b65      	ldr	r3, [pc, #404]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005244:	4b62      	ldr	r3, [pc, #392]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	061b      	lsls	r3, r3, #24
 8005252:	495f      	ldr	r1, [pc, #380]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005254:	4313      	orrs	r3, r2
 8005256:	604b      	str	r3, [r1, #4]
 8005258:	e018      	b.n	800528c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800525a:	4b5d      	ldr	r3, [pc, #372]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a5c      	ldr	r2, [pc, #368]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005266:	f7fd f88b 	bl	8002380 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526e:	f7fd f887 	bl	8002380 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e1f9      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005280:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d03c      	beq.n	8005312 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01c      	beq.n	80052da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a0:	4b4b      	ldr	r3, [pc, #300]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80052a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a6:	4a4a      	ldr	r2, [pc, #296]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80052a8:	f043 0301 	orr.w	r3, r3, #1
 80052ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fd f866 	bl	8002380 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b8:	f7fd f862 	bl	8002380 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e1d4      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052ca:	4b41      	ldr	r3, [pc, #260]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80052cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0ef      	beq.n	80052b8 <HAL_RCC_OscConfig+0x3ec>
 80052d8:	e01b      	b.n	8005312 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052da:	4b3d      	ldr	r3, [pc, #244]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80052dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e0:	4a3b      	ldr	r2, [pc, #236]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ea:	f7fd f849 	bl	8002380 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f2:	f7fd f845 	bl	8002380 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e1b7      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005304:	4b32      	ldr	r3, [pc, #200]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1ef      	bne.n	80052f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80a6 	beq.w	800546c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005320:	2300      	movs	r3, #0
 8005322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005324:	4b2a      	ldr	r3, [pc, #168]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10d      	bne.n	800534c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533a:	6593      	str	r3, [r2, #88]	; 0x58
 800533c:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 800533e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005348:	2301      	movs	r3, #1
 800534a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534c:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <HAL_RCC_OscConfig+0x508>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d118      	bne.n	800538a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005358:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <HAL_RCC_OscConfig+0x508>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <HAL_RCC_OscConfig+0x508>)
 800535e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005362:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005364:	f7fd f80c 	bl	8002380 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536c:	f7fd f808 	bl	8002380 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e17a      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800537e:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <HAL_RCC_OscConfig+0x508>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d108      	bne.n	80053a4 <HAL_RCC_OscConfig+0x4d8>
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005398:	4a0d      	ldr	r2, [pc, #52]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053a2:	e029      	b.n	80053f8 <HAL_RCC_OscConfig+0x52c>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b05      	cmp	r3, #5
 80053aa:	d115      	bne.n	80053d8 <HAL_RCC_OscConfig+0x50c>
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	4a07      	ldr	r2, [pc, #28]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053bc:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	4a03      	ldr	r2, [pc, #12]	; (80053d0 <HAL_RCC_OscConfig+0x504>)
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053cc:	e014      	b.n	80053f8 <HAL_RCC_OscConfig+0x52c>
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40007000 	.word	0x40007000
 80053d8:	4b9c      	ldr	r3, [pc, #624]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	4a9b      	ldr	r2, [pc, #620]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053e8:	4b98      	ldr	r3, [pc, #608]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	4a97      	ldr	r2, [pc, #604]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80053f0:	f023 0304 	bic.w	r3, r3, #4
 80053f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d016      	beq.n	800542e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005400:	f7fc ffbe 	bl	8002380 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005406:	e00a      	b.n	800541e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005408:	f7fc ffba 	bl	8002380 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	; 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e12a      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800541e:	4b8b      	ldr	r3, [pc, #556]	; (800564c <HAL_RCC_OscConfig+0x780>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ed      	beq.n	8005408 <HAL_RCC_OscConfig+0x53c>
 800542c:	e015      	b.n	800545a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542e:	f7fc ffa7 	bl	8002380 <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005434:	e00a      	b.n	800544c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005436:	f7fc ffa3 	bl	8002380 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	f241 3288 	movw	r2, #5000	; 0x1388
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e113      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800544c:	4b7f      	ldr	r3, [pc, #508]	; (800564c <HAL_RCC_OscConfig+0x780>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1ed      	bne.n	8005436 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800545a:	7ffb      	ldrb	r3, [r7, #31]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d105      	bne.n	800546c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005460:	4b7a      	ldr	r3, [pc, #488]	; (800564c <HAL_RCC_OscConfig+0x780>)
 8005462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005464:	4a79      	ldr	r2, [pc, #484]	; (800564c <HAL_RCC_OscConfig+0x780>)
 8005466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80fe 	beq.w	8005672 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	2b02      	cmp	r3, #2
 800547c:	f040 80d0 	bne.w	8005620 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005480:	4b72      	ldr	r3, [pc, #456]	; (800564c <HAL_RCC_OscConfig+0x780>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f003 0203 	and.w	r2, r3, #3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	429a      	cmp	r2, r3
 8005492:	d130      	bne.n	80054f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	3b01      	subs	r3, #1
 80054a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d127      	bne.n	80054f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d11f      	bne.n	80054f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054c0:	2a07      	cmp	r2, #7
 80054c2:	bf14      	ite	ne
 80054c4:	2201      	movne	r2, #1
 80054c6:	2200      	moveq	r2, #0
 80054c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d113      	bne.n	80054f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	3b01      	subs	r3, #1
 80054dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d109      	bne.n	80054f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	3b01      	subs	r3, #1
 80054f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d06e      	beq.n	80055d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d069      	beq.n	80055d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054fc:	4b53      	ldr	r3, [pc, #332]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005508:	4b50      	ldr	r3, [pc, #320]	; (800564c <HAL_RCC_OscConfig+0x780>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0ad      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005518:	4b4c      	ldr	r3, [pc, #304]	; (800564c <HAL_RCC_OscConfig+0x780>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a4b      	ldr	r2, [pc, #300]	; (800564c <HAL_RCC_OscConfig+0x780>)
 800551e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005522:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005524:	f7fc ff2c 	bl	8002380 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552c:	f7fc ff28 	bl	8002380 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e09a      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800553e:	4b43      	ldr	r3, [pc, #268]	; (800564c <HAL_RCC_OscConfig+0x780>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f0      	bne.n	800552c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800554a:	4b40      	ldr	r3, [pc, #256]	; (800564c <HAL_RCC_OscConfig+0x780>)
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	4b40      	ldr	r3, [pc, #256]	; (8005650 <HAL_RCC_OscConfig+0x784>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800555a:	3a01      	subs	r2, #1
 800555c:	0112      	lsls	r2, r2, #4
 800555e:	4311      	orrs	r1, r2
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005564:	0212      	lsls	r2, r2, #8
 8005566:	4311      	orrs	r1, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800556c:	0852      	lsrs	r2, r2, #1
 800556e:	3a01      	subs	r2, #1
 8005570:	0552      	lsls	r2, r2, #21
 8005572:	4311      	orrs	r1, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005578:	0852      	lsrs	r2, r2, #1
 800557a:	3a01      	subs	r2, #1
 800557c:	0652      	lsls	r2, r2, #25
 800557e:	4311      	orrs	r1, r2
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005584:	0912      	lsrs	r2, r2, #4
 8005586:	0452      	lsls	r2, r2, #17
 8005588:	430a      	orrs	r2, r1
 800558a:	4930      	ldr	r1, [pc, #192]	; (800564c <HAL_RCC_OscConfig+0x780>)
 800558c:	4313      	orrs	r3, r2
 800558e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005590:	4b2e      	ldr	r3, [pc, #184]	; (800564c <HAL_RCC_OscConfig+0x780>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2d      	ldr	r2, [pc, #180]	; (800564c <HAL_RCC_OscConfig+0x780>)
 8005596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800559a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <HAL_RCC_OscConfig+0x780>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a2a      	ldr	r2, [pc, #168]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80055a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055a8:	f7fc feea 	bl	8002380 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fc fee6 	bl	8002380 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e058      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c2:	4b22      	ldr	r3, [pc, #136]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055ce:	e050      	b.n	8005672 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e04f      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055d4:	4b1d      	ldr	r3, [pc, #116]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d148      	bne.n	8005672 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80055e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055ec:	4b17      	ldr	r3, [pc, #92]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a16      	ldr	r2, [pc, #88]	; (800564c <HAL_RCC_OscConfig+0x780>)
 80055f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055f8:	f7fc fec2 	bl	8002380 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005600:	f7fc febe 	bl	8002380 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e030      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005612:	4b0e      	ldr	r3, [pc, #56]	; (800564c <HAL_RCC_OscConfig+0x780>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x734>
 800561e:	e028      	b.n	8005672 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b0c      	cmp	r3, #12
 8005624:	d023      	beq.n	800566e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005626:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_OscConfig+0x780>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <HAL_RCC_OscConfig+0x780>)
 800562c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005632:	f7fc fea5 	bl	8002380 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005638:	e00c      	b.n	8005654 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563a:	f7fc fea1 	bl	8002380 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d905      	bls.n	8005654 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e013      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
 800564c:	40021000 	.word	0x40021000
 8005650:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005654:	4b09      	ldr	r3, [pc, #36]	; (800567c <HAL_RCC_OscConfig+0x7b0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1ec      	bne.n	800563a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <HAL_RCC_OscConfig+0x7b0>)
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	4905      	ldr	r1, [pc, #20]	; (800567c <HAL_RCC_OscConfig+0x7b0>)
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <HAL_RCC_OscConfig+0x7b4>)
 8005668:	4013      	ands	r3, r2
 800566a:	60cb      	str	r3, [r1, #12]
 800566c:	e001      	b.n	8005672 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40021000 	.word	0x40021000
 8005680:	feeefffc 	.word	0xfeeefffc

08005684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0e7      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005698:	4b75      	ldr	r3, [pc, #468]	; (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d910      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a6:	4b72      	ldr	r3, [pc, #456]	; (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 0207 	bic.w	r2, r3, #7
 80056ae:	4970      	ldr	r1, [pc, #448]	; (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b6e      	ldr	r3, [pc, #440]	; (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0cf      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	4b66      	ldr	r3, [pc, #408]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d908      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e4:	4b63      	ldr	r3, [pc, #396]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4960      	ldr	r1, [pc, #384]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d04c      	beq.n	800579c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b03      	cmp	r3, #3
 8005708:	d107      	bne.n	800571a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800570a:	4b5a      	ldr	r3, [pc, #360]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d121      	bne.n	800575a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e0a6      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d107      	bne.n	8005732 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005722:	4b54      	ldr	r3, [pc, #336]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d115      	bne.n	800575a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e09a      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d107      	bne.n	800574a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800573a:	4b4e      	ldr	r3, [pc, #312]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e08e      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800574a:	4b4a      	ldr	r3, [pc, #296]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e086      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800575a:	4b46      	ldr	r3, [pc, #280]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f023 0203 	bic.w	r2, r3, #3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4943      	ldr	r1, [pc, #268]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005768:	4313      	orrs	r3, r2
 800576a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576c:	f7fc fe08 	bl	8002380 <HAL_GetTick>
 8005770:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005772:	e00a      	b.n	800578a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005774:	f7fc fe04 	bl	8002380 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e06e      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578a:	4b3a      	ldr	r3, [pc, #232]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 020c 	and.w	r2, r3, #12
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	429a      	cmp	r2, r3
 800579a:	d1eb      	bne.n	8005774 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d010      	beq.n	80057ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	4b31      	ldr	r3, [pc, #196]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d208      	bcs.n	80057ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b8:	4b2e      	ldr	r3, [pc, #184]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	492b      	ldr	r1, [pc, #172]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ca:	4b29      	ldr	r3, [pc, #164]	; (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d210      	bcs.n	80057fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d8:	4b25      	ldr	r3, [pc, #148]	; (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f023 0207 	bic.w	r2, r3, #7
 80057e0:	4923      	ldr	r1, [pc, #140]	; (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e8:	4b21      	ldr	r3, [pc, #132]	; (8005870 <HAL_RCC_ClockConfig+0x1ec>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d001      	beq.n	80057fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e036      	b.n	8005868 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005806:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	4918      	ldr	r1, [pc, #96]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005814:	4313      	orrs	r3, r2
 8005816:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005824:	4b13      	ldr	r3, [pc, #76]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4910      	ldr	r1, [pc, #64]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005834:	4313      	orrs	r3, r2
 8005836:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005838:	f000 f824 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 800583c:	4602      	mov	r2, r0
 800583e:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <HAL_RCC_ClockConfig+0x1f0>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	091b      	lsrs	r3, r3, #4
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	490b      	ldr	r1, [pc, #44]	; (8005878 <HAL_RCC_ClockConfig+0x1f4>)
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
 8005854:	4a09      	ldr	r2, [pc, #36]	; (800587c <HAL_RCC_ClockConfig+0x1f8>)
 8005856:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005858:	4b09      	ldr	r3, [pc, #36]	; (8005880 <HAL_RCC_ClockConfig+0x1fc>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f7fc fd3f 	bl	80022e0 <HAL_InitTick>
 8005862:	4603      	mov	r3, r0
 8005864:	72fb      	strb	r3, [r7, #11]

  return status;
 8005866:	7afb      	ldrb	r3, [r7, #11]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40022000 	.word	0x40022000
 8005874:	40021000 	.word	0x40021000
 8005878:	08015220 	.word	0x08015220
 800587c:	20000000 	.word	0x20000000
 8005880:	20000004 	.word	0x20000004

08005884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005884:	b480      	push	{r7}
 8005886:	b089      	sub	sp, #36	; 0x24
 8005888:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	2300      	movs	r3, #0
 8005890:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005892:	4b3e      	ldr	r3, [pc, #248]	; (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800589c:	4b3b      	ldr	r3, [pc, #236]	; (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_RCC_GetSysClockFreq+0x34>
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d121      	bne.n	80058f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d11e      	bne.n	80058f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058b8:	4b34      	ldr	r3, [pc, #208]	; (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d107      	bne.n	80058d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058c4:	4b31      	ldr	r3, [pc, #196]	; (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 80058c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ca:	0a1b      	lsrs	r3, r3, #8
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e005      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058d4:	4b2d      	ldr	r3, [pc, #180]	; (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	091b      	lsrs	r3, r3, #4
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058e0:	4a2b      	ldr	r2, [pc, #172]	; (8005990 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10d      	bne.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058f4:	e00a      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d102      	bne.n	8005902 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <HAL_RCC_GetSysClockFreq+0x110>)
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	e004      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d101      	bne.n	800590c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005908:	4b23      	ldr	r3, [pc, #140]	; (8005998 <HAL_RCC_GetSysClockFreq+0x114>)
 800590a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b0c      	cmp	r3, #12
 8005910:	d134      	bne.n	800597c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005912:	4b1e      	ldr	r3, [pc, #120]	; (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d003      	beq.n	800592a <HAL_RCC_GetSysClockFreq+0xa6>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d003      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0xac>
 8005928:	e005      	b.n	8005936 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800592a:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <HAL_RCC_GetSysClockFreq+0x110>)
 800592c:	617b      	str	r3, [r7, #20]
      break;
 800592e:	e005      	b.n	800593c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005930:	4b19      	ldr	r3, [pc, #100]	; (8005998 <HAL_RCC_GetSysClockFreq+0x114>)
 8005932:	617b      	str	r3, [r7, #20]
      break;
 8005934:	e002      	b.n	800593c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	617b      	str	r3, [r7, #20]
      break;
 800593a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800593c:	4b13      	ldr	r3, [pc, #76]	; (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	3301      	adds	r3, #1
 8005948:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800594a:	4b10      	ldr	r3, [pc, #64]	; (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	fb03 f202 	mul.w	r2, r3, r2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <HAL_RCC_GetSysClockFreq+0x108>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	0e5b      	lsrs	r3, r3, #25
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	3301      	adds	r3, #1
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	fbb2 f3f3 	udiv	r3, r2, r3
 800597a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800597c:	69bb      	ldr	r3, [r7, #24]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3724      	adds	r7, #36	; 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	08015238 	.word	0x08015238
 8005994:	00f42400 	.word	0x00f42400
 8005998:	00b71b00 	.word	0x00b71b00

0800599c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059a0:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059a2:	681b      	ldr	r3, [r3, #0]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000000 	.word	0x20000000

080059b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059b8:	f7ff fff0 	bl	800599c <HAL_RCC_GetHCLKFreq>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	4904      	ldr	r1, [pc, #16]	; (80059dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ca:	5ccb      	ldrb	r3, [r1, r3]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40021000 	.word	0x40021000
 80059dc:	08015230 	.word	0x08015230

080059e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059e4:	f7ff ffda 	bl	800599c <HAL_RCC_GetHCLKFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	0adb      	lsrs	r3, r3, #11
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4904      	ldr	r1, [pc, #16]	; (8005a08 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40021000 	.word	0x40021000
 8005a08:	08015230 	.word	0x08015230

08005a0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a18:	4b2a      	ldr	r3, [pc, #168]	; (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a24:	f7ff f9c4 	bl	8004db0 <HAL_PWREx_GetVoltageRange>
 8005a28:	6178      	str	r0, [r7, #20]
 8005a2a:	e014      	b.n	8005a56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	4a24      	ldr	r2, [pc, #144]	; (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a36:	6593      	str	r3, [r2, #88]	; 0x58
 8005a38:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a44:	f7ff f9b4 	bl	8004db0 <HAL_PWREx_GetVoltageRange>
 8005a48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	; (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a5c:	d10b      	bne.n	8005a76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d919      	bls.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2ba0      	cmp	r3, #160	; 0xa0
 8005a68:	d902      	bls.n	8005a70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	e013      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a70:	2301      	movs	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	e010      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b80      	cmp	r3, #128	; 0x80
 8005a7a:	d902      	bls.n	8005a82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	e00a      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d102      	bne.n	8005a8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a88:	2302      	movs	r3, #2
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	e004      	b.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b70      	cmp	r3, #112	; 0x70
 8005a92:	d101      	bne.n	8005a98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a94:	2301      	movs	r3, #1
 8005a96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 0207 	bic.w	r2, r3, #7
 8005aa0:	4909      	ldr	r1, [pc, #36]	; (8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005aa8:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d001      	beq.n	8005aba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40022000 	.word	0x40022000

08005acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ad8:	2300      	movs	r3, #0
 8005ada:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d041      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005af0:	d02a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005af2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005af6:	d824      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005af8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005afc:	d008      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005afe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b02:	d81e      	bhi.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b0c:	d010      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b0e:	e018      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b10:	4b86      	ldr	r3, [pc, #536]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4a85      	ldr	r2, [pc, #532]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b1c:	e015      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2100      	movs	r1, #0
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 f829 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b2e:	e00c      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3320      	adds	r3, #32
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 f914 	bl	8006d64 <RCCEx_PLLSAI2_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b40:	e003      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	74fb      	strb	r3, [r7, #19]
      break;
 8005b46:	e000      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b4a:	7cfb      	ldrb	r3, [r7, #19]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b50:	4b76      	ldr	r3, [pc, #472]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b5e:	4973      	ldr	r1, [pc, #460]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b66:	e001      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b68:	7cfb      	ldrb	r3, [r7, #19]
 8005b6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d041      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b80:	d02a      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b86:	d824      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b8c:	d008      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b92:	d81e      	bhi.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b9c:	d010      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b9e:	e018      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ba0:	4b62      	ldr	r3, [pc, #392]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a61      	ldr	r2, [pc, #388]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005baa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bac:	e015      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 ffe1 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bbe:	e00c      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3320      	adds	r3, #32
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f8cc 	bl	8006d64 <RCCEx_PLLSAI2_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8005bd6:	e000      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bda:	7cfb      	ldrb	r3, [r7, #19]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005be0:	4b52      	ldr	r3, [pc, #328]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bee:	494f      	ldr	r1, [pc, #316]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bf6:	e001      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	7cfb      	ldrb	r3, [r7, #19]
 8005bfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a0 	beq.w	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c0e:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00d      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c24:	4b41      	ldr	r3, [pc, #260]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c28:	4a40      	ldr	r2, [pc, #256]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c30:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c40:	4b3b      	ldr	r3, [pc, #236]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a3a      	ldr	r2, [pc, #232]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c4c:	f7fc fb98 	bl	8002380 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c52:	e009      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c54:	f7fc fb94 	bl	8002380 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d902      	bls.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	74fb      	strb	r3, [r7, #19]
        break;
 8005c66:	e005      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c68:	4b31      	ldr	r3, [pc, #196]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0ef      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c74:	7cfb      	ldrb	r3, [r7, #19]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d15c      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c7a:	4b2c      	ldr	r3, [pc, #176]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01f      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d019      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c98:	4b24      	ldr	r3, [pc, #144]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ca4:	4b21      	ldr	r3, [pc, #132]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005caa:	4a20      	ldr	r2, [pc, #128]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cb4:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cba:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cc4:	4a19      	ldr	r2, [pc, #100]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd6:	f7fc fb53 	bl	8002380 <HAL_GetTick>
 8005cda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cdc:	e00b      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cde:	f7fc fb4f 	bl	8002380 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d902      	bls.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	74fb      	strb	r3, [r7, #19]
            break;
 8005cf4:	e006      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0ec      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005d04:	7cfb      	ldrb	r3, [r7, #19]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10c      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d0a:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d1a:	4904      	ldr	r1, [pc, #16]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d22:	e009      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d24:	7cfb      	ldrb	r3, [r7, #19]
 8005d26:	74bb      	strb	r3, [r7, #18]
 8005d28:	e006      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d34:	7cfb      	ldrb	r3, [r7, #19]
 8005d36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d38:	7c7b      	ldrb	r3, [r7, #17]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d105      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d3e:	4b9e      	ldr	r3, [pc, #632]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	4a9d      	ldr	r2, [pc, #628]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d56:	4b98      	ldr	r3, [pc, #608]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5c:	f023 0203 	bic.w	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	4994      	ldr	r1, [pc, #592]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d78:	4b8f      	ldr	r3, [pc, #572]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	f023 020c 	bic.w	r2, r3, #12
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	498c      	ldr	r1, [pc, #560]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d9a:	4b87      	ldr	r3, [pc, #540]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	4983      	ldr	r1, [pc, #524]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dbc:	4b7e      	ldr	r3, [pc, #504]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	497b      	ldr	r1, [pc, #492]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dde:	4b76      	ldr	r3, [pc, #472]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dec:	4972      	ldr	r1, [pc, #456]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e00:	4b6d      	ldr	r3, [pc, #436]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0e:	496a      	ldr	r1, [pc, #424]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e22:	4b65      	ldr	r3, [pc, #404]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e30:	4961      	ldr	r1, [pc, #388]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e44:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e52:	4959      	ldr	r1, [pc, #356]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e66:	4b54      	ldr	r3, [pc, #336]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e74:	4950      	ldr	r1, [pc, #320]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e88:	4b4b      	ldr	r3, [pc, #300]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	4948      	ldr	r1, [pc, #288]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005eaa:	4b43      	ldr	r3, [pc, #268]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	493f      	ldr	r1, [pc, #252]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d028      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ecc:	4b3a      	ldr	r3, [pc, #232]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eda:	4937      	ldr	r1, [pc, #220]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eea:	d106      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eec:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4a31      	ldr	r2, [pc, #196]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ef6:	60d3      	str	r3, [r2, #12]
 8005ef8:	e011      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f02:	d10c      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3304      	adds	r3, #4
 8005f08:	2101      	movs	r1, #1
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fe36 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8005f10:	4603      	mov	r3, r0
 8005f12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005f14:	7cfb      	ldrb	r3, [r7, #19]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005f1a:	7cfb      	ldrb	r3, [r7, #19]
 8005f1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d028      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f2a:	4b23      	ldr	r3, [pc, #140]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f38:	491f      	ldr	r1, [pc, #124]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f48:	d106      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	4a1a      	ldr	r2, [pc, #104]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f54:	60d3      	str	r3, [r2, #12]
 8005f56:	e011      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f60:	d10c      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	2101      	movs	r1, #1
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fe07 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f72:	7cfb      	ldrb	r3, [r7, #19]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f78:	7cfb      	ldrb	r3, [r7, #19]
 8005f7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02b      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f88:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f96:	4908      	ldr	r1, [pc, #32]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa6:	d109      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa8:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4a02      	ldr	r2, [pc, #8]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fb2:	60d3      	str	r3, [r2, #12]
 8005fb4:	e014      	b.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005fb6:	bf00      	nop
 8005fb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	2101      	movs	r1, #1
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fdd5 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fd6:	7cfb      	ldrb	r3, [r7, #19]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005fdc:	7cfb      	ldrb	r3, [r7, #19]
 8005fde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d02f      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fec:	4b2b      	ldr	r3, [pc, #172]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ffa:	4928      	ldr	r1, [pc, #160]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800600a:	d10d      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	2102      	movs	r1, #2
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fdb2 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800601c:	7cfb      	ldrb	r3, [r7, #19]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d014      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006022:	7cfb      	ldrb	r3, [r7, #19]
 8006024:	74bb      	strb	r3, [r7, #18]
 8006026:	e011      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800602c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006030:	d10c      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3320      	adds	r3, #32
 8006036:	2102      	movs	r1, #2
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fe93 	bl	8006d64 <RCCEx_PLLSAI2_Config>
 800603e:	4603      	mov	r3, r0
 8006040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006042:	7cfb      	ldrb	r3, [r7, #19]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006048:	7cfb      	ldrb	r3, [r7, #19]
 800604a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006058:	4b10      	ldr	r3, [pc, #64]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006066:	490d      	ldr	r1, [pc, #52]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800608a:	4904      	ldr	r1, [pc, #16]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006092:	7cbb      	ldrb	r3, [r7, #18]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40021000 	.word	0x40021000

080060a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060b2:	d13e      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80060b4:	4bb2      	ldr	r3, [pc, #712]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060be:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c6:	d028      	beq.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ce:	f200 8542 	bhi.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d8:	d005      	beq.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060e0:	d00e      	beq.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80060e2:	f000 bd38 	b.w	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060e6:	4ba6      	ldr	r3, [pc, #664]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	f040 8532 	bne.w	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80060f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fa:	61fb      	str	r3, [r7, #28]
      break;
 80060fc:	f000 bd2d 	b.w	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006100:	4b9f      	ldr	r3, [pc, #636]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	f040 8527 	bne.w	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8006110:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006114:	61fb      	str	r3, [r7, #28]
      break;
 8006116:	f000 bd22 	b.w	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800611a:	4b99      	ldr	r3, [pc, #612]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006126:	f040 851c 	bne.w	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800612a:	4b96      	ldr	r3, [pc, #600]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800612c:	61fb      	str	r3, [r7, #28]
      break;
 800612e:	f000 bd18 	b.w	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006132:	4b93      	ldr	r3, [pc, #588]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2b03      	cmp	r3, #3
 8006140:	d036      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b03      	cmp	r3, #3
 8006146:	d840      	bhi.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d003      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d020      	beq.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006154:	e039      	b.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006156:	4b8a      	ldr	r3, [pc, #552]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b02      	cmp	r3, #2
 8006160:	d116      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006162:	4b87      	ldr	r3, [pc, #540]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800616e:	4b84      	ldr	r3, [pc, #528]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	091b      	lsrs	r3, r3, #4
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	e005      	b.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800617a:	4b81      	ldr	r3, [pc, #516]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800617c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006180:	0a1b      	lsrs	r3, r3, #8
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	4a80      	ldr	r2, [pc, #512]	; (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800618e:	e01f      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
      break;
 8006194:	e01c      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006196:	4b7a      	ldr	r3, [pc, #488]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800619e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a2:	d102      	bne.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80061a4:	4b79      	ldr	r3, [pc, #484]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80061a6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80061a8:	e012      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61bb      	str	r3, [r7, #24]
      break;
 80061ae:	e00f      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80061b0:	4b73      	ldr	r3, [pc, #460]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061bc:	d102      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80061be:	4b74      	ldr	r3, [pc, #464]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80061c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80061c2:	e005      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	61bb      	str	r3, [r7, #24]
      break;
 80061c8:	e002      	b.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61bb      	str	r3, [r7, #24]
      break;
 80061ce:	bf00      	nop
    }

    switch(PeriphClk)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061d6:	f000 80dd 	beq.w	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061e0:	f200 84c1 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061ea:	f000 80d3 	beq.w	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061f4:	f200 84b7 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fe:	f000 835f 	beq.w	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006208:	f200 84ad 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006212:	f000 847e 	beq.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621c:	f200 84a3 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006226:	f000 82cd 	beq.w	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006230:	f200 8499 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800623a:	f000 80ab 	beq.w	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006244:	f200 848f 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624e:	f000 8090 	beq.w	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006258:	f200 8485 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006262:	d07f      	beq.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800626a:	f200 847c 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006274:	f000 8403 	beq.w	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800627e:	f200 8472 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006288:	f000 83af 	beq.w	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006292:	f200 8468 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629c:	f000 8379 	beq.w	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a6:	f200 845e 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	f000 8344 	beq.w	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b80      	cmp	r3, #128	; 0x80
 80062b6:	f200 8456 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d84b      	bhi.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 844f 	beq.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	2b1f      	cmp	r3, #31
 80062ce:	f200 844a 	bhi.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80062d2:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80062d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d8:	080064c1 	.word	0x080064c1
 80062dc:	0800652f 	.word	0x0800652f
 80062e0:	08006b67 	.word	0x08006b67
 80062e4:	080065c3 	.word	0x080065c3
 80062e8:	08006b67 	.word	0x08006b67
 80062ec:	08006b67 	.word	0x08006b67
 80062f0:	08006b67 	.word	0x08006b67
 80062f4:	08006649 	.word	0x08006649
 80062f8:	08006b67 	.word	0x08006b67
 80062fc:	08006b67 	.word	0x08006b67
 8006300:	08006b67 	.word	0x08006b67
 8006304:	08006b67 	.word	0x08006b67
 8006308:	08006b67 	.word	0x08006b67
 800630c:	08006b67 	.word	0x08006b67
 8006310:	08006b67 	.word	0x08006b67
 8006314:	080066c1 	.word	0x080066c1
 8006318:	08006b67 	.word	0x08006b67
 800631c:	08006b67 	.word	0x08006b67
 8006320:	08006b67 	.word	0x08006b67
 8006324:	08006b67 	.word	0x08006b67
 8006328:	08006b67 	.word	0x08006b67
 800632c:	08006b67 	.word	0x08006b67
 8006330:	08006b67 	.word	0x08006b67
 8006334:	08006b67 	.word	0x08006b67
 8006338:	08006b67 	.word	0x08006b67
 800633c:	08006b67 	.word	0x08006b67
 8006340:	08006b67 	.word	0x08006b67
 8006344:	08006b67 	.word	0x08006b67
 8006348:	08006b67 	.word	0x08006b67
 800634c:	08006b67 	.word	0x08006b67
 8006350:	08006b67 	.word	0x08006b67
 8006354:	08006743 	.word	0x08006743
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	f000 82c1 	beq.w	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006360:	f000 bc01 	b.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006364:	69b9      	ldr	r1, [r7, #24]
 8006366:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800636a:	f000 fdd9 	bl	8006f20 <RCCEx_GetSAIxPeriphCLKFreq>
 800636e:	61f8      	str	r0, [r7, #28]
      break;
 8006370:	e3fa      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006372:	69b9      	ldr	r1, [r7, #24]
 8006374:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006378:	f000 fdd2 	bl	8006f20 <RCCEx_GetSAIxPeriphCLKFreq>
 800637c:	61f8      	str	r0, [r7, #28]
      break;
 800637e:	e3f3      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8006380:	40021000 	.word	0x40021000
 8006384:	0005b8d8 	.word	0x0005b8d8
 8006388:	08015238 	.word	0x08015238
 800638c:	00f42400 	.word	0x00f42400
 8006390:	00b71b00 	.word	0x00b71b00
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006394:	4ba9      	ldr	r3, [pc, #676]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063a6:	d00c      	beq.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80063ae:	d87f      	bhi.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063b6:	d04e      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063be:	d01d      	beq.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80063c0:	e076      	b.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80063c2:	4b9e      	ldr	r3, [pc, #632]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d172      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80063ce:	4b9b      	ldr	r3, [pc, #620]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80063da:	4b98      	ldr	r3, [pc, #608]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	091b      	lsrs	r3, r3, #4
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	e005      	b.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80063e6:	4b95      	ldr	r3, [pc, #596]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ec:	0a1b      	lsrs	r3, r3, #8
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	4a93      	ldr	r2, [pc, #588]	; (8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80063f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f8:	61fb      	str	r3, [r7, #28]
          break;
 80063fa:	e05b      	b.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80063fc:	4b8f      	ldr	r3, [pc, #572]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006408:	d156      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800640a:	4b8c      	ldr	r3, [pc, #560]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006416:	d14f      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006418:	4b88      	ldr	r3, [pc, #544]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006422:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	fb03 f202 	mul.w	r2, r3, r2
 800642c:	4b83      	ldr	r3, [pc, #524]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	3301      	adds	r3, #1
 8006438:	fbb2 f3f3 	udiv	r3, r2, r3
 800643c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800643e:	4b7f      	ldr	r3, [pc, #508]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	0d5b      	lsrs	r3, r3, #21
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	3301      	adds	r3, #1
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006452:	61fb      	str	r3, [r7, #28]
          break;
 8006454:	e030      	b.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006456:	4b79      	ldr	r3, [pc, #484]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800645e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006462:	d12b      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006464:	4b75      	ldr	r3, [pc, #468]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800646c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006470:	d124      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006472:	4b72      	ldr	r3, [pc, #456]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800647c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	fb03 f202 	mul.w	r2, r3, r2
 8006486:	4b6d      	ldr	r3, [pc, #436]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	3301      	adds	r3, #1
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006498:	4b68      	ldr	r3, [pc, #416]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	0d5b      	lsrs	r3, r3, #21
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	3301      	adds	r3, #1
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ac:	61fb      	str	r3, [r7, #28]
          break;
 80064ae:	e005      	b.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80064b0:	bf00      	nop
 80064b2:	e359      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80064b4:	bf00      	nop
 80064b6:	e357      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80064b8:	bf00      	nop
 80064ba:	e355      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80064bc:	bf00      	nop
        break;
 80064be:	e353      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80064c0:	4b5e      	ldr	r3, [pc, #376]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	613b      	str	r3, [r7, #16]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d827      	bhi.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	080064e9 	.word	0x080064e9
 80064dc:	080064f1 	.word	0x080064f1
 80064e0:	080064f9 	.word	0x080064f9
 80064e4:	0800650d 	.word	0x0800650d
          frequency = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7ff fa7a 	bl	80059e0 <HAL_RCC_GetPCLK2Freq>
 80064ec:	61f8      	str	r0, [r7, #28]
          break;
 80064ee:	e01d      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80064f0:	f7ff f9c8 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 80064f4:	61f8      	str	r0, [r7, #28]
          break;
 80064f6:	e019      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064f8:	4b50      	ldr	r3, [pc, #320]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006504:	d10f      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8006506:	4b4f      	ldr	r3, [pc, #316]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006508:	61fb      	str	r3, [r7, #28]
          break;
 800650a:	e00c      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800650c:	4b4b      	ldr	r3, [pc, #300]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d107      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800651a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651e:	61fb      	str	r3, [r7, #28]
          break;
 8006520:	e003      	b.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8006522:	bf00      	nop
 8006524:	e320      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006526:	bf00      	nop
 8006528:	e31e      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800652a:	bf00      	nop
        break;
 800652c:	e31c      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800652e:	4b43      	ldr	r3, [pc, #268]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b0c      	cmp	r3, #12
 800653e:	d83a      	bhi.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006540:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	0800657d 	.word	0x0800657d
 800654c:	080065b7 	.word	0x080065b7
 8006550:	080065b7 	.word	0x080065b7
 8006554:	080065b7 	.word	0x080065b7
 8006558:	08006585 	.word	0x08006585
 800655c:	080065b7 	.word	0x080065b7
 8006560:	080065b7 	.word	0x080065b7
 8006564:	080065b7 	.word	0x080065b7
 8006568:	0800658d 	.word	0x0800658d
 800656c:	080065b7 	.word	0x080065b7
 8006570:	080065b7 	.word	0x080065b7
 8006574:	080065b7 	.word	0x080065b7
 8006578:	080065a1 	.word	0x080065a1
          frequency = HAL_RCC_GetPCLK1Freq();
 800657c:	f7ff fa1a 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8006580:	61f8      	str	r0, [r7, #28]
          break;
 8006582:	e01d      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8006584:	f7ff f97e 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8006588:	61f8      	str	r0, [r7, #28]
          break;
 800658a:	e019      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800658c:	4b2b      	ldr	r3, [pc, #172]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006598:	d10f      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800659a:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800659c:	61fb      	str	r3, [r7, #28]
          break;
 800659e:	e00c      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065a0:	4b26      	ldr	r3, [pc, #152]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d107      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80065ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b2:	61fb      	str	r3, [r7, #28]
          break;
 80065b4:	e003      	b.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80065b6:	bf00      	nop
 80065b8:	e2d6      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80065ba:	bf00      	nop
 80065bc:	e2d4      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80065be:	bf00      	nop
        break;
 80065c0:	e2d2      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80065c2:	4b1e      	ldr	r3, [pc, #120]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	2b30      	cmp	r3, #48	; 0x30
 80065d2:	d021      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b30      	cmp	r3, #48	; 0x30
 80065d8:	d829      	bhi.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d011      	beq.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d823      	bhi.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b10      	cmp	r3, #16
 80065f0:	d004      	beq.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80065f2:	e01c      	b.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065f4:	f7ff f9de 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 80065f8:	61f8      	str	r0, [r7, #28]
          break;
 80065fa:	e01d      	b.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80065fc:	f7ff f942 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8006600:	61f8      	str	r0, [r7, #28]
          break;
 8006602:	e019      	b.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006604:	4b0d      	ldr	r3, [pc, #52]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006610:	d10f      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8006612:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006614:	61fb      	str	r3, [r7, #28]
          break;
 8006616:	e00c      	b.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006618:	4b08      	ldr	r3, [pc, #32]	; (800663c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d107      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8006626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662a:	61fb      	str	r3, [r7, #28]
          break;
 800662c:	e003      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800662e:	bf00      	nop
 8006630:	e29a      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006632:	bf00      	nop
 8006634:	e298      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006636:	bf00      	nop
        break;
 8006638:	e296      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800663a:	bf00      	nop
 800663c:	40021000 	.word	0x40021000
 8006640:	08015238 	.word	0x08015238
 8006644:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006648:	4b9b      	ldr	r3, [pc, #620]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2bc0      	cmp	r3, #192	; 0xc0
 8006658:	d021      	beq.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2bc0      	cmp	r3, #192	; 0xc0
 800665e:	d829      	bhi.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b80      	cmp	r3, #128	; 0x80
 8006664:	d011      	beq.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b80      	cmp	r3, #128	; 0x80
 800666a:	d823      	bhi.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d004      	beq.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8006678:	e01c      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 800667a:	f7ff f99b 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 800667e:	61f8      	str	r0, [r7, #28]
          break;
 8006680:	e01d      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006682:	f7ff f8ff 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8006686:	61f8      	str	r0, [r7, #28]
          break;
 8006688:	e019      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800668a:	4b8b      	ldr	r3, [pc, #556]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006696:	d10f      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8006698:	4b88      	ldr	r3, [pc, #544]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800669a:	61fb      	str	r3, [r7, #28]
          break;
 800669c:	e00c      	b.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800669e:	4b86      	ldr	r3, [pc, #536]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d107      	bne.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80066ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b0:	61fb      	str	r3, [r7, #28]
          break;
 80066b2:	e003      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80066b4:	bf00      	nop
 80066b6:	e257      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80066b8:	bf00      	nop
 80066ba:	e255      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80066bc:	bf00      	nop
        break;
 80066be:	e253      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80066c0:	4b7d      	ldr	r3, [pc, #500]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80066c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066d2:	d025      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066da:	d82c      	bhi.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e2:	d013      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ea:	d824      	bhi.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d004      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f8:	d004      	beq.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80066fa:	e01c      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066fc:	f7ff f95a 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8006700:	61f8      	str	r0, [r7, #28]
          break;
 8006702:	e01d      	b.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006704:	f7ff f8be 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8006708:	61f8      	str	r0, [r7, #28]
          break;
 800670a:	e019      	b.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800670c:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006718:	d10f      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800671a:	4b68      	ldr	r3, [pc, #416]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800671c:	61fb      	str	r3, [r7, #28]
          break;
 800671e:	e00c      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006720:	4b65      	ldr	r3, [pc, #404]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d107      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800672e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006732:	61fb      	str	r3, [r7, #28]
          break;
 8006734:	e003      	b.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8006736:	bf00      	nop
 8006738:	e216      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800673a:	bf00      	nop
 800673c:	e214      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800673e:	bf00      	nop
        break;
 8006740:	e212      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006742:	4b5d      	ldr	r3, [pc, #372]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006754:	d025      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800675c:	d82c      	bhi.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006764:	d013      	beq.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676c:	d824      	bhi.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	d004      	beq.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800677c:	e01c      	b.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800677e:	f7ff f919 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8006782:	61f8      	str	r0, [r7, #28]
          break;
 8006784:	e01d      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8006786:	f7ff f87d 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 800678a:	61f8      	str	r0, [r7, #28]
          break;
 800678c:	e019      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800678e:	4b4a      	ldr	r3, [pc, #296]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679a:	d10f      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800679c:	4b47      	ldr	r3, [pc, #284]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800679e:	61fb      	str	r3, [r7, #28]
          break;
 80067a0:	e00c      	b.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80067a2:	4b45      	ldr	r3, [pc, #276]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d107      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80067b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b4:	61fb      	str	r3, [r7, #28]
          break;
 80067b6:	e003      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80067b8:	bf00      	nop
 80067ba:	e1d5      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80067bc:	bf00      	nop
 80067be:	e1d3      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80067c0:	bf00      	nop
        break;
 80067c2:	e1d1      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067c4:	4b3c      	ldr	r3, [pc, #240]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067d6:	d00c      	beq.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067de:	d864      	bhi.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067e6:	d008      	beq.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ee:	d030      	beq.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 80067f0:	e05b      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 80067f2:	f7ff f847 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 80067f6:	61f8      	str	r0, [r7, #28]
          break;
 80067f8:	e05c      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80067fa:	4b2f      	ldr	r3, [pc, #188]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006806:	d152      	bne.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8006808:	4b2b      	ldr	r3, [pc, #172]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d04c      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006814:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	0a1b      	lsrs	r3, r3, #8
 800681a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	fb03 f202 	mul.w	r2, r3, r2
 8006828:	4b23      	ldr	r3, [pc, #140]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	091b      	lsrs	r3, r3, #4
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	3301      	adds	r3, #1
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800683a:	4b1f      	ldr	r3, [pc, #124]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	0e5b      	lsrs	r3, r3, #25
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	3301      	adds	r3, #1
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	fbb2 f3f3 	udiv	r3, r2, r3
 800684e:	61fb      	str	r3, [r7, #28]
          break;
 8006850:	e02d      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8006852:	4b19      	ldr	r3, [pc, #100]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800685a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685e:	d128      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006860:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d022      	beq.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800686c:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006876:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	fb03 f202 	mul.w	r2, r3, r2
 8006880:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	091b      	lsrs	r3, r3, #4
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	3301      	adds	r3, #1
 800688c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006890:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	0e5b      	lsrs	r3, r3, #25
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	3301      	adds	r3, #1
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a6:	61fb      	str	r3, [r7, #28]
          break;
 80068a8:	e003      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80068aa:	bf00      	nop
 80068ac:	e15c      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80068ae:	bf00      	nop
 80068b0:	e15a      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80068b2:	bf00      	nop
        break;
 80068b4:	e158      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80068b6:	bf00      	nop
 80068b8:	40021000 	.word	0x40021000
 80068bc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80068c0:	4b9d      	ldr	r3, [pc, #628]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ca:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d103      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80068d2:	f7ff f885 	bl	80059e0 <HAL_RCC_GetPCLK2Freq>
 80068d6:	61f8      	str	r0, [r7, #28]
        break;
 80068d8:	e146      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80068da:	f7fe ffd3 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 80068de:	61f8      	str	r0, [r7, #28]
        break;
 80068e0:	e142      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80068e2:	4b95      	ldr	r3, [pc, #596]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80068e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d013      	beq.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068fc:	d819      	bhi.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690a:	d004      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 800690c:	e011      	b.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800690e:	f7ff f851 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8006912:	61f8      	str	r0, [r7, #28]
          break;
 8006914:	e010      	b.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8006916:	f7fe ffb5 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 800691a:	61f8      	str	r0, [r7, #28]
          break;
 800691c:	e00c      	b.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800691e:	4b86      	ldr	r3, [pc, #536]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692a:	d104      	bne.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 800692c:	4b83      	ldr	r3, [pc, #524]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800692e:	61fb      	str	r3, [r7, #28]
          break;
 8006930:	e001      	b.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8006932:	bf00      	nop
 8006934:	e118      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006936:	bf00      	nop
        break;
 8006938:	e116      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800693a:	4b7f      	ldr	r3, [pc, #508]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800693c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694c:	d013      	beq.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006954:	d819      	bhi.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006962:	d004      	beq.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8006964:	e011      	b.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006966:	f7ff f825 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 800696a:	61f8      	str	r0, [r7, #28]
          break;
 800696c:	e010      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800696e:	f7fe ff89 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 8006972:	61f8      	str	r0, [r7, #28]
          break;
 8006974:	e00c      	b.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006976:	4b70      	ldr	r3, [pc, #448]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006982:	d104      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8006984:	4b6d      	ldr	r3, [pc, #436]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006986:	61fb      	str	r3, [r7, #28]
          break;
 8006988:	e001      	b.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800698a:	bf00      	nop
 800698c:	e0ec      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800698e:	bf00      	nop
        break;
 8006990:	e0ea      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006992:	4b69      	ldr	r3, [pc, #420]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a4:	d013      	beq.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069ac:	d819      	bhi.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ba:	d004      	beq.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80069bc:	e011      	b.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069be:	f7fe fff9 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 80069c2:	61f8      	str	r0, [r7, #28]
          break;
 80069c4:	e010      	b.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80069c6:	f7fe ff5d 	bl	8005884 <HAL_RCC_GetSysClockFreq>
 80069ca:	61f8      	str	r0, [r7, #28]
          break;
 80069cc:	e00c      	b.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069ce:	4b5a      	ldr	r3, [pc, #360]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069da:	d104      	bne.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80069dc:	4b57      	ldr	r3, [pc, #348]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80069de:	61fb      	str	r3, [r7, #28]
          break;
 80069e0:	e001      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80069e2:	bf00      	nop
 80069e4:	e0c0      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80069e6:	bf00      	nop
        break;
 80069e8:	e0be      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80069ea:	4b53      	ldr	r3, [pc, #332]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80069f4:	613b      	str	r3, [r7, #16]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069fc:	d02c      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006a04:	d833      	bhi.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a0c:	d01a      	beq.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a14:	d82b      	bhi.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d004      	beq.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a22:	d004      	beq.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8006a24:	e023      	b.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a26:	f7fe ffc5 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8006a2a:	61f8      	str	r0, [r7, #28]
          break;
 8006a2c:	e026      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006a2e:	4b42      	ldr	r3, [pc, #264]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d11a      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8006a3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a40:	61fb      	str	r3, [r7, #28]
          break;
 8006a42:	e016      	b.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a44:	4b3c      	ldr	r3, [pc, #240]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a50:	d111      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8006a52:	4b3a      	ldr	r3, [pc, #232]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006a54:	61fb      	str	r3, [r7, #28]
          break;
 8006a56:	e00e      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a58:	4b37      	ldr	r3, [pc, #220]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d109      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8006a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6a:	61fb      	str	r3, [r7, #28]
          break;
 8006a6c:	e005      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8006a6e:	bf00      	nop
 8006a70:	e07a      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a72:	bf00      	nop
 8006a74:	e078      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a76:	bf00      	nop
 8006a78:	e076      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006a7a:	bf00      	nop
        break;
 8006a7c:	e074      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006a7e:	4b2e      	ldr	r3, [pc, #184]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a90:	d02c      	beq.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a98:	d833      	bhi.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa0:	d01a      	beq.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa8:	d82b      	bhi.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab6:	d004      	beq.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8006ab8:	e023      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006aba:	f7fe ff7b 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8006abe:	61f8      	str	r0, [r7, #28]
          break;
 8006ac0:	e026      	b.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006ac2:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d11a      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8006ad0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ad4:	61fb      	str	r3, [r7, #28]
          break;
 8006ad6:	e016      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ad8:	4b17      	ldr	r3, [pc, #92]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae4:	d111      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8006ae6:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8006ae8:	61fb      	str	r3, [r7, #28]
          break;
 8006aea:	e00e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006aec:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d109      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afe:	61fb      	str	r3, [r7, #28]
          break;
 8006b00:	e005      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8006b02:	bf00      	nop
 8006b04:	e030      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b06:	bf00      	nop
 8006b08:	e02e      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b0a:	bf00      	nop
 8006b0c:	e02c      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8006b0e:	bf00      	nop
        break;
 8006b10:	e02a      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2a:	d009      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8006b2c:	e012      	b.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b2e:	f7fe ff41 	bl	80059b4 <HAL_RCC_GetPCLK1Freq>
 8006b32:	61f8      	str	r0, [r7, #28]
          break;
 8006b34:	e00e      	b.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8006b36:	bf00      	nop
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b40:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4c:	d101      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006b50:	61fb      	str	r3, [r7, #28]
          break;
 8006b52:	bf00      	nop
        break;
 8006b54:	e008      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b56:	bf00      	nop
 8006b58:	e006      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e004      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e002      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b62:	bf00      	nop
 8006b64:	e000      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8006b66:	bf00      	nop
    }
  }

  return(frequency);
 8006b68:	69fb      	ldr	r3, [r7, #28]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	40021000 	.word	0x40021000
 8006b78:	00f42400 	.word	0x00f42400

08006b7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b8a:	4b75      	ldr	r3, [pc, #468]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d018      	beq.n	8006bc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b96:	4b72      	ldr	r3, [pc, #456]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f003 0203 	and.w	r2, r3, #3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d10d      	bne.n	8006bc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006bae:	4b6c      	ldr	r3, [pc, #432]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	091b      	lsrs	r3, r3, #4
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d047      	beq.n	8006c52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	73fb      	strb	r3, [r7, #15]
 8006bc6:	e044      	b.n	8006c52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d018      	beq.n	8006c02 <RCCEx_PLLSAI1_Config+0x86>
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d825      	bhi.n	8006c20 <RCCEx_PLLSAI1_Config+0xa4>
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d002      	beq.n	8006bde <RCCEx_PLLSAI1_Config+0x62>
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d009      	beq.n	8006bf0 <RCCEx_PLLSAI1_Config+0x74>
 8006bdc:	e020      	b.n	8006c20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bde:	4b60      	ldr	r3, [pc, #384]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d11d      	bne.n	8006c26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bee:	e01a      	b.n	8006c26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bf0:	4b5b      	ldr	r3, [pc, #364]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d116      	bne.n	8006c2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c00:	e013      	b.n	8006c2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c02:	4b57      	ldr	r3, [pc, #348]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10f      	bne.n	8006c2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c0e:	4b54      	ldr	r3, [pc, #336]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c1e:	e006      	b.n	8006c2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	73fb      	strb	r3, [r7, #15]
      break;
 8006c24:	e004      	b.n	8006c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c26:	bf00      	nop
 8006c28:	e002      	b.n	8006c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e000      	b.n	8006c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10d      	bne.n	8006c52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c36:	4b4a      	ldr	r3, [pc, #296]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6819      	ldr	r1, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	4944      	ldr	r1, [pc, #272]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d17d      	bne.n	8006d54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c58:	4b41      	ldr	r3, [pc, #260]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a40      	ldr	r2, [pc, #256]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c64:	f7fb fb8c 	bl	8002380 <HAL_GetTick>
 8006c68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c6a:	e009      	b.n	8006c80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c6c:	f7fb fb88 	bl	8002380 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d902      	bls.n	8006c80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c7e:	e005      	b.n	8006c8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c80:	4b37      	ldr	r3, [pc, #220]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1ef      	bne.n	8006c6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d160      	bne.n	8006d54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d111      	bne.n	8006cbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c98:	4b31      	ldr	r3, [pc, #196]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6892      	ldr	r2, [r2, #8]
 8006ca8:	0211      	lsls	r1, r2, #8
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	68d2      	ldr	r2, [r2, #12]
 8006cae:	0912      	lsrs	r2, r2, #4
 8006cb0:	0452      	lsls	r2, r2, #17
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	492a      	ldr	r1, [pc, #168]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	610b      	str	r3, [r1, #16]
 8006cba:	e027      	b.n	8006d0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d112      	bne.n	8006ce8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cc2:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006cca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6892      	ldr	r2, [r2, #8]
 8006cd2:	0211      	lsls	r1, r2, #8
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6912      	ldr	r2, [r2, #16]
 8006cd8:	0852      	lsrs	r2, r2, #1
 8006cda:	3a01      	subs	r2, #1
 8006cdc:	0552      	lsls	r2, r2, #21
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	491f      	ldr	r1, [pc, #124]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	610b      	str	r3, [r1, #16]
 8006ce6:	e011      	b.n	8006d0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6892      	ldr	r2, [r2, #8]
 8006cf8:	0211      	lsls	r1, r2, #8
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6952      	ldr	r2, [r2, #20]
 8006cfe:	0852      	lsrs	r2, r2, #1
 8006d00:	3a01      	subs	r2, #1
 8006d02:	0652      	lsls	r2, r2, #25
 8006d04:	430a      	orrs	r2, r1
 8006d06:	4916      	ldr	r1, [pc, #88]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d0c:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d18:	f7fb fb32 	bl	8002380 <HAL_GetTick>
 8006d1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d1e:	e009      	b.n	8006d34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d20:	f7fb fb2e 	bl	8002380 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d902      	bls.n	8006d34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	73fb      	strb	r3, [r7, #15]
          break;
 8006d32:	e005      	b.n	8006d40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d34:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ef      	beq.n	8006d20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	4904      	ldr	r1, [pc, #16]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40021000 	.word	0x40021000

08006d64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d72:	4b6a      	ldr	r3, [pc, #424]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d018      	beq.n	8006db0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d7e:	4b67      	ldr	r3, [pc, #412]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0203 	and.w	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d10d      	bne.n	8006daa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
       ||
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d96:	4b61      	ldr	r3, [pc, #388]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	091b      	lsrs	r3, r3, #4
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
       ||
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d047      	beq.n	8006e3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	73fb      	strb	r3, [r7, #15]
 8006dae:	e044      	b.n	8006e3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d018      	beq.n	8006dea <RCCEx_PLLSAI2_Config+0x86>
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d825      	bhi.n	8006e08 <RCCEx_PLLSAI2_Config+0xa4>
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d002      	beq.n	8006dc6 <RCCEx_PLLSAI2_Config+0x62>
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d009      	beq.n	8006dd8 <RCCEx_PLLSAI2_Config+0x74>
 8006dc4:	e020      	b.n	8006e08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006dc6:	4b55      	ldr	r3, [pc, #340]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11d      	bne.n	8006e0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dd6:	e01a      	b.n	8006e0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006dd8:	4b50      	ldr	r3, [pc, #320]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d116      	bne.n	8006e12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006de8:	e013      	b.n	8006e12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006dea:	4b4c      	ldr	r3, [pc, #304]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10f      	bne.n	8006e16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006df6:	4b49      	ldr	r3, [pc, #292]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e06:	e006      	b.n	8006e16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0c:	e004      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10d      	bne.n	8006e3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e1e:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6819      	ldr	r1, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	430b      	orrs	r3, r1
 8006e34:	4939      	ldr	r1, [pc, #228]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d167      	bne.n	8006f10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e40:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a35      	ldr	r2, [pc, #212]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e4c:	f7fb fa98 	bl	8002380 <HAL_GetTick>
 8006e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e52:	e009      	b.n	8006e68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e54:	f7fb fa94 	bl	8002380 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d902      	bls.n	8006e68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	73fb      	strb	r3, [r7, #15]
        break;
 8006e66:	e005      	b.n	8006e74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e68:	4b2c      	ldr	r3, [pc, #176]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1ef      	bne.n	8006e54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d14a      	bne.n	8006f10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d111      	bne.n	8006ea4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e80:	4b26      	ldr	r3, [pc, #152]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6892      	ldr	r2, [r2, #8]
 8006e90:	0211      	lsls	r1, r2, #8
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	68d2      	ldr	r2, [r2, #12]
 8006e96:	0912      	lsrs	r2, r2, #4
 8006e98:	0452      	lsls	r2, r2, #17
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	491f      	ldr	r1, [pc, #124]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	614b      	str	r3, [r1, #20]
 8006ea2:	e011      	b.n	8006ec8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ea4:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006eac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6892      	ldr	r2, [r2, #8]
 8006eb4:	0211      	lsls	r1, r2, #8
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6912      	ldr	r2, [r2, #16]
 8006eba:	0852      	lsrs	r2, r2, #1
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	0652      	lsls	r2, r2, #25
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	4916      	ldr	r1, [pc, #88]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006ec8:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a13      	ldr	r2, [pc, #76]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed4:	f7fb fa54 	bl	8002380 <HAL_GetTick>
 8006ed8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eda:	e009      	b.n	8006ef0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006edc:	f7fb fa50 	bl	8002380 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d902      	bls.n	8006ef0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	73fb      	strb	r3, [r7, #15]
          break;
 8006eee:	e005      	b.n	8006efc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0ef      	beq.n	8006edc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f04:	695a      	ldr	r2, [r3, #20]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	4904      	ldr	r1, [pc, #16]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40021000 	.word	0x40021000

08006f20 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	; 0x24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3c:	d10c      	bne.n	8006f58 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006f3e:	4b6e      	ldr	r3, [pc, #440]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f44:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006f48:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f50:	d112      	bne.n	8006f78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f52:	4b6a      	ldr	r3, [pc, #424]	; (80070fc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	e00f      	b.n	8006f78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5e:	d10b      	bne.n	8006f78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006f60:	4b65      	ldr	r3, [pc, #404]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f66:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006f6a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006f72:	d101      	bne.n	8006f78 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006f74:	4b61      	ldr	r3, [pc, #388]	; (80070fc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8006f76:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 80b4 	bne.w	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f8a:	d003      	beq.n	8006f94 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f92:	d135      	bne.n	8007000 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f94:	4b58      	ldr	r3, [pc, #352]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa0:	f040 80a1 	bne.w	80070e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8006fa4:	4b54      	ldr	r3, [pc, #336]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 809a 	beq.w	80070e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006fb2:	4b51      	ldr	r3, [pc, #324]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	091b      	lsrs	r3, r3, #4
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006fc6:	4b4c      	ldr	r3, [pc, #304]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006fd8:	4b47      	ldr	r3, [pc, #284]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8006fe4:	2311      	movs	r3, #17
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	e001      	b.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8006fea:	2307      	movs	r3, #7
 8006fec:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	fb03 f202 	mul.w	r2, r3, r2
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006ffe:	e072      	b.n	80070e6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d133      	bne.n	800706e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8007006:	4b3c      	ldr	r3, [pc, #240]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800700e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007012:	d169      	bne.n	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8007014:	4b38      	ldr	r3, [pc, #224]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d063      	beq.n	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007020:	4b35      	ldr	r3, [pc, #212]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	091b      	lsrs	r3, r3, #4
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	3301      	adds	r3, #1
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007032:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007034:	4b30      	ldr	r3, [pc, #192]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007046:	4b2c      	ldr	r3, [pc, #176]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8007052:	2311      	movs	r3, #17
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e001      	b.n	800705c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8007058:	2307      	movs	r3, #7
 800705a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	fb03 f202 	mul.w	r2, r3, r2
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	61fb      	str	r3, [r7, #28]
 800706c:	e03c      	b.n	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007074:	d003      	beq.n	800707e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800707c:	d134      	bne.n	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800707e:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800708a:	d12d      	bne.n	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800708c:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d027      	beq.n	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007098:	4b17      	ldr	r3, [pc, #92]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	3301      	adds	r3, #1
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80070ac:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	0a1b      	lsrs	r3, r3, #8
 80070b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80070be:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80070ca:	2311      	movs	r3, #17
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e001      	b.n	80070d4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80070d0:	2307      	movs	r3, #7
 80070d2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	fb03 f202 	mul.w	r2, r3, r2
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e2:	61fb      	str	r3, [r7, #28]
 80070e4:	e000      	b.n	80070e8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80070e6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80070e8:	69fb      	ldr	r3, [r7, #28]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3724      	adds	r7, #36	; 0x24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40021000 	.word	0x40021000
 80070fc:	001fff68 	.word	0x001fff68

08007100 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d079      	beq.n	8007206 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fa fe5a 	bl	8001de0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f003 0310 	and.w	r3, r3, #16
 800713e:	2b10      	cmp	r3, #16
 8007140:	d058      	beq.n	80071f4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	22ca      	movs	r2, #202	; 0xca
 8007148:	625a      	str	r2, [r3, #36]	; 0x24
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2253      	movs	r2, #83	; 0x53
 8007150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9a4 	bl	80074a0 <RTC_EnterInitMode>
 8007158:	4603      	mov	r3, r0
 800715a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d127      	bne.n	80071b2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6812      	ldr	r2, [r2, #0]
 800716c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007174:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6899      	ldr	r1, [r3, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68d2      	ldr	r2, [r2, #12]
 800719c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6919      	ldr	r1, [r3, #16]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	041a      	lsls	r2, r3, #16
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f9a8 	bl	8007508 <RTC_ExitInitMode>
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d113      	bne.n	80071ea <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0203 	bic.w	r2, r2, #3
 80071d0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69da      	ldr	r2, [r3, #28]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	431a      	orrs	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	22ff      	movs	r2, #255	; 0xff
 80071f0:	625a      	str	r2, [r3, #36]	; 0x24
 80071f2:	e001      	b.n	80071f8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d103      	bne.n	8007206 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_RTC_SetTime+0x1a>
 8007226:	2302      	movs	r3, #2
 8007228:	e08b      	b.n	8007342 <HAL_RTC_SetTime+0x132>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	22ca      	movs	r2, #202	; 0xca
 8007240:	625a      	str	r2, [r3, #36]	; 0x24
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2253      	movs	r2, #83	; 0x53
 8007248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f928 	bl	80074a0 <RTC_EnterInitMode>
 8007250:	4603      	mov	r3, r0
 8007252:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007254:	7cfb      	ldrb	r3, [r7, #19]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d163      	bne.n	8007322 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d126      	bne.n	80072ae <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2200      	movs	r2, #0
 8007272:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f000 f983 	bl	8007584 <RTC_ByteToBcd2>
 800727e:	4603      	mov	r3, r0
 8007280:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	4618      	mov	r0, r3
 8007288:	f000 f97c 	bl	8007584 <RTC_ByteToBcd2>
 800728c:	4603      	mov	r3, r0
 800728e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007290:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	789b      	ldrb	r3, [r3, #2]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 f974 	bl	8007584 <RTC_ByteToBcd2>
 800729c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800729e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	78db      	ldrb	r3, [r3, #3]
 80072a6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	e018      	b.n	80072e0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d102      	bne.n	80072c2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072ce:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072d4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	78db      	ldrb	r3, [r3, #3]
 80072da:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80072ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072ee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6899      	ldr	r1, [r3, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	431a      	orrs	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f8f5 	bl	8007508 <RTC_ExitInitMode>
 800731e:	4603      	mov	r3, r0
 8007320:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	22ff      	movs	r2, #255	; 0xff
 8007328:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800732a:	7cfb      	ldrb	r3, [r7, #19]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d103      	bne.n	8007338 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007340:	7cfb      	ldrb	r3, [r7, #19]
}
 8007342:	4618      	mov	r0, r3
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	bd90      	pop	{r4, r7, pc}

0800734a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800734a:	b590      	push	{r4, r7, lr}
 800734c:	b087      	sub	sp, #28
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_RTC_SetDate+0x1a>
 8007360:	2302      	movs	r3, #2
 8007362:	e075      	b.n	8007450 <HAL_RTC_SetDate+0x106>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10e      	bne.n	8007398 <HAL_RTC_SetDate+0x4e>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	2b00      	cmp	r3, #0
 8007384:	d008      	beq.n	8007398 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	f023 0310 	bic.w	r3, r3, #16
 800738e:	b2db      	uxtb	r3, r3
 8007390:	330a      	adds	r3, #10
 8007392:	b2da      	uxtb	r2, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d11c      	bne.n	80073d8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	78db      	ldrb	r3, [r3, #3]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 f8ee 	bl	8007584 <RTC_ByteToBcd2>
 80073a8:	4603      	mov	r3, r0
 80073aa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 f8e7 	bl	8007584 <RTC_ByteToBcd2>
 80073b6:	4603      	mov	r3, r0
 80073b8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80073ba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	789b      	ldrb	r3, [r3, #2]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 f8df 	bl	8007584 <RTC_ByteToBcd2>
 80073c6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80073c8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	e00e      	b.n	80073f6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	78db      	ldrb	r3, [r3, #3]
 80073dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	785b      	ldrb	r3, [r3, #1]
 80073e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073e4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80073ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	22ca      	movs	r2, #202	; 0xca
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2253      	movs	r2, #83	; 0x53
 8007404:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 f84a 	bl	80074a0 <RTC_EnterInitMode>
 800740c:	4603      	mov	r3, r0
 800740e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007410:	7cfb      	ldrb	r3, [r7, #19]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10c      	bne.n	8007430 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007420:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007424:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 f86e 	bl	8007508 <RTC_ExitInitMode>
 800742c:	4603      	mov	r3, r0
 800742e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	22ff      	movs	r2, #255	; 0xff
 8007436:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007438:	7cfb      	ldrb	r3, [r7, #19]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d103      	bne.n	8007446 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800744e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007450:	4618      	mov	r0, r3
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	bd90      	pop	{r4, r7, pc}

08007458 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a0d      	ldr	r2, [pc, #52]	; (800749c <HAL_RTC_WaitForSynchro+0x44>)
 8007466:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007468:	f7fa ff8a 	bl	8002380 <HAL_GetTick>
 800746c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800746e:	e009      	b.n	8007484 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007470:	f7fa ff86 	bl	8002380 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800747e:	d901      	bls.n	8007484 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e007      	b.n	8007494 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0ee      	beq.n	8007470 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	0003ff5f 	.word	0x0003ff5f

080074a0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d120      	bne.n	80074fc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f04f 32ff 	mov.w	r2, #4294967295
 80074c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80074c4:	f7fa ff5c 	bl	8002380 <HAL_GetTick>
 80074c8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80074ca:	e00d      	b.n	80074e8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80074cc:	f7fa ff58 	bl	8002380 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074da:	d905      	bls.n	80074e8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2203      	movs	r2, #3
 80074e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d102      	bne.n	80074fc <RTC_EnterInitMode+0x5c>
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d1e7      	bne.n	80074cc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007514:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <RTC_ExitInitMode+0x78>)
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4a19      	ldr	r2, [pc, #100]	; (8007580 <RTC_ExitInitMode+0x78>)
 800751a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800751e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007520:	4b17      	ldr	r3, [pc, #92]	; (8007580 <RTC_ExitInitMode+0x78>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10c      	bne.n	8007546 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff ff93 	bl	8007458 <HAL_RTC_WaitForSynchro>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01e      	beq.n	8007576 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2203      	movs	r2, #3
 800753c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e017      	b.n	8007576 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007546:	4b0e      	ldr	r3, [pc, #56]	; (8007580 <RTC_ExitInitMode+0x78>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	4a0d      	ldr	r2, [pc, #52]	; (8007580 <RTC_ExitInitMode+0x78>)
 800754c:	f023 0320 	bic.w	r3, r3, #32
 8007550:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7ff ff80 	bl	8007458 <HAL_RTC_WaitForSynchro>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2203      	movs	r2, #3
 8007562:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <RTC_ExitInitMode+0x78>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	4a04      	ldr	r2, [pc, #16]	; (8007580 <RTC_ExitInitMode+0x78>)
 8007570:	f043 0320 	orr.w	r3, r3, #32
 8007574:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40002800 	.word	0x40002800

08007584 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007596:	e005      	b.n	80075a4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	3b0a      	subs	r3, #10
 80075a2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	2b09      	cmp	r3, #9
 80075a8:	d8f6      	bhi.n	8007598 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b2db      	uxtb	r3, r3
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e022      	b.n	800761c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d105      	bne.n	80075ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7fa fc2b 	bl	8001e44 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2203      	movs	r2, #3
 80075f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f814 	bl	8007624 <HAL_SD_InitCard>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e00a      	b.n	800761c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007624:	b5b0      	push	{r4, r5, r7, lr}
 8007626:	b08e      	sub	sp, #56	; 0x38
 8007628:	af04      	add	r7, sp, #16
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800762c:	2300      	movs	r3, #0
 800762e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800763c:	2300      	movs	r3, #0
 800763e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007640:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007644:	f7fe fd2c 	bl	80060a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007648:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d109      	bne.n	8007664 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e07b      	b.n	800775c <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	09db      	lsrs	r3, r3, #7
 8007668:	4a3e      	ldr	r2, [pc, #248]	; (8007764 <HAL_SD_InitCard+0x140>)
 800766a:	fba2 2303 	umull	r2, r3, r2, r3
 800766e:	091b      	lsrs	r3, r3, #4
 8007670:	3b02      	subs	r3, #2
 8007672:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681d      	ldr	r5, [r3, #0]
 8007678:	466c      	mov	r4, sp
 800767a:	f107 0314 	add.w	r3, r7, #20
 800767e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007686:	f107 0308 	add.w	r3, r7, #8
 800768a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800768c:	4628      	mov	r0, r5
 800768e:	f001 fac1 	bl	8008c14 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076a0:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 faff 	bl	8008caa <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076ba:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	3302      	adds	r3, #2
 80076c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80076c8:	4a27      	ldr	r2, [pc, #156]	; (8007768 <HAL_SD_InitCard+0x144>)
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d0:	3301      	adds	r3, #1
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fa fe60 	bl	8002398 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 ffdf 	bl	800869c <SD_PowerON>
 80076de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00b      	beq.n	80076fe <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e02e      	b.n	800775c <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fefe 	bl	8008500 <SD_InitCard>
 8007704:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e01b      	b.n	800775c <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800772c:	4618      	mov	r0, r3
 800772e:	f001 fb4f 	bl	8008dd0 <SDMMC_CmdBlockLength>
 8007732:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00f      	beq.n	800775a <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a0b      	ldr	r2, [pc, #44]	; (800776c <HAL_SD_InitCard+0x148>)
 8007740:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3728      	adds	r7, #40	; 0x28
 8007760:	46bd      	mov	sp, r7
 8007762:	bdb0      	pop	{r4, r5, r7, pc}
 8007764:	014f8b59 	.word	0x014f8b59
 8007768:	00012110 	.word	0x00012110
 800776c:	004005ff 	.word	0x004005ff

08007770 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08c      	sub	sp, #48	; 0x30
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e0a9      	b.n	80078ec <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	f040 80a2 	bne.w	80078ea <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80077ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	441a      	add	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d907      	bls.n	80077ca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e090      	b.n	80078ec <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2203      	movs	r2, #3
 80077ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2200      	movs	r2, #0
 80077d8:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	4a45      	ldr	r2, [pc, #276]	; (80078f4 <HAL_SD_ReadBlocks_DMA+0x184>)
 80077e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	4a44      	ldr	r2, [pc, #272]	; (80078f8 <HAL_SD_ReadBlocks_DMA+0x188>)
 80077e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	2200      	movs	r2, #0
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3380      	adds	r3, #128	; 0x80
 80077fc:	4619      	mov	r1, r3
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	025b      	lsls	r3, r3, #9
 8007804:	089b      	lsrs	r3, r3, #2
 8007806:	f7fa ffb5 	bl	8002774 <HAL_DMA_Start_IT>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00f      	beq.n	8007830 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a39      	ldr	r2, [pc, #228]	; (80078fc <HAL_SD_ReadBlocks_DMA+0x18c>)
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e05d      	b.n	80078ec <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 0208 	orr.w	r2, r2, #8
 800783e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007844:	2b01      	cmp	r3, #1
 8007846:	d002      	beq.n	800784e <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	025b      	lsls	r3, r3, #9
 800784c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800784e:	f04f 33ff 	mov.w	r3, #4294967295
 8007852:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	025b      	lsls	r3, r3, #9
 8007858:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800785a:	2390      	movs	r3, #144	; 0x90
 800785c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800785e:	2302      	movs	r3, #2
 8007860:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007862:	2300      	movs	r3, #0
 8007864:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007866:	2301      	movs	r3, #1
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f107 0210 	add.w	r2, r7, #16
 8007872:	4611      	mov	r1, r2
 8007874:	4618      	mov	r0, r3
 8007876:	f001 fa7f 	bl	8008d78 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d90a      	bls.n	8007896 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2282      	movs	r2, #130	; 0x82
 8007884:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800788c:	4618      	mov	r0, r3
 800788e:	f001 fae3 	bl	8008e58 <SDMMC_CmdReadMultiBlock>
 8007892:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007894:	e009      	b.n	80078aa <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2281      	movs	r2, #129	; 0x81
 800789a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 fab6 	bl	8008e14 <SDMMC_CmdReadSingleBlock>
 80078a8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d012      	beq.n	80078d6 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a11      	ldr	r2, [pc, #68]	; (80078fc <HAL_SD_ReadBlocks_DMA+0x18c>)
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	431a      	orrs	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e00a      	b.n	80078ec <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80078e4:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e000      	b.n	80078ec <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80078ea:	2302      	movs	r3, #2
  }
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3730      	adds	r7, #48	; 0x30
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	0800831b 	.word	0x0800831b
 80078f8:	0800838d 	.word	0x0800838d
 80078fc:	004005ff 	.word	0x004005ff

08007900 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08c      	sub	sp, #48	; 0x30
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d107      	bne.n	8007928 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0ac      	b.n	8007a82 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	f040 80a5 	bne.w	8007a80 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800793c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	441a      	add	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007946:	429a      	cmp	r2, r3
 8007948:	d907      	bls.n	800795a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e093      	b.n	8007a82 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2203      	movs	r2, #3
 800795e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2200      	movs	r2, #0
 8007968:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796e:	4a47      	ldr	r2, [pc, #284]	; (8007a8c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8007970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007976:	4a46      	ldr	r2, [pc, #280]	; (8007a90 <HAL_SD_WriteBlocks_DMA+0x190>)
 8007978:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797e:	2200      	movs	r2, #0
 8007980:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007986:	2b01      	cmp	r3, #1
 8007988:	d002      	beq.n	8007990 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	025b      	lsls	r3, r3, #9
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d90a      	bls.n	80079ac <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	22a0      	movs	r2, #160	; 0xa0
 800799a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079a2:	4618      	mov	r0, r3
 80079a4:	f001 fa9c 	bl	8008ee0 <SDMMC_CmdWriteMultiBlock>
 80079a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079aa:	e009      	b.n	80079c0 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2290      	movs	r2, #144	; 0x90
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079b8:	4618      	mov	r0, r3
 80079ba:	f001 fa6f 	bl	8008e9c <SDMMC_CmdWriteSingleBlock>
 80079be:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d012      	beq.n	80079ec <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a32      	ldr	r2, [pc, #200]	; (8007a94 <HAL_SD_WriteBlocks_DMA+0x194>)
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	431a      	orrs	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e04a      	b.n	8007a82 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0208 	orr.w	r2, r2, #8
 80079fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3380      	adds	r3, #128	; 0x80
 8007a08:	461a      	mov	r2, r3
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	025b      	lsls	r3, r3, #9
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	f7fa feb0 	bl	8002774 <HAL_DMA_Start_IT>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d012      	beq.n	8007a40 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e020      	b.n	8007a82 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295
 8007a44:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	025b      	lsls	r3, r3, #9
 8007a4a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a4c:	2390      	movs	r3, #144	; 0x90
 8007a4e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f107 0210 	add.w	r2, r7, #16
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 f986 	bl	8008d78 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 021a 	orr.w	r2, r2, #26
 8007a7a:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e000      	b.n	8007a82 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007a80:	2302      	movs	r3, #2
  }
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3730      	adds	r7, #48	; 0x30
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	080082f1 	.word	0x080082f1
 8007a90:	0800838d 	.word	0x0800838d
 8007a94:	004005ff 	.word	0x004005ff

08007a98 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d008      	beq.n	8007ac6 <HAL_SD_IRQHandler+0x2e>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0308 	and.w	r3, r3, #8
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f001 f802 	bl	8008ac8 <SD_Read_IT>
 8007ac4:	e155      	b.n	8007d72 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 808f 	beq.w	8007bf4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	6812      	ldr	r2, [r2, #0]
 8007aea:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007aee:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007af2:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d039      	beq.n	8007b82 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d104      	bne.n	8007b22 <HAL_SD_IRQHandler+0x8a>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d011      	beq.n	8007b46 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 f9fc 	bl	8008f24 <SDMMC_CmdStopTransfer>
 8007b2c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f91f 	bl	8007d84 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d104      	bne.n	8007b72 <HAL_SD_IRQHandler+0xda>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f003 f8fc 	bl	800ad70 <HAL_SD_RxCpltCallback>
 8007b78:	e0fb      	b.n	8007d72 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f003 f8ee 	bl	800ad5c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007b80:	e0f7      	b.n	8007d72 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80f2 	beq.w	8007d72 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f003 0320 	and.w	r3, r3, #32
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d011      	beq.n	8007bbc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 f9c1 	bl	8008f24 <SDMMC_CmdStopTransfer>
 8007ba2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d008      	beq.n	8007bbc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f8e4 	bl	8007d84 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 80d5 	bne.w	8007d72 <HAL_SD_IRQHandler+0x2da>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 80cf 	bne.w	8007d72 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0208 	bic.w	r2, r2, #8
 8007be2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f003 f8b5 	bl	800ad5c <HAL_SD_TxCpltCallback>
}
 8007bf2:	e0be      	b.n	8007d72 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d008      	beq.n	8007c14 <HAL_SD_IRQHandler+0x17c>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 ffac 	bl	8008b6a <SD_Write_IT>
 8007c12:	e0ae      	b.n	8007d72 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80a7 	beq.w	8007d72 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	f043 0202 	orr.w	r2, r3, #2
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c44:	f003 0308 	and.w	r3, r3, #8
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	f043 0208 	orr.w	r2, r3, #8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6a:	f043 0220 	orr.w	r2, r3, #32
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	f003 0310 	and.w	r3, r3, #16
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	f043 0210 	orr.w	r2, r3, #16
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007ca4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 f93a 	bl	8008f24 <SDMMC_CmdStopTransfer>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f855 	bl	8007d84 <HAL_SD_ErrorCallback>
}
 8007cda:	e04a      	b.n	8007d72 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d045      	beq.n	8007d72 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d104      	bne.n	8007cfa <HAL_SD_IRQHandler+0x262>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d011      	beq.n	8007d1e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	4a1f      	ldr	r2, [pc, #124]	; (8007d7c <HAL_SD_IRQHandler+0x2e4>)
 8007d00:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fa fd94 	bl	8002834 <HAL_DMA_Abort_IT>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d02f      	beq.n	8007d72 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fb84 	bl	8008424 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007d1c:	e029      	b.n	8007d72 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d104      	bne.n	8007d32 <HAL_SD_IRQHandler+0x29a>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d011      	beq.n	8007d56 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	4a12      	ldr	r2, [pc, #72]	; (8007d80 <HAL_SD_IRQHandler+0x2e8>)
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fa fd78 	bl	8002834 <HAL_DMA_Abort_IT>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d013      	beq.n	8007d72 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 fb9f 	bl	8008492 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007d54:	e00d      	b.n	8007d72 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f002 ffec 	bl	800ad48 <HAL_SD_AbortCallback>
}
 8007d70:	e7ff      	b.n	8007d72 <HAL_SD_IRQHandler+0x2da>
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	08008425 	.word	0x08008425
 8007d80:	08008493 	.word	0x08008493

08007d84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da6:	0f9b      	lsrs	r3, r3, #30
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db2:	0e9b      	lsrs	r3, r3, #26
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc4:	0e1b      	lsrs	r3, r3, #24
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	f003 0303 	and.w	r3, r3, #3
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd6:	0c1b      	lsrs	r3, r3, #16
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de2:	0a1b      	lsrs	r3, r3, #8
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df8:	0d1b      	lsrs	r3, r3, #20
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e04:	0c1b      	lsrs	r3, r3, #16
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 030f 	and.w	r3, r3, #15
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e16:	0bdb      	lsrs	r3, r3, #15
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e28:	0b9b      	lsrs	r3, r3, #14
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e3a:	0b5b      	lsrs	r3, r3, #13
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	b2da      	uxtb	r2, r3
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e4c:	0b1b      	lsrs	r3, r3, #12
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d163      	bne.n	8007f30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e6c:	009a      	lsls	r2, r3, #2
 8007e6e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e72:	4013      	ands	r3, r2
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e78:	0f92      	lsrs	r2, r2, #30
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e84:	0edb      	lsrs	r3, r3, #27
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	f003 0307 	and.w	r3, r3, #7
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e96:	0e1b      	lsrs	r3, r3, #24
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea8:	0d5b      	lsrs	r3, r3, #21
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	f003 0307 	and.w	r3, r3, #7
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eba:	0c9b      	lsrs	r3, r3, #18
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ecc:	0bdb      	lsrs	r3, r3, #15
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	7e1b      	ldrb	r3, [r3, #24]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	f003 0307 	and.w	r3, r3, #7
 8007eee:	3302      	adds	r3, #2
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007efa:	fb03 f202 	mul.w	r2, r3, r2
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	7a1b      	ldrb	r3, [r3, #8]
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	409a      	lsls	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007f1c:	0a52      	lsrs	r2, r2, #9
 8007f1e:	fb03 f202 	mul.w	r2, r3, r2
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f2c:	661a      	str	r2, [r3, #96]	; 0x60
 8007f2e:	e031      	b.n	8007f94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d11d      	bne.n	8007f74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f46:	0c1b      	lsrs	r3, r3, #16
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	3301      	adds	r3, #1
 8007f54:	029a      	lsls	r2, r3, #10
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	661a      	str	r2, [r3, #96]	; 0x60
 8007f72:	e00f      	b.n	8007f94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a58      	ldr	r2, [pc, #352]	; (80080dc <HAL_SD_GetCardCSD+0x344>)
 8007f7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e09d      	b.n	80080d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f98:	0b9b      	lsrs	r3, r3, #14
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007faa:	09db      	lsrs	r3, r3, #7
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fcc:	0fdb      	lsrs	r3, r3, #31
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd8:	0f5b      	lsrs	r3, r3, #29
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	f003 0303 	and.w	r3, r3, #3
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fea:	0e9b      	lsrs	r3, r3, #26
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffc:	0d9b      	lsrs	r3, r3, #22
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	b2da      	uxtb	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	0d5b      	lsrs	r3, r3, #21
 8008010:	b2db      	uxtb	r3, r3
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	b2da      	uxtb	r2, r3
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	0c1b      	lsrs	r3, r3, #16
 800802c:	b2db      	uxtb	r3, r3
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	b2da      	uxtb	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	0bdb      	lsrs	r3, r3, #15
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008052:	0b9b      	lsrs	r3, r3, #14
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	b2da      	uxtb	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	0b5b      	lsrs	r3, r3, #13
 8008068:	b2db      	uxtb	r3, r3
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	b2da      	uxtb	r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807a:	0b1b      	lsrs	r3, r3, #12
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	b2da      	uxtb	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808e:	0a9b      	lsrs	r3, r3, #10
 8008090:	b2db      	uxtb	r3, r3
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	b2da      	uxtb	r2, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	004005ff 	.word	0x004005ff

080080e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008138:	b5b0      	push	{r4, r5, r7, lr}
 800813a:	b090      	sub	sp, #64	; 0x40
 800813c:	af04      	add	r7, sp, #16
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2203      	movs	r2, #3
 800814c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008154:	2b03      	cmp	r3, #3
 8008156:	d02e      	beq.n	80081b6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815e:	d106      	bne.n	800816e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	639a      	str	r2, [r3, #56]	; 0x38
 800816c:	e029      	b.n	80081c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008174:	d10a      	bne.n	800818c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fb46 	bl	8008808 <SD_WideBus_Enable>
 800817c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	639a      	str	r2, [r3, #56]	; 0x38
 800818a:	e01a      	b.n	80081c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10a      	bne.n	80081a8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fb83 	bl	800889e <SD_WideBus_Disable>
 8008198:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	639a      	str	r2, [r3, #56]	; 0x38
 80081a6:	e00c      	b.n	80081c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38
 80081b4:	e005      	b.n	80081c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d007      	beq.n	80081da <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a35      	ldr	r2, [pc, #212]	; (80082a4 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80081d0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80081d8:	e042      	b.n	8008260 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80081da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80081de:	f7fd ff5f 	bl	80060a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80081e2:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d031      	beq.n	800824e <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	3302      	adds	r3, #2
 800820c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008212:	4a25      	ldr	r2, [pc, #148]	; (80082a8 <HAL_SD_ConfigWideBusOperation+0x170>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d907      	bls.n	8008228 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	4a24      	ldr	r2, [pc, #144]	; (80082ac <HAL_SD_ConfigWideBusOperation+0x174>)
 800821c:	fba2 2303 	umull	r2, r3, r2, r3
 8008220:	0ddb      	lsrs	r3, r3, #23
 8008222:	3b02      	subs	r3, #2
 8008224:	623b      	str	r3, [r7, #32]
 8008226:	e002      	b.n	800822e <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681d      	ldr	r5, [r3, #0]
 8008232:	466c      	mov	r4, sp
 8008234:	f107 0318 	add.w	r3, r7, #24
 8008238:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800823c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008240:	f107 030c 	add.w	r3, r7, #12
 8008244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008246:	4628      	mov	r0, r5
 8008248:	f000 fce4 	bl	8008c14 <SDMMC_Init>
 800824c:	e008      	b.n	8008260 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fdb1 	bl	8008dd0 <SDMMC_CmdBlockLength>
 800826e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00c      	beq.n	8008290 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a0a      	ldr	r2, [pc, #40]	; (80082a4 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800827c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008284:	431a      	orrs	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800829c:	4618      	mov	r0, r3
 800829e:	3730      	adds	r7, #48	; 0x30
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bdb0      	pop	{r4, r5, r7, pc}
 80082a4:	004005ff 	.word	0x004005ff
 80082a8:	017d7840 	.word	0x017d7840
 80082ac:	55e63b89 	.word	0x55e63b89

080082b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80082bc:	f107 030c 	add.w	r3, r7, #12
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa78 	bl	80087b8 <SD_SendStatus>
 80082c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	0a5b      	lsrs	r3, r3, #9
 80082e0:	f003 030f 	and.w	r3, r3, #15
 80082e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80082e6:	693b      	ldr	r3, [r7, #16]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800830c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800830e:	bf00      	nop
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008326:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832c:	2b82      	cmp	r3, #130	; 0x82
 800832e:	d111      	bne.n	8008354 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fdf5 	bl	8008f24 <SDMMC_CmdStopTransfer>
 800833a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d008      	beq.n	8008354 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	431a      	orrs	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7ff fd18 	bl	8007d84 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0208 	bic.w	r2, r2, #8
 8008362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f240 523a 	movw	r2, #1338	; 0x53a
 800836c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f002 fcf7 	bl	800ad70 <HAL_SD_RxCpltCallback>
#endif
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a0:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d002      	beq.n	80083b6 <SD_DMAError+0x2a>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d12d      	bne.n	8008412 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a19      	ldr	r2, [pc, #100]	; (8008420 <SD_DMAError+0x94>)
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80083cc:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80083da:	6978      	ldr	r0, [r7, #20]
 80083dc:	f7ff ff68 	bl	80082b0 <HAL_SD_GetCardState>
 80083e0:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b06      	cmp	r3, #6
 80083e6:	d002      	beq.n	80083ee <SD_DMAError+0x62>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d10a      	bne.n	8008404 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fd96 	bl	8008f24 <SDMMC_CmdStopTransfer>
 80083f8:	4602      	mov	r2, r0
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	431a      	orrs	r2, r3
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8008412:	6978      	ldr	r0, [r7, #20]
 8008414:	f7ff fcb6 	bl	8007d84 <HAL_SD_ErrorCallback>
#endif
}
 8008418:	bf00      	nop
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	004005ff 	.word	0x004005ff

08008424 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f240 523a 	movw	r2, #1338	; 0x53a
 800843a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff ff37 	bl	80082b0 <HAL_SD_GetCardState>
 8008442:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b06      	cmp	r3, #6
 8008456:	d002      	beq.n	800845e <SD_DMATxAbort+0x3a>
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b05      	cmp	r3, #5
 800845c:	d10a      	bne.n	8008474 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fd5e 	bl	8008f24 <SDMMC_CmdStopTransfer>
 8008468:	4602      	mov	r2, r0
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	431a      	orrs	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	2b00      	cmp	r3, #0
 800847a:	d103      	bne.n	8008484 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f002 fc63 	bl	800ad48 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008482:	e002      	b.n	800848a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f7ff fc7d 	bl	8007d84 <HAL_SD_ErrorCallback>
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f240 523a 	movw	r2, #1338	; 0x53a
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7ff ff00 	bl	80082b0 <HAL_SD_GetCardState>
 80084b0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b06      	cmp	r3, #6
 80084c4:	d002      	beq.n	80084cc <SD_DMARxAbort+0x3a>
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b05      	cmp	r3, #5
 80084ca:	d10a      	bne.n	80084e2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fd27 	bl	8008f24 <SDMMC_CmdStopTransfer>
 80084d6:	4602      	mov	r2, r0
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	431a      	orrs	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d103      	bne.n	80084f2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f002 fc2c 	bl	800ad48 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80084f0:	e002      	b.n	80084f8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff fc46 	bl	8007d84 <HAL_SD_ErrorCallback>
}
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008500:	b5b0      	push	{r4, r5, r7, lr}
 8008502:	b094      	sub	sp, #80	; 0x50
 8008504:	af04      	add	r7, sp, #16
 8008506:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008508:	2301      	movs	r3, #1
 800850a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fbd9 	bl	8008cc8 <SDMMC_GetPowerState>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800851c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008520:	e0b8      	b.n	8008694 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008526:	2b03      	cmp	r3, #3
 8008528:	d02f      	beq.n	800858a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fe02 	bl	8009138 <SDMMC_CmdSendCID>
 8008534:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <SD_InitCard+0x40>
    {
      return errorstate;
 800853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853e:	e0a9      	b.n	8008694 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2100      	movs	r1, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fc03 	bl	8008d52 <SDMMC_GetResponse>
 800854c:	4602      	mov	r2, r0
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2104      	movs	r1, #4
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fbfa 	bl	8008d52 <SDMMC_GetResponse>
 800855e:	4602      	mov	r2, r0
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2108      	movs	r1, #8
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fbf1 	bl	8008d52 <SDMMC_GetResponse>
 8008570:	4602      	mov	r2, r0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	210c      	movs	r1, #12
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fbe8 	bl	8008d52 <SDMMC_GetResponse>
 8008582:	4602      	mov	r2, r0
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858e:	2b03      	cmp	r3, #3
 8008590:	d00d      	beq.n	80085ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f107 020e 	add.w	r2, r7, #14
 800859a:	4611      	mov	r1, r2
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fe08 	bl	80091b2 <SDMMC_CmdSetRelAdd>
 80085a2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <SD_InitCard+0xae>
    {
      return errorstate;
 80085aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ac:	e072      	b.n	8008694 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b2:	2b03      	cmp	r3, #3
 80085b4:	d036      	beq.n	8008624 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80085b6:	89fb      	ldrh	r3, [r7, #14]
 80085b8:	461a      	mov	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c6:	041b      	lsls	r3, r3, #16
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f000 fdd2 	bl	8009174 <SDMMC_CmdSendCSD>
 80085d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80085d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085da:	e05b      	b.n	8008694 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2100      	movs	r1, #0
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fbb5 	bl	8008d52 <SDMMC_GetResponse>
 80085e8:	4602      	mov	r2, r0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2104      	movs	r1, #4
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fbac 	bl	8008d52 <SDMMC_GetResponse>
 80085fa:	4602      	mov	r2, r0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2108      	movs	r1, #8
 8008606:	4618      	mov	r0, r3
 8008608:	f000 fba3 	bl	8008d52 <SDMMC_GetResponse>
 800860c:	4602      	mov	r2, r0
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	210c      	movs	r1, #12
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fb9a 	bl	8008d52 <SDMMC_GetResponse>
 800861e:	4602      	mov	r2, r0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2104      	movs	r1, #4
 800862a:	4618      	mov	r0, r3
 800862c:	f000 fb91 	bl	8008d52 <SDMMC_GetResponse>
 8008630:	4603      	mov	r3, r0
 8008632:	0d1a      	lsrs	r2, r3, #20
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008638:	f107 0310 	add.w	r3, r7, #16
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff fbaa 	bl	8007d98 <HAL_SD_GetCardCSD>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800864a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800864e:	e021      	b.n	8008694 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6819      	ldr	r1, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008658:	041b      	lsls	r3, r3, #16
 800865a:	2200      	movs	r2, #0
 800865c:	461c      	mov	r4, r3
 800865e:	4615      	mov	r5, r2
 8008660:	4622      	mov	r2, r4
 8008662:	462b      	mov	r3, r5
 8008664:	4608      	mov	r0, r1
 8008666:	f000 fc7f 	bl	8008f68 <SDMMC_CmdSelDesel>
 800866a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800866c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <SD_InitCard+0x176>
  {
    return errorstate;
 8008672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008674:	e00e      	b.n	8008694 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681d      	ldr	r5, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	466c      	mov	r4, sp
 800867e:	f103 0210 	add.w	r2, r3, #16
 8008682:	ca07      	ldmia	r2, {r0, r1, r2}
 8008684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008688:	3304      	adds	r3, #4
 800868a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800868c:	4628      	mov	r0, r5
 800868e:	f000 fac1 	bl	8008c14 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3740      	adds	r7, #64	; 0x40
 8008698:	46bd      	mov	sp, r7
 800869a:	bdb0      	pop	{r4, r5, r7, pc}

0800869c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	2300      	movs	r3, #0
 80086ae:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fc7a 	bl	8008fae <SDMMC_CmdGoIdleState>
 80086ba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	e072      	b.n	80087ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fc8d 	bl	8008fea <SDMMC_CmdOperCond>
 80086d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00d      	beq.n	80086f4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fc63 	bl	8008fae <SDMMC_CmdGoIdleState>
 80086e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <SD_PowerON+0x5e>
    {
      return errorstate;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	e05b      	b.n	80087ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d137      	bne.n	8008772 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2100      	movs	r1, #0
 8008708:	4618      	mov	r0, r3
 800870a:	f000 fc8d 	bl	8009028 <SDMMC_CmdAppCommand>
 800870e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d02d      	beq.n	8008772 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008716:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800871a:	e047      	b.n	80087ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fc80 	bl	8009028 <SDMMC_CmdAppCommand>
 8008728:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <SD_PowerON+0x98>
    {
      return errorstate;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	e03b      	b.n	80087ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	491e      	ldr	r1, [pc, #120]	; (80087b4 <SD_PowerON+0x118>)
 800873a:	4618      	mov	r0, r3
 800873c:	f000 fc96 	bl	800906c <SDMMC_CmdAppOperCommand>
 8008740:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800874c:	e02e      	b.n	80087ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f000 fafc 	bl	8008d52 <SDMMC_GetResponse>
 800875a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	0fdb      	lsrs	r3, r3, #31
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <SD_PowerON+0xcc>
 8008764:	2301      	movs	r3, #1
 8008766:	e000      	b.n	800876a <SD_PowerON+0xce>
 8008768:	2300      	movs	r3, #0
 800876a:	613b      	str	r3, [r7, #16]

    count++;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	3301      	adds	r3, #1
 8008770:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008778:	4293      	cmp	r3, r2
 800877a:	d802      	bhi.n	8008782 <SD_PowerON+0xe6>
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0cc      	beq.n	800871c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008788:	4293      	cmp	r3, r2
 800878a:	d902      	bls.n	8008792 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800878c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008790:	e00c      	b.n	80087ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	645a      	str	r2, [r3, #68]	; 0x44
 80087a2:	e002      	b.n	80087aa <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	c1100000 	.word	0xc1100000

080087b8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d102      	bne.n	80087ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80087c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087cc:	e018      	b.n	8008800 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d6:	041b      	lsls	r3, r3, #16
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f000 fd0a 	bl	80091f4 <SDMMC_CmdSendStatus>
 80087e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	e009      	b.n	8008800 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 faad 	bl	8008d52 <SDMMC_GetResponse>
 80087f8:	4602      	mov	r2, r0
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	2300      	movs	r3, #0
 8008816:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fa97 	bl	8008d52 <SDMMC_GetResponse>
 8008824:	4603      	mov	r3, r0
 8008826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800882e:	d102      	bne.n	8008836 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008834:	e02f      	b.n	8008896 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008836:	f107 030c 	add.w	r3, r7, #12
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f879 	bl	8008934 <SD_FindSCR>
 8008842:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	e023      	b.n	8008896 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d01c      	beq.n	8008892 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008860:	041b      	lsls	r3, r3, #16
 8008862:	4619      	mov	r1, r3
 8008864:	4610      	mov	r0, r2
 8008866:	f000 fbdf 	bl	8009028 <SDMMC_CmdAppCommand>
 800886a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	e00f      	b.n	8008896 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2102      	movs	r1, #2
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fc18 	bl	80090b2 <SDMMC_CmdBusWidth>
 8008882:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	e003      	b.n	8008896 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800888e:	2300      	movs	r3, #0
 8008890:	e001      	b.n	8008896 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008892:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	2300      	movs	r3, #0
 80088ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2100      	movs	r1, #0
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 fa4c 	bl	8008d52 <SDMMC_GetResponse>
 80088ba:	4603      	mov	r3, r0
 80088bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088c4:	d102      	bne.n	80088cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088ca:	e02f      	b.n	800892c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088cc:	f107 030c 	add.w	r3, r7, #12
 80088d0:	4619      	mov	r1, r3
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f82e 	bl	8008934 <SD_FindSCR>
 80088d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	e023      	b.n	800892c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01c      	beq.n	8008928 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f000 fb94 	bl	8009028 <SDMMC_CmdAppCommand>
 8008900:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	e00f      	b.n	800892c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2100      	movs	r1, #0
 8008912:	4618      	mov	r0, r3
 8008914:	f000 fbcd 	bl	80090b2 <SDMMC_CmdBusWidth>
 8008918:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	e003      	b.n	800892c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008924:	2300      	movs	r3, #0
 8008926:	e001      	b.n	800892c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008928:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800892c:	4618      	mov	r0, r3
 800892e:	3718      	adds	r7, #24
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008934:	b590      	push	{r4, r7, lr}
 8008936:	b08f      	sub	sp, #60	; 0x3c
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800893e:	f7f9 fd1f 	bl	8002380 <HAL_GetTick>
 8008942:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008948:	2300      	movs	r3, #0
 800894a:	60bb      	str	r3, [r7, #8]
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2108      	movs	r1, #8
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fa38 	bl	8008dd0 <SDMMC_CmdBlockLength>
 8008960:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896a:	e0a9      	b.n	8008ac0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008974:	041b      	lsls	r3, r3, #16
 8008976:	4619      	mov	r1, r3
 8008978:	4610      	mov	r0, r2
 800897a:	f000 fb55 	bl	8009028 <SDMMC_CmdAppCommand>
 800897e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008988:	e09a      	b.n	8008ac0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800898a:	f04f 33ff 	mov.w	r3, #4294967295
 800898e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008990:	2308      	movs	r3, #8
 8008992:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008994:	2330      	movs	r3, #48	; 0x30
 8008996:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008998:	2302      	movs	r3, #2
 800899a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800899c:	2300      	movs	r3, #0
 800899e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80089a0:	2301      	movs	r3, #1
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f107 0210 	add.w	r2, r7, #16
 80089ac:	4611      	mov	r1, r2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f9e2 	bl	8008d78 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 fb9c 	bl	80090f6 <SDMMC_CmdSendSCR>
 80089be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d022      	beq.n	8008a0c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	e07a      	b.n	8008ac0 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00e      	beq.n	80089f6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6819      	ldr	r1, [r3, #0]
 80089dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	f107 0208 	add.w	r2, r7, #8
 80089e4:	18d4      	adds	r4, r2, r3
 80089e6:	4608      	mov	r0, r1
 80089e8:	f000 f941 	bl	8008c6e <SDMMC_ReadFIFO>
 80089ec:	4603      	mov	r3, r0
 80089ee:	6023      	str	r3, [r4, #0]
      index++;
 80089f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f2:	3301      	adds	r3, #1
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089f6:	f7f9 fcc3 	bl	8002380 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d102      	bne.n	8008a0c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a0a:	e059      	b.n	8008ac0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a12:	f240 432a 	movw	r3, #1066	; 0x42a
 8008a16:	4013      	ands	r3, r2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0d6      	beq.n	80089ca <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d005      	beq.n	8008a36 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2208      	movs	r2, #8
 8008a30:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a32:	2308      	movs	r3, #8
 8008a34:	e044      	b.n	8008ac0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2202      	movs	r2, #2
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e037      	b.n	8008ac0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a56:	f003 0320 	and.w	r3, r3, #32
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d005      	beq.n	8008a6a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2220      	movs	r2, #32
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a66:	2320      	movs	r3, #32
 8008a68:	e02a      	b.n	8008ac0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	061a      	lsls	r2, r3, #24
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	021b      	lsls	r3, r3, #8
 8008a7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a80:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	0a1b      	lsrs	r3, r3, #8
 8008a86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a8a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	0e1b      	lsrs	r3, r3, #24
 8008a90:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	601a      	str	r2, [r3, #0]
    scr++;
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	3304      	adds	r3, #4
 8008a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	061a      	lsls	r2, r3, #24
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008aa8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ab2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	0e1b      	lsrs	r3, r3, #24
 8008ab8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	373c      	adds	r7, #60	; 0x3c
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd90      	pop	{r4, r7, pc}

08008ac8 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d03f      	beq.n	8008b62 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	617b      	str	r3, [r7, #20]
 8008ae6:	e033      	b.n	8008b50 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f8be 	bl	8008c6e <SDMMC_ReadFIFO>
 8008af2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3301      	adds	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	0c1b      	lsrs	r3, r3, #16
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	0e1b      	lsrs	r3, r3, #24
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3301      	adds	r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b07      	cmp	r3, #7
 8008b54:	d9c8      	bls.n	8008ae8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008b62:	bf00      	nop
 8008b64:	3718      	adds	r7, #24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b086      	sub	sp, #24
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d043      	beq.n	8008c0c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	e037      	b.n	8008bfa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3301      	adds	r3, #1
 8008b94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	021a      	lsls	r2, r3, #8
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	041a      	lsls	r2, r3, #16
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	061a      	lsls	r2, r3, #24
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f107 0208 	add.w	r2, r7, #8
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 f84a 	bl	8008c88 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b07      	cmp	r3, #7
 8008bfe:	d9c4      	bls.n	8008b8a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008c0c:	bf00      	nop
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008c14:	b084      	sub	sp, #16
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	f107 001c 	add.w	r0, r7, #28
 8008c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8008c32:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8008c36:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008c3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008c3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008c42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008c52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	b004      	add	sp, #16
 8008c6c:	4770      	bx	lr

08008c6e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b083      	sub	sp, #12
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2203      	movs	r2, #3
 8008cb6:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008cb8:	2002      	movs	r0, #2
 8008cba:	f7f9 fb6d 	bl	8002398 <HAL_Delay>

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0303 	and.w	r3, r3, #3
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d02:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008d08:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008d0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008d1e:	f023 030f 	bic.w	r3, r3, #15
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	b2db      	uxtb	r3, r3
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b085      	sub	sp, #20
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	3314      	adds	r3, #20
 8008d60:	461a      	mov	r2, r3
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	4413      	add	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d9e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008da4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008daa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0

}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008dde:	2310      	movs	r3, #16
 8008de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008de2:	2340      	movs	r3, #64	; 0x40
 8008de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008df0:	f107 0308 	add.w	r3, r7, #8
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff ff74 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e00:	2110      	movs	r1, #16
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fa18 	bl	8009238 <SDMMC_GetCmdResp1>
 8008e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e0a:	69fb      	ldr	r3, [r7, #28]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3720      	adds	r7, #32
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e22:	2311      	movs	r3, #17
 8008e24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e26:	2340      	movs	r3, #64	; 0x40
 8008e28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e34:	f107 0308 	add.w	r3, r7, #8
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7ff ff52 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e44:	2111      	movs	r1, #17
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f9f6 	bl	8009238 <SDMMC_GetCmdResp1>
 8008e4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e66:	2312      	movs	r3, #18
 8008e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e6a:	2340      	movs	r3, #64	; 0x40
 8008e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e78:	f107 0308 	add.w	r3, r7, #8
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff ff30 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e88:	2112      	movs	r1, #18
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f9d4 	bl	8009238 <SDMMC_GetCmdResp1>
 8008e90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e92:	69fb      	ldr	r3, [r7, #28]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3720      	adds	r7, #32
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008eaa:	2318      	movs	r3, #24
 8008eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008eae:	2340      	movs	r3, #64	; 0x40
 8008eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ebc:	f107 0308 	add.w	r3, r7, #8
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff ff0e 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ecc:	2118      	movs	r1, #24
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f9b2 	bl	8009238 <SDMMC_GetCmdResp1>
 8008ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008eee:	2319      	movs	r3, #25
 8008ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ef2:	2340      	movs	r3, #64	; 0x40
 8008ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f00:	f107 0308 	add.w	r3, r7, #8
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff feec 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f10:	2119      	movs	r1, #25
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f990 	bl	8009238 <SDMMC_GetCmdResp1>
 8008f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f30:	230c      	movs	r3, #12
 8008f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f34:	2340      	movs	r3, #64	; 0x40
 8008f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f40:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f42:	f107 0308 	add.w	r3, r7, #8
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff fecb 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008f4e:	4a05      	ldr	r2, [pc, #20]	; (8008f64 <SDMMC_CmdStopTransfer+0x40>)
 8008f50:	210c      	movs	r1, #12
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f970 	bl	8009238 <SDMMC_GetCmdResp1>
 8008f58:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	05f5e100 	.word	0x05f5e100

08008f68 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	; 0x28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f78:	2307      	movs	r3, #7
 8008f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f7c:	2340      	movs	r3, #64	; 0x40
 8008f7e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f88:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f8a:	f107 0310 	add.w	r3, r7, #16
 8008f8e:	4619      	mov	r1, r3
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff fea7 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9a:	2107      	movs	r1, #7
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 f94b 	bl	8009238 <SDMMC_GetCmdResp1>
 8008fa2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3728      	adds	r7, #40	; 0x28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b088      	sub	sp, #32
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fcc:	f107 0308 	add.w	r3, r7, #8
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff fe86 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fb65 	bl	80096a8 <SDMMC_GetCmdError>
 8008fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe0:	69fb      	ldr	r3, [r7, #28]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3720      	adds	r7, #32
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b088      	sub	sp, #32
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008ff2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008ff6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008ff8:	2308      	movs	r3, #8
 8008ffa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ffc:	2340      	movs	r3, #64	; 0x40
 8008ffe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009000:	2300      	movs	r3, #0
 8009002:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009008:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800900a:	f107 0308 	add.w	r3, r7, #8
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff fe67 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 faf8 	bl	800960c <SDMMC_GetCmdResp7>
 800901c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800901e:	69fb      	ldr	r3, [r7, #28]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009036:	2337      	movs	r3, #55	; 0x37
 8009038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800903a:	2340      	movs	r3, #64	; 0x40
 800903c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff fe48 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009054:	f241 3288 	movw	r2, #5000	; 0x1388
 8009058:	2137      	movs	r1, #55	; 0x37
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f8ec 	bl	8009238 <SDMMC_GetCmdResp1>
 8009060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009062:	69fb      	ldr	r3, [r7, #28]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3720      	adds	r7, #32
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800907c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009080:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009082:	2329      	movs	r3, #41	; 0x29
 8009084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009086:	2340      	movs	r3, #64	; 0x40
 8009088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800908e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009092:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009094:	f107 0308 	add.w	r3, r7, #8
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7ff fe22 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f9ff 	bl	80094a4 <SDMMC_GetCmdResp3>
 80090a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090a8:	69fb      	ldr	r3, [r7, #28]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b088      	sub	sp, #32
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80090c0:	2306      	movs	r3, #6
 80090c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090c4:	2340      	movs	r3, #64	; 0x40
 80090c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fe03 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80090de:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e2:	2106      	movs	r1, #6
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f8a7 	bl	8009238 <SDMMC_GetCmdResp1>
 80090ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ec:	69fb      	ldr	r3, [r7, #28]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3720      	adds	r7, #32
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b088      	sub	sp, #32
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009102:	2333      	movs	r3, #51	; 0x33
 8009104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009106:	2340      	movs	r3, #64	; 0x40
 8009108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800910e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009114:	f107 0308 	add.w	r3, r7, #8
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fde2 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009120:	f241 3288 	movw	r2, #5000	; 0x1388
 8009124:	2133      	movs	r1, #51	; 0x33
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f886 	bl	8009238 <SDMMC_GetCmdResp1>
 800912c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800912e:	69fb      	ldr	r3, [r7, #28]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009144:	2302      	movs	r3, #2
 8009146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009148:	23c0      	movs	r3, #192	; 0xc0
 800914a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800914c:	2300      	movs	r3, #0
 800914e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009154:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009156:	f107 0308 	add.w	r3, r7, #8
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fdc1 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f956 	bl	8009414 <SDMMC_GetCmdResp2>
 8009168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800916a:	69fb      	ldr	r3, [r7, #28]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3720      	adds	r7, #32
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009182:	2309      	movs	r3, #9
 8009184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009186:	23c0      	movs	r3, #192	; 0xc0
 8009188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800918e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009192:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009194:	f107 0308 	add.w	r3, r7, #8
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff fda2 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f937 	bl	8009414 <SDMMC_GetCmdResp2>
 80091a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091a8:	69fb      	ldr	r3, [r7, #28]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3720      	adds	r7, #32
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b088      	sub	sp, #32
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80091c0:	2303      	movs	r3, #3
 80091c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091c4:	2340      	movs	r3, #64	; 0x40
 80091c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091d2:	f107 0308 	add.w	r3, r7, #8
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff fd83 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	2103      	movs	r1, #3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f99c 	bl	8009520 <SDMMC_GetCmdResp6>
 80091e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ea:	69fb      	ldr	r3, [r7, #28]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3720      	adds	r7, #32
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009202:	230d      	movs	r3, #13
 8009204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009206:	2340      	movs	r3, #64	; 0x40
 8009208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800920e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009212:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009214:	f107 0308 	add.w	r3, r7, #8
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff fd62 	bl	8008ce4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009220:	f241 3288 	movw	r2, #5000	; 0x1388
 8009224:	210d      	movs	r1, #13
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f806 	bl	8009238 <SDMMC_GetCmdResp1>
 800922c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800922e:	69fb      	ldr	r3, [r7, #28]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3720      	adds	r7, #32
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	460b      	mov	r3, r1
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009246:	4b70      	ldr	r3, [pc, #448]	; (8009408 <SDMMC_GetCmdResp1+0x1d0>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a70      	ldr	r2, [pc, #448]	; (800940c <SDMMC_GetCmdResp1+0x1d4>)
 800924c:	fba2 2303 	umull	r2, r3, r2, r3
 8009250:	0a5a      	lsrs	r2, r3, #9
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	fb02 f303 	mul.w	r3, r2, r3
 8009258:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	1e5a      	subs	r2, r3, #1
 800925e:	61fa      	str	r2, [r7, #28]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009264:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009268:	e0c9      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0ef      	beq.n	800925a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1ea      	bne.n	800925a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	d004      	beq.n	800929a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2204      	movs	r2, #4
 8009294:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009296:	2304      	movs	r3, #4
 8009298:	e0b1      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d004      	beq.n	80092b0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e0a6      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	22c5      	movs	r2, #197	; 0xc5
 80092b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7ff fd3e 	bl	8008d38 <SDMMC_GetCommandResponse>
 80092bc:	4603      	mov	r3, r0
 80092be:	461a      	mov	r2, r3
 80092c0:	7afb      	ldrb	r3, [r7, #11]
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d001      	beq.n	80092ca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e099      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80092ca:	2100      	movs	r1, #0
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f7ff fd40 	bl	8008d52 <SDMMC_GetResponse>
 80092d2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	4b4e      	ldr	r3, [pc, #312]	; (8009410 <SDMMC_GetCmdResp1+0x1d8>)
 80092d8:	4013      	ands	r3, r2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80092de:	2300      	movs	r3, #0
 80092e0:	e08d      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	da02      	bge.n	80092ee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80092e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092ec:	e087      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80092f8:	2340      	movs	r3, #64	; 0x40
 80092fa:	e080      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009306:	2380      	movs	r3, #128	; 0x80
 8009308:	e079      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009318:	e071      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009328:	e069      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009338:	e061      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009348:	e059      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009358:	e051      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009368:	e049      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009374:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009378:	e041      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009388:	e039      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009398:	e031      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80093a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093a8:	e029      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80093b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80093b8:	e021      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80093c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093c8:	e019      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80093d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093d8:	e011      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80093e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093e8:	e009      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f003 0308 	and.w	r3, r3, #8
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80093f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80093f8:	e001      	b.n	80093fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3720      	adds	r7, #32
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20000000 	.word	0x20000000
 800940c:	10624dd3 	.word	0x10624dd3
 8009410:	fdffe008 	.word	0xfdffe008

08009414 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800941c:	4b1f      	ldr	r3, [pc, #124]	; (800949c <SDMMC_GetCmdResp2+0x88>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a1f      	ldr	r2, [pc, #124]	; (80094a0 <SDMMC_GetCmdResp2+0x8c>)
 8009422:	fba2 2303 	umull	r2, r3, r2, r3
 8009426:	0a5b      	lsrs	r3, r3, #9
 8009428:	f241 3288 	movw	r2, #5000	; 0x1388
 800942c:	fb02 f303 	mul.w	r3, r2, r3
 8009430:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	1e5a      	subs	r2, r3, #1
 8009436:	60fa      	str	r2, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800943c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009440:	e026      	b.n	8009490 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009446:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800944e:	2b00      	cmp	r3, #0
 8009450:	d0ef      	beq.n	8009432 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1ea      	bne.n	8009432 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009460:	f003 0304 	and.w	r3, r3, #4
 8009464:	2b00      	cmp	r3, #0
 8009466:	d004      	beq.n	8009472 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2204      	movs	r2, #4
 800946c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800946e:	2304      	movs	r3, #4
 8009470:	e00e      	b.n	8009490 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	d004      	beq.n	8009488 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009484:	2301      	movs	r3, #1
 8009486:	e003      	b.n	8009490 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	22c5      	movs	r2, #197	; 0xc5
 800948c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	20000000 	.word	0x20000000
 80094a0:	10624dd3 	.word	0x10624dd3

080094a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094ac:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <SDMMC_GetCmdResp3+0x74>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a1a      	ldr	r2, [pc, #104]	; (800951c <SDMMC_GetCmdResp3+0x78>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	0a5b      	lsrs	r3, r3, #9
 80094b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094bc:	fb02 f303 	mul.w	r3, r2, r3
 80094c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	1e5a      	subs	r2, r3, #1
 80094c6:	60fa      	str	r2, [r7, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d102      	bne.n	80094d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094d0:	e01b      	b.n	800950a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0ef      	beq.n	80094c2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1ea      	bne.n	80094c2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d004      	beq.n	8009502 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2204      	movs	r2, #4
 80094fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094fe:	2304      	movs	r3, #4
 8009500:	e003      	b.n	800950a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	22c5      	movs	r2, #197	; 0xc5
 8009506:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000000 	.word	0x20000000
 800951c:	10624dd3 	.word	0x10624dd3

08009520 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b088      	sub	sp, #32
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	460b      	mov	r3, r1
 800952a:	607a      	str	r2, [r7, #4]
 800952c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800952e:	4b35      	ldr	r3, [pc, #212]	; (8009604 <SDMMC_GetCmdResp6+0xe4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a35      	ldr	r2, [pc, #212]	; (8009608 <SDMMC_GetCmdResp6+0xe8>)
 8009534:	fba2 2303 	umull	r2, r3, r2, r3
 8009538:	0a5b      	lsrs	r3, r3, #9
 800953a:	f241 3288 	movw	r2, #5000	; 0x1388
 800953e:	fb02 f303 	mul.w	r3, r2, r3
 8009542:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	1e5a      	subs	r2, r3, #1
 8009548:	61fa      	str	r2, [r7, #28]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800954e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009552:	e052      	b.n	80095fa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009558:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0ef      	beq.n	8009544 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1ea      	bne.n	8009544 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	d004      	beq.n	8009584 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2204      	movs	r2, #4
 800957e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009580:	2304      	movs	r3, #4
 8009582:	e03a      	b.n	80095fa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009596:	2301      	movs	r3, #1
 8009598:	e02f      	b.n	80095fa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7ff fbcc 	bl	8008d38 <SDMMC_GetCommandResponse>
 80095a0:	4603      	mov	r3, r0
 80095a2:	461a      	mov	r2, r3
 80095a4:	7afb      	ldrb	r3, [r7, #11]
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d001      	beq.n	80095ae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e025      	b.n	80095fa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	22c5      	movs	r2, #197	; 0xc5
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80095b4:	2100      	movs	r1, #0
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f7ff fbcb 	bl	8008d52 <SDMMC_GetResponse>
 80095bc:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	0c1b      	lsrs	r3, r3, #16
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	e011      	b.n	80095fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095e4:	e009      	b.n	80095fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095f4:	e001      	b.n	80095fa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3720      	adds	r7, #32
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	20000000 	.word	0x20000000
 8009608:	10624dd3 	.word	0x10624dd3

0800960c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009614:	4b22      	ldr	r3, [pc, #136]	; (80096a0 <SDMMC_GetCmdResp7+0x94>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a22      	ldr	r2, [pc, #136]	; (80096a4 <SDMMC_GetCmdResp7+0x98>)
 800961a:	fba2 2303 	umull	r2, r3, r2, r3
 800961e:	0a5b      	lsrs	r3, r3, #9
 8009620:	f241 3288 	movw	r2, #5000	; 0x1388
 8009624:	fb02 f303 	mul.w	r3, r2, r3
 8009628:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	1e5a      	subs	r2, r3, #1
 800962e:	60fa      	str	r2, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d102      	bne.n	800963a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009638:	e02c      	b.n	8009694 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0ef      	beq.n	800962a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1ea      	bne.n	800962a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009658:	f003 0304 	and.w	r3, r3, #4
 800965c:	2b00      	cmp	r3, #0
 800965e:	d004      	beq.n	800966a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2204      	movs	r2, #4
 8009664:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009666:	2304      	movs	r3, #4
 8009668:	e014      	b.n	8009694 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d004      	beq.n	8009680 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800967c:	2301      	movs	r3, #1
 800967e:	e009      	b.n	8009694 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2240      	movs	r2, #64	; 0x40
 8009690:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009692:	2300      	movs	r3, #0

}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	20000000 	.word	0x20000000
 80096a4:	10624dd3 	.word	0x10624dd3

080096a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096b0:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <SDMMC_GetCmdError+0x50>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a11      	ldr	r2, [pc, #68]	; (80096fc <SDMMC_GetCmdError+0x54>)
 80096b6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ba:	0a5b      	lsrs	r3, r3, #9
 80096bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c0:	fb02 f303 	mul.w	r3, r2, r3
 80096c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	1e5a      	subs	r2, r3, #1
 80096ca:	60fa      	str	r2, [r7, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d102      	bne.n	80096d6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096d4:	e009      	b.n	80096ea <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0f1      	beq.n	80096c6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	22c5      	movs	r2, #197	; 0xc5
 80096e6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	20000000 	.word	0x20000000
 80096fc:	10624dd3 	.word	0x10624dd3

08009700 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009700:	b084      	sub	sp, #16
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	f107 001c 	add.w	r0, r7, #28
 800970e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f001 fa1c 	bl	800ab5c <USB_CoreReset>
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	639a      	str	r2, [r3, #56]	; 0x38
 800973a:	e005      	b.n	8009748 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8009748:	7bfb      	ldrb	r3, [r7, #15]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009754:	b004      	add	sp, #16
 8009756:	4770      	bx	lr

08009758 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d165      	bne.n	8009838 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	4a3e      	ldr	r2, [pc, #248]	; (8009868 <USB_SetTurnaroundTime+0x110>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d906      	bls.n	8009782 <USB_SetTurnaroundTime+0x2a>
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4a3d      	ldr	r2, [pc, #244]	; (800986c <USB_SetTurnaroundTime+0x114>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d202      	bcs.n	8009782 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800977c:	230f      	movs	r3, #15
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	e05c      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	4a39      	ldr	r2, [pc, #228]	; (800986c <USB_SetTurnaroundTime+0x114>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d306      	bcc.n	8009798 <USB_SetTurnaroundTime+0x40>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	4a38      	ldr	r2, [pc, #224]	; (8009870 <USB_SetTurnaroundTime+0x118>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d202      	bcs.n	8009798 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009792:	230e      	movs	r3, #14
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	e051      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4a35      	ldr	r2, [pc, #212]	; (8009870 <USB_SetTurnaroundTime+0x118>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d306      	bcc.n	80097ae <USB_SetTurnaroundTime+0x56>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4a34      	ldr	r2, [pc, #208]	; (8009874 <USB_SetTurnaroundTime+0x11c>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d202      	bcs.n	80097ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80097a8:	230d      	movs	r3, #13
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	e046      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	4a30      	ldr	r2, [pc, #192]	; (8009874 <USB_SetTurnaroundTime+0x11c>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d306      	bcc.n	80097c4 <USB_SetTurnaroundTime+0x6c>
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4a2f      	ldr	r2, [pc, #188]	; (8009878 <USB_SetTurnaroundTime+0x120>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d802      	bhi.n	80097c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80097be:	230c      	movs	r3, #12
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	e03b      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	4a2c      	ldr	r2, [pc, #176]	; (8009878 <USB_SetTurnaroundTime+0x120>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d906      	bls.n	80097da <USB_SetTurnaroundTime+0x82>
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	4a2b      	ldr	r2, [pc, #172]	; (800987c <USB_SetTurnaroundTime+0x124>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d802      	bhi.n	80097da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80097d4:	230b      	movs	r3, #11
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	e030      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	4a27      	ldr	r2, [pc, #156]	; (800987c <USB_SetTurnaroundTime+0x124>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d906      	bls.n	80097f0 <USB_SetTurnaroundTime+0x98>
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	4a26      	ldr	r2, [pc, #152]	; (8009880 <USB_SetTurnaroundTime+0x128>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d802      	bhi.n	80097f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097ea:	230a      	movs	r3, #10
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	e025      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4a23      	ldr	r2, [pc, #140]	; (8009880 <USB_SetTurnaroundTime+0x128>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d906      	bls.n	8009806 <USB_SetTurnaroundTime+0xae>
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4a22      	ldr	r2, [pc, #136]	; (8009884 <USB_SetTurnaroundTime+0x12c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d202      	bcs.n	8009806 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009800:	2309      	movs	r3, #9
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	e01a      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	4a1e      	ldr	r2, [pc, #120]	; (8009884 <USB_SetTurnaroundTime+0x12c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d306      	bcc.n	800981c <USB_SetTurnaroundTime+0xc4>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4a1d      	ldr	r2, [pc, #116]	; (8009888 <USB_SetTurnaroundTime+0x130>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d802      	bhi.n	800981c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009816:	2308      	movs	r3, #8
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	e00f      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	4a1a      	ldr	r2, [pc, #104]	; (8009888 <USB_SetTurnaroundTime+0x130>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d906      	bls.n	8009832 <USB_SetTurnaroundTime+0xda>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4a19      	ldr	r2, [pc, #100]	; (800988c <USB_SetTurnaroundTime+0x134>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d202      	bcs.n	8009832 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800982c:	2307      	movs	r3, #7
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e004      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009832:	2306      	movs	r3, #6
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	e001      	b.n	800983c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009838:	2309      	movs	r3, #9
 800983a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	029b      	lsls	r3, r3, #10
 8009850:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009854:	431a      	orrs	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	00d8acbf 	.word	0x00d8acbf
 800986c:	00e4e1c0 	.word	0x00e4e1c0
 8009870:	00f42400 	.word	0x00f42400
 8009874:	01067380 	.word	0x01067380
 8009878:	011a499f 	.word	0x011a499f
 800987c:	01312cff 	.word	0x01312cff
 8009880:	014ca43f 	.word	0x014ca43f
 8009884:	016e3600 	.word	0x016e3600
 8009888:	01a6ab1f 	.word	0x01a6ab1f
 800988c:	01e84800 	.word	0x01e84800

08009890 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	f043 0201 	orr.w	r2, r3, #1
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b083      	sub	sp, #12
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f023 0201 	bic.w	r2, r3, #1
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d115      	bne.n	8009922 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009902:	2001      	movs	r0, #1
 8009904:	f7f8 fd48 	bl	8002398 <HAL_Delay>
      ms++;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3301      	adds	r3, #1
 800990c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 f8ab 	bl	800aa6a <USB_GetMode>
 8009914:	4603      	mov	r3, r0
 8009916:	2b01      	cmp	r3, #1
 8009918:	d01e      	beq.n	8009958 <USB_SetCurrentMode+0x84>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2b31      	cmp	r3, #49	; 0x31
 800991e:	d9f0      	bls.n	8009902 <USB_SetCurrentMode+0x2e>
 8009920:	e01a      	b.n	8009958 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d115      	bne.n	8009954 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009934:	2001      	movs	r0, #1
 8009936:	f7f8 fd2f 	bl	8002398 <HAL_Delay>
      ms++;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f001 f892 	bl	800aa6a <USB_GetMode>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d005      	beq.n	8009958 <USB_SetCurrentMode+0x84>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b31      	cmp	r3, #49	; 0x31
 8009950:	d9f0      	bls.n	8009934 <USB_SetCurrentMode+0x60>
 8009952:	e001      	b.n	8009958 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e005      	b.n	8009964 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2b32      	cmp	r3, #50	; 0x32
 800995c:	d101      	bne.n	8009962 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e000      	b.n	8009964 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800996c:	b084      	sub	sp, #16
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800997a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009986:	2300      	movs	r3, #0
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	e009      	b.n	80099a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3340      	adds	r3, #64	; 0x40
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	2200      	movs	r2, #0
 8009998:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3301      	adds	r3, #1
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	2b0e      	cmp	r3, #14
 80099a4:	d9f2      	bls.n	800998c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80099a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11c      	bne.n	80099e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099ba:	f043 0302 	orr.w	r3, r3, #2
 80099be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	e005      	b.n	80099f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099f8:	461a      	mov	r2, r3
 80099fa:	2300      	movs	r3, #0
 80099fc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099fe:	2103      	movs	r1, #3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f959 	bl	8009cb8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a06:	2110      	movs	r1, #16
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f8f1 	bl	8009bf0 <USB_FlushTxFifo>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f91d 	bl	8009c58 <USB_FlushRxFifo>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2e:	461a      	mov	r2, r3
 8009a30:	2300      	movs	r3, #0
 8009a32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a46:	461a      	mov	r2, r3
 8009a48:	2300      	movs	r3, #0
 8009a4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	613b      	str	r3, [r7, #16]
 8009a50:	e043      	b.n	8009ada <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a68:	d118      	bne.n	8009a9c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10a      	bne.n	8009a86 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	e013      	b.n	8009aae <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a92:	461a      	mov	r2, r3
 8009a94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a98:	6013      	str	r3, [r2, #0]
 8009a9a:	e008      	b.n	8009aae <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	2300      	movs	r3, #0
 8009aac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aba:	461a      	mov	r2, r3
 8009abc:	2300      	movs	r3, #0
 8009abe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009acc:	461a      	mov	r2, r3
 8009ace:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ad2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	613b      	str	r3, [r7, #16]
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d3b7      	bcc.n	8009a52 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	e043      	b.n	8009b70 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009afe:	d118      	bne.n	8009b32 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b12:	461a      	mov	r2, r3
 8009b14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	e013      	b.n	8009b44 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b28:	461a      	mov	r2, r3
 8009b2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	e008      	b.n	8009b44 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3e:	461a      	mov	r2, r3
 8009b40:	2300      	movs	r3, #0
 8009b42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b50:	461a      	mov	r2, r3
 8009b52:	2300      	movs	r3, #0
 8009b54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b62:	461a      	mov	r2, r3
 8009b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	613b      	str	r3, [r7, #16]
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d3b7      	bcc.n	8009ae8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	f043 0210 	orr.w	r2, r3, #16
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	699a      	ldr	r2, [r3, #24]
 8009baa:	4b10      	ldr	r3, [pc, #64]	; (8009bec <USB_DevInit+0x280>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f043 0208 	orr.w	r2, r3, #8
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d107      	bne.n	8009bda <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bd2:	f043 0304 	orr.w	r3, r3, #4
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009be6:	b004      	add	sp, #16
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	803c3800 	.word	0x803c3800

08009bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4a13      	ldr	r2, [pc, #76]	; (8009c54 <USB_FlushTxFifo+0x64>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d901      	bls.n	8009c10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e01b      	b.n	8009c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	daf2      	bge.n	8009bfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	019b      	lsls	r3, r3, #6
 8009c20:	f043 0220 	orr.w	r2, r3, #32
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4a08      	ldr	r2, [pc, #32]	; (8009c54 <USB_FlushTxFifo+0x64>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d901      	bls.n	8009c3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c36:	2303      	movs	r3, #3
 8009c38:	e006      	b.n	8009c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	f003 0320 	and.w	r3, r3, #32
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	d0f0      	beq.n	8009c28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	00030d40 	.word	0x00030d40

08009c58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4a11      	ldr	r2, [pc, #68]	; (8009cb4 <USB_FlushRxFifo+0x5c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d901      	bls.n	8009c76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e018      	b.n	8009ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	daf2      	bge.n	8009c64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2210      	movs	r2, #16
 8009c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4a08      	ldr	r2, [pc, #32]	; (8009cb4 <USB_FlushRxFifo+0x5c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d901      	bls.n	8009c9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e006      	b.n	8009ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	f003 0310 	and.w	r3, r3, #16
 8009ca2:	2b10      	cmp	r3, #16
 8009ca4:	d0f0      	beq.n	8009c88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	00030d40 	.word	0x00030d40

08009cb8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	68f9      	ldr	r1, [r7, #12]
 8009cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b087      	sub	sp, #28
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	f003 0306 	and.w	r3, r3, #6
 8009d02:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d002      	beq.n	8009d10 <USB_GetDevSpeed+0x26>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b06      	cmp	r3, #6
 8009d0e:	d102      	bne.n	8009d16 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d10:	2302      	movs	r3, #2
 8009d12:	75fb      	strb	r3, [r7, #23]
 8009d14:	e001      	b.n	8009d1a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009d16:	230f      	movs	r3, #15
 8009d18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	371c      	adds	r7, #28
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d13a      	bne.n	8009dba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 030f 	and.w	r3, r3, #15
 8009d54:	2101      	movs	r1, #1
 8009d56:	fa01 f303 	lsl.w	r3, r1, r3
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	68f9      	ldr	r1, [r7, #12]
 8009d5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d62:	4313      	orrs	r3, r2
 8009d64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d155      	bne.n	8009e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	791b      	ldrb	r3, [r3, #4]
 8009d96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	059b      	lsls	r3, r3, #22
 8009d9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009da0:	4313      	orrs	r3, r2
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	0151      	lsls	r1, r2, #5
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	440a      	add	r2, r1
 8009daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	e036      	b.n	8009e28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc0:	69da      	ldr	r2, [r3, #28]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 030f 	and.w	r3, r3, #15
 8009dca:	2101      	movs	r1, #1
 8009dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd0:	041b      	lsls	r3, r3, #16
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d11a      	bne.n	8009e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	791b      	ldrb	r3, [r3, #4]
 8009e0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	4313      	orrs	r3, r2
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	0151      	lsls	r1, r2, #5
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	440a      	add	r2, r1
 8009e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
	...

08009e38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d161      	bne.n	8009f18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e6a:	d11f      	bne.n	8009eac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	0151      	lsls	r1, r2, #5
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	440a      	add	r2, r1
 8009e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	0151      	lsls	r1, r2, #5
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	440a      	add	r2, r1
 8009ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	43db      	mvns	r3, r3
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ecc:	4013      	ands	r3, r2
 8009ece:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed6:	69da      	ldr	r2, [r3, #28]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f003 030f 	and.w	r3, r3, #15
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	43db      	mvns	r3, r3
 8009eea:	68f9      	ldr	r1, [r7, #12]
 8009eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	0159      	lsls	r1, r3, #5
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	440b      	add	r3, r1
 8009f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0e:	4619      	mov	r1, r3
 8009f10:	4b35      	ldr	r3, [pc, #212]	; (8009fe8 <USB_DeactivateEndpoint+0x1b0>)
 8009f12:	4013      	ands	r3, r2
 8009f14:	600b      	str	r3, [r1, #0]
 8009f16:	e060      	b.n	8009fda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f2e:	d11f      	bne.n	8009f70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	0151      	lsls	r1, r2, #5
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	440a      	add	r2, r1
 8009f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	2101      	movs	r1, #1
 8009f82:	fa01 f303 	lsl.w	r3, r1, r3
 8009f86:	041b      	lsls	r3, r3, #16
 8009f88:	43db      	mvns	r3, r3
 8009f8a:	68f9      	ldr	r1, [r7, #12]
 8009f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f90:	4013      	ands	r3, r2
 8009f92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9a:	69da      	ldr	r2, [r3, #28]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	f003 030f 	and.w	r3, r3, #15
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8009faa:	041b      	lsls	r3, r3, #16
 8009fac:	43db      	mvns	r3, r3
 8009fae:	68f9      	ldr	r1, [r7, #12]
 8009fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	0159      	lsls	r1, r3, #5
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	440b      	add	r3, r1
 8009fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <USB_DeactivateEndpoint+0x1b4>)
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	ec337800 	.word	0xec337800
 8009fec:	eff37800 	.word	0xeff37800

08009ff0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	785b      	ldrb	r3, [r3, #1]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	f040 8128 	bne.w	800a25e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d132      	bne.n	800a07c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a030:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a034:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	4413      	add	r3, r2
 800a062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	0151      	lsls	r1, r2, #5
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	440a      	add	r2, r1
 800a070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a074:	0cdb      	lsrs	r3, r3, #19
 800a076:	04db      	lsls	r3, r3, #19
 800a078:	6113      	str	r3, [r2, #16]
 800a07a:	e092      	b.n	800a1a2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	440a      	add	r2, r1
 800a092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a096:	0cdb      	lsrs	r3, r3, #19
 800a098:	04db      	lsls	r3, r3, #19
 800a09a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	015a      	lsls	r2, r3, #5
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	0151      	lsls	r1, r2, #5
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	440a      	add	r2, r1
 800a0b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d11a      	bne.n	800a0fc <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d903      	bls.n	800a0da <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	0151      	lsls	r1, r2, #5
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	440a      	add	r2, r1
 800a0f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0f8:	6113      	str	r3, [r2, #16]
 800a0fa:	e01b      	b.n	800a134 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	4413      	add	r3, r2
 800a104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a108:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	6919      	ldr	r1, [r3, #16]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	440b      	add	r3, r1
 800a114:	1e59      	subs	r1, r3, #1
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a11e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a120:	4b8d      	ldr	r3, [pc, #564]	; (800a358 <USB_EPStartXfer+0x368>)
 800a122:	400b      	ands	r3, r1
 800a124:	6939      	ldr	r1, [r7, #16]
 800a126:	0148      	lsls	r0, r1, #5
 800a128:	6979      	ldr	r1, [r7, #20]
 800a12a:	4401      	add	r1, r0
 800a12c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a130:	4313      	orrs	r3, r2
 800a132:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a140:	691a      	ldr	r2, [r3, #16]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a14a:	6939      	ldr	r1, [r7, #16]
 800a14c:	0148      	lsls	r0, r1, #5
 800a14e:	6979      	ldr	r1, [r7, #20]
 800a150:	4401      	add	r1, r0
 800a152:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a156:	4313      	orrs	r3, r2
 800a158:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	791b      	ldrb	r3, [r3, #4]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d11f      	bne.n	800a1a2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	015a      	lsls	r2, r3, #5
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	4413      	add	r3, r2
 800a16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	0151      	lsls	r1, r2, #5
 800a174:	697a      	ldr	r2, [r7, #20]
 800a176:	440a      	add	r2, r1
 800a178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a17c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a180:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a19c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1a0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	0151      	lsls	r1, r2, #5
 800a1b4:	697a      	ldr	r2, [r7, #20]
 800a1b6:	440a      	add	r2, r1
 800a1b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1c0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	791b      	ldrb	r3, [r3, #4]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d015      	beq.n	800a1f6 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 8139 	beq.w	800a446 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	f003 030f 	and.w	r3, r3, #15
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ea:	6979      	ldr	r1, [r7, #20]
 800a1ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	634b      	str	r3, [r1, #52]	; 0x34
 800a1f4:	e127      	b.n	800a446 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a202:	2b00      	cmp	r3, #0
 800a204:	d110      	bne.n	800a228 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	0151      	lsls	r1, r2, #5
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	440a      	add	r2, r1
 800a21c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	e00f      	b.n	800a248 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	0151      	lsls	r1, r2, #5
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	440a      	add	r2, r1
 800a23e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a246:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	68d9      	ldr	r1, [r3, #12]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781a      	ldrb	r2, [r3, #0]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	b29b      	uxth	r3, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f9a6 	bl	800a5a8 <USB_WritePacket>
 800a25c:	e0f3      	b.n	800a446 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	0151      	lsls	r1, r2, #5
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	440a      	add	r2, r1
 800a274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a278:	0cdb      	lsrs	r3, r3, #19
 800a27a:	04db      	lsls	r3, r3, #19
 800a27c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	440a      	add	r2, r1
 800a294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a298:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a29c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2a0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d12f      	bne.n	800a308 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d003      	beq.n	800a2b8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2cc:	691a      	ldr	r2, [r3, #16]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2d6:	6939      	ldr	r1, [r7, #16]
 800a2d8:	0148      	lsls	r0, r1, #5
 800a2da:	6979      	ldr	r1, [r7, #20]
 800a2dc:	4401      	add	r1, r0
 800a2de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	0151      	lsls	r1, r2, #5
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	440a      	add	r2, r1
 800a2fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a304:	6113      	str	r3, [r2, #16]
 800a306:	e061      	b.n	800a3cc <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d125      	bne.n	800a35c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a31c:	691a      	ldr	r2, [r3, #16]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a326:	6939      	ldr	r1, [r7, #16]
 800a328:	0148      	lsls	r0, r1, #5
 800a32a:	6979      	ldr	r1, [r7, #20]
 800a32c:	4401      	add	r1, r0
 800a32e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a332:	4313      	orrs	r3, r2
 800a334:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	0151      	lsls	r1, r2, #5
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	440a      	add	r2, r1
 800a34c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a354:	6113      	str	r3, [r2, #16]
 800a356:	e039      	b.n	800a3cc <USB_EPStartXfer+0x3dc>
 800a358:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	691a      	ldr	r2, [r3, #16]
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	4413      	add	r3, r2
 800a366:	1e5a      	subs	r2, r3, #1
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a370:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	89fa      	ldrh	r2, [r7, #14]
 800a378:	fb03 f202 	mul.w	r2, r3, r2
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38c:	691a      	ldr	r2, [r3, #16]
 800a38e:	89fb      	ldrh	r3, [r7, #14]
 800a390:	04d9      	lsls	r1, r3, #19
 800a392:	4b2f      	ldr	r3, [pc, #188]	; (800a450 <USB_EPStartXfer+0x460>)
 800a394:	400b      	ands	r3, r1
 800a396:	6939      	ldr	r1, [r7, #16]
 800a398:	0148      	lsls	r0, r1, #5
 800a39a:	6979      	ldr	r1, [r7, #20]
 800a39c:	4401      	add	r1, r0
 800a39e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b2:	691a      	ldr	r2, [r3, #16]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3bc:	6939      	ldr	r1, [r7, #16]
 800a3be:	0148      	lsls	r0, r1, #5
 800a3c0:	6979      	ldr	r1, [r7, #20]
 800a3c2:	4401      	add	r1, r0
 800a3c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	791b      	ldrb	r3, [r3, #4]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d128      	bne.n	800a426 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d110      	bne.n	800a406 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	0151      	lsls	r1, r2, #5
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	440a      	add	r2, r1
 800a3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	e00f      	b.n	800a426 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	0151      	lsls	r1, r2, #5
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	440a      	add	r2, r1
 800a41c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a424:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	015a      	lsls	r2, r3, #5
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	4413      	add	r3, r2
 800a42e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	0151      	lsls	r1, r2, #5
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	440a      	add	r2, r1
 800a43c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a440:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a444:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	1ff80000 	.word	0x1ff80000

0800a454 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a454:	b480      	push	{r7}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	785b      	ldrb	r3, [r3, #1]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d14a      	bne.n	800a508 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	015a      	lsls	r2, r3, #5
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	4413      	add	r3, r2
 800a47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a48a:	f040 8086 	bne.w	800a59a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	7812      	ldrb	r2, [r2, #0]
 800a4a2:	0151      	lsls	r1, r2, #5
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	440a      	add	r2, r1
 800a4a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	7812      	ldrb	r2, [r2, #0]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f242 7210 	movw	r2, #10000	; 0x2710
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d902      	bls.n	800a4ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ea:	e056      	b.n	800a59a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a504:	d0e7      	beq.n	800a4d6 <USB_EPStopXfer+0x82>
 800a506:	e048      	b.n	800a59a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4413      	add	r3, r2
 800a512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a51c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a520:	d13b      	bne.n	800a59a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	7812      	ldrb	r2, [r2, #0]
 800a536:	0151      	lsls	r1, r2, #5
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	440a      	add	r2, r1
 800a53c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a540:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a544:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	7812      	ldrb	r2, [r2, #0]
 800a55a:	0151      	lsls	r1, r2, #5
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	440a      	add	r2, r1
 800a560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a568:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3301      	adds	r3, #1
 800a56e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f242 7210 	movw	r2, #10000	; 0x2710
 800a576:	4293      	cmp	r3, r2
 800a578:	d902      	bls.n	800a580 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	75fb      	strb	r3, [r7, #23]
          break;
 800a57e:	e00c      	b.n	800a59a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a598:	d0e7      	beq.n	800a56a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	371c      	adds	r7, #28
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b089      	sub	sp, #36	; 0x24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	71fb      	strb	r3, [r7, #7]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a5c6:	88bb      	ldrh	r3, [r7, #4]
 800a5c8:	3303      	adds	r3, #3
 800a5ca:	089b      	lsrs	r3, r3, #2
 800a5cc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	e018      	b.n	800a606 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	031a      	lsls	r2, r3, #12
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	3301      	adds	r3, #1
 800a604:	61bb      	str	r3, [r7, #24]
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d3e2      	bcc.n	800a5d4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3724      	adds	r7, #36	; 0x24
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b08b      	sub	sp, #44	; 0x2c
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	4613      	mov	r3, r2
 800a628:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a632:	88fb      	ldrh	r3, [r7, #6]
 800a634:	089b      	lsrs	r3, r3, #2
 800a636:	b29b      	uxth	r3, r3
 800a638:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a63a:	88fb      	ldrh	r3, [r7, #6]
 800a63c:	f003 0303 	and.w	r3, r3, #3
 800a640:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a642:	2300      	movs	r3, #0
 800a644:	623b      	str	r3, [r7, #32]
 800a646:	e014      	b.n	800a672 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	601a      	str	r2, [r3, #0]
    pDest++;
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	3301      	adds	r3, #1
 800a658:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	3301      	adds	r3, #1
 800a65e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	3301      	adds	r3, #1
 800a664:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	3301      	adds	r3, #1
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	3301      	adds	r3, #1
 800a670:	623b      	str	r3, [r7, #32]
 800a672:	6a3a      	ldr	r2, [r7, #32]
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	429a      	cmp	r2, r3
 800a678:	d3e6      	bcc.n	800a648 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a67a:	8bfb      	ldrh	r3, [r7, #30]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d01e      	beq.n	800a6be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a68a:	461a      	mov	r2, r3
 800a68c:	f107 0310 	add.w	r3, r7, #16
 800a690:	6812      	ldr	r2, [r2, #0]
 800a692:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	00db      	lsls	r3, r3, #3
 800a69c:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	701a      	strb	r2, [r3, #0]
      i++;
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	623b      	str	r3, [r7, #32]
      pDest++;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a6b2:	8bfb      	ldrh	r3, [r7, #30]
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6b8:	8bfb      	ldrh	r3, [r7, #30]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1ea      	bne.n	800a694 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	372c      	adds	r7, #44	; 0x2c
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	785b      	ldrb	r3, [r3, #1]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d12c      	bne.n	800a742 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	db12      	blt.n	800a720 <USB_EPSetStall+0x54>
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00f      	beq.n	800a720 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	0151      	lsls	r1, r2, #5
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	440a      	add	r2, r1
 800a716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a71e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	0151      	lsls	r1, r2, #5
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	440a      	add	r2, r1
 800a736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a73a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a73e:	6013      	str	r3, [r2, #0]
 800a740:	e02b      	b.n	800a79a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	db12      	blt.n	800a77a <USB_EPSetStall+0xae>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00f      	beq.n	800a77a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	0151      	lsls	r1, r2, #5
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	440a      	add	r2, r1
 800a770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a774:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a778:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	015a      	lsls	r2, r3, #5
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4413      	add	r3, r2
 800a782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	0151      	lsls	r1, r2, #5
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	440a      	add	r2, r1
 800a790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a798:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d128      	bne.n	800a816 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	0151      	lsls	r1, r2, #5
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	440a      	add	r2, r1
 800a7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a7e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	791b      	ldrb	r3, [r3, #4]
 800a7e8:	2b03      	cmp	r3, #3
 800a7ea:	d003      	beq.n	800a7f4 <USB_EPClearStall+0x4c>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	791b      	ldrb	r3, [r3, #4]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d138      	bne.n	800a866 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	0151      	lsls	r1, r2, #5
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	440a      	add	r2, r1
 800a80a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a80e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	e027      	b.n	800a866 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	0151      	lsls	r1, r2, #5
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	440a      	add	r2, r1
 800a82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a830:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a834:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	791b      	ldrb	r3, [r3, #4]
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d003      	beq.n	800a846 <USB_EPClearStall+0x9e>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	791b      	ldrb	r3, [r3, #4]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d10f      	bne.n	800a866 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	015a      	lsls	r2, r3, #5
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	4413      	add	r3, r2
 800a84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	0151      	lsls	r1, r2, #5
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	440a      	add	r2, r1
 800a85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a864:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a892:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a896:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	011b      	lsls	r3, r3, #4
 800a8a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a8a8:	68f9      	ldr	r1, [r7, #12]
 800a8aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a8da:	f023 0303 	bic.w	r3, r3, #3
 800a8de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ee:	f023 0302 	bic.w	r3, r3, #2
 800a8f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a91c:	f023 0303 	bic.w	r3, r3, #3
 800a920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a930:	f043 0302 	orr.w	r3, r3, #2
 800a934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	4013      	ands	r3, r2
 800a95a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a95c:	68fb      	ldr	r3, [r7, #12]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr

0800a96a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b085      	sub	sp, #20
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a986:	69db      	ldr	r3, [r3, #28]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	4013      	ands	r3, r2
 800a98c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	0c1b      	lsrs	r3, r3, #16
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b085      	sub	sp, #20
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	b29b      	uxth	r3, r3
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b085      	sub	sp, #20
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa00:	68bb      	ldr	r3, [r7, #8]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b087      	sub	sp, #28
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	460b      	mov	r3, r1
 800aa18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	f003 030f 	and.w	r3, r3, #15
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa3e:	01db      	lsls	r3, r3, #7
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	371c      	adds	r7, #28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b083      	sub	sp, #12
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	f003 0301 	and.w	r3, r3, #1
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaa0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aaa4:	f023 0307 	bic.w	r3, r3, #7
 800aaa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aabc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	333c      	adds	r3, #60	; 0x3c
 800aade:	3304      	adds	r3, #4
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	4a1c      	ldr	r2, [pc, #112]	; (800ab58 <USB_EP0_OutStart+0x8c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d90a      	bls.n	800ab02 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aafc:	d101      	bne.n	800ab02 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	e024      	b.n	800ab4c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab08:	461a      	mov	r2, r3
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab30:	f043 0318 	orr.w	r3, r3, #24
 800ab34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab44:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ab48:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	4f54300a 	.word	0x4f54300a

0800ab5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab64:	2300      	movs	r3, #0
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4a13      	ldr	r2, [pc, #76]	; (800abc0 <USB_CoreReset+0x64>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d901      	bls.n	800ab7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e01b      	b.n	800abb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	daf2      	bge.n	800ab68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f043 0201 	orr.w	r2, r3, #1
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3301      	adds	r3, #1
 800ab96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4a09      	ldr	r2, [pc, #36]	; (800abc0 <USB_CoreReset+0x64>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d901      	bls.n	800aba4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e006      	b.n	800abb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b01      	cmp	r3, #1
 800abae:	d0f0      	beq.n	800ab92 <USB_CoreReset+0x36>

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	00030d40 	.word	0x00030d40

0800abc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800abc8:	4904      	ldr	r1, [pc, #16]	; (800abdc <MX_FATFS_Init+0x18>)
 800abca:	4805      	ldr	r0, [pc, #20]	; (800abe0 <MX_FATFS_Init+0x1c>)
 800abcc:	f005 f814 	bl	800fbf8 <FATFS_LinkDriver>
 800abd0:	4603      	mov	r3, r0
 800abd2:	461a      	mov	r2, r3
 800abd4:	4b03      	ldr	r3, [pc, #12]	; (800abe4 <MX_FATFS_Init+0x20>)
 800abd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800abd8:	bf00      	nop
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	2000a304 	.word	0x2000a304
 800abe0:	08015268 	.word	0x08015268
 800abe4:	2000a300 	.word	0x2000a300

0800abe8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800abe8:	b480      	push	{r7}
 800abea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800abec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800abee:	4618      	mov	r0, r3
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ac02:	f000 f8c6 	bl	800ad92 <BSP_SD_IsDetected>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d001      	beq.n	800ac10 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	e012      	b.n	800ac36 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ac10:	480b      	ldr	r0, [pc, #44]	; (800ac40 <BSP_SD_Init+0x48>)
 800ac12:	f7fc fcd7 	bl	80075c4 <HAL_SD_Init>
 800ac16:	4603      	mov	r3, r0
 800ac18:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ac1a:	79fb      	ldrb	r3, [r7, #7]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d109      	bne.n	800ac34 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ac20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ac24:	4806      	ldr	r0, [pc, #24]	; (800ac40 <BSP_SD_Init+0x48>)
 800ac26:	f7fd fa87 	bl	8008138 <HAL_SD_ConfigWideBusOperation>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d001      	beq.n	800ac34 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ac34:	79fb      	ldrb	r3, [r7, #7]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20000368 	.word	0x20000368

0800ac44 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmarx);
 800ac54:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	4b11      	ldr	r3, [pc, #68]	; (800aca4 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0201 	bic.w	r2, r2, #1
 800ac66:	601a      	str	r2, [r3, #0]

  hsd1.hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac68:	4b0e      	ldr	r3, [pc, #56]	; (800aca4 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	609a      	str	r2, [r3, #8]

  hsd1.hdmarx->Instance->CCR &= ~DMA_CCR_DIR;
 800ac70:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f022 0210 	bic.w	r2, r2, #16
 800ac82:	601a      	str	r2, [r3, #0]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	68f9      	ldr	r1, [r7, #12]
 800ac8a:	4806      	ldr	r0, [pc, #24]	; (800aca4 <BSP_SD_ReadBlocks_DMA+0x60>)
 800ac8c:	f7fc fd70 	bl	8007770 <HAL_SD_ReadBlocks_DMA>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <BSP_SD_ReadBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20000368 	.word	0x20000368

0800aca8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	75fb      	strb	r3, [r7, #23]

  // Change DMA direction before calling SD Read

  // Direction can only be changed when DMA is disabled

  __HAL_DMA_DISABLE(hsd1.hdmatx);
 800acb8:	4b13      	ldr	r3, [pc, #76]	; (800ad08 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	4b11      	ldr	r3, [pc, #68]	; (800ad08 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f022 0201 	bic.w	r2, r2, #1
 800acca:	601a      	str	r2, [r3, #0]

  hsd1.hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800accc:	4b0e      	ldr	r3, [pc, #56]	; (800ad08 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd0:	2210      	movs	r2, #16
 800acd2:	609a      	str	r2, [r3, #8]

  hsd1.hdmatx->Instance->CCR |= (uint32_t)DMA_CCR_DIR;
 800acd4:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f042 0210 	orr.w	r2, r2, #16
 800ace6:	601a      	str	r2, [r3, #0]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	68f9      	ldr	r1, [r7, #12]
 800acee:	4806      	ldr	r0, [pc, #24]	; (800ad08 <BSP_SD_WriteBlocks_DMA+0x60>)
 800acf0:	f7fc fe06 	bl	8007900 <HAL_SD_WriteBlocks_DMA>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <BSP_SD_WriteBlocks_DMA+0x56>
  {
    sd_state = MSD_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800acfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20000368 	.word	0x20000368

0800ad0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad10:	4805      	ldr	r0, [pc, #20]	; (800ad28 <BSP_SD_GetCardState+0x1c>)
 800ad12:	f7fd facd 	bl	80082b0 <HAL_SD_GetCardState>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b04      	cmp	r3, #4
 800ad1a:	bf14      	ite	ne
 800ad1c:	2301      	movne	r3, #1
 800ad1e:	2300      	moveq	r3, #0
 800ad20:	b2db      	uxtb	r3, r3
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000368 	.word	0x20000368

0800ad2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ad34:	6879      	ldr	r1, [r7, #4]
 800ad36:	4803      	ldr	r0, [pc, #12]	; (800ad44 <BSP_SD_GetCardInfo+0x18>)
 800ad38:	f7fd f9d2 	bl	80080e0 <HAL_SD_GetCardInfo>
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000368 	.word	0x20000368

0800ad48 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ad50:	f000 f818 	bl	800ad84 <BSP_SD_AbortCallback>
}
 800ad54:	bf00      	nop
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ad64:	f000 f9a8 	bl	800b0b8 <BSP_SD_WriteCpltCallback>
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ad78:	f000 f9aa 	bl	800b0d0 <BSP_SD_ReadCpltCallback>
}
 800ad7c:	bf00      	nop
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0

}
 800ad88:	bf00      	nop
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ad9c:	f000 f80c 	bl	800adb8 <BSP_PlatformIsDetected>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ada6:	2300      	movs	r3, #0
 800ada8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800adaa:	79fb      	ldrb	r3, [r7, #7]
 800adac:	b2db      	uxtb	r3, r3
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
	...

0800adb8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800adbe:	2301      	movs	r3, #1
 800adc0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800adc2:	2180      	movs	r1, #128	; 0x80
 800adc4:	4806      	ldr	r0, [pc, #24]	; (800ade0 <BSP_PlatformIsDetected+0x28>)
 800adc6:	f7f7 ffff 	bl	8002dc8 <HAL_GPIO_ReadPin>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800add0:	2300      	movs	r3, #0
 800add2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800add4:	79fb      	ldrb	r3, [r7, #7]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	48000800 	.word	0x48000800

0800ade4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800adec:	f7f7 fac8 	bl	8002380 <HAL_GetTick>
 800adf0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800adf2:	e006      	b.n	800ae02 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800adf4:	f7ff ff8a 	bl	800ad0c <BSP_SD_GetCardState>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	e009      	b.n	800ae16 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ae02:	f7f7 fabd 	bl	8002380 <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d8f0      	bhi.n	800adf4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ae12:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <SD_CheckStatus+0x38>)
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ae30:	f7ff ff6c 	bl	800ad0c <BSP_SD_GetCardState>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d107      	bne.n	800ae4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ae3a:	4b07      	ldr	r3, [pc, #28]	; (800ae58 <SD_CheckStatus+0x38>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	f023 0301 	bic.w	r3, r3, #1
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	4b04      	ldr	r3, [pc, #16]	; (800ae58 <SD_CheckStatus+0x38>)
 800ae48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ae4a:	4b03      	ldr	r3, [pc, #12]	; (800ae58 <SD_CheckStatus+0x38>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	b2db      	uxtb	r3, r3
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	20000009 	.word	0x20000009

0800ae5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	4603      	mov	r3, r0
 800ae64:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ae66:	f7ff fec7 	bl	800abf8 <BSP_SD_Init>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d107      	bne.n	800ae80 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ae70:	79fb      	ldrb	r3, [r7, #7]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7ff ffd4 	bl	800ae20 <SD_CheckStatus>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	4b04      	ldr	r3, [pc, #16]	; (800ae90 <SD_initialize+0x34>)
 800ae7e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ae80:	4b03      	ldr	r3, [pc, #12]	; (800ae90 <SD_initialize+0x34>)
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	b2db      	uxtb	r3, r3
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20000009 	.word	0x20000009

0800ae94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae9e:	79fb      	ldrb	r3, [r7, #7]
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7ff ffbd 	bl	800ae20 <SD_CheckStatus>
 800aea6:	4603      	mov	r3, r0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60b9      	str	r1, [r7, #8]
 800aeb8:	607a      	str	r2, [r7, #4]
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	4603      	mov	r3, r0
 800aebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aec4:	f247 5030 	movw	r0, #30000	; 0x7530
 800aec8:	f7ff ff8c 	bl	800ade4 <SD_CheckStatusWithTimeout>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	da01      	bge.n	800aed6 <SD_read+0x26>
  {
    return res;
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	e03b      	b.n	800af4e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	6879      	ldr	r1, [r7, #4]
 800aeda:	68b8      	ldr	r0, [r7, #8]
 800aedc:	f7ff feb2 	bl	800ac44 <BSP_SD_ReadBlocks_DMA>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d132      	bne.n	800af4c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800aee6:	4b1c      	ldr	r3, [pc, #112]	; (800af58 <SD_read+0xa8>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800aeec:	f7f7 fa48 	bl	8002380 <HAL_GetTick>
 800aef0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aef2:	bf00      	nop
 800aef4:	4b18      	ldr	r3, [pc, #96]	; (800af58 <SD_read+0xa8>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d108      	bne.n	800af0e <SD_read+0x5e>
 800aefc:	f7f7 fa40 	bl	8002380 <HAL_GetTick>
 800af00:	4602      	mov	r2, r0
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	f247 522f 	movw	r2, #29999	; 0x752f
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d9f2      	bls.n	800aef4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800af0e:	4b12      	ldr	r3, [pc, #72]	; (800af58 <SD_read+0xa8>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d102      	bne.n	800af1c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	75fb      	strb	r3, [r7, #23]
 800af1a:	e017      	b.n	800af4c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800af1c:	4b0e      	ldr	r3, [pc, #56]	; (800af58 <SD_read+0xa8>)
 800af1e:	2200      	movs	r2, #0
 800af20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800af22:	f7f7 fa2d 	bl	8002380 <HAL_GetTick>
 800af26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af28:	e007      	b.n	800af3a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af2a:	f7ff feef 	bl	800ad0c <BSP_SD_GetCardState>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d102      	bne.n	800af3a <SD_read+0x8a>
          {
            res = RES_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800af38:	e008      	b.n	800af4c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af3a:	f7f7 fa21 	bl	8002380 <HAL_GetTick>
 800af3e:	4602      	mov	r2, r0
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	f247 522f 	movw	r2, #29999	; 0x752f
 800af48:	4293      	cmp	r3, r2
 800af4a:	d9ee      	bls.n	800af2a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	2000a76c 	.word	0x2000a76c

0800af5c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	60b9      	str	r1, [r7, #8]
 800af64:	607a      	str	r2, [r7, #4]
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	4603      	mov	r3, r0
 800af6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800af70:	4b24      	ldr	r3, [pc, #144]	; (800b004 <SD_write+0xa8>)
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800af76:	f247 5030 	movw	r0, #30000	; 0x7530
 800af7a:	f7ff ff33 	bl	800ade4 <SD_CheckStatusWithTimeout>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	da01      	bge.n	800af88 <SD_write+0x2c>
  {
    return res;
 800af84:	7dfb      	ldrb	r3, [r7, #23]
 800af86:	e038      	b.n	800affa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	6879      	ldr	r1, [r7, #4]
 800af8c:	68b8      	ldr	r0, [r7, #8]
 800af8e:	f7ff fe8b 	bl	800aca8 <BSP_SD_WriteBlocks_DMA>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d12f      	bne.n	800aff8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800af98:	f7f7 f9f2 	bl	8002380 <HAL_GetTick>
 800af9c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800af9e:	bf00      	nop
 800afa0:	4b18      	ldr	r3, [pc, #96]	; (800b004 <SD_write+0xa8>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d108      	bne.n	800afba <SD_write+0x5e>
 800afa8:	f7f7 f9ea 	bl	8002380 <HAL_GetTick>
 800afac:	4602      	mov	r2, r0
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	f247 522f 	movw	r2, #29999	; 0x752f
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d9f2      	bls.n	800afa0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800afba:	4b12      	ldr	r3, [pc, #72]	; (800b004 <SD_write+0xa8>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d102      	bne.n	800afc8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	75fb      	strb	r3, [r7, #23]
 800afc6:	e017      	b.n	800aff8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800afc8:	4b0e      	ldr	r3, [pc, #56]	; (800b004 <SD_write+0xa8>)
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800afce:	f7f7 f9d7 	bl	8002380 <HAL_GetTick>
 800afd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800afd4:	e007      	b.n	800afe6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800afd6:	f7ff fe99 	bl	800ad0c <BSP_SD_GetCardState>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d102      	bne.n	800afe6 <SD_write+0x8a>
          {
            res = RES_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	75fb      	strb	r3, [r7, #23]
            break;
 800afe4:	e008      	b.n	800aff8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800afe6:	f7f7 f9cb 	bl	8002380 <HAL_GetTick>
 800afea:	4602      	mov	r2, r0
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	f247 522f 	movw	r2, #29999	; 0x752f
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d9ee      	bls.n	800afd6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	2000a768 	.word	0x2000a768

0800b008 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08c      	sub	sp, #48	; 0x30
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	603a      	str	r2, [r7, #0]
 800b012:	71fb      	strb	r3, [r7, #7]
 800b014:	460b      	mov	r3, r1
 800b016:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b01e:	4b25      	ldr	r3, [pc, #148]	; (800b0b4 <SD_ioctl+0xac>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <SD_ioctl+0x28>
 800b02c:	2303      	movs	r3, #3
 800b02e:	e03c      	b.n	800b0aa <SD_ioctl+0xa2>

  switch (cmd)
 800b030:	79bb      	ldrb	r3, [r7, #6]
 800b032:	2b03      	cmp	r3, #3
 800b034:	d834      	bhi.n	800b0a0 <SD_ioctl+0x98>
 800b036:	a201      	add	r2, pc, #4	; (adr r2, 800b03c <SD_ioctl+0x34>)
 800b038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03c:	0800b04d 	.word	0x0800b04d
 800b040:	0800b055 	.word	0x0800b055
 800b044:	0800b06d 	.word	0x0800b06d
 800b048:	0800b087 	.word	0x0800b087
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b052:	e028      	b.n	800b0a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b054:	f107 030c 	add.w	r3, r7, #12
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff fe67 	bl	800ad2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b06a:	e01c      	b.n	800b0a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b06c:	f107 030c 	add.w	r3, r7, #12
 800b070:	4618      	mov	r0, r3
 800b072:	f7ff fe5b 	bl	800ad2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	b29a      	uxth	r2, r3
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b084:	e00f      	b.n	800b0a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b086:	f107 030c 	add.w	r3, r7, #12
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff fe4e 	bl	800ad2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	0a5a      	lsrs	r2, r3, #9
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b098:	2300      	movs	r3, #0
 800b09a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b09e:	e002      	b.n	800b0a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b0a0:	2304      	movs	r3, #4
 800b0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b0a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3730      	adds	r7, #48	; 0x30
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000009 	.word	0x20000009

0800b0b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b0bc:	4b03      	ldr	r3, [pc, #12]	; (800b0cc <BSP_SD_WriteCpltCallback+0x14>)
 800b0be:	2201      	movs	r2, #1
 800b0c0:	601a      	str	r2, [r3, #0]
}
 800b0c2:	bf00      	nop
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	2000a768 	.word	0x2000a768

0800b0d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b0d4:	4b03      	ldr	r3, [pc, #12]	; (800b0e4 <BSP_SD_ReadCpltCallback+0x14>)
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	601a      	str	r2, [r3, #0]
}
 800b0da:	bf00      	nop
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	2000a76c 	.word	0x2000a76c

0800b0e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b0f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b0f8:	f005 fbae 	bl	8010858 <USBD_static_malloc>
 800b0fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d109      	bne.n	800b118 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	32b0      	adds	r2, #176	; 0xb0
 800b10e:	2100      	movs	r1, #0
 800b110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b114:	2302      	movs	r3, #2
 800b116:	e0d4      	b.n	800b2c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b118:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b11c:	2100      	movs	r1, #0
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f006 fb75 	bl	801180e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	32b0      	adds	r2, #176	; 0xb0
 800b12e:	68f9      	ldr	r1, [r7, #12]
 800b130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	32b0      	adds	r2, #176	; 0xb0
 800b13e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7c1b      	ldrb	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d138      	bne.n	800b1c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b150:	4b5e      	ldr	r3, [pc, #376]	; (800b2cc <USBD_CDC_Init+0x1e4>)
 800b152:	7819      	ldrb	r1, [r3, #0]
 800b154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b158:	2202      	movs	r2, #2
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f005 f968 	bl	8010430 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b160:	4b5a      	ldr	r3, [pc, #360]	; (800b2cc <USBD_CDC_Init+0x1e4>)
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	f003 020f 	and.w	r2, r3, #15
 800b168:	6879      	ldr	r1, [r7, #4]
 800b16a:	4613      	mov	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	3324      	adds	r3, #36	; 0x24
 800b176:	2201      	movs	r2, #1
 800b178:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b17a:	4b55      	ldr	r3, [pc, #340]	; (800b2d0 <USBD_CDC_Init+0x1e8>)
 800b17c:	7819      	ldrb	r1, [r3, #0]
 800b17e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b182:	2202      	movs	r2, #2
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f005 f953 	bl	8010430 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b18a:	4b51      	ldr	r3, [pc, #324]	; (800b2d0 <USBD_CDC_Init+0x1e8>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	f003 020f 	and.w	r2, r3, #15
 800b192:	6879      	ldr	r1, [r7, #4]
 800b194:	4613      	mov	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	440b      	add	r3, r1
 800b19e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b1a6:	4b4b      	ldr	r3, [pc, #300]	; (800b2d4 <USBD_CDC_Init+0x1ec>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	f003 020f 	and.w	r2, r3, #15
 800b1ae:	6879      	ldr	r1, [r7, #4]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	440b      	add	r3, r1
 800b1ba:	3326      	adds	r3, #38	; 0x26
 800b1bc:	2210      	movs	r2, #16
 800b1be:	801a      	strh	r2, [r3, #0]
 800b1c0:	e035      	b.n	800b22e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b1c2:	4b42      	ldr	r3, [pc, #264]	; (800b2cc <USBD_CDC_Init+0x1e4>)
 800b1c4:	7819      	ldrb	r1, [r3, #0]
 800b1c6:	2340      	movs	r3, #64	; 0x40
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f005 f930 	bl	8010430 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b1d0:	4b3e      	ldr	r3, [pc, #248]	; (800b2cc <USBD_CDC_Init+0x1e4>)
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	f003 020f 	and.w	r2, r3, #15
 800b1d8:	6879      	ldr	r1, [r7, #4]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	440b      	add	r3, r1
 800b1e4:	3324      	adds	r3, #36	; 0x24
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b1ea:	4b39      	ldr	r3, [pc, #228]	; (800b2d0 <USBD_CDC_Init+0x1e8>)
 800b1ec:	7819      	ldrb	r1, [r3, #0]
 800b1ee:	2340      	movs	r3, #64	; 0x40
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f005 f91c 	bl	8010430 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b1f8:	4b35      	ldr	r3, [pc, #212]	; (800b2d0 <USBD_CDC_Init+0x1e8>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	f003 020f 	and.w	r2, r3, #15
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b210:	2201      	movs	r2, #1
 800b212:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b214:	4b2f      	ldr	r3, [pc, #188]	; (800b2d4 <USBD_CDC_Init+0x1ec>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	f003 020f 	and.w	r2, r3, #15
 800b21c:	6879      	ldr	r1, [r7, #4]
 800b21e:	4613      	mov	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	440b      	add	r3, r1
 800b228:	3326      	adds	r3, #38	; 0x26
 800b22a:	2210      	movs	r2, #16
 800b22c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b22e:	4b29      	ldr	r3, [pc, #164]	; (800b2d4 <USBD_CDC_Init+0x1ec>)
 800b230:	7819      	ldrb	r1, [r3, #0]
 800b232:	2308      	movs	r3, #8
 800b234:	2203      	movs	r2, #3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f005 f8fa 	bl	8010430 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b23c:	4b25      	ldr	r3, [pc, #148]	; (800b2d4 <USBD_CDC_Init+0x1ec>)
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	f003 020f 	and.w	r2, r3, #15
 800b244:	6879      	ldr	r1, [r7, #4]
 800b246:	4613      	mov	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4413      	add	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	440b      	add	r3, r1
 800b250:	3324      	adds	r3, #36	; 0x24
 800b252:	2201      	movs	r2, #1
 800b254:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	33b0      	adds	r3, #176	; 0xb0
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	4413      	add	r3, r2
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d101      	bne.n	800b290 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b28c:	2302      	movs	r3, #2
 800b28e:	e018      	b.n	800b2c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	7c1b      	ldrb	r3, [r3, #16]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10a      	bne.n	800b2ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b298:	4b0d      	ldr	r3, [pc, #52]	; (800b2d0 <USBD_CDC_Init+0x1e8>)
 800b29a:	7819      	ldrb	r1, [r3, #0]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f005 fa3c 	bl	8010724 <USBD_LL_PrepareReceive>
 800b2ac:	e008      	b.n	800b2c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2ae:	4b08      	ldr	r3, [pc, #32]	; (800b2d0 <USBD_CDC_Init+0x1e8>)
 800b2b0:	7819      	ldrb	r1, [r3, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2b8:	2340      	movs	r3, #64	; 0x40
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f005 fa32 	bl	8010724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20000093 	.word	0x20000093
 800b2d0:	20000094 	.word	0x20000094
 800b2d4:	20000095 	.word	0x20000095

0800b2d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b2e4:	4b3a      	ldr	r3, [pc, #232]	; (800b3d0 <USBD_CDC_DeInit+0xf8>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f005 f8de 	bl	80104ac <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b2f0:	4b37      	ldr	r3, [pc, #220]	; (800b3d0 <USBD_CDC_DeInit+0xf8>)
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	f003 020f 	and.w	r2, r3, #15
 800b2f8:	6879      	ldr	r1, [r7, #4]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4413      	add	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	440b      	add	r3, r1
 800b304:	3324      	adds	r3, #36	; 0x24
 800b306:	2200      	movs	r2, #0
 800b308:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b30a:	4b32      	ldr	r3, [pc, #200]	; (800b3d4 <USBD_CDC_DeInit+0xfc>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f005 f8cb 	bl	80104ac <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b316:	4b2f      	ldr	r3, [pc, #188]	; (800b3d4 <USBD_CDC_DeInit+0xfc>)
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	f003 020f 	and.w	r2, r3, #15
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	440b      	add	r3, r1
 800b32a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b32e:	2200      	movs	r2, #0
 800b330:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b332:	4b29      	ldr	r3, [pc, #164]	; (800b3d8 <USBD_CDC_DeInit+0x100>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f005 f8b7 	bl	80104ac <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b33e:	4b26      	ldr	r3, [pc, #152]	; (800b3d8 <USBD_CDC_DeInit+0x100>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	f003 020f 	and.w	r2, r3, #15
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	4613      	mov	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	440b      	add	r3, r1
 800b352:	3324      	adds	r3, #36	; 0x24
 800b354:	2200      	movs	r2, #0
 800b356:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b358:	4b1f      	ldr	r3, [pc, #124]	; (800b3d8 <USBD_CDC_DeInit+0x100>)
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	f003 020f 	and.w	r2, r3, #15
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	440b      	add	r3, r1
 800b36c:	3326      	adds	r3, #38	; 0x26
 800b36e:	2200      	movs	r2, #0
 800b370:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	32b0      	adds	r2, #176	; 0xb0
 800b37c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d01f      	beq.n	800b3c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	33b0      	adds	r3, #176	; 0xb0
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	32b0      	adds	r2, #176	; 0xb0
 800b3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f005 fa64 	bl	8010874 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	32b0      	adds	r2, #176	; 0xb0
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20000093 	.word	0x20000093
 800b3d4:	20000094 	.word	0x20000094
 800b3d8:	20000095 	.word	0x20000095

0800b3dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	32b0      	adds	r2, #176	; 0xb0
 800b3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3fe:	2300      	movs	r3, #0
 800b400:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	e0bf      	b.n	800b58c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b414:	2b00      	cmp	r3, #0
 800b416:	d050      	beq.n	800b4ba <USBD_CDC_Setup+0xde>
 800b418:	2b20      	cmp	r3, #32
 800b41a:	f040 80af 	bne.w	800b57c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	88db      	ldrh	r3, [r3, #6]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d03a      	beq.n	800b49c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	b25b      	sxtb	r3, r3
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	da1b      	bge.n	800b468 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	33b0      	adds	r3, #176	; 0xb0
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b446:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	88d2      	ldrh	r2, [r2, #6]
 800b44c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	88db      	ldrh	r3, [r3, #6]
 800b452:	2b07      	cmp	r3, #7
 800b454:	bf28      	it	cs
 800b456:	2307      	movcs	r3, #7
 800b458:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	89fa      	ldrh	r2, [r7, #14]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f001 fd73 	bl	800cf4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b466:	e090      	b.n	800b58a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	785a      	ldrb	r2, [r3, #1]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	88db      	ldrh	r3, [r3, #6]
 800b476:	2b3f      	cmp	r3, #63	; 0x3f
 800b478:	d803      	bhi.n	800b482 <USBD_CDC_Setup+0xa6>
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	88db      	ldrh	r3, [r3, #6]
 800b47e:	b2da      	uxtb	r2, r3
 800b480:	e000      	b.n	800b484 <USBD_CDC_Setup+0xa8>
 800b482:	2240      	movs	r2, #64	; 0x40
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b48a:	6939      	ldr	r1, [r7, #16]
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b492:	461a      	mov	r2, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 fd85 	bl	800cfa4 <USBD_CtlPrepareRx>
      break;
 800b49a:	e076      	b.n	800b58a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	33b0      	adds	r3, #176	; 0xb0
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	4413      	add	r3, r2
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	7850      	ldrb	r0, [r2, #1]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	4798      	blx	r3
      break;
 800b4b8:	e067      	b.n	800b58a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	2b0b      	cmp	r3, #11
 800b4c0:	d851      	bhi.n	800b566 <USBD_CDC_Setup+0x18a>
 800b4c2:	a201      	add	r2, pc, #4	; (adr r2, 800b4c8 <USBD_CDC_Setup+0xec>)
 800b4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c8:	0800b4f9 	.word	0x0800b4f9
 800b4cc:	0800b575 	.word	0x0800b575
 800b4d0:	0800b567 	.word	0x0800b567
 800b4d4:	0800b567 	.word	0x0800b567
 800b4d8:	0800b567 	.word	0x0800b567
 800b4dc:	0800b567 	.word	0x0800b567
 800b4e0:	0800b567 	.word	0x0800b567
 800b4e4:	0800b567 	.word	0x0800b567
 800b4e8:	0800b567 	.word	0x0800b567
 800b4ec:	0800b567 	.word	0x0800b567
 800b4f0:	0800b523 	.word	0x0800b523
 800b4f4:	0800b54d 	.word	0x0800b54d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	2b03      	cmp	r3, #3
 800b502:	d107      	bne.n	800b514 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b504:	f107 030a 	add.w	r3, r7, #10
 800b508:	2202      	movs	r2, #2
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f001 fd1d 	bl	800cf4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b512:	e032      	b.n	800b57a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f001 fca7 	bl	800ce6a <USBD_CtlError>
            ret = USBD_FAIL;
 800b51c:	2303      	movs	r3, #3
 800b51e:	75fb      	strb	r3, [r7, #23]
          break;
 800b520:	e02b      	b.n	800b57a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d107      	bne.n	800b53e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b52e:	f107 030d 	add.w	r3, r7, #13
 800b532:	2201      	movs	r2, #1
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f001 fd08 	bl	800cf4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b53c:	e01d      	b.n	800b57a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f001 fc92 	bl	800ce6a <USBD_CtlError>
            ret = USBD_FAIL;
 800b546:	2303      	movs	r3, #3
 800b548:	75fb      	strb	r3, [r7, #23]
          break;
 800b54a:	e016      	b.n	800b57a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b03      	cmp	r3, #3
 800b556:	d00f      	beq.n	800b578 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f001 fc85 	bl	800ce6a <USBD_CtlError>
            ret = USBD_FAIL;
 800b560:	2303      	movs	r3, #3
 800b562:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b564:	e008      	b.n	800b578 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 fc7e 	bl	800ce6a <USBD_CtlError>
          ret = USBD_FAIL;
 800b56e:	2303      	movs	r3, #3
 800b570:	75fb      	strb	r3, [r7, #23]
          break;
 800b572:	e002      	b.n	800b57a <USBD_CDC_Setup+0x19e>
          break;
 800b574:	bf00      	nop
 800b576:	e008      	b.n	800b58a <USBD_CDC_Setup+0x1ae>
          break;
 800b578:	bf00      	nop
      }
      break;
 800b57a:	e006      	b.n	800b58a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 fc73 	bl	800ce6a <USBD_CtlError>
      ret = USBD_FAIL;
 800b584:	2303      	movs	r3, #3
 800b586:	75fb      	strb	r3, [r7, #23]
      break;
 800b588:	bf00      	nop
  }

  return (uint8_t)ret;
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	32b0      	adds	r2, #176	; 0xb0
 800b5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e065      	b.n	800b68a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	32b0      	adds	r2, #176	; 0xb0
 800b5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b5ce:	78fb      	ldrb	r3, [r7, #3]
 800b5d0:	f003 020f 	and.w	r2, r3, #15
 800b5d4:	6879      	ldr	r1, [r7, #4]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	440b      	add	r3, r1
 800b5e0:	3318      	adds	r3, #24
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d02f      	beq.n	800b648 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b5e8:	78fb      	ldrb	r3, [r7, #3]
 800b5ea:	f003 020f 	and.w	r2, r3, #15
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	440b      	add	r3, r1
 800b5fa:	3318      	adds	r3, #24
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	78fb      	ldrb	r3, [r7, #3]
 800b600:	f003 010f 	and.w	r1, r3, #15
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	460b      	mov	r3, r1
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	440b      	add	r3, r1
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4403      	add	r3, r0
 800b610:	3344      	adds	r3, #68	; 0x44
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	fbb2 f1f3 	udiv	r1, r2, r3
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d112      	bne.n	800b648 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b622:	78fb      	ldrb	r3, [r7, #3]
 800b624:	f003 020f 	and.w	r2, r3, #15
 800b628:	6879      	ldr	r1, [r7, #4]
 800b62a:	4613      	mov	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4413      	add	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	440b      	add	r3, r1
 800b634:	3318      	adds	r3, #24
 800b636:	2200      	movs	r2, #0
 800b638:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b63a:	78f9      	ldrb	r1, [r7, #3]
 800b63c:	2300      	movs	r3, #0
 800b63e:	2200      	movs	r2, #0
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f005 f837 	bl	80106b4 <USBD_LL_Transmit>
 800b646:	e01f      	b.n	800b688 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	33b0      	adds	r3, #176	; 0xb0
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4413      	add	r3, r2
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d010      	beq.n	800b688 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	33b0      	adds	r3, #176	; 0xb0
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b684:	78fa      	ldrb	r2, [r7, #3]
 800b686:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32b0      	adds	r2, #176	; 0xb0
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	32b0      	adds	r2, #176	; 0xb0
 800b6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b6c0:	2303      	movs	r3, #3
 800b6c2:	e01a      	b.n	800b6fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b6c4:	78fb      	ldrb	r3, [r7, #3]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f005 f863 	bl	8010794 <USBD_LL_GetRxDataSize>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	33b0      	adds	r3, #176	; 0xb0
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4413      	add	r3, r2
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b084      	sub	sp, #16
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	32b0      	adds	r2, #176	; 0xb0
 800b714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b718:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d101      	bne.n	800b724 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b720:	2303      	movs	r3, #3
 800b722:	e025      	b.n	800b770 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	33b0      	adds	r3, #176	; 0xb0
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d01a      	beq.n	800b76e <USBD_CDC_EP0_RxReady+0x6c>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b73e:	2bff      	cmp	r3, #255	; 0xff
 800b740:	d015      	beq.n	800b76e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	33b0      	adds	r3, #176	; 0xb0
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b75a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b762:	b292      	uxth	r2, r2
 800b764:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	22ff      	movs	r2, #255	; 0xff
 800b76a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b780:	2182      	movs	r1, #130	; 0x82
 800b782:	4818      	ldr	r0, [pc, #96]	; (800b7e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b784:	f000 fd0f 	bl	800c1a6 <USBD_GetEpDesc>
 800b788:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b78a:	2101      	movs	r1, #1
 800b78c:	4815      	ldr	r0, [pc, #84]	; (800b7e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b78e:	f000 fd0a 	bl	800c1a6 <USBD_GetEpDesc>
 800b792:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b794:	2181      	movs	r1, #129	; 0x81
 800b796:	4813      	ldr	r0, [pc, #76]	; (800b7e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b798:	f000 fd05 	bl	800c1a6 <USBD_GetEpDesc>
 800b79c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2210      	movs	r2, #16
 800b7a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d006      	beq.n	800b7be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7b8:	711a      	strb	r2, [r3, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d006      	beq.n	800b7d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7cc:	711a      	strb	r2, [r3, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2243      	movs	r2, #67	; 0x43
 800b7d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7d8:	4b02      	ldr	r3, [pc, #8]	; (800b7e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20000050 	.word	0x20000050

0800b7e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b7f0:	2182      	movs	r1, #130	; 0x82
 800b7f2:	4818      	ldr	r0, [pc, #96]	; (800b854 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7f4:	f000 fcd7 	bl	800c1a6 <USBD_GetEpDesc>
 800b7f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	4815      	ldr	r0, [pc, #84]	; (800b854 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b7fe:	f000 fcd2 	bl	800c1a6 <USBD_GetEpDesc>
 800b802:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b804:	2181      	movs	r1, #129	; 0x81
 800b806:	4813      	ldr	r0, [pc, #76]	; (800b854 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b808:	f000 fccd 	bl	800c1a6 <USBD_GetEpDesc>
 800b80c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2210      	movs	r2, #16
 800b818:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d006      	beq.n	800b82e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	2200      	movs	r2, #0
 800b824:	711a      	strb	r2, [r3, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f042 0202 	orr.w	r2, r2, #2
 800b82c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d006      	beq.n	800b842 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	711a      	strb	r2, [r3, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f042 0202 	orr.w	r2, r2, #2
 800b840:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2243      	movs	r2, #67	; 0x43
 800b846:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b848:	4b02      	ldr	r3, [pc, #8]	; (800b854 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20000050 	.word	0x20000050

0800b858 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b860:	2182      	movs	r1, #130	; 0x82
 800b862:	4818      	ldr	r0, [pc, #96]	; (800b8c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b864:	f000 fc9f 	bl	800c1a6 <USBD_GetEpDesc>
 800b868:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b86a:	2101      	movs	r1, #1
 800b86c:	4815      	ldr	r0, [pc, #84]	; (800b8c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b86e:	f000 fc9a 	bl	800c1a6 <USBD_GetEpDesc>
 800b872:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b874:	2181      	movs	r1, #129	; 0x81
 800b876:	4813      	ldr	r0, [pc, #76]	; (800b8c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b878:	f000 fc95 	bl	800c1a6 <USBD_GetEpDesc>
 800b87c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2210      	movs	r2, #16
 800b888:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d006      	beq.n	800b89e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	2200      	movs	r2, #0
 800b894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b898:	711a      	strb	r2, [r3, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d006      	beq.n	800b8b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8ac:	711a      	strb	r2, [r3, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2243      	movs	r2, #67	; 0x43
 800b8b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8b8:	4b02      	ldr	r3, [pc, #8]	; (800b8c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3718      	adds	r7, #24
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20000050 	.word	0x20000050

0800b8c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	220a      	movs	r2, #10
 800b8d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b8d6:	4b03      	ldr	r3, [pc, #12]	; (800b8e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	2000000c 	.word	0x2000000c

0800b8e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	e009      	b.n	800b910 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	33b0      	adds	r3, #176	; 0xb0
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	683a      	ldr	r2, [r7, #0]
 800b90c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b087      	sub	sp, #28
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	32b0      	adds	r2, #176	; 0xb0
 800b932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b936:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b93e:	2303      	movs	r3, #3
 800b940:	e008      	b.n	800b954 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	371c      	adds	r7, #28
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	32b0      	adds	r2, #176	; 0xb0
 800b974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b978:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b980:	2303      	movs	r3, #3
 800b982:	e004      	b.n	800b98e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3714      	adds	r7, #20
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr
	...

0800b99c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	32b0      	adds	r2, #176	; 0xb0
 800b9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	32b0      	adds	r2, #176	; 0xb0
 800b9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d101      	bne.n	800b9ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	e018      	b.n	800b9fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	7c1b      	ldrb	r3, [r3, #16]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10a      	bne.n	800b9e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <USBD_CDC_ReceivePacket+0x68>)
 800b9d4:	7819      	ldrb	r1, [r3, #0]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f004 fe9f 	bl	8010724 <USBD_LL_PrepareReceive>
 800b9e6:	e008      	b.n	800b9fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9e8:	4b06      	ldr	r3, [pc, #24]	; (800ba04 <USBD_CDC_ReceivePacket+0x68>)
 800b9ea:	7819      	ldrb	r1, [r3, #0]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9f2:	2340      	movs	r3, #64	; 0x40
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f004 fe95 	bl	8010724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	20000094 	.word	0x20000094

0800ba08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	4613      	mov	r3, r2
 800ba14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	e01f      	b.n	800ba60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d003      	beq.n	800ba46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	79fa      	ldrb	r2, [r7, #7]
 800ba52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f004 fc6d 	bl	8010334 <USBD_LL_Init>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba72:	2300      	movs	r3, #0
 800ba74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e025      	b.n	800bacc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	32ae      	adds	r2, #174	; 0xae
 800ba92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00f      	beq.n	800babc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	32ae      	adds	r2, #174	; 0xae
 800baa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baac:	f107 020e 	add.w	r2, r7, #14
 800bab0:	4610      	mov	r0, r2
 800bab2:	4798      	blx	r3
 800bab4:	4602      	mov	r2, r0
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f004 fc75 	bl	80103cc <USBD_LL_Start>
 800bae2:	4603      	mov	r3, r0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800baf4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d009      	beq.n	800bb30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	78fa      	ldrb	r2, [r7, #3]
 800bb26:	4611      	mov	r1, r2
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	4798      	blx	r3
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	460b      	mov	r3, r1
 800bb44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	78fa      	ldrb	r2, [r7, #3]
 800bb54:	4611      	mov	r1, r2
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	4798      	blx	r3
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb60:	2303      	movs	r3, #3
 800bb62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b084      	sub	sp, #16
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
 800bb76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb7e:	6839      	ldr	r1, [r7, #0]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f001 f938 	bl	800cdf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb94:	461a      	mov	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bba2:	f003 031f 	and.w	r3, r3, #31
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	d01a      	beq.n	800bbe0 <USBD_LL_SetupStage+0x72>
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d822      	bhi.n	800bbf4 <USBD_LL_SetupStage+0x86>
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d002      	beq.n	800bbb8 <USBD_LL_SetupStage+0x4a>
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d00a      	beq.n	800bbcc <USBD_LL_SetupStage+0x5e>
 800bbb6:	e01d      	b.n	800bbf4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fb65 	bl	800c290 <USBD_StdDevReq>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	73fb      	strb	r3, [r7, #15]
      break;
 800bbca:	e020      	b.n	800bc0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 fbcd 	bl	800c374 <USBD_StdItfReq>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbde:	e016      	b.n	800bc0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fc2f 	bl	800c44c <USBD_StdEPReq>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbf2:	e00c      	b.n	800bc0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	4619      	mov	r1, r3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f004 fc88 	bl	8010518 <USBD_LL_StallEP>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc0c:	bf00      	nop
  }

  return ret;
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	460b      	mov	r3, r1
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bc2a:	7afb      	ldrb	r3, [r7, #11]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d16e      	bne.n	800bd0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bc36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc3e:	2b03      	cmp	r3, #3
 800bc40:	f040 8098 	bne.w	800bd74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	689a      	ldr	r2, [r3, #8]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d913      	bls.n	800bc78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	689a      	ldr	r2, [r3, #8]
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	1ad2      	subs	r2, r2, r3
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	68da      	ldr	r2, [r3, #12]
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	4293      	cmp	r3, r2
 800bc68:	bf28      	it	cs
 800bc6a:	4613      	movcs	r3, r2
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f001 f9b4 	bl	800cfde <USBD_CtlContinueRx>
 800bc76:	e07d      	b.n	800bd74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc7e:	f003 031f 	and.w	r3, r3, #31
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d014      	beq.n	800bcb0 <USBD_LL_DataOutStage+0x98>
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	d81d      	bhi.n	800bcc6 <USBD_LL_DataOutStage+0xae>
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <USBD_LL_DataOutStage+0x7c>
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d003      	beq.n	800bc9a <USBD_LL_DataOutStage+0x82>
 800bc92:	e018      	b.n	800bcc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	75bb      	strb	r3, [r7, #22]
            break;
 800bc98:	e018      	b.n	800bccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	4619      	mov	r1, r3
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 fa64 	bl	800c172 <USBD_CoreFindIF>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	75bb      	strb	r3, [r7, #22]
            break;
 800bcae:	e00d      	b.n	800bccc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	4619      	mov	r1, r3
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 fa66 	bl	800c18c <USBD_CoreFindEP>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	75bb      	strb	r3, [r7, #22]
            break;
 800bcc4:	e002      	b.n	800bccc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	75bb      	strb	r3, [r7, #22]
            break;
 800bcca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bccc:	7dbb      	ldrb	r3, [r7, #22]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d119      	bne.n	800bd06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b03      	cmp	r3, #3
 800bcdc:	d113      	bne.n	800bd06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bcde:	7dba      	ldrb	r2, [r7, #22]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	32ae      	adds	r2, #174	; 0xae
 800bce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00b      	beq.n	800bd06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bcee:	7dba      	ldrb	r2, [r7, #22]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bcf6:	7dba      	ldrb	r2, [r7, #22]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	32ae      	adds	r2, #174	; 0xae
 800bcfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd00:	691b      	ldr	r3, [r3, #16]
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f001 f97a 	bl	800d000 <USBD_CtlSendStatus>
 800bd0c:	e032      	b.n	800bd74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	4619      	mov	r1, r3
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f000 fa37 	bl	800c18c <USBD_CoreFindEP>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd22:	7dbb      	ldrb	r3, [r7, #22]
 800bd24:	2bff      	cmp	r3, #255	; 0xff
 800bd26:	d025      	beq.n	800bd74 <USBD_LL_DataOutStage+0x15c>
 800bd28:	7dbb      	ldrb	r3, [r7, #22]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d122      	bne.n	800bd74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d117      	bne.n	800bd6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bd3a:	7dba      	ldrb	r2, [r7, #22]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	32ae      	adds	r2, #174	; 0xae
 800bd40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00f      	beq.n	800bd6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bd4a:	7dba      	ldrb	r2, [r7, #22]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd52:	7dba      	ldrb	r2, [r7, #22]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	32ae      	adds	r2, #174	; 0xae
 800bd58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd5c:	699b      	ldr	r3, [r3, #24]
 800bd5e:	7afa      	ldrb	r2, [r7, #11]
 800bd60:	4611      	mov	r1, r2
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	4798      	blx	r3
 800bd66:	4603      	mov	r3, r0
 800bd68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd6a:	7dfb      	ldrb	r3, [r7, #23]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd70:	7dfb      	ldrb	r3, [r7, #23]
 800bd72:	e000      	b.n	800bd76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3718      	adds	r7, #24
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b086      	sub	sp, #24
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	60f8      	str	r0, [r7, #12]
 800bd86:	460b      	mov	r3, r1
 800bd88:	607a      	str	r2, [r7, #4]
 800bd8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd8c:	7afb      	ldrb	r3, [r7, #11]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d16f      	bne.n	800be72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3314      	adds	r3, #20
 800bd96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d15a      	bne.n	800be58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	689a      	ldr	r2, [r3, #8]
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d914      	bls.n	800bdd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	689a      	ldr	r2, [r3, #8]
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	1ad2      	subs	r2, r2, r3
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f001 f8dc 	bl	800cf82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdca:	2300      	movs	r3, #0
 800bdcc:	2200      	movs	r2, #0
 800bdce:	2100      	movs	r1, #0
 800bdd0:	68f8      	ldr	r0, [r7, #12]
 800bdd2:	f004 fca7 	bl	8010724 <USBD_LL_PrepareReceive>
 800bdd6:	e03f      	b.n	800be58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	68da      	ldr	r2, [r3, #12]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d11c      	bne.n	800be1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d316      	bcc.n	800be1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d20f      	bcs.n	800be1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdfe:	2200      	movs	r2, #0
 800be00:	2100      	movs	r1, #0
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f001 f8bd 	bl	800cf82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be10:	2300      	movs	r3, #0
 800be12:	2200      	movs	r2, #0
 800be14:	2100      	movs	r1, #0
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f004 fc84 	bl	8010724 <USBD_LL_PrepareReceive>
 800be1c:	e01c      	b.n	800be58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b03      	cmp	r3, #3
 800be28:	d10f      	bne.n	800be4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d009      	beq.n	800be4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be4a:	2180      	movs	r1, #128	; 0x80
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f004 fb63 	bl	8010518 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f001 f8e7 	bl	800d026 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d03a      	beq.n	800bed8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f7ff fe42 	bl	800baec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be70:	e032      	b.n	800bed8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be72:	7afb      	ldrb	r3, [r7, #11]
 800be74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	4619      	mov	r1, r3
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 f985 	bl	800c18c <USBD_CoreFindEP>
 800be82:	4603      	mov	r3, r0
 800be84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be86:	7dfb      	ldrb	r3, [r7, #23]
 800be88:	2bff      	cmp	r3, #255	; 0xff
 800be8a:	d025      	beq.n	800bed8 <USBD_LL_DataInStage+0x15a>
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d122      	bne.n	800bed8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b03      	cmp	r3, #3
 800be9c:	d11c      	bne.n	800bed8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be9e:	7dfa      	ldrb	r2, [r7, #23]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	32ae      	adds	r2, #174	; 0xae
 800bea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d014      	beq.n	800bed8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800beae:	7dfa      	ldrb	r2, [r7, #23]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800beb6:	7dfa      	ldrb	r2, [r7, #23]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	32ae      	adds	r2, #174	; 0xae
 800bebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	7afa      	ldrb	r2, [r7, #11]
 800bec4:	4611      	mov	r1, r2
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	4798      	blx	r3
 800beca:	4603      	mov	r3, r0
 800becc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bece:	7dbb      	ldrb	r3, [r7, #22]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bed4:	7dbb      	ldrb	r3, [r7, #22]
 800bed6:	e000      	b.n	800beda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800beea:	2300      	movs	r3, #0
 800beec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d014      	beq.n	800bf48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00e      	beq.n	800bf48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	6852      	ldr	r2, [r2, #4]
 800bf36:	b2d2      	uxtb	r2, r2
 800bf38:	4611      	mov	r1, r2
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	4798      	blx	r3
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d001      	beq.n	800bf48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bf44:	2303      	movs	r3, #3
 800bf46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf48:	2340      	movs	r3, #64	; 0x40
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f004 fa6e 	bl	8010430 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2201      	movs	r2, #1
 800bf58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2240      	movs	r2, #64	; 0x40
 800bf60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf64:	2340      	movs	r3, #64	; 0x40
 800bf66:	2200      	movs	r2, #0
 800bf68:	2180      	movs	r1, #128	; 0x80
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f004 fa60 	bl	8010430 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2201      	movs	r2, #1
 800bf74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2240      	movs	r2, #64	; 0x40
 800bf7a:	621a      	str	r2, [r3, #32]

  return ret;
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf86:	b480      	push	{r7}
 800bf88:	b083      	sub	sp, #12
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	78fa      	ldrb	r2, [r7, #3]
 800bf96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	b083      	sub	sp, #12
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	d006      	beq.n	800bfc8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2204      	movs	r2, #4
 800bfcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b04      	cmp	r3, #4
 800bff0:	d106      	bne.n	800c000 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c000:	2300      	movs	r3, #0
}
 800c002:	4618      	mov	r0, r3
 800c004:	370c      	adds	r7, #12
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr

0800c00e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b082      	sub	sp, #8
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d110      	bne.n	800c044 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00b      	beq.n	800c044 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c032:	69db      	ldr	r3, [r3, #28]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d005      	beq.n	800c044 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c03e:	69db      	ldr	r3, [r3, #28]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	32ae      	adds	r2, #174	; 0xae
 800c064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d101      	bne.n	800c070 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c06c:	2303      	movs	r3, #3
 800c06e:	e01c      	b.n	800c0aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c076:	b2db      	uxtb	r3, r3
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d115      	bne.n	800c0a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	32ae      	adds	r2, #174	; 0xae
 800c086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00b      	beq.n	800c0a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	32ae      	adds	r2, #174	; 0xae
 800c09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c09e:	6a1b      	ldr	r3, [r3, #32]
 800c0a0:	78fa      	ldrb	r2, [r7, #3]
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	32ae      	adds	r2, #174	; 0xae
 800c0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e01c      	b.n	800c10e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d115      	bne.n	800c10c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32ae      	adds	r2, #174	; 0xae
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00b      	beq.n	800c10c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	32ae      	adds	r2, #174	; 0xae
 800c0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	78fa      	ldrb	r2, [r7, #3]
 800c106:	4611      	mov	r1, r2
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00e      	beq.n	800c168 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	6852      	ldr	r2, [r2, #4]
 800c156:	b2d2      	uxtb	r2, r2
 800c158:	4611      	mov	r1, r2
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	4798      	blx	r3
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c164:	2303      	movs	r3, #3
 800c166:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c168:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c172:	b480      	push	{r7}
 800c174:	b083      	sub	sp, #12
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	460b      	mov	r3, r1
 800c17c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c17e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c198:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	370c      	adds	r7, #12
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr

0800c1a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b086      	sub	sp, #24
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	885b      	ldrh	r3, [r3, #2]
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d920      	bls.n	800c210 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c1d6:	e013      	b.n	800c200 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c1d8:	f107 030a 	add.w	r3, r7, #10
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6978      	ldr	r0, [r7, #20]
 800c1e0:	f000 f81b 	bl	800c21a <USBD_GetNextDesc>
 800c1e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	785b      	ldrb	r3, [r3, #1]
 800c1ea:	2b05      	cmp	r3, #5
 800c1ec:	d108      	bne.n	800c200 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	789b      	ldrb	r3, [r3, #2]
 800c1f6:	78fa      	ldrb	r2, [r7, #3]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d008      	beq.n	800c20e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	885b      	ldrh	r3, [r3, #2]
 800c204:	b29a      	uxth	r2, r3
 800c206:	897b      	ldrh	r3, [r7, #10]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d8e5      	bhi.n	800c1d8 <USBD_GetEpDesc+0x32>
 800c20c:	e000      	b.n	800c210 <USBD_GetEpDesc+0x6a>
          break;
 800c20e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c210:	693b      	ldr	r3, [r7, #16]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}

0800c21a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b085      	sub	sp, #20
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
 800c222:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	881a      	ldrh	r2, [r3, #0]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	b29b      	uxth	r3, r3
 800c232:	4413      	add	r3, r2
 800c234:	b29a      	uxth	r2, r3
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4413      	add	r3, r2
 800c244:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c246:	68fb      	ldr	r3, [r7, #12]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3714      	adds	r7, #20
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c254:	b480      	push	{r7}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	3301      	adds	r3, #1
 800c26a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c272:	8a3b      	ldrh	r3, [r7, #16]
 800c274:	021b      	lsls	r3, r3, #8
 800c276:	b21a      	sxth	r2, r3
 800c278:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c27c:	4313      	orrs	r3, r2
 800c27e:	b21b      	sxth	r3, r3
 800c280:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c282:	89fb      	ldrh	r3, [r7, #14]
}
 800c284:	4618      	mov	r0, r3
 800c286:	371c      	adds	r7, #28
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2a6:	2b40      	cmp	r3, #64	; 0x40
 800c2a8:	d005      	beq.n	800c2b6 <USBD_StdDevReq+0x26>
 800c2aa:	2b40      	cmp	r3, #64	; 0x40
 800c2ac:	d857      	bhi.n	800c35e <USBD_StdDevReq+0xce>
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00f      	beq.n	800c2d2 <USBD_StdDevReq+0x42>
 800c2b2:	2b20      	cmp	r3, #32
 800c2b4:	d153      	bne.n	800c35e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	32ae      	adds	r2, #174	; 0xae
 800c2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	4798      	blx	r3
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c2d0:	e04a      	b.n	800c368 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	785b      	ldrb	r3, [r3, #1]
 800c2d6:	2b09      	cmp	r3, #9
 800c2d8:	d83b      	bhi.n	800c352 <USBD_StdDevReq+0xc2>
 800c2da:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <USBD_StdDevReq+0x50>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c335 	.word	0x0800c335
 800c2e4:	0800c349 	.word	0x0800c349
 800c2e8:	0800c353 	.word	0x0800c353
 800c2ec:	0800c33f 	.word	0x0800c33f
 800c2f0:	0800c353 	.word	0x0800c353
 800c2f4:	0800c313 	.word	0x0800c313
 800c2f8:	0800c309 	.word	0x0800c309
 800c2fc:	0800c353 	.word	0x0800c353
 800c300:	0800c32b 	.word	0x0800c32b
 800c304:	0800c31d 	.word	0x0800c31d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fa3c 	bl	800c788 <USBD_GetDescriptor>
          break;
 800c310:	e024      	b.n	800c35c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fbcb 	bl	800cab0 <USBD_SetAddress>
          break;
 800c31a:	e01f      	b.n	800c35c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fc0a 	bl	800cb38 <USBD_SetConfig>
 800c324:	4603      	mov	r3, r0
 800c326:	73fb      	strb	r3, [r7, #15]
          break;
 800c328:	e018      	b.n	800c35c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 fcad 	bl	800cc8c <USBD_GetConfig>
          break;
 800c332:	e013      	b.n	800c35c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fcde 	bl	800ccf8 <USBD_GetStatus>
          break;
 800c33c:	e00e      	b.n	800c35c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fd0d 	bl	800cd60 <USBD_SetFeature>
          break;
 800c346:	e009      	b.n	800c35c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fd31 	bl	800cdb2 <USBD_ClrFeature>
          break;
 800c350:	e004      	b.n	800c35c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fd88 	bl	800ce6a <USBD_CtlError>
          break;
 800c35a:	bf00      	nop
      }
      break;
 800c35c:	e004      	b.n	800c368 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fd82 	bl	800ce6a <USBD_CtlError>
      break;
 800c366:	bf00      	nop
  }

  return ret;
 800c368:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop

0800c374 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c37e:	2300      	movs	r3, #0
 800c380:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c38a:	2b40      	cmp	r3, #64	; 0x40
 800c38c:	d005      	beq.n	800c39a <USBD_StdItfReq+0x26>
 800c38e:	2b40      	cmp	r3, #64	; 0x40
 800c390:	d852      	bhi.n	800c438 <USBD_StdItfReq+0xc4>
 800c392:	2b00      	cmp	r3, #0
 800c394:	d001      	beq.n	800c39a <USBD_StdItfReq+0x26>
 800c396:	2b20      	cmp	r3, #32
 800c398:	d14e      	bne.n	800c438 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d840      	bhi.n	800c42a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	889b      	ldrh	r3, [r3, #4]
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d836      	bhi.n	800c420 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	889b      	ldrh	r3, [r3, #4]
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7ff fed9 	bl	800c172 <USBD_CoreFindIF>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
 800c3c6:	2bff      	cmp	r3, #255	; 0xff
 800c3c8:	d01d      	beq.n	800c406 <USBD_StdItfReq+0x92>
 800c3ca:	7bbb      	ldrb	r3, [r7, #14]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d11a      	bne.n	800c406 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c3d0:	7bba      	ldrb	r2, [r7, #14]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	32ae      	adds	r2, #174	; 0xae
 800c3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00f      	beq.n	800c400 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c3e0:	7bba      	ldrb	r2, [r7, #14]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3e8:	7bba      	ldrb	r2, [r7, #14]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	32ae      	adds	r2, #174	; 0xae
 800c3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	4798      	blx	r3
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3fe:	e004      	b.n	800c40a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c400:	2303      	movs	r3, #3
 800c402:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c404:	e001      	b.n	800c40a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c406:	2303      	movs	r3, #3
 800c408:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	88db      	ldrh	r3, [r3, #6]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d110      	bne.n	800c434 <USBD_StdItfReq+0xc0>
 800c412:	7bfb      	ldrb	r3, [r7, #15]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10d      	bne.n	800c434 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fdf1 	bl	800d000 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c41e:	e009      	b.n	800c434 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fd21 	bl	800ce6a <USBD_CtlError>
          break;
 800c428:	e004      	b.n	800c434 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c42a:	6839      	ldr	r1, [r7, #0]
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 fd1c 	bl	800ce6a <USBD_CtlError>
          break;
 800c432:	e000      	b.n	800c436 <USBD_StdItfReq+0xc2>
          break;
 800c434:	bf00      	nop
      }
      break;
 800c436:	e004      	b.n	800c442 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 fd15 	bl	800ce6a <USBD_CtlError>
      break;
 800c440:	bf00      	nop
  }

  return ret;
 800c442:	7bfb      	ldrb	r3, [r7, #15]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	889b      	ldrh	r3, [r3, #4]
 800c45e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c468:	2b40      	cmp	r3, #64	; 0x40
 800c46a:	d007      	beq.n	800c47c <USBD_StdEPReq+0x30>
 800c46c:	2b40      	cmp	r3, #64	; 0x40
 800c46e:	f200 817f 	bhi.w	800c770 <USBD_StdEPReq+0x324>
 800c472:	2b00      	cmp	r3, #0
 800c474:	d02a      	beq.n	800c4cc <USBD_StdEPReq+0x80>
 800c476:	2b20      	cmp	r3, #32
 800c478:	f040 817a 	bne.w	800c770 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c47c:	7bbb      	ldrb	r3, [r7, #14]
 800c47e:	4619      	mov	r1, r3
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff fe83 	bl	800c18c <USBD_CoreFindEP>
 800c486:	4603      	mov	r3, r0
 800c488:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c48a:	7b7b      	ldrb	r3, [r7, #13]
 800c48c:	2bff      	cmp	r3, #255	; 0xff
 800c48e:	f000 8174 	beq.w	800c77a <USBD_StdEPReq+0x32e>
 800c492:	7b7b      	ldrb	r3, [r7, #13]
 800c494:	2b00      	cmp	r3, #0
 800c496:	f040 8170 	bne.w	800c77a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c49a:	7b7a      	ldrb	r2, [r7, #13]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c4a2:	7b7a      	ldrb	r2, [r7, #13]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	32ae      	adds	r2, #174	; 0xae
 800c4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	f000 8163 	beq.w	800c77a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c4b4:	7b7a      	ldrb	r2, [r7, #13]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	32ae      	adds	r2, #174	; 0xae
 800c4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	4798      	blx	r3
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c4ca:	e156      	b.n	800c77a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	785b      	ldrb	r3, [r3, #1]
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	d008      	beq.n	800c4e6 <USBD_StdEPReq+0x9a>
 800c4d4:	2b03      	cmp	r3, #3
 800c4d6:	f300 8145 	bgt.w	800c764 <USBD_StdEPReq+0x318>
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f000 809b 	beq.w	800c616 <USBD_StdEPReq+0x1ca>
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d03c      	beq.n	800c55e <USBD_StdEPReq+0x112>
 800c4e4:	e13e      	b.n	800c764 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	d002      	beq.n	800c4f8 <USBD_StdEPReq+0xac>
 800c4f2:	2b03      	cmp	r3, #3
 800c4f4:	d016      	beq.n	800c524 <USBD_StdEPReq+0xd8>
 800c4f6:	e02c      	b.n	800c552 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4f8:	7bbb      	ldrb	r3, [r7, #14]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00d      	beq.n	800c51a <USBD_StdEPReq+0xce>
 800c4fe:	7bbb      	ldrb	r3, [r7, #14]
 800c500:	2b80      	cmp	r3, #128	; 0x80
 800c502:	d00a      	beq.n	800c51a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c504:	7bbb      	ldrb	r3, [r7, #14]
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f004 f805 	bl	8010518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c50e:	2180      	movs	r1, #128	; 0x80
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f004 f801 	bl	8010518 <USBD_LL_StallEP>
 800c516:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c518:	e020      	b.n	800c55c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fca4 	bl	800ce6a <USBD_CtlError>
              break;
 800c522:	e01b      	b.n	800c55c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	885b      	ldrh	r3, [r3, #2]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10e      	bne.n	800c54a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00b      	beq.n	800c54a <USBD_StdEPReq+0xfe>
 800c532:	7bbb      	ldrb	r3, [r7, #14]
 800c534:	2b80      	cmp	r3, #128	; 0x80
 800c536:	d008      	beq.n	800c54a <USBD_StdEPReq+0xfe>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	88db      	ldrh	r3, [r3, #6]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d104      	bne.n	800c54a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c540:	7bbb      	ldrb	r3, [r7, #14]
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f003 ffe7 	bl	8010518 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fd58 	bl	800d000 <USBD_CtlSendStatus>

              break;
 800c550:	e004      	b.n	800c55c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c552:	6839      	ldr	r1, [r7, #0]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fc88 	bl	800ce6a <USBD_CtlError>
              break;
 800c55a:	bf00      	nop
          }
          break;
 800c55c:	e107      	b.n	800c76e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b02      	cmp	r3, #2
 800c568:	d002      	beq.n	800c570 <USBD_StdEPReq+0x124>
 800c56a:	2b03      	cmp	r3, #3
 800c56c:	d016      	beq.n	800c59c <USBD_StdEPReq+0x150>
 800c56e:	e04b      	b.n	800c608 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c570:	7bbb      	ldrb	r3, [r7, #14]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00d      	beq.n	800c592 <USBD_StdEPReq+0x146>
 800c576:	7bbb      	ldrb	r3, [r7, #14]
 800c578:	2b80      	cmp	r3, #128	; 0x80
 800c57a:	d00a      	beq.n	800c592 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f003 ffc9 	bl	8010518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c586:	2180      	movs	r1, #128	; 0x80
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f003 ffc5 	bl	8010518 <USBD_LL_StallEP>
 800c58e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c590:	e040      	b.n	800c614 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fc68 	bl	800ce6a <USBD_CtlError>
              break;
 800c59a:	e03b      	b.n	800c614 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	885b      	ldrh	r3, [r3, #2]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d136      	bne.n	800c612 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c5a4:	7bbb      	ldrb	r3, [r7, #14]
 800c5a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d004      	beq.n	800c5b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c5ae:	7bbb      	ldrb	r3, [r7, #14]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f003 ffe6 	bl	8010584 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fd21 	bl	800d000 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c5be:	7bbb      	ldrb	r3, [r7, #14]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7ff fde2 	bl	800c18c <USBD_CoreFindEP>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5cc:	7b7b      	ldrb	r3, [r7, #13]
 800c5ce:	2bff      	cmp	r3, #255	; 0xff
 800c5d0:	d01f      	beq.n	800c612 <USBD_StdEPReq+0x1c6>
 800c5d2:	7b7b      	ldrb	r3, [r7, #13]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d11c      	bne.n	800c612 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c5d8:	7b7a      	ldrb	r2, [r7, #13]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c5e0:	7b7a      	ldrb	r2, [r7, #13]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	32ae      	adds	r2, #174	; 0xae
 800c5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d010      	beq.n	800c612 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5f0:	7b7a      	ldrb	r2, [r7, #13]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	32ae      	adds	r2, #174	; 0xae
 800c5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	4798      	blx	r3
 800c602:	4603      	mov	r3, r0
 800c604:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c606:	e004      	b.n	800c612 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c608:	6839      	ldr	r1, [r7, #0]
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fc2d 	bl	800ce6a <USBD_CtlError>
              break;
 800c610:	e000      	b.n	800c614 <USBD_StdEPReq+0x1c8>
              break;
 800c612:	bf00      	nop
          }
          break;
 800c614:	e0ab      	b.n	800c76e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	2b02      	cmp	r3, #2
 800c620:	d002      	beq.n	800c628 <USBD_StdEPReq+0x1dc>
 800c622:	2b03      	cmp	r3, #3
 800c624:	d032      	beq.n	800c68c <USBD_StdEPReq+0x240>
 800c626:	e097      	b.n	800c758 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c628:	7bbb      	ldrb	r3, [r7, #14]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d007      	beq.n	800c63e <USBD_StdEPReq+0x1f2>
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	2b80      	cmp	r3, #128	; 0x80
 800c632:	d004      	beq.n	800c63e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c634:	6839      	ldr	r1, [r7, #0]
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fc17 	bl	800ce6a <USBD_CtlError>
                break;
 800c63c:	e091      	b.n	800c762 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c63e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c642:	2b00      	cmp	r3, #0
 800c644:	da0b      	bge.n	800c65e <USBD_StdEPReq+0x212>
 800c646:	7bbb      	ldrb	r3, [r7, #14]
 800c648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	3310      	adds	r3, #16
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	4413      	add	r3, r2
 800c65a:	3304      	adds	r3, #4
 800c65c:	e00b      	b.n	800c676 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c65e:	7bbb      	ldrb	r3, [r7, #14]
 800c660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c664:	4613      	mov	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	4413      	add	r3, r2
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	4413      	add	r3, r2
 800c674:	3304      	adds	r3, #4
 800c676:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2200      	movs	r2, #0
 800c67c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	2202      	movs	r2, #2
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fc61 	bl	800cf4c <USBD_CtlSendData>
              break;
 800c68a:	e06a      	b.n	800c762 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c68c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c690:	2b00      	cmp	r3, #0
 800c692:	da11      	bge.n	800c6b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c694:	7bbb      	ldrb	r3, [r7, #14]
 800c696:	f003 020f 	and.w	r2, r3, #15
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	4613      	mov	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	440b      	add	r3, r1
 800c6a6:	3324      	adds	r3, #36	; 0x24
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d117      	bne.n	800c6de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fbda 	bl	800ce6a <USBD_CtlError>
                  break;
 800c6b6:	e054      	b.n	800c762 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ba:	f003 020f 	and.w	r2, r3, #15
 800c6be:	6879      	ldr	r1, [r7, #4]
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	440b      	add	r3, r1
 800c6ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c6ce:	881b      	ldrh	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d104      	bne.n	800c6de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fbc7 	bl	800ce6a <USBD_CtlError>
                  break;
 800c6dc:	e041      	b.n	800c762 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	da0b      	bge.n	800c6fe <USBD_StdEPReq+0x2b2>
 800c6e6:	7bbb      	ldrb	r3, [r7, #14]
 800c6e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	3310      	adds	r3, #16
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	3304      	adds	r3, #4
 800c6fc:	e00b      	b.n	800c716 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6fe:	7bbb      	ldrb	r3, [r7, #14]
 800c700:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c704:	4613      	mov	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	4413      	add	r3, r2
 800c714:	3304      	adds	r3, #4
 800c716:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c718:	7bbb      	ldrb	r3, [r7, #14]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d002      	beq.n	800c724 <USBD_StdEPReq+0x2d8>
 800c71e:	7bbb      	ldrb	r3, [r7, #14]
 800c720:	2b80      	cmp	r3, #128	; 0x80
 800c722:	d103      	bne.n	800c72c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2200      	movs	r2, #0
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	e00e      	b.n	800c74a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c72c:	7bbb      	ldrb	r3, [r7, #14]
 800c72e:	4619      	mov	r1, r3
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f003 ff5d 	bl	80105f0 <USBD_LL_IsStallEP>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d003      	beq.n	800c744 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2201      	movs	r2, #1
 800c740:	601a      	str	r2, [r3, #0]
 800c742:	e002      	b.n	800c74a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2200      	movs	r2, #0
 800c748:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	2202      	movs	r2, #2
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fbfb 	bl	800cf4c <USBD_CtlSendData>
              break;
 800c756:	e004      	b.n	800c762 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fb85 	bl	800ce6a <USBD_CtlError>
              break;
 800c760:	bf00      	nop
          }
          break;
 800c762:	e004      	b.n	800c76e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c764:	6839      	ldr	r1, [r7, #0]
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 fb7f 	bl	800ce6a <USBD_CtlError>
          break;
 800c76c:	bf00      	nop
      }
      break;
 800c76e:	e005      	b.n	800c77c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fb79 	bl	800ce6a <USBD_CtlError>
      break;
 800c778:	e000      	b.n	800c77c <USBD_StdEPReq+0x330>
      break;
 800c77a:	bf00      	nop
  }

  return ret;
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
	...

0800c788 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c792:	2300      	movs	r3, #0
 800c794:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c796:	2300      	movs	r3, #0
 800c798:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c79a:	2300      	movs	r3, #0
 800c79c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	885b      	ldrh	r3, [r3, #2]
 800c7a2:	0a1b      	lsrs	r3, r3, #8
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	2b0e      	cmp	r3, #14
 800c7aa:	f200 8152 	bhi.w	800ca52 <USBD_GetDescriptor+0x2ca>
 800c7ae:	a201      	add	r2, pc, #4	; (adr r2, 800c7b4 <USBD_GetDescriptor+0x2c>)
 800c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b4:	0800c825 	.word	0x0800c825
 800c7b8:	0800c83d 	.word	0x0800c83d
 800c7bc:	0800c87d 	.word	0x0800c87d
 800c7c0:	0800ca53 	.word	0x0800ca53
 800c7c4:	0800ca53 	.word	0x0800ca53
 800c7c8:	0800c9f3 	.word	0x0800c9f3
 800c7cc:	0800ca1f 	.word	0x0800ca1f
 800c7d0:	0800ca53 	.word	0x0800ca53
 800c7d4:	0800ca53 	.word	0x0800ca53
 800c7d8:	0800ca53 	.word	0x0800ca53
 800c7dc:	0800ca53 	.word	0x0800ca53
 800c7e0:	0800ca53 	.word	0x0800ca53
 800c7e4:	0800ca53 	.word	0x0800ca53
 800c7e8:	0800ca53 	.word	0x0800ca53
 800c7ec:	0800c7f1 	.word	0x0800c7f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7f6:	69db      	ldr	r3, [r3, #28]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00b      	beq.n	800c814 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c802:	69db      	ldr	r3, [r3, #28]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	7c12      	ldrb	r2, [r2, #16]
 800c808:	f107 0108 	add.w	r1, r7, #8
 800c80c:	4610      	mov	r0, r2
 800c80e:	4798      	blx	r3
 800c810:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c812:	e126      	b.n	800ca62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c814:	6839      	ldr	r1, [r7, #0]
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fb27 	bl	800ce6a <USBD_CtlError>
        err++;
 800c81c:	7afb      	ldrb	r3, [r7, #11]
 800c81e:	3301      	adds	r3, #1
 800c820:	72fb      	strb	r3, [r7, #11]
      break;
 800c822:	e11e      	b.n	800ca62 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	7c12      	ldrb	r2, [r2, #16]
 800c830:	f107 0108 	add.w	r1, r7, #8
 800c834:	4610      	mov	r0, r2
 800c836:	4798      	blx	r3
 800c838:	60f8      	str	r0, [r7, #12]
      break;
 800c83a:	e112      	b.n	800ca62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	7c1b      	ldrb	r3, [r3, #16]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10d      	bne.n	800c860 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84c:	f107 0208 	add.w	r2, r7, #8
 800c850:	4610      	mov	r0, r2
 800c852:	4798      	blx	r3
 800c854:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3301      	adds	r3, #1
 800c85a:	2202      	movs	r2, #2
 800c85c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c85e:	e100      	b.n	800ca62 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c868:	f107 0208 	add.w	r2, r7, #8
 800c86c:	4610      	mov	r0, r2
 800c86e:	4798      	blx	r3
 800c870:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3301      	adds	r3, #1
 800c876:	2202      	movs	r2, #2
 800c878:	701a      	strb	r2, [r3, #0]
      break;
 800c87a:	e0f2      	b.n	800ca62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	885b      	ldrh	r3, [r3, #2]
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b05      	cmp	r3, #5
 800c884:	f200 80ac 	bhi.w	800c9e0 <USBD_GetDescriptor+0x258>
 800c888:	a201      	add	r2, pc, #4	; (adr r2, 800c890 <USBD_GetDescriptor+0x108>)
 800c88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88e:	bf00      	nop
 800c890:	0800c8a9 	.word	0x0800c8a9
 800c894:	0800c8dd 	.word	0x0800c8dd
 800c898:	0800c911 	.word	0x0800c911
 800c89c:	0800c945 	.word	0x0800c945
 800c8a0:	0800c979 	.word	0x0800c979
 800c8a4:	0800c9ad 	.word	0x0800c9ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	7c12      	ldrb	r2, [r2, #16]
 800c8c0:	f107 0108 	add.w	r1, r7, #8
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4798      	blx	r3
 800c8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ca:	e091      	b.n	800c9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8cc:	6839      	ldr	r1, [r7, #0]
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 facb 	bl	800ce6a <USBD_CtlError>
            err++;
 800c8d4:	7afb      	ldrb	r3, [r7, #11]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8da:	e089      	b.n	800c9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00b      	beq.n	800c900 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	7c12      	ldrb	r2, [r2, #16]
 800c8f4:	f107 0108 	add.w	r1, r7, #8
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	4798      	blx	r3
 800c8fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8fe:	e077      	b.n	800c9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c900:	6839      	ldr	r1, [r7, #0]
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fab1 	bl	800ce6a <USBD_CtlError>
            err++;
 800c908:	7afb      	ldrb	r3, [r7, #11]
 800c90a:	3301      	adds	r3, #1
 800c90c:	72fb      	strb	r3, [r7, #11]
          break;
 800c90e:	e06f      	b.n	800c9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00b      	beq.n	800c934 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	7c12      	ldrb	r2, [r2, #16]
 800c928:	f107 0108 	add.w	r1, r7, #8
 800c92c:	4610      	mov	r0, r2
 800c92e:	4798      	blx	r3
 800c930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c932:	e05d      	b.n	800c9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 fa97 	bl	800ce6a <USBD_CtlError>
            err++;
 800c93c:	7afb      	ldrb	r3, [r7, #11]
 800c93e:	3301      	adds	r3, #1
 800c940:	72fb      	strb	r3, [r7, #11]
          break;
 800c942:	e055      	b.n	800c9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c94a:	691b      	ldr	r3, [r3, #16]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00b      	beq.n	800c968 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	7c12      	ldrb	r2, [r2, #16]
 800c95c:	f107 0108 	add.w	r1, r7, #8
 800c960:	4610      	mov	r0, r2
 800c962:	4798      	blx	r3
 800c964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c966:	e043      	b.n	800c9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c968:	6839      	ldr	r1, [r7, #0]
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f000 fa7d 	bl	800ce6a <USBD_CtlError>
            err++;
 800c970:	7afb      	ldrb	r3, [r7, #11]
 800c972:	3301      	adds	r3, #1
 800c974:	72fb      	strb	r3, [r7, #11]
          break;
 800c976:	e03b      	b.n	800c9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d00b      	beq.n	800c99c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c98a:	695b      	ldr	r3, [r3, #20]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	7c12      	ldrb	r2, [r2, #16]
 800c990:	f107 0108 	add.w	r1, r7, #8
 800c994:	4610      	mov	r0, r2
 800c996:	4798      	blx	r3
 800c998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c99a:	e029      	b.n	800c9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fa63 	bl	800ce6a <USBD_CtlError>
            err++;
 800c9a4:	7afb      	ldrb	r3, [r7, #11]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9aa:	e021      	b.n	800c9f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00b      	beq.n	800c9d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	7c12      	ldrb	r2, [r2, #16]
 800c9c4:	f107 0108 	add.w	r1, r7, #8
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	4798      	blx	r3
 800c9cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9ce:	e00f      	b.n	800c9f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 fa49 	bl	800ce6a <USBD_CtlError>
            err++;
 800c9d8:	7afb      	ldrb	r3, [r7, #11]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c9de:	e007      	b.n	800c9f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c9e0:	6839      	ldr	r1, [r7, #0]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fa41 	bl	800ce6a <USBD_CtlError>
          err++;
 800c9e8:	7afb      	ldrb	r3, [r7, #11]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c9ee:	bf00      	nop
      }
      break;
 800c9f0:	e037      	b.n	800ca62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	7c1b      	ldrb	r3, [r3, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d109      	bne.n	800ca0e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca02:	f107 0208 	add.w	r2, r7, #8
 800ca06:	4610      	mov	r0, r2
 800ca08:	4798      	blx	r3
 800ca0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca0c:	e029      	b.n	800ca62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca0e:	6839      	ldr	r1, [r7, #0]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fa2a 	bl	800ce6a <USBD_CtlError>
        err++;
 800ca16:	7afb      	ldrb	r3, [r7, #11]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	72fb      	strb	r3, [r7, #11]
      break;
 800ca1c:	e021      	b.n	800ca62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	7c1b      	ldrb	r3, [r3, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10d      	bne.n	800ca42 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2e:	f107 0208 	add.w	r2, r7, #8
 800ca32:	4610      	mov	r0, r2
 800ca34:	4798      	blx	r3
 800ca36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	2207      	movs	r2, #7
 800ca3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca40:	e00f      	b.n	800ca62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fa10 	bl	800ce6a <USBD_CtlError>
        err++;
 800ca4a:	7afb      	ldrb	r3, [r7, #11]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca50:	e007      	b.n	800ca62 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ca52:	6839      	ldr	r1, [r7, #0]
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 fa08 	bl	800ce6a <USBD_CtlError>
      err++;
 800ca5a:	7afb      	ldrb	r3, [r7, #11]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca60:	bf00      	nop
  }

  if (err != 0U)
 800ca62:	7afb      	ldrb	r3, [r7, #11]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d11e      	bne.n	800caa6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	88db      	ldrh	r3, [r3, #6]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d016      	beq.n	800ca9e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ca70:	893b      	ldrh	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00e      	beq.n	800ca94 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	88da      	ldrh	r2, [r3, #6]
 800ca7a:	893b      	ldrh	r3, [r7, #8]
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	bf28      	it	cs
 800ca80:	4613      	movcs	r3, r2
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca86:	893b      	ldrh	r3, [r7, #8]
 800ca88:	461a      	mov	r2, r3
 800ca8a:	68f9      	ldr	r1, [r7, #12]
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fa5d 	bl	800cf4c <USBD_CtlSendData>
 800ca92:	e009      	b.n	800caa8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca94:	6839      	ldr	r1, [r7, #0]
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 f9e7 	bl	800ce6a <USBD_CtlError>
 800ca9c:	e004      	b.n	800caa8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 faae 	bl	800d000 <USBD_CtlSendStatus>
 800caa4:	e000      	b.n	800caa8 <USBD_GetDescriptor+0x320>
    return;
 800caa6:	bf00      	nop
  }
}
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop

0800cab0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	889b      	ldrh	r3, [r3, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d131      	bne.n	800cb26 <USBD_SetAddress+0x76>
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	88db      	ldrh	r3, [r3, #6]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d12d      	bne.n	800cb26 <USBD_SetAddress+0x76>
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	885b      	ldrh	r3, [r3, #2]
 800cace:	2b7f      	cmp	r3, #127	; 0x7f
 800cad0:	d829      	bhi.n	800cb26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	885b      	ldrh	r3, [r3, #2]
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cadc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	2b03      	cmp	r3, #3
 800cae8:	d104      	bne.n	800caf4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800caea:	6839      	ldr	r1, [r7, #0]
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 f9bc 	bl	800ce6a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caf2:	e01d      	b.n	800cb30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	7bfa      	ldrb	r2, [r7, #15]
 800caf8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
 800cafe:	4619      	mov	r1, r3
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f003 fda1 	bl	8010648 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 fa7a 	bl	800d000 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d004      	beq.n	800cb1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2202      	movs	r2, #2
 800cb16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb1a:	e009      	b.n	800cb30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb24:	e004      	b.n	800cb30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f99e 	bl	800ce6a <USBD_CtlError>
  }
}
 800cb2e:	bf00      	nop
 800cb30:	bf00      	nop
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	885b      	ldrh	r3, [r3, #2]
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	4b4e      	ldr	r3, [pc, #312]	; (800cc88 <USBD_SetConfig+0x150>)
 800cb4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb50:	4b4d      	ldr	r3, [pc, #308]	; (800cc88 <USBD_SetConfig+0x150>)
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d905      	bls.n	800cb64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb58:	6839      	ldr	r1, [r7, #0]
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f985 	bl	800ce6a <USBD_CtlError>
    return USBD_FAIL;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e08c      	b.n	800cc7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d002      	beq.n	800cb76 <USBD_SetConfig+0x3e>
 800cb70:	2b03      	cmp	r3, #3
 800cb72:	d029      	beq.n	800cbc8 <USBD_SetConfig+0x90>
 800cb74:	e075      	b.n	800cc62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cb76:	4b44      	ldr	r3, [pc, #272]	; (800cc88 <USBD_SetConfig+0x150>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d020      	beq.n	800cbc0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cb7e:	4b42      	ldr	r3, [pc, #264]	; (800cc88 <USBD_SetConfig+0x150>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	461a      	mov	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb88:	4b3f      	ldr	r3, [pc, #252]	; (800cc88 <USBD_SetConfig+0x150>)
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7fe ffb7 	bl	800bb02 <USBD_SetClassConfig>
 800cb94:	4603      	mov	r3, r0
 800cb96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d008      	beq.n	800cbb0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb9e:	6839      	ldr	r1, [r7, #0]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f962 	bl	800ce6a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2202      	movs	r2, #2
 800cbaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cbae:	e065      	b.n	800cc7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fa25 	bl	800d000 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2203      	movs	r2, #3
 800cbba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cbbe:	e05d      	b.n	800cc7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fa1d 	bl	800d000 <USBD_CtlSendStatus>
      break;
 800cbc6:	e059      	b.n	800cc7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cbc8:	4b2f      	ldr	r3, [pc, #188]	; (800cc88 <USBD_SetConfig+0x150>)
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d112      	bne.n	800cbf6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cbd8:	4b2b      	ldr	r3, [pc, #172]	; (800cc88 <USBD_SetConfig+0x150>)
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	461a      	mov	r2, r3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbe2:	4b29      	ldr	r3, [pc, #164]	; (800cc88 <USBD_SetConfig+0x150>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7fe ffa6 	bl	800bb3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 fa06 	bl	800d000 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cbf4:	e042      	b.n	800cc7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cbf6:	4b24      	ldr	r3, [pc, #144]	; (800cc88 <USBD_SetConfig+0x150>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d02a      	beq.n	800cc5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7fe ff94 	bl	800bb3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc12:	4b1d      	ldr	r3, [pc, #116]	; (800cc88 <USBD_SetConfig+0x150>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	461a      	mov	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc1c:	4b1a      	ldr	r3, [pc, #104]	; (800cc88 <USBD_SetConfig+0x150>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7fe ff6d 	bl	800bb02 <USBD_SetClassConfig>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00f      	beq.n	800cc52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f918 	bl	800ce6a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7fe ff79 	bl	800bb3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cc50:	e014      	b.n	800cc7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f9d4 	bl	800d000 <USBD_CtlSendStatus>
      break;
 800cc58:	e010      	b.n	800cc7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f9d0 	bl	800d000 <USBD_CtlSendStatus>
      break;
 800cc60:	e00c      	b.n	800cc7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 f900 	bl	800ce6a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc6a:	4b07      	ldr	r3, [pc, #28]	; (800cc88 <USBD_SetConfig+0x150>)
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7fe ff62 	bl	800bb3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cc76:	2303      	movs	r3, #3
 800cc78:	73fb      	strb	r3, [r7, #15]
      break;
 800cc7a:	bf00      	nop
  }

  return ret;
 800cc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	2000a770 	.word	0x2000a770

0800cc8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	88db      	ldrh	r3, [r3, #6]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d004      	beq.n	800cca8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc9e:	6839      	ldr	r1, [r7, #0]
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f8e2 	bl	800ce6a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cca6:	e023      	b.n	800ccf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b02      	cmp	r3, #2
 800ccb2:	dc02      	bgt.n	800ccba <USBD_GetConfig+0x2e>
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	dc03      	bgt.n	800ccc0 <USBD_GetConfig+0x34>
 800ccb8:	e015      	b.n	800cce6 <USBD_GetConfig+0x5a>
 800ccba:	2b03      	cmp	r3, #3
 800ccbc:	d00b      	beq.n	800ccd6 <USBD_GetConfig+0x4a>
 800ccbe:	e012      	b.n	800cce6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3308      	adds	r3, #8
 800ccca:	2201      	movs	r2, #1
 800cccc:	4619      	mov	r1, r3
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f93c 	bl	800cf4c <USBD_CtlSendData>
        break;
 800ccd4:	e00c      	b.n	800ccf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3304      	adds	r3, #4
 800ccda:	2201      	movs	r2, #1
 800ccdc:	4619      	mov	r1, r3
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f934 	bl	800cf4c <USBD_CtlSendData>
        break;
 800cce4:	e004      	b.n	800ccf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cce6:	6839      	ldr	r1, [r7, #0]
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 f8be 	bl	800ce6a <USBD_CtlError>
        break;
 800ccee:	bf00      	nop
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	d81e      	bhi.n	800cd4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	88db      	ldrh	r3, [r3, #6]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d004      	beq.n	800cd22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cd18:	6839      	ldr	r1, [r7, #0]
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f8a5 	bl	800ce6a <USBD_CtlError>
        break;
 800cd20:	e01a      	b.n	800cd58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2201      	movs	r2, #1
 800cd26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d005      	beq.n	800cd3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	f043 0202 	orr.w	r2, r3, #2
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	330c      	adds	r3, #12
 800cd42:	2202      	movs	r2, #2
 800cd44:	4619      	mov	r1, r3
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 f900 	bl	800cf4c <USBD_CtlSendData>
      break;
 800cd4c:	e004      	b.n	800cd58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cd4e:	6839      	ldr	r1, [r7, #0]
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f88a 	bl	800ce6a <USBD_CtlError>
      break;
 800cd56:	bf00      	nop
  }
}
 800cd58:	bf00      	nop
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	885b      	ldrh	r3, [r3, #2]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d107      	bne.n	800cd82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2201      	movs	r2, #1
 800cd76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 f940 	bl	800d000 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cd80:	e013      	b.n	800cdaa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	885b      	ldrh	r3, [r3, #2]
 800cd86:	2b02      	cmp	r3, #2
 800cd88:	d10b      	bne.n	800cda2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	889b      	ldrh	r3, [r3, #4]
 800cd8e:	0a1b      	lsrs	r3, r3, #8
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	b2da      	uxtb	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f930 	bl	800d000 <USBD_CtlSendStatus>
}
 800cda0:	e003      	b.n	800cdaa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cda2:	6839      	ldr	r1, [r7, #0]
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 f860 	bl	800ce6a <USBD_CtlError>
}
 800cdaa:	bf00      	nop
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b082      	sub	sp, #8
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d80b      	bhi.n	800cde2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	885b      	ldrh	r3, [r3, #2]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d10c      	bne.n	800cdec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f910 	bl	800d000 <USBD_CtlSendStatus>
      }
      break;
 800cde0:	e004      	b.n	800cdec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f840 	bl	800ce6a <USBD_CtlError>
      break;
 800cdea:	e000      	b.n	800cdee <USBD_ClrFeature+0x3c>
      break;
 800cdec:	bf00      	nop
  }
}
 800cdee:	bf00      	nop
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b084      	sub	sp, #16
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	781a      	ldrb	r2, [r3, #0]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	781a      	ldrb	r2, [r3, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f7ff fa17 	bl	800c254 <SWAPBYTE>
 800ce26:	4603      	mov	r3, r0
 800ce28:	461a      	mov	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3301      	adds	r3, #1
 800ce32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	3301      	adds	r3, #1
 800ce38:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ce3a:	68f8      	ldr	r0, [r7, #12]
 800ce3c:	f7ff fa0a 	bl	800c254 <SWAPBYTE>
 800ce40:	4603      	mov	r3, r0
 800ce42:	461a      	mov	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3301      	adds	r3, #1
 800ce52:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f7ff f9fd 	bl	800c254 <SWAPBYTE>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	80da      	strh	r2, [r3, #6]
}
 800ce62:	bf00      	nop
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce74:	2180      	movs	r1, #128	; 0x80
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f003 fb4e 	bl	8010518 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f003 fb4a 	bl	8010518 <USBD_LL_StallEP>
}
 800ce84:	bf00      	nop
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d036      	beq.n	800cf10 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cea6:	6938      	ldr	r0, [r7, #16]
 800cea8:	f000 f836 	bl	800cf18 <USBD_GetLen>
 800ceac:	4603      	mov	r3, r0
 800ceae:	3301      	adds	r3, #1
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	4413      	add	r3, r2
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	7812      	ldrb	r2, [r2, #0]
 800cec4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	3301      	adds	r3, #1
 800ceca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cecc:	7dfb      	ldrb	r3, [r7, #23]
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	4413      	add	r3, r2
 800ced2:	2203      	movs	r2, #3
 800ced4:	701a      	strb	r2, [r3, #0]
  idx++;
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	3301      	adds	r3, #1
 800ceda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cedc:	e013      	b.n	800cf06 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	4413      	add	r3, r2
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	7812      	ldrb	r2, [r2, #0]
 800cee8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	3301      	adds	r3, #1
 800ceee:	613b      	str	r3, [r7, #16]
    idx++;
 800cef0:	7dfb      	ldrb	r3, [r7, #23]
 800cef2:	3301      	adds	r3, #1
 800cef4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	4413      	add	r3, r2
 800cefc:	2200      	movs	r2, #0
 800cefe:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf00:	7dfb      	ldrb	r3, [r7, #23]
 800cf02:	3301      	adds	r3, #1
 800cf04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1e7      	bne.n	800cede <USBD_GetString+0x52>
 800cf0e:	e000      	b.n	800cf12 <USBD_GetString+0x86>
    return;
 800cf10:	bf00      	nop
  }
}
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cf20:	2300      	movs	r3, #0
 800cf22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cf28:	e005      	b.n	800cf36 <USBD_GetLen+0x1e>
  {
    len++;
 800cf2a:	7bfb      	ldrb	r3, [r7, #15]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	3301      	adds	r3, #1
 800cf34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1f5      	bne.n	800cf2a <USBD_GetLen+0x12>
  }

  return len;
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2202      	movs	r2, #2
 800cf5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	2100      	movs	r1, #0
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f003 fb9e 	bl	80106b4 <USBD_LL_Transmit>

  return USBD_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b084      	sub	sp, #16
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	60b9      	str	r1, [r7, #8]
 800cf8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	2100      	movs	r1, #0
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f003 fb8d 	bl	80106b4 <USBD_LL_Transmit>

  return USBD_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2203      	movs	r2, #3
 800cfb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	2100      	movs	r1, #0
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f003 fba8 	bl	8010724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b084      	sub	sp, #16
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	60f8      	str	r0, [r7, #12]
 800cfe6:	60b9      	str	r1, [r7, #8]
 800cfe8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	2100      	movs	r1, #0
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f003 fb97 	bl	8010724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2204      	movs	r2, #4
 800d00c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d010:	2300      	movs	r3, #0
 800d012:	2200      	movs	r2, #0
 800d014:	2100      	movs	r1, #0
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f003 fb4c 	bl	80106b4 <USBD_LL_Transmit>

  return USBD_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b082      	sub	sp, #8
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2205      	movs	r2, #5
 800d032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d036:	2300      	movs	r3, #0
 800d038:	2200      	movs	r2, #0
 800d03a:	2100      	movs	r1, #0
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f003 fb71 	bl	8010724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	4603      	mov	r3, r0
 800d054:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d056:	79fb      	ldrb	r3, [r7, #7]
 800d058:	4a08      	ldr	r2, [pc, #32]	; (800d07c <disk_status+0x30>)
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4413      	add	r3, r2
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	79fa      	ldrb	r2, [r7, #7]
 800d064:	4905      	ldr	r1, [pc, #20]	; (800d07c <disk_status+0x30>)
 800d066:	440a      	add	r2, r1
 800d068:	7a12      	ldrb	r2, [r2, #8]
 800d06a:	4610      	mov	r0, r2
 800d06c:	4798      	blx	r3
 800d06e:	4603      	mov	r3, r0
 800d070:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d072:	7bfb      	ldrb	r3, [r7, #15]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	2000a79c 	.word	0x2000a79c

0800d080 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	4603      	mov	r3, r0
 800d088:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d08e:	79fb      	ldrb	r3, [r7, #7]
 800d090:	4a0d      	ldr	r2, [pc, #52]	; (800d0c8 <disk_initialize+0x48>)
 800d092:	5cd3      	ldrb	r3, [r2, r3]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d111      	bne.n	800d0bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d098:	79fb      	ldrb	r3, [r7, #7]
 800d09a:	4a0b      	ldr	r2, [pc, #44]	; (800d0c8 <disk_initialize+0x48>)
 800d09c:	2101      	movs	r1, #1
 800d09e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d0a0:	79fb      	ldrb	r3, [r7, #7]
 800d0a2:	4a09      	ldr	r2, [pc, #36]	; (800d0c8 <disk_initialize+0x48>)
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4413      	add	r3, r2
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	79fa      	ldrb	r2, [r7, #7]
 800d0ae:	4906      	ldr	r1, [pc, #24]	; (800d0c8 <disk_initialize+0x48>)
 800d0b0:	440a      	add	r2, r1
 800d0b2:	7a12      	ldrb	r2, [r2, #8]
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4798      	blx	r3
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	2000a79c 	.word	0x2000a79c

0800d0cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d0cc:	b590      	push	{r4, r7, lr}
 800d0ce:	b087      	sub	sp, #28
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60b9      	str	r1, [r7, #8]
 800d0d4:	607a      	str	r2, [r7, #4]
 800d0d6:	603b      	str	r3, [r7, #0]
 800d0d8:	4603      	mov	r3, r0
 800d0da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d0dc:	7bfb      	ldrb	r3, [r7, #15]
 800d0de:	4a0a      	ldr	r2, [pc, #40]	; (800d108 <disk_read+0x3c>)
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	689c      	ldr	r4, [r3, #8]
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ea:	4a07      	ldr	r2, [pc, #28]	; (800d108 <disk_read+0x3c>)
 800d0ec:	4413      	add	r3, r2
 800d0ee:	7a18      	ldrb	r0, [r3, #8]
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	68b9      	ldr	r1, [r7, #8]
 800d0f6:	47a0      	blx	r4
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	75fb      	strb	r3, [r7, #23]
  return res;
 800d0fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	371c      	adds	r7, #28
 800d102:	46bd      	mov	sp, r7
 800d104:	bd90      	pop	{r4, r7, pc}
 800d106:	bf00      	nop
 800d108:	2000a79c 	.word	0x2000a79c

0800d10c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d10c:	b590      	push	{r4, r7, lr}
 800d10e:	b087      	sub	sp, #28
 800d110:	af00      	add	r7, sp, #0
 800d112:	60b9      	str	r1, [r7, #8]
 800d114:	607a      	str	r2, [r7, #4]
 800d116:	603b      	str	r3, [r7, #0]
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	4a0a      	ldr	r2, [pc, #40]	; (800d148 <disk_write+0x3c>)
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	4413      	add	r3, r2
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	68dc      	ldr	r4, [r3, #12]
 800d128:	7bfb      	ldrb	r3, [r7, #15]
 800d12a:	4a07      	ldr	r2, [pc, #28]	; (800d148 <disk_write+0x3c>)
 800d12c:	4413      	add	r3, r2
 800d12e:	7a18      	ldrb	r0, [r3, #8]
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	68b9      	ldr	r1, [r7, #8]
 800d136:	47a0      	blx	r4
 800d138:	4603      	mov	r3, r0
 800d13a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	371c      	adds	r7, #28
 800d142:	46bd      	mov	sp, r7
 800d144:	bd90      	pop	{r4, r7, pc}
 800d146:	bf00      	nop
 800d148:	2000a79c 	.word	0x2000a79c

0800d14c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	4603      	mov	r3, r0
 800d154:	603a      	str	r2, [r7, #0]
 800d156:	71fb      	strb	r3, [r7, #7]
 800d158:	460b      	mov	r3, r1
 800d15a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d15c:	79fb      	ldrb	r3, [r7, #7]
 800d15e:	4a09      	ldr	r2, [pc, #36]	; (800d184 <disk_ioctl+0x38>)
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4413      	add	r3, r2
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	79fa      	ldrb	r2, [r7, #7]
 800d16a:	4906      	ldr	r1, [pc, #24]	; (800d184 <disk_ioctl+0x38>)
 800d16c:	440a      	add	r2, r1
 800d16e:	7a10      	ldrb	r0, [r2, #8]
 800d170:	79b9      	ldrb	r1, [r7, #6]
 800d172:	683a      	ldr	r2, [r7, #0]
 800d174:	4798      	blx	r3
 800d176:	4603      	mov	r3, r0
 800d178:	73fb      	strb	r3, [r7, #15]
  return res;
 800d17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	2000a79c 	.word	0x2000a79c

0800d188 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d188:	b480      	push	{r7}
 800d18a:	b085      	sub	sp, #20
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	3301      	adds	r3, #1
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d198:	89fb      	ldrh	r3, [r7, #14]
 800d19a:	021b      	lsls	r3, r3, #8
 800d19c:	b21a      	sxth	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	b21b      	sxth	r3, r3
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	b21b      	sxth	r3, r3
 800d1a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d1aa:	89fb      	ldrh	r3, [r7, #14]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3303      	adds	r3, #3
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	021b      	lsls	r3, r3, #8
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	3202      	adds	r2, #2
 800d1d0:	7812      	ldrb	r2, [r2, #0]
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	021b      	lsls	r3, r3, #8
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	3201      	adds	r2, #1
 800d1de:	7812      	ldrb	r2, [r2, #0]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	021b      	lsls	r3, r3, #8
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	7812      	ldrb	r2, [r2, #0]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]
	return rv;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d1fe:	b480      	push	{r7}
 800d200:	b083      	sub	sp, #12
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	460b      	mov	r3, r1
 800d208:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	1c5a      	adds	r2, r3, #1
 800d20e:	607a      	str	r2, [r7, #4]
 800d210:	887a      	ldrh	r2, [r7, #2]
 800d212:	b2d2      	uxtb	r2, r2
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	887b      	ldrh	r3, [r7, #2]
 800d218:	0a1b      	lsrs	r3, r3, #8
 800d21a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	1c5a      	adds	r2, r3, #1
 800d220:	607a      	str	r2, [r7, #4]
 800d222:	887a      	ldrh	r2, [r7, #2]
 800d224:	b2d2      	uxtb	r2, r2
 800d226:	701a      	strb	r2, [r3, #0]
}
 800d228:	bf00      	nop
 800d22a:	370c      	adds	r7, #12
 800d22c:	46bd      	mov	sp, r7
 800d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d232:	4770      	bx	lr

0800d234 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	b2d2      	uxtb	r2, r2
 800d248:	701a      	strb	r2, [r3, #0]
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	0a1b      	lsrs	r3, r3, #8
 800d24e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	607a      	str	r2, [r7, #4]
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	b2d2      	uxtb	r2, r2
 800d25a:	701a      	strb	r2, [r3, #0]
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	0a1b      	lsrs	r3, r3, #8
 800d260:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	1c5a      	adds	r2, r3, #1
 800d266:	607a      	str	r2, [r7, #4]
 800d268:	683a      	ldr	r2, [r7, #0]
 800d26a:	b2d2      	uxtb	r2, r2
 800d26c:	701a      	strb	r2, [r3, #0]
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	0a1b      	lsrs	r3, r3, #8
 800d272:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	607a      	str	r2, [r7, #4]
 800d27a:	683a      	ldr	r2, [r7, #0]
 800d27c:	b2d2      	uxtb	r2, r2
 800d27e:	701a      	strb	r2, [r3, #0]
}
 800d280:	bf00      	nop
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d28c:	b480      	push	{r7}
 800d28e:	b087      	sub	sp, #28
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00d      	beq.n	800d2c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	1c53      	adds	r3, r2, #1
 800d2aa:	613b      	str	r3, [r7, #16]
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	1c59      	adds	r1, r3, #1
 800d2b0:	6179      	str	r1, [r7, #20]
 800d2b2:	7812      	ldrb	r2, [r2, #0]
 800d2b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	607b      	str	r3, [r7, #4]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1f1      	bne.n	800d2a6 <mem_cpy+0x1a>
	}
}
 800d2c2:	bf00      	nop
 800d2c4:	371c      	adds	r7, #28
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d2ce:	b480      	push	{r7}
 800d2d0:	b087      	sub	sp, #28
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	60f8      	str	r0, [r7, #12]
 800d2d6:	60b9      	str	r1, [r7, #8]
 800d2d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	1c5a      	adds	r2, r3, #1
 800d2e2:	617a      	str	r2, [r7, #20]
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	b2d2      	uxtb	r2, r2
 800d2e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	607b      	str	r3, [r7, #4]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1f3      	bne.n	800d2de <mem_set+0x10>
}
 800d2f6:	bf00      	nop
 800d2f8:	bf00      	nop
 800d2fa:	371c      	adds	r7, #28
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d304:	b480      	push	{r7}
 800d306:	b089      	sub	sp, #36	; 0x24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	61fb      	str	r3, [r7, #28]
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d318:	2300      	movs	r3, #0
 800d31a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	61fa      	str	r2, [r7, #28]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	4619      	mov	r1, r3
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	61ba      	str	r2, [r7, #24]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	1acb      	subs	r3, r1, r3
 800d330:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	3b01      	subs	r3, #1
 800d336:	607b      	str	r3, [r7, #4]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d002      	beq.n	800d344 <mem_cmp+0x40>
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d0eb      	beq.n	800d31c <mem_cmp+0x18>

	return r;
 800d344:	697b      	ldr	r3, [r7, #20]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3724      	adds	r7, #36	; 0x24
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr

0800d352 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d352:	b480      	push	{r7}
 800d354:	b083      	sub	sp, #12
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d35c:	e002      	b.n	800d364 <chk_chr+0x12>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3301      	adds	r3, #1
 800d362:	607b      	str	r3, [r7, #4]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d005      	beq.n	800d378 <chk_chr+0x26>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	461a      	mov	r2, r3
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	4293      	cmp	r3, r2
 800d376:	d1f2      	bne.n	800d35e <chk_chr+0xc>
	return *str;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	781b      	ldrb	r3, [r3, #0]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d392:	2300      	movs	r3, #0
 800d394:	60bb      	str	r3, [r7, #8]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	60fb      	str	r3, [r7, #12]
 800d39a:	e029      	b.n	800d3f0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d39c:	4a27      	ldr	r2, [pc, #156]	; (800d43c <chk_lock+0xb4>)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	011b      	lsls	r3, r3, #4
 800d3a2:	4413      	add	r3, r2
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d01d      	beq.n	800d3e6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d3aa:	4a24      	ldr	r2, [pc, #144]	; (800d43c <chk_lock+0xb4>)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	011b      	lsls	r3, r3, #4
 800d3b0:	4413      	add	r3, r2
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d116      	bne.n	800d3ea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d3bc:	4a1f      	ldr	r2, [pc, #124]	; (800d43c <chk_lock+0xb4>)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	011b      	lsls	r3, r3, #4
 800d3c2:	4413      	add	r3, r2
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d10c      	bne.n	800d3ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d3d0:	4a1a      	ldr	r2, [pc, #104]	; (800d43c <chk_lock+0xb4>)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	011b      	lsls	r3, r3, #4
 800d3d6:	4413      	add	r3, r2
 800d3d8:	3308      	adds	r3, #8
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d102      	bne.n	800d3ea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d3e4:	e007      	b.n	800d3f6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	60fb      	str	r3, [r7, #12]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d9d2      	bls.n	800d39c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d109      	bne.n	800d410 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d102      	bne.n	800d408 <chk_lock+0x80>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b02      	cmp	r3, #2
 800d406:	d101      	bne.n	800d40c <chk_lock+0x84>
 800d408:	2300      	movs	r3, #0
 800d40a:	e010      	b.n	800d42e <chk_lock+0xa6>
 800d40c:	2312      	movs	r3, #18
 800d40e:	e00e      	b.n	800d42e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d108      	bne.n	800d428 <chk_lock+0xa0>
 800d416:	4a09      	ldr	r2, [pc, #36]	; (800d43c <chk_lock+0xb4>)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	011b      	lsls	r3, r3, #4
 800d41c:	4413      	add	r3, r2
 800d41e:	330c      	adds	r3, #12
 800d420:	881b      	ldrh	r3, [r3, #0]
 800d422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d426:	d101      	bne.n	800d42c <chk_lock+0xa4>
 800d428:	2310      	movs	r3, #16
 800d42a:	e000      	b.n	800d42e <chk_lock+0xa6>
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop
 800d43c:	2000a77c 	.word	0x2000a77c

0800d440 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d446:	2300      	movs	r3, #0
 800d448:	607b      	str	r3, [r7, #4]
 800d44a:	e002      	b.n	800d452 <enq_lock+0x12>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3301      	adds	r3, #1
 800d450:	607b      	str	r3, [r7, #4]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d806      	bhi.n	800d466 <enq_lock+0x26>
 800d458:	4a09      	ldr	r2, [pc, #36]	; (800d480 <enq_lock+0x40>)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	011b      	lsls	r3, r3, #4
 800d45e:	4413      	add	r3, r2
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d1f2      	bne.n	800d44c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b02      	cmp	r3, #2
 800d46a:	bf14      	ite	ne
 800d46c:	2301      	movne	r3, #1
 800d46e:	2300      	moveq	r3, #0
 800d470:	b2db      	uxtb	r3, r3
}
 800d472:	4618      	mov	r0, r3
 800d474:	370c      	adds	r7, #12
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	2000a77c 	.word	0x2000a77c

0800d484 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d48e:	2300      	movs	r3, #0
 800d490:	60fb      	str	r3, [r7, #12]
 800d492:	e01f      	b.n	800d4d4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d494:	4a41      	ldr	r2, [pc, #260]	; (800d59c <inc_lock+0x118>)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	011b      	lsls	r3, r3, #4
 800d49a:	4413      	add	r3, r2
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d113      	bne.n	800d4ce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d4a6:	4a3d      	ldr	r2, [pc, #244]	; (800d59c <inc_lock+0x118>)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	011b      	lsls	r3, r3, #4
 800d4ac:	4413      	add	r3, r2
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d109      	bne.n	800d4ce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d4ba:	4a38      	ldr	r2, [pc, #224]	; (800d59c <inc_lock+0x118>)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	011b      	lsls	r3, r3, #4
 800d4c0:	4413      	add	r3, r2
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d006      	beq.n	800d4dc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	60fb      	str	r3, [r7, #12]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d9dc      	bls.n	800d494 <inc_lock+0x10>
 800d4da:	e000      	b.n	800d4de <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d4dc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d132      	bne.n	800d54a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	60fb      	str	r3, [r7, #12]
 800d4e8:	e002      	b.n	800d4f0 <inc_lock+0x6c>
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	60fb      	str	r3, [r7, #12]
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d806      	bhi.n	800d504 <inc_lock+0x80>
 800d4f6:	4a29      	ldr	r2, [pc, #164]	; (800d59c <inc_lock+0x118>)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	011b      	lsls	r3, r3, #4
 800d4fc:	4413      	add	r3, r2
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1f2      	bne.n	800d4ea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2b02      	cmp	r3, #2
 800d508:	d101      	bne.n	800d50e <inc_lock+0x8a>
 800d50a:	2300      	movs	r3, #0
 800d50c:	e040      	b.n	800d590 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	4922      	ldr	r1, [pc, #136]	; (800d59c <inc_lock+0x118>)
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	011b      	lsls	r3, r3, #4
 800d518:	440b      	add	r3, r1
 800d51a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	689a      	ldr	r2, [r3, #8]
 800d520:	491e      	ldr	r1, [pc, #120]	; (800d59c <inc_lock+0x118>)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	011b      	lsls	r3, r3, #4
 800d526:	440b      	add	r3, r1
 800d528:	3304      	adds	r3, #4
 800d52a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	695a      	ldr	r2, [r3, #20]
 800d530:	491a      	ldr	r1, [pc, #104]	; (800d59c <inc_lock+0x118>)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	011b      	lsls	r3, r3, #4
 800d536:	440b      	add	r3, r1
 800d538:	3308      	adds	r3, #8
 800d53a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d53c:	4a17      	ldr	r2, [pc, #92]	; (800d59c <inc_lock+0x118>)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	011b      	lsls	r3, r3, #4
 800d542:	4413      	add	r3, r2
 800d544:	330c      	adds	r3, #12
 800d546:	2200      	movs	r2, #0
 800d548:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d009      	beq.n	800d564 <inc_lock+0xe0>
 800d550:	4a12      	ldr	r2, [pc, #72]	; (800d59c <inc_lock+0x118>)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	011b      	lsls	r3, r3, #4
 800d556:	4413      	add	r3, r2
 800d558:	330c      	adds	r3, #12
 800d55a:	881b      	ldrh	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d001      	beq.n	800d564 <inc_lock+0xe0>
 800d560:	2300      	movs	r3, #0
 800d562:	e015      	b.n	800d590 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d108      	bne.n	800d57c <inc_lock+0xf8>
 800d56a:	4a0c      	ldr	r2, [pc, #48]	; (800d59c <inc_lock+0x118>)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	011b      	lsls	r3, r3, #4
 800d570:	4413      	add	r3, r2
 800d572:	330c      	adds	r3, #12
 800d574:	881b      	ldrh	r3, [r3, #0]
 800d576:	3301      	adds	r3, #1
 800d578:	b29a      	uxth	r2, r3
 800d57a:	e001      	b.n	800d580 <inc_lock+0xfc>
 800d57c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d580:	4906      	ldr	r1, [pc, #24]	; (800d59c <inc_lock+0x118>)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	011b      	lsls	r3, r3, #4
 800d586:	440b      	add	r3, r1
 800d588:	330c      	adds	r3, #12
 800d58a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	3301      	adds	r3, #1
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	2000a77c 	.word	0x2000a77c

0800d5a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	607b      	str	r3, [r7, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d825      	bhi.n	800d600 <dec_lock+0x60>
		n = Files[i].ctr;
 800d5b4:	4a17      	ldr	r2, [pc, #92]	; (800d614 <dec_lock+0x74>)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	011b      	lsls	r3, r3, #4
 800d5ba:	4413      	add	r3, r2
 800d5bc:	330c      	adds	r3, #12
 800d5be:	881b      	ldrh	r3, [r3, #0]
 800d5c0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d5c2:	89fb      	ldrh	r3, [r7, #14]
 800d5c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5c8:	d101      	bne.n	800d5ce <dec_lock+0x2e>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d5ce:	89fb      	ldrh	r3, [r7, #14]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d002      	beq.n	800d5da <dec_lock+0x3a>
 800d5d4:	89fb      	ldrh	r3, [r7, #14]
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d5da:	4a0e      	ldr	r2, [pc, #56]	; (800d614 <dec_lock+0x74>)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	011b      	lsls	r3, r3, #4
 800d5e0:	4413      	add	r3, r2
 800d5e2:	330c      	adds	r3, #12
 800d5e4:	89fa      	ldrh	r2, [r7, #14]
 800d5e6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d5e8:	89fb      	ldrh	r3, [r7, #14]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d105      	bne.n	800d5fa <dec_lock+0x5a>
 800d5ee:	4a09      	ldr	r2, [pc, #36]	; (800d614 <dec_lock+0x74>)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	011b      	lsls	r3, r3, #4
 800d5f4:	4413      	add	r3, r2
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	737b      	strb	r3, [r7, #13]
 800d5fe:	e001      	b.n	800d604 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d600:	2302      	movs	r3, #2
 800d602:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d604:	7b7b      	ldrb	r3, [r7, #13]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	2000a77c 	.word	0x2000a77c

0800d618 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d620:	2300      	movs	r3, #0
 800d622:	60fb      	str	r3, [r7, #12]
 800d624:	e010      	b.n	800d648 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d626:	4a0d      	ldr	r2, [pc, #52]	; (800d65c <clear_lock+0x44>)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	011b      	lsls	r3, r3, #4
 800d62c:	4413      	add	r3, r2
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	429a      	cmp	r2, r3
 800d634:	d105      	bne.n	800d642 <clear_lock+0x2a>
 800d636:	4a09      	ldr	r2, [pc, #36]	; (800d65c <clear_lock+0x44>)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	011b      	lsls	r3, r3, #4
 800d63c:	4413      	add	r3, r2
 800d63e:	2200      	movs	r2, #0
 800d640:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3301      	adds	r3, #1
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d9eb      	bls.n	800d626 <clear_lock+0xe>
	}
}
 800d64e:	bf00      	nop
 800d650:	bf00      	nop
 800d652:	3714      	adds	r7, #20
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr
 800d65c:	2000a77c 	.word	0x2000a77c

0800d660 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d668:	2300      	movs	r3, #0
 800d66a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	78db      	ldrb	r3, [r3, #3]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d034      	beq.n	800d6de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d678:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7858      	ldrb	r0, [r3, #1]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d684:	2301      	movs	r3, #1
 800d686:	697a      	ldr	r2, [r7, #20]
 800d688:	f7ff fd40 	bl	800d10c <disk_write>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d002      	beq.n	800d698 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d692:	2301      	movs	r3, #1
 800d694:	73fb      	strb	r3, [r7, #15]
 800d696:	e022      	b.n	800d6de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6a1b      	ldr	r3, [r3, #32]
 800d6a2:	697a      	ldr	r2, [r7, #20]
 800d6a4:	1ad2      	subs	r2, r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	699b      	ldr	r3, [r3, #24]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d217      	bcs.n	800d6de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	789b      	ldrb	r3, [r3, #2]
 800d6b2:	613b      	str	r3, [r7, #16]
 800d6b4:	e010      	b.n	800d6d8 <sync_window+0x78>
					wsect += fs->fsize;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	697a      	ldr	r2, [r7, #20]
 800d6bc:	4413      	add	r3, r2
 800d6be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	7858      	ldrb	r0, [r3, #1]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	697a      	ldr	r2, [r7, #20]
 800d6ce:	f7ff fd1d 	bl	800d10c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	613b      	str	r3, [r7, #16]
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d8eb      	bhi.n	800d6b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3718      	adds	r7, #24
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fa:	683a      	ldr	r2, [r7, #0]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d01b      	beq.n	800d738 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7ff ffad 	bl	800d660 <sync_window>
 800d706:	4603      	mov	r3, r0
 800d708:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d113      	bne.n	800d738 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	7858      	ldrb	r0, [r3, #1]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d71a:	2301      	movs	r3, #1
 800d71c:	683a      	ldr	r2, [r7, #0]
 800d71e:	f7ff fcd5 	bl	800d0cc <disk_read>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d004      	beq.n	800d732 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d728:	f04f 33ff 	mov.w	r3, #4294967295
 800d72c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d72e:	2301      	movs	r3, #1
 800d730:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	683a      	ldr	r2, [r7, #0]
 800d736:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800d738:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7ff ff87 	bl	800d660 <sync_window>
 800d752:	4603      	mov	r3, r0
 800d754:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d756:	7bfb      	ldrb	r3, [r7, #15]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d158      	bne.n	800d80e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b03      	cmp	r3, #3
 800d762:	d148      	bne.n	800d7f6 <sync_fs+0xb2>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	791b      	ldrb	r3, [r3, #4]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d144      	bne.n	800d7f6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3330      	adds	r3, #48	; 0x30
 800d770:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d774:	2100      	movs	r1, #0
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff fda9 	bl	800d2ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	3330      	adds	r3, #48	; 0x30
 800d780:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d784:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d788:	4618      	mov	r0, r3
 800d78a:	f7ff fd38 	bl	800d1fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	3330      	adds	r3, #48	; 0x30
 800d792:	4921      	ldr	r1, [pc, #132]	; (800d818 <sync_fs+0xd4>)
 800d794:	4618      	mov	r0, r3
 800d796:	f7ff fd4d 	bl	800d234 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3330      	adds	r3, #48	; 0x30
 800d79e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d7a2:	491e      	ldr	r1, [pc, #120]	; (800d81c <sync_fs+0xd8>)
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7ff fd45 	bl	800d234 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	3330      	adds	r3, #48	; 0x30
 800d7ae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	f7ff fd3b 	bl	800d234 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	3330      	adds	r3, #48	; 0x30
 800d7c2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4610      	mov	r0, r2
 800d7ce:	f7ff fd31 	bl	800d234 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	69db      	ldr	r3, [r3, #28]
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7858      	ldrb	r0, [r3, #1]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	f7ff fc8e 	bl	800d10c <disk_write>
			fs->fsi_flag = 0;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	785b      	ldrb	r3, [r3, #1]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff fca4 	bl	800d14c <disk_ioctl>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d001      	beq.n	800d80e <sync_fs+0xca>
 800d80a:	2301      	movs	r3, #1
 800d80c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	41615252 	.word	0x41615252
 800d81c:	61417272 	.word	0x61417272

0800d820 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	3b02      	subs	r3, #2
 800d82e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	695b      	ldr	r3, [r3, #20]
 800d834:	3b02      	subs	r3, #2
 800d836:	683a      	ldr	r2, [r7, #0]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d301      	bcc.n	800d840 <clust2sect+0x20>
 800d83c:	2300      	movs	r3, #0
 800d83e:	e008      	b.n	800d852 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	895b      	ldrh	r3, [r3, #10]
 800d844:	461a      	mov	r2, r3
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	fb03 f202 	mul.w	r2, r3, r2
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d850:	4413      	add	r3, r2
}
 800d852:	4618      	mov	r0, r3
 800d854:	370c      	adds	r7, #12
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr

0800d85e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b086      	sub	sp, #24
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d904      	bls.n	800d87e <get_fat+0x20>
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	695b      	ldr	r3, [r3, #20]
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d302      	bcc.n	800d884 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d87e:	2301      	movs	r3, #1
 800d880:	617b      	str	r3, [r7, #20]
 800d882:	e08f      	b.n	800d9a4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d884:	f04f 33ff 	mov.w	r3, #4294967295
 800d888:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	2b03      	cmp	r3, #3
 800d890:	d062      	beq.n	800d958 <get_fat+0xfa>
 800d892:	2b03      	cmp	r3, #3
 800d894:	dc7c      	bgt.n	800d990 <get_fat+0x132>
 800d896:	2b01      	cmp	r3, #1
 800d898:	d002      	beq.n	800d8a0 <get_fat+0x42>
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d042      	beq.n	800d924 <get_fat+0xc6>
 800d89e:	e077      	b.n	800d990 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	60fb      	str	r3, [r7, #12]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	085b      	lsrs	r3, r3, #1
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	6a1a      	ldr	r2, [r3, #32]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	0a5b      	lsrs	r3, r3, #9
 800d8b6:	4413      	add	r3, r2
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6938      	ldr	r0, [r7, #16]
 800d8bc:	f7ff ff14 	bl	800d6e8 <move_window>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d167      	bne.n	800d996 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	1c5a      	adds	r2, r3, #1
 800d8ca:	60fa      	str	r2, [r7, #12]
 800d8cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8d0:	693a      	ldr	r2, [r7, #16]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	6a1a      	ldr	r2, [r3, #32]
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	0a5b      	lsrs	r3, r3, #9
 800d8e2:	4413      	add	r3, r2
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6938      	ldr	r0, [r7, #16]
 800d8e8:	f7ff fefe 	bl	800d6e8 <move_window>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d153      	bne.n	800d99a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d900:	021b      	lsls	r3, r3, #8
 800d902:	461a      	mov	r2, r3
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	4313      	orrs	r3, r2
 800d908:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <get_fat+0xbc>
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	091b      	lsrs	r3, r3, #4
 800d918:	e002      	b.n	800d920 <get_fat+0xc2>
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d920:	617b      	str	r3, [r7, #20]
			break;
 800d922:	e03f      	b.n	800d9a4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	6a1a      	ldr	r2, [r3, #32]
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	0a1b      	lsrs	r3, r3, #8
 800d92c:	4413      	add	r3, r2
 800d92e:	4619      	mov	r1, r3
 800d930:	6938      	ldr	r0, [r7, #16]
 800d932:	f7ff fed9 	bl	800d6e8 <move_window>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d130      	bne.n	800d99e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	005b      	lsls	r3, r3, #1
 800d946:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d94a:	4413      	add	r3, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7ff fc1b 	bl	800d188 <ld_word>
 800d952:	4603      	mov	r3, r0
 800d954:	617b      	str	r3, [r7, #20]
			break;
 800d956:	e025      	b.n	800d9a4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	6a1a      	ldr	r2, [r3, #32]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	09db      	lsrs	r3, r3, #7
 800d960:	4413      	add	r3, r2
 800d962:	4619      	mov	r1, r3
 800d964:	6938      	ldr	r0, [r7, #16]
 800d966:	f7ff febf 	bl	800d6e8 <move_window>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d118      	bne.n	800d9a2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d97e:	4413      	add	r3, r2
 800d980:	4618      	mov	r0, r3
 800d982:	f7ff fc19 	bl	800d1b8 <ld_dword>
 800d986:	4603      	mov	r3, r0
 800d988:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d98c:	617b      	str	r3, [r7, #20]
			break;
 800d98e:	e009      	b.n	800d9a4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d990:	2301      	movs	r3, #1
 800d992:	617b      	str	r3, [r7, #20]
 800d994:	e006      	b.n	800d9a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d996:	bf00      	nop
 800d998:	e004      	b.n	800d9a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d99a:	bf00      	nop
 800d99c:	e002      	b.n	800d9a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d99e:	bf00      	nop
 800d9a0:	e000      	b.n	800d9a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d9a2:	bf00      	nop
		}
	}

	return val;
 800d9a4:	697b      	ldr	r3, [r7, #20]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3718      	adds	r7, #24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d9ae:	b590      	push	{r4, r7, lr}
 800d9b0:	b089      	sub	sp, #36	; 0x24
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	60f8      	str	r0, [r7, #12]
 800d9b6:	60b9      	str	r1, [r7, #8]
 800d9b8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d9ba:	2302      	movs	r3, #2
 800d9bc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	f240 80d9 	bls.w	800db78 <put_fat+0x1ca>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	f080 80d3 	bcs.w	800db78 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	f000 8096 	beq.w	800db08 <put_fat+0x15a>
 800d9dc:	2b03      	cmp	r3, #3
 800d9de:	f300 80cb 	bgt.w	800db78 <put_fat+0x1ca>
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d002      	beq.n	800d9ec <put_fat+0x3e>
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d06e      	beq.n	800dac8 <put_fat+0x11a>
 800d9ea:	e0c5      	b.n	800db78 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	61bb      	str	r3, [r7, #24]
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	085b      	lsrs	r3, r3, #1
 800d9f4:	69ba      	ldr	r2, [r7, #24]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6a1a      	ldr	r2, [r3, #32]
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	0a5b      	lsrs	r3, r3, #9
 800da02:	4413      	add	r3, r2
 800da04:	4619      	mov	r1, r3
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f7ff fe6e 	bl	800d6e8 <move_window>
 800da0c:	4603      	mov	r3, r0
 800da0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da10:	7ffb      	ldrb	r3, [r7, #31]
 800da12:	2b00      	cmp	r3, #0
 800da14:	f040 80a9 	bne.w	800db6a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	1c59      	adds	r1, r3, #1
 800da22:	61b9      	str	r1, [r7, #24]
 800da24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da28:	4413      	add	r3, r2
 800da2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00d      	beq.n	800da52 <put_fat+0xa4>
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	b25b      	sxtb	r3, r3
 800da3c:	f003 030f 	and.w	r3, r3, #15
 800da40:	b25a      	sxtb	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	b2db      	uxtb	r3, r3
 800da46:	011b      	lsls	r3, r3, #4
 800da48:	b25b      	sxtb	r3, r3
 800da4a:	4313      	orrs	r3, r2
 800da4c:	b25b      	sxtb	r3, r3
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	e001      	b.n	800da56 <put_fat+0xa8>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	b2db      	uxtb	r3, r3
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2201      	movs	r2, #1
 800da5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6a1a      	ldr	r2, [r3, #32]
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	0a5b      	lsrs	r3, r3, #9
 800da68:	4413      	add	r3, r2
 800da6a:	4619      	mov	r1, r3
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f7ff fe3b 	bl	800d6e8 <move_window>
 800da72:	4603      	mov	r3, r0
 800da74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da76:	7ffb      	ldrb	r3, [r7, #31]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d178      	bne.n	800db6e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da88:	4413      	add	r3, r2
 800da8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	f003 0301 	and.w	r3, r3, #1
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <put_fat+0xf0>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	091b      	lsrs	r3, r3, #4
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	e00e      	b.n	800dabc <put_fat+0x10e>
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	b25b      	sxtb	r3, r3
 800daa4:	f023 030f 	bic.w	r3, r3, #15
 800daa8:	b25a      	sxtb	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	0a1b      	lsrs	r3, r3, #8
 800daae:	b25b      	sxtb	r3, r3
 800dab0:	f003 030f 	and.w	r3, r3, #15
 800dab4:	b25b      	sxtb	r3, r3
 800dab6:	4313      	orrs	r3, r2
 800dab8:	b25b      	sxtb	r3, r3
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	697a      	ldr	r2, [r7, #20]
 800dabe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2201      	movs	r2, #1
 800dac4:	70da      	strb	r2, [r3, #3]
			break;
 800dac6:	e057      	b.n	800db78 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6a1a      	ldr	r2, [r3, #32]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	0a1b      	lsrs	r3, r3, #8
 800dad0:	4413      	add	r3, r2
 800dad2:	4619      	mov	r1, r3
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f7ff fe07 	bl	800d6e8 <move_window>
 800dada:	4603      	mov	r3, r0
 800dadc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dade:	7ffb      	ldrb	r3, [r7, #31]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d146      	bne.n	800db72 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	005b      	lsls	r3, r3, #1
 800daee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800daf2:	4413      	add	r3, r2
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	b292      	uxth	r2, r2
 800daf8:	4611      	mov	r1, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff fb7f 	bl	800d1fe <st_word>
			fs->wflag = 1;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	2201      	movs	r2, #1
 800db04:	70da      	strb	r2, [r3, #3]
			break;
 800db06:	e037      	b.n	800db78 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6a1a      	ldr	r2, [r3, #32]
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	09db      	lsrs	r3, r3, #7
 800db10:	4413      	add	r3, r2
 800db12:	4619      	mov	r1, r3
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff fde7 	bl	800d6e8 <move_window>
 800db1a:	4603      	mov	r3, r0
 800db1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db1e:	7ffb      	ldrb	r3, [r7, #31]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d128      	bne.n	800db76 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db38:	4413      	add	r3, r2
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7ff fb3c 	bl	800d1b8 <ld_dword>
 800db40:	4603      	mov	r3, r0
 800db42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800db46:	4323      	orrs	r3, r4
 800db48:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db58:	4413      	add	r3, r2
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7ff fb69 	bl	800d234 <st_dword>
			fs->wflag = 1;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2201      	movs	r2, #1
 800db66:	70da      	strb	r2, [r3, #3]
			break;
 800db68:	e006      	b.n	800db78 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800db6a:	bf00      	nop
 800db6c:	e004      	b.n	800db78 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800db6e:	bf00      	nop
 800db70:	e002      	b.n	800db78 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800db72:	bf00      	nop
 800db74:	e000      	b.n	800db78 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800db76:	bf00      	nop
		}
	}
	return res;
 800db78:	7ffb      	ldrb	r3, [r7, #31]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3724      	adds	r7, #36	; 0x24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd90      	pop	{r4, r7, pc}

0800db82 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b088      	sub	sp, #32
 800db86:	af00      	add	r7, sp, #0
 800db88:	60f8      	str	r0, [r7, #12]
 800db8a:	60b9      	str	r1, [r7, #8]
 800db8c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800db8e:	2300      	movs	r3, #0
 800db90:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d904      	bls.n	800dba8 <remove_chain+0x26>
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	695b      	ldr	r3, [r3, #20]
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d301      	bcc.n	800dbac <remove_chain+0x2a>
 800dba8:	2302      	movs	r3, #2
 800dbaa:	e04b      	b.n	800dc44 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00c      	beq.n	800dbcc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dbb2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb6:	6879      	ldr	r1, [r7, #4]
 800dbb8:	69b8      	ldr	r0, [r7, #24]
 800dbba:	f7ff fef8 	bl	800d9ae <put_fat>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dbc2:	7ffb      	ldrb	r3, [r7, #31]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <remove_chain+0x4a>
 800dbc8:	7ffb      	ldrb	r3, [r7, #31]
 800dbca:	e03b      	b.n	800dc44 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dbcc:	68b9      	ldr	r1, [r7, #8]
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f7ff fe45 	bl	800d85e <get_fat>
 800dbd4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d031      	beq.n	800dc40 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d101      	bne.n	800dbe6 <remove_chain+0x64>
 800dbe2:	2302      	movs	r3, #2
 800dbe4:	e02e      	b.n	800dc44 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbec:	d101      	bne.n	800dbf2 <remove_chain+0x70>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e028      	b.n	800dc44 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	68b9      	ldr	r1, [r7, #8]
 800dbf6:	69b8      	ldr	r0, [r7, #24]
 800dbf8:	f7ff fed9 	bl	800d9ae <put_fat>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dc00:	7ffb      	ldrb	r3, [r7, #31]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d001      	beq.n	800dc0a <remove_chain+0x88>
 800dc06:	7ffb      	ldrb	r3, [r7, #31]
 800dc08:	e01c      	b.n	800dc44 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	691a      	ldr	r2, [r3, #16]
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	3b02      	subs	r3, #2
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d20b      	bcs.n	800dc30 <remove_chain+0xae>
			fs->free_clst++;
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	691b      	ldr	r3, [r3, #16]
 800dc1c:	1c5a      	adds	r2, r3, #1
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	791b      	ldrb	r3, [r3, #4]
 800dc26:	f043 0301 	orr.w	r3, r3, #1
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	69bb      	ldr	r3, [r7, #24]
 800dc2e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d3c6      	bcc.n	800dbcc <remove_chain+0x4a>
 800dc3e:	e000      	b.n	800dc42 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dc40:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3720      	adds	r7, #32
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b088      	sub	sp, #32
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d10d      	bne.n	800dc7e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d004      	beq.n	800dc78 <create_chain+0x2c>
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	69ba      	ldr	r2, [r7, #24]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d31b      	bcc.n	800dcb0 <create_chain+0x64>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	61bb      	str	r3, [r7, #24]
 800dc7c:	e018      	b.n	800dcb0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dc7e:	6839      	ldr	r1, [r7, #0]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff fdec 	bl	800d85e <get_fat>
 800dc86:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d801      	bhi.n	800dc92 <create_chain+0x46>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e070      	b.n	800dd74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc98:	d101      	bne.n	800dc9e <create_chain+0x52>
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	e06a      	b.n	800dd74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d201      	bcs.n	800dcac <create_chain+0x60>
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	e063      	b.n	800dd74 <create_chain+0x128>
		scl = clst;
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	69fa      	ldr	r2, [r7, #28]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d307      	bcc.n	800dcd4 <create_chain+0x88>
				ncl = 2;
 800dcc4:	2302      	movs	r3, #2
 800dcc6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dcc8:	69fa      	ldr	r2, [r7, #28]
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d901      	bls.n	800dcd4 <create_chain+0x88>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e04f      	b.n	800dd74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dcd4:	69f9      	ldr	r1, [r7, #28]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f7ff fdc1 	bl	800d85e <get_fat>
 800dcdc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00e      	beq.n	800dd02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d003      	beq.n	800dcf2 <create_chain+0xa6>
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf0:	d101      	bne.n	800dcf6 <create_chain+0xaa>
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	e03e      	b.n	800dd74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dcf6:	69fa      	ldr	r2, [r7, #28]
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d1da      	bne.n	800dcb4 <create_chain+0x68>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	e038      	b.n	800dd74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dd02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dd04:	f04f 32ff 	mov.w	r2, #4294967295
 800dd08:	69f9      	ldr	r1, [r7, #28]
 800dd0a:	6938      	ldr	r0, [r7, #16]
 800dd0c:	f7ff fe4f 	bl	800d9ae <put_fat>
 800dd10:	4603      	mov	r3, r0
 800dd12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dd14:	7dfb      	ldrb	r3, [r7, #23]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d109      	bne.n	800dd2e <create_chain+0xe2>
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d006      	beq.n	800dd2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dd20:	69fa      	ldr	r2, [r7, #28]
 800dd22:	6839      	ldr	r1, [r7, #0]
 800dd24:	6938      	ldr	r0, [r7, #16]
 800dd26:	f7ff fe42 	bl	800d9ae <put_fat>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dd2e:	7dfb      	ldrb	r3, [r7, #23]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d116      	bne.n	800dd62 <create_chain+0x116>
		fs->last_clst = ncl;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	69fa      	ldr	r2, [r7, #28]
 800dd38:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	691a      	ldr	r2, [r3, #16]
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	695b      	ldr	r3, [r3, #20]
 800dd42:	3b02      	subs	r3, #2
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d804      	bhi.n	800dd52 <create_chain+0x106>
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	1e5a      	subs	r2, r3, #1
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	791b      	ldrb	r3, [r3, #4]
 800dd56:	f043 0301 	orr.w	r3, r3, #1
 800dd5a:	b2da      	uxtb	r2, r3
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	711a      	strb	r2, [r3, #4]
 800dd60:	e007      	b.n	800dd72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dd62:	7dfb      	ldrb	r3, [r7, #23]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d102      	bne.n	800dd6e <create_chain+0x122>
 800dd68:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6c:	e000      	b.n	800dd70 <create_chain+0x124>
 800dd6e:	2301      	movs	r3, #1
 800dd70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dd72:	69fb      	ldr	r3, [r7, #28]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3720      	adds	r7, #32
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b087      	sub	sp, #28
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd90:	3304      	adds	r3, #4
 800dd92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	0a5b      	lsrs	r3, r3, #9
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	8952      	ldrh	r2, [r2, #10]
 800dd9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dda0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	1d1a      	adds	r2, r3, #4
 800dda6:	613a      	str	r2, [r7, #16]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d101      	bne.n	800ddb6 <clmt_clust+0x3a>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	e010      	b.n	800ddd8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d307      	bcc.n	800ddce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ddbe:	697a      	ldr	r2, [r7, #20]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	617b      	str	r3, [r7, #20]
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	3304      	adds	r3, #4
 800ddca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ddcc:	e7e9      	b.n	800dda2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ddce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	4413      	add	r3, r2
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	371c      	adds	r7, #28
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b086      	sub	sp, #24
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ddfa:	d204      	bcs.n	800de06 <dir_sdi+0x22>
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	f003 031f 	and.w	r3, r3, #31
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <dir_sdi+0x26>
		return FR_INT_ERR;
 800de06:	2302      	movs	r3, #2
 800de08:	e063      	b.n	800ded2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	683a      	ldr	r2, [r7, #0]
 800de0e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d106      	bne.n	800de2a <dir_sdi+0x46>
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b02      	cmp	r3, #2
 800de22:	d902      	bls.n	800de2a <dir_sdi+0x46>
		clst = fs->dirbase;
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de28:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10c      	bne.n	800de4a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	095b      	lsrs	r3, r3, #5
 800de34:	693a      	ldr	r2, [r7, #16]
 800de36:	8912      	ldrh	r2, [r2, #8]
 800de38:	4293      	cmp	r3, r2
 800de3a:	d301      	bcc.n	800de40 <dir_sdi+0x5c>
 800de3c:	2302      	movs	r3, #2
 800de3e:	e048      	b.n	800ded2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	61da      	str	r2, [r3, #28]
 800de48:	e029      	b.n	800de9e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	895b      	ldrh	r3, [r3, #10]
 800de4e:	025b      	lsls	r3, r3, #9
 800de50:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de52:	e019      	b.n	800de88 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6979      	ldr	r1, [r7, #20]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff fd00 	bl	800d85e <get_fat>
 800de5e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de66:	d101      	bne.n	800de6c <dir_sdi+0x88>
 800de68:	2301      	movs	r3, #1
 800de6a:	e032      	b.n	800ded2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d904      	bls.n	800de7c <dir_sdi+0x98>
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	697a      	ldr	r2, [r7, #20]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d301      	bcc.n	800de80 <dir_sdi+0x9c>
 800de7c:	2302      	movs	r3, #2
 800de7e:	e028      	b.n	800ded2 <dir_sdi+0xee>
			ofs -= csz;
 800de80:	683a      	ldr	r2, [r7, #0]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	1ad3      	subs	r3, r2, r3
 800de86:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de88:	683a      	ldr	r2, [r7, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d2e1      	bcs.n	800de54 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800de90:	6979      	ldr	r1, [r7, #20]
 800de92:	6938      	ldr	r0, [r7, #16]
 800de94:	f7ff fcc4 	bl	800d820 <clust2sect>
 800de98:	4602      	mov	r2, r0
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	69db      	ldr	r3, [r3, #28]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d101      	bne.n	800deb0 <dir_sdi+0xcc>
 800deac:	2302      	movs	r3, #2
 800deae:	e010      	b.n	800ded2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	69da      	ldr	r2, [r3, #28]
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	0a5b      	lsrs	r3, r3, #9
 800deb8:	441a      	add	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deca:	441a      	add	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3718      	adds	r7, #24
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b086      	sub	sp, #24
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	695b      	ldr	r3, [r3, #20]
 800deee:	3320      	adds	r3, #32
 800def0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	69db      	ldr	r3, [r3, #28]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d003      	beq.n	800df02 <dir_next+0x28>
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df00:	d301      	bcc.n	800df06 <dir_next+0x2c>
 800df02:	2304      	movs	r3, #4
 800df04:	e0aa      	b.n	800e05c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f040 8098 	bne.w	800e042 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	69db      	ldr	r3, [r3, #28]
 800df16:	1c5a      	adds	r2, r3, #1
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10b      	bne.n	800df3c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	095b      	lsrs	r3, r3, #5
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	8912      	ldrh	r2, [r2, #8]
 800df2c:	4293      	cmp	r3, r2
 800df2e:	f0c0 8088 	bcc.w	800e042 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	61da      	str	r2, [r3, #28]
 800df38:	2304      	movs	r3, #4
 800df3a:	e08f      	b.n	800e05c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	0a5b      	lsrs	r3, r3, #9
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	8952      	ldrh	r2, [r2, #10]
 800df44:	3a01      	subs	r2, #1
 800df46:	4013      	ands	r3, r2
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d17a      	bne.n	800e042 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	699b      	ldr	r3, [r3, #24]
 800df52:	4619      	mov	r1, r3
 800df54:	4610      	mov	r0, r2
 800df56:	f7ff fc82 	bl	800d85e <get_fat>
 800df5a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d801      	bhi.n	800df66 <dir_next+0x8c>
 800df62:	2302      	movs	r3, #2
 800df64:	e07a      	b.n	800e05c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6c:	d101      	bne.n	800df72 <dir_next+0x98>
 800df6e:	2301      	movs	r3, #1
 800df70:	e074      	b.n	800e05c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	697a      	ldr	r2, [r7, #20]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d358      	bcc.n	800e02e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d104      	bne.n	800df8c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2200      	movs	r2, #0
 800df86:	61da      	str	r2, [r3, #28]
 800df88:	2304      	movs	r3, #4
 800df8a:	e067      	b.n	800e05c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	699b      	ldr	r3, [r3, #24]
 800df92:	4619      	mov	r1, r3
 800df94:	4610      	mov	r0, r2
 800df96:	f7ff fe59 	bl	800dc4c <create_chain>
 800df9a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d101      	bne.n	800dfa6 <dir_next+0xcc>
 800dfa2:	2307      	movs	r3, #7
 800dfa4:	e05a      	b.n	800e05c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d101      	bne.n	800dfb0 <dir_next+0xd6>
 800dfac:	2302      	movs	r3, #2
 800dfae:	e055      	b.n	800e05c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb6:	d101      	bne.n	800dfbc <dir_next+0xe2>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e04f      	b.n	800e05c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f7ff fb4f 	bl	800d660 <sync_window>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d001      	beq.n	800dfcc <dir_next+0xf2>
 800dfc8:	2301      	movs	r3, #1
 800dfca:	e047      	b.n	800e05c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	3330      	adds	r3, #48	; 0x30
 800dfd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7ff f979 	bl	800d2ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800dfdc:	2300      	movs	r3, #0
 800dfde:	613b      	str	r3, [r7, #16]
 800dfe0:	6979      	ldr	r1, [r7, #20]
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7ff fc1c 	bl	800d820 <clust2sect>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	62da      	str	r2, [r3, #44]	; 0x2c
 800dfee:	e012      	b.n	800e016 <dir_next+0x13c>
						fs->wflag = 1;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2201      	movs	r2, #1
 800dff4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f7ff fb32 	bl	800d660 <sync_window>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <dir_next+0x12c>
 800e002:	2301      	movs	r3, #1
 800e004:	e02a      	b.n	800e05c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	3301      	adds	r3, #1
 800e00a:	613b      	str	r3, [r7, #16]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	62da      	str	r2, [r3, #44]	; 0x2c
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	895b      	ldrh	r3, [r3, #10]
 800e01a:	461a      	mov	r2, r3
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	4293      	cmp	r3, r2
 800e020:	d3e6      	bcc.n	800dff0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	1ad2      	subs	r2, r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	697a      	ldr	r2, [r7, #20]
 800e032:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e034:	6979      	ldr	r1, [r7, #20]
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f7ff fbf2 	bl	800d820 <clust2sect>
 800e03c:	4602      	mov	r2, r0
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	68ba      	ldr	r2, [r7, #8]
 800e046:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e054:	441a      	add	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e074:	2100      	movs	r1, #0
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff feb4 	bl	800dde4 <dir_sdi>
 800e07c:	4603      	mov	r3, r0
 800e07e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e080:	7dfb      	ldrb	r3, [r7, #23]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d12b      	bne.n	800e0de <dir_alloc+0x7a>
		n = 0;
 800e086:	2300      	movs	r3, #0
 800e088:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	69db      	ldr	r3, [r3, #28]
 800e08e:	4619      	mov	r1, r3
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f7ff fb29 	bl	800d6e8 <move_window>
 800e096:	4603      	mov	r3, r0
 800e098:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e09a:	7dfb      	ldrb	r3, [r7, #23]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d11d      	bne.n	800e0dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a1b      	ldr	r3, [r3, #32]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	2be5      	cmp	r3, #229	; 0xe5
 800e0a8:	d004      	beq.n	800e0b4 <dir_alloc+0x50>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6a1b      	ldr	r3, [r3, #32]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d107      	bne.n	800e0c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	613b      	str	r3, [r7, #16]
 800e0ba:	693a      	ldr	r2, [r7, #16]
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d102      	bne.n	800e0c8 <dir_alloc+0x64>
 800e0c2:	e00c      	b.n	800e0de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e0c8:	2101      	movs	r1, #1
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7ff ff05 	bl	800deda <dir_next>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e0d4:	7dfb      	ldrb	r3, [r7, #23]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d0d7      	beq.n	800e08a <dir_alloc+0x26>
 800e0da:	e000      	b.n	800e0de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e0dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e0de:	7dfb      	ldrb	r3, [r7, #23]
 800e0e0:	2b04      	cmp	r3, #4
 800e0e2:	d101      	bne.n	800e0e8 <dir_alloc+0x84>
 800e0e4:	2307      	movs	r3, #7
 800e0e6:	75fb      	strb	r3, [r7, #23]
	return res;
 800e0e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3718      	adds	r7, #24
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
 800e0fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	331a      	adds	r3, #26
 800e100:	4618      	mov	r0, r3
 800e102:	f7ff f841 	bl	800d188 <ld_word>
 800e106:	4603      	mov	r3, r0
 800e108:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2b03      	cmp	r3, #3
 800e110:	d109      	bne.n	800e126 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	3314      	adds	r3, #20
 800e116:	4618      	mov	r0, r3
 800e118:	f7ff f836 	bl	800d188 <ld_word>
 800e11c:	4603      	mov	r3, r0
 800e11e:	041b      	lsls	r3, r3, #16
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	4313      	orrs	r3, r2
 800e124:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e126:	68fb      	ldr	r3, [r7, #12]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	331a      	adds	r3, #26
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	b292      	uxth	r2, r2
 800e144:	4611      	mov	r1, r2
 800e146:	4618      	mov	r0, r3
 800e148:	f7ff f859 	bl	800d1fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	2b03      	cmp	r3, #3
 800e152:	d109      	bne.n	800e168 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	f103 0214 	add.w	r2, r3, #20
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	0c1b      	lsrs	r3, r3, #16
 800e15e:	b29b      	uxth	r3, r3
 800e160:	4619      	mov	r1, r3
 800e162:	4610      	mov	r0, r2
 800e164:	f7ff f84b 	bl	800d1fe <st_word>
	}
}
 800e168:	bf00      	nop
 800e16a:	3710      	adds	r7, #16
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e17e:	2100      	movs	r1, #0
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7ff fe2f 	bl	800dde4 <dir_sdi>
 800e186:	4603      	mov	r3, r0
 800e188:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e18a:	7dfb      	ldrb	r3, [r7, #23]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <dir_find+0x24>
 800e190:	7dfb      	ldrb	r3, [r7, #23]
 800e192:	e03e      	b.n	800e212 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	69db      	ldr	r3, [r3, #28]
 800e198:	4619      	mov	r1, r3
 800e19a:	6938      	ldr	r0, [r7, #16]
 800e19c:	f7ff faa4 	bl	800d6e8 <move_window>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e1a4:	7dfb      	ldrb	r3, [r7, #23]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d12f      	bne.n	800e20a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6a1b      	ldr	r3, [r3, #32]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d102      	bne.n	800e1be <dir_find+0x4e>
 800e1b8:	2304      	movs	r3, #4
 800e1ba:	75fb      	strb	r3, [r7, #23]
 800e1bc:	e028      	b.n	800e210 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a1b      	ldr	r3, [r3, #32]
 800e1c2:	330b      	adds	r3, #11
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a1b      	ldr	r3, [r3, #32]
 800e1d4:	330b      	adds	r3, #11
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	f003 0308 	and.w	r3, r3, #8
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10a      	bne.n	800e1f6 <dir_find+0x86>
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a18      	ldr	r0, [r3, #32]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	3324      	adds	r3, #36	; 0x24
 800e1e8:	220b      	movs	r2, #11
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	f7ff f88a 	bl	800d304 <mem_cmp>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00b      	beq.n	800e20e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff fe6e 	bl	800deda <dir_next>
 800e1fe:	4603      	mov	r3, r0
 800e200:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e202:	7dfb      	ldrb	r3, [r7, #23]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d0c5      	beq.n	800e194 <dir_find+0x24>
 800e208:	e002      	b.n	800e210 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e20a:	bf00      	nop
 800e20c:	e000      	b.n	800e210 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e20e:	bf00      	nop

	return res;
 800e210:	7dfb      	ldrb	r3, [r7, #23]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3718      	adds	r7, #24
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e21a:	b580      	push	{r7, lr}
 800e21c:	b084      	sub	sp, #16
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e228:	2101      	movs	r1, #1
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff ff1a 	bl	800e064 <dir_alloc>
 800e230:	4603      	mov	r3, r0
 800e232:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e234:	7bfb      	ldrb	r3, [r7, #15]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d11c      	bne.n	800e274 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	69db      	ldr	r3, [r3, #28]
 800e23e:	4619      	mov	r1, r3
 800e240:	68b8      	ldr	r0, [r7, #8]
 800e242:	f7ff fa51 	bl	800d6e8 <move_window>
 800e246:	4603      	mov	r3, r0
 800e248:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e24a:	7bfb      	ldrb	r3, [r7, #15]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d111      	bne.n	800e274 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	2220      	movs	r2, #32
 800e256:	2100      	movs	r1, #0
 800e258:	4618      	mov	r0, r3
 800e25a:	f7ff f838 	bl	800d2ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a18      	ldr	r0, [r3, #32]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	3324      	adds	r3, #36	; 0x24
 800e266:	220b      	movs	r2, #11
 800e268:	4619      	mov	r1, r3
 800e26a:	f7ff f80f 	bl	800d28c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	2201      	movs	r2, #1
 800e272:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e274:	7bfb      	ldrb	r3, [r7, #15]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
	...

0800e280 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	60fb      	str	r3, [r7, #12]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3324      	adds	r3, #36	; 0x24
 800e294:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e296:	220b      	movs	r2, #11
 800e298:	2120      	movs	r1, #32
 800e29a:	68b8      	ldr	r0, [r7, #8]
 800e29c:	f7ff f817 	bl	800d2ce <mem_set>
	si = i = 0; ni = 8;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	613b      	str	r3, [r7, #16]
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	61fb      	str	r3, [r7, #28]
 800e2a8:	2308      	movs	r3, #8
 800e2aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	1c5a      	adds	r2, r3, #1
 800e2b0:	61fa      	str	r2, [r7, #28]
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e2ba:	7efb      	ldrb	r3, [r7, #27]
 800e2bc:	2b20      	cmp	r3, #32
 800e2be:	d94e      	bls.n	800e35e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e2c0:	7efb      	ldrb	r3, [r7, #27]
 800e2c2:	2b2f      	cmp	r3, #47	; 0x2f
 800e2c4:	d006      	beq.n	800e2d4 <create_name+0x54>
 800e2c6:	7efb      	ldrb	r3, [r7, #27]
 800e2c8:	2b5c      	cmp	r3, #92	; 0x5c
 800e2ca:	d110      	bne.n	800e2ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e2cc:	e002      	b.n	800e2d4 <create_name+0x54>
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	61fb      	str	r3, [r7, #28]
 800e2d4:	68fa      	ldr	r2, [r7, #12]
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	4413      	add	r3, r2
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	2b2f      	cmp	r3, #47	; 0x2f
 800e2de:	d0f6      	beq.n	800e2ce <create_name+0x4e>
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	2b5c      	cmp	r3, #92	; 0x5c
 800e2ea:	d0f0      	beq.n	800e2ce <create_name+0x4e>
			break;
 800e2ec:	e038      	b.n	800e360 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e2ee:	7efb      	ldrb	r3, [r7, #27]
 800e2f0:	2b2e      	cmp	r3, #46	; 0x2e
 800e2f2:	d003      	beq.n	800e2fc <create_name+0x7c>
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d30c      	bcc.n	800e316 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	2b0b      	cmp	r3, #11
 800e300:	d002      	beq.n	800e308 <create_name+0x88>
 800e302:	7efb      	ldrb	r3, [r7, #27]
 800e304:	2b2e      	cmp	r3, #46	; 0x2e
 800e306:	d001      	beq.n	800e30c <create_name+0x8c>
 800e308:	2306      	movs	r3, #6
 800e30a:	e044      	b.n	800e396 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e30c:	2308      	movs	r3, #8
 800e30e:	613b      	str	r3, [r7, #16]
 800e310:	230b      	movs	r3, #11
 800e312:	617b      	str	r3, [r7, #20]
			continue;
 800e314:	e022      	b.n	800e35c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e316:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	da04      	bge.n	800e328 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e31e:	7efb      	ldrb	r3, [r7, #27]
 800e320:	3b80      	subs	r3, #128	; 0x80
 800e322:	4a1f      	ldr	r2, [pc, #124]	; (800e3a0 <create_name+0x120>)
 800e324:	5cd3      	ldrb	r3, [r2, r3]
 800e326:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e328:	7efb      	ldrb	r3, [r7, #27]
 800e32a:	4619      	mov	r1, r3
 800e32c:	481d      	ldr	r0, [pc, #116]	; (800e3a4 <create_name+0x124>)
 800e32e:	f7ff f810 	bl	800d352 <chk_chr>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d001      	beq.n	800e33c <create_name+0xbc>
 800e338:	2306      	movs	r3, #6
 800e33a:	e02c      	b.n	800e396 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e33c:	7efb      	ldrb	r3, [r7, #27]
 800e33e:	2b60      	cmp	r3, #96	; 0x60
 800e340:	d905      	bls.n	800e34e <create_name+0xce>
 800e342:	7efb      	ldrb	r3, [r7, #27]
 800e344:	2b7a      	cmp	r3, #122	; 0x7a
 800e346:	d802      	bhi.n	800e34e <create_name+0xce>
 800e348:	7efb      	ldrb	r3, [r7, #27]
 800e34a:	3b20      	subs	r3, #32
 800e34c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	1c5a      	adds	r2, r3, #1
 800e352:	613a      	str	r2, [r7, #16]
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	4413      	add	r3, r2
 800e358:	7efa      	ldrb	r2, [r7, #27]
 800e35a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e35c:	e7a6      	b.n	800e2ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e35e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	441a      	add	r2, r3
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d101      	bne.n	800e374 <create_name+0xf4>
 800e370:	2306      	movs	r3, #6
 800e372:	e010      	b.n	800e396 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	2be5      	cmp	r3, #229	; 0xe5
 800e37a:	d102      	bne.n	800e382 <create_name+0x102>
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2205      	movs	r2, #5
 800e380:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e382:	7efb      	ldrb	r3, [r7, #27]
 800e384:	2b20      	cmp	r3, #32
 800e386:	d801      	bhi.n	800e38c <create_name+0x10c>
 800e388:	2204      	movs	r2, #4
 800e38a:	e000      	b.n	800e38e <create_name+0x10e>
 800e38c:	2200      	movs	r2, #0
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	330b      	adds	r3, #11
 800e392:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e394:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e396:	4618      	mov	r0, r3
 800e398:	3720      	adds	r7, #32
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	0801527c 	.word	0x0801527c
 800e3a4:	0801519c 	.word	0x0801519c

0800e3a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e3bc:	e002      	b.n	800e3c4 <follow_path+0x1c>
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	603b      	str	r3, [r7, #0]
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b2f      	cmp	r3, #47	; 0x2f
 800e3ca:	d0f8      	beq.n	800e3be <follow_path+0x16>
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	2b5c      	cmp	r3, #92	; 0x5c
 800e3d2:	d0f4      	beq.n	800e3be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	2b1f      	cmp	r3, #31
 800e3e0:	d80a      	bhi.n	800e3f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2280      	movs	r2, #128	; 0x80
 800e3e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff fcf9 	bl	800dde4 <dir_sdi>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	75fb      	strb	r3, [r7, #23]
 800e3f6:	e043      	b.n	800e480 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e3f8:	463b      	mov	r3, r7
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7ff ff3f 	bl	800e280 <create_name>
 800e402:	4603      	mov	r3, r0
 800e404:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e406:	7dfb      	ldrb	r3, [r7, #23]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d134      	bne.n	800e476 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7ff feaf 	bl	800e170 <dir_find>
 800e412:	4603      	mov	r3, r0
 800e414:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e41c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e41e:	7dfb      	ldrb	r3, [r7, #23]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00a      	beq.n	800e43a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e424:	7dfb      	ldrb	r3, [r7, #23]
 800e426:	2b04      	cmp	r3, #4
 800e428:	d127      	bne.n	800e47a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e42a:	7afb      	ldrb	r3, [r7, #11]
 800e42c:	f003 0304 	and.w	r3, r3, #4
 800e430:	2b00      	cmp	r3, #0
 800e432:	d122      	bne.n	800e47a <follow_path+0xd2>
 800e434:	2305      	movs	r3, #5
 800e436:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e438:	e01f      	b.n	800e47a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e43a:	7afb      	ldrb	r3, [r7, #11]
 800e43c:	f003 0304 	and.w	r3, r3, #4
 800e440:	2b00      	cmp	r3, #0
 800e442:	d11c      	bne.n	800e47e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	799b      	ldrb	r3, [r3, #6]
 800e448:	f003 0310 	and.w	r3, r3, #16
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d102      	bne.n	800e456 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e450:	2305      	movs	r3, #5
 800e452:	75fb      	strb	r3, [r7, #23]
 800e454:	e014      	b.n	800e480 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	695b      	ldr	r3, [r3, #20]
 800e460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e464:	4413      	add	r3, r2
 800e466:	4619      	mov	r1, r3
 800e468:	68f8      	ldr	r0, [r7, #12]
 800e46a:	f7ff fe42 	bl	800e0f2 <ld_clust>
 800e46e:	4602      	mov	r2, r0
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e474:	e7c0      	b.n	800e3f8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e476:	bf00      	nop
 800e478:	e002      	b.n	800e480 <follow_path+0xd8>
				break;
 800e47a:	bf00      	nop
 800e47c:	e000      	b.n	800e480 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e47e:	bf00      	nop
			}
		}
	}

	return res;
 800e480:	7dfb      	ldrb	r3, [r7, #23]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3718      	adds	r7, #24
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e48a:	b480      	push	{r7}
 800e48c:	b087      	sub	sp, #28
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e492:	f04f 33ff 	mov.w	r3, #4294967295
 800e496:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d031      	beq.n	800e504 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	617b      	str	r3, [r7, #20]
 800e4a6:	e002      	b.n	800e4ae <get_ldnumber+0x24>
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	617b      	str	r3, [r7, #20]
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	2b20      	cmp	r3, #32
 800e4b4:	d903      	bls.n	800e4be <get_ldnumber+0x34>
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b3a      	cmp	r3, #58	; 0x3a
 800e4bc:	d1f4      	bne.n	800e4a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	2b3a      	cmp	r3, #58	; 0x3a
 800e4c4:	d11c      	bne.n	800e500 <get_ldnumber+0x76>
			tp = *path;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	60fa      	str	r2, [r7, #12]
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	3b30      	subs	r3, #48	; 0x30
 800e4d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	2b09      	cmp	r3, #9
 800e4dc:	d80e      	bhi.n	800e4fc <get_ldnumber+0x72>
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d10a      	bne.n	800e4fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d107      	bne.n	800e4fc <get_ldnumber+0x72>
					vol = (int)i;
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	617b      	str	r3, [r7, #20]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	697a      	ldr	r2, [r7, #20]
 800e4fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	e002      	b.n	800e506 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e500:	2300      	movs	r3, #0
 800e502:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e504:	693b      	ldr	r3, [r7, #16]
}
 800e506:	4618      	mov	r0, r3
 800e508:	371c      	adds	r7, #28
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr
	...

0800e514 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	70da      	strb	r2, [r3, #3]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f04f 32ff 	mov.w	r2, #4294967295
 800e52a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e52c:	6839      	ldr	r1, [r7, #0]
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7ff f8da 	bl	800d6e8 <move_window>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <check_fs+0x2a>
 800e53a:	2304      	movs	r3, #4
 800e53c:	e038      	b.n	800e5b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	3330      	adds	r3, #48	; 0x30
 800e542:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e546:	4618      	mov	r0, r3
 800e548:	f7fe fe1e 	bl	800d188 <ld_word>
 800e54c:	4603      	mov	r3, r0
 800e54e:	461a      	mov	r2, r3
 800e550:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e554:	429a      	cmp	r2, r3
 800e556:	d001      	beq.n	800e55c <check_fs+0x48>
 800e558:	2303      	movs	r3, #3
 800e55a:	e029      	b.n	800e5b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e562:	2be9      	cmp	r3, #233	; 0xe9
 800e564:	d009      	beq.n	800e57a <check_fs+0x66>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e56c:	2beb      	cmp	r3, #235	; 0xeb
 800e56e:	d11e      	bne.n	800e5ae <check_fs+0x9a>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e576:	2b90      	cmp	r3, #144	; 0x90
 800e578:	d119      	bne.n	800e5ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	3330      	adds	r3, #48	; 0x30
 800e57e:	3336      	adds	r3, #54	; 0x36
 800e580:	4618      	mov	r0, r3
 800e582:	f7fe fe19 	bl	800d1b8 <ld_dword>
 800e586:	4603      	mov	r3, r0
 800e588:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e58c:	4a0a      	ldr	r2, [pc, #40]	; (800e5b8 <check_fs+0xa4>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d101      	bne.n	800e596 <check_fs+0x82>
 800e592:	2300      	movs	r3, #0
 800e594:	e00c      	b.n	800e5b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	3330      	adds	r3, #48	; 0x30
 800e59a:	3352      	adds	r3, #82	; 0x52
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fe fe0b 	bl	800d1b8 <ld_dword>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	4a05      	ldr	r2, [pc, #20]	; (800e5bc <check_fs+0xa8>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d101      	bne.n	800e5ae <check_fs+0x9a>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	e000      	b.n	800e5b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e5ae:	2302      	movs	r3, #2
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	00544146 	.word	0x00544146
 800e5bc:	33544146 	.word	0x33544146

0800e5c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b096      	sub	sp, #88	; 0x58
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e5d4:	68f8      	ldr	r0, [r7, #12]
 800e5d6:	f7ff ff58 	bl	800e48a <get_ldnumber>
 800e5da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	da01      	bge.n	800e5e6 <find_volume+0x26>
 800e5e2:	230b      	movs	r3, #11
 800e5e4:	e22d      	b.n	800ea42 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e5e6:	4aa1      	ldr	r2, [pc, #644]	; (800e86c <find_volume+0x2ac>)
 800e5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e5ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d101      	bne.n	800e5fa <find_volume+0x3a>
 800e5f6:	230c      	movs	r3, #12
 800e5f8:	e223      	b.n	800ea42 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	f023 0301 	bic.w	r3, r3, #1
 800e606:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d01a      	beq.n	800e646 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	785b      	ldrb	r3, [r3, #1]
 800e614:	4618      	mov	r0, r3
 800e616:	f7fe fd19 	bl	800d04c <disk_status>
 800e61a:	4603      	mov	r3, r0
 800e61c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e620:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e624:	f003 0301 	and.w	r3, r3, #1
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d10c      	bne.n	800e646 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e62c:	79fb      	ldrb	r3, [r7, #7]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d007      	beq.n	800e642 <find_volume+0x82>
 800e632:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e636:	f003 0304 	and.w	r3, r3, #4
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d001      	beq.n	800e642 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e63e:	230a      	movs	r3, #10
 800e640:	e1ff      	b.n	800ea42 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800e642:	2300      	movs	r3, #0
 800e644:	e1fd      	b.n	800ea42 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	2200      	movs	r2, #0
 800e64a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e652:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e656:	785b      	ldrb	r3, [r3, #1]
 800e658:	4618      	mov	r0, r3
 800e65a:	f7fe fd11 	bl	800d080 <disk_initialize>
 800e65e:	4603      	mov	r3, r0
 800e660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e668:	f003 0301 	and.w	r3, r3, #1
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d001      	beq.n	800e674 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e670:	2303      	movs	r3, #3
 800e672:	e1e6      	b.n	800ea42 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d007      	beq.n	800e68a <find_volume+0xca>
 800e67a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e67e:	f003 0304 	and.w	r3, r3, #4
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e686:	230a      	movs	r3, #10
 800e688:	e1db      	b.n	800ea42 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e68e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e690:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e692:	f7ff ff3f 	bl	800e514 <check_fs>
 800e696:	4603      	mov	r3, r0
 800e698:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e69c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6a0:	2b02      	cmp	r3, #2
 800e6a2:	d149      	bne.n	800e738 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	643b      	str	r3, [r7, #64]	; 0x40
 800e6a8:	e01e      	b.n	800e6e8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6b2:	011b      	lsls	r3, r3, #4
 800e6b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e6b8:	4413      	add	r3, r2
 800e6ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6be:	3304      	adds	r3, #4
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d006      	beq.n	800e6d4 <find_volume+0x114>
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	3308      	adds	r3, #8
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fe fd74 	bl	800d1b8 <ld_dword>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	e000      	b.n	800e6d6 <find_volume+0x116>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	3358      	adds	r3, #88	; 0x58
 800e6dc:	443b      	add	r3, r7
 800e6de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	643b      	str	r3, [r7, #64]	; 0x40
 800e6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ea:	2b03      	cmp	r3, #3
 800e6ec:	d9dd      	bls.n	800e6aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d002      	beq.n	800e6fe <find_volume+0x13e>
 800e6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6fa:	3b01      	subs	r3, #1
 800e6fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	3358      	adds	r3, #88	; 0x58
 800e704:	443b      	add	r3, r7
 800e706:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e70a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e70c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d005      	beq.n	800e71e <find_volume+0x15e>
 800e712:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e716:	f7ff fefd 	bl	800e514 <check_fs>
 800e71a:	4603      	mov	r3, r0
 800e71c:	e000      	b.n	800e720 <find_volume+0x160>
 800e71e:	2303      	movs	r3, #3
 800e720:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d905      	bls.n	800e738 <find_volume+0x178>
 800e72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e72e:	3301      	adds	r3, #1
 800e730:	643b      	str	r3, [r7, #64]	; 0x40
 800e732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e734:	2b03      	cmp	r3, #3
 800e736:	d9e2      	bls.n	800e6fe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e738:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e73c:	2b04      	cmp	r3, #4
 800e73e:	d101      	bne.n	800e744 <find_volume+0x184>
 800e740:	2301      	movs	r3, #1
 800e742:	e17e      	b.n	800ea42 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d901      	bls.n	800e750 <find_volume+0x190>
 800e74c:	230d      	movs	r3, #13
 800e74e:	e178      	b.n	800ea42 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e752:	3330      	adds	r3, #48	; 0x30
 800e754:	330b      	adds	r3, #11
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe fd16 	bl	800d188 <ld_word>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e762:	d001      	beq.n	800e768 <find_volume+0x1a8>
 800e764:	230d      	movs	r3, #13
 800e766:	e16c      	b.n	800ea42 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76a:	3330      	adds	r3, #48	; 0x30
 800e76c:	3316      	adds	r3, #22
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe fd0a 	bl	800d188 <ld_word>
 800e774:	4603      	mov	r3, r0
 800e776:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d106      	bne.n	800e78c <find_volume+0x1cc>
 800e77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e780:	3330      	adds	r3, #48	; 0x30
 800e782:	3324      	adds	r3, #36	; 0x24
 800e784:	4618      	mov	r0, r3
 800e786:	f7fe fd17 	bl	800d1b8 <ld_dword>
 800e78a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e790:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e794:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79e:	789b      	ldrb	r3, [r3, #2]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d005      	beq.n	800e7b0 <find_volume+0x1f0>
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a6:	789b      	ldrb	r3, [r3, #2]
 800e7a8:	2b02      	cmp	r3, #2
 800e7aa:	d001      	beq.n	800e7b0 <find_volume+0x1f0>
 800e7ac:	230d      	movs	r3, #13
 800e7ae:	e148      	b.n	800ea42 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b2:	789b      	ldrb	r3, [r3, #2]
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7b8:	fb02 f303 	mul.w	r3, r2, r3
 800e7bc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7cc:	895b      	ldrh	r3, [r3, #10]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d008      	beq.n	800e7e4 <find_volume+0x224>
 800e7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d4:	895b      	ldrh	r3, [r3, #10]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7da:	895b      	ldrh	r3, [r3, #10]
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	4013      	ands	r3, r2
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d001      	beq.n	800e7e8 <find_volume+0x228>
 800e7e4:	230d      	movs	r3, #13
 800e7e6:	e12c      	b.n	800ea42 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ea:	3330      	adds	r3, #48	; 0x30
 800e7ec:	3311      	adds	r3, #17
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fe fcca 	bl	800d188 <ld_word>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fe:	891b      	ldrh	r3, [r3, #8]
 800e800:	f003 030f 	and.w	r3, r3, #15
 800e804:	b29b      	uxth	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d001      	beq.n	800e80e <find_volume+0x24e>
 800e80a:	230d      	movs	r3, #13
 800e80c:	e119      	b.n	800ea42 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e810:	3330      	adds	r3, #48	; 0x30
 800e812:	3313      	adds	r3, #19
 800e814:	4618      	mov	r0, r3
 800e816:	f7fe fcb7 	bl	800d188 <ld_word>
 800e81a:	4603      	mov	r3, r0
 800e81c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e81e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e820:	2b00      	cmp	r3, #0
 800e822:	d106      	bne.n	800e832 <find_volume+0x272>
 800e824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e826:	3330      	adds	r3, #48	; 0x30
 800e828:	3320      	adds	r3, #32
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7fe fcc4 	bl	800d1b8 <ld_dword>
 800e830:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e834:	3330      	adds	r3, #48	; 0x30
 800e836:	330e      	adds	r3, #14
 800e838:	4618      	mov	r0, r3
 800e83a:	f7fe fca5 	bl	800d188 <ld_word>
 800e83e:	4603      	mov	r3, r0
 800e840:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e842:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e844:	2b00      	cmp	r3, #0
 800e846:	d101      	bne.n	800e84c <find_volume+0x28c>
 800e848:	230d      	movs	r3, #13
 800e84a:	e0fa      	b.n	800ea42 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e84c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e84e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e850:	4413      	add	r3, r2
 800e852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e854:	8912      	ldrh	r2, [r2, #8]
 800e856:	0912      	lsrs	r2, r2, #4
 800e858:	b292      	uxth	r2, r2
 800e85a:	4413      	add	r3, r2
 800e85c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e85e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	429a      	cmp	r2, r3
 800e864:	d204      	bcs.n	800e870 <find_volume+0x2b0>
 800e866:	230d      	movs	r3, #13
 800e868:	e0eb      	b.n	800ea42 <find_volume+0x482>
 800e86a:	bf00      	nop
 800e86c:	2000a774 	.word	0x2000a774
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e878:	8952      	ldrh	r2, [r2, #10]
 800e87a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e87e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <find_volume+0x2ca>
 800e886:	230d      	movs	r3, #13
 800e888:	e0db      	b.n	800ea42 <find_volume+0x482>
		fmt = FS_FAT32;
 800e88a:	2303      	movs	r3, #3
 800e88c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e896:	4293      	cmp	r3, r2
 800e898:	d802      	bhi.n	800e8a0 <find_volume+0x2e0>
 800e89a:	2302      	movs	r3, #2
 800e89c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d802      	bhi.n	800e8b0 <find_volume+0x2f0>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	1c9a      	adds	r2, r3, #2
 800e8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8bc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e8be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c2:	441a      	add	r2, r3
 800e8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e8c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	441a      	add	r2, r3
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e8d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8d6:	2b03      	cmp	r3, #3
 800e8d8:	d11e      	bne.n	800e918 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8dc:	3330      	adds	r3, #48	; 0x30
 800e8de:	332a      	adds	r3, #42	; 0x2a
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fe fc51 	bl	800d188 <ld_word>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <find_volume+0x330>
 800e8ec:	230d      	movs	r3, #13
 800e8ee:	e0a8      	b.n	800ea42 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f2:	891b      	ldrh	r3, [r3, #8]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <find_volume+0x33c>
 800e8f8:	230d      	movs	r3, #13
 800e8fa:	e0a2      	b.n	800ea42 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	3330      	adds	r3, #48	; 0x30
 800e900:	332c      	adds	r3, #44	; 0x2c
 800e902:	4618      	mov	r0, r3
 800e904:	f7fe fc58 	bl	800d1b8 <ld_dword>
 800e908:	4602      	mov	r2, r0
 800e90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e910:	695b      	ldr	r3, [r3, #20]
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	647b      	str	r3, [r7, #68]	; 0x44
 800e916:	e01f      	b.n	800e958 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e91a:	891b      	ldrh	r3, [r3, #8]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d101      	bne.n	800e924 <find_volume+0x364>
 800e920:	230d      	movs	r3, #13
 800e922:	e08e      	b.n	800ea42 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	6a1a      	ldr	r2, [r3, #32]
 800e928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e92a:	441a      	add	r2, r3
 800e92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e934:	2b02      	cmp	r3, #2
 800e936:	d103      	bne.n	800e940 <find_volume+0x380>
 800e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93a:	695b      	ldr	r3, [r3, #20]
 800e93c:	005b      	lsls	r3, r3, #1
 800e93e:	e00a      	b.n	800e956 <find_volume+0x396>
 800e940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e942:	695a      	ldr	r2, [r3, #20]
 800e944:	4613      	mov	r3, r2
 800e946:	005b      	lsls	r3, r3, #1
 800e948:	4413      	add	r3, r2
 800e94a:	085a      	lsrs	r2, r3, #1
 800e94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94e:	695b      	ldr	r3, [r3, #20]
 800e950:	f003 0301 	and.w	r3, r3, #1
 800e954:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e956:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95a:	699a      	ldr	r2, [r3, #24]
 800e95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e95e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e962:	0a5b      	lsrs	r3, r3, #9
 800e964:	429a      	cmp	r2, r3
 800e966:	d201      	bcs.n	800e96c <find_volume+0x3ac>
 800e968:	230d      	movs	r3, #13
 800e96a:	e06a      	b.n	800ea42 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	f04f 32ff 	mov.w	r2, #4294967295
 800e972:	611a      	str	r2, [r3, #16]
 800e974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e976:	691a      	ldr	r2, [r3, #16]
 800e978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97e:	2280      	movs	r2, #128	; 0x80
 800e980:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e982:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e986:	2b03      	cmp	r3, #3
 800e988:	d149      	bne.n	800ea1e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98c:	3330      	adds	r3, #48	; 0x30
 800e98e:	3330      	adds	r3, #48	; 0x30
 800e990:	4618      	mov	r0, r3
 800e992:	f7fe fbf9 	bl	800d188 <ld_word>
 800e996:	4603      	mov	r3, r0
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d140      	bne.n	800ea1e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e99c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e99e:	3301      	adds	r3, #1
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e9a4:	f7fe fea0 	bl	800d6e8 <move_window>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d137      	bne.n	800ea1e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b6:	3330      	adds	r3, #48	; 0x30
 800e9b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fe fbe3 	bl	800d188 <ld_word>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d127      	bne.n	800ea1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d0:	3330      	adds	r3, #48	; 0x30
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fe fbf0 	bl	800d1b8 <ld_dword>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	4a1c      	ldr	r2, [pc, #112]	; (800ea4c <find_volume+0x48c>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d11e      	bne.n	800ea1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	3330      	adds	r3, #48	; 0x30
 800e9e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fe fbe5 	bl	800d1b8 <ld_dword>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	4a17      	ldr	r2, [pc, #92]	; (800ea50 <find_volume+0x490>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d113      	bne.n	800ea1e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	3330      	adds	r3, #48	; 0x30
 800e9fa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fe fbda 	bl	800d1b8 <ld_dword>
 800ea04:	4602      	mov	r2, r0
 800ea06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea08:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ea0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0c:	3330      	adds	r3, #48	; 0x30
 800ea0e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fe fbd0 	bl	800d1b8 <ld_dword>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ea1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea20:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ea24:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ea26:	4b0b      	ldr	r3, [pc, #44]	; (800ea54 <find_volume+0x494>)
 800ea28:	881b      	ldrh	r3, [r3, #0]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	4b09      	ldr	r3, [pc, #36]	; (800ea54 <find_volume+0x494>)
 800ea30:	801a      	strh	r2, [r3, #0]
 800ea32:	4b08      	ldr	r3, [pc, #32]	; (800ea54 <find_volume+0x494>)
 800ea34:	881a      	ldrh	r2, [r3, #0]
 800ea36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea38:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ea3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea3c:	f7fe fdec 	bl	800d618 <clear_lock>
#endif
	return FR_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3758      	adds	r7, #88	; 0x58
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	41615252 	.word	0x41615252
 800ea50:	61417272 	.word	0x61417272
 800ea54:	2000a778 	.word	0x2000a778

0800ea58 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ea62:	2309      	movs	r3, #9
 800ea64:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d01c      	beq.n	800eaa6 <validate+0x4e>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d018      	beq.n	800eaa6 <validate+0x4e>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d013      	beq.n	800eaa6 <validate+0x4e>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	889a      	ldrh	r2, [r3, #4]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	88db      	ldrh	r3, [r3, #6]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d10c      	bne.n	800eaa6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	785b      	ldrb	r3, [r3, #1]
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fe fada 	bl	800d04c <disk_status>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	f003 0301 	and.w	r3, r3, #1
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d101      	bne.n	800eaa6 <validate+0x4e>
			res = FR_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d102      	bne.n	800eab2 <validate+0x5a>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	e000      	b.n	800eab4 <validate+0x5c>
 800eab2:	2300      	movs	r3, #0
 800eab4:	683a      	ldr	r2, [r7, #0]
 800eab6:	6013      	str	r3, [r2, #0]
	return res;
 800eab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
	...

0800eac4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b088      	sub	sp, #32
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	4613      	mov	r3, r2
 800ead0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ead6:	f107 0310 	add.w	r3, r7, #16
 800eada:	4618      	mov	r0, r3
 800eadc:	f7ff fcd5 	bl	800e48a <get_ldnumber>
 800eae0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	da01      	bge.n	800eaec <f_mount+0x28>
 800eae8:	230b      	movs	r3, #11
 800eaea:	e02b      	b.n	800eb44 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800eaec:	4a17      	ldr	r2, [pc, #92]	; (800eb4c <f_mount+0x88>)
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaf4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d005      	beq.n	800eb08 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800eafc:	69b8      	ldr	r0, [r7, #24]
 800eafe:	f7fe fd8b 	bl	800d618 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	2200      	movs	r2, #0
 800eb06:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d002      	beq.n	800eb14 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	490d      	ldr	r1, [pc, #52]	; (800eb4c <f_mount+0x88>)
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d002      	beq.n	800eb2a <f_mount+0x66>
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d001      	beq.n	800eb2e <f_mount+0x6a>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e00a      	b.n	800eb44 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800eb2e:	f107 010c 	add.w	r1, r7, #12
 800eb32:	f107 0308 	add.w	r3, r7, #8
 800eb36:	2200      	movs	r2, #0
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7ff fd41 	bl	800e5c0 <find_volume>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800eb42:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3720      	adds	r7, #32
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	2000a774 	.word	0x2000a774

0800eb50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b098      	sub	sp, #96	; 0x60
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d101      	bne.n	800eb68 <f_open+0x18>
 800eb64:	2309      	movs	r3, #9
 800eb66:	e1ad      	b.n	800eec4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb6e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800eb70:	79fa      	ldrb	r2, [r7, #7]
 800eb72:	f107 0110 	add.w	r1, r7, #16
 800eb76:	f107 0308 	add.w	r3, r7, #8
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7ff fd20 	bl	800e5c0 <find_volume>
 800eb80:	4603      	mov	r3, r0
 800eb82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800eb86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f040 8191 	bne.w	800eeb2 <f_open+0x362>
		dj.obj.fs = fs;
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	f107 0314 	add.w	r3, r7, #20
 800eb9a:	4611      	mov	r1, r2
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7ff fc03 	bl	800e3a8 <follow_path>
 800eba2:	4603      	mov	r3, r0
 800eba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800eba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d11a      	bne.n	800ebe6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ebb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ebb4:	b25b      	sxtb	r3, r3
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	da03      	bge.n	800ebc2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ebba:	2306      	movs	r3, #6
 800ebbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ebc0:	e011      	b.n	800ebe6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ebc2:	79fb      	ldrb	r3, [r7, #7]
 800ebc4:	f023 0301 	bic.w	r3, r3, #1
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	bf14      	ite	ne
 800ebcc:	2301      	movne	r3, #1
 800ebce:	2300      	moveq	r3, #0
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	f107 0314 	add.w	r3, r7, #20
 800ebd8:	4611      	mov	r1, r2
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7fe fbd4 	bl	800d388 <chk_lock>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ebe6:	79fb      	ldrb	r3, [r7, #7]
 800ebe8:	f003 031c 	and.w	r3, r3, #28
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d07f      	beq.n	800ecf0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ebf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d017      	beq.n	800ec28 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ebf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ebfc:	2b04      	cmp	r3, #4
 800ebfe:	d10e      	bne.n	800ec1e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ec00:	f7fe fc1e 	bl	800d440 <enq_lock>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d006      	beq.n	800ec18 <f_open+0xc8>
 800ec0a:	f107 0314 	add.w	r3, r7, #20
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff fb03 	bl	800e21a <dir_register>
 800ec14:	4603      	mov	r3, r0
 800ec16:	e000      	b.n	800ec1a <f_open+0xca>
 800ec18:	2312      	movs	r3, #18
 800ec1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ec1e:	79fb      	ldrb	r3, [r7, #7]
 800ec20:	f043 0308 	orr.w	r3, r3, #8
 800ec24:	71fb      	strb	r3, [r7, #7]
 800ec26:	e010      	b.n	800ec4a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ec28:	7ebb      	ldrb	r3, [r7, #26]
 800ec2a:	f003 0311 	and.w	r3, r3, #17
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d003      	beq.n	800ec3a <f_open+0xea>
					res = FR_DENIED;
 800ec32:	2307      	movs	r3, #7
 800ec34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ec38:	e007      	b.n	800ec4a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ec3a:	79fb      	ldrb	r3, [r7, #7]
 800ec3c:	f003 0304 	and.w	r3, r3, #4
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d002      	beq.n	800ec4a <f_open+0xfa>
 800ec44:	2308      	movs	r3, #8
 800ec46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ec4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d168      	bne.n	800ed24 <f_open+0x1d4>
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	f003 0308 	and.w	r3, r3, #8
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d063      	beq.n	800ed24 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ec5c:	f7fb ffc4 	bl	800abe8 <get_fattime>
 800ec60:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ec62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec64:	330e      	adds	r3, #14
 800ec66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7fe fae3 	bl	800d234 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ec6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec70:	3316      	adds	r3, #22
 800ec72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fe fadd 	bl	800d234 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ec7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7c:	330b      	adds	r3, #11
 800ec7e:	2220      	movs	r2, #32
 800ec80:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec86:	4611      	mov	r1, r2
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7ff fa32 	bl	800e0f2 <ld_clust>
 800ec8e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec94:	2200      	movs	r2, #0
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7ff fa4a 	bl	800e130 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ec9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9e:	331c      	adds	r3, #28
 800eca0:	2100      	movs	r1, #0
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe fac6 	bl	800d234 <st_dword>
					fs->wflag = 1;
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ecae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d037      	beq.n	800ed24 <f_open+0x1d4>
						dw = fs->winsect;
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ecba:	f107 0314 	add.w	r3, r7, #20
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fe ff5d 	bl	800db82 <remove_chain>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ecce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d126      	bne.n	800ed24 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fe fd04 	bl	800d6e8 <move_window>
 800ece0:	4603      	mov	r3, r0
 800ece2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecea:	3a01      	subs	r2, #1
 800ecec:	60da      	str	r2, [r3, #12]
 800ecee:	e019      	b.n	800ed24 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ecf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d115      	bne.n	800ed24 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ecf8:	7ebb      	ldrb	r3, [r7, #26]
 800ecfa:	f003 0310 	and.w	r3, r3, #16
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d003      	beq.n	800ed0a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ed02:	2304      	movs	r3, #4
 800ed04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ed08:	e00c      	b.n	800ed24 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ed0a:	79fb      	ldrb	r3, [r7, #7]
 800ed0c:	f003 0302 	and.w	r3, r3, #2
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d007      	beq.n	800ed24 <f_open+0x1d4>
 800ed14:	7ebb      	ldrb	r3, [r7, #26]
 800ed16:	f003 0301 	and.w	r3, r3, #1
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d002      	beq.n	800ed24 <f_open+0x1d4>
						res = FR_DENIED;
 800ed1e:	2307      	movs	r3, #7
 800ed20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ed24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d128      	bne.n	800ed7e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ed2c:	79fb      	ldrb	r3, [r7, #7]
 800ed2e:	f003 0308 	and.w	r3, r3, #8
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d003      	beq.n	800ed3e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ed36:	79fb      	ldrb	r3, [r7, #7]
 800ed38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed3c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ed46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ed4c:	79fb      	ldrb	r3, [r7, #7]
 800ed4e:	f023 0301 	bic.w	r3, r3, #1
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	bf14      	ite	ne
 800ed56:	2301      	movne	r3, #1
 800ed58:	2300      	moveq	r3, #0
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	f107 0314 	add.w	r3, r7, #20
 800ed62:	4611      	mov	r1, r2
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fe fb8d 	bl	800d484 <inc_lock>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	691b      	ldr	r3, [r3, #16]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d102      	bne.n	800ed7e <f_open+0x22e>
 800ed78:	2302      	movs	r3, #2
 800ed7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ed7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	f040 8095 	bne.w	800eeb2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed8c:	4611      	mov	r1, r2
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7ff f9af 	bl	800e0f2 <ld_clust>
 800ed94:	4602      	mov	r2, r0
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ed9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed9c:	331c      	adds	r3, #28
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fe fa0a 	bl	800d1b8 <ld_dword>
 800eda4:	4602      	mov	r2, r0
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2200      	movs	r2, #0
 800edae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800edb0:	693a      	ldr	r2, [r7, #16]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	88da      	ldrh	r2, [r3, #6]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	79fa      	ldrb	r2, [r7, #7]
 800edc2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2200      	movs	r2, #0
 800edc8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	2200      	movs	r2, #0
 800edce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	3330      	adds	r3, #48	; 0x30
 800edda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800edde:	2100      	movs	r1, #0
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7fe fa74 	bl	800d2ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ede6:	79fb      	ldrb	r3, [r7, #7]
 800ede8:	f003 0320 	and.w	r3, r3, #32
 800edec:	2b00      	cmp	r3, #0
 800edee:	d060      	beq.n	800eeb2 <f_open+0x362>
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d05c      	beq.n	800eeb2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	68da      	ldr	r2, [r3, #12]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	895b      	ldrh	r3, [r3, #10]
 800ee04:	025b      	lsls	r3, r3, #9
 800ee06:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	657b      	str	r3, [r7, #84]	; 0x54
 800ee14:	e016      	b.n	800ee44 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fe fd1f 	bl	800d85e <get_fat>
 800ee20:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ee22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d802      	bhi.n	800ee2e <f_open+0x2de>
 800ee28:	2302      	movs	r3, #2
 800ee2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ee2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee34:	d102      	bne.n	800ee3c <f_open+0x2ec>
 800ee36:	2301      	movs	r3, #1
 800ee38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee40:	1ad3      	subs	r3, r2, r3
 800ee42:	657b      	str	r3, [r7, #84]	; 0x54
 800ee44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d103      	bne.n	800ee54 <f_open+0x304>
 800ee4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ee4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d8e0      	bhi.n	800ee16 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ee58:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ee5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d127      	bne.n	800eeb2 <f_open+0x362>
 800ee62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d022      	beq.n	800eeb2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7fe fcd5 	bl	800d820 <clust2sect>
 800ee76:	6478      	str	r0, [r7, #68]	; 0x44
 800ee78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d103      	bne.n	800ee86 <f_open+0x336>
						res = FR_INT_ERR;
 800ee7e:	2302      	movs	r3, #2
 800ee80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ee84:	e015      	b.n	800eeb2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ee86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee88:	0a5a      	lsrs	r2, r3, #9
 800ee8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee8c:	441a      	add	r2, r3
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	7858      	ldrb	r0, [r3, #1]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	6a1a      	ldr	r2, [r3, #32]
 800eea0:	2301      	movs	r3, #1
 800eea2:	f7fe f913 	bl	800d0cc <disk_read>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <f_open+0x362>
 800eeac:	2301      	movs	r3, #1
 800eeae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eeb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d002      	beq.n	800eec0 <f_open+0x370>
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2200      	movs	r2, #0
 800eebe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3760      	adds	r7, #96	; 0x60
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b08c      	sub	sp, #48	; 0x30
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
 800eed8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	2200      	movs	r2, #0
 800eee2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f107 0210 	add.w	r2, r7, #16
 800eeea:	4611      	mov	r1, r2
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff fdb3 	bl	800ea58 <validate>
 800eef2:	4603      	mov	r3, r0
 800eef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d107      	bne.n	800ef10 <f_write+0x44>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	7d5b      	ldrb	r3, [r3, #21]
 800ef04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ef08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <f_write+0x4a>
 800ef10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef14:	e14b      	b.n	800f1ae <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	7d1b      	ldrb	r3, [r3, #20]
 800ef1a:	f003 0302 	and.w	r3, r3, #2
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d101      	bne.n	800ef26 <f_write+0x5a>
 800ef22:	2307      	movs	r3, #7
 800ef24:	e143      	b.n	800f1ae <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	699a      	ldr	r2, [r3, #24]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	441a      	add	r2, r3
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	699b      	ldr	r3, [r3, #24]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	f080 812d 	bcs.w	800f192 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	699b      	ldr	r3, [r3, #24]
 800ef3c:	43db      	mvns	r3, r3
 800ef3e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ef40:	e127      	b.n	800f192 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	699b      	ldr	r3, [r3, #24]
 800ef46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f040 80e3 	bne.w	800f116 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	699b      	ldr	r3, [r3, #24]
 800ef54:	0a5b      	lsrs	r3, r3, #9
 800ef56:	693a      	ldr	r2, [r7, #16]
 800ef58:	8952      	ldrh	r2, [r2, #10]
 800ef5a:	3a01      	subs	r2, #1
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d143      	bne.n	800efee <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	699b      	ldr	r3, [r3, #24]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d10c      	bne.n	800ef88 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ef74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d11a      	bne.n	800efb0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fe fe64 	bl	800dc4c <create_chain>
 800ef84:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef86:	e013      	b.n	800efb0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d007      	beq.n	800efa0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	4619      	mov	r1, r3
 800ef96:	68f8      	ldr	r0, [r7, #12]
 800ef98:	f7fe fef0 	bl	800dd7c <clmt_clust>
 800ef9c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef9e:	e007      	b.n	800efb0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	69db      	ldr	r3, [r3, #28]
 800efa6:	4619      	mov	r1, r3
 800efa8:	4610      	mov	r0, r2
 800efaa:	f7fe fe4f 	bl	800dc4c <create_chain>
 800efae:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800efb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f000 80f2 	beq.w	800f19c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800efb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d104      	bne.n	800efc8 <f_write+0xfc>
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2202      	movs	r2, #2
 800efc2:	755a      	strb	r2, [r3, #21]
 800efc4:	2302      	movs	r3, #2
 800efc6:	e0f2      	b.n	800f1ae <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efce:	d104      	bne.n	800efda <f_write+0x10e>
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2201      	movs	r2, #1
 800efd4:	755a      	strb	r2, [r3, #21]
 800efd6:	2301      	movs	r3, #1
 800efd8:	e0e9      	b.n	800f1ae <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efde:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d102      	bne.n	800efee <f_write+0x122>
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	7d1b      	ldrb	r3, [r3, #20]
 800eff2:	b25b      	sxtb	r3, r3
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	da18      	bge.n	800f02a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	7858      	ldrb	r0, [r3, #1]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	6a1a      	ldr	r2, [r3, #32]
 800f006:	2301      	movs	r3, #1
 800f008:	f7fe f880 	bl	800d10c <disk_write>
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d004      	beq.n	800f01c <f_write+0x150>
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2201      	movs	r2, #1
 800f016:	755a      	strb	r2, [r3, #21]
 800f018:	2301      	movs	r3, #1
 800f01a:	e0c8      	b.n	800f1ae <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	7d1b      	ldrb	r3, [r3, #20]
 800f020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f024:	b2da      	uxtb	r2, r3
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f02a:	693a      	ldr	r2, [r7, #16]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	69db      	ldr	r3, [r3, #28]
 800f030:	4619      	mov	r1, r3
 800f032:	4610      	mov	r0, r2
 800f034:	f7fe fbf4 	bl	800d820 <clust2sect>
 800f038:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d104      	bne.n	800f04a <f_write+0x17e>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2202      	movs	r2, #2
 800f044:	755a      	strb	r2, [r3, #21]
 800f046:	2302      	movs	r3, #2
 800f048:	e0b1      	b.n	800f1ae <f_write+0x2e2>
			sect += csect;
 800f04a:	697a      	ldr	r2, [r7, #20]
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	4413      	add	r3, r2
 800f050:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	0a5b      	lsrs	r3, r3, #9
 800f056:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f058:	6a3b      	ldr	r3, [r7, #32]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d03c      	beq.n	800f0d8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f05e:	69ba      	ldr	r2, [r7, #24]
 800f060:	6a3b      	ldr	r3, [r7, #32]
 800f062:	4413      	add	r3, r2
 800f064:	693a      	ldr	r2, [r7, #16]
 800f066:	8952      	ldrh	r2, [r2, #10]
 800f068:	4293      	cmp	r3, r2
 800f06a:	d905      	bls.n	800f078 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	895b      	ldrh	r3, [r3, #10]
 800f070:	461a      	mov	r2, r3
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	7858      	ldrb	r0, [r3, #1]
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	69f9      	ldr	r1, [r7, #28]
 800f082:	f7fe f843 	bl	800d10c <disk_write>
 800f086:	4603      	mov	r3, r0
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d004      	beq.n	800f096 <f_write+0x1ca>
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2201      	movs	r2, #1
 800f090:	755a      	strb	r2, [r3, #21]
 800f092:	2301      	movs	r3, #1
 800f094:	e08b      	b.n	800f1ae <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6a1a      	ldr	r2, [r3, #32]
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	6a3a      	ldr	r2, [r7, #32]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d915      	bls.n	800f0d0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	6a1a      	ldr	r2, [r3, #32]
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	025b      	lsls	r3, r3, #9
 800f0b4:	69fa      	ldr	r2, [r7, #28]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f0bc:	4619      	mov	r1, r3
 800f0be:	f7fe f8e5 	bl	800d28c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	7d1b      	ldrb	r3, [r3, #20]
 800f0c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f0d0:	6a3b      	ldr	r3, [r7, #32]
 800f0d2:	025b      	lsls	r3, r3, #9
 800f0d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f0d6:	e03f      	b.n	800f158 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	6a1b      	ldr	r3, [r3, #32]
 800f0dc:	697a      	ldr	r2, [r7, #20]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d016      	beq.n	800f110 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	699a      	ldr	r2, [r3, #24]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d210      	bcs.n	800f110 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	7858      	ldrb	r0, [r3, #1]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	697a      	ldr	r2, [r7, #20]
 800f0fc:	f7fd ffe6 	bl	800d0cc <disk_read>
 800f100:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f102:	2b00      	cmp	r3, #0
 800f104:	d004      	beq.n	800f110 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2201      	movs	r2, #1
 800f10a:	755a      	strb	r2, [r3, #21]
 800f10c:	2301      	movs	r3, #1
 800f10e:	e04e      	b.n	800f1ae <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	697a      	ldr	r2, [r7, #20]
 800f114:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	699b      	ldr	r3, [r3, #24]
 800f11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f11e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f122:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d901      	bls.n	800f130 <f_write+0x264>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	699b      	ldr	r3, [r3, #24]
 800f13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f13e:	4413      	add	r3, r2
 800f140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f142:	69f9      	ldr	r1, [r7, #28]
 800f144:	4618      	mov	r0, r3
 800f146:	f7fe f8a1 	bl	800d28c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	7d1b      	ldrb	r3, [r3, #20]
 800f14e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f152:	b2da      	uxtb	r2, r3
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f158:	69fa      	ldr	r2, [r7, #28]
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	4413      	add	r3, r2
 800f15e:	61fb      	str	r3, [r7, #28]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	699a      	ldr	r2, [r3, #24]
 800f164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f166:	441a      	add	r2, r3
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	619a      	str	r2, [r3, #24]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	68da      	ldr	r2, [r3, #12]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	699b      	ldr	r3, [r3, #24]
 800f174:	429a      	cmp	r2, r3
 800f176:	bf38      	it	cc
 800f178:	461a      	movcc	r2, r3
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	60da      	str	r2, [r3, #12]
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f184:	441a      	add	r2, r3
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	601a      	str	r2, [r3, #0]
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18e:	1ad3      	subs	r3, r2, r3
 800f190:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	f47f aed4 	bne.w	800ef42 <f_write+0x76>
 800f19a:	e000      	b.n	800f19e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f19c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	7d1b      	ldrb	r3, [r3, #20]
 800f1a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1a6:	b2da      	uxtb	r2, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3730      	adds	r7, #48	; 0x30
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b086      	sub	sp, #24
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f107 0208 	add.w	r2, r7, #8
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7ff fc46 	bl	800ea58 <validate>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f1d0:	7dfb      	ldrb	r3, [r7, #23]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d168      	bne.n	800f2a8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	7d1b      	ldrb	r3, [r3, #20]
 800f1da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d062      	beq.n	800f2a8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	7d1b      	ldrb	r3, [r3, #20]
 800f1e6:	b25b      	sxtb	r3, r3
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	da15      	bge.n	800f218 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	7858      	ldrb	r0, [r3, #1]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6a1a      	ldr	r2, [r3, #32]
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	f7fd ff86 	bl	800d10c <disk_write>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d001      	beq.n	800f20a <f_sync+0x54>
 800f206:	2301      	movs	r3, #1
 800f208:	e04f      	b.n	800f2aa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	7d1b      	ldrb	r3, [r3, #20]
 800f20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f212:	b2da      	uxtb	r2, r3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f218:	f7fb fce6 	bl	800abe8 <get_fattime>
 800f21c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f224:	4619      	mov	r1, r3
 800f226:	4610      	mov	r0, r2
 800f228:	f7fe fa5e 	bl	800d6e8 <move_window>
 800f22c:	4603      	mov	r3, r0
 800f22e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f230:	7dfb      	ldrb	r3, [r7, #23]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d138      	bne.n	800f2a8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f23a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	330b      	adds	r3, #11
 800f240:	781a      	ldrb	r2, [r3, #0]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	330b      	adds	r3, #11
 800f246:	f042 0220 	orr.w	r2, r2, #32
 800f24a:	b2d2      	uxtb	r2, r2
 800f24c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6818      	ldr	r0, [r3, #0]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	689b      	ldr	r3, [r3, #8]
 800f256:	461a      	mov	r2, r3
 800f258:	68f9      	ldr	r1, [r7, #12]
 800f25a:	f7fe ff69 	bl	800e130 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f103 021c 	add.w	r2, r3, #28
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	4619      	mov	r1, r3
 800f26a:	4610      	mov	r0, r2
 800f26c:	f7fd ffe2 	bl	800d234 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	3316      	adds	r3, #22
 800f274:	6939      	ldr	r1, [r7, #16]
 800f276:	4618      	mov	r0, r3
 800f278:	f7fd ffdc 	bl	800d234 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	3312      	adds	r3, #18
 800f280:	2100      	movs	r1, #0
 800f282:	4618      	mov	r0, r3
 800f284:	f7fd ffbb 	bl	800d1fe <st_word>
					fs->wflag = 1;
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	2201      	movs	r2, #1
 800f28c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	4618      	mov	r0, r3
 800f292:	f7fe fa57 	bl	800d744 <sync_fs>
 800f296:	4603      	mov	r3, r0
 800f298:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	7d1b      	ldrb	r3, [r3, #20]
 800f29e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2a2:	b2da      	uxtb	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3718      	adds	r7, #24
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b084      	sub	sp, #16
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff ff7b 	bl	800f1b6 <f_sync>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f2c4:	7bfb      	ldrb	r3, [r7, #15]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d118      	bne.n	800f2fc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f107 0208 	add.w	r2, r7, #8
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7ff fbc0 	bl	800ea58 <validate>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f2dc:	7bfb      	ldrb	r3, [r7, #15]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d10c      	bne.n	800f2fc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	691b      	ldr	r3, [r3, #16]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe f95a 	bl	800d5a0 <dec_lock>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f2f0:	7bfb      	ldrb	r3, [r7, #15]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d102      	bne.n	800f2fc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3710      	adds	r7, #16
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
	...

0800f308 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f308:	b590      	push	{r4, r7, lr}
 800f30a:	b09d      	sub	sp, #116	; 0x74
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	607a      	str	r2, [r7, #4]
 800f312:	603b      	str	r3, [r7, #0]
 800f314:	460b      	mov	r3, r1
 800f316:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f318:	2301      	movs	r3, #1
 800f31a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f31c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f320:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f322:	f107 030c 	add.w	r3, r7, #12
 800f326:	4618      	mov	r0, r3
 800f328:	f7ff f8af 	bl	800e48a <get_ldnumber>
 800f32c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f330:	2b00      	cmp	r3, #0
 800f332:	da02      	bge.n	800f33a <f_mkfs+0x32>
 800f334:	230b      	movs	r3, #11
 800f336:	f000 bc0d 	b.w	800fb54 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f33a:	4a94      	ldr	r2, [pc, #592]	; (800f58c <f_mkfs+0x284>)
 800f33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d005      	beq.n	800f352 <f_mkfs+0x4a>
 800f346:	4a91      	ldr	r2, [pc, #580]	; (800f58c <f_mkfs+0x284>)
 800f348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f34e:	2200      	movs	r2, #0
 800f350:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f354:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f358:	2300      	movs	r3, #0
 800f35a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f35e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f362:	4618      	mov	r0, r3
 800f364:	f7fd fe8c 	bl	800d080 <disk_initialize>
 800f368:	4603      	mov	r3, r0
 800f36a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f36e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f372:	f003 0301 	and.w	r3, r3, #1
 800f376:	2b00      	cmp	r3, #0
 800f378:	d001      	beq.n	800f37e <f_mkfs+0x76>
 800f37a:	2303      	movs	r3, #3
 800f37c:	e3ea      	b.n	800fb54 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f37e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f382:	f003 0304 	and.w	r3, r3, #4
 800f386:	2b00      	cmp	r3, #0
 800f388:	d001      	beq.n	800f38e <f_mkfs+0x86>
 800f38a:	230a      	movs	r3, #10
 800f38c:	e3e2      	b.n	800fb54 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f38e:	f107 0214 	add.w	r2, r7, #20
 800f392:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f396:	2103      	movs	r1, #3
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fd fed7 	bl	800d14c <disk_ioctl>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d10c      	bne.n	800f3be <f_mkfs+0xb6>
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d009      	beq.n	800f3be <f_mkfs+0xb6>
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3b0:	d805      	bhi.n	800f3be <f_mkfs+0xb6>
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	1e5a      	subs	r2, r3, #1
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	4013      	ands	r3, r2
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d001      	beq.n	800f3c2 <f_mkfs+0xba>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f3c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3c6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d003      	beq.n	800f3d6 <f_mkfs+0xce>
 800f3ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d309      	bcc.n	800f3ea <f_mkfs+0xe2>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f3dc:	d805      	bhi.n	800f3ea <f_mkfs+0xe2>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	1e5a      	subs	r2, r3, #1
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	4013      	ands	r3, r2
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <f_mkfs+0xe6>
 800f3ea:	2313      	movs	r3, #19
 800f3ec:	e3b2      	b.n	800fb54 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f3ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3f6:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f3fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f402:	fbb2 f3f3 	udiv	r3, r2, r3
 800f406:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f408:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40c:	fb02 f303 	mul.w	r3, r2, r3
 800f410:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f414:	2b00      	cmp	r3, #0
 800f416:	d101      	bne.n	800f41c <f_mkfs+0x114>
 800f418:	230e      	movs	r3, #14
 800f41a:	e39b      	b.n	800fb54 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f41c:	f107 0210 	add.w	r2, r7, #16
 800f420:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f424:	2101      	movs	r1, #1
 800f426:	4618      	mov	r0, r3
 800f428:	f7fd fe90 	bl	800d14c <disk_ioctl>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d001      	beq.n	800f436 <f_mkfs+0x12e>
 800f432:	2301      	movs	r3, #1
 800f434:	e38e      	b.n	800fb54 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f436:	7afb      	ldrb	r3, [r7, #11]
 800f438:	f003 0308 	and.w	r3, r3, #8
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d001      	beq.n	800f444 <f_mkfs+0x13c>
 800f440:	2300      	movs	r3, #0
 800f442:	e000      	b.n	800f446 <f_mkfs+0x13e>
 800f444:	233f      	movs	r3, #63	; 0x3f
 800f446:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d901      	bls.n	800f454 <f_mkfs+0x14c>
 800f450:	230e      	movs	r3, #14
 800f452:	e37f      	b.n	800fb54 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f454:	693a      	ldr	r2, [r7, #16]
 800f456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	2b7f      	cmp	r3, #127	; 0x7f
 800f460:	d801      	bhi.n	800f466 <f_mkfs+0x15e>
 800f462:	230e      	movs	r3, #14
 800f464:	e376      	b.n	800fb54 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b80      	cmp	r3, #128	; 0x80
 800f46a:	d901      	bls.n	800f470 <f_mkfs+0x168>
 800f46c:	2313      	movs	r3, #19
 800f46e:	e371      	b.n	800fb54 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f470:	7afb      	ldrb	r3, [r7, #11]
 800f472:	f003 0302 	and.w	r3, r3, #2
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00d      	beq.n	800f496 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f47a:	7afb      	ldrb	r3, [r7, #11]
 800f47c:	f003 0307 	and.w	r3, r3, #7
 800f480:	2b02      	cmp	r3, #2
 800f482:	d004      	beq.n	800f48e <f_mkfs+0x186>
 800f484:	7afb      	ldrb	r3, [r7, #11]
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d103      	bne.n	800f496 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f48e:	2303      	movs	r3, #3
 800f490:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f494:	e009      	b.n	800f4aa <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f496:	7afb      	ldrb	r3, [r7, #11]
 800f498:	f003 0301 	and.w	r3, r3, #1
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d101      	bne.n	800f4a4 <f_mkfs+0x19c>
 800f4a0:	2313      	movs	r3, #19
 800f4a2:	e357      	b.n	800fb54 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f4a4:	2302      	movs	r3, #2
 800f4a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f4ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f4b2:	2b03      	cmp	r3, #3
 800f4b4:	d13c      	bne.n	800f530 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f4b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d11b      	bne.n	800f4f4 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	0c5b      	lsrs	r3, r3, #17
 800f4c0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	653b      	str	r3, [r7, #80]	; 0x50
 800f4ca:	e005      	b.n	800f4d8 <f_mkfs+0x1d0>
 800f4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d4:	005b      	lsls	r3, r3, #1
 800f4d6:	653b      	str	r3, [r7, #80]	; 0x50
 800f4d8:	4a2d      	ldr	r2, [pc, #180]	; (800f590 <f_mkfs+0x288>)
 800f4da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d007      	beq.n	800f4f4 <f_mkfs+0x1ec>
 800f4e4:	4a2a      	ldr	r2, [pc, #168]	; (800f590 <f_mkfs+0x288>)
 800f4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d2eb      	bcs.n	800f4cc <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f4f4:	693a      	ldr	r2, [r7, #16]
 800f4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4fc:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	3302      	adds	r3, #2
 800f502:	009a      	lsls	r2, r3, #2
 800f504:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f506:	4413      	add	r3, r2
 800f508:	1e5a      	subs	r2, r3, #1
 800f50a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f510:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800f512:	2320      	movs	r3, #32
 800f514:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800f516:	2300      	movs	r3, #0
 800f518:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f51a:	6a3b      	ldr	r3, [r7, #32]
 800f51c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f520:	4293      	cmp	r3, r2
 800f522:	d903      	bls.n	800f52c <f_mkfs+0x224>
 800f524:	6a3b      	ldr	r3, [r7, #32]
 800f526:	4a1b      	ldr	r2, [pc, #108]	; (800f594 <f_mkfs+0x28c>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d952      	bls.n	800f5d2 <f_mkfs+0x2ca>
 800f52c:	230e      	movs	r3, #14
 800f52e:	e311      	b.n	800fb54 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f532:	2b00      	cmp	r3, #0
 800f534:	d11b      	bne.n	800f56e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	0b1b      	lsrs	r3, r3, #12
 800f53a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f53c:	2300      	movs	r3, #0
 800f53e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f540:	2301      	movs	r3, #1
 800f542:	653b      	str	r3, [r7, #80]	; 0x50
 800f544:	e005      	b.n	800f552 <f_mkfs+0x24a>
 800f546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f548:	3301      	adds	r3, #1
 800f54a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f54e:	005b      	lsls	r3, r3, #1
 800f550:	653b      	str	r3, [r7, #80]	; 0x50
 800f552:	4a11      	ldr	r2, [pc, #68]	; (800f598 <f_mkfs+0x290>)
 800f554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d007      	beq.n	800f56e <f_mkfs+0x266>
 800f55e:	4a0e      	ldr	r2, [pc, #56]	; (800f598 <f_mkfs+0x290>)
 800f560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f566:	461a      	mov	r2, r3
 800f568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d2eb      	bcs.n	800f546 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f56e:	693a      	ldr	r2, [r7, #16]
 800f570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f572:	fbb2 f3f3 	udiv	r3, r2, r3
 800f576:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f578:	6a3b      	ldr	r3, [r7, #32]
 800f57a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f57e:	4293      	cmp	r3, r2
 800f580:	d90c      	bls.n	800f59c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f582:	6a3b      	ldr	r3, [r7, #32]
 800f584:	3302      	adds	r3, #2
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f58a:	e012      	b.n	800f5b2 <f_mkfs+0x2aa>
 800f58c:	2000a774 	.word	0x2000a774
 800f590:	080152fc 	.word	0x080152fc
 800f594:	0ffffff5 	.word	0x0ffffff5
 800f598:	0801530c 	.word	0x0801530c
				} else {
					fmt = FS_FAT12;
 800f59c:	2301      	movs	r3, #1
 800f59e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f5a2:	6a3a      	ldr	r2, [r7, #32]
 800f5a4:	4613      	mov	r3, r2
 800f5a6:	005b      	lsls	r3, r3, #1
 800f5a8:	4413      	add	r3, r2
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	085b      	lsrs	r3, r3, #1
 800f5ae:	3303      	adds	r3, #3
 800f5b0:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f5b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f5b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5b6:	4413      	add	r3, r2
 800f5b8:	1e5a      	subs	r2, r3, #1
 800f5ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5c0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5c8:	015a      	lsls	r2, r3, #5
 800f5ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f5cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5d0:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5d6:	4413      	add	r3, r2
 800f5d8:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f5da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5de:	fb03 f202 	mul.w	r2, r3, r2
 800f5e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5e4:	4413      	add	r3, r2
 800f5e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f5e8:	4413      	add	r3, r2
 800f5ea:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f5ec:	697a      	ldr	r2, [r7, #20]
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	1e5a      	subs	r2, r3, #1
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	425b      	negs	r3, r3
 800f5f8:	401a      	ands	r2, r3
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f600:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f604:	2b03      	cmp	r3, #3
 800f606:	d108      	bne.n	800f61a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f60a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f60c:	4413      	add	r3, r2
 800f60e:	657b      	str	r3, [r7, #84]	; 0x54
 800f610:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f614:	4413      	add	r3, r2
 800f616:	65bb      	str	r3, [r7, #88]	; 0x58
 800f618:	e006      	b.n	800f628 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f61a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f622:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f624:	4413      	add	r3, r2
 800f626:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f62a:	011a      	lsls	r2, r3, #4
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	441a      	add	r2, r3
 800f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f632:	1ad2      	subs	r2, r2, r3
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	429a      	cmp	r2, r3
 800f638:	d901      	bls.n	800f63e <f_mkfs+0x336>
 800f63a:	230e      	movs	r3, #14
 800f63c:	e28a      	b.n	800fb54 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f642:	1ad2      	subs	r2, r2, r3
 800f644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f648:	fb01 f303 	mul.w	r3, r1, r3
 800f64c:	1ad2      	subs	r2, r2, r3
 800f64e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f650:	1ad2      	subs	r2, r2, r3
 800f652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f654:	fbb2 f3f3 	udiv	r3, r2, r3
 800f658:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f65a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f65e:	2b03      	cmp	r3, #3
 800f660:	d10f      	bne.n	800f682 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f662:	6a3b      	ldr	r3, [r7, #32]
 800f664:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f668:	4293      	cmp	r3, r2
 800f66a:	d80a      	bhi.n	800f682 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d105      	bne.n	800f67e <f_mkfs+0x376>
 800f672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f674:	085b      	lsrs	r3, r3, #1
 800f676:	607b      	str	r3, [r7, #4]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d144      	bne.n	800f708 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f67e:	230e      	movs	r3, #14
 800f680:	e268      	b.n	800fb54 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f682:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f686:	2b02      	cmp	r3, #2
 800f688:	d133      	bne.n	800f6f2 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f68a:	6a3b      	ldr	r3, [r7, #32]
 800f68c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f690:	4293      	cmp	r3, r2
 800f692:	d91e      	bls.n	800f6d2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d107      	bne.n	800f6aa <f_mkfs+0x3a2>
 800f69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f69c:	005b      	lsls	r3, r3, #1
 800f69e:	2b40      	cmp	r3, #64	; 0x40
 800f6a0:	d803      	bhi.n	800f6aa <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	607b      	str	r3, [r7, #4]
 800f6a8:	e033      	b.n	800f712 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f6aa:	7afb      	ldrb	r3, [r7, #11]
 800f6ac:	f003 0302 	and.w	r3, r3, #2
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d003      	beq.n	800f6bc <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f6b4:	2303      	movs	r3, #3
 800f6b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f6ba:	e02a      	b.n	800f712 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d105      	bne.n	800f6ce <f_mkfs+0x3c6>
 800f6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6c4:	005b      	lsls	r3, r3, #1
 800f6c6:	607b      	str	r3, [r7, #4]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2b80      	cmp	r3, #128	; 0x80
 800f6cc:	d91e      	bls.n	800f70c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f6ce:	230e      	movs	r3, #14
 800f6d0:	e240      	b.n	800fb54 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f6d2:	6a3b      	ldr	r3, [r7, #32]
 800f6d4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d80a      	bhi.n	800f6f2 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d105      	bne.n	800f6ee <f_mkfs+0x3e6>
 800f6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	607b      	str	r3, [r7, #4]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2b80      	cmp	r3, #128	; 0x80
 800f6ec:	d910      	bls.n	800f710 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f6ee:	230e      	movs	r3, #14
 800f6f0:	e230      	b.n	800fb54 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f6f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d10c      	bne.n	800f714 <f_mkfs+0x40c>
 800f6fa:	6a3b      	ldr	r3, [r7, #32]
 800f6fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f700:	4293      	cmp	r3, r2
 800f702:	d907      	bls.n	800f714 <f_mkfs+0x40c>
 800f704:	230e      	movs	r3, #14
 800f706:	e225      	b.n	800fb54 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f708:	bf00      	nop
 800f70a:	e6ce      	b.n	800f4aa <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f70c:	bf00      	nop
 800f70e:	e6cc      	b.n	800f4aa <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f710:	bf00      	nop
			pau = au;
 800f712:	e6ca      	b.n	800f4aa <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f714:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f716:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f718:	461a      	mov	r2, r3
 800f71a:	2100      	movs	r1, #0
 800f71c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f71e:	f7fd fdd6 	bl	800d2ce <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f722:	220b      	movs	r2, #11
 800f724:	49b2      	ldr	r1, [pc, #712]	; (800f9f0 <f_mkfs+0x6e8>)
 800f726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f728:	f7fd fdb0 	bl	800d28c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72e:	330b      	adds	r3, #11
 800f730:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f732:	4611      	mov	r1, r2
 800f734:	4618      	mov	r0, r3
 800f736:	f7fd fd62 	bl	800d1fe <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73c:	330d      	adds	r3, #13
 800f73e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f740:	b2d2      	uxtb	r2, r2
 800f742:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f746:	330e      	adds	r3, #14
 800f748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f74a:	b292      	uxth	r2, r2
 800f74c:	4611      	mov	r1, r2
 800f74e:	4618      	mov	r0, r3
 800f750:	f7fd fd55 	bl	800d1fe <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f756:	3310      	adds	r3, #16
 800f758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f75a:	b2d2      	uxtb	r2, r2
 800f75c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f760:	f103 0211 	add.w	r2, r3, #17
 800f764:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f768:	2b03      	cmp	r3, #3
 800f76a:	d002      	beq.n	800f772 <f_mkfs+0x46a>
 800f76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f76e:	b29b      	uxth	r3, r3
 800f770:	e000      	b.n	800f774 <f_mkfs+0x46c>
 800f772:	2300      	movs	r3, #0
 800f774:	4619      	mov	r1, r3
 800f776:	4610      	mov	r0, r2
 800f778:	f7fd fd41 	bl	800d1fe <st_word>
		if (sz_vol < 0x10000) {
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f782:	d208      	bcs.n	800f796 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f786:	3313      	adds	r3, #19
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	b292      	uxth	r2, r2
 800f78c:	4611      	mov	r1, r2
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fd fd35 	bl	800d1fe <st_word>
 800f794:	e006      	b.n	800f7a4 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f798:	3320      	adds	r3, #32
 800f79a:	693a      	ldr	r2, [r7, #16]
 800f79c:	4611      	mov	r1, r2
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7fd fd48 	bl	800d234 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a6:	3315      	adds	r3, #21
 800f7a8:	22f8      	movs	r2, #248	; 0xf8
 800f7aa:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ae:	3318      	adds	r3, #24
 800f7b0:	213f      	movs	r1, #63	; 0x3f
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fd fd23 	bl	800d1fe <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ba:	331a      	adds	r3, #26
 800f7bc:	21ff      	movs	r1, #255	; 0xff
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fd fd1d 	bl	800d1fe <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c6:	331c      	adds	r3, #28
 800f7c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fd fd32 	bl	800d234 <st_dword>
		if (fmt == FS_FAT32) {
 800f7d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7d4:	2b03      	cmp	r3, #3
 800f7d6:	d131      	bne.n	800f83c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7da:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f7de:	f7fb fa03 	bl	800abe8 <get_fattime>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f7fd fd24 	bl	800d234 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ee:	3324      	adds	r3, #36	; 0x24
 800f7f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fd fd1e 	bl	800d234 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fa:	332c      	adds	r3, #44	; 0x2c
 800f7fc:	2102      	movs	r1, #2
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7fd fd18 	bl	800d234 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f806:	3330      	adds	r3, #48	; 0x30
 800f808:	2101      	movs	r1, #1
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fd fcf7 	bl	800d1fe <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f812:	3332      	adds	r3, #50	; 0x32
 800f814:	2106      	movs	r1, #6
 800f816:	4618      	mov	r0, r3
 800f818:	f7fd fcf1 	bl	800d1fe <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	3340      	adds	r3, #64	; 0x40
 800f820:	2280      	movs	r2, #128	; 0x80
 800f822:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f826:	3342      	adds	r3, #66	; 0x42
 800f828:	2229      	movs	r2, #41	; 0x29
 800f82a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	3347      	adds	r3, #71	; 0x47
 800f830:	2213      	movs	r2, #19
 800f832:	4970      	ldr	r1, [pc, #448]	; (800f9f4 <f_mkfs+0x6ec>)
 800f834:	4618      	mov	r0, r3
 800f836:	f7fd fd29 	bl	800d28c <mem_cpy>
 800f83a:	e020      	b.n	800f87e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f842:	f7fb f9d1 	bl	800abe8 <get_fattime>
 800f846:	4603      	mov	r3, r0
 800f848:	4619      	mov	r1, r3
 800f84a:	4620      	mov	r0, r4
 800f84c:	f7fd fcf2 	bl	800d234 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f852:	3316      	adds	r3, #22
 800f854:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f856:	b292      	uxth	r2, r2
 800f858:	4611      	mov	r1, r2
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fd fccf 	bl	800d1fe <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f862:	3324      	adds	r3, #36	; 0x24
 800f864:	2280      	movs	r2, #128	; 0x80
 800f866:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86a:	3326      	adds	r3, #38	; 0x26
 800f86c:	2229      	movs	r2, #41	; 0x29
 800f86e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f872:	332b      	adds	r3, #43	; 0x2b
 800f874:	2213      	movs	r2, #19
 800f876:	4960      	ldr	r1, [pc, #384]	; (800f9f8 <f_mkfs+0x6f0>)
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fd fd07 	bl	800d28c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f880:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f884:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f888:	4618      	mov	r0, r3
 800f88a:	f7fd fcb8 	bl	800d1fe <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f88e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f892:	2301      	movs	r3, #1
 800f894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f898:	f7fd fc38 	bl	800d10c <disk_write>
 800f89c:	4603      	mov	r3, r0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d001      	beq.n	800f8a6 <f_mkfs+0x59e>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	e156      	b.n	800fb54 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f8a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f8aa:	2b03      	cmp	r3, #3
 800f8ac:	d140      	bne.n	800f930 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	1d9a      	adds	r2, r3, #6
 800f8b2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f8ba:	f7fd fc27 	bl	800d10c <disk_write>
			mem_set(buf, 0, ss);
 800f8be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	2100      	movs	r1, #0
 800f8c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8c6:	f7fd fd02 	bl	800d2ce <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f8ca:	494c      	ldr	r1, [pc, #304]	; (800f9fc <f_mkfs+0x6f4>)
 800f8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8ce:	f7fd fcb1 	bl	800d234 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f8d8:	4949      	ldr	r1, [pc, #292]	; (800fa00 <f_mkfs+0x6f8>)
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fd fcaa 	bl	800d234 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f8e6:	6a3b      	ldr	r3, [r7, #32]
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	4610      	mov	r0, r2
 800f8ee:	f7fd fca1 	bl	800d234 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f8f8:	2102      	movs	r1, #2
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fd fc9a 	bl	800d234 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f902:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f906:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fd fc77 	bl	800d1fe <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f912:	1dda      	adds	r2, r3, #7
 800f914:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f918:	2301      	movs	r3, #1
 800f91a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f91c:	f7fd fbf6 	bl	800d10c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f922:	1c5a      	adds	r2, r3, #1
 800f924:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f928:	2301      	movs	r3, #1
 800f92a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f92c:	f7fd fbee 	bl	800d10c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f932:	2100      	movs	r1, #0
 800f934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f936:	f7fd fcca 	bl	800d2ce <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f93a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f93c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f93e:	2300      	movs	r3, #0
 800f940:	64bb      	str	r3, [r7, #72]	; 0x48
 800f942:	e04b      	b.n	800f9dc <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f944:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f948:	2b03      	cmp	r3, #3
 800f94a:	d113      	bne.n	800f974 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f94c:	f06f 0107 	mvn.w	r1, #7
 800f950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f952:	f7fd fc6f 	bl	800d234 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f958:	3304      	adds	r3, #4
 800f95a:	f04f 31ff 	mov.w	r1, #4294967295
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fd fc68 	bl	800d234 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f966:	3308      	adds	r3, #8
 800f968:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7fd fc61 	bl	800d234 <st_dword>
 800f972:	e00b      	b.n	800f98c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f974:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d101      	bne.n	800f980 <f_mkfs+0x678>
 800f97c:	4b21      	ldr	r3, [pc, #132]	; (800fa04 <f_mkfs+0x6fc>)
 800f97e:	e001      	b.n	800f984 <f_mkfs+0x67c>
 800f980:	f06f 0307 	mvn.w	r3, #7
 800f984:	4619      	mov	r1, r3
 800f986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f988:	f7fd fc54 	bl	800d234 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f98c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f98e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f994:	4293      	cmp	r3, r2
 800f996:	bf28      	it	cs
 800f998:	4613      	movcs	r3, r2
 800f99a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f99c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f9a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f9a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f9a6:	f7fd fbb1 	bl	800d10c <disk_write>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d001      	beq.n	800f9b4 <f_mkfs+0x6ac>
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	e0cf      	b.n	800fb54 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f9b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f9b6:	461a      	mov	r2, r3
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9bc:	f7fd fc87 	bl	800d2ce <mem_set>
				sect += n; nsect -= n;
 800f9c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f9c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9c4:	4413      	add	r3, r2
 800f9c6:	667b      	str	r3, [r7, #100]	; 0x64
 800f9c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9cc:	1ad3      	subs	r3, r2, r3
 800f9ce:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800f9d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d1dc      	bne.n	800f990 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f9d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9d8:	3301      	adds	r3, #1
 800f9da:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d3af      	bcc.n	800f944 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f9e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f9e8:	2b03      	cmp	r3, #3
 800f9ea:	d10d      	bne.n	800fa08 <f_mkfs+0x700>
 800f9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9ee:	e00c      	b.n	800fa0a <f_mkfs+0x702>
 800f9f0:	080151ac 	.word	0x080151ac
 800f9f4:	080151b8 	.word	0x080151b8
 800f9f8:	080151cc 	.word	0x080151cc
 800f9fc:	41615252 	.word	0x41615252
 800fa00:	61417272 	.word	0x61417272
 800fa04:	00fffff8 	.word	0x00fffff8
 800fa08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa0a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800fa0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa10:	4293      	cmp	r3, r2
 800fa12:	bf28      	it	cs
 800fa14:	4613      	movcs	r3, r2
 800fa16:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800fa18:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa22:	f7fd fb73 	bl	800d10c <disk_write>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d001      	beq.n	800fa30 <f_mkfs+0x728>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e091      	b.n	800fb54 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800fa30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa34:	4413      	add	r3, r2
 800fa36:	667b      	str	r3, [r7, #100]	; 0x64
 800fa38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa3c:	1ad3      	subs	r3, r2, r3
 800fa3e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800fa40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d1e2      	bne.n	800fa0c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800fa46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa4a:	2b03      	cmp	r3, #3
 800fa4c:	d103      	bne.n	800fa56 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800fa4e:	230c      	movs	r3, #12
 800fa50:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fa54:	e010      	b.n	800fa78 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa5c:	d303      	bcc.n	800fa66 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800fa5e:	2306      	movs	r3, #6
 800fa60:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fa64:	e008      	b.n	800fa78 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800fa66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa6a:	2b02      	cmp	r3, #2
 800fa6c:	d101      	bne.n	800fa72 <f_mkfs+0x76a>
 800fa6e:	2304      	movs	r3, #4
 800fa70:	e000      	b.n	800fa74 <f_mkfs+0x76c>
 800fa72:	2301      	movs	r3, #1
 800fa74:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800fa78:	7afb      	ldrb	r3, [r7, #11]
 800fa7a:	f003 0308 	and.w	r3, r3, #8
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d15b      	bne.n	800fb3a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800fa82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fa84:	461a      	mov	r2, r3
 800fa86:	2100      	movs	r1, #0
 800fa88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa8a:	f7fd fc20 	bl	800d2ce <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800fa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa94:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fd fbb0 	bl	800d1fe <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800fa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800faa4:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800faa6:	69bb      	ldr	r3, [r7, #24]
 800faa8:	2200      	movs	r2, #0
 800faaa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	3301      	adds	r3, #1
 800fab0:	2201      	movs	r2, #1
 800fab2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	3302      	adds	r3, #2
 800fab8:	2201      	movs	r2, #1
 800faba:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800fabc:	69bb      	ldr	r3, [r7, #24]
 800fabe:	3303      	adds	r3, #3
 800fac0:	2200      	movs	r2, #0
 800fac2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	3304      	adds	r3, #4
 800fac8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800facc:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800face:	693a      	ldr	r2, [r7, #16]
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	441a      	add	r2, r3
 800fad4:	4b21      	ldr	r3, [pc, #132]	; (800fb5c <f_mkfs+0x854>)
 800fad6:	fba3 1302 	umull	r1, r3, r3, r2
 800fada:	1ad2      	subs	r2, r2, r3
 800fadc:	0852      	lsrs	r2, r2, #1
 800fade:	4413      	add	r3, r2
 800fae0:	0b5b      	lsrs	r3, r3, #13
 800fae2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	3305      	adds	r3, #5
 800fae8:	22fe      	movs	r2, #254	; 0xfe
 800faea:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800faec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faee:	089b      	lsrs	r3, r3, #2
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	3306      	adds	r3, #6
 800faf6:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800fafa:	b2d2      	uxtb	r2, r2
 800fafc:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	3307      	adds	r3, #7
 800fb02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb04:	b2d2      	uxtb	r2, r2
 800fb06:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800fb08:	69bb      	ldr	r3, [r7, #24]
 800fb0a:	3308      	adds	r3, #8
 800fb0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fd fb90 	bl	800d234 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800fb14:	69bb      	ldr	r3, [r7, #24]
 800fb16:	330c      	adds	r3, #12
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fd fb89 	bl	800d234 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800fb22:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fb26:	2301      	movs	r3, #1
 800fb28:	2200      	movs	r2, #0
 800fb2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb2c:	f7fd faee 	bl	800d10c <disk_write>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <f_mkfs+0x832>
 800fb36:	2301      	movs	r3, #1
 800fb38:	e00c      	b.n	800fb54 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800fb3a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fb3e:	2200      	movs	r2, #0
 800fb40:	2100      	movs	r1, #0
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fd fb02 	bl	800d14c <disk_ioctl>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d001      	beq.n	800fb52 <f_mkfs+0x84a>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e000      	b.n	800fb54 <f_mkfs+0x84c>

	return FR_OK;
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3774      	adds	r7, #116	; 0x74
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd90      	pop	{r4, r7, pc}
 800fb5c:	0515565b 	.word	0x0515565b

0800fb60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b087      	sub	sp, #28
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	4613      	mov	r3, r2
 800fb6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fb72:	2300      	movs	r3, #0
 800fb74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fb76:	4b1f      	ldr	r3, [pc, #124]	; (800fbf4 <FATFS_LinkDriverEx+0x94>)
 800fb78:	7a5b      	ldrb	r3, [r3, #9]
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d131      	bne.n	800fbe4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fb80:	4b1c      	ldr	r3, [pc, #112]	; (800fbf4 <FATFS_LinkDriverEx+0x94>)
 800fb82:	7a5b      	ldrb	r3, [r3, #9]
 800fb84:	b2db      	uxtb	r3, r3
 800fb86:	461a      	mov	r2, r3
 800fb88:	4b1a      	ldr	r3, [pc, #104]	; (800fbf4 <FATFS_LinkDriverEx+0x94>)
 800fb8a:	2100      	movs	r1, #0
 800fb8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fb8e:	4b19      	ldr	r3, [pc, #100]	; (800fbf4 <FATFS_LinkDriverEx+0x94>)
 800fb90:	7a5b      	ldrb	r3, [r3, #9]
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	4a17      	ldr	r2, [pc, #92]	; (800fbf4 <FATFS_LinkDriverEx+0x94>)
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	4413      	add	r3, r2
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fb9e:	4b15      	ldr	r3, [pc, #84]	; (800fbf4 <FATFS_LinkDriverEx+0x94>)
 800fba0:	7a5b      	ldrb	r3, [r3, #9]
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	461a      	mov	r2, r3
 800fba6:	4b13      	ldr	r3, [pc, #76]	; (800fbf4 <FATFS_LinkDriverEx+0x94>)
 800fba8:	4413      	add	r3, r2
 800fbaa:	79fa      	ldrb	r2, [r7, #7]
 800fbac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fbae:	4b11      	ldr	r3, [pc, #68]	; (800fbf4 <FATFS_LinkDriverEx+0x94>)
 800fbb0:	7a5b      	ldrb	r3, [r3, #9]
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	1c5a      	adds	r2, r3, #1
 800fbb6:	b2d1      	uxtb	r1, r2
 800fbb8:	4a0e      	ldr	r2, [pc, #56]	; (800fbf4 <FATFS_LinkDriverEx+0x94>)
 800fbba:	7251      	strb	r1, [r2, #9]
 800fbbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fbbe:	7dbb      	ldrb	r3, [r7, #22]
 800fbc0:	3330      	adds	r3, #48	; 0x30
 800fbc2:	b2da      	uxtb	r2, r3
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	223a      	movs	r2, #58	; 0x3a
 800fbce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	3302      	adds	r3, #2
 800fbd4:	222f      	movs	r2, #47	; 0x2f
 800fbd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	3303      	adds	r3, #3
 800fbdc:	2200      	movs	r2, #0
 800fbde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	371c      	adds	r7, #28
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	2000a79c 	.word	0x2000a79c

0800fbf8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fc02:	2200      	movs	r2, #0
 800fc04:	6839      	ldr	r1, [r7, #0]
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff ffaa 	bl	800fb60 <FATFS_LinkDriverEx>
 800fc0c:	4603      	mov	r3, r0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3708      	adds	r7, #8
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
	...

0800fc18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	4912      	ldr	r1, [pc, #72]	; (800fc68 <MX_USB_DEVICE_Init+0x50>)
 800fc20:	4812      	ldr	r0, [pc, #72]	; (800fc6c <MX_USB_DEVICE_Init+0x54>)
 800fc22:	f7fb fef1 	bl	800ba08 <USBD_Init>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d001      	beq.n	800fc30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fc2c:	f7f1 fb8c 	bl	8001348 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fc30:	490f      	ldr	r1, [pc, #60]	; (800fc70 <MX_USB_DEVICE_Init+0x58>)
 800fc32:	480e      	ldr	r0, [pc, #56]	; (800fc6c <MX_USB_DEVICE_Init+0x54>)
 800fc34:	f7fb ff18 	bl	800ba68 <USBD_RegisterClass>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d001      	beq.n	800fc42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fc3e:	f7f1 fb83 	bl	8001348 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fc42:	490c      	ldr	r1, [pc, #48]	; (800fc74 <MX_USB_DEVICE_Init+0x5c>)
 800fc44:	4809      	ldr	r0, [pc, #36]	; (800fc6c <MX_USB_DEVICE_Init+0x54>)
 800fc46:	f7fb fe4f 	bl	800b8e8 <USBD_CDC_RegisterInterface>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d001      	beq.n	800fc54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fc50:	f7f1 fb7a 	bl	8001348 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fc54:	4805      	ldr	r0, [pc, #20]	; (800fc6c <MX_USB_DEVICE_Init+0x54>)
 800fc56:	f7fb ff3d 	bl	800bad4 <USBD_Start>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d001      	beq.n	800fc64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fc60:	f7f1 fb72 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fc64:	bf00      	nop
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	200000ac 	.word	0x200000ac
 800fc6c:	2000a7a8 	.word	0x2000a7a8
 800fc70:	20000018 	.word	0x20000018
 800fc74:	20000098 	.word	0x20000098

0800fc78 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	4905      	ldr	r1, [pc, #20]	; (800fc94 <CDC_Init_FS+0x1c>)
 800fc80:	4805      	ldr	r0, [pc, #20]	; (800fc98 <CDC_Init_FS+0x20>)
 800fc82:	f7fb fe4b 	bl	800b91c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fc86:	4905      	ldr	r1, [pc, #20]	; (800fc9c <CDC_Init_FS+0x24>)
 800fc88:	4803      	ldr	r0, [pc, #12]	; (800fc98 <CDC_Init_FS+0x20>)
 800fc8a:	f7fb fe69 	bl	800b960 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fc8e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	2000b284 	.word	0x2000b284
 800fc98:	2000a7a8 	.word	0x2000a7a8
 800fc9c:	2000aa84 	.word	0x2000aa84

0800fca0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fca0:	b480      	push	{r7}
 800fca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fca4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b083      	sub	sp, #12
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	6039      	str	r1, [r7, #0]
 800fcba:	71fb      	strb	r3, [r7, #7]
 800fcbc:	4613      	mov	r3, r2
 800fcbe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fcc0:	79fb      	ldrb	r3, [r7, #7]
 800fcc2:	2b23      	cmp	r3, #35	; 0x23
 800fcc4:	d84a      	bhi.n	800fd5c <CDC_Control_FS+0xac>
 800fcc6:	a201      	add	r2, pc, #4	; (adr r2, 800fccc <CDC_Control_FS+0x1c>)
 800fcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fccc:	0800fd5d 	.word	0x0800fd5d
 800fcd0:	0800fd5d 	.word	0x0800fd5d
 800fcd4:	0800fd5d 	.word	0x0800fd5d
 800fcd8:	0800fd5d 	.word	0x0800fd5d
 800fcdc:	0800fd5d 	.word	0x0800fd5d
 800fce0:	0800fd5d 	.word	0x0800fd5d
 800fce4:	0800fd5d 	.word	0x0800fd5d
 800fce8:	0800fd5d 	.word	0x0800fd5d
 800fcec:	0800fd5d 	.word	0x0800fd5d
 800fcf0:	0800fd5d 	.word	0x0800fd5d
 800fcf4:	0800fd5d 	.word	0x0800fd5d
 800fcf8:	0800fd5d 	.word	0x0800fd5d
 800fcfc:	0800fd5d 	.word	0x0800fd5d
 800fd00:	0800fd5d 	.word	0x0800fd5d
 800fd04:	0800fd5d 	.word	0x0800fd5d
 800fd08:	0800fd5d 	.word	0x0800fd5d
 800fd0c:	0800fd5d 	.word	0x0800fd5d
 800fd10:	0800fd5d 	.word	0x0800fd5d
 800fd14:	0800fd5d 	.word	0x0800fd5d
 800fd18:	0800fd5d 	.word	0x0800fd5d
 800fd1c:	0800fd5d 	.word	0x0800fd5d
 800fd20:	0800fd5d 	.word	0x0800fd5d
 800fd24:	0800fd5d 	.word	0x0800fd5d
 800fd28:	0800fd5d 	.word	0x0800fd5d
 800fd2c:	0800fd5d 	.word	0x0800fd5d
 800fd30:	0800fd5d 	.word	0x0800fd5d
 800fd34:	0800fd5d 	.word	0x0800fd5d
 800fd38:	0800fd5d 	.word	0x0800fd5d
 800fd3c:	0800fd5d 	.word	0x0800fd5d
 800fd40:	0800fd5d 	.word	0x0800fd5d
 800fd44:	0800fd5d 	.word	0x0800fd5d
 800fd48:	0800fd5d 	.word	0x0800fd5d
 800fd4c:	0800fd5d 	.word	0x0800fd5d
 800fd50:	0800fd5d 	.word	0x0800fd5d
 800fd54:	0800fd5d 	.word	0x0800fd5d
 800fd58:	0800fd5d 	.word	0x0800fd5d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fd5c:	bf00      	nop
  }

  return (USBD_OK);
 800fd5e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fd76:	6879      	ldr	r1, [r7, #4]
 800fd78:	480f      	ldr	r0, [pc, #60]	; (800fdb8 <CDC_Receive_FS+0x4c>)
 800fd7a:	f7fb fdf1 	bl	800b960 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fd7e:	480e      	ldr	r0, [pc, #56]	; (800fdb8 <CDC_Receive_FS+0x4c>)
 800fd80:	f7fb fe0c 	bl	800b99c <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	73fb      	strb	r3, [r7, #15]
  memset(inBuff, '\0', 64);
 800fd8a:	2240      	movs	r2, #64	; 0x40
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	480b      	ldr	r0, [pc, #44]	; (800fdbc <CDC_Receive_FS+0x50>)
 800fd90:	f001 fd3d 	bl	801180e <memset>
  memcpy(inBuff, Buf, len);
 800fd94:	7bfb      	ldrb	r3, [r7, #15]
 800fd96:	461a      	mov	r2, r3
 800fd98:	6879      	ldr	r1, [r7, #4]
 800fd9a:	4808      	ldr	r0, [pc, #32]	; (800fdbc <CDC_Receive_FS+0x50>)
 800fd9c:	f001 fdb6 	bl	801190c <memcpy>
  memset(Buf, '\0', len);
 800fda0:	7bfb      	ldrb	r3, [r7, #15]
 800fda2:	461a      	mov	r2, r3
 800fda4:	2100      	movs	r1, #0
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f001 fd31 	bl	801180e <memset>
  return (USBD_OK);
 800fdac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3710      	adds	r7, #16
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	2000a7a8 	.word	0x2000a7a8
 800fdbc:	2000a2b8 	.word	0x2000a2b8

0800fdc0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b087      	sub	sp, #28
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	4613      	mov	r3, r2
 800fdcc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fdd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	371c      	adds	r7, #28
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
	...

0800fde4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	4603      	mov	r3, r0
 800fdec:	6039      	str	r1, [r7, #0]
 800fdee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	2212      	movs	r2, #18
 800fdf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fdf6:	4b03      	ldr	r3, [pc, #12]	; (800fe04 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr
 800fe04:	200000cc 	.word	0x200000cc

0800fe08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	4603      	mov	r3, r0
 800fe10:	6039      	str	r1, [r7, #0]
 800fe12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	2204      	movs	r2, #4
 800fe18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fe1a:	4b03      	ldr	r3, [pc, #12]	; (800fe28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	370c      	adds	r7, #12
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr
 800fe28:	200000ec 	.word	0x200000ec

0800fe2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	4603      	mov	r3, r0
 800fe34:	6039      	str	r1, [r7, #0]
 800fe36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe38:	79fb      	ldrb	r3, [r7, #7]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d105      	bne.n	800fe4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe3e:	683a      	ldr	r2, [r7, #0]
 800fe40:	4907      	ldr	r1, [pc, #28]	; (800fe60 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe42:	4808      	ldr	r0, [pc, #32]	; (800fe64 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe44:	f7fd f822 	bl	800ce8c <USBD_GetString>
 800fe48:	e004      	b.n	800fe54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe4a:	683a      	ldr	r2, [r7, #0]
 800fe4c:	4904      	ldr	r1, [pc, #16]	; (800fe60 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe4e:	4805      	ldr	r0, [pc, #20]	; (800fe64 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe50:	f7fd f81c 	bl	800ce8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe54:	4b02      	ldr	r3, [pc, #8]	; (800fe60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	2000ba84 	.word	0x2000ba84
 800fe64:	080151e0 	.word	0x080151e0

0800fe68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	4603      	mov	r3, r0
 800fe70:	6039      	str	r1, [r7, #0]
 800fe72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fe74:	683a      	ldr	r2, [r7, #0]
 800fe76:	4904      	ldr	r1, [pc, #16]	; (800fe88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fe78:	4804      	ldr	r0, [pc, #16]	; (800fe8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fe7a:	f7fd f807 	bl	800ce8c <USBD_GetString>
  return USBD_StrDesc;
 800fe7e:	4b02      	ldr	r3, [pc, #8]	; (800fe88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fe80:	4618      	mov	r0, r3
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	2000ba84 	.word	0x2000ba84
 800fe8c:	080151f0 	.word	0x080151f0

0800fe90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	4603      	mov	r3, r0
 800fe98:	6039      	str	r1, [r7, #0]
 800fe9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	221a      	movs	r2, #26
 800fea0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fea2:	f000 f855 	bl	800ff50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fea6:	4b02      	ldr	r3, [pc, #8]	; (800feb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	200000f0 	.word	0x200000f0

0800feb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	4603      	mov	r3, r0
 800febc:	6039      	str	r1, [r7, #0]
 800febe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fec0:	79fb      	ldrb	r3, [r7, #7]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d105      	bne.n	800fed2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fec6:	683a      	ldr	r2, [r7, #0]
 800fec8:	4907      	ldr	r1, [pc, #28]	; (800fee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800feca:	4808      	ldr	r0, [pc, #32]	; (800feec <USBD_FS_ConfigStrDescriptor+0x38>)
 800fecc:	f7fc ffde 	bl	800ce8c <USBD_GetString>
 800fed0:	e004      	b.n	800fedc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fed2:	683a      	ldr	r2, [r7, #0]
 800fed4:	4904      	ldr	r1, [pc, #16]	; (800fee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fed6:	4805      	ldr	r0, [pc, #20]	; (800feec <USBD_FS_ConfigStrDescriptor+0x38>)
 800fed8:	f7fc ffd8 	bl	800ce8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800fedc:	4b02      	ldr	r3, [pc, #8]	; (800fee8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3708      	adds	r7, #8
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	2000ba84 	.word	0x2000ba84
 800feec:	08015204 	.word	0x08015204

0800fef0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	4603      	mov	r3, r0
 800fef8:	6039      	str	r1, [r7, #0]
 800fefa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fefc:	79fb      	ldrb	r3, [r7, #7]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d105      	bne.n	800ff0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff02:	683a      	ldr	r2, [r7, #0]
 800ff04:	4907      	ldr	r1, [pc, #28]	; (800ff24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff06:	4808      	ldr	r0, [pc, #32]	; (800ff28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff08:	f7fc ffc0 	bl	800ce8c <USBD_GetString>
 800ff0c:	e004      	b.n	800ff18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ff0e:	683a      	ldr	r2, [r7, #0]
 800ff10:	4904      	ldr	r1, [pc, #16]	; (800ff24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ff12:	4805      	ldr	r0, [pc, #20]	; (800ff28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ff14:	f7fc ffba 	bl	800ce8c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff18:	4b02      	ldr	r3, [pc, #8]	; (800ff24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	2000ba84 	.word	0x2000ba84
 800ff28:	08015210 	.word	0x08015210

0800ff2c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	6039      	str	r1, [r7, #0]
 800ff36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	220c      	movs	r2, #12
 800ff3c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ff3e:	4b03      	ldr	r3, [pc, #12]	; (800ff4c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	200000e0 	.word	0x200000e0

0800ff50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ff56:	4b0f      	ldr	r3, [pc, #60]	; (800ff94 <Get_SerialNum+0x44>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ff5c:	4b0e      	ldr	r3, [pc, #56]	; (800ff98 <Get_SerialNum+0x48>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ff62:	4b0e      	ldr	r3, [pc, #56]	; (800ff9c <Get_SerialNum+0x4c>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d009      	beq.n	800ff8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ff76:	2208      	movs	r2, #8
 800ff78:	4909      	ldr	r1, [pc, #36]	; (800ffa0 <Get_SerialNum+0x50>)
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	f000 f814 	bl	800ffa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ff80:	2204      	movs	r2, #4
 800ff82:	4908      	ldr	r1, [pc, #32]	; (800ffa4 <Get_SerialNum+0x54>)
 800ff84:	68b8      	ldr	r0, [r7, #8]
 800ff86:	f000 f80f 	bl	800ffa8 <IntToUnicode>
  }
}
 800ff8a:	bf00      	nop
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	1fff7590 	.word	0x1fff7590
 800ff98:	1fff7594 	.word	0x1fff7594
 800ff9c:	1fff7598 	.word	0x1fff7598
 800ffa0:	200000f2 	.word	0x200000f2
 800ffa4:	20000102 	.word	0x20000102

0800ffa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b087      	sub	sp, #28
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	60f8      	str	r0, [r7, #12]
 800ffb0:	60b9      	str	r1, [r7, #8]
 800ffb2:	4613      	mov	r3, r2
 800ffb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ffba:	2300      	movs	r3, #0
 800ffbc:	75fb      	strb	r3, [r7, #23]
 800ffbe:	e027      	b.n	8010010 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	0f1b      	lsrs	r3, r3, #28
 800ffc4:	2b09      	cmp	r3, #9
 800ffc6:	d80b      	bhi.n	800ffe0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	0f1b      	lsrs	r3, r3, #28
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	7dfb      	ldrb	r3, [r7, #23]
 800ffd0:	005b      	lsls	r3, r3, #1
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	440b      	add	r3, r1
 800ffd8:	3230      	adds	r2, #48	; 0x30
 800ffda:	b2d2      	uxtb	r2, r2
 800ffdc:	701a      	strb	r2, [r3, #0]
 800ffde:	e00a      	b.n	800fff6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	0f1b      	lsrs	r3, r3, #28
 800ffe4:	b2da      	uxtb	r2, r3
 800ffe6:	7dfb      	ldrb	r3, [r7, #23]
 800ffe8:	005b      	lsls	r3, r3, #1
 800ffea:	4619      	mov	r1, r3
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	440b      	add	r3, r1
 800fff0:	3237      	adds	r2, #55	; 0x37
 800fff2:	b2d2      	uxtb	r2, r2
 800fff4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	011b      	lsls	r3, r3, #4
 800fffa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	3301      	adds	r3, #1
 8010002:	68ba      	ldr	r2, [r7, #8]
 8010004:	4413      	add	r3, r2
 8010006:	2200      	movs	r2, #0
 8010008:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801000a:	7dfb      	ldrb	r3, [r7, #23]
 801000c:	3301      	adds	r3, #1
 801000e:	75fb      	strb	r3, [r7, #23]
 8010010:	7dfa      	ldrb	r2, [r7, #23]
 8010012:	79fb      	ldrb	r3, [r7, #7]
 8010014:	429a      	cmp	r2, r3
 8010016:	d3d3      	bcc.n	800ffc0 <IntToUnicode+0x18>
  }
}
 8010018:	bf00      	nop
 801001a:	bf00      	nop
 801001c:	371c      	adds	r7, #28
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
	...

08010028 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b0ac      	sub	sp, #176	; 0xb0
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010030:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010034:	2200      	movs	r2, #0
 8010036:	601a      	str	r2, [r3, #0]
 8010038:	605a      	str	r2, [r3, #4]
 801003a:	609a      	str	r2, [r3, #8]
 801003c:	60da      	str	r2, [r3, #12]
 801003e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010040:	f107 0314 	add.w	r3, r7, #20
 8010044:	2288      	movs	r2, #136	; 0x88
 8010046:	2100      	movs	r1, #0
 8010048:	4618      	mov	r0, r3
 801004a:	f001 fbe0 	bl	801180e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010056:	d164      	bne.n	8010122 <HAL_PCD_MspInit+0xfa>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801005c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801005e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010066:	f107 0314 	add.w	r3, r7, #20
 801006a:	4618      	mov	r0, r3
 801006c:	f7f5 fd2e 	bl	8005acc <HAL_RCCEx_PeriphCLKConfig>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8010076:	f7f1 f967 	bl	8001348 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801007a:	4b2c      	ldr	r3, [pc, #176]	; (801012c <HAL_PCD_MspInit+0x104>)
 801007c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801007e:	4a2b      	ldr	r2, [pc, #172]	; (801012c <HAL_PCD_MspInit+0x104>)
 8010080:	f043 0301 	orr.w	r3, r3, #1
 8010084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010086:	4b29      	ldr	r3, [pc, #164]	; (801012c <HAL_PCD_MspInit+0x104>)
 8010088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801008a:	f003 0301 	and.w	r3, r3, #1
 801008e:	613b      	str	r3, [r7, #16]
 8010090:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010092:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801009a:	2302      	movs	r3, #2
 801009c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80100a0:	2300      	movs	r3, #0
 80100a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80100a6:	2303      	movs	r3, #3
 80100a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80100ac:	230a      	movs	r3, #10
 80100ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80100b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80100b6:	4619      	mov	r1, r3
 80100b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80100bc:	f7f2 fcda 	bl	8002a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80100c0:	4b1a      	ldr	r3, [pc, #104]	; (801012c <HAL_PCD_MspInit+0x104>)
 80100c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100c4:	4a19      	ldr	r2, [pc, #100]	; (801012c <HAL_PCD_MspInit+0x104>)
 80100c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80100ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80100cc:	4b17      	ldr	r3, [pc, #92]	; (801012c <HAL_PCD_MspInit+0x104>)
 80100ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80100d4:	60fb      	str	r3, [r7, #12]
 80100d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80100d8:	4b14      	ldr	r3, [pc, #80]	; (801012c <HAL_PCD_MspInit+0x104>)
 80100da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d114      	bne.n	801010e <HAL_PCD_MspInit+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80100e4:	4b11      	ldr	r3, [pc, #68]	; (801012c <HAL_PCD_MspInit+0x104>)
 80100e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100e8:	4a10      	ldr	r2, [pc, #64]	; (801012c <HAL_PCD_MspInit+0x104>)
 80100ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100ee:	6593      	str	r3, [r2, #88]	; 0x58
 80100f0:	4b0e      	ldr	r3, [pc, #56]	; (801012c <HAL_PCD_MspInit+0x104>)
 80100f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100f8:	60bb      	str	r3, [r7, #8]
 80100fa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80100fc:	f7f4 febc 	bl	8004e78 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010100:	4b0a      	ldr	r3, [pc, #40]	; (801012c <HAL_PCD_MspInit+0x104>)
 8010102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010104:	4a09      	ldr	r2, [pc, #36]	; (801012c <HAL_PCD_MspInit+0x104>)
 8010106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801010a:	6593      	str	r3, [r2, #88]	; 0x58
 801010c:	e001      	b.n	8010112 <HAL_PCD_MspInit+0xea>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801010e:	f7f4 feb3 	bl	8004e78 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010112:	2200      	movs	r2, #0
 8010114:	2100      	movs	r1, #0
 8010116:	2043      	movs	r0, #67	; 0x43
 8010118:	f7f2 fa3d 	bl	8002596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801011c:	2043      	movs	r0, #67	; 0x43
 801011e:	f7f2 fa56 	bl	80025ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010122:	bf00      	nop
 8010124:	37b0      	adds	r7, #176	; 0xb0
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	40021000 	.word	0x40021000

08010130 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010144:	4619      	mov	r1, r3
 8010146:	4610      	mov	r0, r2
 8010148:	f7fb fd11 	bl	800bb6e <USBD_LL_SetupStage>
}
 801014c:	bf00      	nop
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	460b      	mov	r3, r1
 801015e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010166:	78fa      	ldrb	r2, [r7, #3]
 8010168:	6879      	ldr	r1, [r7, #4]
 801016a:	4613      	mov	r3, r2
 801016c:	00db      	lsls	r3, r3, #3
 801016e:	4413      	add	r3, r2
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	440b      	add	r3, r1
 8010174:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	78fb      	ldrb	r3, [r7, #3]
 801017c:	4619      	mov	r1, r3
 801017e:	f7fb fd4b 	bl	800bc18 <USBD_LL_DataOutStage>
}
 8010182:	bf00      	nop
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801018a:	b580      	push	{r7, lr}
 801018c:	b082      	sub	sp, #8
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
 8010192:	460b      	mov	r3, r1
 8010194:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801019c:	78fa      	ldrb	r2, [r7, #3]
 801019e:	6879      	ldr	r1, [r7, #4]
 80101a0:	4613      	mov	r3, r2
 80101a2:	00db      	lsls	r3, r3, #3
 80101a4:	4413      	add	r3, r2
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	440b      	add	r3, r1
 80101aa:	3348      	adds	r3, #72	; 0x48
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	78fb      	ldrb	r3, [r7, #3]
 80101b0:	4619      	mov	r1, r3
 80101b2:	f7fb fde4 	bl	800bd7e <USBD_LL_DataInStage>
}
 80101b6:	bf00      	nop
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b082      	sub	sp, #8
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fb ff1e 	bl	800c00e <USBD_LL_SOF>
}
 80101d2:	bf00      	nop
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b084      	sub	sp, #16
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80101e2:	2301      	movs	r3, #1
 80101e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	691b      	ldr	r3, [r3, #16]
 80101ea:	2b02      	cmp	r3, #2
 80101ec:	d001      	beq.n	80101f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80101ee:	f7f1 f8ab 	bl	8001348 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80101f8:	7bfa      	ldrb	r2, [r7, #15]
 80101fa:	4611      	mov	r1, r2
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7fb fec2 	bl	800bf86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010208:	4618      	mov	r0, r3
 801020a:	f7fb fe6a 	bl	800bee2 <USBD_LL_Reset>
}
 801020e:	bf00      	nop
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
	...

08010218 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	6812      	ldr	r2, [r2, #0]
 801022e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010232:	f043 0301 	orr.w	r3, r3, #1
 8010236:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801023e:	4618      	mov	r0, r3
 8010240:	f7fb feb1 	bl	800bfa6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6a1b      	ldr	r3, [r3, #32]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d005      	beq.n	8010258 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801024c:	4b04      	ldr	r3, [pc, #16]	; (8010260 <HAL_PCD_SuspendCallback+0x48>)
 801024e:	691b      	ldr	r3, [r3, #16]
 8010250:	4a03      	ldr	r2, [pc, #12]	; (8010260 <HAL_PCD_SuspendCallback+0x48>)
 8010252:	f043 0306 	orr.w	r3, r3, #6
 8010256:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010258:	bf00      	nop
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	e000ed00 	.word	0xe000ed00

08010264 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	6812      	ldr	r2, [r2, #0]
 801027a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801027e:	f023 0301 	bic.w	r3, r3, #1
 8010282:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6a1b      	ldr	r3, [r3, #32]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d007      	beq.n	801029c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801028c:	4b08      	ldr	r3, [pc, #32]	; (80102b0 <HAL_PCD_ResumeCallback+0x4c>)
 801028e:	691b      	ldr	r3, [r3, #16]
 8010290:	4a07      	ldr	r2, [pc, #28]	; (80102b0 <HAL_PCD_ResumeCallback+0x4c>)
 8010292:	f023 0306 	bic.w	r3, r3, #6
 8010296:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010298:	f000 faf6 	bl	8010888 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fb fe9b 	bl	800bfde <USBD_LL_Resume>
}
 80102a8:	bf00      	nop
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}
 80102b0:	e000ed00 	.word	0xe000ed00

080102b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	460b      	mov	r3, r1
 80102be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80102c6:	78fa      	ldrb	r2, [r7, #3]
 80102c8:	4611      	mov	r1, r2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fb fef1 	bl	800c0b2 <USBD_LL_IsoOUTIncomplete>
}
 80102d0:	bf00      	nop
 80102d2:	3708      	adds	r7, #8
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	460b      	mov	r3, r1
 80102e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80102ea:	78fa      	ldrb	r2, [r7, #3]
 80102ec:	4611      	mov	r1, r2
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fb fead 	bl	800c04e <USBD_LL_IsoINIncomplete>
}
 80102f4:	bf00      	nop
 80102f6:	3708      	adds	r7, #8
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801030a:	4618      	mov	r0, r3
 801030c:	f7fb ff03 	bl	800c116 <USBD_LL_DevConnected>
}
 8010310:	bf00      	nop
 8010312:	3708      	adds	r7, #8
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010326:	4618      	mov	r0, r3
 8010328:	f7fb ff00 	bl	800c12c <USBD_LL_DevDisconnected>
}
 801032c:	bf00      	nop
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d13c      	bne.n	80103be <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010344:	4a20      	ldr	r2, [pc, #128]	; (80103c8 <USBD_LL_Init+0x94>)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a1e      	ldr	r2, [pc, #120]	; (80103c8 <USBD_LL_Init+0x94>)
 8010350:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010354:	4b1c      	ldr	r3, [pc, #112]	; (80103c8 <USBD_LL_Init+0x94>)
 8010356:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801035a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801035c:	4b1a      	ldr	r3, [pc, #104]	; (80103c8 <USBD_LL_Init+0x94>)
 801035e:	2206      	movs	r2, #6
 8010360:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010362:	4b19      	ldr	r3, [pc, #100]	; (80103c8 <USBD_LL_Init+0x94>)
 8010364:	2202      	movs	r2, #2
 8010366:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010368:	4b17      	ldr	r3, [pc, #92]	; (80103c8 <USBD_LL_Init+0x94>)
 801036a:	2202      	movs	r2, #2
 801036c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801036e:	4b16      	ldr	r3, [pc, #88]	; (80103c8 <USBD_LL_Init+0x94>)
 8010370:	2200      	movs	r2, #0
 8010372:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010374:	4b14      	ldr	r3, [pc, #80]	; (80103c8 <USBD_LL_Init+0x94>)
 8010376:	2200      	movs	r2, #0
 8010378:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801037a:	4b13      	ldr	r3, [pc, #76]	; (80103c8 <USBD_LL_Init+0x94>)
 801037c:	2200      	movs	r2, #0
 801037e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010380:	4b11      	ldr	r3, [pc, #68]	; (80103c8 <USBD_LL_Init+0x94>)
 8010382:	2200      	movs	r2, #0
 8010384:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010386:	4b10      	ldr	r3, [pc, #64]	; (80103c8 <USBD_LL_Init+0x94>)
 8010388:	2200      	movs	r2, #0
 801038a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801038c:	4b0e      	ldr	r3, [pc, #56]	; (80103c8 <USBD_LL_Init+0x94>)
 801038e:	2200      	movs	r2, #0
 8010390:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010392:	480d      	ldr	r0, [pc, #52]	; (80103c8 <USBD_LL_Init+0x94>)
 8010394:	f7f3 fb65 	bl	8003a62 <HAL_PCD_Init>
 8010398:	4603      	mov	r3, r0
 801039a:	2b00      	cmp	r3, #0
 801039c:	d001      	beq.n	80103a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801039e:	f7f0 ffd3 	bl	8001348 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80103a2:	2180      	movs	r1, #128	; 0x80
 80103a4:	4808      	ldr	r0, [pc, #32]	; (80103c8 <USBD_LL_Init+0x94>)
 80103a6:	f7f4 fcce 	bl	8004d46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80103aa:	2240      	movs	r2, #64	; 0x40
 80103ac:	2100      	movs	r1, #0
 80103ae:	4806      	ldr	r0, [pc, #24]	; (80103c8 <USBD_LL_Init+0x94>)
 80103b0:	f7f4 fc82 	bl	8004cb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80103b4:	2280      	movs	r2, #128	; 0x80
 80103b6:	2101      	movs	r1, #1
 80103b8:	4803      	ldr	r0, [pc, #12]	; (80103c8 <USBD_LL_Init+0x94>)
 80103ba:	f7f4 fc7d 	bl	8004cb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80103be:	2300      	movs	r3, #0
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	2000bc84 	.word	0x2000bc84

080103cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103d4:	2300      	movs	r3, #0
 80103d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103d8:	2300      	movs	r3, #0
 80103da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7f3 fc61 	bl	8003caa <HAL_PCD_Start>
 80103e8:	4603      	mov	r3, r0
 80103ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80103ec:	7bbb      	ldrb	r3, [r7, #14]
 80103ee:	2b03      	cmp	r3, #3
 80103f0:	d816      	bhi.n	8010420 <USBD_LL_Start+0x54>
 80103f2:	a201      	add	r2, pc, #4	; (adr r2, 80103f8 <USBD_LL_Start+0x2c>)
 80103f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f8:	08010409 	.word	0x08010409
 80103fc:	0801040f 	.word	0x0801040f
 8010400:	08010415 	.word	0x08010415
 8010404:	0801041b 	.word	0x0801041b
    case HAL_OK :
      usb_status = USBD_OK;
 8010408:	2300      	movs	r3, #0
 801040a:	73fb      	strb	r3, [r7, #15]
    break;
 801040c:	e00b      	b.n	8010426 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801040e:	2303      	movs	r3, #3
 8010410:	73fb      	strb	r3, [r7, #15]
    break;
 8010412:	e008      	b.n	8010426 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010414:	2301      	movs	r3, #1
 8010416:	73fb      	strb	r3, [r7, #15]
    break;
 8010418:	e005      	b.n	8010426 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801041a:	2303      	movs	r3, #3
 801041c:	73fb      	strb	r3, [r7, #15]
    break;
 801041e:	e002      	b.n	8010426 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010420:	2303      	movs	r3, #3
 8010422:	73fb      	strb	r3, [r7, #15]
    break;
 8010424:	bf00      	nop
  }
  return usb_status;
 8010426:	7bfb      	ldrb	r3, [r7, #15]
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b084      	sub	sp, #16
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	4608      	mov	r0, r1
 801043a:	4611      	mov	r1, r2
 801043c:	461a      	mov	r2, r3
 801043e:	4603      	mov	r3, r0
 8010440:	70fb      	strb	r3, [r7, #3]
 8010442:	460b      	mov	r3, r1
 8010444:	70bb      	strb	r3, [r7, #2]
 8010446:	4613      	mov	r3, r2
 8010448:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801044a:	2300      	movs	r3, #0
 801044c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801044e:	2300      	movs	r3, #0
 8010450:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010458:	78bb      	ldrb	r3, [r7, #2]
 801045a:	883a      	ldrh	r2, [r7, #0]
 801045c:	78f9      	ldrb	r1, [r7, #3]
 801045e:	f7f4 f90b 	bl	8004678 <HAL_PCD_EP_Open>
 8010462:	4603      	mov	r3, r0
 8010464:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010466:	7bbb      	ldrb	r3, [r7, #14]
 8010468:	2b03      	cmp	r3, #3
 801046a:	d817      	bhi.n	801049c <USBD_LL_OpenEP+0x6c>
 801046c:	a201      	add	r2, pc, #4	; (adr r2, 8010474 <USBD_LL_OpenEP+0x44>)
 801046e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010472:	bf00      	nop
 8010474:	08010485 	.word	0x08010485
 8010478:	0801048b 	.word	0x0801048b
 801047c:	08010491 	.word	0x08010491
 8010480:	08010497 	.word	0x08010497
    case HAL_OK :
      usb_status = USBD_OK;
 8010484:	2300      	movs	r3, #0
 8010486:	73fb      	strb	r3, [r7, #15]
    break;
 8010488:	e00b      	b.n	80104a2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801048a:	2303      	movs	r3, #3
 801048c:	73fb      	strb	r3, [r7, #15]
    break;
 801048e:	e008      	b.n	80104a2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010490:	2301      	movs	r3, #1
 8010492:	73fb      	strb	r3, [r7, #15]
    break;
 8010494:	e005      	b.n	80104a2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010496:	2303      	movs	r3, #3
 8010498:	73fb      	strb	r3, [r7, #15]
    break;
 801049a:	e002      	b.n	80104a2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801049c:	2303      	movs	r3, #3
 801049e:	73fb      	strb	r3, [r7, #15]
    break;
 80104a0:	bf00      	nop
  }
  return usb_status;
 80104a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	460b      	mov	r3, r1
 80104b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104b8:	2300      	movs	r3, #0
 80104ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104bc:	2300      	movs	r3, #0
 80104be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104c6:	78fa      	ldrb	r2, [r7, #3]
 80104c8:	4611      	mov	r1, r2
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7f4 f93c 	bl	8004748 <HAL_PCD_EP_Close>
 80104d0:	4603      	mov	r3, r0
 80104d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80104d4:	7bbb      	ldrb	r3, [r7, #14]
 80104d6:	2b03      	cmp	r3, #3
 80104d8:	d816      	bhi.n	8010508 <USBD_LL_CloseEP+0x5c>
 80104da:	a201      	add	r2, pc, #4	; (adr r2, 80104e0 <USBD_LL_CloseEP+0x34>)
 80104dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104e0:	080104f1 	.word	0x080104f1
 80104e4:	080104f7 	.word	0x080104f7
 80104e8:	080104fd 	.word	0x080104fd
 80104ec:	08010503 	.word	0x08010503
    case HAL_OK :
      usb_status = USBD_OK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	73fb      	strb	r3, [r7, #15]
    break;
 80104f4:	e00b      	b.n	801050e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80104f6:	2303      	movs	r3, #3
 80104f8:	73fb      	strb	r3, [r7, #15]
    break;
 80104fa:	e008      	b.n	801050e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80104fc:	2301      	movs	r3, #1
 80104fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010500:	e005      	b.n	801050e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010502:	2303      	movs	r3, #3
 8010504:	73fb      	strb	r3, [r7, #15]
    break;
 8010506:	e002      	b.n	801050e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010508:	2303      	movs	r3, #3
 801050a:	73fb      	strb	r3, [r7, #15]
    break;
 801050c:	bf00      	nop
  }
  return usb_status;
 801050e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010510:	4618      	mov	r0, r3
 8010512:	3710      	adds	r7, #16
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	460b      	mov	r3, r1
 8010522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010524:	2300      	movs	r3, #0
 8010526:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010528:	2300      	movs	r3, #0
 801052a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010532:	78fa      	ldrb	r2, [r7, #3]
 8010534:	4611      	mov	r1, r2
 8010536:	4618      	mov	r0, r3
 8010538:	f7f4 f9cb 	bl	80048d2 <HAL_PCD_EP_SetStall>
 801053c:	4603      	mov	r3, r0
 801053e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010540:	7bbb      	ldrb	r3, [r7, #14]
 8010542:	2b03      	cmp	r3, #3
 8010544:	d816      	bhi.n	8010574 <USBD_LL_StallEP+0x5c>
 8010546:	a201      	add	r2, pc, #4	; (adr r2, 801054c <USBD_LL_StallEP+0x34>)
 8010548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801054c:	0801055d 	.word	0x0801055d
 8010550:	08010563 	.word	0x08010563
 8010554:	08010569 	.word	0x08010569
 8010558:	0801056f 	.word	0x0801056f
    case HAL_OK :
      usb_status = USBD_OK;
 801055c:	2300      	movs	r3, #0
 801055e:	73fb      	strb	r3, [r7, #15]
    break;
 8010560:	e00b      	b.n	801057a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010562:	2303      	movs	r3, #3
 8010564:	73fb      	strb	r3, [r7, #15]
    break;
 8010566:	e008      	b.n	801057a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010568:	2301      	movs	r3, #1
 801056a:	73fb      	strb	r3, [r7, #15]
    break;
 801056c:	e005      	b.n	801057a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801056e:	2303      	movs	r3, #3
 8010570:	73fb      	strb	r3, [r7, #15]
    break;
 8010572:	e002      	b.n	801057a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010574:	2303      	movs	r3, #3
 8010576:	73fb      	strb	r3, [r7, #15]
    break;
 8010578:	bf00      	nop
  }
  return usb_status;
 801057a:	7bfb      	ldrb	r3, [r7, #15]
}
 801057c:	4618      	mov	r0, r3
 801057e:	3710      	adds	r7, #16
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	460b      	mov	r3, r1
 801058e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010590:	2300      	movs	r3, #0
 8010592:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010594:	2300      	movs	r3, #0
 8010596:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801059e:	78fa      	ldrb	r2, [r7, #3]
 80105a0:	4611      	mov	r1, r2
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7f4 f9f7 	bl	8004996 <HAL_PCD_EP_ClrStall>
 80105a8:	4603      	mov	r3, r0
 80105aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80105ac:	7bbb      	ldrb	r3, [r7, #14]
 80105ae:	2b03      	cmp	r3, #3
 80105b0:	d816      	bhi.n	80105e0 <USBD_LL_ClearStallEP+0x5c>
 80105b2:	a201      	add	r2, pc, #4	; (adr r2, 80105b8 <USBD_LL_ClearStallEP+0x34>)
 80105b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b8:	080105c9 	.word	0x080105c9
 80105bc:	080105cf 	.word	0x080105cf
 80105c0:	080105d5 	.word	0x080105d5
 80105c4:	080105db 	.word	0x080105db
    case HAL_OK :
      usb_status = USBD_OK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	73fb      	strb	r3, [r7, #15]
    break;
 80105cc:	e00b      	b.n	80105e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80105ce:	2303      	movs	r3, #3
 80105d0:	73fb      	strb	r3, [r7, #15]
    break;
 80105d2:	e008      	b.n	80105e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80105d4:	2301      	movs	r3, #1
 80105d6:	73fb      	strb	r3, [r7, #15]
    break;
 80105d8:	e005      	b.n	80105e6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80105da:	2303      	movs	r3, #3
 80105dc:	73fb      	strb	r3, [r7, #15]
    break;
 80105de:	e002      	b.n	80105e6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80105e0:	2303      	movs	r3, #3
 80105e2:	73fb      	strb	r3, [r7, #15]
    break;
 80105e4:	bf00      	nop
  }
  return usb_status;
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3710      	adds	r7, #16
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b085      	sub	sp, #20
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	460b      	mov	r3, r1
 80105fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010602:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010608:	2b00      	cmp	r3, #0
 801060a:	da0b      	bge.n	8010624 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801060c:	78fb      	ldrb	r3, [r7, #3]
 801060e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010612:	68f9      	ldr	r1, [r7, #12]
 8010614:	4613      	mov	r3, r2
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	4413      	add	r3, r2
 801061a:	009b      	lsls	r3, r3, #2
 801061c:	440b      	add	r3, r1
 801061e:	333e      	adds	r3, #62	; 0x3e
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	e00b      	b.n	801063c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010624:	78fb      	ldrb	r3, [r7, #3]
 8010626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801062a:	68f9      	ldr	r1, [r7, #12]
 801062c:	4613      	mov	r3, r2
 801062e:	00db      	lsls	r3, r3, #3
 8010630:	4413      	add	r3, r2
 8010632:	009b      	lsls	r3, r3, #2
 8010634:	440b      	add	r3, r1
 8010636:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801063a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801063c:	4618      	mov	r0, r3
 801063e:	3714      	adds	r7, #20
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	460b      	mov	r3, r1
 8010652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010654:	2300      	movs	r3, #0
 8010656:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010658:	2300      	movs	r3, #0
 801065a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010662:	78fa      	ldrb	r2, [r7, #3]
 8010664:	4611      	mov	r1, r2
 8010666:	4618      	mov	r0, r3
 8010668:	f7f3 ffe1 	bl	800462e <HAL_PCD_SetAddress>
 801066c:	4603      	mov	r3, r0
 801066e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010670:	7bbb      	ldrb	r3, [r7, #14]
 8010672:	2b03      	cmp	r3, #3
 8010674:	d816      	bhi.n	80106a4 <USBD_LL_SetUSBAddress+0x5c>
 8010676:	a201      	add	r2, pc, #4	; (adr r2, 801067c <USBD_LL_SetUSBAddress+0x34>)
 8010678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801067c:	0801068d 	.word	0x0801068d
 8010680:	08010693 	.word	0x08010693
 8010684:	08010699 	.word	0x08010699
 8010688:	0801069f 	.word	0x0801069f
    case HAL_OK :
      usb_status = USBD_OK;
 801068c:	2300      	movs	r3, #0
 801068e:	73fb      	strb	r3, [r7, #15]
    break;
 8010690:	e00b      	b.n	80106aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010692:	2303      	movs	r3, #3
 8010694:	73fb      	strb	r3, [r7, #15]
    break;
 8010696:	e008      	b.n	80106aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010698:	2301      	movs	r3, #1
 801069a:	73fb      	strb	r3, [r7, #15]
    break;
 801069c:	e005      	b.n	80106aa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801069e:	2303      	movs	r3, #3
 80106a0:	73fb      	strb	r3, [r7, #15]
    break;
 80106a2:	e002      	b.n	80106aa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80106a4:	2303      	movs	r3, #3
 80106a6:	73fb      	strb	r3, [r7, #15]
    break;
 80106a8:	bf00      	nop
  }
  return usb_status;
 80106aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3710      	adds	r7, #16
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b086      	sub	sp, #24
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	607a      	str	r2, [r7, #4]
 80106be:	603b      	str	r3, [r7, #0]
 80106c0:	460b      	mov	r3, r1
 80106c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106c4:	2300      	movs	r3, #0
 80106c6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106c8:	2300      	movs	r3, #0
 80106ca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80106d2:	7af9      	ldrb	r1, [r7, #11]
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	f7f4 f8ca 	bl	8004870 <HAL_PCD_EP_Transmit>
 80106dc:	4603      	mov	r3, r0
 80106de:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80106e0:	7dbb      	ldrb	r3, [r7, #22]
 80106e2:	2b03      	cmp	r3, #3
 80106e4:	d816      	bhi.n	8010714 <USBD_LL_Transmit+0x60>
 80106e6:	a201      	add	r2, pc, #4	; (adr r2, 80106ec <USBD_LL_Transmit+0x38>)
 80106e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ec:	080106fd 	.word	0x080106fd
 80106f0:	08010703 	.word	0x08010703
 80106f4:	08010709 	.word	0x08010709
 80106f8:	0801070f 	.word	0x0801070f
    case HAL_OK :
      usb_status = USBD_OK;
 80106fc:	2300      	movs	r3, #0
 80106fe:	75fb      	strb	r3, [r7, #23]
    break;
 8010700:	e00b      	b.n	801071a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010702:	2303      	movs	r3, #3
 8010704:	75fb      	strb	r3, [r7, #23]
    break;
 8010706:	e008      	b.n	801071a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010708:	2301      	movs	r3, #1
 801070a:	75fb      	strb	r3, [r7, #23]
    break;
 801070c:	e005      	b.n	801071a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801070e:	2303      	movs	r3, #3
 8010710:	75fb      	strb	r3, [r7, #23]
    break;
 8010712:	e002      	b.n	801071a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010714:	2303      	movs	r3, #3
 8010716:	75fb      	strb	r3, [r7, #23]
    break;
 8010718:	bf00      	nop
  }
  return usb_status;
 801071a:	7dfb      	ldrb	r3, [r7, #23]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3718      	adds	r7, #24
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b086      	sub	sp, #24
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	607a      	str	r2, [r7, #4]
 801072e:	603b      	str	r3, [r7, #0]
 8010730:	460b      	mov	r3, r1
 8010732:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010734:	2300      	movs	r3, #0
 8010736:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010738:	2300      	movs	r3, #0
 801073a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010742:	7af9      	ldrb	r1, [r7, #11]
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	f7f4 f848 	bl	80047dc <HAL_PCD_EP_Receive>
 801074c:	4603      	mov	r3, r0
 801074e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010750:	7dbb      	ldrb	r3, [r7, #22]
 8010752:	2b03      	cmp	r3, #3
 8010754:	d816      	bhi.n	8010784 <USBD_LL_PrepareReceive+0x60>
 8010756:	a201      	add	r2, pc, #4	; (adr r2, 801075c <USBD_LL_PrepareReceive+0x38>)
 8010758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801075c:	0801076d 	.word	0x0801076d
 8010760:	08010773 	.word	0x08010773
 8010764:	08010779 	.word	0x08010779
 8010768:	0801077f 	.word	0x0801077f
    case HAL_OK :
      usb_status = USBD_OK;
 801076c:	2300      	movs	r3, #0
 801076e:	75fb      	strb	r3, [r7, #23]
    break;
 8010770:	e00b      	b.n	801078a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010772:	2303      	movs	r3, #3
 8010774:	75fb      	strb	r3, [r7, #23]
    break;
 8010776:	e008      	b.n	801078a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010778:	2301      	movs	r3, #1
 801077a:	75fb      	strb	r3, [r7, #23]
    break;
 801077c:	e005      	b.n	801078a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801077e:	2303      	movs	r3, #3
 8010780:	75fb      	strb	r3, [r7, #23]
    break;
 8010782:	e002      	b.n	801078a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010784:	2303      	movs	r3, #3
 8010786:	75fb      	strb	r3, [r7, #23]
    break;
 8010788:	bf00      	nop
  }
  return usb_status;
 801078a:	7dfb      	ldrb	r3, [r7, #23]
}
 801078c:	4618      	mov	r0, r3
 801078e:	3718      	adds	r7, #24
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	460b      	mov	r3, r1
 801079e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107a6:	78fa      	ldrb	r2, [r7, #3]
 80107a8:	4611      	mov	r1, r2
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7f4 f848 	bl	8004840 <HAL_PCD_EP_GetRxCount>
 80107b0:	4603      	mov	r3, r0
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3708      	adds	r7, #8
 80107b6:	46bd      	mov	sp, r7
 80107b8:	bd80      	pop	{r7, pc}
	...

080107bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	460b      	mov	r3, r1
 80107c6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80107c8:	78fb      	ldrb	r3, [r7, #3]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d002      	beq.n	80107d4 <HAL_PCDEx_LPM_Callback+0x18>
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d01f      	beq.n	8010812 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80107d2:	e03b      	b.n	801084c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6a1b      	ldr	r3, [r3, #32]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d007      	beq.n	80107ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80107dc:	f000 f854 	bl	8010888 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80107e0:	4b1c      	ldr	r3, [pc, #112]	; (8010854 <HAL_PCDEx_LPM_Callback+0x98>)
 80107e2:	691b      	ldr	r3, [r3, #16]
 80107e4:	4a1b      	ldr	r2, [pc, #108]	; (8010854 <HAL_PCDEx_LPM_Callback+0x98>)
 80107e6:	f023 0306 	bic.w	r3, r3, #6
 80107ea:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	6812      	ldr	r2, [r2, #0]
 80107fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107fe:	f023 0301 	bic.w	r3, r3, #1
 8010802:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801080a:	4618      	mov	r0, r3
 801080c:	f7fb fbe7 	bl	800bfde <USBD_LL_Resume>
    break;
 8010810:	e01c      	b.n	801084c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	6812      	ldr	r2, [r2, #0]
 8010820:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010824:	f043 0301 	orr.w	r3, r3, #1
 8010828:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010830:	4618      	mov	r0, r3
 8010832:	f7fb fbb8 	bl	800bfa6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	6a1b      	ldr	r3, [r3, #32]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d005      	beq.n	801084a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801083e:	4b05      	ldr	r3, [pc, #20]	; (8010854 <HAL_PCDEx_LPM_Callback+0x98>)
 8010840:	691b      	ldr	r3, [r3, #16]
 8010842:	4a04      	ldr	r2, [pc, #16]	; (8010854 <HAL_PCDEx_LPM_Callback+0x98>)
 8010844:	f043 0306 	orr.w	r3, r3, #6
 8010848:	6113      	str	r3, [r2, #16]
    break;
 801084a:	bf00      	nop
}
 801084c:	bf00      	nop
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	e000ed00 	.word	0xe000ed00

08010858 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010860:	4b03      	ldr	r3, [pc, #12]	; (8010870 <USBD_static_malloc+0x18>)
}
 8010862:	4618      	mov	r0, r3
 8010864:	370c      	adds	r7, #12
 8010866:	46bd      	mov	sp, r7
 8010868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086c:	4770      	bx	lr
 801086e:	bf00      	nop
 8010870:	2000c190 	.word	0x2000c190

08010874 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]

}
 801087c:	bf00      	nop
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr

08010888 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801088c:	f7f0 fbb2 	bl	8000ff4 <SystemClock_Config>
}
 8010890:	bf00      	nop
 8010892:	bd80      	pop	{r7, pc}

08010894 <__cvt>:
 8010894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010898:	ec55 4b10 	vmov	r4, r5, d0
 801089c:	2d00      	cmp	r5, #0
 801089e:	460e      	mov	r6, r1
 80108a0:	4619      	mov	r1, r3
 80108a2:	462b      	mov	r3, r5
 80108a4:	bfbb      	ittet	lt
 80108a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80108aa:	461d      	movlt	r5, r3
 80108ac:	2300      	movge	r3, #0
 80108ae:	232d      	movlt	r3, #45	; 0x2d
 80108b0:	700b      	strb	r3, [r1, #0]
 80108b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80108b8:	4691      	mov	r9, r2
 80108ba:	f023 0820 	bic.w	r8, r3, #32
 80108be:	bfbc      	itt	lt
 80108c0:	4622      	movlt	r2, r4
 80108c2:	4614      	movlt	r4, r2
 80108c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80108c8:	d005      	beq.n	80108d6 <__cvt+0x42>
 80108ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80108ce:	d100      	bne.n	80108d2 <__cvt+0x3e>
 80108d0:	3601      	adds	r6, #1
 80108d2:	2102      	movs	r1, #2
 80108d4:	e000      	b.n	80108d8 <__cvt+0x44>
 80108d6:	2103      	movs	r1, #3
 80108d8:	ab03      	add	r3, sp, #12
 80108da:	9301      	str	r3, [sp, #4]
 80108dc:	ab02      	add	r3, sp, #8
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	ec45 4b10 	vmov	d0, r4, r5
 80108e4:	4653      	mov	r3, sl
 80108e6:	4632      	mov	r2, r6
 80108e8:	f001 f8ae 	bl	8011a48 <_dtoa_r>
 80108ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80108f0:	4607      	mov	r7, r0
 80108f2:	d102      	bne.n	80108fa <__cvt+0x66>
 80108f4:	f019 0f01 	tst.w	r9, #1
 80108f8:	d022      	beq.n	8010940 <__cvt+0xac>
 80108fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80108fe:	eb07 0906 	add.w	r9, r7, r6
 8010902:	d110      	bne.n	8010926 <__cvt+0x92>
 8010904:	783b      	ldrb	r3, [r7, #0]
 8010906:	2b30      	cmp	r3, #48	; 0x30
 8010908:	d10a      	bne.n	8010920 <__cvt+0x8c>
 801090a:	2200      	movs	r2, #0
 801090c:	2300      	movs	r3, #0
 801090e:	4620      	mov	r0, r4
 8010910:	4629      	mov	r1, r5
 8010912:	f7f0 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8010916:	b918      	cbnz	r0, 8010920 <__cvt+0x8c>
 8010918:	f1c6 0601 	rsb	r6, r6, #1
 801091c:	f8ca 6000 	str.w	r6, [sl]
 8010920:	f8da 3000 	ldr.w	r3, [sl]
 8010924:	4499      	add	r9, r3
 8010926:	2200      	movs	r2, #0
 8010928:	2300      	movs	r3, #0
 801092a:	4620      	mov	r0, r4
 801092c:	4629      	mov	r1, r5
 801092e:	f7f0 f8cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8010932:	b108      	cbz	r0, 8010938 <__cvt+0xa4>
 8010934:	f8cd 900c 	str.w	r9, [sp, #12]
 8010938:	2230      	movs	r2, #48	; 0x30
 801093a:	9b03      	ldr	r3, [sp, #12]
 801093c:	454b      	cmp	r3, r9
 801093e:	d307      	bcc.n	8010950 <__cvt+0xbc>
 8010940:	9b03      	ldr	r3, [sp, #12]
 8010942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010944:	1bdb      	subs	r3, r3, r7
 8010946:	4638      	mov	r0, r7
 8010948:	6013      	str	r3, [r2, #0]
 801094a:	b004      	add	sp, #16
 801094c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010950:	1c59      	adds	r1, r3, #1
 8010952:	9103      	str	r1, [sp, #12]
 8010954:	701a      	strb	r2, [r3, #0]
 8010956:	e7f0      	b.n	801093a <__cvt+0xa6>

08010958 <__exponent>:
 8010958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801095a:	4603      	mov	r3, r0
 801095c:	2900      	cmp	r1, #0
 801095e:	bfb8      	it	lt
 8010960:	4249      	neglt	r1, r1
 8010962:	f803 2b02 	strb.w	r2, [r3], #2
 8010966:	bfb4      	ite	lt
 8010968:	222d      	movlt	r2, #45	; 0x2d
 801096a:	222b      	movge	r2, #43	; 0x2b
 801096c:	2909      	cmp	r1, #9
 801096e:	7042      	strb	r2, [r0, #1]
 8010970:	dd2a      	ble.n	80109c8 <__exponent+0x70>
 8010972:	f10d 0207 	add.w	r2, sp, #7
 8010976:	4617      	mov	r7, r2
 8010978:	260a      	movs	r6, #10
 801097a:	4694      	mov	ip, r2
 801097c:	fb91 f5f6 	sdiv	r5, r1, r6
 8010980:	fb06 1415 	mls	r4, r6, r5, r1
 8010984:	3430      	adds	r4, #48	; 0x30
 8010986:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801098a:	460c      	mov	r4, r1
 801098c:	2c63      	cmp	r4, #99	; 0x63
 801098e:	f102 32ff 	add.w	r2, r2, #4294967295
 8010992:	4629      	mov	r1, r5
 8010994:	dcf1      	bgt.n	801097a <__exponent+0x22>
 8010996:	3130      	adds	r1, #48	; 0x30
 8010998:	f1ac 0402 	sub.w	r4, ip, #2
 801099c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80109a0:	1c41      	adds	r1, r0, #1
 80109a2:	4622      	mov	r2, r4
 80109a4:	42ba      	cmp	r2, r7
 80109a6:	d30a      	bcc.n	80109be <__exponent+0x66>
 80109a8:	f10d 0209 	add.w	r2, sp, #9
 80109ac:	eba2 020c 	sub.w	r2, r2, ip
 80109b0:	42bc      	cmp	r4, r7
 80109b2:	bf88      	it	hi
 80109b4:	2200      	movhi	r2, #0
 80109b6:	4413      	add	r3, r2
 80109b8:	1a18      	subs	r0, r3, r0
 80109ba:	b003      	add	sp, #12
 80109bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80109c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80109c6:	e7ed      	b.n	80109a4 <__exponent+0x4c>
 80109c8:	2330      	movs	r3, #48	; 0x30
 80109ca:	3130      	adds	r1, #48	; 0x30
 80109cc:	7083      	strb	r3, [r0, #2]
 80109ce:	70c1      	strb	r1, [r0, #3]
 80109d0:	1d03      	adds	r3, r0, #4
 80109d2:	e7f1      	b.n	80109b8 <__exponent+0x60>

080109d4 <_printf_float>:
 80109d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d8:	ed2d 8b02 	vpush	{d8}
 80109dc:	b08d      	sub	sp, #52	; 0x34
 80109de:	460c      	mov	r4, r1
 80109e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80109e4:	4616      	mov	r6, r2
 80109e6:	461f      	mov	r7, r3
 80109e8:	4605      	mov	r5, r0
 80109ea:	f000 ff19 	bl	8011820 <_localeconv_r>
 80109ee:	f8d0 a000 	ldr.w	sl, [r0]
 80109f2:	4650      	mov	r0, sl
 80109f4:	f7ef fc3c 	bl	8000270 <strlen>
 80109f8:	2300      	movs	r3, #0
 80109fa:	930a      	str	r3, [sp, #40]	; 0x28
 80109fc:	6823      	ldr	r3, [r4, #0]
 80109fe:	9305      	str	r3, [sp, #20]
 8010a00:	f8d8 3000 	ldr.w	r3, [r8]
 8010a04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010a08:	3307      	adds	r3, #7
 8010a0a:	f023 0307 	bic.w	r3, r3, #7
 8010a0e:	f103 0208 	add.w	r2, r3, #8
 8010a12:	f8c8 2000 	str.w	r2, [r8]
 8010a16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010a1e:	9307      	str	r3, [sp, #28]
 8010a20:	f8cd 8018 	str.w	r8, [sp, #24]
 8010a24:	ee08 0a10 	vmov	s16, r0
 8010a28:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010a2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a30:	4b9e      	ldr	r3, [pc, #632]	; (8010cac <_printf_float+0x2d8>)
 8010a32:	f04f 32ff 	mov.w	r2, #4294967295
 8010a36:	f7f0 f879 	bl	8000b2c <__aeabi_dcmpun>
 8010a3a:	bb88      	cbnz	r0, 8010aa0 <_printf_float+0xcc>
 8010a3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a40:	4b9a      	ldr	r3, [pc, #616]	; (8010cac <_printf_float+0x2d8>)
 8010a42:	f04f 32ff 	mov.w	r2, #4294967295
 8010a46:	f7f0 f853 	bl	8000af0 <__aeabi_dcmple>
 8010a4a:	bb48      	cbnz	r0, 8010aa0 <_printf_float+0xcc>
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	2300      	movs	r3, #0
 8010a50:	4640      	mov	r0, r8
 8010a52:	4649      	mov	r1, r9
 8010a54:	f7f0 f842 	bl	8000adc <__aeabi_dcmplt>
 8010a58:	b110      	cbz	r0, 8010a60 <_printf_float+0x8c>
 8010a5a:	232d      	movs	r3, #45	; 0x2d
 8010a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a60:	4a93      	ldr	r2, [pc, #588]	; (8010cb0 <_printf_float+0x2dc>)
 8010a62:	4b94      	ldr	r3, [pc, #592]	; (8010cb4 <_printf_float+0x2e0>)
 8010a64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010a68:	bf94      	ite	ls
 8010a6a:	4690      	movls	r8, r2
 8010a6c:	4698      	movhi	r8, r3
 8010a6e:	2303      	movs	r3, #3
 8010a70:	6123      	str	r3, [r4, #16]
 8010a72:	9b05      	ldr	r3, [sp, #20]
 8010a74:	f023 0304 	bic.w	r3, r3, #4
 8010a78:	6023      	str	r3, [r4, #0]
 8010a7a:	f04f 0900 	mov.w	r9, #0
 8010a7e:	9700      	str	r7, [sp, #0]
 8010a80:	4633      	mov	r3, r6
 8010a82:	aa0b      	add	r2, sp, #44	; 0x2c
 8010a84:	4621      	mov	r1, r4
 8010a86:	4628      	mov	r0, r5
 8010a88:	f000 f9da 	bl	8010e40 <_printf_common>
 8010a8c:	3001      	adds	r0, #1
 8010a8e:	f040 8090 	bne.w	8010bb2 <_printf_float+0x1de>
 8010a92:	f04f 30ff 	mov.w	r0, #4294967295
 8010a96:	b00d      	add	sp, #52	; 0x34
 8010a98:	ecbd 8b02 	vpop	{d8}
 8010a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aa0:	4642      	mov	r2, r8
 8010aa2:	464b      	mov	r3, r9
 8010aa4:	4640      	mov	r0, r8
 8010aa6:	4649      	mov	r1, r9
 8010aa8:	f7f0 f840 	bl	8000b2c <__aeabi_dcmpun>
 8010aac:	b140      	cbz	r0, 8010ac0 <_printf_float+0xec>
 8010aae:	464b      	mov	r3, r9
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	bfbc      	itt	lt
 8010ab4:	232d      	movlt	r3, #45	; 0x2d
 8010ab6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010aba:	4a7f      	ldr	r2, [pc, #508]	; (8010cb8 <_printf_float+0x2e4>)
 8010abc:	4b7f      	ldr	r3, [pc, #508]	; (8010cbc <_printf_float+0x2e8>)
 8010abe:	e7d1      	b.n	8010a64 <_printf_float+0x90>
 8010ac0:	6863      	ldr	r3, [r4, #4]
 8010ac2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010ac6:	9206      	str	r2, [sp, #24]
 8010ac8:	1c5a      	adds	r2, r3, #1
 8010aca:	d13f      	bne.n	8010b4c <_printf_float+0x178>
 8010acc:	2306      	movs	r3, #6
 8010ace:	6063      	str	r3, [r4, #4]
 8010ad0:	9b05      	ldr	r3, [sp, #20]
 8010ad2:	6861      	ldr	r1, [r4, #4]
 8010ad4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010ad8:	2300      	movs	r3, #0
 8010ada:	9303      	str	r3, [sp, #12]
 8010adc:	ab0a      	add	r3, sp, #40	; 0x28
 8010ade:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010ae2:	ab09      	add	r3, sp, #36	; 0x24
 8010ae4:	ec49 8b10 	vmov	d0, r8, r9
 8010ae8:	9300      	str	r3, [sp, #0]
 8010aea:	6022      	str	r2, [r4, #0]
 8010aec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010af0:	4628      	mov	r0, r5
 8010af2:	f7ff fecf 	bl	8010894 <__cvt>
 8010af6:	9b06      	ldr	r3, [sp, #24]
 8010af8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010afa:	2b47      	cmp	r3, #71	; 0x47
 8010afc:	4680      	mov	r8, r0
 8010afe:	d108      	bne.n	8010b12 <_printf_float+0x13e>
 8010b00:	1cc8      	adds	r0, r1, #3
 8010b02:	db02      	blt.n	8010b0a <_printf_float+0x136>
 8010b04:	6863      	ldr	r3, [r4, #4]
 8010b06:	4299      	cmp	r1, r3
 8010b08:	dd41      	ble.n	8010b8e <_printf_float+0x1ba>
 8010b0a:	f1ab 0302 	sub.w	r3, fp, #2
 8010b0e:	fa5f fb83 	uxtb.w	fp, r3
 8010b12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010b16:	d820      	bhi.n	8010b5a <_printf_float+0x186>
 8010b18:	3901      	subs	r1, #1
 8010b1a:	465a      	mov	r2, fp
 8010b1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010b20:	9109      	str	r1, [sp, #36]	; 0x24
 8010b22:	f7ff ff19 	bl	8010958 <__exponent>
 8010b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b28:	1813      	adds	r3, r2, r0
 8010b2a:	2a01      	cmp	r2, #1
 8010b2c:	4681      	mov	r9, r0
 8010b2e:	6123      	str	r3, [r4, #16]
 8010b30:	dc02      	bgt.n	8010b38 <_printf_float+0x164>
 8010b32:	6822      	ldr	r2, [r4, #0]
 8010b34:	07d2      	lsls	r2, r2, #31
 8010b36:	d501      	bpl.n	8010b3c <_printf_float+0x168>
 8010b38:	3301      	adds	r3, #1
 8010b3a:	6123      	str	r3, [r4, #16]
 8010b3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d09c      	beq.n	8010a7e <_printf_float+0xaa>
 8010b44:	232d      	movs	r3, #45	; 0x2d
 8010b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b4a:	e798      	b.n	8010a7e <_printf_float+0xaa>
 8010b4c:	9a06      	ldr	r2, [sp, #24]
 8010b4e:	2a47      	cmp	r2, #71	; 0x47
 8010b50:	d1be      	bne.n	8010ad0 <_printf_float+0xfc>
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1bc      	bne.n	8010ad0 <_printf_float+0xfc>
 8010b56:	2301      	movs	r3, #1
 8010b58:	e7b9      	b.n	8010ace <_printf_float+0xfa>
 8010b5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010b5e:	d118      	bne.n	8010b92 <_printf_float+0x1be>
 8010b60:	2900      	cmp	r1, #0
 8010b62:	6863      	ldr	r3, [r4, #4]
 8010b64:	dd0b      	ble.n	8010b7e <_printf_float+0x1aa>
 8010b66:	6121      	str	r1, [r4, #16]
 8010b68:	b913      	cbnz	r3, 8010b70 <_printf_float+0x19c>
 8010b6a:	6822      	ldr	r2, [r4, #0]
 8010b6c:	07d0      	lsls	r0, r2, #31
 8010b6e:	d502      	bpl.n	8010b76 <_printf_float+0x1a2>
 8010b70:	3301      	adds	r3, #1
 8010b72:	440b      	add	r3, r1
 8010b74:	6123      	str	r3, [r4, #16]
 8010b76:	65a1      	str	r1, [r4, #88]	; 0x58
 8010b78:	f04f 0900 	mov.w	r9, #0
 8010b7c:	e7de      	b.n	8010b3c <_printf_float+0x168>
 8010b7e:	b913      	cbnz	r3, 8010b86 <_printf_float+0x1b2>
 8010b80:	6822      	ldr	r2, [r4, #0]
 8010b82:	07d2      	lsls	r2, r2, #31
 8010b84:	d501      	bpl.n	8010b8a <_printf_float+0x1b6>
 8010b86:	3302      	adds	r3, #2
 8010b88:	e7f4      	b.n	8010b74 <_printf_float+0x1a0>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e7f2      	b.n	8010b74 <_printf_float+0x1a0>
 8010b8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b94:	4299      	cmp	r1, r3
 8010b96:	db05      	blt.n	8010ba4 <_printf_float+0x1d0>
 8010b98:	6823      	ldr	r3, [r4, #0]
 8010b9a:	6121      	str	r1, [r4, #16]
 8010b9c:	07d8      	lsls	r0, r3, #31
 8010b9e:	d5ea      	bpl.n	8010b76 <_printf_float+0x1a2>
 8010ba0:	1c4b      	adds	r3, r1, #1
 8010ba2:	e7e7      	b.n	8010b74 <_printf_float+0x1a0>
 8010ba4:	2900      	cmp	r1, #0
 8010ba6:	bfd4      	ite	le
 8010ba8:	f1c1 0202 	rsble	r2, r1, #2
 8010bac:	2201      	movgt	r2, #1
 8010bae:	4413      	add	r3, r2
 8010bb0:	e7e0      	b.n	8010b74 <_printf_float+0x1a0>
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	055a      	lsls	r2, r3, #21
 8010bb6:	d407      	bmi.n	8010bc8 <_printf_float+0x1f4>
 8010bb8:	6923      	ldr	r3, [r4, #16]
 8010bba:	4642      	mov	r2, r8
 8010bbc:	4631      	mov	r1, r6
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	47b8      	blx	r7
 8010bc2:	3001      	adds	r0, #1
 8010bc4:	d12c      	bne.n	8010c20 <_printf_float+0x24c>
 8010bc6:	e764      	b.n	8010a92 <_printf_float+0xbe>
 8010bc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010bcc:	f240 80e0 	bls.w	8010d90 <_printf_float+0x3bc>
 8010bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	f7ef ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	d034      	beq.n	8010c4a <_printf_float+0x276>
 8010be0:	4a37      	ldr	r2, [pc, #220]	; (8010cc0 <_printf_float+0x2ec>)
 8010be2:	2301      	movs	r3, #1
 8010be4:	4631      	mov	r1, r6
 8010be6:	4628      	mov	r0, r5
 8010be8:	47b8      	blx	r7
 8010bea:	3001      	adds	r0, #1
 8010bec:	f43f af51 	beq.w	8010a92 <_printf_float+0xbe>
 8010bf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	db02      	blt.n	8010bfe <_printf_float+0x22a>
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	07d8      	lsls	r0, r3, #31
 8010bfc:	d510      	bpl.n	8010c20 <_printf_float+0x24c>
 8010bfe:	ee18 3a10 	vmov	r3, s16
 8010c02:	4652      	mov	r2, sl
 8010c04:	4631      	mov	r1, r6
 8010c06:	4628      	mov	r0, r5
 8010c08:	47b8      	blx	r7
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	f43f af41 	beq.w	8010a92 <_printf_float+0xbe>
 8010c10:	f04f 0800 	mov.w	r8, #0
 8010c14:	f104 091a 	add.w	r9, r4, #26
 8010c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c1a:	3b01      	subs	r3, #1
 8010c1c:	4543      	cmp	r3, r8
 8010c1e:	dc09      	bgt.n	8010c34 <_printf_float+0x260>
 8010c20:	6823      	ldr	r3, [r4, #0]
 8010c22:	079b      	lsls	r3, r3, #30
 8010c24:	f100 8107 	bmi.w	8010e36 <_printf_float+0x462>
 8010c28:	68e0      	ldr	r0, [r4, #12]
 8010c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c2c:	4298      	cmp	r0, r3
 8010c2e:	bfb8      	it	lt
 8010c30:	4618      	movlt	r0, r3
 8010c32:	e730      	b.n	8010a96 <_printf_float+0xc2>
 8010c34:	2301      	movs	r3, #1
 8010c36:	464a      	mov	r2, r9
 8010c38:	4631      	mov	r1, r6
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	47b8      	blx	r7
 8010c3e:	3001      	adds	r0, #1
 8010c40:	f43f af27 	beq.w	8010a92 <_printf_float+0xbe>
 8010c44:	f108 0801 	add.w	r8, r8, #1
 8010c48:	e7e6      	b.n	8010c18 <_printf_float+0x244>
 8010c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	dc39      	bgt.n	8010cc4 <_printf_float+0x2f0>
 8010c50:	4a1b      	ldr	r2, [pc, #108]	; (8010cc0 <_printf_float+0x2ec>)
 8010c52:	2301      	movs	r3, #1
 8010c54:	4631      	mov	r1, r6
 8010c56:	4628      	mov	r0, r5
 8010c58:	47b8      	blx	r7
 8010c5a:	3001      	adds	r0, #1
 8010c5c:	f43f af19 	beq.w	8010a92 <_printf_float+0xbe>
 8010c60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010c64:	4313      	orrs	r3, r2
 8010c66:	d102      	bne.n	8010c6e <_printf_float+0x29a>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	07d9      	lsls	r1, r3, #31
 8010c6c:	d5d8      	bpl.n	8010c20 <_printf_float+0x24c>
 8010c6e:	ee18 3a10 	vmov	r3, s16
 8010c72:	4652      	mov	r2, sl
 8010c74:	4631      	mov	r1, r6
 8010c76:	4628      	mov	r0, r5
 8010c78:	47b8      	blx	r7
 8010c7a:	3001      	adds	r0, #1
 8010c7c:	f43f af09 	beq.w	8010a92 <_printf_float+0xbe>
 8010c80:	f04f 0900 	mov.w	r9, #0
 8010c84:	f104 0a1a 	add.w	sl, r4, #26
 8010c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c8a:	425b      	negs	r3, r3
 8010c8c:	454b      	cmp	r3, r9
 8010c8e:	dc01      	bgt.n	8010c94 <_printf_float+0x2c0>
 8010c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c92:	e792      	b.n	8010bba <_printf_float+0x1e6>
 8010c94:	2301      	movs	r3, #1
 8010c96:	4652      	mov	r2, sl
 8010c98:	4631      	mov	r1, r6
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	47b8      	blx	r7
 8010c9e:	3001      	adds	r0, #1
 8010ca0:	f43f aef7 	beq.w	8010a92 <_printf_float+0xbe>
 8010ca4:	f109 0901 	add.w	r9, r9, #1
 8010ca8:	e7ee      	b.n	8010c88 <_printf_float+0x2b4>
 8010caa:	bf00      	nop
 8010cac:	7fefffff 	.word	0x7fefffff
 8010cb0:	0801531a 	.word	0x0801531a
 8010cb4:	0801531e 	.word	0x0801531e
 8010cb8:	08015322 	.word	0x08015322
 8010cbc:	08015326 	.word	0x08015326
 8010cc0:	0801532a 	.word	0x0801532a
 8010cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	bfa8      	it	ge
 8010ccc:	461a      	movge	r2, r3
 8010cce:	2a00      	cmp	r2, #0
 8010cd0:	4691      	mov	r9, r2
 8010cd2:	dc37      	bgt.n	8010d44 <_printf_float+0x370>
 8010cd4:	f04f 0b00 	mov.w	fp, #0
 8010cd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010cdc:	f104 021a 	add.w	r2, r4, #26
 8010ce0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ce2:	9305      	str	r3, [sp, #20]
 8010ce4:	eba3 0309 	sub.w	r3, r3, r9
 8010ce8:	455b      	cmp	r3, fp
 8010cea:	dc33      	bgt.n	8010d54 <_printf_float+0x380>
 8010cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	db3b      	blt.n	8010d6c <_printf_float+0x398>
 8010cf4:	6823      	ldr	r3, [r4, #0]
 8010cf6:	07da      	lsls	r2, r3, #31
 8010cf8:	d438      	bmi.n	8010d6c <_printf_float+0x398>
 8010cfa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010cfe:	eba2 0903 	sub.w	r9, r2, r3
 8010d02:	9b05      	ldr	r3, [sp, #20]
 8010d04:	1ad2      	subs	r2, r2, r3
 8010d06:	4591      	cmp	r9, r2
 8010d08:	bfa8      	it	ge
 8010d0a:	4691      	movge	r9, r2
 8010d0c:	f1b9 0f00 	cmp.w	r9, #0
 8010d10:	dc35      	bgt.n	8010d7e <_printf_float+0x3aa>
 8010d12:	f04f 0800 	mov.w	r8, #0
 8010d16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d1a:	f104 0a1a 	add.w	sl, r4, #26
 8010d1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d22:	1a9b      	subs	r3, r3, r2
 8010d24:	eba3 0309 	sub.w	r3, r3, r9
 8010d28:	4543      	cmp	r3, r8
 8010d2a:	f77f af79 	ble.w	8010c20 <_printf_float+0x24c>
 8010d2e:	2301      	movs	r3, #1
 8010d30:	4652      	mov	r2, sl
 8010d32:	4631      	mov	r1, r6
 8010d34:	4628      	mov	r0, r5
 8010d36:	47b8      	blx	r7
 8010d38:	3001      	adds	r0, #1
 8010d3a:	f43f aeaa 	beq.w	8010a92 <_printf_float+0xbe>
 8010d3e:	f108 0801 	add.w	r8, r8, #1
 8010d42:	e7ec      	b.n	8010d1e <_printf_float+0x34a>
 8010d44:	4613      	mov	r3, r2
 8010d46:	4631      	mov	r1, r6
 8010d48:	4642      	mov	r2, r8
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	47b8      	blx	r7
 8010d4e:	3001      	adds	r0, #1
 8010d50:	d1c0      	bne.n	8010cd4 <_printf_float+0x300>
 8010d52:	e69e      	b.n	8010a92 <_printf_float+0xbe>
 8010d54:	2301      	movs	r3, #1
 8010d56:	4631      	mov	r1, r6
 8010d58:	4628      	mov	r0, r5
 8010d5a:	9205      	str	r2, [sp, #20]
 8010d5c:	47b8      	blx	r7
 8010d5e:	3001      	adds	r0, #1
 8010d60:	f43f ae97 	beq.w	8010a92 <_printf_float+0xbe>
 8010d64:	9a05      	ldr	r2, [sp, #20]
 8010d66:	f10b 0b01 	add.w	fp, fp, #1
 8010d6a:	e7b9      	b.n	8010ce0 <_printf_float+0x30c>
 8010d6c:	ee18 3a10 	vmov	r3, s16
 8010d70:	4652      	mov	r2, sl
 8010d72:	4631      	mov	r1, r6
 8010d74:	4628      	mov	r0, r5
 8010d76:	47b8      	blx	r7
 8010d78:	3001      	adds	r0, #1
 8010d7a:	d1be      	bne.n	8010cfa <_printf_float+0x326>
 8010d7c:	e689      	b.n	8010a92 <_printf_float+0xbe>
 8010d7e:	9a05      	ldr	r2, [sp, #20]
 8010d80:	464b      	mov	r3, r9
 8010d82:	4442      	add	r2, r8
 8010d84:	4631      	mov	r1, r6
 8010d86:	4628      	mov	r0, r5
 8010d88:	47b8      	blx	r7
 8010d8a:	3001      	adds	r0, #1
 8010d8c:	d1c1      	bne.n	8010d12 <_printf_float+0x33e>
 8010d8e:	e680      	b.n	8010a92 <_printf_float+0xbe>
 8010d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d92:	2a01      	cmp	r2, #1
 8010d94:	dc01      	bgt.n	8010d9a <_printf_float+0x3c6>
 8010d96:	07db      	lsls	r3, r3, #31
 8010d98:	d53a      	bpl.n	8010e10 <_printf_float+0x43c>
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	4642      	mov	r2, r8
 8010d9e:	4631      	mov	r1, r6
 8010da0:	4628      	mov	r0, r5
 8010da2:	47b8      	blx	r7
 8010da4:	3001      	adds	r0, #1
 8010da6:	f43f ae74 	beq.w	8010a92 <_printf_float+0xbe>
 8010daa:	ee18 3a10 	vmov	r3, s16
 8010dae:	4652      	mov	r2, sl
 8010db0:	4631      	mov	r1, r6
 8010db2:	4628      	mov	r0, r5
 8010db4:	47b8      	blx	r7
 8010db6:	3001      	adds	r0, #1
 8010db8:	f43f ae6b 	beq.w	8010a92 <_printf_float+0xbe>
 8010dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010dc8:	f7ef fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010dcc:	b9d8      	cbnz	r0, 8010e06 <_printf_float+0x432>
 8010dce:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010dd2:	f108 0201 	add.w	r2, r8, #1
 8010dd6:	4631      	mov	r1, r6
 8010dd8:	4628      	mov	r0, r5
 8010dda:	47b8      	blx	r7
 8010ddc:	3001      	adds	r0, #1
 8010dde:	d10e      	bne.n	8010dfe <_printf_float+0x42a>
 8010de0:	e657      	b.n	8010a92 <_printf_float+0xbe>
 8010de2:	2301      	movs	r3, #1
 8010de4:	4652      	mov	r2, sl
 8010de6:	4631      	mov	r1, r6
 8010de8:	4628      	mov	r0, r5
 8010dea:	47b8      	blx	r7
 8010dec:	3001      	adds	r0, #1
 8010dee:	f43f ae50 	beq.w	8010a92 <_printf_float+0xbe>
 8010df2:	f108 0801 	add.w	r8, r8, #1
 8010df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010df8:	3b01      	subs	r3, #1
 8010dfa:	4543      	cmp	r3, r8
 8010dfc:	dcf1      	bgt.n	8010de2 <_printf_float+0x40e>
 8010dfe:	464b      	mov	r3, r9
 8010e00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010e04:	e6da      	b.n	8010bbc <_printf_float+0x1e8>
 8010e06:	f04f 0800 	mov.w	r8, #0
 8010e0a:	f104 0a1a 	add.w	sl, r4, #26
 8010e0e:	e7f2      	b.n	8010df6 <_printf_float+0x422>
 8010e10:	2301      	movs	r3, #1
 8010e12:	4642      	mov	r2, r8
 8010e14:	e7df      	b.n	8010dd6 <_printf_float+0x402>
 8010e16:	2301      	movs	r3, #1
 8010e18:	464a      	mov	r2, r9
 8010e1a:	4631      	mov	r1, r6
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	47b8      	blx	r7
 8010e20:	3001      	adds	r0, #1
 8010e22:	f43f ae36 	beq.w	8010a92 <_printf_float+0xbe>
 8010e26:	f108 0801 	add.w	r8, r8, #1
 8010e2a:	68e3      	ldr	r3, [r4, #12]
 8010e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010e2e:	1a5b      	subs	r3, r3, r1
 8010e30:	4543      	cmp	r3, r8
 8010e32:	dcf0      	bgt.n	8010e16 <_printf_float+0x442>
 8010e34:	e6f8      	b.n	8010c28 <_printf_float+0x254>
 8010e36:	f04f 0800 	mov.w	r8, #0
 8010e3a:	f104 0919 	add.w	r9, r4, #25
 8010e3e:	e7f4      	b.n	8010e2a <_printf_float+0x456>

08010e40 <_printf_common>:
 8010e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e44:	4616      	mov	r6, r2
 8010e46:	4699      	mov	r9, r3
 8010e48:	688a      	ldr	r2, [r1, #8]
 8010e4a:	690b      	ldr	r3, [r1, #16]
 8010e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e50:	4293      	cmp	r3, r2
 8010e52:	bfb8      	it	lt
 8010e54:	4613      	movlt	r3, r2
 8010e56:	6033      	str	r3, [r6, #0]
 8010e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e5c:	4607      	mov	r7, r0
 8010e5e:	460c      	mov	r4, r1
 8010e60:	b10a      	cbz	r2, 8010e66 <_printf_common+0x26>
 8010e62:	3301      	adds	r3, #1
 8010e64:	6033      	str	r3, [r6, #0]
 8010e66:	6823      	ldr	r3, [r4, #0]
 8010e68:	0699      	lsls	r1, r3, #26
 8010e6a:	bf42      	ittt	mi
 8010e6c:	6833      	ldrmi	r3, [r6, #0]
 8010e6e:	3302      	addmi	r3, #2
 8010e70:	6033      	strmi	r3, [r6, #0]
 8010e72:	6825      	ldr	r5, [r4, #0]
 8010e74:	f015 0506 	ands.w	r5, r5, #6
 8010e78:	d106      	bne.n	8010e88 <_printf_common+0x48>
 8010e7a:	f104 0a19 	add.w	sl, r4, #25
 8010e7e:	68e3      	ldr	r3, [r4, #12]
 8010e80:	6832      	ldr	r2, [r6, #0]
 8010e82:	1a9b      	subs	r3, r3, r2
 8010e84:	42ab      	cmp	r3, r5
 8010e86:	dc26      	bgt.n	8010ed6 <_printf_common+0x96>
 8010e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e8c:	1e13      	subs	r3, r2, #0
 8010e8e:	6822      	ldr	r2, [r4, #0]
 8010e90:	bf18      	it	ne
 8010e92:	2301      	movne	r3, #1
 8010e94:	0692      	lsls	r2, r2, #26
 8010e96:	d42b      	bmi.n	8010ef0 <_printf_common+0xb0>
 8010e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e9c:	4649      	mov	r1, r9
 8010e9e:	4638      	mov	r0, r7
 8010ea0:	47c0      	blx	r8
 8010ea2:	3001      	adds	r0, #1
 8010ea4:	d01e      	beq.n	8010ee4 <_printf_common+0xa4>
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	6922      	ldr	r2, [r4, #16]
 8010eaa:	f003 0306 	and.w	r3, r3, #6
 8010eae:	2b04      	cmp	r3, #4
 8010eb0:	bf02      	ittt	eq
 8010eb2:	68e5      	ldreq	r5, [r4, #12]
 8010eb4:	6833      	ldreq	r3, [r6, #0]
 8010eb6:	1aed      	subeq	r5, r5, r3
 8010eb8:	68a3      	ldr	r3, [r4, #8]
 8010eba:	bf0c      	ite	eq
 8010ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ec0:	2500      	movne	r5, #0
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	bfc4      	itt	gt
 8010ec6:	1a9b      	subgt	r3, r3, r2
 8010ec8:	18ed      	addgt	r5, r5, r3
 8010eca:	2600      	movs	r6, #0
 8010ecc:	341a      	adds	r4, #26
 8010ece:	42b5      	cmp	r5, r6
 8010ed0:	d11a      	bne.n	8010f08 <_printf_common+0xc8>
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	e008      	b.n	8010ee8 <_printf_common+0xa8>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	4652      	mov	r2, sl
 8010eda:	4649      	mov	r1, r9
 8010edc:	4638      	mov	r0, r7
 8010ede:	47c0      	blx	r8
 8010ee0:	3001      	adds	r0, #1
 8010ee2:	d103      	bne.n	8010eec <_printf_common+0xac>
 8010ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eec:	3501      	adds	r5, #1
 8010eee:	e7c6      	b.n	8010e7e <_printf_common+0x3e>
 8010ef0:	18e1      	adds	r1, r4, r3
 8010ef2:	1c5a      	adds	r2, r3, #1
 8010ef4:	2030      	movs	r0, #48	; 0x30
 8010ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010efa:	4422      	add	r2, r4
 8010efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010f04:	3302      	adds	r3, #2
 8010f06:	e7c7      	b.n	8010e98 <_printf_common+0x58>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	4622      	mov	r2, r4
 8010f0c:	4649      	mov	r1, r9
 8010f0e:	4638      	mov	r0, r7
 8010f10:	47c0      	blx	r8
 8010f12:	3001      	adds	r0, #1
 8010f14:	d0e6      	beq.n	8010ee4 <_printf_common+0xa4>
 8010f16:	3601      	adds	r6, #1
 8010f18:	e7d9      	b.n	8010ece <_printf_common+0x8e>
	...

08010f1c <_printf_i>:
 8010f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f20:	7e0f      	ldrb	r7, [r1, #24]
 8010f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f24:	2f78      	cmp	r7, #120	; 0x78
 8010f26:	4691      	mov	r9, r2
 8010f28:	4680      	mov	r8, r0
 8010f2a:	460c      	mov	r4, r1
 8010f2c:	469a      	mov	sl, r3
 8010f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010f32:	d807      	bhi.n	8010f44 <_printf_i+0x28>
 8010f34:	2f62      	cmp	r7, #98	; 0x62
 8010f36:	d80a      	bhi.n	8010f4e <_printf_i+0x32>
 8010f38:	2f00      	cmp	r7, #0
 8010f3a:	f000 80d4 	beq.w	80110e6 <_printf_i+0x1ca>
 8010f3e:	2f58      	cmp	r7, #88	; 0x58
 8010f40:	f000 80c0 	beq.w	80110c4 <_printf_i+0x1a8>
 8010f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f4c:	e03a      	b.n	8010fc4 <_printf_i+0xa8>
 8010f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f52:	2b15      	cmp	r3, #21
 8010f54:	d8f6      	bhi.n	8010f44 <_printf_i+0x28>
 8010f56:	a101      	add	r1, pc, #4	; (adr r1, 8010f5c <_printf_i+0x40>)
 8010f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f5c:	08010fb5 	.word	0x08010fb5
 8010f60:	08010fc9 	.word	0x08010fc9
 8010f64:	08010f45 	.word	0x08010f45
 8010f68:	08010f45 	.word	0x08010f45
 8010f6c:	08010f45 	.word	0x08010f45
 8010f70:	08010f45 	.word	0x08010f45
 8010f74:	08010fc9 	.word	0x08010fc9
 8010f78:	08010f45 	.word	0x08010f45
 8010f7c:	08010f45 	.word	0x08010f45
 8010f80:	08010f45 	.word	0x08010f45
 8010f84:	08010f45 	.word	0x08010f45
 8010f88:	080110cd 	.word	0x080110cd
 8010f8c:	08010ff5 	.word	0x08010ff5
 8010f90:	08011087 	.word	0x08011087
 8010f94:	08010f45 	.word	0x08010f45
 8010f98:	08010f45 	.word	0x08010f45
 8010f9c:	080110ef 	.word	0x080110ef
 8010fa0:	08010f45 	.word	0x08010f45
 8010fa4:	08010ff5 	.word	0x08010ff5
 8010fa8:	08010f45 	.word	0x08010f45
 8010fac:	08010f45 	.word	0x08010f45
 8010fb0:	0801108f 	.word	0x0801108f
 8010fb4:	682b      	ldr	r3, [r5, #0]
 8010fb6:	1d1a      	adds	r2, r3, #4
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	602a      	str	r2, [r5, #0]
 8010fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	e09f      	b.n	8011108 <_printf_i+0x1ec>
 8010fc8:	6820      	ldr	r0, [r4, #0]
 8010fca:	682b      	ldr	r3, [r5, #0]
 8010fcc:	0607      	lsls	r7, r0, #24
 8010fce:	f103 0104 	add.w	r1, r3, #4
 8010fd2:	6029      	str	r1, [r5, #0]
 8010fd4:	d501      	bpl.n	8010fda <_printf_i+0xbe>
 8010fd6:	681e      	ldr	r6, [r3, #0]
 8010fd8:	e003      	b.n	8010fe2 <_printf_i+0xc6>
 8010fda:	0646      	lsls	r6, r0, #25
 8010fdc:	d5fb      	bpl.n	8010fd6 <_printf_i+0xba>
 8010fde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010fe2:	2e00      	cmp	r6, #0
 8010fe4:	da03      	bge.n	8010fee <_printf_i+0xd2>
 8010fe6:	232d      	movs	r3, #45	; 0x2d
 8010fe8:	4276      	negs	r6, r6
 8010fea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fee:	485a      	ldr	r0, [pc, #360]	; (8011158 <_printf_i+0x23c>)
 8010ff0:	230a      	movs	r3, #10
 8010ff2:	e012      	b.n	801101a <_printf_i+0xfe>
 8010ff4:	682b      	ldr	r3, [r5, #0]
 8010ff6:	6820      	ldr	r0, [r4, #0]
 8010ff8:	1d19      	adds	r1, r3, #4
 8010ffa:	6029      	str	r1, [r5, #0]
 8010ffc:	0605      	lsls	r5, r0, #24
 8010ffe:	d501      	bpl.n	8011004 <_printf_i+0xe8>
 8011000:	681e      	ldr	r6, [r3, #0]
 8011002:	e002      	b.n	801100a <_printf_i+0xee>
 8011004:	0641      	lsls	r1, r0, #25
 8011006:	d5fb      	bpl.n	8011000 <_printf_i+0xe4>
 8011008:	881e      	ldrh	r6, [r3, #0]
 801100a:	4853      	ldr	r0, [pc, #332]	; (8011158 <_printf_i+0x23c>)
 801100c:	2f6f      	cmp	r7, #111	; 0x6f
 801100e:	bf0c      	ite	eq
 8011010:	2308      	moveq	r3, #8
 8011012:	230a      	movne	r3, #10
 8011014:	2100      	movs	r1, #0
 8011016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801101a:	6865      	ldr	r5, [r4, #4]
 801101c:	60a5      	str	r5, [r4, #8]
 801101e:	2d00      	cmp	r5, #0
 8011020:	bfa2      	ittt	ge
 8011022:	6821      	ldrge	r1, [r4, #0]
 8011024:	f021 0104 	bicge.w	r1, r1, #4
 8011028:	6021      	strge	r1, [r4, #0]
 801102a:	b90e      	cbnz	r6, 8011030 <_printf_i+0x114>
 801102c:	2d00      	cmp	r5, #0
 801102e:	d04b      	beq.n	80110c8 <_printf_i+0x1ac>
 8011030:	4615      	mov	r5, r2
 8011032:	fbb6 f1f3 	udiv	r1, r6, r3
 8011036:	fb03 6711 	mls	r7, r3, r1, r6
 801103a:	5dc7      	ldrb	r7, [r0, r7]
 801103c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011040:	4637      	mov	r7, r6
 8011042:	42bb      	cmp	r3, r7
 8011044:	460e      	mov	r6, r1
 8011046:	d9f4      	bls.n	8011032 <_printf_i+0x116>
 8011048:	2b08      	cmp	r3, #8
 801104a:	d10b      	bne.n	8011064 <_printf_i+0x148>
 801104c:	6823      	ldr	r3, [r4, #0]
 801104e:	07de      	lsls	r6, r3, #31
 8011050:	d508      	bpl.n	8011064 <_printf_i+0x148>
 8011052:	6923      	ldr	r3, [r4, #16]
 8011054:	6861      	ldr	r1, [r4, #4]
 8011056:	4299      	cmp	r1, r3
 8011058:	bfde      	ittt	le
 801105a:	2330      	movle	r3, #48	; 0x30
 801105c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011060:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011064:	1b52      	subs	r2, r2, r5
 8011066:	6122      	str	r2, [r4, #16]
 8011068:	f8cd a000 	str.w	sl, [sp]
 801106c:	464b      	mov	r3, r9
 801106e:	aa03      	add	r2, sp, #12
 8011070:	4621      	mov	r1, r4
 8011072:	4640      	mov	r0, r8
 8011074:	f7ff fee4 	bl	8010e40 <_printf_common>
 8011078:	3001      	adds	r0, #1
 801107a:	d14a      	bne.n	8011112 <_printf_i+0x1f6>
 801107c:	f04f 30ff 	mov.w	r0, #4294967295
 8011080:	b004      	add	sp, #16
 8011082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011086:	6823      	ldr	r3, [r4, #0]
 8011088:	f043 0320 	orr.w	r3, r3, #32
 801108c:	6023      	str	r3, [r4, #0]
 801108e:	4833      	ldr	r0, [pc, #204]	; (801115c <_printf_i+0x240>)
 8011090:	2778      	movs	r7, #120	; 0x78
 8011092:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011096:	6823      	ldr	r3, [r4, #0]
 8011098:	6829      	ldr	r1, [r5, #0]
 801109a:	061f      	lsls	r7, r3, #24
 801109c:	f851 6b04 	ldr.w	r6, [r1], #4
 80110a0:	d402      	bmi.n	80110a8 <_printf_i+0x18c>
 80110a2:	065f      	lsls	r7, r3, #25
 80110a4:	bf48      	it	mi
 80110a6:	b2b6      	uxthmi	r6, r6
 80110a8:	07df      	lsls	r7, r3, #31
 80110aa:	bf48      	it	mi
 80110ac:	f043 0320 	orrmi.w	r3, r3, #32
 80110b0:	6029      	str	r1, [r5, #0]
 80110b2:	bf48      	it	mi
 80110b4:	6023      	strmi	r3, [r4, #0]
 80110b6:	b91e      	cbnz	r6, 80110c0 <_printf_i+0x1a4>
 80110b8:	6823      	ldr	r3, [r4, #0]
 80110ba:	f023 0320 	bic.w	r3, r3, #32
 80110be:	6023      	str	r3, [r4, #0]
 80110c0:	2310      	movs	r3, #16
 80110c2:	e7a7      	b.n	8011014 <_printf_i+0xf8>
 80110c4:	4824      	ldr	r0, [pc, #144]	; (8011158 <_printf_i+0x23c>)
 80110c6:	e7e4      	b.n	8011092 <_printf_i+0x176>
 80110c8:	4615      	mov	r5, r2
 80110ca:	e7bd      	b.n	8011048 <_printf_i+0x12c>
 80110cc:	682b      	ldr	r3, [r5, #0]
 80110ce:	6826      	ldr	r6, [r4, #0]
 80110d0:	6961      	ldr	r1, [r4, #20]
 80110d2:	1d18      	adds	r0, r3, #4
 80110d4:	6028      	str	r0, [r5, #0]
 80110d6:	0635      	lsls	r5, r6, #24
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	d501      	bpl.n	80110e0 <_printf_i+0x1c4>
 80110dc:	6019      	str	r1, [r3, #0]
 80110de:	e002      	b.n	80110e6 <_printf_i+0x1ca>
 80110e0:	0670      	lsls	r0, r6, #25
 80110e2:	d5fb      	bpl.n	80110dc <_printf_i+0x1c0>
 80110e4:	8019      	strh	r1, [r3, #0]
 80110e6:	2300      	movs	r3, #0
 80110e8:	6123      	str	r3, [r4, #16]
 80110ea:	4615      	mov	r5, r2
 80110ec:	e7bc      	b.n	8011068 <_printf_i+0x14c>
 80110ee:	682b      	ldr	r3, [r5, #0]
 80110f0:	1d1a      	adds	r2, r3, #4
 80110f2:	602a      	str	r2, [r5, #0]
 80110f4:	681d      	ldr	r5, [r3, #0]
 80110f6:	6862      	ldr	r2, [r4, #4]
 80110f8:	2100      	movs	r1, #0
 80110fa:	4628      	mov	r0, r5
 80110fc:	f7ef f868 	bl	80001d0 <memchr>
 8011100:	b108      	cbz	r0, 8011106 <_printf_i+0x1ea>
 8011102:	1b40      	subs	r0, r0, r5
 8011104:	6060      	str	r0, [r4, #4]
 8011106:	6863      	ldr	r3, [r4, #4]
 8011108:	6123      	str	r3, [r4, #16]
 801110a:	2300      	movs	r3, #0
 801110c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011110:	e7aa      	b.n	8011068 <_printf_i+0x14c>
 8011112:	6923      	ldr	r3, [r4, #16]
 8011114:	462a      	mov	r2, r5
 8011116:	4649      	mov	r1, r9
 8011118:	4640      	mov	r0, r8
 801111a:	47d0      	blx	sl
 801111c:	3001      	adds	r0, #1
 801111e:	d0ad      	beq.n	801107c <_printf_i+0x160>
 8011120:	6823      	ldr	r3, [r4, #0]
 8011122:	079b      	lsls	r3, r3, #30
 8011124:	d413      	bmi.n	801114e <_printf_i+0x232>
 8011126:	68e0      	ldr	r0, [r4, #12]
 8011128:	9b03      	ldr	r3, [sp, #12]
 801112a:	4298      	cmp	r0, r3
 801112c:	bfb8      	it	lt
 801112e:	4618      	movlt	r0, r3
 8011130:	e7a6      	b.n	8011080 <_printf_i+0x164>
 8011132:	2301      	movs	r3, #1
 8011134:	4632      	mov	r2, r6
 8011136:	4649      	mov	r1, r9
 8011138:	4640      	mov	r0, r8
 801113a:	47d0      	blx	sl
 801113c:	3001      	adds	r0, #1
 801113e:	d09d      	beq.n	801107c <_printf_i+0x160>
 8011140:	3501      	adds	r5, #1
 8011142:	68e3      	ldr	r3, [r4, #12]
 8011144:	9903      	ldr	r1, [sp, #12]
 8011146:	1a5b      	subs	r3, r3, r1
 8011148:	42ab      	cmp	r3, r5
 801114a:	dcf2      	bgt.n	8011132 <_printf_i+0x216>
 801114c:	e7eb      	b.n	8011126 <_printf_i+0x20a>
 801114e:	2500      	movs	r5, #0
 8011150:	f104 0619 	add.w	r6, r4, #25
 8011154:	e7f5      	b.n	8011142 <_printf_i+0x226>
 8011156:	bf00      	nop
 8011158:	0801532c 	.word	0x0801532c
 801115c:	0801533d 	.word	0x0801533d

08011160 <_scanf_float>:
 8011160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011164:	b087      	sub	sp, #28
 8011166:	4617      	mov	r7, r2
 8011168:	9303      	str	r3, [sp, #12]
 801116a:	688b      	ldr	r3, [r1, #8]
 801116c:	1e5a      	subs	r2, r3, #1
 801116e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011172:	bf83      	ittte	hi
 8011174:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011178:	195b      	addhi	r3, r3, r5
 801117a:	9302      	strhi	r3, [sp, #8]
 801117c:	2300      	movls	r3, #0
 801117e:	bf86      	itte	hi
 8011180:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011184:	608b      	strhi	r3, [r1, #8]
 8011186:	9302      	strls	r3, [sp, #8]
 8011188:	680b      	ldr	r3, [r1, #0]
 801118a:	468b      	mov	fp, r1
 801118c:	2500      	movs	r5, #0
 801118e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011192:	f84b 3b1c 	str.w	r3, [fp], #28
 8011196:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801119a:	4680      	mov	r8, r0
 801119c:	460c      	mov	r4, r1
 801119e:	465e      	mov	r6, fp
 80111a0:	46aa      	mov	sl, r5
 80111a2:	46a9      	mov	r9, r5
 80111a4:	9501      	str	r5, [sp, #4]
 80111a6:	68a2      	ldr	r2, [r4, #8]
 80111a8:	b152      	cbz	r2, 80111c0 <_scanf_float+0x60>
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	2b4e      	cmp	r3, #78	; 0x4e
 80111b0:	d864      	bhi.n	801127c <_scanf_float+0x11c>
 80111b2:	2b40      	cmp	r3, #64	; 0x40
 80111b4:	d83c      	bhi.n	8011230 <_scanf_float+0xd0>
 80111b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80111ba:	b2c8      	uxtb	r0, r1
 80111bc:	280e      	cmp	r0, #14
 80111be:	d93a      	bls.n	8011236 <_scanf_float+0xd6>
 80111c0:	f1b9 0f00 	cmp.w	r9, #0
 80111c4:	d003      	beq.n	80111ce <_scanf_float+0x6e>
 80111c6:	6823      	ldr	r3, [r4, #0]
 80111c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80111cc:	6023      	str	r3, [r4, #0]
 80111ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80111d2:	f1ba 0f01 	cmp.w	sl, #1
 80111d6:	f200 8113 	bhi.w	8011400 <_scanf_float+0x2a0>
 80111da:	455e      	cmp	r6, fp
 80111dc:	f200 8105 	bhi.w	80113ea <_scanf_float+0x28a>
 80111e0:	2501      	movs	r5, #1
 80111e2:	4628      	mov	r0, r5
 80111e4:	b007      	add	sp, #28
 80111e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80111ee:	2a0d      	cmp	r2, #13
 80111f0:	d8e6      	bhi.n	80111c0 <_scanf_float+0x60>
 80111f2:	a101      	add	r1, pc, #4	; (adr r1, 80111f8 <_scanf_float+0x98>)
 80111f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80111f8:	08011337 	.word	0x08011337
 80111fc:	080111c1 	.word	0x080111c1
 8011200:	080111c1 	.word	0x080111c1
 8011204:	080111c1 	.word	0x080111c1
 8011208:	08011397 	.word	0x08011397
 801120c:	0801136f 	.word	0x0801136f
 8011210:	080111c1 	.word	0x080111c1
 8011214:	080111c1 	.word	0x080111c1
 8011218:	08011345 	.word	0x08011345
 801121c:	080111c1 	.word	0x080111c1
 8011220:	080111c1 	.word	0x080111c1
 8011224:	080111c1 	.word	0x080111c1
 8011228:	080111c1 	.word	0x080111c1
 801122c:	080112fd 	.word	0x080112fd
 8011230:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011234:	e7db      	b.n	80111ee <_scanf_float+0x8e>
 8011236:	290e      	cmp	r1, #14
 8011238:	d8c2      	bhi.n	80111c0 <_scanf_float+0x60>
 801123a:	a001      	add	r0, pc, #4	; (adr r0, 8011240 <_scanf_float+0xe0>)
 801123c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011240:	080112ef 	.word	0x080112ef
 8011244:	080111c1 	.word	0x080111c1
 8011248:	080112ef 	.word	0x080112ef
 801124c:	08011383 	.word	0x08011383
 8011250:	080111c1 	.word	0x080111c1
 8011254:	0801129d 	.word	0x0801129d
 8011258:	080112d9 	.word	0x080112d9
 801125c:	080112d9 	.word	0x080112d9
 8011260:	080112d9 	.word	0x080112d9
 8011264:	080112d9 	.word	0x080112d9
 8011268:	080112d9 	.word	0x080112d9
 801126c:	080112d9 	.word	0x080112d9
 8011270:	080112d9 	.word	0x080112d9
 8011274:	080112d9 	.word	0x080112d9
 8011278:	080112d9 	.word	0x080112d9
 801127c:	2b6e      	cmp	r3, #110	; 0x6e
 801127e:	d809      	bhi.n	8011294 <_scanf_float+0x134>
 8011280:	2b60      	cmp	r3, #96	; 0x60
 8011282:	d8b2      	bhi.n	80111ea <_scanf_float+0x8a>
 8011284:	2b54      	cmp	r3, #84	; 0x54
 8011286:	d077      	beq.n	8011378 <_scanf_float+0x218>
 8011288:	2b59      	cmp	r3, #89	; 0x59
 801128a:	d199      	bne.n	80111c0 <_scanf_float+0x60>
 801128c:	2d07      	cmp	r5, #7
 801128e:	d197      	bne.n	80111c0 <_scanf_float+0x60>
 8011290:	2508      	movs	r5, #8
 8011292:	e029      	b.n	80112e8 <_scanf_float+0x188>
 8011294:	2b74      	cmp	r3, #116	; 0x74
 8011296:	d06f      	beq.n	8011378 <_scanf_float+0x218>
 8011298:	2b79      	cmp	r3, #121	; 0x79
 801129a:	e7f6      	b.n	801128a <_scanf_float+0x12a>
 801129c:	6821      	ldr	r1, [r4, #0]
 801129e:	05c8      	lsls	r0, r1, #23
 80112a0:	d51a      	bpl.n	80112d8 <_scanf_float+0x178>
 80112a2:	9b02      	ldr	r3, [sp, #8]
 80112a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80112a8:	6021      	str	r1, [r4, #0]
 80112aa:	f109 0901 	add.w	r9, r9, #1
 80112ae:	b11b      	cbz	r3, 80112b8 <_scanf_float+0x158>
 80112b0:	3b01      	subs	r3, #1
 80112b2:	3201      	adds	r2, #1
 80112b4:	9302      	str	r3, [sp, #8]
 80112b6:	60a2      	str	r2, [r4, #8]
 80112b8:	68a3      	ldr	r3, [r4, #8]
 80112ba:	3b01      	subs	r3, #1
 80112bc:	60a3      	str	r3, [r4, #8]
 80112be:	6923      	ldr	r3, [r4, #16]
 80112c0:	3301      	adds	r3, #1
 80112c2:	6123      	str	r3, [r4, #16]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	3b01      	subs	r3, #1
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	607b      	str	r3, [r7, #4]
 80112cc:	f340 8084 	ble.w	80113d8 <_scanf_float+0x278>
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	3301      	adds	r3, #1
 80112d4:	603b      	str	r3, [r7, #0]
 80112d6:	e766      	b.n	80111a6 <_scanf_float+0x46>
 80112d8:	eb1a 0f05 	cmn.w	sl, r5
 80112dc:	f47f af70 	bne.w	80111c0 <_scanf_float+0x60>
 80112e0:	6822      	ldr	r2, [r4, #0]
 80112e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80112e6:	6022      	str	r2, [r4, #0]
 80112e8:	f806 3b01 	strb.w	r3, [r6], #1
 80112ec:	e7e4      	b.n	80112b8 <_scanf_float+0x158>
 80112ee:	6822      	ldr	r2, [r4, #0]
 80112f0:	0610      	lsls	r0, r2, #24
 80112f2:	f57f af65 	bpl.w	80111c0 <_scanf_float+0x60>
 80112f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80112fa:	e7f4      	b.n	80112e6 <_scanf_float+0x186>
 80112fc:	f1ba 0f00 	cmp.w	sl, #0
 8011300:	d10e      	bne.n	8011320 <_scanf_float+0x1c0>
 8011302:	f1b9 0f00 	cmp.w	r9, #0
 8011306:	d10e      	bne.n	8011326 <_scanf_float+0x1c6>
 8011308:	6822      	ldr	r2, [r4, #0]
 801130a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801130e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011312:	d108      	bne.n	8011326 <_scanf_float+0x1c6>
 8011314:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011318:	6022      	str	r2, [r4, #0]
 801131a:	f04f 0a01 	mov.w	sl, #1
 801131e:	e7e3      	b.n	80112e8 <_scanf_float+0x188>
 8011320:	f1ba 0f02 	cmp.w	sl, #2
 8011324:	d055      	beq.n	80113d2 <_scanf_float+0x272>
 8011326:	2d01      	cmp	r5, #1
 8011328:	d002      	beq.n	8011330 <_scanf_float+0x1d0>
 801132a:	2d04      	cmp	r5, #4
 801132c:	f47f af48 	bne.w	80111c0 <_scanf_float+0x60>
 8011330:	3501      	adds	r5, #1
 8011332:	b2ed      	uxtb	r5, r5
 8011334:	e7d8      	b.n	80112e8 <_scanf_float+0x188>
 8011336:	f1ba 0f01 	cmp.w	sl, #1
 801133a:	f47f af41 	bne.w	80111c0 <_scanf_float+0x60>
 801133e:	f04f 0a02 	mov.w	sl, #2
 8011342:	e7d1      	b.n	80112e8 <_scanf_float+0x188>
 8011344:	b97d      	cbnz	r5, 8011366 <_scanf_float+0x206>
 8011346:	f1b9 0f00 	cmp.w	r9, #0
 801134a:	f47f af3c 	bne.w	80111c6 <_scanf_float+0x66>
 801134e:	6822      	ldr	r2, [r4, #0]
 8011350:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011354:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011358:	f47f af39 	bne.w	80111ce <_scanf_float+0x6e>
 801135c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011360:	6022      	str	r2, [r4, #0]
 8011362:	2501      	movs	r5, #1
 8011364:	e7c0      	b.n	80112e8 <_scanf_float+0x188>
 8011366:	2d03      	cmp	r5, #3
 8011368:	d0e2      	beq.n	8011330 <_scanf_float+0x1d0>
 801136a:	2d05      	cmp	r5, #5
 801136c:	e7de      	b.n	801132c <_scanf_float+0x1cc>
 801136e:	2d02      	cmp	r5, #2
 8011370:	f47f af26 	bne.w	80111c0 <_scanf_float+0x60>
 8011374:	2503      	movs	r5, #3
 8011376:	e7b7      	b.n	80112e8 <_scanf_float+0x188>
 8011378:	2d06      	cmp	r5, #6
 801137a:	f47f af21 	bne.w	80111c0 <_scanf_float+0x60>
 801137e:	2507      	movs	r5, #7
 8011380:	e7b2      	b.n	80112e8 <_scanf_float+0x188>
 8011382:	6822      	ldr	r2, [r4, #0]
 8011384:	0591      	lsls	r1, r2, #22
 8011386:	f57f af1b 	bpl.w	80111c0 <_scanf_float+0x60>
 801138a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801138e:	6022      	str	r2, [r4, #0]
 8011390:	f8cd 9004 	str.w	r9, [sp, #4]
 8011394:	e7a8      	b.n	80112e8 <_scanf_float+0x188>
 8011396:	6822      	ldr	r2, [r4, #0]
 8011398:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801139c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80113a0:	d006      	beq.n	80113b0 <_scanf_float+0x250>
 80113a2:	0550      	lsls	r0, r2, #21
 80113a4:	f57f af0c 	bpl.w	80111c0 <_scanf_float+0x60>
 80113a8:	f1b9 0f00 	cmp.w	r9, #0
 80113ac:	f43f af0f 	beq.w	80111ce <_scanf_float+0x6e>
 80113b0:	0591      	lsls	r1, r2, #22
 80113b2:	bf58      	it	pl
 80113b4:	9901      	ldrpl	r1, [sp, #4]
 80113b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80113ba:	bf58      	it	pl
 80113bc:	eba9 0101 	subpl.w	r1, r9, r1
 80113c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80113c4:	bf58      	it	pl
 80113c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80113ca:	6022      	str	r2, [r4, #0]
 80113cc:	f04f 0900 	mov.w	r9, #0
 80113d0:	e78a      	b.n	80112e8 <_scanf_float+0x188>
 80113d2:	f04f 0a03 	mov.w	sl, #3
 80113d6:	e787      	b.n	80112e8 <_scanf_float+0x188>
 80113d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80113dc:	4639      	mov	r1, r7
 80113de:	4640      	mov	r0, r8
 80113e0:	4798      	blx	r3
 80113e2:	2800      	cmp	r0, #0
 80113e4:	f43f aedf 	beq.w	80111a6 <_scanf_float+0x46>
 80113e8:	e6ea      	b.n	80111c0 <_scanf_float+0x60>
 80113ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113f2:	463a      	mov	r2, r7
 80113f4:	4640      	mov	r0, r8
 80113f6:	4798      	blx	r3
 80113f8:	6923      	ldr	r3, [r4, #16]
 80113fa:	3b01      	subs	r3, #1
 80113fc:	6123      	str	r3, [r4, #16]
 80113fe:	e6ec      	b.n	80111da <_scanf_float+0x7a>
 8011400:	1e6b      	subs	r3, r5, #1
 8011402:	2b06      	cmp	r3, #6
 8011404:	d825      	bhi.n	8011452 <_scanf_float+0x2f2>
 8011406:	2d02      	cmp	r5, #2
 8011408:	d836      	bhi.n	8011478 <_scanf_float+0x318>
 801140a:	455e      	cmp	r6, fp
 801140c:	f67f aee8 	bls.w	80111e0 <_scanf_float+0x80>
 8011410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011414:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011418:	463a      	mov	r2, r7
 801141a:	4640      	mov	r0, r8
 801141c:	4798      	blx	r3
 801141e:	6923      	ldr	r3, [r4, #16]
 8011420:	3b01      	subs	r3, #1
 8011422:	6123      	str	r3, [r4, #16]
 8011424:	e7f1      	b.n	801140a <_scanf_float+0x2aa>
 8011426:	9802      	ldr	r0, [sp, #8]
 8011428:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801142c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011430:	9002      	str	r0, [sp, #8]
 8011432:	463a      	mov	r2, r7
 8011434:	4640      	mov	r0, r8
 8011436:	4798      	blx	r3
 8011438:	6923      	ldr	r3, [r4, #16]
 801143a:	3b01      	subs	r3, #1
 801143c:	6123      	str	r3, [r4, #16]
 801143e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011442:	fa5f fa8a 	uxtb.w	sl, sl
 8011446:	f1ba 0f02 	cmp.w	sl, #2
 801144a:	d1ec      	bne.n	8011426 <_scanf_float+0x2c6>
 801144c:	3d03      	subs	r5, #3
 801144e:	b2ed      	uxtb	r5, r5
 8011450:	1b76      	subs	r6, r6, r5
 8011452:	6823      	ldr	r3, [r4, #0]
 8011454:	05da      	lsls	r2, r3, #23
 8011456:	d52f      	bpl.n	80114b8 <_scanf_float+0x358>
 8011458:	055b      	lsls	r3, r3, #21
 801145a:	d510      	bpl.n	801147e <_scanf_float+0x31e>
 801145c:	455e      	cmp	r6, fp
 801145e:	f67f aebf 	bls.w	80111e0 <_scanf_float+0x80>
 8011462:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801146a:	463a      	mov	r2, r7
 801146c:	4640      	mov	r0, r8
 801146e:	4798      	blx	r3
 8011470:	6923      	ldr	r3, [r4, #16]
 8011472:	3b01      	subs	r3, #1
 8011474:	6123      	str	r3, [r4, #16]
 8011476:	e7f1      	b.n	801145c <_scanf_float+0x2fc>
 8011478:	46aa      	mov	sl, r5
 801147a:	9602      	str	r6, [sp, #8]
 801147c:	e7df      	b.n	801143e <_scanf_float+0x2de>
 801147e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011482:	6923      	ldr	r3, [r4, #16]
 8011484:	2965      	cmp	r1, #101	; 0x65
 8011486:	f103 33ff 	add.w	r3, r3, #4294967295
 801148a:	f106 35ff 	add.w	r5, r6, #4294967295
 801148e:	6123      	str	r3, [r4, #16]
 8011490:	d00c      	beq.n	80114ac <_scanf_float+0x34c>
 8011492:	2945      	cmp	r1, #69	; 0x45
 8011494:	d00a      	beq.n	80114ac <_scanf_float+0x34c>
 8011496:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801149a:	463a      	mov	r2, r7
 801149c:	4640      	mov	r0, r8
 801149e:	4798      	blx	r3
 80114a0:	6923      	ldr	r3, [r4, #16]
 80114a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80114a6:	3b01      	subs	r3, #1
 80114a8:	1eb5      	subs	r5, r6, #2
 80114aa:	6123      	str	r3, [r4, #16]
 80114ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80114b0:	463a      	mov	r2, r7
 80114b2:	4640      	mov	r0, r8
 80114b4:	4798      	blx	r3
 80114b6:	462e      	mov	r6, r5
 80114b8:	6825      	ldr	r5, [r4, #0]
 80114ba:	f015 0510 	ands.w	r5, r5, #16
 80114be:	d158      	bne.n	8011572 <_scanf_float+0x412>
 80114c0:	7035      	strb	r5, [r6, #0]
 80114c2:	6823      	ldr	r3, [r4, #0]
 80114c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80114c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114cc:	d11c      	bne.n	8011508 <_scanf_float+0x3a8>
 80114ce:	9b01      	ldr	r3, [sp, #4]
 80114d0:	454b      	cmp	r3, r9
 80114d2:	eba3 0209 	sub.w	r2, r3, r9
 80114d6:	d124      	bne.n	8011522 <_scanf_float+0x3c2>
 80114d8:	2200      	movs	r2, #0
 80114da:	4659      	mov	r1, fp
 80114dc:	4640      	mov	r0, r8
 80114de:	f002 fc5f 	bl	8013da0 <_strtod_r>
 80114e2:	9b03      	ldr	r3, [sp, #12]
 80114e4:	6821      	ldr	r1, [r4, #0]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f011 0f02 	tst.w	r1, #2
 80114ec:	ec57 6b10 	vmov	r6, r7, d0
 80114f0:	f103 0204 	add.w	r2, r3, #4
 80114f4:	d020      	beq.n	8011538 <_scanf_float+0x3d8>
 80114f6:	9903      	ldr	r1, [sp, #12]
 80114f8:	600a      	str	r2, [r1, #0]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	e9c3 6700 	strd	r6, r7, [r3]
 8011500:	68e3      	ldr	r3, [r4, #12]
 8011502:	3301      	adds	r3, #1
 8011504:	60e3      	str	r3, [r4, #12]
 8011506:	e66c      	b.n	80111e2 <_scanf_float+0x82>
 8011508:	9b04      	ldr	r3, [sp, #16]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d0e4      	beq.n	80114d8 <_scanf_float+0x378>
 801150e:	9905      	ldr	r1, [sp, #20]
 8011510:	230a      	movs	r3, #10
 8011512:	462a      	mov	r2, r5
 8011514:	3101      	adds	r1, #1
 8011516:	4640      	mov	r0, r8
 8011518:	f002 fcca 	bl	8013eb0 <_strtol_r>
 801151c:	9b04      	ldr	r3, [sp, #16]
 801151e:	9e05      	ldr	r6, [sp, #20]
 8011520:	1ac2      	subs	r2, r0, r3
 8011522:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011526:	429e      	cmp	r6, r3
 8011528:	bf28      	it	cs
 801152a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801152e:	4912      	ldr	r1, [pc, #72]	; (8011578 <_scanf_float+0x418>)
 8011530:	4630      	mov	r0, r6
 8011532:	f000 f909 	bl	8011748 <siprintf>
 8011536:	e7cf      	b.n	80114d8 <_scanf_float+0x378>
 8011538:	f011 0f04 	tst.w	r1, #4
 801153c:	9903      	ldr	r1, [sp, #12]
 801153e:	600a      	str	r2, [r1, #0]
 8011540:	d1db      	bne.n	80114fa <_scanf_float+0x39a>
 8011542:	f8d3 8000 	ldr.w	r8, [r3]
 8011546:	ee10 2a10 	vmov	r2, s0
 801154a:	ee10 0a10 	vmov	r0, s0
 801154e:	463b      	mov	r3, r7
 8011550:	4639      	mov	r1, r7
 8011552:	f7ef faeb 	bl	8000b2c <__aeabi_dcmpun>
 8011556:	b128      	cbz	r0, 8011564 <_scanf_float+0x404>
 8011558:	4808      	ldr	r0, [pc, #32]	; (801157c <_scanf_float+0x41c>)
 801155a:	f000 f9e5 	bl	8011928 <nanf>
 801155e:	ed88 0a00 	vstr	s0, [r8]
 8011562:	e7cd      	b.n	8011500 <_scanf_float+0x3a0>
 8011564:	4630      	mov	r0, r6
 8011566:	4639      	mov	r1, r7
 8011568:	f7ef fb3e 	bl	8000be8 <__aeabi_d2f>
 801156c:	f8c8 0000 	str.w	r0, [r8]
 8011570:	e7c6      	b.n	8011500 <_scanf_float+0x3a0>
 8011572:	2500      	movs	r5, #0
 8011574:	e635      	b.n	80111e2 <_scanf_float+0x82>
 8011576:	bf00      	nop
 8011578:	0801534e 	.word	0x0801534e
 801157c:	080156e5 	.word	0x080156e5

08011580 <std>:
 8011580:	2300      	movs	r3, #0
 8011582:	b510      	push	{r4, lr}
 8011584:	4604      	mov	r4, r0
 8011586:	e9c0 3300 	strd	r3, r3, [r0]
 801158a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801158e:	6083      	str	r3, [r0, #8]
 8011590:	8181      	strh	r1, [r0, #12]
 8011592:	6643      	str	r3, [r0, #100]	; 0x64
 8011594:	81c2      	strh	r2, [r0, #14]
 8011596:	6183      	str	r3, [r0, #24]
 8011598:	4619      	mov	r1, r3
 801159a:	2208      	movs	r2, #8
 801159c:	305c      	adds	r0, #92	; 0x5c
 801159e:	f000 f936 	bl	801180e <memset>
 80115a2:	4b05      	ldr	r3, [pc, #20]	; (80115b8 <std+0x38>)
 80115a4:	6263      	str	r3, [r4, #36]	; 0x24
 80115a6:	4b05      	ldr	r3, [pc, #20]	; (80115bc <std+0x3c>)
 80115a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80115aa:	4b05      	ldr	r3, [pc, #20]	; (80115c0 <std+0x40>)
 80115ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115ae:	4b05      	ldr	r3, [pc, #20]	; (80115c4 <std+0x44>)
 80115b0:	6224      	str	r4, [r4, #32]
 80115b2:	6323      	str	r3, [r4, #48]	; 0x30
 80115b4:	bd10      	pop	{r4, pc}
 80115b6:	bf00      	nop
 80115b8:	08011789 	.word	0x08011789
 80115bc:	080117ab 	.word	0x080117ab
 80115c0:	080117e3 	.word	0x080117e3
 80115c4:	08011807 	.word	0x08011807

080115c8 <stdio_exit_handler>:
 80115c8:	4a02      	ldr	r2, [pc, #8]	; (80115d4 <stdio_exit_handler+0xc>)
 80115ca:	4903      	ldr	r1, [pc, #12]	; (80115d8 <stdio_exit_handler+0x10>)
 80115cc:	4803      	ldr	r0, [pc, #12]	; (80115dc <stdio_exit_handler+0x14>)
 80115ce:	f000 b869 	b.w	80116a4 <_fwalk_sglue>
 80115d2:	bf00      	nop
 80115d4:	2000010c 	.word	0x2000010c
 80115d8:	08014271 	.word	0x08014271
 80115dc:	20000118 	.word	0x20000118

080115e0 <cleanup_stdio>:
 80115e0:	6841      	ldr	r1, [r0, #4]
 80115e2:	4b0c      	ldr	r3, [pc, #48]	; (8011614 <cleanup_stdio+0x34>)
 80115e4:	4299      	cmp	r1, r3
 80115e6:	b510      	push	{r4, lr}
 80115e8:	4604      	mov	r4, r0
 80115ea:	d001      	beq.n	80115f0 <cleanup_stdio+0x10>
 80115ec:	f002 fe40 	bl	8014270 <_fflush_r>
 80115f0:	68a1      	ldr	r1, [r4, #8]
 80115f2:	4b09      	ldr	r3, [pc, #36]	; (8011618 <cleanup_stdio+0x38>)
 80115f4:	4299      	cmp	r1, r3
 80115f6:	d002      	beq.n	80115fe <cleanup_stdio+0x1e>
 80115f8:	4620      	mov	r0, r4
 80115fa:	f002 fe39 	bl	8014270 <_fflush_r>
 80115fe:	68e1      	ldr	r1, [r4, #12]
 8011600:	4b06      	ldr	r3, [pc, #24]	; (801161c <cleanup_stdio+0x3c>)
 8011602:	4299      	cmp	r1, r3
 8011604:	d004      	beq.n	8011610 <cleanup_stdio+0x30>
 8011606:	4620      	mov	r0, r4
 8011608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801160c:	f002 be30 	b.w	8014270 <_fflush_r>
 8011610:	bd10      	pop	{r4, pc}
 8011612:	bf00      	nop
 8011614:	2000c3b0 	.word	0x2000c3b0
 8011618:	2000c418 	.word	0x2000c418
 801161c:	2000c480 	.word	0x2000c480

08011620 <global_stdio_init.part.0>:
 8011620:	b510      	push	{r4, lr}
 8011622:	4b0b      	ldr	r3, [pc, #44]	; (8011650 <global_stdio_init.part.0+0x30>)
 8011624:	4c0b      	ldr	r4, [pc, #44]	; (8011654 <global_stdio_init.part.0+0x34>)
 8011626:	4a0c      	ldr	r2, [pc, #48]	; (8011658 <global_stdio_init.part.0+0x38>)
 8011628:	601a      	str	r2, [r3, #0]
 801162a:	4620      	mov	r0, r4
 801162c:	2200      	movs	r2, #0
 801162e:	2104      	movs	r1, #4
 8011630:	f7ff ffa6 	bl	8011580 <std>
 8011634:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011638:	2201      	movs	r2, #1
 801163a:	2109      	movs	r1, #9
 801163c:	f7ff ffa0 	bl	8011580 <std>
 8011640:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011644:	2202      	movs	r2, #2
 8011646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801164a:	2112      	movs	r1, #18
 801164c:	f7ff bf98 	b.w	8011580 <std>
 8011650:	2000c4e8 	.word	0x2000c4e8
 8011654:	2000c3b0 	.word	0x2000c3b0
 8011658:	080115c9 	.word	0x080115c9

0801165c <__sfp_lock_acquire>:
 801165c:	4801      	ldr	r0, [pc, #4]	; (8011664 <__sfp_lock_acquire+0x8>)
 801165e:	f000 b953 	b.w	8011908 <__retarget_lock_acquire_recursive>
 8011662:	bf00      	nop
 8011664:	2000c4f1 	.word	0x2000c4f1

08011668 <__sfp_lock_release>:
 8011668:	4801      	ldr	r0, [pc, #4]	; (8011670 <__sfp_lock_release+0x8>)
 801166a:	f000 b94e 	b.w	801190a <__retarget_lock_release_recursive>
 801166e:	bf00      	nop
 8011670:	2000c4f1 	.word	0x2000c4f1

08011674 <__sinit>:
 8011674:	b510      	push	{r4, lr}
 8011676:	4604      	mov	r4, r0
 8011678:	f7ff fff0 	bl	801165c <__sfp_lock_acquire>
 801167c:	6a23      	ldr	r3, [r4, #32]
 801167e:	b11b      	cbz	r3, 8011688 <__sinit+0x14>
 8011680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011684:	f7ff bff0 	b.w	8011668 <__sfp_lock_release>
 8011688:	4b04      	ldr	r3, [pc, #16]	; (801169c <__sinit+0x28>)
 801168a:	6223      	str	r3, [r4, #32]
 801168c:	4b04      	ldr	r3, [pc, #16]	; (80116a0 <__sinit+0x2c>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1f5      	bne.n	8011680 <__sinit+0xc>
 8011694:	f7ff ffc4 	bl	8011620 <global_stdio_init.part.0>
 8011698:	e7f2      	b.n	8011680 <__sinit+0xc>
 801169a:	bf00      	nop
 801169c:	080115e1 	.word	0x080115e1
 80116a0:	2000c4e8 	.word	0x2000c4e8

080116a4 <_fwalk_sglue>:
 80116a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116a8:	4607      	mov	r7, r0
 80116aa:	4688      	mov	r8, r1
 80116ac:	4614      	mov	r4, r2
 80116ae:	2600      	movs	r6, #0
 80116b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116b4:	f1b9 0901 	subs.w	r9, r9, #1
 80116b8:	d505      	bpl.n	80116c6 <_fwalk_sglue+0x22>
 80116ba:	6824      	ldr	r4, [r4, #0]
 80116bc:	2c00      	cmp	r4, #0
 80116be:	d1f7      	bne.n	80116b0 <_fwalk_sglue+0xc>
 80116c0:	4630      	mov	r0, r6
 80116c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116c6:	89ab      	ldrh	r3, [r5, #12]
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d907      	bls.n	80116dc <_fwalk_sglue+0x38>
 80116cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116d0:	3301      	adds	r3, #1
 80116d2:	d003      	beq.n	80116dc <_fwalk_sglue+0x38>
 80116d4:	4629      	mov	r1, r5
 80116d6:	4638      	mov	r0, r7
 80116d8:	47c0      	blx	r8
 80116da:	4306      	orrs	r6, r0
 80116dc:	3568      	adds	r5, #104	; 0x68
 80116de:	e7e9      	b.n	80116b4 <_fwalk_sglue+0x10>

080116e0 <sniprintf>:
 80116e0:	b40c      	push	{r2, r3}
 80116e2:	b530      	push	{r4, r5, lr}
 80116e4:	4b17      	ldr	r3, [pc, #92]	; (8011744 <sniprintf+0x64>)
 80116e6:	1e0c      	subs	r4, r1, #0
 80116e8:	681d      	ldr	r5, [r3, #0]
 80116ea:	b09d      	sub	sp, #116	; 0x74
 80116ec:	da08      	bge.n	8011700 <sniprintf+0x20>
 80116ee:	238b      	movs	r3, #139	; 0x8b
 80116f0:	602b      	str	r3, [r5, #0]
 80116f2:	f04f 30ff 	mov.w	r0, #4294967295
 80116f6:	b01d      	add	sp, #116	; 0x74
 80116f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116fc:	b002      	add	sp, #8
 80116fe:	4770      	bx	lr
 8011700:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011704:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011708:	bf14      	ite	ne
 801170a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801170e:	4623      	moveq	r3, r4
 8011710:	9304      	str	r3, [sp, #16]
 8011712:	9307      	str	r3, [sp, #28]
 8011714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011718:	9002      	str	r0, [sp, #8]
 801171a:	9006      	str	r0, [sp, #24]
 801171c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011722:	ab21      	add	r3, sp, #132	; 0x84
 8011724:	a902      	add	r1, sp, #8
 8011726:	4628      	mov	r0, r5
 8011728:	9301      	str	r3, [sp, #4]
 801172a:	f002 fc1d 	bl	8013f68 <_svfiprintf_r>
 801172e:	1c43      	adds	r3, r0, #1
 8011730:	bfbc      	itt	lt
 8011732:	238b      	movlt	r3, #139	; 0x8b
 8011734:	602b      	strlt	r3, [r5, #0]
 8011736:	2c00      	cmp	r4, #0
 8011738:	d0dd      	beq.n	80116f6 <sniprintf+0x16>
 801173a:	9b02      	ldr	r3, [sp, #8]
 801173c:	2200      	movs	r2, #0
 801173e:	701a      	strb	r2, [r3, #0]
 8011740:	e7d9      	b.n	80116f6 <sniprintf+0x16>
 8011742:	bf00      	nop
 8011744:	20000164 	.word	0x20000164

08011748 <siprintf>:
 8011748:	b40e      	push	{r1, r2, r3}
 801174a:	b500      	push	{lr}
 801174c:	b09c      	sub	sp, #112	; 0x70
 801174e:	ab1d      	add	r3, sp, #116	; 0x74
 8011750:	9002      	str	r0, [sp, #8]
 8011752:	9006      	str	r0, [sp, #24]
 8011754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011758:	4809      	ldr	r0, [pc, #36]	; (8011780 <siprintf+0x38>)
 801175a:	9107      	str	r1, [sp, #28]
 801175c:	9104      	str	r1, [sp, #16]
 801175e:	4909      	ldr	r1, [pc, #36]	; (8011784 <siprintf+0x3c>)
 8011760:	f853 2b04 	ldr.w	r2, [r3], #4
 8011764:	9105      	str	r1, [sp, #20]
 8011766:	6800      	ldr	r0, [r0, #0]
 8011768:	9301      	str	r3, [sp, #4]
 801176a:	a902      	add	r1, sp, #8
 801176c:	f002 fbfc 	bl	8013f68 <_svfiprintf_r>
 8011770:	9b02      	ldr	r3, [sp, #8]
 8011772:	2200      	movs	r2, #0
 8011774:	701a      	strb	r2, [r3, #0]
 8011776:	b01c      	add	sp, #112	; 0x70
 8011778:	f85d eb04 	ldr.w	lr, [sp], #4
 801177c:	b003      	add	sp, #12
 801177e:	4770      	bx	lr
 8011780:	20000164 	.word	0x20000164
 8011784:	ffff0208 	.word	0xffff0208

08011788 <__sread>:
 8011788:	b510      	push	{r4, lr}
 801178a:	460c      	mov	r4, r1
 801178c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011790:	f000 f86c 	bl	801186c <_read_r>
 8011794:	2800      	cmp	r0, #0
 8011796:	bfab      	itete	ge
 8011798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801179a:	89a3      	ldrhlt	r3, [r4, #12]
 801179c:	181b      	addge	r3, r3, r0
 801179e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80117a2:	bfac      	ite	ge
 80117a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80117a6:	81a3      	strhlt	r3, [r4, #12]
 80117a8:	bd10      	pop	{r4, pc}

080117aa <__swrite>:
 80117aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117ae:	461f      	mov	r7, r3
 80117b0:	898b      	ldrh	r3, [r1, #12]
 80117b2:	05db      	lsls	r3, r3, #23
 80117b4:	4605      	mov	r5, r0
 80117b6:	460c      	mov	r4, r1
 80117b8:	4616      	mov	r6, r2
 80117ba:	d505      	bpl.n	80117c8 <__swrite+0x1e>
 80117bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c0:	2302      	movs	r3, #2
 80117c2:	2200      	movs	r2, #0
 80117c4:	f000 f840 	bl	8011848 <_lseek_r>
 80117c8:	89a3      	ldrh	r3, [r4, #12]
 80117ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117d2:	81a3      	strh	r3, [r4, #12]
 80117d4:	4632      	mov	r2, r6
 80117d6:	463b      	mov	r3, r7
 80117d8:	4628      	mov	r0, r5
 80117da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117de:	f000 b857 	b.w	8011890 <_write_r>

080117e2 <__sseek>:
 80117e2:	b510      	push	{r4, lr}
 80117e4:	460c      	mov	r4, r1
 80117e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ea:	f000 f82d 	bl	8011848 <_lseek_r>
 80117ee:	1c43      	adds	r3, r0, #1
 80117f0:	89a3      	ldrh	r3, [r4, #12]
 80117f2:	bf15      	itete	ne
 80117f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80117f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80117fe:	81a3      	strheq	r3, [r4, #12]
 8011800:	bf18      	it	ne
 8011802:	81a3      	strhne	r3, [r4, #12]
 8011804:	bd10      	pop	{r4, pc}

08011806 <__sclose>:
 8011806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801180a:	f000 b80d 	b.w	8011828 <_close_r>

0801180e <memset>:
 801180e:	4402      	add	r2, r0
 8011810:	4603      	mov	r3, r0
 8011812:	4293      	cmp	r3, r2
 8011814:	d100      	bne.n	8011818 <memset+0xa>
 8011816:	4770      	bx	lr
 8011818:	f803 1b01 	strb.w	r1, [r3], #1
 801181c:	e7f9      	b.n	8011812 <memset+0x4>
	...

08011820 <_localeconv_r>:
 8011820:	4800      	ldr	r0, [pc, #0]	; (8011824 <_localeconv_r+0x4>)
 8011822:	4770      	bx	lr
 8011824:	20000258 	.word	0x20000258

08011828 <_close_r>:
 8011828:	b538      	push	{r3, r4, r5, lr}
 801182a:	4d06      	ldr	r5, [pc, #24]	; (8011844 <_close_r+0x1c>)
 801182c:	2300      	movs	r3, #0
 801182e:	4604      	mov	r4, r0
 8011830:	4608      	mov	r0, r1
 8011832:	602b      	str	r3, [r5, #0]
 8011834:	f7f0 fc95 	bl	8002162 <_close>
 8011838:	1c43      	adds	r3, r0, #1
 801183a:	d102      	bne.n	8011842 <_close_r+0x1a>
 801183c:	682b      	ldr	r3, [r5, #0]
 801183e:	b103      	cbz	r3, 8011842 <_close_r+0x1a>
 8011840:	6023      	str	r3, [r4, #0]
 8011842:	bd38      	pop	{r3, r4, r5, pc}
 8011844:	2000c4ec 	.word	0x2000c4ec

08011848 <_lseek_r>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4d07      	ldr	r5, [pc, #28]	; (8011868 <_lseek_r+0x20>)
 801184c:	4604      	mov	r4, r0
 801184e:	4608      	mov	r0, r1
 8011850:	4611      	mov	r1, r2
 8011852:	2200      	movs	r2, #0
 8011854:	602a      	str	r2, [r5, #0]
 8011856:	461a      	mov	r2, r3
 8011858:	f7f0 fcaa 	bl	80021b0 <_lseek>
 801185c:	1c43      	adds	r3, r0, #1
 801185e:	d102      	bne.n	8011866 <_lseek_r+0x1e>
 8011860:	682b      	ldr	r3, [r5, #0]
 8011862:	b103      	cbz	r3, 8011866 <_lseek_r+0x1e>
 8011864:	6023      	str	r3, [r4, #0]
 8011866:	bd38      	pop	{r3, r4, r5, pc}
 8011868:	2000c4ec 	.word	0x2000c4ec

0801186c <_read_r>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	4d07      	ldr	r5, [pc, #28]	; (801188c <_read_r+0x20>)
 8011870:	4604      	mov	r4, r0
 8011872:	4608      	mov	r0, r1
 8011874:	4611      	mov	r1, r2
 8011876:	2200      	movs	r2, #0
 8011878:	602a      	str	r2, [r5, #0]
 801187a:	461a      	mov	r2, r3
 801187c:	f7f0 fc38 	bl	80020f0 <_read>
 8011880:	1c43      	adds	r3, r0, #1
 8011882:	d102      	bne.n	801188a <_read_r+0x1e>
 8011884:	682b      	ldr	r3, [r5, #0]
 8011886:	b103      	cbz	r3, 801188a <_read_r+0x1e>
 8011888:	6023      	str	r3, [r4, #0]
 801188a:	bd38      	pop	{r3, r4, r5, pc}
 801188c:	2000c4ec 	.word	0x2000c4ec

08011890 <_write_r>:
 8011890:	b538      	push	{r3, r4, r5, lr}
 8011892:	4d07      	ldr	r5, [pc, #28]	; (80118b0 <_write_r+0x20>)
 8011894:	4604      	mov	r4, r0
 8011896:	4608      	mov	r0, r1
 8011898:	4611      	mov	r1, r2
 801189a:	2200      	movs	r2, #0
 801189c:	602a      	str	r2, [r5, #0]
 801189e:	461a      	mov	r2, r3
 80118a0:	f7f0 fc43 	bl	800212a <_write>
 80118a4:	1c43      	adds	r3, r0, #1
 80118a6:	d102      	bne.n	80118ae <_write_r+0x1e>
 80118a8:	682b      	ldr	r3, [r5, #0]
 80118aa:	b103      	cbz	r3, 80118ae <_write_r+0x1e>
 80118ac:	6023      	str	r3, [r4, #0]
 80118ae:	bd38      	pop	{r3, r4, r5, pc}
 80118b0:	2000c4ec 	.word	0x2000c4ec

080118b4 <__errno>:
 80118b4:	4b01      	ldr	r3, [pc, #4]	; (80118bc <__errno+0x8>)
 80118b6:	6818      	ldr	r0, [r3, #0]
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	20000164 	.word	0x20000164

080118c0 <__libc_init_array>:
 80118c0:	b570      	push	{r4, r5, r6, lr}
 80118c2:	4d0d      	ldr	r5, [pc, #52]	; (80118f8 <__libc_init_array+0x38>)
 80118c4:	4c0d      	ldr	r4, [pc, #52]	; (80118fc <__libc_init_array+0x3c>)
 80118c6:	1b64      	subs	r4, r4, r5
 80118c8:	10a4      	asrs	r4, r4, #2
 80118ca:	2600      	movs	r6, #0
 80118cc:	42a6      	cmp	r6, r4
 80118ce:	d109      	bne.n	80118e4 <__libc_init_array+0x24>
 80118d0:	4d0b      	ldr	r5, [pc, #44]	; (8011900 <__libc_init_array+0x40>)
 80118d2:	4c0c      	ldr	r4, [pc, #48]	; (8011904 <__libc_init_array+0x44>)
 80118d4:	f003 fc0c 	bl	80150f0 <_init>
 80118d8:	1b64      	subs	r4, r4, r5
 80118da:	10a4      	asrs	r4, r4, #2
 80118dc:	2600      	movs	r6, #0
 80118de:	42a6      	cmp	r6, r4
 80118e0:	d105      	bne.n	80118ee <__libc_init_array+0x2e>
 80118e2:	bd70      	pop	{r4, r5, r6, pc}
 80118e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80118e8:	4798      	blx	r3
 80118ea:	3601      	adds	r6, #1
 80118ec:	e7ee      	b.n	80118cc <__libc_init_array+0xc>
 80118ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80118f2:	4798      	blx	r3
 80118f4:	3601      	adds	r6, #1
 80118f6:	e7f2      	b.n	80118de <__libc_init_array+0x1e>
 80118f8:	08015748 	.word	0x08015748
 80118fc:	08015748 	.word	0x08015748
 8011900:	08015748 	.word	0x08015748
 8011904:	0801574c 	.word	0x0801574c

08011908 <__retarget_lock_acquire_recursive>:
 8011908:	4770      	bx	lr

0801190a <__retarget_lock_release_recursive>:
 801190a:	4770      	bx	lr

0801190c <memcpy>:
 801190c:	440a      	add	r2, r1
 801190e:	4291      	cmp	r1, r2
 8011910:	f100 33ff 	add.w	r3, r0, #4294967295
 8011914:	d100      	bne.n	8011918 <memcpy+0xc>
 8011916:	4770      	bx	lr
 8011918:	b510      	push	{r4, lr}
 801191a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801191e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011922:	4291      	cmp	r1, r2
 8011924:	d1f9      	bne.n	801191a <memcpy+0xe>
 8011926:	bd10      	pop	{r4, pc}

08011928 <nanf>:
 8011928:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011930 <nanf+0x8>
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop
 8011930:	7fc00000 	.word	0x7fc00000

08011934 <quorem>:
 8011934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011938:	6903      	ldr	r3, [r0, #16]
 801193a:	690c      	ldr	r4, [r1, #16]
 801193c:	42a3      	cmp	r3, r4
 801193e:	4607      	mov	r7, r0
 8011940:	db7e      	blt.n	8011a40 <quorem+0x10c>
 8011942:	3c01      	subs	r4, #1
 8011944:	f101 0814 	add.w	r8, r1, #20
 8011948:	f100 0514 	add.w	r5, r0, #20
 801194c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011950:	9301      	str	r3, [sp, #4]
 8011952:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011956:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801195a:	3301      	adds	r3, #1
 801195c:	429a      	cmp	r2, r3
 801195e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011962:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011966:	fbb2 f6f3 	udiv	r6, r2, r3
 801196a:	d331      	bcc.n	80119d0 <quorem+0x9c>
 801196c:	f04f 0e00 	mov.w	lr, #0
 8011970:	4640      	mov	r0, r8
 8011972:	46ac      	mov	ip, r5
 8011974:	46f2      	mov	sl, lr
 8011976:	f850 2b04 	ldr.w	r2, [r0], #4
 801197a:	b293      	uxth	r3, r2
 801197c:	fb06 e303 	mla	r3, r6, r3, lr
 8011980:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011984:	0c1a      	lsrs	r2, r3, #16
 8011986:	b29b      	uxth	r3, r3
 8011988:	ebaa 0303 	sub.w	r3, sl, r3
 801198c:	f8dc a000 	ldr.w	sl, [ip]
 8011990:	fa13 f38a 	uxtah	r3, r3, sl
 8011994:	fb06 220e 	mla	r2, r6, lr, r2
 8011998:	9300      	str	r3, [sp, #0]
 801199a:	9b00      	ldr	r3, [sp, #0]
 801199c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80119a0:	b292      	uxth	r2, r2
 80119a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80119a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80119aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80119ae:	4581      	cmp	r9, r0
 80119b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119b4:	f84c 3b04 	str.w	r3, [ip], #4
 80119b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80119bc:	d2db      	bcs.n	8011976 <quorem+0x42>
 80119be:	f855 300b 	ldr.w	r3, [r5, fp]
 80119c2:	b92b      	cbnz	r3, 80119d0 <quorem+0x9c>
 80119c4:	9b01      	ldr	r3, [sp, #4]
 80119c6:	3b04      	subs	r3, #4
 80119c8:	429d      	cmp	r5, r3
 80119ca:	461a      	mov	r2, r3
 80119cc:	d32c      	bcc.n	8011a28 <quorem+0xf4>
 80119ce:	613c      	str	r4, [r7, #16]
 80119d0:	4638      	mov	r0, r7
 80119d2:	f001 f9f1 	bl	8012db8 <__mcmp>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	db22      	blt.n	8011a20 <quorem+0xec>
 80119da:	3601      	adds	r6, #1
 80119dc:	4629      	mov	r1, r5
 80119de:	2000      	movs	r0, #0
 80119e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80119e4:	f8d1 c000 	ldr.w	ip, [r1]
 80119e8:	b293      	uxth	r3, r2
 80119ea:	1ac3      	subs	r3, r0, r3
 80119ec:	0c12      	lsrs	r2, r2, #16
 80119ee:	fa13 f38c 	uxtah	r3, r3, ip
 80119f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80119f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a00:	45c1      	cmp	r9, r8
 8011a02:	f841 3b04 	str.w	r3, [r1], #4
 8011a06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011a0a:	d2e9      	bcs.n	80119e0 <quorem+0xac>
 8011a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a14:	b922      	cbnz	r2, 8011a20 <quorem+0xec>
 8011a16:	3b04      	subs	r3, #4
 8011a18:	429d      	cmp	r5, r3
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	d30a      	bcc.n	8011a34 <quorem+0x100>
 8011a1e:	613c      	str	r4, [r7, #16]
 8011a20:	4630      	mov	r0, r6
 8011a22:	b003      	add	sp, #12
 8011a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a28:	6812      	ldr	r2, [r2, #0]
 8011a2a:	3b04      	subs	r3, #4
 8011a2c:	2a00      	cmp	r2, #0
 8011a2e:	d1ce      	bne.n	80119ce <quorem+0x9a>
 8011a30:	3c01      	subs	r4, #1
 8011a32:	e7c9      	b.n	80119c8 <quorem+0x94>
 8011a34:	6812      	ldr	r2, [r2, #0]
 8011a36:	3b04      	subs	r3, #4
 8011a38:	2a00      	cmp	r2, #0
 8011a3a:	d1f0      	bne.n	8011a1e <quorem+0xea>
 8011a3c:	3c01      	subs	r4, #1
 8011a3e:	e7eb      	b.n	8011a18 <quorem+0xe4>
 8011a40:	2000      	movs	r0, #0
 8011a42:	e7ee      	b.n	8011a22 <quorem+0xee>
 8011a44:	0000      	movs	r0, r0
	...

08011a48 <_dtoa_r>:
 8011a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a4c:	ed2d 8b04 	vpush	{d8-d9}
 8011a50:	69c5      	ldr	r5, [r0, #28]
 8011a52:	b093      	sub	sp, #76	; 0x4c
 8011a54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011a58:	ec57 6b10 	vmov	r6, r7, d0
 8011a5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011a60:	9107      	str	r1, [sp, #28]
 8011a62:	4604      	mov	r4, r0
 8011a64:	920a      	str	r2, [sp, #40]	; 0x28
 8011a66:	930d      	str	r3, [sp, #52]	; 0x34
 8011a68:	b975      	cbnz	r5, 8011a88 <_dtoa_r+0x40>
 8011a6a:	2010      	movs	r0, #16
 8011a6c:	f000 fe2a 	bl	80126c4 <malloc>
 8011a70:	4602      	mov	r2, r0
 8011a72:	61e0      	str	r0, [r4, #28]
 8011a74:	b920      	cbnz	r0, 8011a80 <_dtoa_r+0x38>
 8011a76:	4bae      	ldr	r3, [pc, #696]	; (8011d30 <_dtoa_r+0x2e8>)
 8011a78:	21ef      	movs	r1, #239	; 0xef
 8011a7a:	48ae      	ldr	r0, [pc, #696]	; (8011d34 <_dtoa_r+0x2ec>)
 8011a7c:	f002 fc64 	bl	8014348 <__assert_func>
 8011a80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011a84:	6005      	str	r5, [r0, #0]
 8011a86:	60c5      	str	r5, [r0, #12]
 8011a88:	69e3      	ldr	r3, [r4, #28]
 8011a8a:	6819      	ldr	r1, [r3, #0]
 8011a8c:	b151      	cbz	r1, 8011aa4 <_dtoa_r+0x5c>
 8011a8e:	685a      	ldr	r2, [r3, #4]
 8011a90:	604a      	str	r2, [r1, #4]
 8011a92:	2301      	movs	r3, #1
 8011a94:	4093      	lsls	r3, r2
 8011a96:	608b      	str	r3, [r1, #8]
 8011a98:	4620      	mov	r0, r4
 8011a9a:	f000 ff07 	bl	80128ac <_Bfree>
 8011a9e:	69e3      	ldr	r3, [r4, #28]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	601a      	str	r2, [r3, #0]
 8011aa4:	1e3b      	subs	r3, r7, #0
 8011aa6:	bfbb      	ittet	lt
 8011aa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011aac:	9303      	strlt	r3, [sp, #12]
 8011aae:	2300      	movge	r3, #0
 8011ab0:	2201      	movlt	r2, #1
 8011ab2:	bfac      	ite	ge
 8011ab4:	f8c8 3000 	strge.w	r3, [r8]
 8011ab8:	f8c8 2000 	strlt.w	r2, [r8]
 8011abc:	4b9e      	ldr	r3, [pc, #632]	; (8011d38 <_dtoa_r+0x2f0>)
 8011abe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011ac2:	ea33 0308 	bics.w	r3, r3, r8
 8011ac6:	d11b      	bne.n	8011b00 <_dtoa_r+0xb8>
 8011ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011aca:	f242 730f 	movw	r3, #9999	; 0x270f
 8011ace:	6013      	str	r3, [r2, #0]
 8011ad0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011ad4:	4333      	orrs	r3, r6
 8011ad6:	f000 8593 	beq.w	8012600 <_dtoa_r+0xbb8>
 8011ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011adc:	b963      	cbnz	r3, 8011af8 <_dtoa_r+0xb0>
 8011ade:	4b97      	ldr	r3, [pc, #604]	; (8011d3c <_dtoa_r+0x2f4>)
 8011ae0:	e027      	b.n	8011b32 <_dtoa_r+0xea>
 8011ae2:	4b97      	ldr	r3, [pc, #604]	; (8011d40 <_dtoa_r+0x2f8>)
 8011ae4:	9300      	str	r3, [sp, #0]
 8011ae6:	3308      	adds	r3, #8
 8011ae8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011aea:	6013      	str	r3, [r2, #0]
 8011aec:	9800      	ldr	r0, [sp, #0]
 8011aee:	b013      	add	sp, #76	; 0x4c
 8011af0:	ecbd 8b04 	vpop	{d8-d9}
 8011af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af8:	4b90      	ldr	r3, [pc, #576]	; (8011d3c <_dtoa_r+0x2f4>)
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	3303      	adds	r3, #3
 8011afe:	e7f3      	b.n	8011ae8 <_dtoa_r+0xa0>
 8011b00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b04:	2200      	movs	r2, #0
 8011b06:	ec51 0b17 	vmov	r0, r1, d7
 8011b0a:	eeb0 8a47 	vmov.f32	s16, s14
 8011b0e:	eef0 8a67 	vmov.f32	s17, s15
 8011b12:	2300      	movs	r3, #0
 8011b14:	f7ee ffd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b18:	4681      	mov	r9, r0
 8011b1a:	b160      	cbz	r0, 8011b36 <_dtoa_r+0xee>
 8011b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b1e:	2301      	movs	r3, #1
 8011b20:	6013      	str	r3, [r2, #0]
 8011b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f000 8568 	beq.w	80125fa <_dtoa_r+0xbb2>
 8011b2a:	4b86      	ldr	r3, [pc, #536]	; (8011d44 <_dtoa_r+0x2fc>)
 8011b2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011b2e:	6013      	str	r3, [r2, #0]
 8011b30:	3b01      	subs	r3, #1
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	e7da      	b.n	8011aec <_dtoa_r+0xa4>
 8011b36:	aa10      	add	r2, sp, #64	; 0x40
 8011b38:	a911      	add	r1, sp, #68	; 0x44
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	eeb0 0a48 	vmov.f32	s0, s16
 8011b40:	eef0 0a68 	vmov.f32	s1, s17
 8011b44:	f001 fa4e 	bl	8012fe4 <__d2b>
 8011b48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011b4c:	4682      	mov	sl, r0
 8011b4e:	2d00      	cmp	r5, #0
 8011b50:	d07f      	beq.n	8011c52 <_dtoa_r+0x20a>
 8011b52:	ee18 3a90 	vmov	r3, s17
 8011b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011b5e:	ec51 0b18 	vmov	r0, r1, d8
 8011b62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011b66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011b6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011b6e:	4619      	mov	r1, r3
 8011b70:	2200      	movs	r2, #0
 8011b72:	4b75      	ldr	r3, [pc, #468]	; (8011d48 <_dtoa_r+0x300>)
 8011b74:	f7ee fb88 	bl	8000288 <__aeabi_dsub>
 8011b78:	a367      	add	r3, pc, #412	; (adr r3, 8011d18 <_dtoa_r+0x2d0>)
 8011b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7e:	f7ee fd3b 	bl	80005f8 <__aeabi_dmul>
 8011b82:	a367      	add	r3, pc, #412	; (adr r3, 8011d20 <_dtoa_r+0x2d8>)
 8011b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b88:	f7ee fb80 	bl	800028c <__adddf3>
 8011b8c:	4606      	mov	r6, r0
 8011b8e:	4628      	mov	r0, r5
 8011b90:	460f      	mov	r7, r1
 8011b92:	f7ee fcc7 	bl	8000524 <__aeabi_i2d>
 8011b96:	a364      	add	r3, pc, #400	; (adr r3, 8011d28 <_dtoa_r+0x2e0>)
 8011b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9c:	f7ee fd2c 	bl	80005f8 <__aeabi_dmul>
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	460b      	mov	r3, r1
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	4639      	mov	r1, r7
 8011ba8:	f7ee fb70 	bl	800028c <__adddf3>
 8011bac:	4606      	mov	r6, r0
 8011bae:	460f      	mov	r7, r1
 8011bb0:	f7ee ffd2 	bl	8000b58 <__aeabi_d2iz>
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	4683      	mov	fp, r0
 8011bb8:	2300      	movs	r3, #0
 8011bba:	4630      	mov	r0, r6
 8011bbc:	4639      	mov	r1, r7
 8011bbe:	f7ee ff8d 	bl	8000adc <__aeabi_dcmplt>
 8011bc2:	b148      	cbz	r0, 8011bd8 <_dtoa_r+0x190>
 8011bc4:	4658      	mov	r0, fp
 8011bc6:	f7ee fcad 	bl	8000524 <__aeabi_i2d>
 8011bca:	4632      	mov	r2, r6
 8011bcc:	463b      	mov	r3, r7
 8011bce:	f7ee ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011bd2:	b908      	cbnz	r0, 8011bd8 <_dtoa_r+0x190>
 8011bd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011bd8:	f1bb 0f16 	cmp.w	fp, #22
 8011bdc:	d857      	bhi.n	8011c8e <_dtoa_r+0x246>
 8011bde:	4b5b      	ldr	r3, [pc, #364]	; (8011d4c <_dtoa_r+0x304>)
 8011be0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be8:	ec51 0b18 	vmov	r0, r1, d8
 8011bec:	f7ee ff76 	bl	8000adc <__aeabi_dcmplt>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d04e      	beq.n	8011c92 <_dtoa_r+0x24a>
 8011bf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8011bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011bfe:	1b5b      	subs	r3, r3, r5
 8011c00:	1e5a      	subs	r2, r3, #1
 8011c02:	bf45      	ittet	mi
 8011c04:	f1c3 0301 	rsbmi	r3, r3, #1
 8011c08:	9305      	strmi	r3, [sp, #20]
 8011c0a:	2300      	movpl	r3, #0
 8011c0c:	2300      	movmi	r3, #0
 8011c0e:	9206      	str	r2, [sp, #24]
 8011c10:	bf54      	ite	pl
 8011c12:	9305      	strpl	r3, [sp, #20]
 8011c14:	9306      	strmi	r3, [sp, #24]
 8011c16:	f1bb 0f00 	cmp.w	fp, #0
 8011c1a:	db3c      	blt.n	8011c96 <_dtoa_r+0x24e>
 8011c1c:	9b06      	ldr	r3, [sp, #24]
 8011c1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011c22:	445b      	add	r3, fp
 8011c24:	9306      	str	r3, [sp, #24]
 8011c26:	2300      	movs	r3, #0
 8011c28:	9308      	str	r3, [sp, #32]
 8011c2a:	9b07      	ldr	r3, [sp, #28]
 8011c2c:	2b09      	cmp	r3, #9
 8011c2e:	d868      	bhi.n	8011d02 <_dtoa_r+0x2ba>
 8011c30:	2b05      	cmp	r3, #5
 8011c32:	bfc4      	itt	gt
 8011c34:	3b04      	subgt	r3, #4
 8011c36:	9307      	strgt	r3, [sp, #28]
 8011c38:	9b07      	ldr	r3, [sp, #28]
 8011c3a:	f1a3 0302 	sub.w	r3, r3, #2
 8011c3e:	bfcc      	ite	gt
 8011c40:	2500      	movgt	r5, #0
 8011c42:	2501      	movle	r5, #1
 8011c44:	2b03      	cmp	r3, #3
 8011c46:	f200 8085 	bhi.w	8011d54 <_dtoa_r+0x30c>
 8011c4a:	e8df f003 	tbb	[pc, r3]
 8011c4e:	3b2e      	.short	0x3b2e
 8011c50:	5839      	.short	0x5839
 8011c52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011c56:	441d      	add	r5, r3
 8011c58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011c5c:	2b20      	cmp	r3, #32
 8011c5e:	bfc1      	itttt	gt
 8011c60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011c64:	fa08 f803 	lslgt.w	r8, r8, r3
 8011c68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8011c6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011c70:	bfd6      	itet	le
 8011c72:	f1c3 0320 	rsble	r3, r3, #32
 8011c76:	ea48 0003 	orrgt.w	r0, r8, r3
 8011c7a:	fa06 f003 	lslle.w	r0, r6, r3
 8011c7e:	f7ee fc41 	bl	8000504 <__aeabi_ui2d>
 8011c82:	2201      	movs	r2, #1
 8011c84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011c88:	3d01      	subs	r5, #1
 8011c8a:	920e      	str	r2, [sp, #56]	; 0x38
 8011c8c:	e76f      	b.n	8011b6e <_dtoa_r+0x126>
 8011c8e:	2301      	movs	r3, #1
 8011c90:	e7b3      	b.n	8011bfa <_dtoa_r+0x1b2>
 8011c92:	900c      	str	r0, [sp, #48]	; 0x30
 8011c94:	e7b2      	b.n	8011bfc <_dtoa_r+0x1b4>
 8011c96:	9b05      	ldr	r3, [sp, #20]
 8011c98:	eba3 030b 	sub.w	r3, r3, fp
 8011c9c:	9305      	str	r3, [sp, #20]
 8011c9e:	f1cb 0300 	rsb	r3, fp, #0
 8011ca2:	9308      	str	r3, [sp, #32]
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ca8:	e7bf      	b.n	8011c2a <_dtoa_r+0x1e2>
 8011caa:	2300      	movs	r3, #0
 8011cac:	9309      	str	r3, [sp, #36]	; 0x24
 8011cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	dc52      	bgt.n	8011d5a <_dtoa_r+0x312>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	9301      	str	r3, [sp, #4]
 8011cb8:	9304      	str	r3, [sp, #16]
 8011cba:	461a      	mov	r2, r3
 8011cbc:	920a      	str	r2, [sp, #40]	; 0x28
 8011cbe:	e00b      	b.n	8011cd8 <_dtoa_r+0x290>
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	e7f3      	b.n	8011cac <_dtoa_r+0x264>
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8011cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cca:	445b      	add	r3, fp
 8011ccc:	9301      	str	r3, [sp, #4]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	9304      	str	r3, [sp, #16]
 8011cd4:	bfb8      	it	lt
 8011cd6:	2301      	movlt	r3, #1
 8011cd8:	69e0      	ldr	r0, [r4, #28]
 8011cda:	2100      	movs	r1, #0
 8011cdc:	2204      	movs	r2, #4
 8011cde:	f102 0614 	add.w	r6, r2, #20
 8011ce2:	429e      	cmp	r6, r3
 8011ce4:	d93d      	bls.n	8011d62 <_dtoa_r+0x31a>
 8011ce6:	6041      	str	r1, [r0, #4]
 8011ce8:	4620      	mov	r0, r4
 8011cea:	f000 fd9f 	bl	801282c <_Balloc>
 8011cee:	9000      	str	r0, [sp, #0]
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	d139      	bne.n	8011d68 <_dtoa_r+0x320>
 8011cf4:	4b16      	ldr	r3, [pc, #88]	; (8011d50 <_dtoa_r+0x308>)
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	f240 11af 	movw	r1, #431	; 0x1af
 8011cfc:	e6bd      	b.n	8011a7a <_dtoa_r+0x32>
 8011cfe:	2301      	movs	r3, #1
 8011d00:	e7e1      	b.n	8011cc6 <_dtoa_r+0x27e>
 8011d02:	2501      	movs	r5, #1
 8011d04:	2300      	movs	r3, #0
 8011d06:	9307      	str	r3, [sp, #28]
 8011d08:	9509      	str	r5, [sp, #36]	; 0x24
 8011d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8011d0e:	9301      	str	r3, [sp, #4]
 8011d10:	9304      	str	r3, [sp, #16]
 8011d12:	2200      	movs	r2, #0
 8011d14:	2312      	movs	r3, #18
 8011d16:	e7d1      	b.n	8011cbc <_dtoa_r+0x274>
 8011d18:	636f4361 	.word	0x636f4361
 8011d1c:	3fd287a7 	.word	0x3fd287a7
 8011d20:	8b60c8b3 	.word	0x8b60c8b3
 8011d24:	3fc68a28 	.word	0x3fc68a28
 8011d28:	509f79fb 	.word	0x509f79fb
 8011d2c:	3fd34413 	.word	0x3fd34413
 8011d30:	08015360 	.word	0x08015360
 8011d34:	08015377 	.word	0x08015377
 8011d38:	7ff00000 	.word	0x7ff00000
 8011d3c:	0801535c 	.word	0x0801535c
 8011d40:	08015353 	.word	0x08015353
 8011d44:	0801532b 	.word	0x0801532b
 8011d48:	3ff80000 	.word	0x3ff80000
 8011d4c:	08015468 	.word	0x08015468
 8011d50:	080153cf 	.word	0x080153cf
 8011d54:	2301      	movs	r3, #1
 8011d56:	9309      	str	r3, [sp, #36]	; 0x24
 8011d58:	e7d7      	b.n	8011d0a <_dtoa_r+0x2c2>
 8011d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d5c:	9301      	str	r3, [sp, #4]
 8011d5e:	9304      	str	r3, [sp, #16]
 8011d60:	e7ba      	b.n	8011cd8 <_dtoa_r+0x290>
 8011d62:	3101      	adds	r1, #1
 8011d64:	0052      	lsls	r2, r2, #1
 8011d66:	e7ba      	b.n	8011cde <_dtoa_r+0x296>
 8011d68:	69e3      	ldr	r3, [r4, #28]
 8011d6a:	9a00      	ldr	r2, [sp, #0]
 8011d6c:	601a      	str	r2, [r3, #0]
 8011d6e:	9b04      	ldr	r3, [sp, #16]
 8011d70:	2b0e      	cmp	r3, #14
 8011d72:	f200 80a8 	bhi.w	8011ec6 <_dtoa_r+0x47e>
 8011d76:	2d00      	cmp	r5, #0
 8011d78:	f000 80a5 	beq.w	8011ec6 <_dtoa_r+0x47e>
 8011d7c:	f1bb 0f00 	cmp.w	fp, #0
 8011d80:	dd38      	ble.n	8011df4 <_dtoa_r+0x3ac>
 8011d82:	4bc0      	ldr	r3, [pc, #768]	; (8012084 <_dtoa_r+0x63c>)
 8011d84:	f00b 020f 	and.w	r2, fp, #15
 8011d88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8011d90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8011d94:	ea4f 182b 	mov.w	r8, fp, asr #4
 8011d98:	d019      	beq.n	8011dce <_dtoa_r+0x386>
 8011d9a:	4bbb      	ldr	r3, [pc, #748]	; (8012088 <_dtoa_r+0x640>)
 8011d9c:	ec51 0b18 	vmov	r0, r1, d8
 8011da0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011da4:	f7ee fd52 	bl	800084c <__aeabi_ddiv>
 8011da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dac:	f008 080f 	and.w	r8, r8, #15
 8011db0:	2503      	movs	r5, #3
 8011db2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012088 <_dtoa_r+0x640>
 8011db6:	f1b8 0f00 	cmp.w	r8, #0
 8011dba:	d10a      	bne.n	8011dd2 <_dtoa_r+0x38a>
 8011dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dc0:	4632      	mov	r2, r6
 8011dc2:	463b      	mov	r3, r7
 8011dc4:	f7ee fd42 	bl	800084c <__aeabi_ddiv>
 8011dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dcc:	e02b      	b.n	8011e26 <_dtoa_r+0x3de>
 8011dce:	2502      	movs	r5, #2
 8011dd0:	e7ef      	b.n	8011db2 <_dtoa_r+0x36a>
 8011dd2:	f018 0f01 	tst.w	r8, #1
 8011dd6:	d008      	beq.n	8011dea <_dtoa_r+0x3a2>
 8011dd8:	4630      	mov	r0, r6
 8011dda:	4639      	mov	r1, r7
 8011ddc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011de0:	f7ee fc0a 	bl	80005f8 <__aeabi_dmul>
 8011de4:	3501      	adds	r5, #1
 8011de6:	4606      	mov	r6, r0
 8011de8:	460f      	mov	r7, r1
 8011dea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011dee:	f109 0908 	add.w	r9, r9, #8
 8011df2:	e7e0      	b.n	8011db6 <_dtoa_r+0x36e>
 8011df4:	f000 809f 	beq.w	8011f36 <_dtoa_r+0x4ee>
 8011df8:	f1cb 0600 	rsb	r6, fp, #0
 8011dfc:	4ba1      	ldr	r3, [pc, #644]	; (8012084 <_dtoa_r+0x63c>)
 8011dfe:	4fa2      	ldr	r7, [pc, #648]	; (8012088 <_dtoa_r+0x640>)
 8011e00:	f006 020f 	and.w	r2, r6, #15
 8011e04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e0c:	ec51 0b18 	vmov	r0, r1, d8
 8011e10:	f7ee fbf2 	bl	80005f8 <__aeabi_dmul>
 8011e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e18:	1136      	asrs	r6, r6, #4
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	2502      	movs	r5, #2
 8011e1e:	2e00      	cmp	r6, #0
 8011e20:	d17e      	bne.n	8011f20 <_dtoa_r+0x4d8>
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d1d0      	bne.n	8011dc8 <_dtoa_r+0x380>
 8011e26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	f000 8084 	beq.w	8011f3a <_dtoa_r+0x4f2>
 8011e32:	4b96      	ldr	r3, [pc, #600]	; (801208c <_dtoa_r+0x644>)
 8011e34:	2200      	movs	r2, #0
 8011e36:	4640      	mov	r0, r8
 8011e38:	4649      	mov	r1, r9
 8011e3a:	f7ee fe4f 	bl	8000adc <__aeabi_dcmplt>
 8011e3e:	2800      	cmp	r0, #0
 8011e40:	d07b      	beq.n	8011f3a <_dtoa_r+0x4f2>
 8011e42:	9b04      	ldr	r3, [sp, #16]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d078      	beq.n	8011f3a <_dtoa_r+0x4f2>
 8011e48:	9b01      	ldr	r3, [sp, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	dd39      	ble.n	8011ec2 <_dtoa_r+0x47a>
 8011e4e:	4b90      	ldr	r3, [pc, #576]	; (8012090 <_dtoa_r+0x648>)
 8011e50:	2200      	movs	r2, #0
 8011e52:	4640      	mov	r0, r8
 8011e54:	4649      	mov	r1, r9
 8011e56:	f7ee fbcf 	bl	80005f8 <__aeabi_dmul>
 8011e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e5e:	9e01      	ldr	r6, [sp, #4]
 8011e60:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011e64:	3501      	adds	r5, #1
 8011e66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	f7ee fb5a 	bl	8000524 <__aeabi_i2d>
 8011e70:	4642      	mov	r2, r8
 8011e72:	464b      	mov	r3, r9
 8011e74:	f7ee fbc0 	bl	80005f8 <__aeabi_dmul>
 8011e78:	4b86      	ldr	r3, [pc, #536]	; (8012094 <_dtoa_r+0x64c>)
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	f7ee fa06 	bl	800028c <__adddf3>
 8011e80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e88:	9303      	str	r3, [sp, #12]
 8011e8a:	2e00      	cmp	r6, #0
 8011e8c:	d158      	bne.n	8011f40 <_dtoa_r+0x4f8>
 8011e8e:	4b82      	ldr	r3, [pc, #520]	; (8012098 <_dtoa_r+0x650>)
 8011e90:	2200      	movs	r2, #0
 8011e92:	4640      	mov	r0, r8
 8011e94:	4649      	mov	r1, r9
 8011e96:	f7ee f9f7 	bl	8000288 <__aeabi_dsub>
 8011e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e9e:	4680      	mov	r8, r0
 8011ea0:	4689      	mov	r9, r1
 8011ea2:	f7ee fe39 	bl	8000b18 <__aeabi_dcmpgt>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	f040 8296 	bne.w	80123d8 <_dtoa_r+0x990>
 8011eac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011eb0:	4640      	mov	r0, r8
 8011eb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011eb6:	4649      	mov	r1, r9
 8011eb8:	f7ee fe10 	bl	8000adc <__aeabi_dcmplt>
 8011ebc:	2800      	cmp	r0, #0
 8011ebe:	f040 8289 	bne.w	80123d4 <_dtoa_r+0x98c>
 8011ec2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011ec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	f2c0 814e 	blt.w	801216a <_dtoa_r+0x722>
 8011ece:	f1bb 0f0e 	cmp.w	fp, #14
 8011ed2:	f300 814a 	bgt.w	801216a <_dtoa_r+0x722>
 8011ed6:	4b6b      	ldr	r3, [pc, #428]	; (8012084 <_dtoa_r+0x63c>)
 8011ed8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f280 80dc 	bge.w	80120a0 <_dtoa_r+0x658>
 8011ee8:	9b04      	ldr	r3, [sp, #16]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	f300 80d8 	bgt.w	80120a0 <_dtoa_r+0x658>
 8011ef0:	f040 826f 	bne.w	80123d2 <_dtoa_r+0x98a>
 8011ef4:	4b68      	ldr	r3, [pc, #416]	; (8012098 <_dtoa_r+0x650>)
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	4640      	mov	r0, r8
 8011efa:	4649      	mov	r1, r9
 8011efc:	f7ee fb7c 	bl	80005f8 <__aeabi_dmul>
 8011f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f04:	f7ee fdfe 	bl	8000b04 <__aeabi_dcmpge>
 8011f08:	9e04      	ldr	r6, [sp, #16]
 8011f0a:	4637      	mov	r7, r6
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	f040 8245 	bne.w	801239c <_dtoa_r+0x954>
 8011f12:	9d00      	ldr	r5, [sp, #0]
 8011f14:	2331      	movs	r3, #49	; 0x31
 8011f16:	f805 3b01 	strb.w	r3, [r5], #1
 8011f1a:	f10b 0b01 	add.w	fp, fp, #1
 8011f1e:	e241      	b.n	80123a4 <_dtoa_r+0x95c>
 8011f20:	07f2      	lsls	r2, r6, #31
 8011f22:	d505      	bpl.n	8011f30 <_dtoa_r+0x4e8>
 8011f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f28:	f7ee fb66 	bl	80005f8 <__aeabi_dmul>
 8011f2c:	3501      	adds	r5, #1
 8011f2e:	2301      	movs	r3, #1
 8011f30:	1076      	asrs	r6, r6, #1
 8011f32:	3708      	adds	r7, #8
 8011f34:	e773      	b.n	8011e1e <_dtoa_r+0x3d6>
 8011f36:	2502      	movs	r5, #2
 8011f38:	e775      	b.n	8011e26 <_dtoa_r+0x3de>
 8011f3a:	9e04      	ldr	r6, [sp, #16]
 8011f3c:	465f      	mov	r7, fp
 8011f3e:	e792      	b.n	8011e66 <_dtoa_r+0x41e>
 8011f40:	9900      	ldr	r1, [sp, #0]
 8011f42:	4b50      	ldr	r3, [pc, #320]	; (8012084 <_dtoa_r+0x63c>)
 8011f44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f48:	4431      	add	r1, r6
 8011f4a:	9102      	str	r1, [sp, #8]
 8011f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f4e:	eeb0 9a47 	vmov.f32	s18, s14
 8011f52:	eef0 9a67 	vmov.f32	s19, s15
 8011f56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011f5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011f5e:	2900      	cmp	r1, #0
 8011f60:	d044      	beq.n	8011fec <_dtoa_r+0x5a4>
 8011f62:	494e      	ldr	r1, [pc, #312]	; (801209c <_dtoa_r+0x654>)
 8011f64:	2000      	movs	r0, #0
 8011f66:	f7ee fc71 	bl	800084c <__aeabi_ddiv>
 8011f6a:	ec53 2b19 	vmov	r2, r3, d9
 8011f6e:	f7ee f98b 	bl	8000288 <__aeabi_dsub>
 8011f72:	9d00      	ldr	r5, [sp, #0]
 8011f74:	ec41 0b19 	vmov	d9, r0, r1
 8011f78:	4649      	mov	r1, r9
 8011f7a:	4640      	mov	r0, r8
 8011f7c:	f7ee fdec 	bl	8000b58 <__aeabi_d2iz>
 8011f80:	4606      	mov	r6, r0
 8011f82:	f7ee facf 	bl	8000524 <__aeabi_i2d>
 8011f86:	4602      	mov	r2, r0
 8011f88:	460b      	mov	r3, r1
 8011f8a:	4640      	mov	r0, r8
 8011f8c:	4649      	mov	r1, r9
 8011f8e:	f7ee f97b 	bl	8000288 <__aeabi_dsub>
 8011f92:	3630      	adds	r6, #48	; 0x30
 8011f94:	f805 6b01 	strb.w	r6, [r5], #1
 8011f98:	ec53 2b19 	vmov	r2, r3, d9
 8011f9c:	4680      	mov	r8, r0
 8011f9e:	4689      	mov	r9, r1
 8011fa0:	f7ee fd9c 	bl	8000adc <__aeabi_dcmplt>
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	d164      	bne.n	8012072 <_dtoa_r+0x62a>
 8011fa8:	4642      	mov	r2, r8
 8011faa:	464b      	mov	r3, r9
 8011fac:	4937      	ldr	r1, [pc, #220]	; (801208c <_dtoa_r+0x644>)
 8011fae:	2000      	movs	r0, #0
 8011fb0:	f7ee f96a 	bl	8000288 <__aeabi_dsub>
 8011fb4:	ec53 2b19 	vmov	r2, r3, d9
 8011fb8:	f7ee fd90 	bl	8000adc <__aeabi_dcmplt>
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	f040 80b6 	bne.w	801212e <_dtoa_r+0x6e6>
 8011fc2:	9b02      	ldr	r3, [sp, #8]
 8011fc4:	429d      	cmp	r5, r3
 8011fc6:	f43f af7c 	beq.w	8011ec2 <_dtoa_r+0x47a>
 8011fca:	4b31      	ldr	r3, [pc, #196]	; (8012090 <_dtoa_r+0x648>)
 8011fcc:	ec51 0b19 	vmov	r0, r1, d9
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	f7ee fb11 	bl	80005f8 <__aeabi_dmul>
 8011fd6:	4b2e      	ldr	r3, [pc, #184]	; (8012090 <_dtoa_r+0x648>)
 8011fd8:	ec41 0b19 	vmov	d9, r0, r1
 8011fdc:	2200      	movs	r2, #0
 8011fde:	4640      	mov	r0, r8
 8011fe0:	4649      	mov	r1, r9
 8011fe2:	f7ee fb09 	bl	80005f8 <__aeabi_dmul>
 8011fe6:	4680      	mov	r8, r0
 8011fe8:	4689      	mov	r9, r1
 8011fea:	e7c5      	b.n	8011f78 <_dtoa_r+0x530>
 8011fec:	ec51 0b17 	vmov	r0, r1, d7
 8011ff0:	f7ee fb02 	bl	80005f8 <__aeabi_dmul>
 8011ff4:	9b02      	ldr	r3, [sp, #8]
 8011ff6:	9d00      	ldr	r5, [sp, #0]
 8011ff8:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ffa:	ec41 0b19 	vmov	d9, r0, r1
 8011ffe:	4649      	mov	r1, r9
 8012000:	4640      	mov	r0, r8
 8012002:	f7ee fda9 	bl	8000b58 <__aeabi_d2iz>
 8012006:	4606      	mov	r6, r0
 8012008:	f7ee fa8c 	bl	8000524 <__aeabi_i2d>
 801200c:	3630      	adds	r6, #48	; 0x30
 801200e:	4602      	mov	r2, r0
 8012010:	460b      	mov	r3, r1
 8012012:	4640      	mov	r0, r8
 8012014:	4649      	mov	r1, r9
 8012016:	f7ee f937 	bl	8000288 <__aeabi_dsub>
 801201a:	f805 6b01 	strb.w	r6, [r5], #1
 801201e:	9b02      	ldr	r3, [sp, #8]
 8012020:	429d      	cmp	r5, r3
 8012022:	4680      	mov	r8, r0
 8012024:	4689      	mov	r9, r1
 8012026:	f04f 0200 	mov.w	r2, #0
 801202a:	d124      	bne.n	8012076 <_dtoa_r+0x62e>
 801202c:	4b1b      	ldr	r3, [pc, #108]	; (801209c <_dtoa_r+0x654>)
 801202e:	ec51 0b19 	vmov	r0, r1, d9
 8012032:	f7ee f92b 	bl	800028c <__adddf3>
 8012036:	4602      	mov	r2, r0
 8012038:	460b      	mov	r3, r1
 801203a:	4640      	mov	r0, r8
 801203c:	4649      	mov	r1, r9
 801203e:	f7ee fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 8012042:	2800      	cmp	r0, #0
 8012044:	d173      	bne.n	801212e <_dtoa_r+0x6e6>
 8012046:	ec53 2b19 	vmov	r2, r3, d9
 801204a:	4914      	ldr	r1, [pc, #80]	; (801209c <_dtoa_r+0x654>)
 801204c:	2000      	movs	r0, #0
 801204e:	f7ee f91b 	bl	8000288 <__aeabi_dsub>
 8012052:	4602      	mov	r2, r0
 8012054:	460b      	mov	r3, r1
 8012056:	4640      	mov	r0, r8
 8012058:	4649      	mov	r1, r9
 801205a:	f7ee fd3f 	bl	8000adc <__aeabi_dcmplt>
 801205e:	2800      	cmp	r0, #0
 8012060:	f43f af2f 	beq.w	8011ec2 <_dtoa_r+0x47a>
 8012064:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012066:	1e6b      	subs	r3, r5, #1
 8012068:	930f      	str	r3, [sp, #60]	; 0x3c
 801206a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801206e:	2b30      	cmp	r3, #48	; 0x30
 8012070:	d0f8      	beq.n	8012064 <_dtoa_r+0x61c>
 8012072:	46bb      	mov	fp, r7
 8012074:	e04a      	b.n	801210c <_dtoa_r+0x6c4>
 8012076:	4b06      	ldr	r3, [pc, #24]	; (8012090 <_dtoa_r+0x648>)
 8012078:	f7ee fabe 	bl	80005f8 <__aeabi_dmul>
 801207c:	4680      	mov	r8, r0
 801207e:	4689      	mov	r9, r1
 8012080:	e7bd      	b.n	8011ffe <_dtoa_r+0x5b6>
 8012082:	bf00      	nop
 8012084:	08015468 	.word	0x08015468
 8012088:	08015440 	.word	0x08015440
 801208c:	3ff00000 	.word	0x3ff00000
 8012090:	40240000 	.word	0x40240000
 8012094:	401c0000 	.word	0x401c0000
 8012098:	40140000 	.word	0x40140000
 801209c:	3fe00000 	.word	0x3fe00000
 80120a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80120a4:	9d00      	ldr	r5, [sp, #0]
 80120a6:	4642      	mov	r2, r8
 80120a8:	464b      	mov	r3, r9
 80120aa:	4630      	mov	r0, r6
 80120ac:	4639      	mov	r1, r7
 80120ae:	f7ee fbcd 	bl	800084c <__aeabi_ddiv>
 80120b2:	f7ee fd51 	bl	8000b58 <__aeabi_d2iz>
 80120b6:	9001      	str	r0, [sp, #4]
 80120b8:	f7ee fa34 	bl	8000524 <__aeabi_i2d>
 80120bc:	4642      	mov	r2, r8
 80120be:	464b      	mov	r3, r9
 80120c0:	f7ee fa9a 	bl	80005f8 <__aeabi_dmul>
 80120c4:	4602      	mov	r2, r0
 80120c6:	460b      	mov	r3, r1
 80120c8:	4630      	mov	r0, r6
 80120ca:	4639      	mov	r1, r7
 80120cc:	f7ee f8dc 	bl	8000288 <__aeabi_dsub>
 80120d0:	9e01      	ldr	r6, [sp, #4]
 80120d2:	9f04      	ldr	r7, [sp, #16]
 80120d4:	3630      	adds	r6, #48	; 0x30
 80120d6:	f805 6b01 	strb.w	r6, [r5], #1
 80120da:	9e00      	ldr	r6, [sp, #0]
 80120dc:	1bae      	subs	r6, r5, r6
 80120de:	42b7      	cmp	r7, r6
 80120e0:	4602      	mov	r2, r0
 80120e2:	460b      	mov	r3, r1
 80120e4:	d134      	bne.n	8012150 <_dtoa_r+0x708>
 80120e6:	f7ee f8d1 	bl	800028c <__adddf3>
 80120ea:	4642      	mov	r2, r8
 80120ec:	464b      	mov	r3, r9
 80120ee:	4606      	mov	r6, r0
 80120f0:	460f      	mov	r7, r1
 80120f2:	f7ee fd11 	bl	8000b18 <__aeabi_dcmpgt>
 80120f6:	b9c8      	cbnz	r0, 801212c <_dtoa_r+0x6e4>
 80120f8:	4642      	mov	r2, r8
 80120fa:	464b      	mov	r3, r9
 80120fc:	4630      	mov	r0, r6
 80120fe:	4639      	mov	r1, r7
 8012100:	f7ee fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8012104:	b110      	cbz	r0, 801210c <_dtoa_r+0x6c4>
 8012106:	9b01      	ldr	r3, [sp, #4]
 8012108:	07db      	lsls	r3, r3, #31
 801210a:	d40f      	bmi.n	801212c <_dtoa_r+0x6e4>
 801210c:	4651      	mov	r1, sl
 801210e:	4620      	mov	r0, r4
 8012110:	f000 fbcc 	bl	80128ac <_Bfree>
 8012114:	2300      	movs	r3, #0
 8012116:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012118:	702b      	strb	r3, [r5, #0]
 801211a:	f10b 0301 	add.w	r3, fp, #1
 801211e:	6013      	str	r3, [r2, #0]
 8012120:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012122:	2b00      	cmp	r3, #0
 8012124:	f43f ace2 	beq.w	8011aec <_dtoa_r+0xa4>
 8012128:	601d      	str	r5, [r3, #0]
 801212a:	e4df      	b.n	8011aec <_dtoa_r+0xa4>
 801212c:	465f      	mov	r7, fp
 801212e:	462b      	mov	r3, r5
 8012130:	461d      	mov	r5, r3
 8012132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012136:	2a39      	cmp	r2, #57	; 0x39
 8012138:	d106      	bne.n	8012148 <_dtoa_r+0x700>
 801213a:	9a00      	ldr	r2, [sp, #0]
 801213c:	429a      	cmp	r2, r3
 801213e:	d1f7      	bne.n	8012130 <_dtoa_r+0x6e8>
 8012140:	9900      	ldr	r1, [sp, #0]
 8012142:	2230      	movs	r2, #48	; 0x30
 8012144:	3701      	adds	r7, #1
 8012146:	700a      	strb	r2, [r1, #0]
 8012148:	781a      	ldrb	r2, [r3, #0]
 801214a:	3201      	adds	r2, #1
 801214c:	701a      	strb	r2, [r3, #0]
 801214e:	e790      	b.n	8012072 <_dtoa_r+0x62a>
 8012150:	4ba3      	ldr	r3, [pc, #652]	; (80123e0 <_dtoa_r+0x998>)
 8012152:	2200      	movs	r2, #0
 8012154:	f7ee fa50 	bl	80005f8 <__aeabi_dmul>
 8012158:	2200      	movs	r2, #0
 801215a:	2300      	movs	r3, #0
 801215c:	4606      	mov	r6, r0
 801215e:	460f      	mov	r7, r1
 8012160:	f7ee fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8012164:	2800      	cmp	r0, #0
 8012166:	d09e      	beq.n	80120a6 <_dtoa_r+0x65e>
 8012168:	e7d0      	b.n	801210c <_dtoa_r+0x6c4>
 801216a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801216c:	2a00      	cmp	r2, #0
 801216e:	f000 80ca 	beq.w	8012306 <_dtoa_r+0x8be>
 8012172:	9a07      	ldr	r2, [sp, #28]
 8012174:	2a01      	cmp	r2, #1
 8012176:	f300 80ad 	bgt.w	80122d4 <_dtoa_r+0x88c>
 801217a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801217c:	2a00      	cmp	r2, #0
 801217e:	f000 80a5 	beq.w	80122cc <_dtoa_r+0x884>
 8012182:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012186:	9e08      	ldr	r6, [sp, #32]
 8012188:	9d05      	ldr	r5, [sp, #20]
 801218a:	9a05      	ldr	r2, [sp, #20]
 801218c:	441a      	add	r2, r3
 801218e:	9205      	str	r2, [sp, #20]
 8012190:	9a06      	ldr	r2, [sp, #24]
 8012192:	2101      	movs	r1, #1
 8012194:	441a      	add	r2, r3
 8012196:	4620      	mov	r0, r4
 8012198:	9206      	str	r2, [sp, #24]
 801219a:	f000 fc87 	bl	8012aac <__i2b>
 801219e:	4607      	mov	r7, r0
 80121a0:	b165      	cbz	r5, 80121bc <_dtoa_r+0x774>
 80121a2:	9b06      	ldr	r3, [sp, #24]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	dd09      	ble.n	80121bc <_dtoa_r+0x774>
 80121a8:	42ab      	cmp	r3, r5
 80121aa:	9a05      	ldr	r2, [sp, #20]
 80121ac:	bfa8      	it	ge
 80121ae:	462b      	movge	r3, r5
 80121b0:	1ad2      	subs	r2, r2, r3
 80121b2:	9205      	str	r2, [sp, #20]
 80121b4:	9a06      	ldr	r2, [sp, #24]
 80121b6:	1aed      	subs	r5, r5, r3
 80121b8:	1ad3      	subs	r3, r2, r3
 80121ba:	9306      	str	r3, [sp, #24]
 80121bc:	9b08      	ldr	r3, [sp, #32]
 80121be:	b1f3      	cbz	r3, 80121fe <_dtoa_r+0x7b6>
 80121c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	f000 80a3 	beq.w	801230e <_dtoa_r+0x8c6>
 80121c8:	2e00      	cmp	r6, #0
 80121ca:	dd10      	ble.n	80121ee <_dtoa_r+0x7a6>
 80121cc:	4639      	mov	r1, r7
 80121ce:	4632      	mov	r2, r6
 80121d0:	4620      	mov	r0, r4
 80121d2:	f000 fd2b 	bl	8012c2c <__pow5mult>
 80121d6:	4652      	mov	r2, sl
 80121d8:	4601      	mov	r1, r0
 80121da:	4607      	mov	r7, r0
 80121dc:	4620      	mov	r0, r4
 80121de:	f000 fc7b 	bl	8012ad8 <__multiply>
 80121e2:	4651      	mov	r1, sl
 80121e4:	4680      	mov	r8, r0
 80121e6:	4620      	mov	r0, r4
 80121e8:	f000 fb60 	bl	80128ac <_Bfree>
 80121ec:	46c2      	mov	sl, r8
 80121ee:	9b08      	ldr	r3, [sp, #32]
 80121f0:	1b9a      	subs	r2, r3, r6
 80121f2:	d004      	beq.n	80121fe <_dtoa_r+0x7b6>
 80121f4:	4651      	mov	r1, sl
 80121f6:	4620      	mov	r0, r4
 80121f8:	f000 fd18 	bl	8012c2c <__pow5mult>
 80121fc:	4682      	mov	sl, r0
 80121fe:	2101      	movs	r1, #1
 8012200:	4620      	mov	r0, r4
 8012202:	f000 fc53 	bl	8012aac <__i2b>
 8012206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012208:	2b00      	cmp	r3, #0
 801220a:	4606      	mov	r6, r0
 801220c:	f340 8081 	ble.w	8012312 <_dtoa_r+0x8ca>
 8012210:	461a      	mov	r2, r3
 8012212:	4601      	mov	r1, r0
 8012214:	4620      	mov	r0, r4
 8012216:	f000 fd09 	bl	8012c2c <__pow5mult>
 801221a:	9b07      	ldr	r3, [sp, #28]
 801221c:	2b01      	cmp	r3, #1
 801221e:	4606      	mov	r6, r0
 8012220:	dd7a      	ble.n	8012318 <_dtoa_r+0x8d0>
 8012222:	f04f 0800 	mov.w	r8, #0
 8012226:	6933      	ldr	r3, [r6, #16]
 8012228:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801222c:	6918      	ldr	r0, [r3, #16]
 801222e:	f000 fbef 	bl	8012a10 <__hi0bits>
 8012232:	f1c0 0020 	rsb	r0, r0, #32
 8012236:	9b06      	ldr	r3, [sp, #24]
 8012238:	4418      	add	r0, r3
 801223a:	f010 001f 	ands.w	r0, r0, #31
 801223e:	f000 8094 	beq.w	801236a <_dtoa_r+0x922>
 8012242:	f1c0 0320 	rsb	r3, r0, #32
 8012246:	2b04      	cmp	r3, #4
 8012248:	f340 8085 	ble.w	8012356 <_dtoa_r+0x90e>
 801224c:	9b05      	ldr	r3, [sp, #20]
 801224e:	f1c0 001c 	rsb	r0, r0, #28
 8012252:	4403      	add	r3, r0
 8012254:	9305      	str	r3, [sp, #20]
 8012256:	9b06      	ldr	r3, [sp, #24]
 8012258:	4403      	add	r3, r0
 801225a:	4405      	add	r5, r0
 801225c:	9306      	str	r3, [sp, #24]
 801225e:	9b05      	ldr	r3, [sp, #20]
 8012260:	2b00      	cmp	r3, #0
 8012262:	dd05      	ble.n	8012270 <_dtoa_r+0x828>
 8012264:	4651      	mov	r1, sl
 8012266:	461a      	mov	r2, r3
 8012268:	4620      	mov	r0, r4
 801226a:	f000 fd39 	bl	8012ce0 <__lshift>
 801226e:	4682      	mov	sl, r0
 8012270:	9b06      	ldr	r3, [sp, #24]
 8012272:	2b00      	cmp	r3, #0
 8012274:	dd05      	ble.n	8012282 <_dtoa_r+0x83a>
 8012276:	4631      	mov	r1, r6
 8012278:	461a      	mov	r2, r3
 801227a:	4620      	mov	r0, r4
 801227c:	f000 fd30 	bl	8012ce0 <__lshift>
 8012280:	4606      	mov	r6, r0
 8012282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012284:	2b00      	cmp	r3, #0
 8012286:	d072      	beq.n	801236e <_dtoa_r+0x926>
 8012288:	4631      	mov	r1, r6
 801228a:	4650      	mov	r0, sl
 801228c:	f000 fd94 	bl	8012db8 <__mcmp>
 8012290:	2800      	cmp	r0, #0
 8012292:	da6c      	bge.n	801236e <_dtoa_r+0x926>
 8012294:	2300      	movs	r3, #0
 8012296:	4651      	mov	r1, sl
 8012298:	220a      	movs	r2, #10
 801229a:	4620      	mov	r0, r4
 801229c:	f000 fb28 	bl	80128f0 <__multadd>
 80122a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80122a6:	4682      	mov	sl, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f000 81b0 	beq.w	801260e <_dtoa_r+0xbc6>
 80122ae:	2300      	movs	r3, #0
 80122b0:	4639      	mov	r1, r7
 80122b2:	220a      	movs	r2, #10
 80122b4:	4620      	mov	r0, r4
 80122b6:	f000 fb1b 	bl	80128f0 <__multadd>
 80122ba:	9b01      	ldr	r3, [sp, #4]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	4607      	mov	r7, r0
 80122c0:	f300 8096 	bgt.w	80123f0 <_dtoa_r+0x9a8>
 80122c4:	9b07      	ldr	r3, [sp, #28]
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	dc59      	bgt.n	801237e <_dtoa_r+0x936>
 80122ca:	e091      	b.n	80123f0 <_dtoa_r+0x9a8>
 80122cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80122d2:	e758      	b.n	8012186 <_dtoa_r+0x73e>
 80122d4:	9b04      	ldr	r3, [sp, #16]
 80122d6:	1e5e      	subs	r6, r3, #1
 80122d8:	9b08      	ldr	r3, [sp, #32]
 80122da:	42b3      	cmp	r3, r6
 80122dc:	bfbf      	itttt	lt
 80122de:	9b08      	ldrlt	r3, [sp, #32]
 80122e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80122e2:	9608      	strlt	r6, [sp, #32]
 80122e4:	1af3      	sublt	r3, r6, r3
 80122e6:	bfb4      	ite	lt
 80122e8:	18d2      	addlt	r2, r2, r3
 80122ea:	1b9e      	subge	r6, r3, r6
 80122ec:	9b04      	ldr	r3, [sp, #16]
 80122ee:	bfbc      	itt	lt
 80122f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80122f2:	2600      	movlt	r6, #0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	bfb7      	itett	lt
 80122f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80122fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012300:	1a9d      	sublt	r5, r3, r2
 8012302:	2300      	movlt	r3, #0
 8012304:	e741      	b.n	801218a <_dtoa_r+0x742>
 8012306:	9e08      	ldr	r6, [sp, #32]
 8012308:	9d05      	ldr	r5, [sp, #20]
 801230a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801230c:	e748      	b.n	80121a0 <_dtoa_r+0x758>
 801230e:	9a08      	ldr	r2, [sp, #32]
 8012310:	e770      	b.n	80121f4 <_dtoa_r+0x7ac>
 8012312:	9b07      	ldr	r3, [sp, #28]
 8012314:	2b01      	cmp	r3, #1
 8012316:	dc19      	bgt.n	801234c <_dtoa_r+0x904>
 8012318:	9b02      	ldr	r3, [sp, #8]
 801231a:	b9bb      	cbnz	r3, 801234c <_dtoa_r+0x904>
 801231c:	9b03      	ldr	r3, [sp, #12]
 801231e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012322:	b99b      	cbnz	r3, 801234c <_dtoa_r+0x904>
 8012324:	9b03      	ldr	r3, [sp, #12]
 8012326:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801232a:	0d1b      	lsrs	r3, r3, #20
 801232c:	051b      	lsls	r3, r3, #20
 801232e:	b183      	cbz	r3, 8012352 <_dtoa_r+0x90a>
 8012330:	9b05      	ldr	r3, [sp, #20]
 8012332:	3301      	adds	r3, #1
 8012334:	9305      	str	r3, [sp, #20]
 8012336:	9b06      	ldr	r3, [sp, #24]
 8012338:	3301      	adds	r3, #1
 801233a:	9306      	str	r3, [sp, #24]
 801233c:	f04f 0801 	mov.w	r8, #1
 8012340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012342:	2b00      	cmp	r3, #0
 8012344:	f47f af6f 	bne.w	8012226 <_dtoa_r+0x7de>
 8012348:	2001      	movs	r0, #1
 801234a:	e774      	b.n	8012236 <_dtoa_r+0x7ee>
 801234c:	f04f 0800 	mov.w	r8, #0
 8012350:	e7f6      	b.n	8012340 <_dtoa_r+0x8f8>
 8012352:	4698      	mov	r8, r3
 8012354:	e7f4      	b.n	8012340 <_dtoa_r+0x8f8>
 8012356:	d082      	beq.n	801225e <_dtoa_r+0x816>
 8012358:	9a05      	ldr	r2, [sp, #20]
 801235a:	331c      	adds	r3, #28
 801235c:	441a      	add	r2, r3
 801235e:	9205      	str	r2, [sp, #20]
 8012360:	9a06      	ldr	r2, [sp, #24]
 8012362:	441a      	add	r2, r3
 8012364:	441d      	add	r5, r3
 8012366:	9206      	str	r2, [sp, #24]
 8012368:	e779      	b.n	801225e <_dtoa_r+0x816>
 801236a:	4603      	mov	r3, r0
 801236c:	e7f4      	b.n	8012358 <_dtoa_r+0x910>
 801236e:	9b04      	ldr	r3, [sp, #16]
 8012370:	2b00      	cmp	r3, #0
 8012372:	dc37      	bgt.n	80123e4 <_dtoa_r+0x99c>
 8012374:	9b07      	ldr	r3, [sp, #28]
 8012376:	2b02      	cmp	r3, #2
 8012378:	dd34      	ble.n	80123e4 <_dtoa_r+0x99c>
 801237a:	9b04      	ldr	r3, [sp, #16]
 801237c:	9301      	str	r3, [sp, #4]
 801237e:	9b01      	ldr	r3, [sp, #4]
 8012380:	b963      	cbnz	r3, 801239c <_dtoa_r+0x954>
 8012382:	4631      	mov	r1, r6
 8012384:	2205      	movs	r2, #5
 8012386:	4620      	mov	r0, r4
 8012388:	f000 fab2 	bl	80128f0 <__multadd>
 801238c:	4601      	mov	r1, r0
 801238e:	4606      	mov	r6, r0
 8012390:	4650      	mov	r0, sl
 8012392:	f000 fd11 	bl	8012db8 <__mcmp>
 8012396:	2800      	cmp	r0, #0
 8012398:	f73f adbb 	bgt.w	8011f12 <_dtoa_r+0x4ca>
 801239c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801239e:	9d00      	ldr	r5, [sp, #0]
 80123a0:	ea6f 0b03 	mvn.w	fp, r3
 80123a4:	f04f 0800 	mov.w	r8, #0
 80123a8:	4631      	mov	r1, r6
 80123aa:	4620      	mov	r0, r4
 80123ac:	f000 fa7e 	bl	80128ac <_Bfree>
 80123b0:	2f00      	cmp	r7, #0
 80123b2:	f43f aeab 	beq.w	801210c <_dtoa_r+0x6c4>
 80123b6:	f1b8 0f00 	cmp.w	r8, #0
 80123ba:	d005      	beq.n	80123c8 <_dtoa_r+0x980>
 80123bc:	45b8      	cmp	r8, r7
 80123be:	d003      	beq.n	80123c8 <_dtoa_r+0x980>
 80123c0:	4641      	mov	r1, r8
 80123c2:	4620      	mov	r0, r4
 80123c4:	f000 fa72 	bl	80128ac <_Bfree>
 80123c8:	4639      	mov	r1, r7
 80123ca:	4620      	mov	r0, r4
 80123cc:	f000 fa6e 	bl	80128ac <_Bfree>
 80123d0:	e69c      	b.n	801210c <_dtoa_r+0x6c4>
 80123d2:	2600      	movs	r6, #0
 80123d4:	4637      	mov	r7, r6
 80123d6:	e7e1      	b.n	801239c <_dtoa_r+0x954>
 80123d8:	46bb      	mov	fp, r7
 80123da:	4637      	mov	r7, r6
 80123dc:	e599      	b.n	8011f12 <_dtoa_r+0x4ca>
 80123de:	bf00      	nop
 80123e0:	40240000 	.word	0x40240000
 80123e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	f000 80c8 	beq.w	801257c <_dtoa_r+0xb34>
 80123ec:	9b04      	ldr	r3, [sp, #16]
 80123ee:	9301      	str	r3, [sp, #4]
 80123f0:	2d00      	cmp	r5, #0
 80123f2:	dd05      	ble.n	8012400 <_dtoa_r+0x9b8>
 80123f4:	4639      	mov	r1, r7
 80123f6:	462a      	mov	r2, r5
 80123f8:	4620      	mov	r0, r4
 80123fa:	f000 fc71 	bl	8012ce0 <__lshift>
 80123fe:	4607      	mov	r7, r0
 8012400:	f1b8 0f00 	cmp.w	r8, #0
 8012404:	d05b      	beq.n	80124be <_dtoa_r+0xa76>
 8012406:	6879      	ldr	r1, [r7, #4]
 8012408:	4620      	mov	r0, r4
 801240a:	f000 fa0f 	bl	801282c <_Balloc>
 801240e:	4605      	mov	r5, r0
 8012410:	b928      	cbnz	r0, 801241e <_dtoa_r+0x9d6>
 8012412:	4b83      	ldr	r3, [pc, #524]	; (8012620 <_dtoa_r+0xbd8>)
 8012414:	4602      	mov	r2, r0
 8012416:	f240 21ef 	movw	r1, #751	; 0x2ef
 801241a:	f7ff bb2e 	b.w	8011a7a <_dtoa_r+0x32>
 801241e:	693a      	ldr	r2, [r7, #16]
 8012420:	3202      	adds	r2, #2
 8012422:	0092      	lsls	r2, r2, #2
 8012424:	f107 010c 	add.w	r1, r7, #12
 8012428:	300c      	adds	r0, #12
 801242a:	f7ff fa6f 	bl	801190c <memcpy>
 801242e:	2201      	movs	r2, #1
 8012430:	4629      	mov	r1, r5
 8012432:	4620      	mov	r0, r4
 8012434:	f000 fc54 	bl	8012ce0 <__lshift>
 8012438:	9b00      	ldr	r3, [sp, #0]
 801243a:	3301      	adds	r3, #1
 801243c:	9304      	str	r3, [sp, #16]
 801243e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012442:	4413      	add	r3, r2
 8012444:	9308      	str	r3, [sp, #32]
 8012446:	9b02      	ldr	r3, [sp, #8]
 8012448:	f003 0301 	and.w	r3, r3, #1
 801244c:	46b8      	mov	r8, r7
 801244e:	9306      	str	r3, [sp, #24]
 8012450:	4607      	mov	r7, r0
 8012452:	9b04      	ldr	r3, [sp, #16]
 8012454:	4631      	mov	r1, r6
 8012456:	3b01      	subs	r3, #1
 8012458:	4650      	mov	r0, sl
 801245a:	9301      	str	r3, [sp, #4]
 801245c:	f7ff fa6a 	bl	8011934 <quorem>
 8012460:	4641      	mov	r1, r8
 8012462:	9002      	str	r0, [sp, #8]
 8012464:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012468:	4650      	mov	r0, sl
 801246a:	f000 fca5 	bl	8012db8 <__mcmp>
 801246e:	463a      	mov	r2, r7
 8012470:	9005      	str	r0, [sp, #20]
 8012472:	4631      	mov	r1, r6
 8012474:	4620      	mov	r0, r4
 8012476:	f000 fcbb 	bl	8012df0 <__mdiff>
 801247a:	68c2      	ldr	r2, [r0, #12]
 801247c:	4605      	mov	r5, r0
 801247e:	bb02      	cbnz	r2, 80124c2 <_dtoa_r+0xa7a>
 8012480:	4601      	mov	r1, r0
 8012482:	4650      	mov	r0, sl
 8012484:	f000 fc98 	bl	8012db8 <__mcmp>
 8012488:	4602      	mov	r2, r0
 801248a:	4629      	mov	r1, r5
 801248c:	4620      	mov	r0, r4
 801248e:	9209      	str	r2, [sp, #36]	; 0x24
 8012490:	f000 fa0c 	bl	80128ac <_Bfree>
 8012494:	9b07      	ldr	r3, [sp, #28]
 8012496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012498:	9d04      	ldr	r5, [sp, #16]
 801249a:	ea43 0102 	orr.w	r1, r3, r2
 801249e:	9b06      	ldr	r3, [sp, #24]
 80124a0:	4319      	orrs	r1, r3
 80124a2:	d110      	bne.n	80124c6 <_dtoa_r+0xa7e>
 80124a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80124a8:	d029      	beq.n	80124fe <_dtoa_r+0xab6>
 80124aa:	9b05      	ldr	r3, [sp, #20]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	dd02      	ble.n	80124b6 <_dtoa_r+0xa6e>
 80124b0:	9b02      	ldr	r3, [sp, #8]
 80124b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80124b6:	9b01      	ldr	r3, [sp, #4]
 80124b8:	f883 9000 	strb.w	r9, [r3]
 80124bc:	e774      	b.n	80123a8 <_dtoa_r+0x960>
 80124be:	4638      	mov	r0, r7
 80124c0:	e7ba      	b.n	8012438 <_dtoa_r+0x9f0>
 80124c2:	2201      	movs	r2, #1
 80124c4:	e7e1      	b.n	801248a <_dtoa_r+0xa42>
 80124c6:	9b05      	ldr	r3, [sp, #20]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	db04      	blt.n	80124d6 <_dtoa_r+0xa8e>
 80124cc:	9907      	ldr	r1, [sp, #28]
 80124ce:	430b      	orrs	r3, r1
 80124d0:	9906      	ldr	r1, [sp, #24]
 80124d2:	430b      	orrs	r3, r1
 80124d4:	d120      	bne.n	8012518 <_dtoa_r+0xad0>
 80124d6:	2a00      	cmp	r2, #0
 80124d8:	dded      	ble.n	80124b6 <_dtoa_r+0xa6e>
 80124da:	4651      	mov	r1, sl
 80124dc:	2201      	movs	r2, #1
 80124de:	4620      	mov	r0, r4
 80124e0:	f000 fbfe 	bl	8012ce0 <__lshift>
 80124e4:	4631      	mov	r1, r6
 80124e6:	4682      	mov	sl, r0
 80124e8:	f000 fc66 	bl	8012db8 <__mcmp>
 80124ec:	2800      	cmp	r0, #0
 80124ee:	dc03      	bgt.n	80124f8 <_dtoa_r+0xab0>
 80124f0:	d1e1      	bne.n	80124b6 <_dtoa_r+0xa6e>
 80124f2:	f019 0f01 	tst.w	r9, #1
 80124f6:	d0de      	beq.n	80124b6 <_dtoa_r+0xa6e>
 80124f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80124fc:	d1d8      	bne.n	80124b0 <_dtoa_r+0xa68>
 80124fe:	9a01      	ldr	r2, [sp, #4]
 8012500:	2339      	movs	r3, #57	; 0x39
 8012502:	7013      	strb	r3, [r2, #0]
 8012504:	462b      	mov	r3, r5
 8012506:	461d      	mov	r5, r3
 8012508:	3b01      	subs	r3, #1
 801250a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801250e:	2a39      	cmp	r2, #57	; 0x39
 8012510:	d06c      	beq.n	80125ec <_dtoa_r+0xba4>
 8012512:	3201      	adds	r2, #1
 8012514:	701a      	strb	r2, [r3, #0]
 8012516:	e747      	b.n	80123a8 <_dtoa_r+0x960>
 8012518:	2a00      	cmp	r2, #0
 801251a:	dd07      	ble.n	801252c <_dtoa_r+0xae4>
 801251c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012520:	d0ed      	beq.n	80124fe <_dtoa_r+0xab6>
 8012522:	9a01      	ldr	r2, [sp, #4]
 8012524:	f109 0301 	add.w	r3, r9, #1
 8012528:	7013      	strb	r3, [r2, #0]
 801252a:	e73d      	b.n	80123a8 <_dtoa_r+0x960>
 801252c:	9b04      	ldr	r3, [sp, #16]
 801252e:	9a08      	ldr	r2, [sp, #32]
 8012530:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012534:	4293      	cmp	r3, r2
 8012536:	d043      	beq.n	80125c0 <_dtoa_r+0xb78>
 8012538:	4651      	mov	r1, sl
 801253a:	2300      	movs	r3, #0
 801253c:	220a      	movs	r2, #10
 801253e:	4620      	mov	r0, r4
 8012540:	f000 f9d6 	bl	80128f0 <__multadd>
 8012544:	45b8      	cmp	r8, r7
 8012546:	4682      	mov	sl, r0
 8012548:	f04f 0300 	mov.w	r3, #0
 801254c:	f04f 020a 	mov.w	r2, #10
 8012550:	4641      	mov	r1, r8
 8012552:	4620      	mov	r0, r4
 8012554:	d107      	bne.n	8012566 <_dtoa_r+0xb1e>
 8012556:	f000 f9cb 	bl	80128f0 <__multadd>
 801255a:	4680      	mov	r8, r0
 801255c:	4607      	mov	r7, r0
 801255e:	9b04      	ldr	r3, [sp, #16]
 8012560:	3301      	adds	r3, #1
 8012562:	9304      	str	r3, [sp, #16]
 8012564:	e775      	b.n	8012452 <_dtoa_r+0xa0a>
 8012566:	f000 f9c3 	bl	80128f0 <__multadd>
 801256a:	4639      	mov	r1, r7
 801256c:	4680      	mov	r8, r0
 801256e:	2300      	movs	r3, #0
 8012570:	220a      	movs	r2, #10
 8012572:	4620      	mov	r0, r4
 8012574:	f000 f9bc 	bl	80128f0 <__multadd>
 8012578:	4607      	mov	r7, r0
 801257a:	e7f0      	b.n	801255e <_dtoa_r+0xb16>
 801257c:	9b04      	ldr	r3, [sp, #16]
 801257e:	9301      	str	r3, [sp, #4]
 8012580:	9d00      	ldr	r5, [sp, #0]
 8012582:	4631      	mov	r1, r6
 8012584:	4650      	mov	r0, sl
 8012586:	f7ff f9d5 	bl	8011934 <quorem>
 801258a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801258e:	9b00      	ldr	r3, [sp, #0]
 8012590:	f805 9b01 	strb.w	r9, [r5], #1
 8012594:	1aea      	subs	r2, r5, r3
 8012596:	9b01      	ldr	r3, [sp, #4]
 8012598:	4293      	cmp	r3, r2
 801259a:	dd07      	ble.n	80125ac <_dtoa_r+0xb64>
 801259c:	4651      	mov	r1, sl
 801259e:	2300      	movs	r3, #0
 80125a0:	220a      	movs	r2, #10
 80125a2:	4620      	mov	r0, r4
 80125a4:	f000 f9a4 	bl	80128f0 <__multadd>
 80125a8:	4682      	mov	sl, r0
 80125aa:	e7ea      	b.n	8012582 <_dtoa_r+0xb3a>
 80125ac:	9b01      	ldr	r3, [sp, #4]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	bfc8      	it	gt
 80125b2:	461d      	movgt	r5, r3
 80125b4:	9b00      	ldr	r3, [sp, #0]
 80125b6:	bfd8      	it	le
 80125b8:	2501      	movle	r5, #1
 80125ba:	441d      	add	r5, r3
 80125bc:	f04f 0800 	mov.w	r8, #0
 80125c0:	4651      	mov	r1, sl
 80125c2:	2201      	movs	r2, #1
 80125c4:	4620      	mov	r0, r4
 80125c6:	f000 fb8b 	bl	8012ce0 <__lshift>
 80125ca:	4631      	mov	r1, r6
 80125cc:	4682      	mov	sl, r0
 80125ce:	f000 fbf3 	bl	8012db8 <__mcmp>
 80125d2:	2800      	cmp	r0, #0
 80125d4:	dc96      	bgt.n	8012504 <_dtoa_r+0xabc>
 80125d6:	d102      	bne.n	80125de <_dtoa_r+0xb96>
 80125d8:	f019 0f01 	tst.w	r9, #1
 80125dc:	d192      	bne.n	8012504 <_dtoa_r+0xabc>
 80125de:	462b      	mov	r3, r5
 80125e0:	461d      	mov	r5, r3
 80125e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80125e6:	2a30      	cmp	r2, #48	; 0x30
 80125e8:	d0fa      	beq.n	80125e0 <_dtoa_r+0xb98>
 80125ea:	e6dd      	b.n	80123a8 <_dtoa_r+0x960>
 80125ec:	9a00      	ldr	r2, [sp, #0]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d189      	bne.n	8012506 <_dtoa_r+0xabe>
 80125f2:	f10b 0b01 	add.w	fp, fp, #1
 80125f6:	2331      	movs	r3, #49	; 0x31
 80125f8:	e796      	b.n	8012528 <_dtoa_r+0xae0>
 80125fa:	4b0a      	ldr	r3, [pc, #40]	; (8012624 <_dtoa_r+0xbdc>)
 80125fc:	f7ff ba99 	b.w	8011b32 <_dtoa_r+0xea>
 8012600:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012602:	2b00      	cmp	r3, #0
 8012604:	f47f aa6d 	bne.w	8011ae2 <_dtoa_r+0x9a>
 8012608:	4b07      	ldr	r3, [pc, #28]	; (8012628 <_dtoa_r+0xbe0>)
 801260a:	f7ff ba92 	b.w	8011b32 <_dtoa_r+0xea>
 801260e:	9b01      	ldr	r3, [sp, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	dcb5      	bgt.n	8012580 <_dtoa_r+0xb38>
 8012614:	9b07      	ldr	r3, [sp, #28]
 8012616:	2b02      	cmp	r3, #2
 8012618:	f73f aeb1 	bgt.w	801237e <_dtoa_r+0x936>
 801261c:	e7b0      	b.n	8012580 <_dtoa_r+0xb38>
 801261e:	bf00      	nop
 8012620:	080153cf 	.word	0x080153cf
 8012624:	0801532a 	.word	0x0801532a
 8012628:	08015353 	.word	0x08015353

0801262c <_free_r>:
 801262c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801262e:	2900      	cmp	r1, #0
 8012630:	d044      	beq.n	80126bc <_free_r+0x90>
 8012632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012636:	9001      	str	r0, [sp, #4]
 8012638:	2b00      	cmp	r3, #0
 801263a:	f1a1 0404 	sub.w	r4, r1, #4
 801263e:	bfb8      	it	lt
 8012640:	18e4      	addlt	r4, r4, r3
 8012642:	f000 f8e7 	bl	8012814 <__malloc_lock>
 8012646:	4a1e      	ldr	r2, [pc, #120]	; (80126c0 <_free_r+0x94>)
 8012648:	9801      	ldr	r0, [sp, #4]
 801264a:	6813      	ldr	r3, [r2, #0]
 801264c:	b933      	cbnz	r3, 801265c <_free_r+0x30>
 801264e:	6063      	str	r3, [r4, #4]
 8012650:	6014      	str	r4, [r2, #0]
 8012652:	b003      	add	sp, #12
 8012654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012658:	f000 b8e2 	b.w	8012820 <__malloc_unlock>
 801265c:	42a3      	cmp	r3, r4
 801265e:	d908      	bls.n	8012672 <_free_r+0x46>
 8012660:	6825      	ldr	r5, [r4, #0]
 8012662:	1961      	adds	r1, r4, r5
 8012664:	428b      	cmp	r3, r1
 8012666:	bf01      	itttt	eq
 8012668:	6819      	ldreq	r1, [r3, #0]
 801266a:	685b      	ldreq	r3, [r3, #4]
 801266c:	1949      	addeq	r1, r1, r5
 801266e:	6021      	streq	r1, [r4, #0]
 8012670:	e7ed      	b.n	801264e <_free_r+0x22>
 8012672:	461a      	mov	r2, r3
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	b10b      	cbz	r3, 801267c <_free_r+0x50>
 8012678:	42a3      	cmp	r3, r4
 801267a:	d9fa      	bls.n	8012672 <_free_r+0x46>
 801267c:	6811      	ldr	r1, [r2, #0]
 801267e:	1855      	adds	r5, r2, r1
 8012680:	42a5      	cmp	r5, r4
 8012682:	d10b      	bne.n	801269c <_free_r+0x70>
 8012684:	6824      	ldr	r4, [r4, #0]
 8012686:	4421      	add	r1, r4
 8012688:	1854      	adds	r4, r2, r1
 801268a:	42a3      	cmp	r3, r4
 801268c:	6011      	str	r1, [r2, #0]
 801268e:	d1e0      	bne.n	8012652 <_free_r+0x26>
 8012690:	681c      	ldr	r4, [r3, #0]
 8012692:	685b      	ldr	r3, [r3, #4]
 8012694:	6053      	str	r3, [r2, #4]
 8012696:	440c      	add	r4, r1
 8012698:	6014      	str	r4, [r2, #0]
 801269a:	e7da      	b.n	8012652 <_free_r+0x26>
 801269c:	d902      	bls.n	80126a4 <_free_r+0x78>
 801269e:	230c      	movs	r3, #12
 80126a0:	6003      	str	r3, [r0, #0]
 80126a2:	e7d6      	b.n	8012652 <_free_r+0x26>
 80126a4:	6825      	ldr	r5, [r4, #0]
 80126a6:	1961      	adds	r1, r4, r5
 80126a8:	428b      	cmp	r3, r1
 80126aa:	bf04      	itt	eq
 80126ac:	6819      	ldreq	r1, [r3, #0]
 80126ae:	685b      	ldreq	r3, [r3, #4]
 80126b0:	6063      	str	r3, [r4, #4]
 80126b2:	bf04      	itt	eq
 80126b4:	1949      	addeq	r1, r1, r5
 80126b6:	6021      	streq	r1, [r4, #0]
 80126b8:	6054      	str	r4, [r2, #4]
 80126ba:	e7ca      	b.n	8012652 <_free_r+0x26>
 80126bc:	b003      	add	sp, #12
 80126be:	bd30      	pop	{r4, r5, pc}
 80126c0:	2000c4f4 	.word	0x2000c4f4

080126c4 <malloc>:
 80126c4:	4b02      	ldr	r3, [pc, #8]	; (80126d0 <malloc+0xc>)
 80126c6:	4601      	mov	r1, r0
 80126c8:	6818      	ldr	r0, [r3, #0]
 80126ca:	f000 b823 	b.w	8012714 <_malloc_r>
 80126ce:	bf00      	nop
 80126d0:	20000164 	.word	0x20000164

080126d4 <sbrk_aligned>:
 80126d4:	b570      	push	{r4, r5, r6, lr}
 80126d6:	4e0e      	ldr	r6, [pc, #56]	; (8012710 <sbrk_aligned+0x3c>)
 80126d8:	460c      	mov	r4, r1
 80126da:	6831      	ldr	r1, [r6, #0]
 80126dc:	4605      	mov	r5, r0
 80126de:	b911      	cbnz	r1, 80126e6 <sbrk_aligned+0x12>
 80126e0:	f001 fe1a 	bl	8014318 <_sbrk_r>
 80126e4:	6030      	str	r0, [r6, #0]
 80126e6:	4621      	mov	r1, r4
 80126e8:	4628      	mov	r0, r5
 80126ea:	f001 fe15 	bl	8014318 <_sbrk_r>
 80126ee:	1c43      	adds	r3, r0, #1
 80126f0:	d00a      	beq.n	8012708 <sbrk_aligned+0x34>
 80126f2:	1cc4      	adds	r4, r0, #3
 80126f4:	f024 0403 	bic.w	r4, r4, #3
 80126f8:	42a0      	cmp	r0, r4
 80126fa:	d007      	beq.n	801270c <sbrk_aligned+0x38>
 80126fc:	1a21      	subs	r1, r4, r0
 80126fe:	4628      	mov	r0, r5
 8012700:	f001 fe0a 	bl	8014318 <_sbrk_r>
 8012704:	3001      	adds	r0, #1
 8012706:	d101      	bne.n	801270c <sbrk_aligned+0x38>
 8012708:	f04f 34ff 	mov.w	r4, #4294967295
 801270c:	4620      	mov	r0, r4
 801270e:	bd70      	pop	{r4, r5, r6, pc}
 8012710:	2000c4f8 	.word	0x2000c4f8

08012714 <_malloc_r>:
 8012714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012718:	1ccd      	adds	r5, r1, #3
 801271a:	f025 0503 	bic.w	r5, r5, #3
 801271e:	3508      	adds	r5, #8
 8012720:	2d0c      	cmp	r5, #12
 8012722:	bf38      	it	cc
 8012724:	250c      	movcc	r5, #12
 8012726:	2d00      	cmp	r5, #0
 8012728:	4607      	mov	r7, r0
 801272a:	db01      	blt.n	8012730 <_malloc_r+0x1c>
 801272c:	42a9      	cmp	r1, r5
 801272e:	d905      	bls.n	801273c <_malloc_r+0x28>
 8012730:	230c      	movs	r3, #12
 8012732:	603b      	str	r3, [r7, #0]
 8012734:	2600      	movs	r6, #0
 8012736:	4630      	mov	r0, r6
 8012738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801273c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012810 <_malloc_r+0xfc>
 8012740:	f000 f868 	bl	8012814 <__malloc_lock>
 8012744:	f8d8 3000 	ldr.w	r3, [r8]
 8012748:	461c      	mov	r4, r3
 801274a:	bb5c      	cbnz	r4, 80127a4 <_malloc_r+0x90>
 801274c:	4629      	mov	r1, r5
 801274e:	4638      	mov	r0, r7
 8012750:	f7ff ffc0 	bl	80126d4 <sbrk_aligned>
 8012754:	1c43      	adds	r3, r0, #1
 8012756:	4604      	mov	r4, r0
 8012758:	d155      	bne.n	8012806 <_malloc_r+0xf2>
 801275a:	f8d8 4000 	ldr.w	r4, [r8]
 801275e:	4626      	mov	r6, r4
 8012760:	2e00      	cmp	r6, #0
 8012762:	d145      	bne.n	80127f0 <_malloc_r+0xdc>
 8012764:	2c00      	cmp	r4, #0
 8012766:	d048      	beq.n	80127fa <_malloc_r+0xe6>
 8012768:	6823      	ldr	r3, [r4, #0]
 801276a:	4631      	mov	r1, r6
 801276c:	4638      	mov	r0, r7
 801276e:	eb04 0903 	add.w	r9, r4, r3
 8012772:	f001 fdd1 	bl	8014318 <_sbrk_r>
 8012776:	4581      	cmp	r9, r0
 8012778:	d13f      	bne.n	80127fa <_malloc_r+0xe6>
 801277a:	6821      	ldr	r1, [r4, #0]
 801277c:	1a6d      	subs	r5, r5, r1
 801277e:	4629      	mov	r1, r5
 8012780:	4638      	mov	r0, r7
 8012782:	f7ff ffa7 	bl	80126d4 <sbrk_aligned>
 8012786:	3001      	adds	r0, #1
 8012788:	d037      	beq.n	80127fa <_malloc_r+0xe6>
 801278a:	6823      	ldr	r3, [r4, #0]
 801278c:	442b      	add	r3, r5
 801278e:	6023      	str	r3, [r4, #0]
 8012790:	f8d8 3000 	ldr.w	r3, [r8]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d038      	beq.n	801280a <_malloc_r+0xf6>
 8012798:	685a      	ldr	r2, [r3, #4]
 801279a:	42a2      	cmp	r2, r4
 801279c:	d12b      	bne.n	80127f6 <_malloc_r+0xe2>
 801279e:	2200      	movs	r2, #0
 80127a0:	605a      	str	r2, [r3, #4]
 80127a2:	e00f      	b.n	80127c4 <_malloc_r+0xb0>
 80127a4:	6822      	ldr	r2, [r4, #0]
 80127a6:	1b52      	subs	r2, r2, r5
 80127a8:	d41f      	bmi.n	80127ea <_malloc_r+0xd6>
 80127aa:	2a0b      	cmp	r2, #11
 80127ac:	d917      	bls.n	80127de <_malloc_r+0xca>
 80127ae:	1961      	adds	r1, r4, r5
 80127b0:	42a3      	cmp	r3, r4
 80127b2:	6025      	str	r5, [r4, #0]
 80127b4:	bf18      	it	ne
 80127b6:	6059      	strne	r1, [r3, #4]
 80127b8:	6863      	ldr	r3, [r4, #4]
 80127ba:	bf08      	it	eq
 80127bc:	f8c8 1000 	streq.w	r1, [r8]
 80127c0:	5162      	str	r2, [r4, r5]
 80127c2:	604b      	str	r3, [r1, #4]
 80127c4:	4638      	mov	r0, r7
 80127c6:	f104 060b 	add.w	r6, r4, #11
 80127ca:	f000 f829 	bl	8012820 <__malloc_unlock>
 80127ce:	f026 0607 	bic.w	r6, r6, #7
 80127d2:	1d23      	adds	r3, r4, #4
 80127d4:	1af2      	subs	r2, r6, r3
 80127d6:	d0ae      	beq.n	8012736 <_malloc_r+0x22>
 80127d8:	1b9b      	subs	r3, r3, r6
 80127da:	50a3      	str	r3, [r4, r2]
 80127dc:	e7ab      	b.n	8012736 <_malloc_r+0x22>
 80127de:	42a3      	cmp	r3, r4
 80127e0:	6862      	ldr	r2, [r4, #4]
 80127e2:	d1dd      	bne.n	80127a0 <_malloc_r+0x8c>
 80127e4:	f8c8 2000 	str.w	r2, [r8]
 80127e8:	e7ec      	b.n	80127c4 <_malloc_r+0xb0>
 80127ea:	4623      	mov	r3, r4
 80127ec:	6864      	ldr	r4, [r4, #4]
 80127ee:	e7ac      	b.n	801274a <_malloc_r+0x36>
 80127f0:	4634      	mov	r4, r6
 80127f2:	6876      	ldr	r6, [r6, #4]
 80127f4:	e7b4      	b.n	8012760 <_malloc_r+0x4c>
 80127f6:	4613      	mov	r3, r2
 80127f8:	e7cc      	b.n	8012794 <_malloc_r+0x80>
 80127fa:	230c      	movs	r3, #12
 80127fc:	603b      	str	r3, [r7, #0]
 80127fe:	4638      	mov	r0, r7
 8012800:	f000 f80e 	bl	8012820 <__malloc_unlock>
 8012804:	e797      	b.n	8012736 <_malloc_r+0x22>
 8012806:	6025      	str	r5, [r4, #0]
 8012808:	e7dc      	b.n	80127c4 <_malloc_r+0xb0>
 801280a:	605b      	str	r3, [r3, #4]
 801280c:	deff      	udf	#255	; 0xff
 801280e:	bf00      	nop
 8012810:	2000c4f4 	.word	0x2000c4f4

08012814 <__malloc_lock>:
 8012814:	4801      	ldr	r0, [pc, #4]	; (801281c <__malloc_lock+0x8>)
 8012816:	f7ff b877 	b.w	8011908 <__retarget_lock_acquire_recursive>
 801281a:	bf00      	nop
 801281c:	2000c4f0 	.word	0x2000c4f0

08012820 <__malloc_unlock>:
 8012820:	4801      	ldr	r0, [pc, #4]	; (8012828 <__malloc_unlock+0x8>)
 8012822:	f7ff b872 	b.w	801190a <__retarget_lock_release_recursive>
 8012826:	bf00      	nop
 8012828:	2000c4f0 	.word	0x2000c4f0

0801282c <_Balloc>:
 801282c:	b570      	push	{r4, r5, r6, lr}
 801282e:	69c6      	ldr	r6, [r0, #28]
 8012830:	4604      	mov	r4, r0
 8012832:	460d      	mov	r5, r1
 8012834:	b976      	cbnz	r6, 8012854 <_Balloc+0x28>
 8012836:	2010      	movs	r0, #16
 8012838:	f7ff ff44 	bl	80126c4 <malloc>
 801283c:	4602      	mov	r2, r0
 801283e:	61e0      	str	r0, [r4, #28]
 8012840:	b920      	cbnz	r0, 801284c <_Balloc+0x20>
 8012842:	4b18      	ldr	r3, [pc, #96]	; (80128a4 <_Balloc+0x78>)
 8012844:	4818      	ldr	r0, [pc, #96]	; (80128a8 <_Balloc+0x7c>)
 8012846:	216b      	movs	r1, #107	; 0x6b
 8012848:	f001 fd7e 	bl	8014348 <__assert_func>
 801284c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012850:	6006      	str	r6, [r0, #0]
 8012852:	60c6      	str	r6, [r0, #12]
 8012854:	69e6      	ldr	r6, [r4, #28]
 8012856:	68f3      	ldr	r3, [r6, #12]
 8012858:	b183      	cbz	r3, 801287c <_Balloc+0x50>
 801285a:	69e3      	ldr	r3, [r4, #28]
 801285c:	68db      	ldr	r3, [r3, #12]
 801285e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012862:	b9b8      	cbnz	r0, 8012894 <_Balloc+0x68>
 8012864:	2101      	movs	r1, #1
 8012866:	fa01 f605 	lsl.w	r6, r1, r5
 801286a:	1d72      	adds	r2, r6, #5
 801286c:	0092      	lsls	r2, r2, #2
 801286e:	4620      	mov	r0, r4
 8012870:	f001 fd88 	bl	8014384 <_calloc_r>
 8012874:	b160      	cbz	r0, 8012890 <_Balloc+0x64>
 8012876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801287a:	e00e      	b.n	801289a <_Balloc+0x6e>
 801287c:	2221      	movs	r2, #33	; 0x21
 801287e:	2104      	movs	r1, #4
 8012880:	4620      	mov	r0, r4
 8012882:	f001 fd7f 	bl	8014384 <_calloc_r>
 8012886:	69e3      	ldr	r3, [r4, #28]
 8012888:	60f0      	str	r0, [r6, #12]
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d1e4      	bne.n	801285a <_Balloc+0x2e>
 8012890:	2000      	movs	r0, #0
 8012892:	bd70      	pop	{r4, r5, r6, pc}
 8012894:	6802      	ldr	r2, [r0, #0]
 8012896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801289a:	2300      	movs	r3, #0
 801289c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80128a0:	e7f7      	b.n	8012892 <_Balloc+0x66>
 80128a2:	bf00      	nop
 80128a4:	08015360 	.word	0x08015360
 80128a8:	080153e0 	.word	0x080153e0

080128ac <_Bfree>:
 80128ac:	b570      	push	{r4, r5, r6, lr}
 80128ae:	69c6      	ldr	r6, [r0, #28]
 80128b0:	4605      	mov	r5, r0
 80128b2:	460c      	mov	r4, r1
 80128b4:	b976      	cbnz	r6, 80128d4 <_Bfree+0x28>
 80128b6:	2010      	movs	r0, #16
 80128b8:	f7ff ff04 	bl	80126c4 <malloc>
 80128bc:	4602      	mov	r2, r0
 80128be:	61e8      	str	r0, [r5, #28]
 80128c0:	b920      	cbnz	r0, 80128cc <_Bfree+0x20>
 80128c2:	4b09      	ldr	r3, [pc, #36]	; (80128e8 <_Bfree+0x3c>)
 80128c4:	4809      	ldr	r0, [pc, #36]	; (80128ec <_Bfree+0x40>)
 80128c6:	218f      	movs	r1, #143	; 0x8f
 80128c8:	f001 fd3e 	bl	8014348 <__assert_func>
 80128cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128d0:	6006      	str	r6, [r0, #0]
 80128d2:	60c6      	str	r6, [r0, #12]
 80128d4:	b13c      	cbz	r4, 80128e6 <_Bfree+0x3a>
 80128d6:	69eb      	ldr	r3, [r5, #28]
 80128d8:	6862      	ldr	r2, [r4, #4]
 80128da:	68db      	ldr	r3, [r3, #12]
 80128dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80128e0:	6021      	str	r1, [r4, #0]
 80128e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80128e6:	bd70      	pop	{r4, r5, r6, pc}
 80128e8:	08015360 	.word	0x08015360
 80128ec:	080153e0 	.word	0x080153e0

080128f0 <__multadd>:
 80128f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128f4:	690d      	ldr	r5, [r1, #16]
 80128f6:	4607      	mov	r7, r0
 80128f8:	460c      	mov	r4, r1
 80128fa:	461e      	mov	r6, r3
 80128fc:	f101 0c14 	add.w	ip, r1, #20
 8012900:	2000      	movs	r0, #0
 8012902:	f8dc 3000 	ldr.w	r3, [ip]
 8012906:	b299      	uxth	r1, r3
 8012908:	fb02 6101 	mla	r1, r2, r1, r6
 801290c:	0c1e      	lsrs	r6, r3, #16
 801290e:	0c0b      	lsrs	r3, r1, #16
 8012910:	fb02 3306 	mla	r3, r2, r6, r3
 8012914:	b289      	uxth	r1, r1
 8012916:	3001      	adds	r0, #1
 8012918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801291c:	4285      	cmp	r5, r0
 801291e:	f84c 1b04 	str.w	r1, [ip], #4
 8012922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012926:	dcec      	bgt.n	8012902 <__multadd+0x12>
 8012928:	b30e      	cbz	r6, 801296e <__multadd+0x7e>
 801292a:	68a3      	ldr	r3, [r4, #8]
 801292c:	42ab      	cmp	r3, r5
 801292e:	dc19      	bgt.n	8012964 <__multadd+0x74>
 8012930:	6861      	ldr	r1, [r4, #4]
 8012932:	4638      	mov	r0, r7
 8012934:	3101      	adds	r1, #1
 8012936:	f7ff ff79 	bl	801282c <_Balloc>
 801293a:	4680      	mov	r8, r0
 801293c:	b928      	cbnz	r0, 801294a <__multadd+0x5a>
 801293e:	4602      	mov	r2, r0
 8012940:	4b0c      	ldr	r3, [pc, #48]	; (8012974 <__multadd+0x84>)
 8012942:	480d      	ldr	r0, [pc, #52]	; (8012978 <__multadd+0x88>)
 8012944:	21ba      	movs	r1, #186	; 0xba
 8012946:	f001 fcff 	bl	8014348 <__assert_func>
 801294a:	6922      	ldr	r2, [r4, #16]
 801294c:	3202      	adds	r2, #2
 801294e:	f104 010c 	add.w	r1, r4, #12
 8012952:	0092      	lsls	r2, r2, #2
 8012954:	300c      	adds	r0, #12
 8012956:	f7fe ffd9 	bl	801190c <memcpy>
 801295a:	4621      	mov	r1, r4
 801295c:	4638      	mov	r0, r7
 801295e:	f7ff ffa5 	bl	80128ac <_Bfree>
 8012962:	4644      	mov	r4, r8
 8012964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012968:	3501      	adds	r5, #1
 801296a:	615e      	str	r6, [r3, #20]
 801296c:	6125      	str	r5, [r4, #16]
 801296e:	4620      	mov	r0, r4
 8012970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012974:	080153cf 	.word	0x080153cf
 8012978:	080153e0 	.word	0x080153e0

0801297c <__s2b>:
 801297c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012980:	460c      	mov	r4, r1
 8012982:	4615      	mov	r5, r2
 8012984:	461f      	mov	r7, r3
 8012986:	2209      	movs	r2, #9
 8012988:	3308      	adds	r3, #8
 801298a:	4606      	mov	r6, r0
 801298c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012990:	2100      	movs	r1, #0
 8012992:	2201      	movs	r2, #1
 8012994:	429a      	cmp	r2, r3
 8012996:	db09      	blt.n	80129ac <__s2b+0x30>
 8012998:	4630      	mov	r0, r6
 801299a:	f7ff ff47 	bl	801282c <_Balloc>
 801299e:	b940      	cbnz	r0, 80129b2 <__s2b+0x36>
 80129a0:	4602      	mov	r2, r0
 80129a2:	4b19      	ldr	r3, [pc, #100]	; (8012a08 <__s2b+0x8c>)
 80129a4:	4819      	ldr	r0, [pc, #100]	; (8012a0c <__s2b+0x90>)
 80129a6:	21d3      	movs	r1, #211	; 0xd3
 80129a8:	f001 fcce 	bl	8014348 <__assert_func>
 80129ac:	0052      	lsls	r2, r2, #1
 80129ae:	3101      	adds	r1, #1
 80129b0:	e7f0      	b.n	8012994 <__s2b+0x18>
 80129b2:	9b08      	ldr	r3, [sp, #32]
 80129b4:	6143      	str	r3, [r0, #20]
 80129b6:	2d09      	cmp	r5, #9
 80129b8:	f04f 0301 	mov.w	r3, #1
 80129bc:	6103      	str	r3, [r0, #16]
 80129be:	dd16      	ble.n	80129ee <__s2b+0x72>
 80129c0:	f104 0909 	add.w	r9, r4, #9
 80129c4:	46c8      	mov	r8, r9
 80129c6:	442c      	add	r4, r5
 80129c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80129cc:	4601      	mov	r1, r0
 80129ce:	3b30      	subs	r3, #48	; 0x30
 80129d0:	220a      	movs	r2, #10
 80129d2:	4630      	mov	r0, r6
 80129d4:	f7ff ff8c 	bl	80128f0 <__multadd>
 80129d8:	45a0      	cmp	r8, r4
 80129da:	d1f5      	bne.n	80129c8 <__s2b+0x4c>
 80129dc:	f1a5 0408 	sub.w	r4, r5, #8
 80129e0:	444c      	add	r4, r9
 80129e2:	1b2d      	subs	r5, r5, r4
 80129e4:	1963      	adds	r3, r4, r5
 80129e6:	42bb      	cmp	r3, r7
 80129e8:	db04      	blt.n	80129f4 <__s2b+0x78>
 80129ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129ee:	340a      	adds	r4, #10
 80129f0:	2509      	movs	r5, #9
 80129f2:	e7f6      	b.n	80129e2 <__s2b+0x66>
 80129f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80129f8:	4601      	mov	r1, r0
 80129fa:	3b30      	subs	r3, #48	; 0x30
 80129fc:	220a      	movs	r2, #10
 80129fe:	4630      	mov	r0, r6
 8012a00:	f7ff ff76 	bl	80128f0 <__multadd>
 8012a04:	e7ee      	b.n	80129e4 <__s2b+0x68>
 8012a06:	bf00      	nop
 8012a08:	080153cf 	.word	0x080153cf
 8012a0c:	080153e0 	.word	0x080153e0

08012a10 <__hi0bits>:
 8012a10:	0c03      	lsrs	r3, r0, #16
 8012a12:	041b      	lsls	r3, r3, #16
 8012a14:	b9d3      	cbnz	r3, 8012a4c <__hi0bits+0x3c>
 8012a16:	0400      	lsls	r0, r0, #16
 8012a18:	2310      	movs	r3, #16
 8012a1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012a1e:	bf04      	itt	eq
 8012a20:	0200      	lsleq	r0, r0, #8
 8012a22:	3308      	addeq	r3, #8
 8012a24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012a28:	bf04      	itt	eq
 8012a2a:	0100      	lsleq	r0, r0, #4
 8012a2c:	3304      	addeq	r3, #4
 8012a2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012a32:	bf04      	itt	eq
 8012a34:	0080      	lsleq	r0, r0, #2
 8012a36:	3302      	addeq	r3, #2
 8012a38:	2800      	cmp	r0, #0
 8012a3a:	db05      	blt.n	8012a48 <__hi0bits+0x38>
 8012a3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012a40:	f103 0301 	add.w	r3, r3, #1
 8012a44:	bf08      	it	eq
 8012a46:	2320      	moveq	r3, #32
 8012a48:	4618      	mov	r0, r3
 8012a4a:	4770      	bx	lr
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	e7e4      	b.n	8012a1a <__hi0bits+0xa>

08012a50 <__lo0bits>:
 8012a50:	6803      	ldr	r3, [r0, #0]
 8012a52:	f013 0207 	ands.w	r2, r3, #7
 8012a56:	d00c      	beq.n	8012a72 <__lo0bits+0x22>
 8012a58:	07d9      	lsls	r1, r3, #31
 8012a5a:	d422      	bmi.n	8012aa2 <__lo0bits+0x52>
 8012a5c:	079a      	lsls	r2, r3, #30
 8012a5e:	bf49      	itett	mi
 8012a60:	085b      	lsrmi	r3, r3, #1
 8012a62:	089b      	lsrpl	r3, r3, #2
 8012a64:	6003      	strmi	r3, [r0, #0]
 8012a66:	2201      	movmi	r2, #1
 8012a68:	bf5c      	itt	pl
 8012a6a:	6003      	strpl	r3, [r0, #0]
 8012a6c:	2202      	movpl	r2, #2
 8012a6e:	4610      	mov	r0, r2
 8012a70:	4770      	bx	lr
 8012a72:	b299      	uxth	r1, r3
 8012a74:	b909      	cbnz	r1, 8012a7a <__lo0bits+0x2a>
 8012a76:	0c1b      	lsrs	r3, r3, #16
 8012a78:	2210      	movs	r2, #16
 8012a7a:	b2d9      	uxtb	r1, r3
 8012a7c:	b909      	cbnz	r1, 8012a82 <__lo0bits+0x32>
 8012a7e:	3208      	adds	r2, #8
 8012a80:	0a1b      	lsrs	r3, r3, #8
 8012a82:	0719      	lsls	r1, r3, #28
 8012a84:	bf04      	itt	eq
 8012a86:	091b      	lsreq	r3, r3, #4
 8012a88:	3204      	addeq	r2, #4
 8012a8a:	0799      	lsls	r1, r3, #30
 8012a8c:	bf04      	itt	eq
 8012a8e:	089b      	lsreq	r3, r3, #2
 8012a90:	3202      	addeq	r2, #2
 8012a92:	07d9      	lsls	r1, r3, #31
 8012a94:	d403      	bmi.n	8012a9e <__lo0bits+0x4e>
 8012a96:	085b      	lsrs	r3, r3, #1
 8012a98:	f102 0201 	add.w	r2, r2, #1
 8012a9c:	d003      	beq.n	8012aa6 <__lo0bits+0x56>
 8012a9e:	6003      	str	r3, [r0, #0]
 8012aa0:	e7e5      	b.n	8012a6e <__lo0bits+0x1e>
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	e7e3      	b.n	8012a6e <__lo0bits+0x1e>
 8012aa6:	2220      	movs	r2, #32
 8012aa8:	e7e1      	b.n	8012a6e <__lo0bits+0x1e>
	...

08012aac <__i2b>:
 8012aac:	b510      	push	{r4, lr}
 8012aae:	460c      	mov	r4, r1
 8012ab0:	2101      	movs	r1, #1
 8012ab2:	f7ff febb 	bl	801282c <_Balloc>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	b928      	cbnz	r0, 8012ac6 <__i2b+0x1a>
 8012aba:	4b05      	ldr	r3, [pc, #20]	; (8012ad0 <__i2b+0x24>)
 8012abc:	4805      	ldr	r0, [pc, #20]	; (8012ad4 <__i2b+0x28>)
 8012abe:	f240 1145 	movw	r1, #325	; 0x145
 8012ac2:	f001 fc41 	bl	8014348 <__assert_func>
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	6144      	str	r4, [r0, #20]
 8012aca:	6103      	str	r3, [r0, #16]
 8012acc:	bd10      	pop	{r4, pc}
 8012ace:	bf00      	nop
 8012ad0:	080153cf 	.word	0x080153cf
 8012ad4:	080153e0 	.word	0x080153e0

08012ad8 <__multiply>:
 8012ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012adc:	4691      	mov	r9, r2
 8012ade:	690a      	ldr	r2, [r1, #16]
 8012ae0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	bfb8      	it	lt
 8012ae8:	460b      	movlt	r3, r1
 8012aea:	460c      	mov	r4, r1
 8012aec:	bfbc      	itt	lt
 8012aee:	464c      	movlt	r4, r9
 8012af0:	4699      	movlt	r9, r3
 8012af2:	6927      	ldr	r7, [r4, #16]
 8012af4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012af8:	68a3      	ldr	r3, [r4, #8]
 8012afa:	6861      	ldr	r1, [r4, #4]
 8012afc:	eb07 060a 	add.w	r6, r7, sl
 8012b00:	42b3      	cmp	r3, r6
 8012b02:	b085      	sub	sp, #20
 8012b04:	bfb8      	it	lt
 8012b06:	3101      	addlt	r1, #1
 8012b08:	f7ff fe90 	bl	801282c <_Balloc>
 8012b0c:	b930      	cbnz	r0, 8012b1c <__multiply+0x44>
 8012b0e:	4602      	mov	r2, r0
 8012b10:	4b44      	ldr	r3, [pc, #272]	; (8012c24 <__multiply+0x14c>)
 8012b12:	4845      	ldr	r0, [pc, #276]	; (8012c28 <__multiply+0x150>)
 8012b14:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012b18:	f001 fc16 	bl	8014348 <__assert_func>
 8012b1c:	f100 0514 	add.w	r5, r0, #20
 8012b20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012b24:	462b      	mov	r3, r5
 8012b26:	2200      	movs	r2, #0
 8012b28:	4543      	cmp	r3, r8
 8012b2a:	d321      	bcc.n	8012b70 <__multiply+0x98>
 8012b2c:	f104 0314 	add.w	r3, r4, #20
 8012b30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012b34:	f109 0314 	add.w	r3, r9, #20
 8012b38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012b3c:	9202      	str	r2, [sp, #8]
 8012b3e:	1b3a      	subs	r2, r7, r4
 8012b40:	3a15      	subs	r2, #21
 8012b42:	f022 0203 	bic.w	r2, r2, #3
 8012b46:	3204      	adds	r2, #4
 8012b48:	f104 0115 	add.w	r1, r4, #21
 8012b4c:	428f      	cmp	r7, r1
 8012b4e:	bf38      	it	cc
 8012b50:	2204      	movcc	r2, #4
 8012b52:	9201      	str	r2, [sp, #4]
 8012b54:	9a02      	ldr	r2, [sp, #8]
 8012b56:	9303      	str	r3, [sp, #12]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d80c      	bhi.n	8012b76 <__multiply+0x9e>
 8012b5c:	2e00      	cmp	r6, #0
 8012b5e:	dd03      	ble.n	8012b68 <__multiply+0x90>
 8012b60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d05b      	beq.n	8012c20 <__multiply+0x148>
 8012b68:	6106      	str	r6, [r0, #16]
 8012b6a:	b005      	add	sp, #20
 8012b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b70:	f843 2b04 	str.w	r2, [r3], #4
 8012b74:	e7d8      	b.n	8012b28 <__multiply+0x50>
 8012b76:	f8b3 a000 	ldrh.w	sl, [r3]
 8012b7a:	f1ba 0f00 	cmp.w	sl, #0
 8012b7e:	d024      	beq.n	8012bca <__multiply+0xf2>
 8012b80:	f104 0e14 	add.w	lr, r4, #20
 8012b84:	46a9      	mov	r9, r5
 8012b86:	f04f 0c00 	mov.w	ip, #0
 8012b8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012b8e:	f8d9 1000 	ldr.w	r1, [r9]
 8012b92:	fa1f fb82 	uxth.w	fp, r2
 8012b96:	b289      	uxth	r1, r1
 8012b98:	fb0a 110b 	mla	r1, sl, fp, r1
 8012b9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012ba0:	f8d9 2000 	ldr.w	r2, [r9]
 8012ba4:	4461      	add	r1, ip
 8012ba6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012baa:	fb0a c20b 	mla	r2, sl, fp, ip
 8012bae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012bb2:	b289      	uxth	r1, r1
 8012bb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012bb8:	4577      	cmp	r7, lr
 8012bba:	f849 1b04 	str.w	r1, [r9], #4
 8012bbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012bc2:	d8e2      	bhi.n	8012b8a <__multiply+0xb2>
 8012bc4:	9a01      	ldr	r2, [sp, #4]
 8012bc6:	f845 c002 	str.w	ip, [r5, r2]
 8012bca:	9a03      	ldr	r2, [sp, #12]
 8012bcc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012bd0:	3304      	adds	r3, #4
 8012bd2:	f1b9 0f00 	cmp.w	r9, #0
 8012bd6:	d021      	beq.n	8012c1c <__multiply+0x144>
 8012bd8:	6829      	ldr	r1, [r5, #0]
 8012bda:	f104 0c14 	add.w	ip, r4, #20
 8012bde:	46ae      	mov	lr, r5
 8012be0:	f04f 0a00 	mov.w	sl, #0
 8012be4:	f8bc b000 	ldrh.w	fp, [ip]
 8012be8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012bec:	fb09 220b 	mla	r2, r9, fp, r2
 8012bf0:	4452      	add	r2, sl
 8012bf2:	b289      	uxth	r1, r1
 8012bf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012bf8:	f84e 1b04 	str.w	r1, [lr], #4
 8012bfc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012c00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012c04:	f8be 1000 	ldrh.w	r1, [lr]
 8012c08:	fb09 110a 	mla	r1, r9, sl, r1
 8012c0c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012c10:	4567      	cmp	r7, ip
 8012c12:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012c16:	d8e5      	bhi.n	8012be4 <__multiply+0x10c>
 8012c18:	9a01      	ldr	r2, [sp, #4]
 8012c1a:	50a9      	str	r1, [r5, r2]
 8012c1c:	3504      	adds	r5, #4
 8012c1e:	e799      	b.n	8012b54 <__multiply+0x7c>
 8012c20:	3e01      	subs	r6, #1
 8012c22:	e79b      	b.n	8012b5c <__multiply+0x84>
 8012c24:	080153cf 	.word	0x080153cf
 8012c28:	080153e0 	.word	0x080153e0

08012c2c <__pow5mult>:
 8012c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c30:	4615      	mov	r5, r2
 8012c32:	f012 0203 	ands.w	r2, r2, #3
 8012c36:	4606      	mov	r6, r0
 8012c38:	460f      	mov	r7, r1
 8012c3a:	d007      	beq.n	8012c4c <__pow5mult+0x20>
 8012c3c:	4c25      	ldr	r4, [pc, #148]	; (8012cd4 <__pow5mult+0xa8>)
 8012c3e:	3a01      	subs	r2, #1
 8012c40:	2300      	movs	r3, #0
 8012c42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c46:	f7ff fe53 	bl	80128f0 <__multadd>
 8012c4a:	4607      	mov	r7, r0
 8012c4c:	10ad      	asrs	r5, r5, #2
 8012c4e:	d03d      	beq.n	8012ccc <__pow5mult+0xa0>
 8012c50:	69f4      	ldr	r4, [r6, #28]
 8012c52:	b97c      	cbnz	r4, 8012c74 <__pow5mult+0x48>
 8012c54:	2010      	movs	r0, #16
 8012c56:	f7ff fd35 	bl	80126c4 <malloc>
 8012c5a:	4602      	mov	r2, r0
 8012c5c:	61f0      	str	r0, [r6, #28]
 8012c5e:	b928      	cbnz	r0, 8012c6c <__pow5mult+0x40>
 8012c60:	4b1d      	ldr	r3, [pc, #116]	; (8012cd8 <__pow5mult+0xac>)
 8012c62:	481e      	ldr	r0, [pc, #120]	; (8012cdc <__pow5mult+0xb0>)
 8012c64:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012c68:	f001 fb6e 	bl	8014348 <__assert_func>
 8012c6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012c70:	6004      	str	r4, [r0, #0]
 8012c72:	60c4      	str	r4, [r0, #12]
 8012c74:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012c78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012c7c:	b94c      	cbnz	r4, 8012c92 <__pow5mult+0x66>
 8012c7e:	f240 2171 	movw	r1, #625	; 0x271
 8012c82:	4630      	mov	r0, r6
 8012c84:	f7ff ff12 	bl	8012aac <__i2b>
 8012c88:	2300      	movs	r3, #0
 8012c8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012c8e:	4604      	mov	r4, r0
 8012c90:	6003      	str	r3, [r0, #0]
 8012c92:	f04f 0900 	mov.w	r9, #0
 8012c96:	07eb      	lsls	r3, r5, #31
 8012c98:	d50a      	bpl.n	8012cb0 <__pow5mult+0x84>
 8012c9a:	4639      	mov	r1, r7
 8012c9c:	4622      	mov	r2, r4
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f7ff ff1a 	bl	8012ad8 <__multiply>
 8012ca4:	4639      	mov	r1, r7
 8012ca6:	4680      	mov	r8, r0
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7ff fdff 	bl	80128ac <_Bfree>
 8012cae:	4647      	mov	r7, r8
 8012cb0:	106d      	asrs	r5, r5, #1
 8012cb2:	d00b      	beq.n	8012ccc <__pow5mult+0xa0>
 8012cb4:	6820      	ldr	r0, [r4, #0]
 8012cb6:	b938      	cbnz	r0, 8012cc8 <__pow5mult+0x9c>
 8012cb8:	4622      	mov	r2, r4
 8012cba:	4621      	mov	r1, r4
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f7ff ff0b 	bl	8012ad8 <__multiply>
 8012cc2:	6020      	str	r0, [r4, #0]
 8012cc4:	f8c0 9000 	str.w	r9, [r0]
 8012cc8:	4604      	mov	r4, r0
 8012cca:	e7e4      	b.n	8012c96 <__pow5mult+0x6a>
 8012ccc:	4638      	mov	r0, r7
 8012cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cd2:	bf00      	nop
 8012cd4:	08015530 	.word	0x08015530
 8012cd8:	08015360 	.word	0x08015360
 8012cdc:	080153e0 	.word	0x080153e0

08012ce0 <__lshift>:
 8012ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce4:	460c      	mov	r4, r1
 8012ce6:	6849      	ldr	r1, [r1, #4]
 8012ce8:	6923      	ldr	r3, [r4, #16]
 8012cea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012cee:	68a3      	ldr	r3, [r4, #8]
 8012cf0:	4607      	mov	r7, r0
 8012cf2:	4691      	mov	r9, r2
 8012cf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012cf8:	f108 0601 	add.w	r6, r8, #1
 8012cfc:	42b3      	cmp	r3, r6
 8012cfe:	db0b      	blt.n	8012d18 <__lshift+0x38>
 8012d00:	4638      	mov	r0, r7
 8012d02:	f7ff fd93 	bl	801282c <_Balloc>
 8012d06:	4605      	mov	r5, r0
 8012d08:	b948      	cbnz	r0, 8012d1e <__lshift+0x3e>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	4b28      	ldr	r3, [pc, #160]	; (8012db0 <__lshift+0xd0>)
 8012d0e:	4829      	ldr	r0, [pc, #164]	; (8012db4 <__lshift+0xd4>)
 8012d10:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012d14:	f001 fb18 	bl	8014348 <__assert_func>
 8012d18:	3101      	adds	r1, #1
 8012d1a:	005b      	lsls	r3, r3, #1
 8012d1c:	e7ee      	b.n	8012cfc <__lshift+0x1c>
 8012d1e:	2300      	movs	r3, #0
 8012d20:	f100 0114 	add.w	r1, r0, #20
 8012d24:	f100 0210 	add.w	r2, r0, #16
 8012d28:	4618      	mov	r0, r3
 8012d2a:	4553      	cmp	r3, sl
 8012d2c:	db33      	blt.n	8012d96 <__lshift+0xb6>
 8012d2e:	6920      	ldr	r0, [r4, #16]
 8012d30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012d34:	f104 0314 	add.w	r3, r4, #20
 8012d38:	f019 091f 	ands.w	r9, r9, #31
 8012d3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012d40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012d44:	d02b      	beq.n	8012d9e <__lshift+0xbe>
 8012d46:	f1c9 0e20 	rsb	lr, r9, #32
 8012d4a:	468a      	mov	sl, r1
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	6818      	ldr	r0, [r3, #0]
 8012d50:	fa00 f009 	lsl.w	r0, r0, r9
 8012d54:	4310      	orrs	r0, r2
 8012d56:	f84a 0b04 	str.w	r0, [sl], #4
 8012d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d5e:	459c      	cmp	ip, r3
 8012d60:	fa22 f20e 	lsr.w	r2, r2, lr
 8012d64:	d8f3      	bhi.n	8012d4e <__lshift+0x6e>
 8012d66:	ebac 0304 	sub.w	r3, ip, r4
 8012d6a:	3b15      	subs	r3, #21
 8012d6c:	f023 0303 	bic.w	r3, r3, #3
 8012d70:	3304      	adds	r3, #4
 8012d72:	f104 0015 	add.w	r0, r4, #21
 8012d76:	4584      	cmp	ip, r0
 8012d78:	bf38      	it	cc
 8012d7a:	2304      	movcc	r3, #4
 8012d7c:	50ca      	str	r2, [r1, r3]
 8012d7e:	b10a      	cbz	r2, 8012d84 <__lshift+0xa4>
 8012d80:	f108 0602 	add.w	r6, r8, #2
 8012d84:	3e01      	subs	r6, #1
 8012d86:	4638      	mov	r0, r7
 8012d88:	612e      	str	r6, [r5, #16]
 8012d8a:	4621      	mov	r1, r4
 8012d8c:	f7ff fd8e 	bl	80128ac <_Bfree>
 8012d90:	4628      	mov	r0, r5
 8012d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d96:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	e7c5      	b.n	8012d2a <__lshift+0x4a>
 8012d9e:	3904      	subs	r1, #4
 8012da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012da4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012da8:	459c      	cmp	ip, r3
 8012daa:	d8f9      	bhi.n	8012da0 <__lshift+0xc0>
 8012dac:	e7ea      	b.n	8012d84 <__lshift+0xa4>
 8012dae:	bf00      	nop
 8012db0:	080153cf 	.word	0x080153cf
 8012db4:	080153e0 	.word	0x080153e0

08012db8 <__mcmp>:
 8012db8:	b530      	push	{r4, r5, lr}
 8012dba:	6902      	ldr	r2, [r0, #16]
 8012dbc:	690c      	ldr	r4, [r1, #16]
 8012dbe:	1b12      	subs	r2, r2, r4
 8012dc0:	d10e      	bne.n	8012de0 <__mcmp+0x28>
 8012dc2:	f100 0314 	add.w	r3, r0, #20
 8012dc6:	3114      	adds	r1, #20
 8012dc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012dcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012dd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012dd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012dd8:	42a5      	cmp	r5, r4
 8012dda:	d003      	beq.n	8012de4 <__mcmp+0x2c>
 8012ddc:	d305      	bcc.n	8012dea <__mcmp+0x32>
 8012dde:	2201      	movs	r2, #1
 8012de0:	4610      	mov	r0, r2
 8012de2:	bd30      	pop	{r4, r5, pc}
 8012de4:	4283      	cmp	r3, r0
 8012de6:	d3f3      	bcc.n	8012dd0 <__mcmp+0x18>
 8012de8:	e7fa      	b.n	8012de0 <__mcmp+0x28>
 8012dea:	f04f 32ff 	mov.w	r2, #4294967295
 8012dee:	e7f7      	b.n	8012de0 <__mcmp+0x28>

08012df0 <__mdiff>:
 8012df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df4:	460c      	mov	r4, r1
 8012df6:	4606      	mov	r6, r0
 8012df8:	4611      	mov	r1, r2
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	4690      	mov	r8, r2
 8012dfe:	f7ff ffdb 	bl	8012db8 <__mcmp>
 8012e02:	1e05      	subs	r5, r0, #0
 8012e04:	d110      	bne.n	8012e28 <__mdiff+0x38>
 8012e06:	4629      	mov	r1, r5
 8012e08:	4630      	mov	r0, r6
 8012e0a:	f7ff fd0f 	bl	801282c <_Balloc>
 8012e0e:	b930      	cbnz	r0, 8012e1e <__mdiff+0x2e>
 8012e10:	4b3a      	ldr	r3, [pc, #232]	; (8012efc <__mdiff+0x10c>)
 8012e12:	4602      	mov	r2, r0
 8012e14:	f240 2137 	movw	r1, #567	; 0x237
 8012e18:	4839      	ldr	r0, [pc, #228]	; (8012f00 <__mdiff+0x110>)
 8012e1a:	f001 fa95 	bl	8014348 <__assert_func>
 8012e1e:	2301      	movs	r3, #1
 8012e20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012e24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e28:	bfa4      	itt	ge
 8012e2a:	4643      	movge	r3, r8
 8012e2c:	46a0      	movge	r8, r4
 8012e2e:	4630      	mov	r0, r6
 8012e30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012e34:	bfa6      	itte	ge
 8012e36:	461c      	movge	r4, r3
 8012e38:	2500      	movge	r5, #0
 8012e3a:	2501      	movlt	r5, #1
 8012e3c:	f7ff fcf6 	bl	801282c <_Balloc>
 8012e40:	b920      	cbnz	r0, 8012e4c <__mdiff+0x5c>
 8012e42:	4b2e      	ldr	r3, [pc, #184]	; (8012efc <__mdiff+0x10c>)
 8012e44:	4602      	mov	r2, r0
 8012e46:	f240 2145 	movw	r1, #581	; 0x245
 8012e4a:	e7e5      	b.n	8012e18 <__mdiff+0x28>
 8012e4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012e50:	6926      	ldr	r6, [r4, #16]
 8012e52:	60c5      	str	r5, [r0, #12]
 8012e54:	f104 0914 	add.w	r9, r4, #20
 8012e58:	f108 0514 	add.w	r5, r8, #20
 8012e5c:	f100 0e14 	add.w	lr, r0, #20
 8012e60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012e64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012e68:	f108 0210 	add.w	r2, r8, #16
 8012e6c:	46f2      	mov	sl, lr
 8012e6e:	2100      	movs	r1, #0
 8012e70:	f859 3b04 	ldr.w	r3, [r9], #4
 8012e74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012e78:	fa11 f88b 	uxtah	r8, r1, fp
 8012e7c:	b299      	uxth	r1, r3
 8012e7e:	0c1b      	lsrs	r3, r3, #16
 8012e80:	eba8 0801 	sub.w	r8, r8, r1
 8012e84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012e88:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012e8c:	fa1f f888 	uxth.w	r8, r8
 8012e90:	1419      	asrs	r1, r3, #16
 8012e92:	454e      	cmp	r6, r9
 8012e94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012e98:	f84a 3b04 	str.w	r3, [sl], #4
 8012e9c:	d8e8      	bhi.n	8012e70 <__mdiff+0x80>
 8012e9e:	1b33      	subs	r3, r6, r4
 8012ea0:	3b15      	subs	r3, #21
 8012ea2:	f023 0303 	bic.w	r3, r3, #3
 8012ea6:	3304      	adds	r3, #4
 8012ea8:	3415      	adds	r4, #21
 8012eaa:	42a6      	cmp	r6, r4
 8012eac:	bf38      	it	cc
 8012eae:	2304      	movcc	r3, #4
 8012eb0:	441d      	add	r5, r3
 8012eb2:	4473      	add	r3, lr
 8012eb4:	469e      	mov	lr, r3
 8012eb6:	462e      	mov	r6, r5
 8012eb8:	4566      	cmp	r6, ip
 8012eba:	d30e      	bcc.n	8012eda <__mdiff+0xea>
 8012ebc:	f10c 0203 	add.w	r2, ip, #3
 8012ec0:	1b52      	subs	r2, r2, r5
 8012ec2:	f022 0203 	bic.w	r2, r2, #3
 8012ec6:	3d03      	subs	r5, #3
 8012ec8:	45ac      	cmp	ip, r5
 8012eca:	bf38      	it	cc
 8012ecc:	2200      	movcc	r2, #0
 8012ece:	4413      	add	r3, r2
 8012ed0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012ed4:	b17a      	cbz	r2, 8012ef6 <__mdiff+0x106>
 8012ed6:	6107      	str	r7, [r0, #16]
 8012ed8:	e7a4      	b.n	8012e24 <__mdiff+0x34>
 8012eda:	f856 8b04 	ldr.w	r8, [r6], #4
 8012ede:	fa11 f288 	uxtah	r2, r1, r8
 8012ee2:	1414      	asrs	r4, r2, #16
 8012ee4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012ee8:	b292      	uxth	r2, r2
 8012eea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012eee:	f84e 2b04 	str.w	r2, [lr], #4
 8012ef2:	1421      	asrs	r1, r4, #16
 8012ef4:	e7e0      	b.n	8012eb8 <__mdiff+0xc8>
 8012ef6:	3f01      	subs	r7, #1
 8012ef8:	e7ea      	b.n	8012ed0 <__mdiff+0xe0>
 8012efa:	bf00      	nop
 8012efc:	080153cf 	.word	0x080153cf
 8012f00:	080153e0 	.word	0x080153e0

08012f04 <__ulp>:
 8012f04:	b082      	sub	sp, #8
 8012f06:	ed8d 0b00 	vstr	d0, [sp]
 8012f0a:	9a01      	ldr	r2, [sp, #4]
 8012f0c:	4b0f      	ldr	r3, [pc, #60]	; (8012f4c <__ulp+0x48>)
 8012f0e:	4013      	ands	r3, r2
 8012f10:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	dc08      	bgt.n	8012f2a <__ulp+0x26>
 8012f18:	425b      	negs	r3, r3
 8012f1a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012f1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012f22:	da04      	bge.n	8012f2e <__ulp+0x2a>
 8012f24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012f28:	4113      	asrs	r3, r2
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	e008      	b.n	8012f40 <__ulp+0x3c>
 8012f2e:	f1a2 0314 	sub.w	r3, r2, #20
 8012f32:	2b1e      	cmp	r3, #30
 8012f34:	bfda      	itte	le
 8012f36:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8012f3a:	40da      	lsrle	r2, r3
 8012f3c:	2201      	movgt	r2, #1
 8012f3e:	2300      	movs	r3, #0
 8012f40:	4619      	mov	r1, r3
 8012f42:	4610      	mov	r0, r2
 8012f44:	ec41 0b10 	vmov	d0, r0, r1
 8012f48:	b002      	add	sp, #8
 8012f4a:	4770      	bx	lr
 8012f4c:	7ff00000 	.word	0x7ff00000

08012f50 <__b2d>:
 8012f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f54:	6906      	ldr	r6, [r0, #16]
 8012f56:	f100 0814 	add.w	r8, r0, #20
 8012f5a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012f5e:	1f37      	subs	r7, r6, #4
 8012f60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012f64:	4610      	mov	r0, r2
 8012f66:	f7ff fd53 	bl	8012a10 <__hi0bits>
 8012f6a:	f1c0 0320 	rsb	r3, r0, #32
 8012f6e:	280a      	cmp	r0, #10
 8012f70:	600b      	str	r3, [r1, #0]
 8012f72:	491b      	ldr	r1, [pc, #108]	; (8012fe0 <__b2d+0x90>)
 8012f74:	dc15      	bgt.n	8012fa2 <__b2d+0x52>
 8012f76:	f1c0 0c0b 	rsb	ip, r0, #11
 8012f7a:	fa22 f30c 	lsr.w	r3, r2, ip
 8012f7e:	45b8      	cmp	r8, r7
 8012f80:	ea43 0501 	orr.w	r5, r3, r1
 8012f84:	bf34      	ite	cc
 8012f86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012f8a:	2300      	movcs	r3, #0
 8012f8c:	3015      	adds	r0, #21
 8012f8e:	fa02 f000 	lsl.w	r0, r2, r0
 8012f92:	fa23 f30c 	lsr.w	r3, r3, ip
 8012f96:	4303      	orrs	r3, r0
 8012f98:	461c      	mov	r4, r3
 8012f9a:	ec45 4b10 	vmov	d0, r4, r5
 8012f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa2:	45b8      	cmp	r8, r7
 8012fa4:	bf3a      	itte	cc
 8012fa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012faa:	f1a6 0708 	subcc.w	r7, r6, #8
 8012fae:	2300      	movcs	r3, #0
 8012fb0:	380b      	subs	r0, #11
 8012fb2:	d012      	beq.n	8012fda <__b2d+0x8a>
 8012fb4:	f1c0 0120 	rsb	r1, r0, #32
 8012fb8:	fa23 f401 	lsr.w	r4, r3, r1
 8012fbc:	4082      	lsls	r2, r0
 8012fbe:	4322      	orrs	r2, r4
 8012fc0:	4547      	cmp	r7, r8
 8012fc2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8012fc6:	bf8c      	ite	hi
 8012fc8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012fcc:	2200      	movls	r2, #0
 8012fce:	4083      	lsls	r3, r0
 8012fd0:	40ca      	lsrs	r2, r1
 8012fd2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012fd6:	4313      	orrs	r3, r2
 8012fd8:	e7de      	b.n	8012f98 <__b2d+0x48>
 8012fda:	ea42 0501 	orr.w	r5, r2, r1
 8012fde:	e7db      	b.n	8012f98 <__b2d+0x48>
 8012fe0:	3ff00000 	.word	0x3ff00000

08012fe4 <__d2b>:
 8012fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012fe8:	460f      	mov	r7, r1
 8012fea:	2101      	movs	r1, #1
 8012fec:	ec59 8b10 	vmov	r8, r9, d0
 8012ff0:	4616      	mov	r6, r2
 8012ff2:	f7ff fc1b 	bl	801282c <_Balloc>
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	b930      	cbnz	r0, 8013008 <__d2b+0x24>
 8012ffa:	4602      	mov	r2, r0
 8012ffc:	4b24      	ldr	r3, [pc, #144]	; (8013090 <__d2b+0xac>)
 8012ffe:	4825      	ldr	r0, [pc, #148]	; (8013094 <__d2b+0xb0>)
 8013000:	f240 310f 	movw	r1, #783	; 0x30f
 8013004:	f001 f9a0 	bl	8014348 <__assert_func>
 8013008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801300c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013010:	bb2d      	cbnz	r5, 801305e <__d2b+0x7a>
 8013012:	9301      	str	r3, [sp, #4]
 8013014:	f1b8 0300 	subs.w	r3, r8, #0
 8013018:	d026      	beq.n	8013068 <__d2b+0x84>
 801301a:	4668      	mov	r0, sp
 801301c:	9300      	str	r3, [sp, #0]
 801301e:	f7ff fd17 	bl	8012a50 <__lo0bits>
 8013022:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013026:	b1e8      	cbz	r0, 8013064 <__d2b+0x80>
 8013028:	f1c0 0320 	rsb	r3, r0, #32
 801302c:	fa02 f303 	lsl.w	r3, r2, r3
 8013030:	430b      	orrs	r3, r1
 8013032:	40c2      	lsrs	r2, r0
 8013034:	6163      	str	r3, [r4, #20]
 8013036:	9201      	str	r2, [sp, #4]
 8013038:	9b01      	ldr	r3, [sp, #4]
 801303a:	61a3      	str	r3, [r4, #24]
 801303c:	2b00      	cmp	r3, #0
 801303e:	bf14      	ite	ne
 8013040:	2202      	movne	r2, #2
 8013042:	2201      	moveq	r2, #1
 8013044:	6122      	str	r2, [r4, #16]
 8013046:	b1bd      	cbz	r5, 8013078 <__d2b+0x94>
 8013048:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801304c:	4405      	add	r5, r0
 801304e:	603d      	str	r5, [r7, #0]
 8013050:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013054:	6030      	str	r0, [r6, #0]
 8013056:	4620      	mov	r0, r4
 8013058:	b003      	add	sp, #12
 801305a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801305e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013062:	e7d6      	b.n	8013012 <__d2b+0x2e>
 8013064:	6161      	str	r1, [r4, #20]
 8013066:	e7e7      	b.n	8013038 <__d2b+0x54>
 8013068:	a801      	add	r0, sp, #4
 801306a:	f7ff fcf1 	bl	8012a50 <__lo0bits>
 801306e:	9b01      	ldr	r3, [sp, #4]
 8013070:	6163      	str	r3, [r4, #20]
 8013072:	3020      	adds	r0, #32
 8013074:	2201      	movs	r2, #1
 8013076:	e7e5      	b.n	8013044 <__d2b+0x60>
 8013078:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801307c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013080:	6038      	str	r0, [r7, #0]
 8013082:	6918      	ldr	r0, [r3, #16]
 8013084:	f7ff fcc4 	bl	8012a10 <__hi0bits>
 8013088:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801308c:	e7e2      	b.n	8013054 <__d2b+0x70>
 801308e:	bf00      	nop
 8013090:	080153cf 	.word	0x080153cf
 8013094:	080153e0 	.word	0x080153e0

08013098 <__ratio>:
 8013098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801309c:	4688      	mov	r8, r1
 801309e:	4669      	mov	r1, sp
 80130a0:	4681      	mov	r9, r0
 80130a2:	f7ff ff55 	bl	8012f50 <__b2d>
 80130a6:	a901      	add	r1, sp, #4
 80130a8:	4640      	mov	r0, r8
 80130aa:	ec55 4b10 	vmov	r4, r5, d0
 80130ae:	f7ff ff4f 	bl	8012f50 <__b2d>
 80130b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80130b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80130ba:	eba3 0c02 	sub.w	ip, r3, r2
 80130be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80130c2:	1a9b      	subs	r3, r3, r2
 80130c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80130c8:	ec51 0b10 	vmov	r0, r1, d0
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	bfd6      	itet	le
 80130d0:	460a      	movle	r2, r1
 80130d2:	462a      	movgt	r2, r5
 80130d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80130d8:	468b      	mov	fp, r1
 80130da:	462f      	mov	r7, r5
 80130dc:	bfd4      	ite	le
 80130de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80130e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80130e6:	4620      	mov	r0, r4
 80130e8:	ee10 2a10 	vmov	r2, s0
 80130ec:	465b      	mov	r3, fp
 80130ee:	4639      	mov	r1, r7
 80130f0:	f7ed fbac 	bl	800084c <__aeabi_ddiv>
 80130f4:	ec41 0b10 	vmov	d0, r0, r1
 80130f8:	b003      	add	sp, #12
 80130fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080130fe <__copybits>:
 80130fe:	3901      	subs	r1, #1
 8013100:	b570      	push	{r4, r5, r6, lr}
 8013102:	1149      	asrs	r1, r1, #5
 8013104:	6914      	ldr	r4, [r2, #16]
 8013106:	3101      	adds	r1, #1
 8013108:	f102 0314 	add.w	r3, r2, #20
 801310c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013110:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013114:	1f05      	subs	r5, r0, #4
 8013116:	42a3      	cmp	r3, r4
 8013118:	d30c      	bcc.n	8013134 <__copybits+0x36>
 801311a:	1aa3      	subs	r3, r4, r2
 801311c:	3b11      	subs	r3, #17
 801311e:	f023 0303 	bic.w	r3, r3, #3
 8013122:	3211      	adds	r2, #17
 8013124:	42a2      	cmp	r2, r4
 8013126:	bf88      	it	hi
 8013128:	2300      	movhi	r3, #0
 801312a:	4418      	add	r0, r3
 801312c:	2300      	movs	r3, #0
 801312e:	4288      	cmp	r0, r1
 8013130:	d305      	bcc.n	801313e <__copybits+0x40>
 8013132:	bd70      	pop	{r4, r5, r6, pc}
 8013134:	f853 6b04 	ldr.w	r6, [r3], #4
 8013138:	f845 6f04 	str.w	r6, [r5, #4]!
 801313c:	e7eb      	b.n	8013116 <__copybits+0x18>
 801313e:	f840 3b04 	str.w	r3, [r0], #4
 8013142:	e7f4      	b.n	801312e <__copybits+0x30>

08013144 <__any_on>:
 8013144:	f100 0214 	add.w	r2, r0, #20
 8013148:	6900      	ldr	r0, [r0, #16]
 801314a:	114b      	asrs	r3, r1, #5
 801314c:	4298      	cmp	r0, r3
 801314e:	b510      	push	{r4, lr}
 8013150:	db11      	blt.n	8013176 <__any_on+0x32>
 8013152:	dd0a      	ble.n	801316a <__any_on+0x26>
 8013154:	f011 011f 	ands.w	r1, r1, #31
 8013158:	d007      	beq.n	801316a <__any_on+0x26>
 801315a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801315e:	fa24 f001 	lsr.w	r0, r4, r1
 8013162:	fa00 f101 	lsl.w	r1, r0, r1
 8013166:	428c      	cmp	r4, r1
 8013168:	d10b      	bne.n	8013182 <__any_on+0x3e>
 801316a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801316e:	4293      	cmp	r3, r2
 8013170:	d803      	bhi.n	801317a <__any_on+0x36>
 8013172:	2000      	movs	r0, #0
 8013174:	bd10      	pop	{r4, pc}
 8013176:	4603      	mov	r3, r0
 8013178:	e7f7      	b.n	801316a <__any_on+0x26>
 801317a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801317e:	2900      	cmp	r1, #0
 8013180:	d0f5      	beq.n	801316e <__any_on+0x2a>
 8013182:	2001      	movs	r0, #1
 8013184:	e7f6      	b.n	8013174 <__any_on+0x30>

08013186 <sulp>:
 8013186:	b570      	push	{r4, r5, r6, lr}
 8013188:	4604      	mov	r4, r0
 801318a:	460d      	mov	r5, r1
 801318c:	ec45 4b10 	vmov	d0, r4, r5
 8013190:	4616      	mov	r6, r2
 8013192:	f7ff feb7 	bl	8012f04 <__ulp>
 8013196:	ec51 0b10 	vmov	r0, r1, d0
 801319a:	b17e      	cbz	r6, 80131bc <sulp+0x36>
 801319c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80131a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	dd09      	ble.n	80131bc <sulp+0x36>
 80131a8:	051b      	lsls	r3, r3, #20
 80131aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80131ae:	2400      	movs	r4, #0
 80131b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80131b4:	4622      	mov	r2, r4
 80131b6:	462b      	mov	r3, r5
 80131b8:	f7ed fa1e 	bl	80005f8 <__aeabi_dmul>
 80131bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080131c0 <_strtod_l>:
 80131c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c4:	ed2d 8b02 	vpush	{d8}
 80131c8:	b09b      	sub	sp, #108	; 0x6c
 80131ca:	4604      	mov	r4, r0
 80131cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80131ce:	2200      	movs	r2, #0
 80131d0:	9216      	str	r2, [sp, #88]	; 0x58
 80131d2:	460d      	mov	r5, r1
 80131d4:	f04f 0800 	mov.w	r8, #0
 80131d8:	f04f 0900 	mov.w	r9, #0
 80131dc:	460a      	mov	r2, r1
 80131de:	9215      	str	r2, [sp, #84]	; 0x54
 80131e0:	7811      	ldrb	r1, [r2, #0]
 80131e2:	292b      	cmp	r1, #43	; 0x2b
 80131e4:	d04c      	beq.n	8013280 <_strtod_l+0xc0>
 80131e6:	d83a      	bhi.n	801325e <_strtod_l+0x9e>
 80131e8:	290d      	cmp	r1, #13
 80131ea:	d834      	bhi.n	8013256 <_strtod_l+0x96>
 80131ec:	2908      	cmp	r1, #8
 80131ee:	d834      	bhi.n	801325a <_strtod_l+0x9a>
 80131f0:	2900      	cmp	r1, #0
 80131f2:	d03d      	beq.n	8013270 <_strtod_l+0xb0>
 80131f4:	2200      	movs	r2, #0
 80131f6:	920a      	str	r2, [sp, #40]	; 0x28
 80131f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80131fa:	7832      	ldrb	r2, [r6, #0]
 80131fc:	2a30      	cmp	r2, #48	; 0x30
 80131fe:	f040 80b4 	bne.w	801336a <_strtod_l+0x1aa>
 8013202:	7872      	ldrb	r2, [r6, #1]
 8013204:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8013208:	2a58      	cmp	r2, #88	; 0x58
 801320a:	d170      	bne.n	80132ee <_strtod_l+0x12e>
 801320c:	9302      	str	r3, [sp, #8]
 801320e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013210:	9301      	str	r3, [sp, #4]
 8013212:	ab16      	add	r3, sp, #88	; 0x58
 8013214:	9300      	str	r3, [sp, #0]
 8013216:	4a8e      	ldr	r2, [pc, #568]	; (8013450 <_strtod_l+0x290>)
 8013218:	ab17      	add	r3, sp, #92	; 0x5c
 801321a:	a915      	add	r1, sp, #84	; 0x54
 801321c:	4620      	mov	r0, r4
 801321e:	f001 f92f 	bl	8014480 <__gethex>
 8013222:	f010 070f 	ands.w	r7, r0, #15
 8013226:	4605      	mov	r5, r0
 8013228:	d005      	beq.n	8013236 <_strtod_l+0x76>
 801322a:	2f06      	cmp	r7, #6
 801322c:	d12a      	bne.n	8013284 <_strtod_l+0xc4>
 801322e:	3601      	adds	r6, #1
 8013230:	2300      	movs	r3, #0
 8013232:	9615      	str	r6, [sp, #84]	; 0x54
 8013234:	930a      	str	r3, [sp, #40]	; 0x28
 8013236:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013238:	2b00      	cmp	r3, #0
 801323a:	f040 857f 	bne.w	8013d3c <_strtod_l+0xb7c>
 801323e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013240:	b1db      	cbz	r3, 801327a <_strtod_l+0xba>
 8013242:	4642      	mov	r2, r8
 8013244:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013248:	ec43 2b10 	vmov	d0, r2, r3
 801324c:	b01b      	add	sp, #108	; 0x6c
 801324e:	ecbd 8b02 	vpop	{d8}
 8013252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013256:	2920      	cmp	r1, #32
 8013258:	d1cc      	bne.n	80131f4 <_strtod_l+0x34>
 801325a:	3201      	adds	r2, #1
 801325c:	e7bf      	b.n	80131de <_strtod_l+0x1e>
 801325e:	292d      	cmp	r1, #45	; 0x2d
 8013260:	d1c8      	bne.n	80131f4 <_strtod_l+0x34>
 8013262:	2101      	movs	r1, #1
 8013264:	910a      	str	r1, [sp, #40]	; 0x28
 8013266:	1c51      	adds	r1, r2, #1
 8013268:	9115      	str	r1, [sp, #84]	; 0x54
 801326a:	7852      	ldrb	r2, [r2, #1]
 801326c:	2a00      	cmp	r2, #0
 801326e:	d1c3      	bne.n	80131f8 <_strtod_l+0x38>
 8013270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013272:	9515      	str	r5, [sp, #84]	; 0x54
 8013274:	2b00      	cmp	r3, #0
 8013276:	f040 855f 	bne.w	8013d38 <_strtod_l+0xb78>
 801327a:	4642      	mov	r2, r8
 801327c:	464b      	mov	r3, r9
 801327e:	e7e3      	b.n	8013248 <_strtod_l+0x88>
 8013280:	2100      	movs	r1, #0
 8013282:	e7ef      	b.n	8013264 <_strtod_l+0xa4>
 8013284:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013286:	b13a      	cbz	r2, 8013298 <_strtod_l+0xd8>
 8013288:	2135      	movs	r1, #53	; 0x35
 801328a:	a818      	add	r0, sp, #96	; 0x60
 801328c:	f7ff ff37 	bl	80130fe <__copybits>
 8013290:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013292:	4620      	mov	r0, r4
 8013294:	f7ff fb0a 	bl	80128ac <_Bfree>
 8013298:	3f01      	subs	r7, #1
 801329a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801329c:	2f04      	cmp	r7, #4
 801329e:	d806      	bhi.n	80132ae <_strtod_l+0xee>
 80132a0:	e8df f007 	tbb	[pc, r7]
 80132a4:	201d0314 	.word	0x201d0314
 80132a8:	14          	.byte	0x14
 80132a9:	00          	.byte	0x00
 80132aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80132ae:	05e9      	lsls	r1, r5, #23
 80132b0:	bf48      	it	mi
 80132b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80132b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80132ba:	0d1b      	lsrs	r3, r3, #20
 80132bc:	051b      	lsls	r3, r3, #20
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d1b9      	bne.n	8013236 <_strtod_l+0x76>
 80132c2:	f7fe faf7 	bl	80118b4 <__errno>
 80132c6:	2322      	movs	r3, #34	; 0x22
 80132c8:	6003      	str	r3, [r0, #0]
 80132ca:	e7b4      	b.n	8013236 <_strtod_l+0x76>
 80132cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80132d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80132d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80132d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80132dc:	e7e7      	b.n	80132ae <_strtod_l+0xee>
 80132de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013458 <_strtod_l+0x298>
 80132e2:	e7e4      	b.n	80132ae <_strtod_l+0xee>
 80132e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80132e8:	f04f 38ff 	mov.w	r8, #4294967295
 80132ec:	e7df      	b.n	80132ae <_strtod_l+0xee>
 80132ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132f0:	1c5a      	adds	r2, r3, #1
 80132f2:	9215      	str	r2, [sp, #84]	; 0x54
 80132f4:	785b      	ldrb	r3, [r3, #1]
 80132f6:	2b30      	cmp	r3, #48	; 0x30
 80132f8:	d0f9      	beq.n	80132ee <_strtod_l+0x12e>
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d09b      	beq.n	8013236 <_strtod_l+0x76>
 80132fe:	2301      	movs	r3, #1
 8013300:	f04f 0a00 	mov.w	sl, #0
 8013304:	9304      	str	r3, [sp, #16]
 8013306:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013308:	930b      	str	r3, [sp, #44]	; 0x2c
 801330a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801330e:	46d3      	mov	fp, sl
 8013310:	220a      	movs	r2, #10
 8013312:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013314:	7806      	ldrb	r6, [r0, #0]
 8013316:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801331a:	b2d9      	uxtb	r1, r3
 801331c:	2909      	cmp	r1, #9
 801331e:	d926      	bls.n	801336e <_strtod_l+0x1ae>
 8013320:	494c      	ldr	r1, [pc, #304]	; (8013454 <_strtod_l+0x294>)
 8013322:	2201      	movs	r2, #1
 8013324:	f000 ffe6 	bl	80142f4 <strncmp>
 8013328:	2800      	cmp	r0, #0
 801332a:	d030      	beq.n	801338e <_strtod_l+0x1ce>
 801332c:	2000      	movs	r0, #0
 801332e:	4632      	mov	r2, r6
 8013330:	9005      	str	r0, [sp, #20]
 8013332:	465e      	mov	r6, fp
 8013334:	4603      	mov	r3, r0
 8013336:	2a65      	cmp	r2, #101	; 0x65
 8013338:	d001      	beq.n	801333e <_strtod_l+0x17e>
 801333a:	2a45      	cmp	r2, #69	; 0x45
 801333c:	d113      	bne.n	8013366 <_strtod_l+0x1a6>
 801333e:	b91e      	cbnz	r6, 8013348 <_strtod_l+0x188>
 8013340:	9a04      	ldr	r2, [sp, #16]
 8013342:	4302      	orrs	r2, r0
 8013344:	d094      	beq.n	8013270 <_strtod_l+0xb0>
 8013346:	2600      	movs	r6, #0
 8013348:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801334a:	1c6a      	adds	r2, r5, #1
 801334c:	9215      	str	r2, [sp, #84]	; 0x54
 801334e:	786a      	ldrb	r2, [r5, #1]
 8013350:	2a2b      	cmp	r2, #43	; 0x2b
 8013352:	d074      	beq.n	801343e <_strtod_l+0x27e>
 8013354:	2a2d      	cmp	r2, #45	; 0x2d
 8013356:	d078      	beq.n	801344a <_strtod_l+0x28a>
 8013358:	f04f 0c00 	mov.w	ip, #0
 801335c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013360:	2909      	cmp	r1, #9
 8013362:	d97f      	bls.n	8013464 <_strtod_l+0x2a4>
 8013364:	9515      	str	r5, [sp, #84]	; 0x54
 8013366:	2700      	movs	r7, #0
 8013368:	e09e      	b.n	80134a8 <_strtod_l+0x2e8>
 801336a:	2300      	movs	r3, #0
 801336c:	e7c8      	b.n	8013300 <_strtod_l+0x140>
 801336e:	f1bb 0f08 	cmp.w	fp, #8
 8013372:	bfd8      	it	le
 8013374:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013376:	f100 0001 	add.w	r0, r0, #1
 801337a:	bfda      	itte	le
 801337c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013380:	9309      	strle	r3, [sp, #36]	; 0x24
 8013382:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013386:	f10b 0b01 	add.w	fp, fp, #1
 801338a:	9015      	str	r0, [sp, #84]	; 0x54
 801338c:	e7c1      	b.n	8013312 <_strtod_l+0x152>
 801338e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013390:	1c5a      	adds	r2, r3, #1
 8013392:	9215      	str	r2, [sp, #84]	; 0x54
 8013394:	785a      	ldrb	r2, [r3, #1]
 8013396:	f1bb 0f00 	cmp.w	fp, #0
 801339a:	d037      	beq.n	801340c <_strtod_l+0x24c>
 801339c:	9005      	str	r0, [sp, #20]
 801339e:	465e      	mov	r6, fp
 80133a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80133a4:	2b09      	cmp	r3, #9
 80133a6:	d912      	bls.n	80133ce <_strtod_l+0x20e>
 80133a8:	2301      	movs	r3, #1
 80133aa:	e7c4      	b.n	8013336 <_strtod_l+0x176>
 80133ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133ae:	1c5a      	adds	r2, r3, #1
 80133b0:	9215      	str	r2, [sp, #84]	; 0x54
 80133b2:	785a      	ldrb	r2, [r3, #1]
 80133b4:	3001      	adds	r0, #1
 80133b6:	2a30      	cmp	r2, #48	; 0x30
 80133b8:	d0f8      	beq.n	80133ac <_strtod_l+0x1ec>
 80133ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80133be:	2b08      	cmp	r3, #8
 80133c0:	f200 84c1 	bhi.w	8013d46 <_strtod_l+0xb86>
 80133c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133c6:	9005      	str	r0, [sp, #20]
 80133c8:	2000      	movs	r0, #0
 80133ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80133cc:	4606      	mov	r6, r0
 80133ce:	3a30      	subs	r2, #48	; 0x30
 80133d0:	f100 0301 	add.w	r3, r0, #1
 80133d4:	d014      	beq.n	8013400 <_strtod_l+0x240>
 80133d6:	9905      	ldr	r1, [sp, #20]
 80133d8:	4419      	add	r1, r3
 80133da:	9105      	str	r1, [sp, #20]
 80133dc:	4633      	mov	r3, r6
 80133de:	eb00 0c06 	add.w	ip, r0, r6
 80133e2:	210a      	movs	r1, #10
 80133e4:	4563      	cmp	r3, ip
 80133e6:	d113      	bne.n	8013410 <_strtod_l+0x250>
 80133e8:	1833      	adds	r3, r6, r0
 80133ea:	2b08      	cmp	r3, #8
 80133ec:	f106 0601 	add.w	r6, r6, #1
 80133f0:	4406      	add	r6, r0
 80133f2:	dc1a      	bgt.n	801342a <_strtod_l+0x26a>
 80133f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133f6:	230a      	movs	r3, #10
 80133f8:	fb03 2301 	mla	r3, r3, r1, r2
 80133fc:	9309      	str	r3, [sp, #36]	; 0x24
 80133fe:	2300      	movs	r3, #0
 8013400:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013402:	1c51      	adds	r1, r2, #1
 8013404:	9115      	str	r1, [sp, #84]	; 0x54
 8013406:	7852      	ldrb	r2, [r2, #1]
 8013408:	4618      	mov	r0, r3
 801340a:	e7c9      	b.n	80133a0 <_strtod_l+0x1e0>
 801340c:	4658      	mov	r0, fp
 801340e:	e7d2      	b.n	80133b6 <_strtod_l+0x1f6>
 8013410:	2b08      	cmp	r3, #8
 8013412:	f103 0301 	add.w	r3, r3, #1
 8013416:	dc03      	bgt.n	8013420 <_strtod_l+0x260>
 8013418:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801341a:	434f      	muls	r7, r1
 801341c:	9709      	str	r7, [sp, #36]	; 0x24
 801341e:	e7e1      	b.n	80133e4 <_strtod_l+0x224>
 8013420:	2b10      	cmp	r3, #16
 8013422:	bfd8      	it	le
 8013424:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013428:	e7dc      	b.n	80133e4 <_strtod_l+0x224>
 801342a:	2e10      	cmp	r6, #16
 801342c:	bfdc      	itt	le
 801342e:	230a      	movle	r3, #10
 8013430:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8013434:	e7e3      	b.n	80133fe <_strtod_l+0x23e>
 8013436:	2300      	movs	r3, #0
 8013438:	9305      	str	r3, [sp, #20]
 801343a:	2301      	movs	r3, #1
 801343c:	e780      	b.n	8013340 <_strtod_l+0x180>
 801343e:	f04f 0c00 	mov.w	ip, #0
 8013442:	1caa      	adds	r2, r5, #2
 8013444:	9215      	str	r2, [sp, #84]	; 0x54
 8013446:	78aa      	ldrb	r2, [r5, #2]
 8013448:	e788      	b.n	801335c <_strtod_l+0x19c>
 801344a:	f04f 0c01 	mov.w	ip, #1
 801344e:	e7f8      	b.n	8013442 <_strtod_l+0x282>
 8013450:	08015540 	.word	0x08015540
 8013454:	0801553c 	.word	0x0801553c
 8013458:	7ff00000 	.word	0x7ff00000
 801345c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801345e:	1c51      	adds	r1, r2, #1
 8013460:	9115      	str	r1, [sp, #84]	; 0x54
 8013462:	7852      	ldrb	r2, [r2, #1]
 8013464:	2a30      	cmp	r2, #48	; 0x30
 8013466:	d0f9      	beq.n	801345c <_strtod_l+0x29c>
 8013468:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801346c:	2908      	cmp	r1, #8
 801346e:	f63f af7a 	bhi.w	8013366 <_strtod_l+0x1a6>
 8013472:	3a30      	subs	r2, #48	; 0x30
 8013474:	9208      	str	r2, [sp, #32]
 8013476:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013478:	920c      	str	r2, [sp, #48]	; 0x30
 801347a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801347c:	1c57      	adds	r7, r2, #1
 801347e:	9715      	str	r7, [sp, #84]	; 0x54
 8013480:	7852      	ldrb	r2, [r2, #1]
 8013482:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013486:	f1be 0f09 	cmp.w	lr, #9
 801348a:	d938      	bls.n	80134fe <_strtod_l+0x33e>
 801348c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801348e:	1a7f      	subs	r7, r7, r1
 8013490:	2f08      	cmp	r7, #8
 8013492:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013496:	dc03      	bgt.n	80134a0 <_strtod_l+0x2e0>
 8013498:	9908      	ldr	r1, [sp, #32]
 801349a:	428f      	cmp	r7, r1
 801349c:	bfa8      	it	ge
 801349e:	460f      	movge	r7, r1
 80134a0:	f1bc 0f00 	cmp.w	ip, #0
 80134a4:	d000      	beq.n	80134a8 <_strtod_l+0x2e8>
 80134a6:	427f      	negs	r7, r7
 80134a8:	2e00      	cmp	r6, #0
 80134aa:	d14f      	bne.n	801354c <_strtod_l+0x38c>
 80134ac:	9904      	ldr	r1, [sp, #16]
 80134ae:	4301      	orrs	r1, r0
 80134b0:	f47f aec1 	bne.w	8013236 <_strtod_l+0x76>
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f47f aedb 	bne.w	8013270 <_strtod_l+0xb0>
 80134ba:	2a69      	cmp	r2, #105	; 0x69
 80134bc:	d029      	beq.n	8013512 <_strtod_l+0x352>
 80134be:	dc26      	bgt.n	801350e <_strtod_l+0x34e>
 80134c0:	2a49      	cmp	r2, #73	; 0x49
 80134c2:	d026      	beq.n	8013512 <_strtod_l+0x352>
 80134c4:	2a4e      	cmp	r2, #78	; 0x4e
 80134c6:	f47f aed3 	bne.w	8013270 <_strtod_l+0xb0>
 80134ca:	499b      	ldr	r1, [pc, #620]	; (8013738 <_strtod_l+0x578>)
 80134cc:	a815      	add	r0, sp, #84	; 0x54
 80134ce:	f001 fa17 	bl	8014900 <__match>
 80134d2:	2800      	cmp	r0, #0
 80134d4:	f43f aecc 	beq.w	8013270 <_strtod_l+0xb0>
 80134d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	2b28      	cmp	r3, #40	; 0x28
 80134de:	d12f      	bne.n	8013540 <_strtod_l+0x380>
 80134e0:	4996      	ldr	r1, [pc, #600]	; (801373c <_strtod_l+0x57c>)
 80134e2:	aa18      	add	r2, sp, #96	; 0x60
 80134e4:	a815      	add	r0, sp, #84	; 0x54
 80134e6:	f001 fa1f 	bl	8014928 <__hexnan>
 80134ea:	2805      	cmp	r0, #5
 80134ec:	d128      	bne.n	8013540 <_strtod_l+0x380>
 80134ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80134f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80134f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80134f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80134fc:	e69b      	b.n	8013236 <_strtod_l+0x76>
 80134fe:	9f08      	ldr	r7, [sp, #32]
 8013500:	210a      	movs	r1, #10
 8013502:	fb01 2107 	mla	r1, r1, r7, r2
 8013506:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801350a:	9208      	str	r2, [sp, #32]
 801350c:	e7b5      	b.n	801347a <_strtod_l+0x2ba>
 801350e:	2a6e      	cmp	r2, #110	; 0x6e
 8013510:	e7d9      	b.n	80134c6 <_strtod_l+0x306>
 8013512:	498b      	ldr	r1, [pc, #556]	; (8013740 <_strtod_l+0x580>)
 8013514:	a815      	add	r0, sp, #84	; 0x54
 8013516:	f001 f9f3 	bl	8014900 <__match>
 801351a:	2800      	cmp	r0, #0
 801351c:	f43f aea8 	beq.w	8013270 <_strtod_l+0xb0>
 8013520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013522:	4988      	ldr	r1, [pc, #544]	; (8013744 <_strtod_l+0x584>)
 8013524:	3b01      	subs	r3, #1
 8013526:	a815      	add	r0, sp, #84	; 0x54
 8013528:	9315      	str	r3, [sp, #84]	; 0x54
 801352a:	f001 f9e9 	bl	8014900 <__match>
 801352e:	b910      	cbnz	r0, 8013536 <_strtod_l+0x376>
 8013530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013532:	3301      	adds	r3, #1
 8013534:	9315      	str	r3, [sp, #84]	; 0x54
 8013536:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8013754 <_strtod_l+0x594>
 801353a:	f04f 0800 	mov.w	r8, #0
 801353e:	e67a      	b.n	8013236 <_strtod_l+0x76>
 8013540:	4881      	ldr	r0, [pc, #516]	; (8013748 <_strtod_l+0x588>)
 8013542:	f000 fef9 	bl	8014338 <nan>
 8013546:	ec59 8b10 	vmov	r8, r9, d0
 801354a:	e674      	b.n	8013236 <_strtod_l+0x76>
 801354c:	9b05      	ldr	r3, [sp, #20]
 801354e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013550:	1afb      	subs	r3, r7, r3
 8013552:	f1bb 0f00 	cmp.w	fp, #0
 8013556:	bf08      	it	eq
 8013558:	46b3      	moveq	fp, r6
 801355a:	2e10      	cmp	r6, #16
 801355c:	9308      	str	r3, [sp, #32]
 801355e:	4635      	mov	r5, r6
 8013560:	bfa8      	it	ge
 8013562:	2510      	movge	r5, #16
 8013564:	f7ec ffce 	bl	8000504 <__aeabi_ui2d>
 8013568:	2e09      	cmp	r6, #9
 801356a:	4680      	mov	r8, r0
 801356c:	4689      	mov	r9, r1
 801356e:	dd13      	ble.n	8013598 <_strtod_l+0x3d8>
 8013570:	4b76      	ldr	r3, [pc, #472]	; (801374c <_strtod_l+0x58c>)
 8013572:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013576:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801357a:	f7ed f83d 	bl	80005f8 <__aeabi_dmul>
 801357e:	4680      	mov	r8, r0
 8013580:	4650      	mov	r0, sl
 8013582:	4689      	mov	r9, r1
 8013584:	f7ec ffbe 	bl	8000504 <__aeabi_ui2d>
 8013588:	4602      	mov	r2, r0
 801358a:	460b      	mov	r3, r1
 801358c:	4640      	mov	r0, r8
 801358e:	4649      	mov	r1, r9
 8013590:	f7ec fe7c 	bl	800028c <__adddf3>
 8013594:	4680      	mov	r8, r0
 8013596:	4689      	mov	r9, r1
 8013598:	2e0f      	cmp	r6, #15
 801359a:	dc38      	bgt.n	801360e <_strtod_l+0x44e>
 801359c:	9b08      	ldr	r3, [sp, #32]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	f43f ae49 	beq.w	8013236 <_strtod_l+0x76>
 80135a4:	dd24      	ble.n	80135f0 <_strtod_l+0x430>
 80135a6:	2b16      	cmp	r3, #22
 80135a8:	dc0b      	bgt.n	80135c2 <_strtod_l+0x402>
 80135aa:	4968      	ldr	r1, [pc, #416]	; (801374c <_strtod_l+0x58c>)
 80135ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80135b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135b4:	4642      	mov	r2, r8
 80135b6:	464b      	mov	r3, r9
 80135b8:	f7ed f81e 	bl	80005f8 <__aeabi_dmul>
 80135bc:	4680      	mov	r8, r0
 80135be:	4689      	mov	r9, r1
 80135c0:	e639      	b.n	8013236 <_strtod_l+0x76>
 80135c2:	9a08      	ldr	r2, [sp, #32]
 80135c4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80135c8:	4293      	cmp	r3, r2
 80135ca:	db20      	blt.n	801360e <_strtod_l+0x44e>
 80135cc:	4c5f      	ldr	r4, [pc, #380]	; (801374c <_strtod_l+0x58c>)
 80135ce:	f1c6 060f 	rsb	r6, r6, #15
 80135d2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80135d6:	4642      	mov	r2, r8
 80135d8:	464b      	mov	r3, r9
 80135da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135de:	f7ed f80b 	bl	80005f8 <__aeabi_dmul>
 80135e2:	9b08      	ldr	r3, [sp, #32]
 80135e4:	1b9e      	subs	r6, r3, r6
 80135e6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80135ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80135ee:	e7e3      	b.n	80135b8 <_strtod_l+0x3f8>
 80135f0:	9b08      	ldr	r3, [sp, #32]
 80135f2:	3316      	adds	r3, #22
 80135f4:	db0b      	blt.n	801360e <_strtod_l+0x44e>
 80135f6:	9b05      	ldr	r3, [sp, #20]
 80135f8:	1bdf      	subs	r7, r3, r7
 80135fa:	4b54      	ldr	r3, [pc, #336]	; (801374c <_strtod_l+0x58c>)
 80135fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8013600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013604:	4640      	mov	r0, r8
 8013606:	4649      	mov	r1, r9
 8013608:	f7ed f920 	bl	800084c <__aeabi_ddiv>
 801360c:	e7d6      	b.n	80135bc <_strtod_l+0x3fc>
 801360e:	9b08      	ldr	r3, [sp, #32]
 8013610:	1b75      	subs	r5, r6, r5
 8013612:	441d      	add	r5, r3
 8013614:	2d00      	cmp	r5, #0
 8013616:	dd70      	ble.n	80136fa <_strtod_l+0x53a>
 8013618:	f015 030f 	ands.w	r3, r5, #15
 801361c:	d00a      	beq.n	8013634 <_strtod_l+0x474>
 801361e:	494b      	ldr	r1, [pc, #300]	; (801374c <_strtod_l+0x58c>)
 8013620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013624:	4642      	mov	r2, r8
 8013626:	464b      	mov	r3, r9
 8013628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801362c:	f7ec ffe4 	bl	80005f8 <__aeabi_dmul>
 8013630:	4680      	mov	r8, r0
 8013632:	4689      	mov	r9, r1
 8013634:	f035 050f 	bics.w	r5, r5, #15
 8013638:	d04d      	beq.n	80136d6 <_strtod_l+0x516>
 801363a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801363e:	dd22      	ble.n	8013686 <_strtod_l+0x4c6>
 8013640:	2500      	movs	r5, #0
 8013642:	46ab      	mov	fp, r5
 8013644:	9509      	str	r5, [sp, #36]	; 0x24
 8013646:	9505      	str	r5, [sp, #20]
 8013648:	2322      	movs	r3, #34	; 0x22
 801364a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8013754 <_strtod_l+0x594>
 801364e:	6023      	str	r3, [r4, #0]
 8013650:	f04f 0800 	mov.w	r8, #0
 8013654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013656:	2b00      	cmp	r3, #0
 8013658:	f43f aded 	beq.w	8013236 <_strtod_l+0x76>
 801365c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801365e:	4620      	mov	r0, r4
 8013660:	f7ff f924 	bl	80128ac <_Bfree>
 8013664:	9905      	ldr	r1, [sp, #20]
 8013666:	4620      	mov	r0, r4
 8013668:	f7ff f920 	bl	80128ac <_Bfree>
 801366c:	4659      	mov	r1, fp
 801366e:	4620      	mov	r0, r4
 8013670:	f7ff f91c 	bl	80128ac <_Bfree>
 8013674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013676:	4620      	mov	r0, r4
 8013678:	f7ff f918 	bl	80128ac <_Bfree>
 801367c:	4629      	mov	r1, r5
 801367e:	4620      	mov	r0, r4
 8013680:	f7ff f914 	bl	80128ac <_Bfree>
 8013684:	e5d7      	b.n	8013236 <_strtod_l+0x76>
 8013686:	4b32      	ldr	r3, [pc, #200]	; (8013750 <_strtod_l+0x590>)
 8013688:	9304      	str	r3, [sp, #16]
 801368a:	2300      	movs	r3, #0
 801368c:	112d      	asrs	r5, r5, #4
 801368e:	4640      	mov	r0, r8
 8013690:	4649      	mov	r1, r9
 8013692:	469a      	mov	sl, r3
 8013694:	2d01      	cmp	r5, #1
 8013696:	dc21      	bgt.n	80136dc <_strtod_l+0x51c>
 8013698:	b10b      	cbz	r3, 801369e <_strtod_l+0x4de>
 801369a:	4680      	mov	r8, r0
 801369c:	4689      	mov	r9, r1
 801369e:	492c      	ldr	r1, [pc, #176]	; (8013750 <_strtod_l+0x590>)
 80136a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80136a4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80136a8:	4642      	mov	r2, r8
 80136aa:	464b      	mov	r3, r9
 80136ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136b0:	f7ec ffa2 	bl	80005f8 <__aeabi_dmul>
 80136b4:	4b27      	ldr	r3, [pc, #156]	; (8013754 <_strtod_l+0x594>)
 80136b6:	460a      	mov	r2, r1
 80136b8:	400b      	ands	r3, r1
 80136ba:	4927      	ldr	r1, [pc, #156]	; (8013758 <_strtod_l+0x598>)
 80136bc:	428b      	cmp	r3, r1
 80136be:	4680      	mov	r8, r0
 80136c0:	d8be      	bhi.n	8013640 <_strtod_l+0x480>
 80136c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80136c6:	428b      	cmp	r3, r1
 80136c8:	bf86      	itte	hi
 80136ca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801375c <_strtod_l+0x59c>
 80136ce:	f04f 38ff 	movhi.w	r8, #4294967295
 80136d2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80136d6:	2300      	movs	r3, #0
 80136d8:	9304      	str	r3, [sp, #16]
 80136da:	e07b      	b.n	80137d4 <_strtod_l+0x614>
 80136dc:	07ea      	lsls	r2, r5, #31
 80136de:	d505      	bpl.n	80136ec <_strtod_l+0x52c>
 80136e0:	9b04      	ldr	r3, [sp, #16]
 80136e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e6:	f7ec ff87 	bl	80005f8 <__aeabi_dmul>
 80136ea:	2301      	movs	r3, #1
 80136ec:	9a04      	ldr	r2, [sp, #16]
 80136ee:	3208      	adds	r2, #8
 80136f0:	f10a 0a01 	add.w	sl, sl, #1
 80136f4:	106d      	asrs	r5, r5, #1
 80136f6:	9204      	str	r2, [sp, #16]
 80136f8:	e7cc      	b.n	8013694 <_strtod_l+0x4d4>
 80136fa:	d0ec      	beq.n	80136d6 <_strtod_l+0x516>
 80136fc:	426d      	negs	r5, r5
 80136fe:	f015 020f 	ands.w	r2, r5, #15
 8013702:	d00a      	beq.n	801371a <_strtod_l+0x55a>
 8013704:	4b11      	ldr	r3, [pc, #68]	; (801374c <_strtod_l+0x58c>)
 8013706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801370a:	4640      	mov	r0, r8
 801370c:	4649      	mov	r1, r9
 801370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013712:	f7ed f89b 	bl	800084c <__aeabi_ddiv>
 8013716:	4680      	mov	r8, r0
 8013718:	4689      	mov	r9, r1
 801371a:	112d      	asrs	r5, r5, #4
 801371c:	d0db      	beq.n	80136d6 <_strtod_l+0x516>
 801371e:	2d1f      	cmp	r5, #31
 8013720:	dd1e      	ble.n	8013760 <_strtod_l+0x5a0>
 8013722:	2500      	movs	r5, #0
 8013724:	46ab      	mov	fp, r5
 8013726:	9509      	str	r5, [sp, #36]	; 0x24
 8013728:	9505      	str	r5, [sp, #20]
 801372a:	2322      	movs	r3, #34	; 0x22
 801372c:	f04f 0800 	mov.w	r8, #0
 8013730:	f04f 0900 	mov.w	r9, #0
 8013734:	6023      	str	r3, [r4, #0]
 8013736:	e78d      	b.n	8013654 <_strtod_l+0x494>
 8013738:	08015327 	.word	0x08015327
 801373c:	08015554 	.word	0x08015554
 8013740:	0801531f 	.word	0x0801531f
 8013744:	08015356 	.word	0x08015356
 8013748:	080156e5 	.word	0x080156e5
 801374c:	08015468 	.word	0x08015468
 8013750:	08015440 	.word	0x08015440
 8013754:	7ff00000 	.word	0x7ff00000
 8013758:	7ca00000 	.word	0x7ca00000
 801375c:	7fefffff 	.word	0x7fefffff
 8013760:	f015 0310 	ands.w	r3, r5, #16
 8013764:	bf18      	it	ne
 8013766:	236a      	movne	r3, #106	; 0x6a
 8013768:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8013b0c <_strtod_l+0x94c>
 801376c:	9304      	str	r3, [sp, #16]
 801376e:	4640      	mov	r0, r8
 8013770:	4649      	mov	r1, r9
 8013772:	2300      	movs	r3, #0
 8013774:	07ea      	lsls	r2, r5, #31
 8013776:	d504      	bpl.n	8013782 <_strtod_l+0x5c2>
 8013778:	e9da 2300 	ldrd	r2, r3, [sl]
 801377c:	f7ec ff3c 	bl	80005f8 <__aeabi_dmul>
 8013780:	2301      	movs	r3, #1
 8013782:	106d      	asrs	r5, r5, #1
 8013784:	f10a 0a08 	add.w	sl, sl, #8
 8013788:	d1f4      	bne.n	8013774 <_strtod_l+0x5b4>
 801378a:	b10b      	cbz	r3, 8013790 <_strtod_l+0x5d0>
 801378c:	4680      	mov	r8, r0
 801378e:	4689      	mov	r9, r1
 8013790:	9b04      	ldr	r3, [sp, #16]
 8013792:	b1bb      	cbz	r3, 80137c4 <_strtod_l+0x604>
 8013794:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013798:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801379c:	2b00      	cmp	r3, #0
 801379e:	4649      	mov	r1, r9
 80137a0:	dd10      	ble.n	80137c4 <_strtod_l+0x604>
 80137a2:	2b1f      	cmp	r3, #31
 80137a4:	f340 811e 	ble.w	80139e4 <_strtod_l+0x824>
 80137a8:	2b34      	cmp	r3, #52	; 0x34
 80137aa:	bfde      	ittt	le
 80137ac:	f04f 33ff 	movle.w	r3, #4294967295
 80137b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80137b4:	4093      	lslle	r3, r2
 80137b6:	f04f 0800 	mov.w	r8, #0
 80137ba:	bfcc      	ite	gt
 80137bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80137c0:	ea03 0901 	andle.w	r9, r3, r1
 80137c4:	2200      	movs	r2, #0
 80137c6:	2300      	movs	r3, #0
 80137c8:	4640      	mov	r0, r8
 80137ca:	4649      	mov	r1, r9
 80137cc:	f7ed f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	d1a6      	bne.n	8013722 <_strtod_l+0x562>
 80137d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137d6:	9300      	str	r3, [sp, #0]
 80137d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80137da:	4633      	mov	r3, r6
 80137dc:	465a      	mov	r2, fp
 80137de:	4620      	mov	r0, r4
 80137e0:	f7ff f8cc 	bl	801297c <__s2b>
 80137e4:	9009      	str	r0, [sp, #36]	; 0x24
 80137e6:	2800      	cmp	r0, #0
 80137e8:	f43f af2a 	beq.w	8013640 <_strtod_l+0x480>
 80137ec:	9a08      	ldr	r2, [sp, #32]
 80137ee:	9b05      	ldr	r3, [sp, #20]
 80137f0:	2a00      	cmp	r2, #0
 80137f2:	eba3 0307 	sub.w	r3, r3, r7
 80137f6:	bfa8      	it	ge
 80137f8:	2300      	movge	r3, #0
 80137fa:	930c      	str	r3, [sp, #48]	; 0x30
 80137fc:	2500      	movs	r5, #0
 80137fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013802:	9312      	str	r3, [sp, #72]	; 0x48
 8013804:	46ab      	mov	fp, r5
 8013806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013808:	4620      	mov	r0, r4
 801380a:	6859      	ldr	r1, [r3, #4]
 801380c:	f7ff f80e 	bl	801282c <_Balloc>
 8013810:	9005      	str	r0, [sp, #20]
 8013812:	2800      	cmp	r0, #0
 8013814:	f43f af18 	beq.w	8013648 <_strtod_l+0x488>
 8013818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801381a:	691a      	ldr	r2, [r3, #16]
 801381c:	3202      	adds	r2, #2
 801381e:	f103 010c 	add.w	r1, r3, #12
 8013822:	0092      	lsls	r2, r2, #2
 8013824:	300c      	adds	r0, #12
 8013826:	f7fe f871 	bl	801190c <memcpy>
 801382a:	ec49 8b10 	vmov	d0, r8, r9
 801382e:	aa18      	add	r2, sp, #96	; 0x60
 8013830:	a917      	add	r1, sp, #92	; 0x5c
 8013832:	4620      	mov	r0, r4
 8013834:	f7ff fbd6 	bl	8012fe4 <__d2b>
 8013838:	ec49 8b18 	vmov	d8, r8, r9
 801383c:	9016      	str	r0, [sp, #88]	; 0x58
 801383e:	2800      	cmp	r0, #0
 8013840:	f43f af02 	beq.w	8013648 <_strtod_l+0x488>
 8013844:	2101      	movs	r1, #1
 8013846:	4620      	mov	r0, r4
 8013848:	f7ff f930 	bl	8012aac <__i2b>
 801384c:	4683      	mov	fp, r0
 801384e:	2800      	cmp	r0, #0
 8013850:	f43f aefa 	beq.w	8013648 <_strtod_l+0x488>
 8013854:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013856:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013858:	2e00      	cmp	r6, #0
 801385a:	bfab      	itete	ge
 801385c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801385e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013860:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013862:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8013866:	bfac      	ite	ge
 8013868:	eb06 0a03 	addge.w	sl, r6, r3
 801386c:	1b9f      	sublt	r7, r3, r6
 801386e:	9b04      	ldr	r3, [sp, #16]
 8013870:	1af6      	subs	r6, r6, r3
 8013872:	4416      	add	r6, r2
 8013874:	4ba0      	ldr	r3, [pc, #640]	; (8013af8 <_strtod_l+0x938>)
 8013876:	3e01      	subs	r6, #1
 8013878:	429e      	cmp	r6, r3
 801387a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801387e:	f280 80c4 	bge.w	8013a0a <_strtod_l+0x84a>
 8013882:	1b9b      	subs	r3, r3, r6
 8013884:	2b1f      	cmp	r3, #31
 8013886:	eba2 0203 	sub.w	r2, r2, r3
 801388a:	f04f 0101 	mov.w	r1, #1
 801388e:	f300 80b0 	bgt.w	80139f2 <_strtod_l+0x832>
 8013892:	fa01 f303 	lsl.w	r3, r1, r3
 8013896:	930e      	str	r3, [sp, #56]	; 0x38
 8013898:	2300      	movs	r3, #0
 801389a:	930d      	str	r3, [sp, #52]	; 0x34
 801389c:	eb0a 0602 	add.w	r6, sl, r2
 80138a0:	9b04      	ldr	r3, [sp, #16]
 80138a2:	45b2      	cmp	sl, r6
 80138a4:	4417      	add	r7, r2
 80138a6:	441f      	add	r7, r3
 80138a8:	4653      	mov	r3, sl
 80138aa:	bfa8      	it	ge
 80138ac:	4633      	movge	r3, r6
 80138ae:	42bb      	cmp	r3, r7
 80138b0:	bfa8      	it	ge
 80138b2:	463b      	movge	r3, r7
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	bfc2      	ittt	gt
 80138b8:	1af6      	subgt	r6, r6, r3
 80138ba:	1aff      	subgt	r7, r7, r3
 80138bc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80138c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	dd17      	ble.n	80138f6 <_strtod_l+0x736>
 80138c6:	4659      	mov	r1, fp
 80138c8:	461a      	mov	r2, r3
 80138ca:	4620      	mov	r0, r4
 80138cc:	f7ff f9ae 	bl	8012c2c <__pow5mult>
 80138d0:	4683      	mov	fp, r0
 80138d2:	2800      	cmp	r0, #0
 80138d4:	f43f aeb8 	beq.w	8013648 <_strtod_l+0x488>
 80138d8:	4601      	mov	r1, r0
 80138da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80138dc:	4620      	mov	r0, r4
 80138de:	f7ff f8fb 	bl	8012ad8 <__multiply>
 80138e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80138e4:	2800      	cmp	r0, #0
 80138e6:	f43f aeaf 	beq.w	8013648 <_strtod_l+0x488>
 80138ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 80138ec:	4620      	mov	r0, r4
 80138ee:	f7fe ffdd 	bl	80128ac <_Bfree>
 80138f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80138f4:	9316      	str	r3, [sp, #88]	; 0x58
 80138f6:	2e00      	cmp	r6, #0
 80138f8:	f300 808c 	bgt.w	8013a14 <_strtod_l+0x854>
 80138fc:	9b08      	ldr	r3, [sp, #32]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	dd08      	ble.n	8013914 <_strtod_l+0x754>
 8013902:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013904:	9905      	ldr	r1, [sp, #20]
 8013906:	4620      	mov	r0, r4
 8013908:	f7ff f990 	bl	8012c2c <__pow5mult>
 801390c:	9005      	str	r0, [sp, #20]
 801390e:	2800      	cmp	r0, #0
 8013910:	f43f ae9a 	beq.w	8013648 <_strtod_l+0x488>
 8013914:	2f00      	cmp	r7, #0
 8013916:	dd08      	ble.n	801392a <_strtod_l+0x76a>
 8013918:	9905      	ldr	r1, [sp, #20]
 801391a:	463a      	mov	r2, r7
 801391c:	4620      	mov	r0, r4
 801391e:	f7ff f9df 	bl	8012ce0 <__lshift>
 8013922:	9005      	str	r0, [sp, #20]
 8013924:	2800      	cmp	r0, #0
 8013926:	f43f ae8f 	beq.w	8013648 <_strtod_l+0x488>
 801392a:	f1ba 0f00 	cmp.w	sl, #0
 801392e:	dd08      	ble.n	8013942 <_strtod_l+0x782>
 8013930:	4659      	mov	r1, fp
 8013932:	4652      	mov	r2, sl
 8013934:	4620      	mov	r0, r4
 8013936:	f7ff f9d3 	bl	8012ce0 <__lshift>
 801393a:	4683      	mov	fp, r0
 801393c:	2800      	cmp	r0, #0
 801393e:	f43f ae83 	beq.w	8013648 <_strtod_l+0x488>
 8013942:	9a05      	ldr	r2, [sp, #20]
 8013944:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013946:	4620      	mov	r0, r4
 8013948:	f7ff fa52 	bl	8012df0 <__mdiff>
 801394c:	4605      	mov	r5, r0
 801394e:	2800      	cmp	r0, #0
 8013950:	f43f ae7a 	beq.w	8013648 <_strtod_l+0x488>
 8013954:	68c3      	ldr	r3, [r0, #12]
 8013956:	930b      	str	r3, [sp, #44]	; 0x2c
 8013958:	2300      	movs	r3, #0
 801395a:	60c3      	str	r3, [r0, #12]
 801395c:	4659      	mov	r1, fp
 801395e:	f7ff fa2b 	bl	8012db8 <__mcmp>
 8013962:	2800      	cmp	r0, #0
 8013964:	da60      	bge.n	8013a28 <_strtod_l+0x868>
 8013966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013968:	ea53 0308 	orrs.w	r3, r3, r8
 801396c:	f040 8084 	bne.w	8013a78 <_strtod_l+0x8b8>
 8013970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013974:	2b00      	cmp	r3, #0
 8013976:	d17f      	bne.n	8013a78 <_strtod_l+0x8b8>
 8013978:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801397c:	0d1b      	lsrs	r3, r3, #20
 801397e:	051b      	lsls	r3, r3, #20
 8013980:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013984:	d978      	bls.n	8013a78 <_strtod_l+0x8b8>
 8013986:	696b      	ldr	r3, [r5, #20]
 8013988:	b913      	cbnz	r3, 8013990 <_strtod_l+0x7d0>
 801398a:	692b      	ldr	r3, [r5, #16]
 801398c:	2b01      	cmp	r3, #1
 801398e:	dd73      	ble.n	8013a78 <_strtod_l+0x8b8>
 8013990:	4629      	mov	r1, r5
 8013992:	2201      	movs	r2, #1
 8013994:	4620      	mov	r0, r4
 8013996:	f7ff f9a3 	bl	8012ce0 <__lshift>
 801399a:	4659      	mov	r1, fp
 801399c:	4605      	mov	r5, r0
 801399e:	f7ff fa0b 	bl	8012db8 <__mcmp>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	dd68      	ble.n	8013a78 <_strtod_l+0x8b8>
 80139a6:	9904      	ldr	r1, [sp, #16]
 80139a8:	4a54      	ldr	r2, [pc, #336]	; (8013afc <_strtod_l+0x93c>)
 80139aa:	464b      	mov	r3, r9
 80139ac:	2900      	cmp	r1, #0
 80139ae:	f000 8084 	beq.w	8013aba <_strtod_l+0x8fa>
 80139b2:	ea02 0109 	and.w	r1, r2, r9
 80139b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80139ba:	dc7e      	bgt.n	8013aba <_strtod_l+0x8fa>
 80139bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80139c0:	f77f aeb3 	ble.w	801372a <_strtod_l+0x56a>
 80139c4:	4b4e      	ldr	r3, [pc, #312]	; (8013b00 <_strtod_l+0x940>)
 80139c6:	4640      	mov	r0, r8
 80139c8:	4649      	mov	r1, r9
 80139ca:	2200      	movs	r2, #0
 80139cc:	f7ec fe14 	bl	80005f8 <__aeabi_dmul>
 80139d0:	4b4a      	ldr	r3, [pc, #296]	; (8013afc <_strtod_l+0x93c>)
 80139d2:	400b      	ands	r3, r1
 80139d4:	4680      	mov	r8, r0
 80139d6:	4689      	mov	r9, r1
 80139d8:	2b00      	cmp	r3, #0
 80139da:	f47f ae3f 	bne.w	801365c <_strtod_l+0x49c>
 80139de:	2322      	movs	r3, #34	; 0x22
 80139e0:	6023      	str	r3, [r4, #0]
 80139e2:	e63b      	b.n	801365c <_strtod_l+0x49c>
 80139e4:	f04f 32ff 	mov.w	r2, #4294967295
 80139e8:	fa02 f303 	lsl.w	r3, r2, r3
 80139ec:	ea03 0808 	and.w	r8, r3, r8
 80139f0:	e6e8      	b.n	80137c4 <_strtod_l+0x604>
 80139f2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80139f6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80139fa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80139fe:	36e2      	adds	r6, #226	; 0xe2
 8013a00:	fa01 f306 	lsl.w	r3, r1, r6
 8013a04:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8013a08:	e748      	b.n	801389c <_strtod_l+0x6dc>
 8013a0a:	2100      	movs	r1, #0
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8013a12:	e743      	b.n	801389c <_strtod_l+0x6dc>
 8013a14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013a16:	4632      	mov	r2, r6
 8013a18:	4620      	mov	r0, r4
 8013a1a:	f7ff f961 	bl	8012ce0 <__lshift>
 8013a1e:	9016      	str	r0, [sp, #88]	; 0x58
 8013a20:	2800      	cmp	r0, #0
 8013a22:	f47f af6b 	bne.w	80138fc <_strtod_l+0x73c>
 8013a26:	e60f      	b.n	8013648 <_strtod_l+0x488>
 8013a28:	46ca      	mov	sl, r9
 8013a2a:	d171      	bne.n	8013b10 <_strtod_l+0x950>
 8013a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013a32:	b352      	cbz	r2, 8013a8a <_strtod_l+0x8ca>
 8013a34:	4a33      	ldr	r2, [pc, #204]	; (8013b04 <_strtod_l+0x944>)
 8013a36:	4293      	cmp	r3, r2
 8013a38:	d12a      	bne.n	8013a90 <_strtod_l+0x8d0>
 8013a3a:	9b04      	ldr	r3, [sp, #16]
 8013a3c:	4641      	mov	r1, r8
 8013a3e:	b1fb      	cbz	r3, 8013a80 <_strtod_l+0x8c0>
 8013a40:	4b2e      	ldr	r3, [pc, #184]	; (8013afc <_strtod_l+0x93c>)
 8013a42:	ea09 0303 	and.w	r3, r9, r3
 8013a46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a4e:	d81a      	bhi.n	8013a86 <_strtod_l+0x8c6>
 8013a50:	0d1b      	lsrs	r3, r3, #20
 8013a52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013a56:	fa02 f303 	lsl.w	r3, r2, r3
 8013a5a:	4299      	cmp	r1, r3
 8013a5c:	d118      	bne.n	8013a90 <_strtod_l+0x8d0>
 8013a5e:	4b2a      	ldr	r3, [pc, #168]	; (8013b08 <_strtod_l+0x948>)
 8013a60:	459a      	cmp	sl, r3
 8013a62:	d102      	bne.n	8013a6a <_strtod_l+0x8aa>
 8013a64:	3101      	adds	r1, #1
 8013a66:	f43f adef 	beq.w	8013648 <_strtod_l+0x488>
 8013a6a:	4b24      	ldr	r3, [pc, #144]	; (8013afc <_strtod_l+0x93c>)
 8013a6c:	ea0a 0303 	and.w	r3, sl, r3
 8013a70:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013a74:	f04f 0800 	mov.w	r8, #0
 8013a78:	9b04      	ldr	r3, [sp, #16]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d1a2      	bne.n	80139c4 <_strtod_l+0x804>
 8013a7e:	e5ed      	b.n	801365c <_strtod_l+0x49c>
 8013a80:	f04f 33ff 	mov.w	r3, #4294967295
 8013a84:	e7e9      	b.n	8013a5a <_strtod_l+0x89a>
 8013a86:	4613      	mov	r3, r2
 8013a88:	e7e7      	b.n	8013a5a <_strtod_l+0x89a>
 8013a8a:	ea53 0308 	orrs.w	r3, r3, r8
 8013a8e:	d08a      	beq.n	80139a6 <_strtod_l+0x7e6>
 8013a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a92:	b1e3      	cbz	r3, 8013ace <_strtod_l+0x90e>
 8013a94:	ea13 0f0a 	tst.w	r3, sl
 8013a98:	d0ee      	beq.n	8013a78 <_strtod_l+0x8b8>
 8013a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a9c:	9a04      	ldr	r2, [sp, #16]
 8013a9e:	4640      	mov	r0, r8
 8013aa0:	4649      	mov	r1, r9
 8013aa2:	b1c3      	cbz	r3, 8013ad6 <_strtod_l+0x916>
 8013aa4:	f7ff fb6f 	bl	8013186 <sulp>
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	460b      	mov	r3, r1
 8013aac:	ec51 0b18 	vmov	r0, r1, d8
 8013ab0:	f7ec fbec 	bl	800028c <__adddf3>
 8013ab4:	4680      	mov	r8, r0
 8013ab6:	4689      	mov	r9, r1
 8013ab8:	e7de      	b.n	8013a78 <_strtod_l+0x8b8>
 8013aba:	4013      	ands	r3, r2
 8013abc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013ac0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013ac4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013ac8:	f04f 38ff 	mov.w	r8, #4294967295
 8013acc:	e7d4      	b.n	8013a78 <_strtod_l+0x8b8>
 8013ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ad0:	ea13 0f08 	tst.w	r3, r8
 8013ad4:	e7e0      	b.n	8013a98 <_strtod_l+0x8d8>
 8013ad6:	f7ff fb56 	bl	8013186 <sulp>
 8013ada:	4602      	mov	r2, r0
 8013adc:	460b      	mov	r3, r1
 8013ade:	ec51 0b18 	vmov	r0, r1, d8
 8013ae2:	f7ec fbd1 	bl	8000288 <__aeabi_dsub>
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	2300      	movs	r3, #0
 8013aea:	4680      	mov	r8, r0
 8013aec:	4689      	mov	r9, r1
 8013aee:	f7ec ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8013af2:	2800      	cmp	r0, #0
 8013af4:	d0c0      	beq.n	8013a78 <_strtod_l+0x8b8>
 8013af6:	e618      	b.n	801372a <_strtod_l+0x56a>
 8013af8:	fffffc02 	.word	0xfffffc02
 8013afc:	7ff00000 	.word	0x7ff00000
 8013b00:	39500000 	.word	0x39500000
 8013b04:	000fffff 	.word	0x000fffff
 8013b08:	7fefffff 	.word	0x7fefffff
 8013b0c:	08015568 	.word	0x08015568
 8013b10:	4659      	mov	r1, fp
 8013b12:	4628      	mov	r0, r5
 8013b14:	f7ff fac0 	bl	8013098 <__ratio>
 8013b18:	ec57 6b10 	vmov	r6, r7, d0
 8013b1c:	ee10 0a10 	vmov	r0, s0
 8013b20:	2200      	movs	r2, #0
 8013b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013b26:	4639      	mov	r1, r7
 8013b28:	f7ec ffe2 	bl	8000af0 <__aeabi_dcmple>
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	d071      	beq.n	8013c14 <_strtod_l+0xa54>
 8013b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d17c      	bne.n	8013c30 <_strtod_l+0xa70>
 8013b36:	f1b8 0f00 	cmp.w	r8, #0
 8013b3a:	d15a      	bne.n	8013bf2 <_strtod_l+0xa32>
 8013b3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d15d      	bne.n	8013c00 <_strtod_l+0xa40>
 8013b44:	4b90      	ldr	r3, [pc, #576]	; (8013d88 <_strtod_l+0xbc8>)
 8013b46:	2200      	movs	r2, #0
 8013b48:	4630      	mov	r0, r6
 8013b4a:	4639      	mov	r1, r7
 8013b4c:	f7ec ffc6 	bl	8000adc <__aeabi_dcmplt>
 8013b50:	2800      	cmp	r0, #0
 8013b52:	d15c      	bne.n	8013c0e <_strtod_l+0xa4e>
 8013b54:	4630      	mov	r0, r6
 8013b56:	4639      	mov	r1, r7
 8013b58:	4b8c      	ldr	r3, [pc, #560]	; (8013d8c <_strtod_l+0xbcc>)
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f7ec fd4c 	bl	80005f8 <__aeabi_dmul>
 8013b60:	4606      	mov	r6, r0
 8013b62:	460f      	mov	r7, r1
 8013b64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013b68:	9606      	str	r6, [sp, #24]
 8013b6a:	9307      	str	r3, [sp, #28]
 8013b6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013b74:	4b86      	ldr	r3, [pc, #536]	; (8013d90 <_strtod_l+0xbd0>)
 8013b76:	ea0a 0303 	and.w	r3, sl, r3
 8013b7a:	930d      	str	r3, [sp, #52]	; 0x34
 8013b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013b7e:	4b85      	ldr	r3, [pc, #532]	; (8013d94 <_strtod_l+0xbd4>)
 8013b80:	429a      	cmp	r2, r3
 8013b82:	f040 8090 	bne.w	8013ca6 <_strtod_l+0xae6>
 8013b86:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013b8a:	ec49 8b10 	vmov	d0, r8, r9
 8013b8e:	f7ff f9b9 	bl	8012f04 <__ulp>
 8013b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b96:	ec51 0b10 	vmov	r0, r1, d0
 8013b9a:	f7ec fd2d 	bl	80005f8 <__aeabi_dmul>
 8013b9e:	4642      	mov	r2, r8
 8013ba0:	464b      	mov	r3, r9
 8013ba2:	f7ec fb73 	bl	800028c <__adddf3>
 8013ba6:	460b      	mov	r3, r1
 8013ba8:	4979      	ldr	r1, [pc, #484]	; (8013d90 <_strtod_l+0xbd0>)
 8013baa:	4a7b      	ldr	r2, [pc, #492]	; (8013d98 <_strtod_l+0xbd8>)
 8013bac:	4019      	ands	r1, r3
 8013bae:	4291      	cmp	r1, r2
 8013bb0:	4680      	mov	r8, r0
 8013bb2:	d944      	bls.n	8013c3e <_strtod_l+0xa7e>
 8013bb4:	ee18 2a90 	vmov	r2, s17
 8013bb8:	4b78      	ldr	r3, [pc, #480]	; (8013d9c <_strtod_l+0xbdc>)
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d104      	bne.n	8013bc8 <_strtod_l+0xa08>
 8013bbe:	ee18 3a10 	vmov	r3, s16
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	f43f ad40 	beq.w	8013648 <_strtod_l+0x488>
 8013bc8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013d9c <_strtod_l+0xbdc>
 8013bcc:	f04f 38ff 	mov.w	r8, #4294967295
 8013bd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f7fe fe6a 	bl	80128ac <_Bfree>
 8013bd8:	9905      	ldr	r1, [sp, #20]
 8013bda:	4620      	mov	r0, r4
 8013bdc:	f7fe fe66 	bl	80128ac <_Bfree>
 8013be0:	4659      	mov	r1, fp
 8013be2:	4620      	mov	r0, r4
 8013be4:	f7fe fe62 	bl	80128ac <_Bfree>
 8013be8:	4629      	mov	r1, r5
 8013bea:	4620      	mov	r0, r4
 8013bec:	f7fe fe5e 	bl	80128ac <_Bfree>
 8013bf0:	e609      	b.n	8013806 <_strtod_l+0x646>
 8013bf2:	f1b8 0f01 	cmp.w	r8, #1
 8013bf6:	d103      	bne.n	8013c00 <_strtod_l+0xa40>
 8013bf8:	f1b9 0f00 	cmp.w	r9, #0
 8013bfc:	f43f ad95 	beq.w	801372a <_strtod_l+0x56a>
 8013c00:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8013d58 <_strtod_l+0xb98>
 8013c04:	4f60      	ldr	r7, [pc, #384]	; (8013d88 <_strtod_l+0xbc8>)
 8013c06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013c0a:	2600      	movs	r6, #0
 8013c0c:	e7ae      	b.n	8013b6c <_strtod_l+0x9ac>
 8013c0e:	4f5f      	ldr	r7, [pc, #380]	; (8013d8c <_strtod_l+0xbcc>)
 8013c10:	2600      	movs	r6, #0
 8013c12:	e7a7      	b.n	8013b64 <_strtod_l+0x9a4>
 8013c14:	4b5d      	ldr	r3, [pc, #372]	; (8013d8c <_strtod_l+0xbcc>)
 8013c16:	4630      	mov	r0, r6
 8013c18:	4639      	mov	r1, r7
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	f7ec fcec 	bl	80005f8 <__aeabi_dmul>
 8013c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c22:	4606      	mov	r6, r0
 8013c24:	460f      	mov	r7, r1
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d09c      	beq.n	8013b64 <_strtod_l+0x9a4>
 8013c2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013c2e:	e79d      	b.n	8013b6c <_strtod_l+0x9ac>
 8013c30:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8013d60 <_strtod_l+0xba0>
 8013c34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013c38:	ec57 6b17 	vmov	r6, r7, d7
 8013c3c:	e796      	b.n	8013b6c <_strtod_l+0x9ac>
 8013c3e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013c42:	9b04      	ldr	r3, [sp, #16]
 8013c44:	46ca      	mov	sl, r9
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d1c2      	bne.n	8013bd0 <_strtod_l+0xa10>
 8013c4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013c4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c50:	0d1b      	lsrs	r3, r3, #20
 8013c52:	051b      	lsls	r3, r3, #20
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d1bb      	bne.n	8013bd0 <_strtod_l+0xa10>
 8013c58:	4630      	mov	r0, r6
 8013c5a:	4639      	mov	r1, r7
 8013c5c:	f7ed f814 	bl	8000c88 <__aeabi_d2lz>
 8013c60:	f7ec fc9c 	bl	800059c <__aeabi_l2d>
 8013c64:	4602      	mov	r2, r0
 8013c66:	460b      	mov	r3, r1
 8013c68:	4630      	mov	r0, r6
 8013c6a:	4639      	mov	r1, r7
 8013c6c:	f7ec fb0c 	bl	8000288 <__aeabi_dsub>
 8013c70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c76:	ea43 0308 	orr.w	r3, r3, r8
 8013c7a:	4313      	orrs	r3, r2
 8013c7c:	4606      	mov	r6, r0
 8013c7e:	460f      	mov	r7, r1
 8013c80:	d054      	beq.n	8013d2c <_strtod_l+0xb6c>
 8013c82:	a339      	add	r3, pc, #228	; (adr r3, 8013d68 <_strtod_l+0xba8>)
 8013c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c88:	f7ec ff28 	bl	8000adc <__aeabi_dcmplt>
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	f47f ace5 	bne.w	801365c <_strtod_l+0x49c>
 8013c92:	a337      	add	r3, pc, #220	; (adr r3, 8013d70 <_strtod_l+0xbb0>)
 8013c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c98:	4630      	mov	r0, r6
 8013c9a:	4639      	mov	r1, r7
 8013c9c:	f7ec ff3c 	bl	8000b18 <__aeabi_dcmpgt>
 8013ca0:	2800      	cmp	r0, #0
 8013ca2:	d095      	beq.n	8013bd0 <_strtod_l+0xa10>
 8013ca4:	e4da      	b.n	801365c <_strtod_l+0x49c>
 8013ca6:	9b04      	ldr	r3, [sp, #16]
 8013ca8:	b333      	cbz	r3, 8013cf8 <_strtod_l+0xb38>
 8013caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013cb0:	d822      	bhi.n	8013cf8 <_strtod_l+0xb38>
 8013cb2:	a331      	add	r3, pc, #196	; (adr r3, 8013d78 <_strtod_l+0xbb8>)
 8013cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cb8:	4630      	mov	r0, r6
 8013cba:	4639      	mov	r1, r7
 8013cbc:	f7ec ff18 	bl	8000af0 <__aeabi_dcmple>
 8013cc0:	b1a0      	cbz	r0, 8013cec <_strtod_l+0xb2c>
 8013cc2:	4639      	mov	r1, r7
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f7ec ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8013cca:	2801      	cmp	r0, #1
 8013ccc:	bf38      	it	cc
 8013cce:	2001      	movcc	r0, #1
 8013cd0:	f7ec fc18 	bl	8000504 <__aeabi_ui2d>
 8013cd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cd6:	4606      	mov	r6, r0
 8013cd8:	460f      	mov	r7, r1
 8013cda:	bb23      	cbnz	r3, 8013d26 <_strtod_l+0xb66>
 8013cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ce0:	9010      	str	r0, [sp, #64]	; 0x40
 8013ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8013ce4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013ce8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013cf0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013cf4:	1a9b      	subs	r3, r3, r2
 8013cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cf8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013cfc:	eeb0 0a48 	vmov.f32	s0, s16
 8013d00:	eef0 0a68 	vmov.f32	s1, s17
 8013d04:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013d08:	f7ff f8fc 	bl	8012f04 <__ulp>
 8013d0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013d10:	ec53 2b10 	vmov	r2, r3, d0
 8013d14:	f7ec fc70 	bl	80005f8 <__aeabi_dmul>
 8013d18:	ec53 2b18 	vmov	r2, r3, d8
 8013d1c:	f7ec fab6 	bl	800028c <__adddf3>
 8013d20:	4680      	mov	r8, r0
 8013d22:	4689      	mov	r9, r1
 8013d24:	e78d      	b.n	8013c42 <_strtod_l+0xa82>
 8013d26:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013d2a:	e7db      	b.n	8013ce4 <_strtod_l+0xb24>
 8013d2c:	a314      	add	r3, pc, #80	; (adr r3, 8013d80 <_strtod_l+0xbc0>)
 8013d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d32:	f7ec fed3 	bl	8000adc <__aeabi_dcmplt>
 8013d36:	e7b3      	b.n	8013ca0 <_strtod_l+0xae0>
 8013d38:	2300      	movs	r3, #0
 8013d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8013d3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013d3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d40:	6013      	str	r3, [r2, #0]
 8013d42:	f7ff ba7c 	b.w	801323e <_strtod_l+0x7e>
 8013d46:	2a65      	cmp	r2, #101	; 0x65
 8013d48:	f43f ab75 	beq.w	8013436 <_strtod_l+0x276>
 8013d4c:	2a45      	cmp	r2, #69	; 0x45
 8013d4e:	f43f ab72 	beq.w	8013436 <_strtod_l+0x276>
 8013d52:	2301      	movs	r3, #1
 8013d54:	f7ff bbaa 	b.w	80134ac <_strtod_l+0x2ec>
 8013d58:	00000000 	.word	0x00000000
 8013d5c:	bff00000 	.word	0xbff00000
 8013d60:	00000000 	.word	0x00000000
 8013d64:	3ff00000 	.word	0x3ff00000
 8013d68:	94a03595 	.word	0x94a03595
 8013d6c:	3fdfffff 	.word	0x3fdfffff
 8013d70:	35afe535 	.word	0x35afe535
 8013d74:	3fe00000 	.word	0x3fe00000
 8013d78:	ffc00000 	.word	0xffc00000
 8013d7c:	41dfffff 	.word	0x41dfffff
 8013d80:	94a03595 	.word	0x94a03595
 8013d84:	3fcfffff 	.word	0x3fcfffff
 8013d88:	3ff00000 	.word	0x3ff00000
 8013d8c:	3fe00000 	.word	0x3fe00000
 8013d90:	7ff00000 	.word	0x7ff00000
 8013d94:	7fe00000 	.word	0x7fe00000
 8013d98:	7c9fffff 	.word	0x7c9fffff
 8013d9c:	7fefffff 	.word	0x7fefffff

08013da0 <_strtod_r>:
 8013da0:	4b01      	ldr	r3, [pc, #4]	; (8013da8 <_strtod_r+0x8>)
 8013da2:	f7ff ba0d 	b.w	80131c0 <_strtod_l>
 8013da6:	bf00      	nop
 8013da8:	20000168 	.word	0x20000168

08013dac <_strtol_l.constprop.0>:
 8013dac:	2b01      	cmp	r3, #1
 8013dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013db2:	d001      	beq.n	8013db8 <_strtol_l.constprop.0+0xc>
 8013db4:	2b24      	cmp	r3, #36	; 0x24
 8013db6:	d906      	bls.n	8013dc6 <_strtol_l.constprop.0+0x1a>
 8013db8:	f7fd fd7c 	bl	80118b4 <__errno>
 8013dbc:	2316      	movs	r3, #22
 8013dbe:	6003      	str	r3, [r0, #0]
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dc6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013eac <_strtol_l.constprop.0+0x100>
 8013dca:	460d      	mov	r5, r1
 8013dcc:	462e      	mov	r6, r5
 8013dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013dd2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8013dd6:	f017 0708 	ands.w	r7, r7, #8
 8013dda:	d1f7      	bne.n	8013dcc <_strtol_l.constprop.0+0x20>
 8013ddc:	2c2d      	cmp	r4, #45	; 0x2d
 8013dde:	d132      	bne.n	8013e46 <_strtol_l.constprop.0+0x9a>
 8013de0:	782c      	ldrb	r4, [r5, #0]
 8013de2:	2701      	movs	r7, #1
 8013de4:	1cb5      	adds	r5, r6, #2
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d05b      	beq.n	8013ea2 <_strtol_l.constprop.0+0xf6>
 8013dea:	2b10      	cmp	r3, #16
 8013dec:	d109      	bne.n	8013e02 <_strtol_l.constprop.0+0x56>
 8013dee:	2c30      	cmp	r4, #48	; 0x30
 8013df0:	d107      	bne.n	8013e02 <_strtol_l.constprop.0+0x56>
 8013df2:	782c      	ldrb	r4, [r5, #0]
 8013df4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013df8:	2c58      	cmp	r4, #88	; 0x58
 8013dfa:	d14d      	bne.n	8013e98 <_strtol_l.constprop.0+0xec>
 8013dfc:	786c      	ldrb	r4, [r5, #1]
 8013dfe:	2310      	movs	r3, #16
 8013e00:	3502      	adds	r5, #2
 8013e02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8013e06:	f108 38ff 	add.w	r8, r8, #4294967295
 8013e0a:	f04f 0e00 	mov.w	lr, #0
 8013e0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8013e12:	4676      	mov	r6, lr
 8013e14:	fb03 8a19 	mls	sl, r3, r9, r8
 8013e18:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013e1c:	f1bc 0f09 	cmp.w	ip, #9
 8013e20:	d816      	bhi.n	8013e50 <_strtol_l.constprop.0+0xa4>
 8013e22:	4664      	mov	r4, ip
 8013e24:	42a3      	cmp	r3, r4
 8013e26:	dd24      	ble.n	8013e72 <_strtol_l.constprop.0+0xc6>
 8013e28:	f1be 3fff 	cmp.w	lr, #4294967295
 8013e2c:	d008      	beq.n	8013e40 <_strtol_l.constprop.0+0x94>
 8013e2e:	45b1      	cmp	r9, r6
 8013e30:	d31c      	bcc.n	8013e6c <_strtol_l.constprop.0+0xc0>
 8013e32:	d101      	bne.n	8013e38 <_strtol_l.constprop.0+0x8c>
 8013e34:	45a2      	cmp	sl, r4
 8013e36:	db19      	blt.n	8013e6c <_strtol_l.constprop.0+0xc0>
 8013e38:	fb06 4603 	mla	r6, r6, r3, r4
 8013e3c:	f04f 0e01 	mov.w	lr, #1
 8013e40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e44:	e7e8      	b.n	8013e18 <_strtol_l.constprop.0+0x6c>
 8013e46:	2c2b      	cmp	r4, #43	; 0x2b
 8013e48:	bf04      	itt	eq
 8013e4a:	782c      	ldrbeq	r4, [r5, #0]
 8013e4c:	1cb5      	addeq	r5, r6, #2
 8013e4e:	e7ca      	b.n	8013de6 <_strtol_l.constprop.0+0x3a>
 8013e50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013e54:	f1bc 0f19 	cmp.w	ip, #25
 8013e58:	d801      	bhi.n	8013e5e <_strtol_l.constprop.0+0xb2>
 8013e5a:	3c37      	subs	r4, #55	; 0x37
 8013e5c:	e7e2      	b.n	8013e24 <_strtol_l.constprop.0+0x78>
 8013e5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013e62:	f1bc 0f19 	cmp.w	ip, #25
 8013e66:	d804      	bhi.n	8013e72 <_strtol_l.constprop.0+0xc6>
 8013e68:	3c57      	subs	r4, #87	; 0x57
 8013e6a:	e7db      	b.n	8013e24 <_strtol_l.constprop.0+0x78>
 8013e6c:	f04f 3eff 	mov.w	lr, #4294967295
 8013e70:	e7e6      	b.n	8013e40 <_strtol_l.constprop.0+0x94>
 8013e72:	f1be 3fff 	cmp.w	lr, #4294967295
 8013e76:	d105      	bne.n	8013e84 <_strtol_l.constprop.0+0xd8>
 8013e78:	2322      	movs	r3, #34	; 0x22
 8013e7a:	6003      	str	r3, [r0, #0]
 8013e7c:	4646      	mov	r6, r8
 8013e7e:	b942      	cbnz	r2, 8013e92 <_strtol_l.constprop.0+0xe6>
 8013e80:	4630      	mov	r0, r6
 8013e82:	e79e      	b.n	8013dc2 <_strtol_l.constprop.0+0x16>
 8013e84:	b107      	cbz	r7, 8013e88 <_strtol_l.constprop.0+0xdc>
 8013e86:	4276      	negs	r6, r6
 8013e88:	2a00      	cmp	r2, #0
 8013e8a:	d0f9      	beq.n	8013e80 <_strtol_l.constprop.0+0xd4>
 8013e8c:	f1be 0f00 	cmp.w	lr, #0
 8013e90:	d000      	beq.n	8013e94 <_strtol_l.constprop.0+0xe8>
 8013e92:	1e69      	subs	r1, r5, #1
 8013e94:	6011      	str	r1, [r2, #0]
 8013e96:	e7f3      	b.n	8013e80 <_strtol_l.constprop.0+0xd4>
 8013e98:	2430      	movs	r4, #48	; 0x30
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d1b1      	bne.n	8013e02 <_strtol_l.constprop.0+0x56>
 8013e9e:	2308      	movs	r3, #8
 8013ea0:	e7af      	b.n	8013e02 <_strtol_l.constprop.0+0x56>
 8013ea2:	2c30      	cmp	r4, #48	; 0x30
 8013ea4:	d0a5      	beq.n	8013df2 <_strtol_l.constprop.0+0x46>
 8013ea6:	230a      	movs	r3, #10
 8013ea8:	e7ab      	b.n	8013e02 <_strtol_l.constprop.0+0x56>
 8013eaa:	bf00      	nop
 8013eac:	08015591 	.word	0x08015591

08013eb0 <_strtol_r>:
 8013eb0:	f7ff bf7c 	b.w	8013dac <_strtol_l.constprop.0>

08013eb4 <__ssputs_r>:
 8013eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013eb8:	688e      	ldr	r6, [r1, #8]
 8013eba:	461f      	mov	r7, r3
 8013ebc:	42be      	cmp	r6, r7
 8013ebe:	680b      	ldr	r3, [r1, #0]
 8013ec0:	4682      	mov	sl, r0
 8013ec2:	460c      	mov	r4, r1
 8013ec4:	4690      	mov	r8, r2
 8013ec6:	d82c      	bhi.n	8013f22 <__ssputs_r+0x6e>
 8013ec8:	898a      	ldrh	r2, [r1, #12]
 8013eca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ece:	d026      	beq.n	8013f1e <__ssputs_r+0x6a>
 8013ed0:	6965      	ldr	r5, [r4, #20]
 8013ed2:	6909      	ldr	r1, [r1, #16]
 8013ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ed8:	eba3 0901 	sub.w	r9, r3, r1
 8013edc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ee0:	1c7b      	adds	r3, r7, #1
 8013ee2:	444b      	add	r3, r9
 8013ee4:	106d      	asrs	r5, r5, #1
 8013ee6:	429d      	cmp	r5, r3
 8013ee8:	bf38      	it	cc
 8013eea:	461d      	movcc	r5, r3
 8013eec:	0553      	lsls	r3, r2, #21
 8013eee:	d527      	bpl.n	8013f40 <__ssputs_r+0x8c>
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	f7fe fc0f 	bl	8012714 <_malloc_r>
 8013ef6:	4606      	mov	r6, r0
 8013ef8:	b360      	cbz	r0, 8013f54 <__ssputs_r+0xa0>
 8013efa:	6921      	ldr	r1, [r4, #16]
 8013efc:	464a      	mov	r2, r9
 8013efe:	f7fd fd05 	bl	801190c <memcpy>
 8013f02:	89a3      	ldrh	r3, [r4, #12]
 8013f04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f0c:	81a3      	strh	r3, [r4, #12]
 8013f0e:	6126      	str	r6, [r4, #16]
 8013f10:	6165      	str	r5, [r4, #20]
 8013f12:	444e      	add	r6, r9
 8013f14:	eba5 0509 	sub.w	r5, r5, r9
 8013f18:	6026      	str	r6, [r4, #0]
 8013f1a:	60a5      	str	r5, [r4, #8]
 8013f1c:	463e      	mov	r6, r7
 8013f1e:	42be      	cmp	r6, r7
 8013f20:	d900      	bls.n	8013f24 <__ssputs_r+0x70>
 8013f22:	463e      	mov	r6, r7
 8013f24:	6820      	ldr	r0, [r4, #0]
 8013f26:	4632      	mov	r2, r6
 8013f28:	4641      	mov	r1, r8
 8013f2a:	f000 f9c9 	bl	80142c0 <memmove>
 8013f2e:	68a3      	ldr	r3, [r4, #8]
 8013f30:	1b9b      	subs	r3, r3, r6
 8013f32:	60a3      	str	r3, [r4, #8]
 8013f34:	6823      	ldr	r3, [r4, #0]
 8013f36:	4433      	add	r3, r6
 8013f38:	6023      	str	r3, [r4, #0]
 8013f3a:	2000      	movs	r0, #0
 8013f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f40:	462a      	mov	r2, r5
 8013f42:	f000 fd9e 	bl	8014a82 <_realloc_r>
 8013f46:	4606      	mov	r6, r0
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	d1e0      	bne.n	8013f0e <__ssputs_r+0x5a>
 8013f4c:	6921      	ldr	r1, [r4, #16]
 8013f4e:	4650      	mov	r0, sl
 8013f50:	f7fe fb6c 	bl	801262c <_free_r>
 8013f54:	230c      	movs	r3, #12
 8013f56:	f8ca 3000 	str.w	r3, [sl]
 8013f5a:	89a3      	ldrh	r3, [r4, #12]
 8013f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f60:	81a3      	strh	r3, [r4, #12]
 8013f62:	f04f 30ff 	mov.w	r0, #4294967295
 8013f66:	e7e9      	b.n	8013f3c <__ssputs_r+0x88>

08013f68 <_svfiprintf_r>:
 8013f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f6c:	4698      	mov	r8, r3
 8013f6e:	898b      	ldrh	r3, [r1, #12]
 8013f70:	061b      	lsls	r3, r3, #24
 8013f72:	b09d      	sub	sp, #116	; 0x74
 8013f74:	4607      	mov	r7, r0
 8013f76:	460d      	mov	r5, r1
 8013f78:	4614      	mov	r4, r2
 8013f7a:	d50e      	bpl.n	8013f9a <_svfiprintf_r+0x32>
 8013f7c:	690b      	ldr	r3, [r1, #16]
 8013f7e:	b963      	cbnz	r3, 8013f9a <_svfiprintf_r+0x32>
 8013f80:	2140      	movs	r1, #64	; 0x40
 8013f82:	f7fe fbc7 	bl	8012714 <_malloc_r>
 8013f86:	6028      	str	r0, [r5, #0]
 8013f88:	6128      	str	r0, [r5, #16]
 8013f8a:	b920      	cbnz	r0, 8013f96 <_svfiprintf_r+0x2e>
 8013f8c:	230c      	movs	r3, #12
 8013f8e:	603b      	str	r3, [r7, #0]
 8013f90:	f04f 30ff 	mov.w	r0, #4294967295
 8013f94:	e0d0      	b.n	8014138 <_svfiprintf_r+0x1d0>
 8013f96:	2340      	movs	r3, #64	; 0x40
 8013f98:	616b      	str	r3, [r5, #20]
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8013f9e:	2320      	movs	r3, #32
 8013fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013fa8:	2330      	movs	r3, #48	; 0x30
 8013faa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014150 <_svfiprintf_r+0x1e8>
 8013fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013fb2:	f04f 0901 	mov.w	r9, #1
 8013fb6:	4623      	mov	r3, r4
 8013fb8:	469a      	mov	sl, r3
 8013fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fbe:	b10a      	cbz	r2, 8013fc4 <_svfiprintf_r+0x5c>
 8013fc0:	2a25      	cmp	r2, #37	; 0x25
 8013fc2:	d1f9      	bne.n	8013fb8 <_svfiprintf_r+0x50>
 8013fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8013fc8:	d00b      	beq.n	8013fe2 <_svfiprintf_r+0x7a>
 8013fca:	465b      	mov	r3, fp
 8013fcc:	4622      	mov	r2, r4
 8013fce:	4629      	mov	r1, r5
 8013fd0:	4638      	mov	r0, r7
 8013fd2:	f7ff ff6f 	bl	8013eb4 <__ssputs_r>
 8013fd6:	3001      	adds	r0, #1
 8013fd8:	f000 80a9 	beq.w	801412e <_svfiprintf_r+0x1c6>
 8013fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013fde:	445a      	add	r2, fp
 8013fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8013fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	f000 80a1 	beq.w	801412e <_svfiprintf_r+0x1c6>
 8013fec:	2300      	movs	r3, #0
 8013fee:	f04f 32ff 	mov.w	r2, #4294967295
 8013ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ff6:	f10a 0a01 	add.w	sl, sl, #1
 8013ffa:	9304      	str	r3, [sp, #16]
 8013ffc:	9307      	str	r3, [sp, #28]
 8013ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014002:	931a      	str	r3, [sp, #104]	; 0x68
 8014004:	4654      	mov	r4, sl
 8014006:	2205      	movs	r2, #5
 8014008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801400c:	4850      	ldr	r0, [pc, #320]	; (8014150 <_svfiprintf_r+0x1e8>)
 801400e:	f7ec f8df 	bl	80001d0 <memchr>
 8014012:	9a04      	ldr	r2, [sp, #16]
 8014014:	b9d8      	cbnz	r0, 801404e <_svfiprintf_r+0xe6>
 8014016:	06d0      	lsls	r0, r2, #27
 8014018:	bf44      	itt	mi
 801401a:	2320      	movmi	r3, #32
 801401c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014020:	0711      	lsls	r1, r2, #28
 8014022:	bf44      	itt	mi
 8014024:	232b      	movmi	r3, #43	; 0x2b
 8014026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801402a:	f89a 3000 	ldrb.w	r3, [sl]
 801402e:	2b2a      	cmp	r3, #42	; 0x2a
 8014030:	d015      	beq.n	801405e <_svfiprintf_r+0xf6>
 8014032:	9a07      	ldr	r2, [sp, #28]
 8014034:	4654      	mov	r4, sl
 8014036:	2000      	movs	r0, #0
 8014038:	f04f 0c0a 	mov.w	ip, #10
 801403c:	4621      	mov	r1, r4
 801403e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014042:	3b30      	subs	r3, #48	; 0x30
 8014044:	2b09      	cmp	r3, #9
 8014046:	d94d      	bls.n	80140e4 <_svfiprintf_r+0x17c>
 8014048:	b1b0      	cbz	r0, 8014078 <_svfiprintf_r+0x110>
 801404a:	9207      	str	r2, [sp, #28]
 801404c:	e014      	b.n	8014078 <_svfiprintf_r+0x110>
 801404e:	eba0 0308 	sub.w	r3, r0, r8
 8014052:	fa09 f303 	lsl.w	r3, r9, r3
 8014056:	4313      	orrs	r3, r2
 8014058:	9304      	str	r3, [sp, #16]
 801405a:	46a2      	mov	sl, r4
 801405c:	e7d2      	b.n	8014004 <_svfiprintf_r+0x9c>
 801405e:	9b03      	ldr	r3, [sp, #12]
 8014060:	1d19      	adds	r1, r3, #4
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	9103      	str	r1, [sp, #12]
 8014066:	2b00      	cmp	r3, #0
 8014068:	bfbb      	ittet	lt
 801406a:	425b      	neglt	r3, r3
 801406c:	f042 0202 	orrlt.w	r2, r2, #2
 8014070:	9307      	strge	r3, [sp, #28]
 8014072:	9307      	strlt	r3, [sp, #28]
 8014074:	bfb8      	it	lt
 8014076:	9204      	strlt	r2, [sp, #16]
 8014078:	7823      	ldrb	r3, [r4, #0]
 801407a:	2b2e      	cmp	r3, #46	; 0x2e
 801407c:	d10c      	bne.n	8014098 <_svfiprintf_r+0x130>
 801407e:	7863      	ldrb	r3, [r4, #1]
 8014080:	2b2a      	cmp	r3, #42	; 0x2a
 8014082:	d134      	bne.n	80140ee <_svfiprintf_r+0x186>
 8014084:	9b03      	ldr	r3, [sp, #12]
 8014086:	1d1a      	adds	r2, r3, #4
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	9203      	str	r2, [sp, #12]
 801408c:	2b00      	cmp	r3, #0
 801408e:	bfb8      	it	lt
 8014090:	f04f 33ff 	movlt.w	r3, #4294967295
 8014094:	3402      	adds	r4, #2
 8014096:	9305      	str	r3, [sp, #20]
 8014098:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014160 <_svfiprintf_r+0x1f8>
 801409c:	7821      	ldrb	r1, [r4, #0]
 801409e:	2203      	movs	r2, #3
 80140a0:	4650      	mov	r0, sl
 80140a2:	f7ec f895 	bl	80001d0 <memchr>
 80140a6:	b138      	cbz	r0, 80140b8 <_svfiprintf_r+0x150>
 80140a8:	9b04      	ldr	r3, [sp, #16]
 80140aa:	eba0 000a 	sub.w	r0, r0, sl
 80140ae:	2240      	movs	r2, #64	; 0x40
 80140b0:	4082      	lsls	r2, r0
 80140b2:	4313      	orrs	r3, r2
 80140b4:	3401      	adds	r4, #1
 80140b6:	9304      	str	r3, [sp, #16]
 80140b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140bc:	4825      	ldr	r0, [pc, #148]	; (8014154 <_svfiprintf_r+0x1ec>)
 80140be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80140c2:	2206      	movs	r2, #6
 80140c4:	f7ec f884 	bl	80001d0 <memchr>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	d038      	beq.n	801413e <_svfiprintf_r+0x1d6>
 80140cc:	4b22      	ldr	r3, [pc, #136]	; (8014158 <_svfiprintf_r+0x1f0>)
 80140ce:	bb1b      	cbnz	r3, 8014118 <_svfiprintf_r+0x1b0>
 80140d0:	9b03      	ldr	r3, [sp, #12]
 80140d2:	3307      	adds	r3, #7
 80140d4:	f023 0307 	bic.w	r3, r3, #7
 80140d8:	3308      	adds	r3, #8
 80140da:	9303      	str	r3, [sp, #12]
 80140dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140de:	4433      	add	r3, r6
 80140e0:	9309      	str	r3, [sp, #36]	; 0x24
 80140e2:	e768      	b.n	8013fb6 <_svfiprintf_r+0x4e>
 80140e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80140e8:	460c      	mov	r4, r1
 80140ea:	2001      	movs	r0, #1
 80140ec:	e7a6      	b.n	801403c <_svfiprintf_r+0xd4>
 80140ee:	2300      	movs	r3, #0
 80140f0:	3401      	adds	r4, #1
 80140f2:	9305      	str	r3, [sp, #20]
 80140f4:	4619      	mov	r1, r3
 80140f6:	f04f 0c0a 	mov.w	ip, #10
 80140fa:	4620      	mov	r0, r4
 80140fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014100:	3a30      	subs	r2, #48	; 0x30
 8014102:	2a09      	cmp	r2, #9
 8014104:	d903      	bls.n	801410e <_svfiprintf_r+0x1a6>
 8014106:	2b00      	cmp	r3, #0
 8014108:	d0c6      	beq.n	8014098 <_svfiprintf_r+0x130>
 801410a:	9105      	str	r1, [sp, #20]
 801410c:	e7c4      	b.n	8014098 <_svfiprintf_r+0x130>
 801410e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014112:	4604      	mov	r4, r0
 8014114:	2301      	movs	r3, #1
 8014116:	e7f0      	b.n	80140fa <_svfiprintf_r+0x192>
 8014118:	ab03      	add	r3, sp, #12
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	462a      	mov	r2, r5
 801411e:	4b0f      	ldr	r3, [pc, #60]	; (801415c <_svfiprintf_r+0x1f4>)
 8014120:	a904      	add	r1, sp, #16
 8014122:	4638      	mov	r0, r7
 8014124:	f7fc fc56 	bl	80109d4 <_printf_float>
 8014128:	1c42      	adds	r2, r0, #1
 801412a:	4606      	mov	r6, r0
 801412c:	d1d6      	bne.n	80140dc <_svfiprintf_r+0x174>
 801412e:	89ab      	ldrh	r3, [r5, #12]
 8014130:	065b      	lsls	r3, r3, #25
 8014132:	f53f af2d 	bmi.w	8013f90 <_svfiprintf_r+0x28>
 8014136:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014138:	b01d      	add	sp, #116	; 0x74
 801413a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801413e:	ab03      	add	r3, sp, #12
 8014140:	9300      	str	r3, [sp, #0]
 8014142:	462a      	mov	r2, r5
 8014144:	4b05      	ldr	r3, [pc, #20]	; (801415c <_svfiprintf_r+0x1f4>)
 8014146:	a904      	add	r1, sp, #16
 8014148:	4638      	mov	r0, r7
 801414a:	f7fc fee7 	bl	8010f1c <_printf_i>
 801414e:	e7eb      	b.n	8014128 <_svfiprintf_r+0x1c0>
 8014150:	08015691 	.word	0x08015691
 8014154:	0801569b 	.word	0x0801569b
 8014158:	080109d5 	.word	0x080109d5
 801415c:	08013eb5 	.word	0x08013eb5
 8014160:	08015697 	.word	0x08015697

08014164 <__sflush_r>:
 8014164:	898a      	ldrh	r2, [r1, #12]
 8014166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801416a:	4605      	mov	r5, r0
 801416c:	0710      	lsls	r0, r2, #28
 801416e:	460c      	mov	r4, r1
 8014170:	d458      	bmi.n	8014224 <__sflush_r+0xc0>
 8014172:	684b      	ldr	r3, [r1, #4]
 8014174:	2b00      	cmp	r3, #0
 8014176:	dc05      	bgt.n	8014184 <__sflush_r+0x20>
 8014178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801417a:	2b00      	cmp	r3, #0
 801417c:	dc02      	bgt.n	8014184 <__sflush_r+0x20>
 801417e:	2000      	movs	r0, #0
 8014180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014186:	2e00      	cmp	r6, #0
 8014188:	d0f9      	beq.n	801417e <__sflush_r+0x1a>
 801418a:	2300      	movs	r3, #0
 801418c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014190:	682f      	ldr	r7, [r5, #0]
 8014192:	6a21      	ldr	r1, [r4, #32]
 8014194:	602b      	str	r3, [r5, #0]
 8014196:	d032      	beq.n	80141fe <__sflush_r+0x9a>
 8014198:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801419a:	89a3      	ldrh	r3, [r4, #12]
 801419c:	075a      	lsls	r2, r3, #29
 801419e:	d505      	bpl.n	80141ac <__sflush_r+0x48>
 80141a0:	6863      	ldr	r3, [r4, #4]
 80141a2:	1ac0      	subs	r0, r0, r3
 80141a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80141a6:	b10b      	cbz	r3, 80141ac <__sflush_r+0x48>
 80141a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80141aa:	1ac0      	subs	r0, r0, r3
 80141ac:	2300      	movs	r3, #0
 80141ae:	4602      	mov	r2, r0
 80141b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141b2:	6a21      	ldr	r1, [r4, #32]
 80141b4:	4628      	mov	r0, r5
 80141b6:	47b0      	blx	r6
 80141b8:	1c43      	adds	r3, r0, #1
 80141ba:	89a3      	ldrh	r3, [r4, #12]
 80141bc:	d106      	bne.n	80141cc <__sflush_r+0x68>
 80141be:	6829      	ldr	r1, [r5, #0]
 80141c0:	291d      	cmp	r1, #29
 80141c2:	d82b      	bhi.n	801421c <__sflush_r+0xb8>
 80141c4:	4a29      	ldr	r2, [pc, #164]	; (801426c <__sflush_r+0x108>)
 80141c6:	410a      	asrs	r2, r1
 80141c8:	07d6      	lsls	r6, r2, #31
 80141ca:	d427      	bmi.n	801421c <__sflush_r+0xb8>
 80141cc:	2200      	movs	r2, #0
 80141ce:	6062      	str	r2, [r4, #4]
 80141d0:	04d9      	lsls	r1, r3, #19
 80141d2:	6922      	ldr	r2, [r4, #16]
 80141d4:	6022      	str	r2, [r4, #0]
 80141d6:	d504      	bpl.n	80141e2 <__sflush_r+0x7e>
 80141d8:	1c42      	adds	r2, r0, #1
 80141da:	d101      	bne.n	80141e0 <__sflush_r+0x7c>
 80141dc:	682b      	ldr	r3, [r5, #0]
 80141de:	b903      	cbnz	r3, 80141e2 <__sflush_r+0x7e>
 80141e0:	6560      	str	r0, [r4, #84]	; 0x54
 80141e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141e4:	602f      	str	r7, [r5, #0]
 80141e6:	2900      	cmp	r1, #0
 80141e8:	d0c9      	beq.n	801417e <__sflush_r+0x1a>
 80141ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141ee:	4299      	cmp	r1, r3
 80141f0:	d002      	beq.n	80141f8 <__sflush_r+0x94>
 80141f2:	4628      	mov	r0, r5
 80141f4:	f7fe fa1a 	bl	801262c <_free_r>
 80141f8:	2000      	movs	r0, #0
 80141fa:	6360      	str	r0, [r4, #52]	; 0x34
 80141fc:	e7c0      	b.n	8014180 <__sflush_r+0x1c>
 80141fe:	2301      	movs	r3, #1
 8014200:	4628      	mov	r0, r5
 8014202:	47b0      	blx	r6
 8014204:	1c41      	adds	r1, r0, #1
 8014206:	d1c8      	bne.n	801419a <__sflush_r+0x36>
 8014208:	682b      	ldr	r3, [r5, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d0c5      	beq.n	801419a <__sflush_r+0x36>
 801420e:	2b1d      	cmp	r3, #29
 8014210:	d001      	beq.n	8014216 <__sflush_r+0xb2>
 8014212:	2b16      	cmp	r3, #22
 8014214:	d101      	bne.n	801421a <__sflush_r+0xb6>
 8014216:	602f      	str	r7, [r5, #0]
 8014218:	e7b1      	b.n	801417e <__sflush_r+0x1a>
 801421a:	89a3      	ldrh	r3, [r4, #12]
 801421c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014220:	81a3      	strh	r3, [r4, #12]
 8014222:	e7ad      	b.n	8014180 <__sflush_r+0x1c>
 8014224:	690f      	ldr	r7, [r1, #16]
 8014226:	2f00      	cmp	r7, #0
 8014228:	d0a9      	beq.n	801417e <__sflush_r+0x1a>
 801422a:	0793      	lsls	r3, r2, #30
 801422c:	680e      	ldr	r6, [r1, #0]
 801422e:	bf08      	it	eq
 8014230:	694b      	ldreq	r3, [r1, #20]
 8014232:	600f      	str	r7, [r1, #0]
 8014234:	bf18      	it	ne
 8014236:	2300      	movne	r3, #0
 8014238:	eba6 0807 	sub.w	r8, r6, r7
 801423c:	608b      	str	r3, [r1, #8]
 801423e:	f1b8 0f00 	cmp.w	r8, #0
 8014242:	dd9c      	ble.n	801417e <__sflush_r+0x1a>
 8014244:	6a21      	ldr	r1, [r4, #32]
 8014246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014248:	4643      	mov	r3, r8
 801424a:	463a      	mov	r2, r7
 801424c:	4628      	mov	r0, r5
 801424e:	47b0      	blx	r6
 8014250:	2800      	cmp	r0, #0
 8014252:	dc06      	bgt.n	8014262 <__sflush_r+0xfe>
 8014254:	89a3      	ldrh	r3, [r4, #12]
 8014256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801425a:	81a3      	strh	r3, [r4, #12]
 801425c:	f04f 30ff 	mov.w	r0, #4294967295
 8014260:	e78e      	b.n	8014180 <__sflush_r+0x1c>
 8014262:	4407      	add	r7, r0
 8014264:	eba8 0800 	sub.w	r8, r8, r0
 8014268:	e7e9      	b.n	801423e <__sflush_r+0xda>
 801426a:	bf00      	nop
 801426c:	dfbffffe 	.word	0xdfbffffe

08014270 <_fflush_r>:
 8014270:	b538      	push	{r3, r4, r5, lr}
 8014272:	690b      	ldr	r3, [r1, #16]
 8014274:	4605      	mov	r5, r0
 8014276:	460c      	mov	r4, r1
 8014278:	b913      	cbnz	r3, 8014280 <_fflush_r+0x10>
 801427a:	2500      	movs	r5, #0
 801427c:	4628      	mov	r0, r5
 801427e:	bd38      	pop	{r3, r4, r5, pc}
 8014280:	b118      	cbz	r0, 801428a <_fflush_r+0x1a>
 8014282:	6a03      	ldr	r3, [r0, #32]
 8014284:	b90b      	cbnz	r3, 801428a <_fflush_r+0x1a>
 8014286:	f7fd f9f5 	bl	8011674 <__sinit>
 801428a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d0f3      	beq.n	801427a <_fflush_r+0xa>
 8014292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014294:	07d0      	lsls	r0, r2, #31
 8014296:	d404      	bmi.n	80142a2 <_fflush_r+0x32>
 8014298:	0599      	lsls	r1, r3, #22
 801429a:	d402      	bmi.n	80142a2 <_fflush_r+0x32>
 801429c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801429e:	f7fd fb33 	bl	8011908 <__retarget_lock_acquire_recursive>
 80142a2:	4628      	mov	r0, r5
 80142a4:	4621      	mov	r1, r4
 80142a6:	f7ff ff5d 	bl	8014164 <__sflush_r>
 80142aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142ac:	07da      	lsls	r2, r3, #31
 80142ae:	4605      	mov	r5, r0
 80142b0:	d4e4      	bmi.n	801427c <_fflush_r+0xc>
 80142b2:	89a3      	ldrh	r3, [r4, #12]
 80142b4:	059b      	lsls	r3, r3, #22
 80142b6:	d4e1      	bmi.n	801427c <_fflush_r+0xc>
 80142b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142ba:	f7fd fb26 	bl	801190a <__retarget_lock_release_recursive>
 80142be:	e7dd      	b.n	801427c <_fflush_r+0xc>

080142c0 <memmove>:
 80142c0:	4288      	cmp	r0, r1
 80142c2:	b510      	push	{r4, lr}
 80142c4:	eb01 0402 	add.w	r4, r1, r2
 80142c8:	d902      	bls.n	80142d0 <memmove+0x10>
 80142ca:	4284      	cmp	r4, r0
 80142cc:	4623      	mov	r3, r4
 80142ce:	d807      	bhi.n	80142e0 <memmove+0x20>
 80142d0:	1e43      	subs	r3, r0, #1
 80142d2:	42a1      	cmp	r1, r4
 80142d4:	d008      	beq.n	80142e8 <memmove+0x28>
 80142d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80142da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80142de:	e7f8      	b.n	80142d2 <memmove+0x12>
 80142e0:	4402      	add	r2, r0
 80142e2:	4601      	mov	r1, r0
 80142e4:	428a      	cmp	r2, r1
 80142e6:	d100      	bne.n	80142ea <memmove+0x2a>
 80142e8:	bd10      	pop	{r4, pc}
 80142ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80142ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80142f2:	e7f7      	b.n	80142e4 <memmove+0x24>

080142f4 <strncmp>:
 80142f4:	b510      	push	{r4, lr}
 80142f6:	b16a      	cbz	r2, 8014314 <strncmp+0x20>
 80142f8:	3901      	subs	r1, #1
 80142fa:	1884      	adds	r4, r0, r2
 80142fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014300:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014304:	429a      	cmp	r2, r3
 8014306:	d103      	bne.n	8014310 <strncmp+0x1c>
 8014308:	42a0      	cmp	r0, r4
 801430a:	d001      	beq.n	8014310 <strncmp+0x1c>
 801430c:	2a00      	cmp	r2, #0
 801430e:	d1f5      	bne.n	80142fc <strncmp+0x8>
 8014310:	1ad0      	subs	r0, r2, r3
 8014312:	bd10      	pop	{r4, pc}
 8014314:	4610      	mov	r0, r2
 8014316:	e7fc      	b.n	8014312 <strncmp+0x1e>

08014318 <_sbrk_r>:
 8014318:	b538      	push	{r3, r4, r5, lr}
 801431a:	4d06      	ldr	r5, [pc, #24]	; (8014334 <_sbrk_r+0x1c>)
 801431c:	2300      	movs	r3, #0
 801431e:	4604      	mov	r4, r0
 8014320:	4608      	mov	r0, r1
 8014322:	602b      	str	r3, [r5, #0]
 8014324:	f7ed ff52 	bl	80021cc <_sbrk>
 8014328:	1c43      	adds	r3, r0, #1
 801432a:	d102      	bne.n	8014332 <_sbrk_r+0x1a>
 801432c:	682b      	ldr	r3, [r5, #0]
 801432e:	b103      	cbz	r3, 8014332 <_sbrk_r+0x1a>
 8014330:	6023      	str	r3, [r4, #0]
 8014332:	bd38      	pop	{r3, r4, r5, pc}
 8014334:	2000c4ec 	.word	0x2000c4ec

08014338 <nan>:
 8014338:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014340 <nan+0x8>
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop
 8014340:	00000000 	.word	0x00000000
 8014344:	7ff80000 	.word	0x7ff80000

08014348 <__assert_func>:
 8014348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801434a:	4614      	mov	r4, r2
 801434c:	461a      	mov	r2, r3
 801434e:	4b09      	ldr	r3, [pc, #36]	; (8014374 <__assert_func+0x2c>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	4605      	mov	r5, r0
 8014354:	68d8      	ldr	r0, [r3, #12]
 8014356:	b14c      	cbz	r4, 801436c <__assert_func+0x24>
 8014358:	4b07      	ldr	r3, [pc, #28]	; (8014378 <__assert_func+0x30>)
 801435a:	9100      	str	r1, [sp, #0]
 801435c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014360:	4906      	ldr	r1, [pc, #24]	; (801437c <__assert_func+0x34>)
 8014362:	462b      	mov	r3, r5
 8014364:	f000 fbca 	bl	8014afc <fiprintf>
 8014368:	f000 fbda 	bl	8014b20 <abort>
 801436c:	4b04      	ldr	r3, [pc, #16]	; (8014380 <__assert_func+0x38>)
 801436e:	461c      	mov	r4, r3
 8014370:	e7f3      	b.n	801435a <__assert_func+0x12>
 8014372:	bf00      	nop
 8014374:	20000164 	.word	0x20000164
 8014378:	080156aa 	.word	0x080156aa
 801437c:	080156b7 	.word	0x080156b7
 8014380:	080156e5 	.word	0x080156e5

08014384 <_calloc_r>:
 8014384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014386:	fba1 2402 	umull	r2, r4, r1, r2
 801438a:	b94c      	cbnz	r4, 80143a0 <_calloc_r+0x1c>
 801438c:	4611      	mov	r1, r2
 801438e:	9201      	str	r2, [sp, #4]
 8014390:	f7fe f9c0 	bl	8012714 <_malloc_r>
 8014394:	9a01      	ldr	r2, [sp, #4]
 8014396:	4605      	mov	r5, r0
 8014398:	b930      	cbnz	r0, 80143a8 <_calloc_r+0x24>
 801439a:	4628      	mov	r0, r5
 801439c:	b003      	add	sp, #12
 801439e:	bd30      	pop	{r4, r5, pc}
 80143a0:	220c      	movs	r2, #12
 80143a2:	6002      	str	r2, [r0, #0]
 80143a4:	2500      	movs	r5, #0
 80143a6:	e7f8      	b.n	801439a <_calloc_r+0x16>
 80143a8:	4621      	mov	r1, r4
 80143aa:	f7fd fa30 	bl	801180e <memset>
 80143ae:	e7f4      	b.n	801439a <_calloc_r+0x16>

080143b0 <rshift>:
 80143b0:	6903      	ldr	r3, [r0, #16]
 80143b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80143b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80143be:	f100 0414 	add.w	r4, r0, #20
 80143c2:	dd45      	ble.n	8014450 <rshift+0xa0>
 80143c4:	f011 011f 	ands.w	r1, r1, #31
 80143c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80143cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80143d0:	d10c      	bne.n	80143ec <rshift+0x3c>
 80143d2:	f100 0710 	add.w	r7, r0, #16
 80143d6:	4629      	mov	r1, r5
 80143d8:	42b1      	cmp	r1, r6
 80143da:	d334      	bcc.n	8014446 <rshift+0x96>
 80143dc:	1a9b      	subs	r3, r3, r2
 80143de:	009b      	lsls	r3, r3, #2
 80143e0:	1eea      	subs	r2, r5, #3
 80143e2:	4296      	cmp	r6, r2
 80143e4:	bf38      	it	cc
 80143e6:	2300      	movcc	r3, #0
 80143e8:	4423      	add	r3, r4
 80143ea:	e015      	b.n	8014418 <rshift+0x68>
 80143ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80143f0:	f1c1 0820 	rsb	r8, r1, #32
 80143f4:	40cf      	lsrs	r7, r1
 80143f6:	f105 0e04 	add.w	lr, r5, #4
 80143fa:	46a1      	mov	r9, r4
 80143fc:	4576      	cmp	r6, lr
 80143fe:	46f4      	mov	ip, lr
 8014400:	d815      	bhi.n	801442e <rshift+0x7e>
 8014402:	1a9a      	subs	r2, r3, r2
 8014404:	0092      	lsls	r2, r2, #2
 8014406:	3a04      	subs	r2, #4
 8014408:	3501      	adds	r5, #1
 801440a:	42ae      	cmp	r6, r5
 801440c:	bf38      	it	cc
 801440e:	2200      	movcc	r2, #0
 8014410:	18a3      	adds	r3, r4, r2
 8014412:	50a7      	str	r7, [r4, r2]
 8014414:	b107      	cbz	r7, 8014418 <rshift+0x68>
 8014416:	3304      	adds	r3, #4
 8014418:	1b1a      	subs	r2, r3, r4
 801441a:	42a3      	cmp	r3, r4
 801441c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014420:	bf08      	it	eq
 8014422:	2300      	moveq	r3, #0
 8014424:	6102      	str	r2, [r0, #16]
 8014426:	bf08      	it	eq
 8014428:	6143      	streq	r3, [r0, #20]
 801442a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801442e:	f8dc c000 	ldr.w	ip, [ip]
 8014432:	fa0c fc08 	lsl.w	ip, ip, r8
 8014436:	ea4c 0707 	orr.w	r7, ip, r7
 801443a:	f849 7b04 	str.w	r7, [r9], #4
 801443e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014442:	40cf      	lsrs	r7, r1
 8014444:	e7da      	b.n	80143fc <rshift+0x4c>
 8014446:	f851 cb04 	ldr.w	ip, [r1], #4
 801444a:	f847 cf04 	str.w	ip, [r7, #4]!
 801444e:	e7c3      	b.n	80143d8 <rshift+0x28>
 8014450:	4623      	mov	r3, r4
 8014452:	e7e1      	b.n	8014418 <rshift+0x68>

08014454 <__hexdig_fun>:
 8014454:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014458:	2b09      	cmp	r3, #9
 801445a:	d802      	bhi.n	8014462 <__hexdig_fun+0xe>
 801445c:	3820      	subs	r0, #32
 801445e:	b2c0      	uxtb	r0, r0
 8014460:	4770      	bx	lr
 8014462:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014466:	2b05      	cmp	r3, #5
 8014468:	d801      	bhi.n	801446e <__hexdig_fun+0x1a>
 801446a:	3847      	subs	r0, #71	; 0x47
 801446c:	e7f7      	b.n	801445e <__hexdig_fun+0xa>
 801446e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014472:	2b05      	cmp	r3, #5
 8014474:	d801      	bhi.n	801447a <__hexdig_fun+0x26>
 8014476:	3827      	subs	r0, #39	; 0x27
 8014478:	e7f1      	b.n	801445e <__hexdig_fun+0xa>
 801447a:	2000      	movs	r0, #0
 801447c:	4770      	bx	lr
	...

08014480 <__gethex>:
 8014480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014484:	4617      	mov	r7, r2
 8014486:	680a      	ldr	r2, [r1, #0]
 8014488:	b085      	sub	sp, #20
 801448a:	f102 0b02 	add.w	fp, r2, #2
 801448e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014492:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014496:	4681      	mov	r9, r0
 8014498:	468a      	mov	sl, r1
 801449a:	9302      	str	r3, [sp, #8]
 801449c:	32fe      	adds	r2, #254	; 0xfe
 801449e:	eb02 030b 	add.w	r3, r2, fp
 80144a2:	46d8      	mov	r8, fp
 80144a4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80144a8:	9301      	str	r3, [sp, #4]
 80144aa:	2830      	cmp	r0, #48	; 0x30
 80144ac:	d0f7      	beq.n	801449e <__gethex+0x1e>
 80144ae:	f7ff ffd1 	bl	8014454 <__hexdig_fun>
 80144b2:	4604      	mov	r4, r0
 80144b4:	2800      	cmp	r0, #0
 80144b6:	d138      	bne.n	801452a <__gethex+0xaa>
 80144b8:	49a7      	ldr	r1, [pc, #668]	; (8014758 <__gethex+0x2d8>)
 80144ba:	2201      	movs	r2, #1
 80144bc:	4640      	mov	r0, r8
 80144be:	f7ff ff19 	bl	80142f4 <strncmp>
 80144c2:	4606      	mov	r6, r0
 80144c4:	2800      	cmp	r0, #0
 80144c6:	d169      	bne.n	801459c <__gethex+0x11c>
 80144c8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80144cc:	465d      	mov	r5, fp
 80144ce:	f7ff ffc1 	bl	8014454 <__hexdig_fun>
 80144d2:	2800      	cmp	r0, #0
 80144d4:	d064      	beq.n	80145a0 <__gethex+0x120>
 80144d6:	465a      	mov	r2, fp
 80144d8:	7810      	ldrb	r0, [r2, #0]
 80144da:	2830      	cmp	r0, #48	; 0x30
 80144dc:	4690      	mov	r8, r2
 80144de:	f102 0201 	add.w	r2, r2, #1
 80144e2:	d0f9      	beq.n	80144d8 <__gethex+0x58>
 80144e4:	f7ff ffb6 	bl	8014454 <__hexdig_fun>
 80144e8:	2301      	movs	r3, #1
 80144ea:	fab0 f480 	clz	r4, r0
 80144ee:	0964      	lsrs	r4, r4, #5
 80144f0:	465e      	mov	r6, fp
 80144f2:	9301      	str	r3, [sp, #4]
 80144f4:	4642      	mov	r2, r8
 80144f6:	4615      	mov	r5, r2
 80144f8:	3201      	adds	r2, #1
 80144fa:	7828      	ldrb	r0, [r5, #0]
 80144fc:	f7ff ffaa 	bl	8014454 <__hexdig_fun>
 8014500:	2800      	cmp	r0, #0
 8014502:	d1f8      	bne.n	80144f6 <__gethex+0x76>
 8014504:	4994      	ldr	r1, [pc, #592]	; (8014758 <__gethex+0x2d8>)
 8014506:	2201      	movs	r2, #1
 8014508:	4628      	mov	r0, r5
 801450a:	f7ff fef3 	bl	80142f4 <strncmp>
 801450e:	b978      	cbnz	r0, 8014530 <__gethex+0xb0>
 8014510:	b946      	cbnz	r6, 8014524 <__gethex+0xa4>
 8014512:	1c6e      	adds	r6, r5, #1
 8014514:	4632      	mov	r2, r6
 8014516:	4615      	mov	r5, r2
 8014518:	3201      	adds	r2, #1
 801451a:	7828      	ldrb	r0, [r5, #0]
 801451c:	f7ff ff9a 	bl	8014454 <__hexdig_fun>
 8014520:	2800      	cmp	r0, #0
 8014522:	d1f8      	bne.n	8014516 <__gethex+0x96>
 8014524:	1b73      	subs	r3, r6, r5
 8014526:	009e      	lsls	r6, r3, #2
 8014528:	e004      	b.n	8014534 <__gethex+0xb4>
 801452a:	2400      	movs	r4, #0
 801452c:	4626      	mov	r6, r4
 801452e:	e7e1      	b.n	80144f4 <__gethex+0x74>
 8014530:	2e00      	cmp	r6, #0
 8014532:	d1f7      	bne.n	8014524 <__gethex+0xa4>
 8014534:	782b      	ldrb	r3, [r5, #0]
 8014536:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801453a:	2b50      	cmp	r3, #80	; 0x50
 801453c:	d13d      	bne.n	80145ba <__gethex+0x13a>
 801453e:	786b      	ldrb	r3, [r5, #1]
 8014540:	2b2b      	cmp	r3, #43	; 0x2b
 8014542:	d02f      	beq.n	80145a4 <__gethex+0x124>
 8014544:	2b2d      	cmp	r3, #45	; 0x2d
 8014546:	d031      	beq.n	80145ac <__gethex+0x12c>
 8014548:	1c69      	adds	r1, r5, #1
 801454a:	f04f 0b00 	mov.w	fp, #0
 801454e:	7808      	ldrb	r0, [r1, #0]
 8014550:	f7ff ff80 	bl	8014454 <__hexdig_fun>
 8014554:	1e42      	subs	r2, r0, #1
 8014556:	b2d2      	uxtb	r2, r2
 8014558:	2a18      	cmp	r2, #24
 801455a:	d82e      	bhi.n	80145ba <__gethex+0x13a>
 801455c:	f1a0 0210 	sub.w	r2, r0, #16
 8014560:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014564:	f7ff ff76 	bl	8014454 <__hexdig_fun>
 8014568:	f100 3cff 	add.w	ip, r0, #4294967295
 801456c:	fa5f fc8c 	uxtb.w	ip, ip
 8014570:	f1bc 0f18 	cmp.w	ip, #24
 8014574:	d91d      	bls.n	80145b2 <__gethex+0x132>
 8014576:	f1bb 0f00 	cmp.w	fp, #0
 801457a:	d000      	beq.n	801457e <__gethex+0xfe>
 801457c:	4252      	negs	r2, r2
 801457e:	4416      	add	r6, r2
 8014580:	f8ca 1000 	str.w	r1, [sl]
 8014584:	b1dc      	cbz	r4, 80145be <__gethex+0x13e>
 8014586:	9b01      	ldr	r3, [sp, #4]
 8014588:	2b00      	cmp	r3, #0
 801458a:	bf14      	ite	ne
 801458c:	f04f 0800 	movne.w	r8, #0
 8014590:	f04f 0806 	moveq.w	r8, #6
 8014594:	4640      	mov	r0, r8
 8014596:	b005      	add	sp, #20
 8014598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801459c:	4645      	mov	r5, r8
 801459e:	4626      	mov	r6, r4
 80145a0:	2401      	movs	r4, #1
 80145a2:	e7c7      	b.n	8014534 <__gethex+0xb4>
 80145a4:	f04f 0b00 	mov.w	fp, #0
 80145a8:	1ca9      	adds	r1, r5, #2
 80145aa:	e7d0      	b.n	801454e <__gethex+0xce>
 80145ac:	f04f 0b01 	mov.w	fp, #1
 80145b0:	e7fa      	b.n	80145a8 <__gethex+0x128>
 80145b2:	230a      	movs	r3, #10
 80145b4:	fb03 0002 	mla	r0, r3, r2, r0
 80145b8:	e7d0      	b.n	801455c <__gethex+0xdc>
 80145ba:	4629      	mov	r1, r5
 80145bc:	e7e0      	b.n	8014580 <__gethex+0x100>
 80145be:	eba5 0308 	sub.w	r3, r5, r8
 80145c2:	3b01      	subs	r3, #1
 80145c4:	4621      	mov	r1, r4
 80145c6:	2b07      	cmp	r3, #7
 80145c8:	dc0a      	bgt.n	80145e0 <__gethex+0x160>
 80145ca:	4648      	mov	r0, r9
 80145cc:	f7fe f92e 	bl	801282c <_Balloc>
 80145d0:	4604      	mov	r4, r0
 80145d2:	b940      	cbnz	r0, 80145e6 <__gethex+0x166>
 80145d4:	4b61      	ldr	r3, [pc, #388]	; (801475c <__gethex+0x2dc>)
 80145d6:	4602      	mov	r2, r0
 80145d8:	21e4      	movs	r1, #228	; 0xe4
 80145da:	4861      	ldr	r0, [pc, #388]	; (8014760 <__gethex+0x2e0>)
 80145dc:	f7ff feb4 	bl	8014348 <__assert_func>
 80145e0:	3101      	adds	r1, #1
 80145e2:	105b      	asrs	r3, r3, #1
 80145e4:	e7ef      	b.n	80145c6 <__gethex+0x146>
 80145e6:	f100 0a14 	add.w	sl, r0, #20
 80145ea:	2300      	movs	r3, #0
 80145ec:	495a      	ldr	r1, [pc, #360]	; (8014758 <__gethex+0x2d8>)
 80145ee:	f8cd a004 	str.w	sl, [sp, #4]
 80145f2:	469b      	mov	fp, r3
 80145f4:	45a8      	cmp	r8, r5
 80145f6:	d342      	bcc.n	801467e <__gethex+0x1fe>
 80145f8:	9801      	ldr	r0, [sp, #4]
 80145fa:	f840 bb04 	str.w	fp, [r0], #4
 80145fe:	eba0 000a 	sub.w	r0, r0, sl
 8014602:	1080      	asrs	r0, r0, #2
 8014604:	6120      	str	r0, [r4, #16]
 8014606:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801460a:	4658      	mov	r0, fp
 801460c:	f7fe fa00 	bl	8012a10 <__hi0bits>
 8014610:	683d      	ldr	r5, [r7, #0]
 8014612:	eba8 0000 	sub.w	r0, r8, r0
 8014616:	42a8      	cmp	r0, r5
 8014618:	dd59      	ble.n	80146ce <__gethex+0x24e>
 801461a:	eba0 0805 	sub.w	r8, r0, r5
 801461e:	4641      	mov	r1, r8
 8014620:	4620      	mov	r0, r4
 8014622:	f7fe fd8f 	bl	8013144 <__any_on>
 8014626:	4683      	mov	fp, r0
 8014628:	b1b8      	cbz	r0, 801465a <__gethex+0x1da>
 801462a:	f108 33ff 	add.w	r3, r8, #4294967295
 801462e:	1159      	asrs	r1, r3, #5
 8014630:	f003 021f 	and.w	r2, r3, #31
 8014634:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014638:	f04f 0b01 	mov.w	fp, #1
 801463c:	fa0b f202 	lsl.w	r2, fp, r2
 8014640:	420a      	tst	r2, r1
 8014642:	d00a      	beq.n	801465a <__gethex+0x1da>
 8014644:	455b      	cmp	r3, fp
 8014646:	dd06      	ble.n	8014656 <__gethex+0x1d6>
 8014648:	f1a8 0102 	sub.w	r1, r8, #2
 801464c:	4620      	mov	r0, r4
 801464e:	f7fe fd79 	bl	8013144 <__any_on>
 8014652:	2800      	cmp	r0, #0
 8014654:	d138      	bne.n	80146c8 <__gethex+0x248>
 8014656:	f04f 0b02 	mov.w	fp, #2
 801465a:	4641      	mov	r1, r8
 801465c:	4620      	mov	r0, r4
 801465e:	f7ff fea7 	bl	80143b0 <rshift>
 8014662:	4446      	add	r6, r8
 8014664:	68bb      	ldr	r3, [r7, #8]
 8014666:	42b3      	cmp	r3, r6
 8014668:	da41      	bge.n	80146ee <__gethex+0x26e>
 801466a:	4621      	mov	r1, r4
 801466c:	4648      	mov	r0, r9
 801466e:	f7fe f91d 	bl	80128ac <_Bfree>
 8014672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014674:	2300      	movs	r3, #0
 8014676:	6013      	str	r3, [r2, #0]
 8014678:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801467c:	e78a      	b.n	8014594 <__gethex+0x114>
 801467e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014682:	2a2e      	cmp	r2, #46	; 0x2e
 8014684:	d014      	beq.n	80146b0 <__gethex+0x230>
 8014686:	2b20      	cmp	r3, #32
 8014688:	d106      	bne.n	8014698 <__gethex+0x218>
 801468a:	9b01      	ldr	r3, [sp, #4]
 801468c:	f843 bb04 	str.w	fp, [r3], #4
 8014690:	f04f 0b00 	mov.w	fp, #0
 8014694:	9301      	str	r3, [sp, #4]
 8014696:	465b      	mov	r3, fp
 8014698:	7828      	ldrb	r0, [r5, #0]
 801469a:	9303      	str	r3, [sp, #12]
 801469c:	f7ff feda 	bl	8014454 <__hexdig_fun>
 80146a0:	9b03      	ldr	r3, [sp, #12]
 80146a2:	f000 000f 	and.w	r0, r0, #15
 80146a6:	4098      	lsls	r0, r3
 80146a8:	ea4b 0b00 	orr.w	fp, fp, r0
 80146ac:	3304      	adds	r3, #4
 80146ae:	e7a1      	b.n	80145f4 <__gethex+0x174>
 80146b0:	45a8      	cmp	r8, r5
 80146b2:	d8e8      	bhi.n	8014686 <__gethex+0x206>
 80146b4:	2201      	movs	r2, #1
 80146b6:	4628      	mov	r0, r5
 80146b8:	9303      	str	r3, [sp, #12]
 80146ba:	f7ff fe1b 	bl	80142f4 <strncmp>
 80146be:	4926      	ldr	r1, [pc, #152]	; (8014758 <__gethex+0x2d8>)
 80146c0:	9b03      	ldr	r3, [sp, #12]
 80146c2:	2800      	cmp	r0, #0
 80146c4:	d1df      	bne.n	8014686 <__gethex+0x206>
 80146c6:	e795      	b.n	80145f4 <__gethex+0x174>
 80146c8:	f04f 0b03 	mov.w	fp, #3
 80146cc:	e7c5      	b.n	801465a <__gethex+0x1da>
 80146ce:	da0b      	bge.n	80146e8 <__gethex+0x268>
 80146d0:	eba5 0800 	sub.w	r8, r5, r0
 80146d4:	4621      	mov	r1, r4
 80146d6:	4642      	mov	r2, r8
 80146d8:	4648      	mov	r0, r9
 80146da:	f7fe fb01 	bl	8012ce0 <__lshift>
 80146de:	eba6 0608 	sub.w	r6, r6, r8
 80146e2:	4604      	mov	r4, r0
 80146e4:	f100 0a14 	add.w	sl, r0, #20
 80146e8:	f04f 0b00 	mov.w	fp, #0
 80146ec:	e7ba      	b.n	8014664 <__gethex+0x1e4>
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	42b3      	cmp	r3, r6
 80146f2:	dd73      	ble.n	80147dc <__gethex+0x35c>
 80146f4:	1b9e      	subs	r6, r3, r6
 80146f6:	42b5      	cmp	r5, r6
 80146f8:	dc34      	bgt.n	8014764 <__gethex+0x2e4>
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2b02      	cmp	r3, #2
 80146fe:	d023      	beq.n	8014748 <__gethex+0x2c8>
 8014700:	2b03      	cmp	r3, #3
 8014702:	d025      	beq.n	8014750 <__gethex+0x2d0>
 8014704:	2b01      	cmp	r3, #1
 8014706:	d115      	bne.n	8014734 <__gethex+0x2b4>
 8014708:	42b5      	cmp	r5, r6
 801470a:	d113      	bne.n	8014734 <__gethex+0x2b4>
 801470c:	2d01      	cmp	r5, #1
 801470e:	d10b      	bne.n	8014728 <__gethex+0x2a8>
 8014710:	9a02      	ldr	r2, [sp, #8]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6013      	str	r3, [r2, #0]
 8014716:	2301      	movs	r3, #1
 8014718:	6123      	str	r3, [r4, #16]
 801471a:	f8ca 3000 	str.w	r3, [sl]
 801471e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014720:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014724:	601c      	str	r4, [r3, #0]
 8014726:	e735      	b.n	8014594 <__gethex+0x114>
 8014728:	1e69      	subs	r1, r5, #1
 801472a:	4620      	mov	r0, r4
 801472c:	f7fe fd0a 	bl	8013144 <__any_on>
 8014730:	2800      	cmp	r0, #0
 8014732:	d1ed      	bne.n	8014710 <__gethex+0x290>
 8014734:	4621      	mov	r1, r4
 8014736:	4648      	mov	r0, r9
 8014738:	f7fe f8b8 	bl	80128ac <_Bfree>
 801473c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801473e:	2300      	movs	r3, #0
 8014740:	6013      	str	r3, [r2, #0]
 8014742:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014746:	e725      	b.n	8014594 <__gethex+0x114>
 8014748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801474a:	2b00      	cmp	r3, #0
 801474c:	d1f2      	bne.n	8014734 <__gethex+0x2b4>
 801474e:	e7df      	b.n	8014710 <__gethex+0x290>
 8014750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014752:	2b00      	cmp	r3, #0
 8014754:	d1dc      	bne.n	8014710 <__gethex+0x290>
 8014756:	e7ed      	b.n	8014734 <__gethex+0x2b4>
 8014758:	0801553c 	.word	0x0801553c
 801475c:	080153cf 	.word	0x080153cf
 8014760:	080156e6 	.word	0x080156e6
 8014764:	f106 38ff 	add.w	r8, r6, #4294967295
 8014768:	f1bb 0f00 	cmp.w	fp, #0
 801476c:	d133      	bne.n	80147d6 <__gethex+0x356>
 801476e:	f1b8 0f00 	cmp.w	r8, #0
 8014772:	d004      	beq.n	801477e <__gethex+0x2fe>
 8014774:	4641      	mov	r1, r8
 8014776:	4620      	mov	r0, r4
 8014778:	f7fe fce4 	bl	8013144 <__any_on>
 801477c:	4683      	mov	fp, r0
 801477e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014782:	2301      	movs	r3, #1
 8014784:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014788:	f008 081f 	and.w	r8, r8, #31
 801478c:	fa03 f308 	lsl.w	r3, r3, r8
 8014790:	4213      	tst	r3, r2
 8014792:	4631      	mov	r1, r6
 8014794:	4620      	mov	r0, r4
 8014796:	bf18      	it	ne
 8014798:	f04b 0b02 	orrne.w	fp, fp, #2
 801479c:	1bad      	subs	r5, r5, r6
 801479e:	f7ff fe07 	bl	80143b0 <rshift>
 80147a2:	687e      	ldr	r6, [r7, #4]
 80147a4:	f04f 0802 	mov.w	r8, #2
 80147a8:	f1bb 0f00 	cmp.w	fp, #0
 80147ac:	d04a      	beq.n	8014844 <__gethex+0x3c4>
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	2b02      	cmp	r3, #2
 80147b2:	d016      	beq.n	80147e2 <__gethex+0x362>
 80147b4:	2b03      	cmp	r3, #3
 80147b6:	d018      	beq.n	80147ea <__gethex+0x36a>
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d109      	bne.n	80147d0 <__gethex+0x350>
 80147bc:	f01b 0f02 	tst.w	fp, #2
 80147c0:	d006      	beq.n	80147d0 <__gethex+0x350>
 80147c2:	f8da 3000 	ldr.w	r3, [sl]
 80147c6:	ea4b 0b03 	orr.w	fp, fp, r3
 80147ca:	f01b 0f01 	tst.w	fp, #1
 80147ce:	d10f      	bne.n	80147f0 <__gethex+0x370>
 80147d0:	f048 0810 	orr.w	r8, r8, #16
 80147d4:	e036      	b.n	8014844 <__gethex+0x3c4>
 80147d6:	f04f 0b01 	mov.w	fp, #1
 80147da:	e7d0      	b.n	801477e <__gethex+0x2fe>
 80147dc:	f04f 0801 	mov.w	r8, #1
 80147e0:	e7e2      	b.n	80147a8 <__gethex+0x328>
 80147e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147e4:	f1c3 0301 	rsb	r3, r3, #1
 80147e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80147ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d0ef      	beq.n	80147d0 <__gethex+0x350>
 80147f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80147f4:	f104 0214 	add.w	r2, r4, #20
 80147f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80147fc:	9301      	str	r3, [sp, #4]
 80147fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8014802:	2300      	movs	r3, #0
 8014804:	4694      	mov	ip, r2
 8014806:	f852 1b04 	ldr.w	r1, [r2], #4
 801480a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801480e:	d01e      	beq.n	801484e <__gethex+0x3ce>
 8014810:	3101      	adds	r1, #1
 8014812:	f8cc 1000 	str.w	r1, [ip]
 8014816:	f1b8 0f02 	cmp.w	r8, #2
 801481a:	f104 0214 	add.w	r2, r4, #20
 801481e:	d13d      	bne.n	801489c <__gethex+0x41c>
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	3b01      	subs	r3, #1
 8014824:	42ab      	cmp	r3, r5
 8014826:	d10b      	bne.n	8014840 <__gethex+0x3c0>
 8014828:	1169      	asrs	r1, r5, #5
 801482a:	2301      	movs	r3, #1
 801482c:	f005 051f 	and.w	r5, r5, #31
 8014830:	fa03 f505 	lsl.w	r5, r3, r5
 8014834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014838:	421d      	tst	r5, r3
 801483a:	bf18      	it	ne
 801483c:	f04f 0801 	movne.w	r8, #1
 8014840:	f048 0820 	orr.w	r8, r8, #32
 8014844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014846:	601c      	str	r4, [r3, #0]
 8014848:	9b02      	ldr	r3, [sp, #8]
 801484a:	601e      	str	r6, [r3, #0]
 801484c:	e6a2      	b.n	8014594 <__gethex+0x114>
 801484e:	4290      	cmp	r0, r2
 8014850:	f842 3c04 	str.w	r3, [r2, #-4]
 8014854:	d8d6      	bhi.n	8014804 <__gethex+0x384>
 8014856:	68a2      	ldr	r2, [r4, #8]
 8014858:	4593      	cmp	fp, r2
 801485a:	db17      	blt.n	801488c <__gethex+0x40c>
 801485c:	6861      	ldr	r1, [r4, #4]
 801485e:	4648      	mov	r0, r9
 8014860:	3101      	adds	r1, #1
 8014862:	f7fd ffe3 	bl	801282c <_Balloc>
 8014866:	4682      	mov	sl, r0
 8014868:	b918      	cbnz	r0, 8014872 <__gethex+0x3f2>
 801486a:	4b1b      	ldr	r3, [pc, #108]	; (80148d8 <__gethex+0x458>)
 801486c:	4602      	mov	r2, r0
 801486e:	2184      	movs	r1, #132	; 0x84
 8014870:	e6b3      	b.n	80145da <__gethex+0x15a>
 8014872:	6922      	ldr	r2, [r4, #16]
 8014874:	3202      	adds	r2, #2
 8014876:	f104 010c 	add.w	r1, r4, #12
 801487a:	0092      	lsls	r2, r2, #2
 801487c:	300c      	adds	r0, #12
 801487e:	f7fd f845 	bl	801190c <memcpy>
 8014882:	4621      	mov	r1, r4
 8014884:	4648      	mov	r0, r9
 8014886:	f7fe f811 	bl	80128ac <_Bfree>
 801488a:	4654      	mov	r4, sl
 801488c:	6922      	ldr	r2, [r4, #16]
 801488e:	1c51      	adds	r1, r2, #1
 8014890:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014894:	6121      	str	r1, [r4, #16]
 8014896:	2101      	movs	r1, #1
 8014898:	6151      	str	r1, [r2, #20]
 801489a:	e7bc      	b.n	8014816 <__gethex+0x396>
 801489c:	6921      	ldr	r1, [r4, #16]
 801489e:	4559      	cmp	r1, fp
 80148a0:	dd0b      	ble.n	80148ba <__gethex+0x43a>
 80148a2:	2101      	movs	r1, #1
 80148a4:	4620      	mov	r0, r4
 80148a6:	f7ff fd83 	bl	80143b0 <rshift>
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	3601      	adds	r6, #1
 80148ae:	42b3      	cmp	r3, r6
 80148b0:	f6ff aedb 	blt.w	801466a <__gethex+0x1ea>
 80148b4:	f04f 0801 	mov.w	r8, #1
 80148b8:	e7c2      	b.n	8014840 <__gethex+0x3c0>
 80148ba:	f015 051f 	ands.w	r5, r5, #31
 80148be:	d0f9      	beq.n	80148b4 <__gethex+0x434>
 80148c0:	9b01      	ldr	r3, [sp, #4]
 80148c2:	441a      	add	r2, r3
 80148c4:	f1c5 0520 	rsb	r5, r5, #32
 80148c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80148cc:	f7fe f8a0 	bl	8012a10 <__hi0bits>
 80148d0:	42a8      	cmp	r0, r5
 80148d2:	dbe6      	blt.n	80148a2 <__gethex+0x422>
 80148d4:	e7ee      	b.n	80148b4 <__gethex+0x434>
 80148d6:	bf00      	nop
 80148d8:	080153cf 	.word	0x080153cf

080148dc <L_shift>:
 80148dc:	f1c2 0208 	rsb	r2, r2, #8
 80148e0:	0092      	lsls	r2, r2, #2
 80148e2:	b570      	push	{r4, r5, r6, lr}
 80148e4:	f1c2 0620 	rsb	r6, r2, #32
 80148e8:	6843      	ldr	r3, [r0, #4]
 80148ea:	6804      	ldr	r4, [r0, #0]
 80148ec:	fa03 f506 	lsl.w	r5, r3, r6
 80148f0:	432c      	orrs	r4, r5
 80148f2:	40d3      	lsrs	r3, r2
 80148f4:	6004      	str	r4, [r0, #0]
 80148f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80148fa:	4288      	cmp	r0, r1
 80148fc:	d3f4      	bcc.n	80148e8 <L_shift+0xc>
 80148fe:	bd70      	pop	{r4, r5, r6, pc}

08014900 <__match>:
 8014900:	b530      	push	{r4, r5, lr}
 8014902:	6803      	ldr	r3, [r0, #0]
 8014904:	3301      	adds	r3, #1
 8014906:	f811 4b01 	ldrb.w	r4, [r1], #1
 801490a:	b914      	cbnz	r4, 8014912 <__match+0x12>
 801490c:	6003      	str	r3, [r0, #0]
 801490e:	2001      	movs	r0, #1
 8014910:	bd30      	pop	{r4, r5, pc}
 8014912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014916:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801491a:	2d19      	cmp	r5, #25
 801491c:	bf98      	it	ls
 801491e:	3220      	addls	r2, #32
 8014920:	42a2      	cmp	r2, r4
 8014922:	d0f0      	beq.n	8014906 <__match+0x6>
 8014924:	2000      	movs	r0, #0
 8014926:	e7f3      	b.n	8014910 <__match+0x10>

08014928 <__hexnan>:
 8014928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801492c:	680b      	ldr	r3, [r1, #0]
 801492e:	6801      	ldr	r1, [r0, #0]
 8014930:	115e      	asrs	r6, r3, #5
 8014932:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014936:	f013 031f 	ands.w	r3, r3, #31
 801493a:	b087      	sub	sp, #28
 801493c:	bf18      	it	ne
 801493e:	3604      	addne	r6, #4
 8014940:	2500      	movs	r5, #0
 8014942:	1f37      	subs	r7, r6, #4
 8014944:	4682      	mov	sl, r0
 8014946:	4690      	mov	r8, r2
 8014948:	9301      	str	r3, [sp, #4]
 801494a:	f846 5c04 	str.w	r5, [r6, #-4]
 801494e:	46b9      	mov	r9, r7
 8014950:	463c      	mov	r4, r7
 8014952:	9502      	str	r5, [sp, #8]
 8014954:	46ab      	mov	fp, r5
 8014956:	784a      	ldrb	r2, [r1, #1]
 8014958:	1c4b      	adds	r3, r1, #1
 801495a:	9303      	str	r3, [sp, #12]
 801495c:	b342      	cbz	r2, 80149b0 <__hexnan+0x88>
 801495e:	4610      	mov	r0, r2
 8014960:	9105      	str	r1, [sp, #20]
 8014962:	9204      	str	r2, [sp, #16]
 8014964:	f7ff fd76 	bl	8014454 <__hexdig_fun>
 8014968:	2800      	cmp	r0, #0
 801496a:	d14f      	bne.n	8014a0c <__hexnan+0xe4>
 801496c:	9a04      	ldr	r2, [sp, #16]
 801496e:	9905      	ldr	r1, [sp, #20]
 8014970:	2a20      	cmp	r2, #32
 8014972:	d818      	bhi.n	80149a6 <__hexnan+0x7e>
 8014974:	9b02      	ldr	r3, [sp, #8]
 8014976:	459b      	cmp	fp, r3
 8014978:	dd13      	ble.n	80149a2 <__hexnan+0x7a>
 801497a:	454c      	cmp	r4, r9
 801497c:	d206      	bcs.n	801498c <__hexnan+0x64>
 801497e:	2d07      	cmp	r5, #7
 8014980:	dc04      	bgt.n	801498c <__hexnan+0x64>
 8014982:	462a      	mov	r2, r5
 8014984:	4649      	mov	r1, r9
 8014986:	4620      	mov	r0, r4
 8014988:	f7ff ffa8 	bl	80148dc <L_shift>
 801498c:	4544      	cmp	r4, r8
 801498e:	d950      	bls.n	8014a32 <__hexnan+0x10a>
 8014990:	2300      	movs	r3, #0
 8014992:	f1a4 0904 	sub.w	r9, r4, #4
 8014996:	f844 3c04 	str.w	r3, [r4, #-4]
 801499a:	f8cd b008 	str.w	fp, [sp, #8]
 801499e:	464c      	mov	r4, r9
 80149a0:	461d      	mov	r5, r3
 80149a2:	9903      	ldr	r1, [sp, #12]
 80149a4:	e7d7      	b.n	8014956 <__hexnan+0x2e>
 80149a6:	2a29      	cmp	r2, #41	; 0x29
 80149a8:	d155      	bne.n	8014a56 <__hexnan+0x12e>
 80149aa:	3102      	adds	r1, #2
 80149ac:	f8ca 1000 	str.w	r1, [sl]
 80149b0:	f1bb 0f00 	cmp.w	fp, #0
 80149b4:	d04f      	beq.n	8014a56 <__hexnan+0x12e>
 80149b6:	454c      	cmp	r4, r9
 80149b8:	d206      	bcs.n	80149c8 <__hexnan+0xa0>
 80149ba:	2d07      	cmp	r5, #7
 80149bc:	dc04      	bgt.n	80149c8 <__hexnan+0xa0>
 80149be:	462a      	mov	r2, r5
 80149c0:	4649      	mov	r1, r9
 80149c2:	4620      	mov	r0, r4
 80149c4:	f7ff ff8a 	bl	80148dc <L_shift>
 80149c8:	4544      	cmp	r4, r8
 80149ca:	d934      	bls.n	8014a36 <__hexnan+0x10e>
 80149cc:	f1a8 0204 	sub.w	r2, r8, #4
 80149d0:	4623      	mov	r3, r4
 80149d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80149d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80149da:	429f      	cmp	r7, r3
 80149dc:	d2f9      	bcs.n	80149d2 <__hexnan+0xaa>
 80149de:	1b3b      	subs	r3, r7, r4
 80149e0:	f023 0303 	bic.w	r3, r3, #3
 80149e4:	3304      	adds	r3, #4
 80149e6:	3e03      	subs	r6, #3
 80149e8:	3401      	adds	r4, #1
 80149ea:	42a6      	cmp	r6, r4
 80149ec:	bf38      	it	cc
 80149ee:	2304      	movcc	r3, #4
 80149f0:	4443      	add	r3, r8
 80149f2:	2200      	movs	r2, #0
 80149f4:	f843 2b04 	str.w	r2, [r3], #4
 80149f8:	429f      	cmp	r7, r3
 80149fa:	d2fb      	bcs.n	80149f4 <__hexnan+0xcc>
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	b91b      	cbnz	r3, 8014a08 <__hexnan+0xe0>
 8014a00:	4547      	cmp	r7, r8
 8014a02:	d126      	bne.n	8014a52 <__hexnan+0x12a>
 8014a04:	2301      	movs	r3, #1
 8014a06:	603b      	str	r3, [r7, #0]
 8014a08:	2005      	movs	r0, #5
 8014a0a:	e025      	b.n	8014a58 <__hexnan+0x130>
 8014a0c:	3501      	adds	r5, #1
 8014a0e:	2d08      	cmp	r5, #8
 8014a10:	f10b 0b01 	add.w	fp, fp, #1
 8014a14:	dd06      	ble.n	8014a24 <__hexnan+0xfc>
 8014a16:	4544      	cmp	r4, r8
 8014a18:	d9c3      	bls.n	80149a2 <__hexnan+0x7a>
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014a20:	2501      	movs	r5, #1
 8014a22:	3c04      	subs	r4, #4
 8014a24:	6822      	ldr	r2, [r4, #0]
 8014a26:	f000 000f 	and.w	r0, r0, #15
 8014a2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014a2e:	6020      	str	r0, [r4, #0]
 8014a30:	e7b7      	b.n	80149a2 <__hexnan+0x7a>
 8014a32:	2508      	movs	r5, #8
 8014a34:	e7b5      	b.n	80149a2 <__hexnan+0x7a>
 8014a36:	9b01      	ldr	r3, [sp, #4]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d0df      	beq.n	80149fc <__hexnan+0xd4>
 8014a3c:	f1c3 0320 	rsb	r3, r3, #32
 8014a40:	f04f 32ff 	mov.w	r2, #4294967295
 8014a44:	40da      	lsrs	r2, r3
 8014a46:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014a4a:	4013      	ands	r3, r2
 8014a4c:	f846 3c04 	str.w	r3, [r6, #-4]
 8014a50:	e7d4      	b.n	80149fc <__hexnan+0xd4>
 8014a52:	3f04      	subs	r7, #4
 8014a54:	e7d2      	b.n	80149fc <__hexnan+0xd4>
 8014a56:	2004      	movs	r0, #4
 8014a58:	b007      	add	sp, #28
 8014a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a5e <__ascii_mbtowc>:
 8014a5e:	b082      	sub	sp, #8
 8014a60:	b901      	cbnz	r1, 8014a64 <__ascii_mbtowc+0x6>
 8014a62:	a901      	add	r1, sp, #4
 8014a64:	b142      	cbz	r2, 8014a78 <__ascii_mbtowc+0x1a>
 8014a66:	b14b      	cbz	r3, 8014a7c <__ascii_mbtowc+0x1e>
 8014a68:	7813      	ldrb	r3, [r2, #0]
 8014a6a:	600b      	str	r3, [r1, #0]
 8014a6c:	7812      	ldrb	r2, [r2, #0]
 8014a6e:	1e10      	subs	r0, r2, #0
 8014a70:	bf18      	it	ne
 8014a72:	2001      	movne	r0, #1
 8014a74:	b002      	add	sp, #8
 8014a76:	4770      	bx	lr
 8014a78:	4610      	mov	r0, r2
 8014a7a:	e7fb      	b.n	8014a74 <__ascii_mbtowc+0x16>
 8014a7c:	f06f 0001 	mvn.w	r0, #1
 8014a80:	e7f8      	b.n	8014a74 <__ascii_mbtowc+0x16>

08014a82 <_realloc_r>:
 8014a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a86:	4680      	mov	r8, r0
 8014a88:	4614      	mov	r4, r2
 8014a8a:	460e      	mov	r6, r1
 8014a8c:	b921      	cbnz	r1, 8014a98 <_realloc_r+0x16>
 8014a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a92:	4611      	mov	r1, r2
 8014a94:	f7fd be3e 	b.w	8012714 <_malloc_r>
 8014a98:	b92a      	cbnz	r2, 8014aa6 <_realloc_r+0x24>
 8014a9a:	f7fd fdc7 	bl	801262c <_free_r>
 8014a9e:	4625      	mov	r5, r4
 8014aa0:	4628      	mov	r0, r5
 8014aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aa6:	f000 f842 	bl	8014b2e <_malloc_usable_size_r>
 8014aaa:	4284      	cmp	r4, r0
 8014aac:	4607      	mov	r7, r0
 8014aae:	d802      	bhi.n	8014ab6 <_realloc_r+0x34>
 8014ab0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014ab4:	d812      	bhi.n	8014adc <_realloc_r+0x5a>
 8014ab6:	4621      	mov	r1, r4
 8014ab8:	4640      	mov	r0, r8
 8014aba:	f7fd fe2b 	bl	8012714 <_malloc_r>
 8014abe:	4605      	mov	r5, r0
 8014ac0:	2800      	cmp	r0, #0
 8014ac2:	d0ed      	beq.n	8014aa0 <_realloc_r+0x1e>
 8014ac4:	42bc      	cmp	r4, r7
 8014ac6:	4622      	mov	r2, r4
 8014ac8:	4631      	mov	r1, r6
 8014aca:	bf28      	it	cs
 8014acc:	463a      	movcs	r2, r7
 8014ace:	f7fc ff1d 	bl	801190c <memcpy>
 8014ad2:	4631      	mov	r1, r6
 8014ad4:	4640      	mov	r0, r8
 8014ad6:	f7fd fda9 	bl	801262c <_free_r>
 8014ada:	e7e1      	b.n	8014aa0 <_realloc_r+0x1e>
 8014adc:	4635      	mov	r5, r6
 8014ade:	e7df      	b.n	8014aa0 <_realloc_r+0x1e>

08014ae0 <__ascii_wctomb>:
 8014ae0:	b149      	cbz	r1, 8014af6 <__ascii_wctomb+0x16>
 8014ae2:	2aff      	cmp	r2, #255	; 0xff
 8014ae4:	bf85      	ittet	hi
 8014ae6:	238a      	movhi	r3, #138	; 0x8a
 8014ae8:	6003      	strhi	r3, [r0, #0]
 8014aea:	700a      	strbls	r2, [r1, #0]
 8014aec:	f04f 30ff 	movhi.w	r0, #4294967295
 8014af0:	bf98      	it	ls
 8014af2:	2001      	movls	r0, #1
 8014af4:	4770      	bx	lr
 8014af6:	4608      	mov	r0, r1
 8014af8:	4770      	bx	lr
	...

08014afc <fiprintf>:
 8014afc:	b40e      	push	{r1, r2, r3}
 8014afe:	b503      	push	{r0, r1, lr}
 8014b00:	4601      	mov	r1, r0
 8014b02:	ab03      	add	r3, sp, #12
 8014b04:	4805      	ldr	r0, [pc, #20]	; (8014b1c <fiprintf+0x20>)
 8014b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b0a:	6800      	ldr	r0, [r0, #0]
 8014b0c:	9301      	str	r3, [sp, #4]
 8014b0e:	f000 f83f 	bl	8014b90 <_vfiprintf_r>
 8014b12:	b002      	add	sp, #8
 8014b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b18:	b003      	add	sp, #12
 8014b1a:	4770      	bx	lr
 8014b1c:	20000164 	.word	0x20000164

08014b20 <abort>:
 8014b20:	b508      	push	{r3, lr}
 8014b22:	2006      	movs	r0, #6
 8014b24:	f000 fa0c 	bl	8014f40 <raise>
 8014b28:	2001      	movs	r0, #1
 8014b2a:	f7ed fad7 	bl	80020dc <_exit>

08014b2e <_malloc_usable_size_r>:
 8014b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b32:	1f18      	subs	r0, r3, #4
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	bfbc      	itt	lt
 8014b38:	580b      	ldrlt	r3, [r1, r0]
 8014b3a:	18c0      	addlt	r0, r0, r3
 8014b3c:	4770      	bx	lr

08014b3e <__sfputc_r>:
 8014b3e:	6893      	ldr	r3, [r2, #8]
 8014b40:	3b01      	subs	r3, #1
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	b410      	push	{r4}
 8014b46:	6093      	str	r3, [r2, #8]
 8014b48:	da08      	bge.n	8014b5c <__sfputc_r+0x1e>
 8014b4a:	6994      	ldr	r4, [r2, #24]
 8014b4c:	42a3      	cmp	r3, r4
 8014b4e:	db01      	blt.n	8014b54 <__sfputc_r+0x16>
 8014b50:	290a      	cmp	r1, #10
 8014b52:	d103      	bne.n	8014b5c <__sfputc_r+0x1e>
 8014b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b58:	f000 b934 	b.w	8014dc4 <__swbuf_r>
 8014b5c:	6813      	ldr	r3, [r2, #0]
 8014b5e:	1c58      	adds	r0, r3, #1
 8014b60:	6010      	str	r0, [r2, #0]
 8014b62:	7019      	strb	r1, [r3, #0]
 8014b64:	4608      	mov	r0, r1
 8014b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b6a:	4770      	bx	lr

08014b6c <__sfputs_r>:
 8014b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b6e:	4606      	mov	r6, r0
 8014b70:	460f      	mov	r7, r1
 8014b72:	4614      	mov	r4, r2
 8014b74:	18d5      	adds	r5, r2, r3
 8014b76:	42ac      	cmp	r4, r5
 8014b78:	d101      	bne.n	8014b7e <__sfputs_r+0x12>
 8014b7a:	2000      	movs	r0, #0
 8014b7c:	e007      	b.n	8014b8e <__sfputs_r+0x22>
 8014b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b82:	463a      	mov	r2, r7
 8014b84:	4630      	mov	r0, r6
 8014b86:	f7ff ffda 	bl	8014b3e <__sfputc_r>
 8014b8a:	1c43      	adds	r3, r0, #1
 8014b8c:	d1f3      	bne.n	8014b76 <__sfputs_r+0xa>
 8014b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014b90 <_vfiprintf_r>:
 8014b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b94:	460d      	mov	r5, r1
 8014b96:	b09d      	sub	sp, #116	; 0x74
 8014b98:	4614      	mov	r4, r2
 8014b9a:	4698      	mov	r8, r3
 8014b9c:	4606      	mov	r6, r0
 8014b9e:	b118      	cbz	r0, 8014ba8 <_vfiprintf_r+0x18>
 8014ba0:	6a03      	ldr	r3, [r0, #32]
 8014ba2:	b90b      	cbnz	r3, 8014ba8 <_vfiprintf_r+0x18>
 8014ba4:	f7fc fd66 	bl	8011674 <__sinit>
 8014ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014baa:	07d9      	lsls	r1, r3, #31
 8014bac:	d405      	bmi.n	8014bba <_vfiprintf_r+0x2a>
 8014bae:	89ab      	ldrh	r3, [r5, #12]
 8014bb0:	059a      	lsls	r2, r3, #22
 8014bb2:	d402      	bmi.n	8014bba <_vfiprintf_r+0x2a>
 8014bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bb6:	f7fc fea7 	bl	8011908 <__retarget_lock_acquire_recursive>
 8014bba:	89ab      	ldrh	r3, [r5, #12]
 8014bbc:	071b      	lsls	r3, r3, #28
 8014bbe:	d501      	bpl.n	8014bc4 <_vfiprintf_r+0x34>
 8014bc0:	692b      	ldr	r3, [r5, #16]
 8014bc2:	b99b      	cbnz	r3, 8014bec <_vfiprintf_r+0x5c>
 8014bc4:	4629      	mov	r1, r5
 8014bc6:	4630      	mov	r0, r6
 8014bc8:	f000 f93a 	bl	8014e40 <__swsetup_r>
 8014bcc:	b170      	cbz	r0, 8014bec <_vfiprintf_r+0x5c>
 8014bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bd0:	07dc      	lsls	r4, r3, #31
 8014bd2:	d504      	bpl.n	8014bde <_vfiprintf_r+0x4e>
 8014bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014bd8:	b01d      	add	sp, #116	; 0x74
 8014bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bde:	89ab      	ldrh	r3, [r5, #12]
 8014be0:	0598      	lsls	r0, r3, #22
 8014be2:	d4f7      	bmi.n	8014bd4 <_vfiprintf_r+0x44>
 8014be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014be6:	f7fc fe90 	bl	801190a <__retarget_lock_release_recursive>
 8014bea:	e7f3      	b.n	8014bd4 <_vfiprintf_r+0x44>
 8014bec:	2300      	movs	r3, #0
 8014bee:	9309      	str	r3, [sp, #36]	; 0x24
 8014bf0:	2320      	movs	r3, #32
 8014bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014bfa:	2330      	movs	r3, #48	; 0x30
 8014bfc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014db0 <_vfiprintf_r+0x220>
 8014c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c04:	f04f 0901 	mov.w	r9, #1
 8014c08:	4623      	mov	r3, r4
 8014c0a:	469a      	mov	sl, r3
 8014c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c10:	b10a      	cbz	r2, 8014c16 <_vfiprintf_r+0x86>
 8014c12:	2a25      	cmp	r2, #37	; 0x25
 8014c14:	d1f9      	bne.n	8014c0a <_vfiprintf_r+0x7a>
 8014c16:	ebba 0b04 	subs.w	fp, sl, r4
 8014c1a:	d00b      	beq.n	8014c34 <_vfiprintf_r+0xa4>
 8014c1c:	465b      	mov	r3, fp
 8014c1e:	4622      	mov	r2, r4
 8014c20:	4629      	mov	r1, r5
 8014c22:	4630      	mov	r0, r6
 8014c24:	f7ff ffa2 	bl	8014b6c <__sfputs_r>
 8014c28:	3001      	adds	r0, #1
 8014c2a:	f000 80a9 	beq.w	8014d80 <_vfiprintf_r+0x1f0>
 8014c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c30:	445a      	add	r2, fp
 8014c32:	9209      	str	r2, [sp, #36]	; 0x24
 8014c34:	f89a 3000 	ldrb.w	r3, [sl]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	f000 80a1 	beq.w	8014d80 <_vfiprintf_r+0x1f0>
 8014c3e:	2300      	movs	r3, #0
 8014c40:	f04f 32ff 	mov.w	r2, #4294967295
 8014c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c48:	f10a 0a01 	add.w	sl, sl, #1
 8014c4c:	9304      	str	r3, [sp, #16]
 8014c4e:	9307      	str	r3, [sp, #28]
 8014c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c54:	931a      	str	r3, [sp, #104]	; 0x68
 8014c56:	4654      	mov	r4, sl
 8014c58:	2205      	movs	r2, #5
 8014c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c5e:	4854      	ldr	r0, [pc, #336]	; (8014db0 <_vfiprintf_r+0x220>)
 8014c60:	f7eb fab6 	bl	80001d0 <memchr>
 8014c64:	9a04      	ldr	r2, [sp, #16]
 8014c66:	b9d8      	cbnz	r0, 8014ca0 <_vfiprintf_r+0x110>
 8014c68:	06d1      	lsls	r1, r2, #27
 8014c6a:	bf44      	itt	mi
 8014c6c:	2320      	movmi	r3, #32
 8014c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c72:	0713      	lsls	r3, r2, #28
 8014c74:	bf44      	itt	mi
 8014c76:	232b      	movmi	r3, #43	; 0x2b
 8014c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8014c80:	2b2a      	cmp	r3, #42	; 0x2a
 8014c82:	d015      	beq.n	8014cb0 <_vfiprintf_r+0x120>
 8014c84:	9a07      	ldr	r2, [sp, #28]
 8014c86:	4654      	mov	r4, sl
 8014c88:	2000      	movs	r0, #0
 8014c8a:	f04f 0c0a 	mov.w	ip, #10
 8014c8e:	4621      	mov	r1, r4
 8014c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c94:	3b30      	subs	r3, #48	; 0x30
 8014c96:	2b09      	cmp	r3, #9
 8014c98:	d94d      	bls.n	8014d36 <_vfiprintf_r+0x1a6>
 8014c9a:	b1b0      	cbz	r0, 8014cca <_vfiprintf_r+0x13a>
 8014c9c:	9207      	str	r2, [sp, #28]
 8014c9e:	e014      	b.n	8014cca <_vfiprintf_r+0x13a>
 8014ca0:	eba0 0308 	sub.w	r3, r0, r8
 8014ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8014ca8:	4313      	orrs	r3, r2
 8014caa:	9304      	str	r3, [sp, #16]
 8014cac:	46a2      	mov	sl, r4
 8014cae:	e7d2      	b.n	8014c56 <_vfiprintf_r+0xc6>
 8014cb0:	9b03      	ldr	r3, [sp, #12]
 8014cb2:	1d19      	adds	r1, r3, #4
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	9103      	str	r1, [sp, #12]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	bfbb      	ittet	lt
 8014cbc:	425b      	neglt	r3, r3
 8014cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8014cc2:	9307      	strge	r3, [sp, #28]
 8014cc4:	9307      	strlt	r3, [sp, #28]
 8014cc6:	bfb8      	it	lt
 8014cc8:	9204      	strlt	r2, [sp, #16]
 8014cca:	7823      	ldrb	r3, [r4, #0]
 8014ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8014cce:	d10c      	bne.n	8014cea <_vfiprintf_r+0x15a>
 8014cd0:	7863      	ldrb	r3, [r4, #1]
 8014cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8014cd4:	d134      	bne.n	8014d40 <_vfiprintf_r+0x1b0>
 8014cd6:	9b03      	ldr	r3, [sp, #12]
 8014cd8:	1d1a      	adds	r2, r3, #4
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	9203      	str	r2, [sp, #12]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	bfb8      	it	lt
 8014ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ce6:	3402      	adds	r4, #2
 8014ce8:	9305      	str	r3, [sp, #20]
 8014cea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014dc0 <_vfiprintf_r+0x230>
 8014cee:	7821      	ldrb	r1, [r4, #0]
 8014cf0:	2203      	movs	r2, #3
 8014cf2:	4650      	mov	r0, sl
 8014cf4:	f7eb fa6c 	bl	80001d0 <memchr>
 8014cf8:	b138      	cbz	r0, 8014d0a <_vfiprintf_r+0x17a>
 8014cfa:	9b04      	ldr	r3, [sp, #16]
 8014cfc:	eba0 000a 	sub.w	r0, r0, sl
 8014d00:	2240      	movs	r2, #64	; 0x40
 8014d02:	4082      	lsls	r2, r0
 8014d04:	4313      	orrs	r3, r2
 8014d06:	3401      	adds	r4, #1
 8014d08:	9304      	str	r3, [sp, #16]
 8014d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d0e:	4829      	ldr	r0, [pc, #164]	; (8014db4 <_vfiprintf_r+0x224>)
 8014d10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d14:	2206      	movs	r2, #6
 8014d16:	f7eb fa5b 	bl	80001d0 <memchr>
 8014d1a:	2800      	cmp	r0, #0
 8014d1c:	d03f      	beq.n	8014d9e <_vfiprintf_r+0x20e>
 8014d1e:	4b26      	ldr	r3, [pc, #152]	; (8014db8 <_vfiprintf_r+0x228>)
 8014d20:	bb1b      	cbnz	r3, 8014d6a <_vfiprintf_r+0x1da>
 8014d22:	9b03      	ldr	r3, [sp, #12]
 8014d24:	3307      	adds	r3, #7
 8014d26:	f023 0307 	bic.w	r3, r3, #7
 8014d2a:	3308      	adds	r3, #8
 8014d2c:	9303      	str	r3, [sp, #12]
 8014d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d30:	443b      	add	r3, r7
 8014d32:	9309      	str	r3, [sp, #36]	; 0x24
 8014d34:	e768      	b.n	8014c08 <_vfiprintf_r+0x78>
 8014d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d3a:	460c      	mov	r4, r1
 8014d3c:	2001      	movs	r0, #1
 8014d3e:	e7a6      	b.n	8014c8e <_vfiprintf_r+0xfe>
 8014d40:	2300      	movs	r3, #0
 8014d42:	3401      	adds	r4, #1
 8014d44:	9305      	str	r3, [sp, #20]
 8014d46:	4619      	mov	r1, r3
 8014d48:	f04f 0c0a 	mov.w	ip, #10
 8014d4c:	4620      	mov	r0, r4
 8014d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d52:	3a30      	subs	r2, #48	; 0x30
 8014d54:	2a09      	cmp	r2, #9
 8014d56:	d903      	bls.n	8014d60 <_vfiprintf_r+0x1d0>
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d0c6      	beq.n	8014cea <_vfiprintf_r+0x15a>
 8014d5c:	9105      	str	r1, [sp, #20]
 8014d5e:	e7c4      	b.n	8014cea <_vfiprintf_r+0x15a>
 8014d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d64:	4604      	mov	r4, r0
 8014d66:	2301      	movs	r3, #1
 8014d68:	e7f0      	b.n	8014d4c <_vfiprintf_r+0x1bc>
 8014d6a:	ab03      	add	r3, sp, #12
 8014d6c:	9300      	str	r3, [sp, #0]
 8014d6e:	462a      	mov	r2, r5
 8014d70:	4b12      	ldr	r3, [pc, #72]	; (8014dbc <_vfiprintf_r+0x22c>)
 8014d72:	a904      	add	r1, sp, #16
 8014d74:	4630      	mov	r0, r6
 8014d76:	f7fb fe2d 	bl	80109d4 <_printf_float>
 8014d7a:	4607      	mov	r7, r0
 8014d7c:	1c78      	adds	r0, r7, #1
 8014d7e:	d1d6      	bne.n	8014d2e <_vfiprintf_r+0x19e>
 8014d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d82:	07d9      	lsls	r1, r3, #31
 8014d84:	d405      	bmi.n	8014d92 <_vfiprintf_r+0x202>
 8014d86:	89ab      	ldrh	r3, [r5, #12]
 8014d88:	059a      	lsls	r2, r3, #22
 8014d8a:	d402      	bmi.n	8014d92 <_vfiprintf_r+0x202>
 8014d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d8e:	f7fc fdbc 	bl	801190a <__retarget_lock_release_recursive>
 8014d92:	89ab      	ldrh	r3, [r5, #12]
 8014d94:	065b      	lsls	r3, r3, #25
 8014d96:	f53f af1d 	bmi.w	8014bd4 <_vfiprintf_r+0x44>
 8014d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d9c:	e71c      	b.n	8014bd8 <_vfiprintf_r+0x48>
 8014d9e:	ab03      	add	r3, sp, #12
 8014da0:	9300      	str	r3, [sp, #0]
 8014da2:	462a      	mov	r2, r5
 8014da4:	4b05      	ldr	r3, [pc, #20]	; (8014dbc <_vfiprintf_r+0x22c>)
 8014da6:	a904      	add	r1, sp, #16
 8014da8:	4630      	mov	r0, r6
 8014daa:	f7fc f8b7 	bl	8010f1c <_printf_i>
 8014dae:	e7e4      	b.n	8014d7a <_vfiprintf_r+0x1ea>
 8014db0:	08015691 	.word	0x08015691
 8014db4:	0801569b 	.word	0x0801569b
 8014db8:	080109d5 	.word	0x080109d5
 8014dbc:	08014b6d 	.word	0x08014b6d
 8014dc0:	08015697 	.word	0x08015697

08014dc4 <__swbuf_r>:
 8014dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dc6:	460e      	mov	r6, r1
 8014dc8:	4614      	mov	r4, r2
 8014dca:	4605      	mov	r5, r0
 8014dcc:	b118      	cbz	r0, 8014dd6 <__swbuf_r+0x12>
 8014dce:	6a03      	ldr	r3, [r0, #32]
 8014dd0:	b90b      	cbnz	r3, 8014dd6 <__swbuf_r+0x12>
 8014dd2:	f7fc fc4f 	bl	8011674 <__sinit>
 8014dd6:	69a3      	ldr	r3, [r4, #24]
 8014dd8:	60a3      	str	r3, [r4, #8]
 8014dda:	89a3      	ldrh	r3, [r4, #12]
 8014ddc:	071a      	lsls	r2, r3, #28
 8014dde:	d525      	bpl.n	8014e2c <__swbuf_r+0x68>
 8014de0:	6923      	ldr	r3, [r4, #16]
 8014de2:	b31b      	cbz	r3, 8014e2c <__swbuf_r+0x68>
 8014de4:	6823      	ldr	r3, [r4, #0]
 8014de6:	6922      	ldr	r2, [r4, #16]
 8014de8:	1a98      	subs	r0, r3, r2
 8014dea:	6963      	ldr	r3, [r4, #20]
 8014dec:	b2f6      	uxtb	r6, r6
 8014dee:	4283      	cmp	r3, r0
 8014df0:	4637      	mov	r7, r6
 8014df2:	dc04      	bgt.n	8014dfe <__swbuf_r+0x3a>
 8014df4:	4621      	mov	r1, r4
 8014df6:	4628      	mov	r0, r5
 8014df8:	f7ff fa3a 	bl	8014270 <_fflush_r>
 8014dfc:	b9e0      	cbnz	r0, 8014e38 <__swbuf_r+0x74>
 8014dfe:	68a3      	ldr	r3, [r4, #8]
 8014e00:	3b01      	subs	r3, #1
 8014e02:	60a3      	str	r3, [r4, #8]
 8014e04:	6823      	ldr	r3, [r4, #0]
 8014e06:	1c5a      	adds	r2, r3, #1
 8014e08:	6022      	str	r2, [r4, #0]
 8014e0a:	701e      	strb	r6, [r3, #0]
 8014e0c:	6962      	ldr	r2, [r4, #20]
 8014e0e:	1c43      	adds	r3, r0, #1
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d004      	beq.n	8014e1e <__swbuf_r+0x5a>
 8014e14:	89a3      	ldrh	r3, [r4, #12]
 8014e16:	07db      	lsls	r3, r3, #31
 8014e18:	d506      	bpl.n	8014e28 <__swbuf_r+0x64>
 8014e1a:	2e0a      	cmp	r6, #10
 8014e1c:	d104      	bne.n	8014e28 <__swbuf_r+0x64>
 8014e1e:	4621      	mov	r1, r4
 8014e20:	4628      	mov	r0, r5
 8014e22:	f7ff fa25 	bl	8014270 <_fflush_r>
 8014e26:	b938      	cbnz	r0, 8014e38 <__swbuf_r+0x74>
 8014e28:	4638      	mov	r0, r7
 8014e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e2c:	4621      	mov	r1, r4
 8014e2e:	4628      	mov	r0, r5
 8014e30:	f000 f806 	bl	8014e40 <__swsetup_r>
 8014e34:	2800      	cmp	r0, #0
 8014e36:	d0d5      	beq.n	8014de4 <__swbuf_r+0x20>
 8014e38:	f04f 37ff 	mov.w	r7, #4294967295
 8014e3c:	e7f4      	b.n	8014e28 <__swbuf_r+0x64>
	...

08014e40 <__swsetup_r>:
 8014e40:	b538      	push	{r3, r4, r5, lr}
 8014e42:	4b2a      	ldr	r3, [pc, #168]	; (8014eec <__swsetup_r+0xac>)
 8014e44:	4605      	mov	r5, r0
 8014e46:	6818      	ldr	r0, [r3, #0]
 8014e48:	460c      	mov	r4, r1
 8014e4a:	b118      	cbz	r0, 8014e54 <__swsetup_r+0x14>
 8014e4c:	6a03      	ldr	r3, [r0, #32]
 8014e4e:	b90b      	cbnz	r3, 8014e54 <__swsetup_r+0x14>
 8014e50:	f7fc fc10 	bl	8011674 <__sinit>
 8014e54:	89a3      	ldrh	r3, [r4, #12]
 8014e56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e5a:	0718      	lsls	r0, r3, #28
 8014e5c:	d422      	bmi.n	8014ea4 <__swsetup_r+0x64>
 8014e5e:	06d9      	lsls	r1, r3, #27
 8014e60:	d407      	bmi.n	8014e72 <__swsetup_r+0x32>
 8014e62:	2309      	movs	r3, #9
 8014e64:	602b      	str	r3, [r5, #0]
 8014e66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014e6a:	81a3      	strh	r3, [r4, #12]
 8014e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e70:	e034      	b.n	8014edc <__swsetup_r+0x9c>
 8014e72:	0758      	lsls	r0, r3, #29
 8014e74:	d512      	bpl.n	8014e9c <__swsetup_r+0x5c>
 8014e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e78:	b141      	cbz	r1, 8014e8c <__swsetup_r+0x4c>
 8014e7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e7e:	4299      	cmp	r1, r3
 8014e80:	d002      	beq.n	8014e88 <__swsetup_r+0x48>
 8014e82:	4628      	mov	r0, r5
 8014e84:	f7fd fbd2 	bl	801262c <_free_r>
 8014e88:	2300      	movs	r3, #0
 8014e8a:	6363      	str	r3, [r4, #52]	; 0x34
 8014e8c:	89a3      	ldrh	r3, [r4, #12]
 8014e8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014e92:	81a3      	strh	r3, [r4, #12]
 8014e94:	2300      	movs	r3, #0
 8014e96:	6063      	str	r3, [r4, #4]
 8014e98:	6923      	ldr	r3, [r4, #16]
 8014e9a:	6023      	str	r3, [r4, #0]
 8014e9c:	89a3      	ldrh	r3, [r4, #12]
 8014e9e:	f043 0308 	orr.w	r3, r3, #8
 8014ea2:	81a3      	strh	r3, [r4, #12]
 8014ea4:	6923      	ldr	r3, [r4, #16]
 8014ea6:	b94b      	cbnz	r3, 8014ebc <__swsetup_r+0x7c>
 8014ea8:	89a3      	ldrh	r3, [r4, #12]
 8014eaa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014eb2:	d003      	beq.n	8014ebc <__swsetup_r+0x7c>
 8014eb4:	4621      	mov	r1, r4
 8014eb6:	4628      	mov	r0, r5
 8014eb8:	f000 f884 	bl	8014fc4 <__smakebuf_r>
 8014ebc:	89a0      	ldrh	r0, [r4, #12]
 8014ebe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ec2:	f010 0301 	ands.w	r3, r0, #1
 8014ec6:	d00a      	beq.n	8014ede <__swsetup_r+0x9e>
 8014ec8:	2300      	movs	r3, #0
 8014eca:	60a3      	str	r3, [r4, #8]
 8014ecc:	6963      	ldr	r3, [r4, #20]
 8014ece:	425b      	negs	r3, r3
 8014ed0:	61a3      	str	r3, [r4, #24]
 8014ed2:	6923      	ldr	r3, [r4, #16]
 8014ed4:	b943      	cbnz	r3, 8014ee8 <__swsetup_r+0xa8>
 8014ed6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014eda:	d1c4      	bne.n	8014e66 <__swsetup_r+0x26>
 8014edc:	bd38      	pop	{r3, r4, r5, pc}
 8014ede:	0781      	lsls	r1, r0, #30
 8014ee0:	bf58      	it	pl
 8014ee2:	6963      	ldrpl	r3, [r4, #20]
 8014ee4:	60a3      	str	r3, [r4, #8]
 8014ee6:	e7f4      	b.n	8014ed2 <__swsetup_r+0x92>
 8014ee8:	2000      	movs	r0, #0
 8014eea:	e7f7      	b.n	8014edc <__swsetup_r+0x9c>
 8014eec:	20000164 	.word	0x20000164

08014ef0 <_raise_r>:
 8014ef0:	291f      	cmp	r1, #31
 8014ef2:	b538      	push	{r3, r4, r5, lr}
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	460d      	mov	r5, r1
 8014ef8:	d904      	bls.n	8014f04 <_raise_r+0x14>
 8014efa:	2316      	movs	r3, #22
 8014efc:	6003      	str	r3, [r0, #0]
 8014efe:	f04f 30ff 	mov.w	r0, #4294967295
 8014f02:	bd38      	pop	{r3, r4, r5, pc}
 8014f04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014f06:	b112      	cbz	r2, 8014f0e <_raise_r+0x1e>
 8014f08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f0c:	b94b      	cbnz	r3, 8014f22 <_raise_r+0x32>
 8014f0e:	4620      	mov	r0, r4
 8014f10:	f000 f830 	bl	8014f74 <_getpid_r>
 8014f14:	462a      	mov	r2, r5
 8014f16:	4601      	mov	r1, r0
 8014f18:	4620      	mov	r0, r4
 8014f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f1e:	f000 b817 	b.w	8014f50 <_kill_r>
 8014f22:	2b01      	cmp	r3, #1
 8014f24:	d00a      	beq.n	8014f3c <_raise_r+0x4c>
 8014f26:	1c59      	adds	r1, r3, #1
 8014f28:	d103      	bne.n	8014f32 <_raise_r+0x42>
 8014f2a:	2316      	movs	r3, #22
 8014f2c:	6003      	str	r3, [r0, #0]
 8014f2e:	2001      	movs	r0, #1
 8014f30:	e7e7      	b.n	8014f02 <_raise_r+0x12>
 8014f32:	2400      	movs	r4, #0
 8014f34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014f38:	4628      	mov	r0, r5
 8014f3a:	4798      	blx	r3
 8014f3c:	2000      	movs	r0, #0
 8014f3e:	e7e0      	b.n	8014f02 <_raise_r+0x12>

08014f40 <raise>:
 8014f40:	4b02      	ldr	r3, [pc, #8]	; (8014f4c <raise+0xc>)
 8014f42:	4601      	mov	r1, r0
 8014f44:	6818      	ldr	r0, [r3, #0]
 8014f46:	f7ff bfd3 	b.w	8014ef0 <_raise_r>
 8014f4a:	bf00      	nop
 8014f4c:	20000164 	.word	0x20000164

08014f50 <_kill_r>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	4d07      	ldr	r5, [pc, #28]	; (8014f70 <_kill_r+0x20>)
 8014f54:	2300      	movs	r3, #0
 8014f56:	4604      	mov	r4, r0
 8014f58:	4608      	mov	r0, r1
 8014f5a:	4611      	mov	r1, r2
 8014f5c:	602b      	str	r3, [r5, #0]
 8014f5e:	f7ed f8ad 	bl	80020bc <_kill>
 8014f62:	1c43      	adds	r3, r0, #1
 8014f64:	d102      	bne.n	8014f6c <_kill_r+0x1c>
 8014f66:	682b      	ldr	r3, [r5, #0]
 8014f68:	b103      	cbz	r3, 8014f6c <_kill_r+0x1c>
 8014f6a:	6023      	str	r3, [r4, #0]
 8014f6c:	bd38      	pop	{r3, r4, r5, pc}
 8014f6e:	bf00      	nop
 8014f70:	2000c4ec 	.word	0x2000c4ec

08014f74 <_getpid_r>:
 8014f74:	f7ed b89a 	b.w	80020ac <_getpid>

08014f78 <__swhatbuf_r>:
 8014f78:	b570      	push	{r4, r5, r6, lr}
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f80:	2900      	cmp	r1, #0
 8014f82:	b096      	sub	sp, #88	; 0x58
 8014f84:	4615      	mov	r5, r2
 8014f86:	461e      	mov	r6, r3
 8014f88:	da0d      	bge.n	8014fa6 <__swhatbuf_r+0x2e>
 8014f8a:	89a3      	ldrh	r3, [r4, #12]
 8014f8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014f90:	f04f 0100 	mov.w	r1, #0
 8014f94:	bf0c      	ite	eq
 8014f96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014f9a:	2340      	movne	r3, #64	; 0x40
 8014f9c:	2000      	movs	r0, #0
 8014f9e:	6031      	str	r1, [r6, #0]
 8014fa0:	602b      	str	r3, [r5, #0]
 8014fa2:	b016      	add	sp, #88	; 0x58
 8014fa4:	bd70      	pop	{r4, r5, r6, pc}
 8014fa6:	466a      	mov	r2, sp
 8014fa8:	f000 f848 	bl	801503c <_fstat_r>
 8014fac:	2800      	cmp	r0, #0
 8014fae:	dbec      	blt.n	8014f8a <__swhatbuf_r+0x12>
 8014fb0:	9901      	ldr	r1, [sp, #4]
 8014fb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014fb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014fba:	4259      	negs	r1, r3
 8014fbc:	4159      	adcs	r1, r3
 8014fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014fc2:	e7eb      	b.n	8014f9c <__swhatbuf_r+0x24>

08014fc4 <__smakebuf_r>:
 8014fc4:	898b      	ldrh	r3, [r1, #12]
 8014fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014fc8:	079d      	lsls	r5, r3, #30
 8014fca:	4606      	mov	r6, r0
 8014fcc:	460c      	mov	r4, r1
 8014fce:	d507      	bpl.n	8014fe0 <__smakebuf_r+0x1c>
 8014fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014fd4:	6023      	str	r3, [r4, #0]
 8014fd6:	6123      	str	r3, [r4, #16]
 8014fd8:	2301      	movs	r3, #1
 8014fda:	6163      	str	r3, [r4, #20]
 8014fdc:	b002      	add	sp, #8
 8014fde:	bd70      	pop	{r4, r5, r6, pc}
 8014fe0:	ab01      	add	r3, sp, #4
 8014fe2:	466a      	mov	r2, sp
 8014fe4:	f7ff ffc8 	bl	8014f78 <__swhatbuf_r>
 8014fe8:	9900      	ldr	r1, [sp, #0]
 8014fea:	4605      	mov	r5, r0
 8014fec:	4630      	mov	r0, r6
 8014fee:	f7fd fb91 	bl	8012714 <_malloc_r>
 8014ff2:	b948      	cbnz	r0, 8015008 <__smakebuf_r+0x44>
 8014ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ff8:	059a      	lsls	r2, r3, #22
 8014ffa:	d4ef      	bmi.n	8014fdc <__smakebuf_r+0x18>
 8014ffc:	f023 0303 	bic.w	r3, r3, #3
 8015000:	f043 0302 	orr.w	r3, r3, #2
 8015004:	81a3      	strh	r3, [r4, #12]
 8015006:	e7e3      	b.n	8014fd0 <__smakebuf_r+0xc>
 8015008:	89a3      	ldrh	r3, [r4, #12]
 801500a:	6020      	str	r0, [r4, #0]
 801500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015010:	81a3      	strh	r3, [r4, #12]
 8015012:	9b00      	ldr	r3, [sp, #0]
 8015014:	6163      	str	r3, [r4, #20]
 8015016:	9b01      	ldr	r3, [sp, #4]
 8015018:	6120      	str	r0, [r4, #16]
 801501a:	b15b      	cbz	r3, 8015034 <__smakebuf_r+0x70>
 801501c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015020:	4630      	mov	r0, r6
 8015022:	f000 f81d 	bl	8015060 <_isatty_r>
 8015026:	b128      	cbz	r0, 8015034 <__smakebuf_r+0x70>
 8015028:	89a3      	ldrh	r3, [r4, #12]
 801502a:	f023 0303 	bic.w	r3, r3, #3
 801502e:	f043 0301 	orr.w	r3, r3, #1
 8015032:	81a3      	strh	r3, [r4, #12]
 8015034:	89a3      	ldrh	r3, [r4, #12]
 8015036:	431d      	orrs	r5, r3
 8015038:	81a5      	strh	r5, [r4, #12]
 801503a:	e7cf      	b.n	8014fdc <__smakebuf_r+0x18>

0801503c <_fstat_r>:
 801503c:	b538      	push	{r3, r4, r5, lr}
 801503e:	4d07      	ldr	r5, [pc, #28]	; (801505c <_fstat_r+0x20>)
 8015040:	2300      	movs	r3, #0
 8015042:	4604      	mov	r4, r0
 8015044:	4608      	mov	r0, r1
 8015046:	4611      	mov	r1, r2
 8015048:	602b      	str	r3, [r5, #0]
 801504a:	f7ed f896 	bl	800217a <_fstat>
 801504e:	1c43      	adds	r3, r0, #1
 8015050:	d102      	bne.n	8015058 <_fstat_r+0x1c>
 8015052:	682b      	ldr	r3, [r5, #0]
 8015054:	b103      	cbz	r3, 8015058 <_fstat_r+0x1c>
 8015056:	6023      	str	r3, [r4, #0]
 8015058:	bd38      	pop	{r3, r4, r5, pc}
 801505a:	bf00      	nop
 801505c:	2000c4ec 	.word	0x2000c4ec

08015060 <_isatty_r>:
 8015060:	b538      	push	{r3, r4, r5, lr}
 8015062:	4d06      	ldr	r5, [pc, #24]	; (801507c <_isatty_r+0x1c>)
 8015064:	2300      	movs	r3, #0
 8015066:	4604      	mov	r4, r0
 8015068:	4608      	mov	r0, r1
 801506a:	602b      	str	r3, [r5, #0]
 801506c:	f7ed f895 	bl	800219a <_isatty>
 8015070:	1c43      	adds	r3, r0, #1
 8015072:	d102      	bne.n	801507a <_isatty_r+0x1a>
 8015074:	682b      	ldr	r3, [r5, #0]
 8015076:	b103      	cbz	r3, 801507a <_isatty_r+0x1a>
 8015078:	6023      	str	r3, [r4, #0]
 801507a:	bd38      	pop	{r3, r4, r5, pc}
 801507c:	2000c4ec 	.word	0x2000c4ec

08015080 <fmaxf>:
 8015080:	b508      	push	{r3, lr}
 8015082:	ed2d 8b02 	vpush	{d8}
 8015086:	eeb0 8a40 	vmov.f32	s16, s0
 801508a:	eef0 8a60 	vmov.f32	s17, s1
 801508e:	f000 f813 	bl	80150b8 <__fpclassifyf>
 8015092:	b148      	cbz	r0, 80150a8 <fmaxf+0x28>
 8015094:	eeb0 0a68 	vmov.f32	s0, s17
 8015098:	f000 f80e 	bl	80150b8 <__fpclassifyf>
 801509c:	b130      	cbz	r0, 80150ac <fmaxf+0x2c>
 801509e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80150a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150a6:	dc01      	bgt.n	80150ac <fmaxf+0x2c>
 80150a8:	eeb0 8a68 	vmov.f32	s16, s17
 80150ac:	eeb0 0a48 	vmov.f32	s0, s16
 80150b0:	ecbd 8b02 	vpop	{d8}
 80150b4:	bd08      	pop	{r3, pc}
	...

080150b8 <__fpclassifyf>:
 80150b8:	ee10 3a10 	vmov	r3, s0
 80150bc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 80150c0:	d00d      	beq.n	80150de <__fpclassifyf+0x26>
 80150c2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80150c6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80150ca:	d30a      	bcc.n	80150e2 <__fpclassifyf+0x2a>
 80150cc:	4b07      	ldr	r3, [pc, #28]	; (80150ec <__fpclassifyf+0x34>)
 80150ce:	1e42      	subs	r2, r0, #1
 80150d0:	429a      	cmp	r2, r3
 80150d2:	d908      	bls.n	80150e6 <__fpclassifyf+0x2e>
 80150d4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 80150d8:	4258      	negs	r0, r3
 80150da:	4158      	adcs	r0, r3
 80150dc:	4770      	bx	lr
 80150de:	2002      	movs	r0, #2
 80150e0:	4770      	bx	lr
 80150e2:	2004      	movs	r0, #4
 80150e4:	4770      	bx	lr
 80150e6:	2003      	movs	r0, #3
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	007ffffe 	.word	0x007ffffe

080150f0 <_init>:
 80150f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150f2:	bf00      	nop
 80150f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150f6:	bc08      	pop	{r3}
 80150f8:	469e      	mov	lr, r3
 80150fa:	4770      	bx	lr

080150fc <_fini>:
 80150fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150fe:	bf00      	nop
 8015100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015102:	bc08      	pop	{r3}
 8015104:	469e      	mov	lr, r3
 8015106:	4770      	bx	lr
